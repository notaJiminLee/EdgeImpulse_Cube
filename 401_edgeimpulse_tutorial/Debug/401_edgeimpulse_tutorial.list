
401_edgeimpulse_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017940  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001f2c8  08017ae0  08017ae0  00027ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08036da8  08036da8  00050958  2**0
                  CONTENTS
  4 .ARM          00000008  08036da8  08036da8  00046da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08036db0  08036db0  00050958  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08036db0  08036db0  00046db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08036db8  08036db8  00046db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000958  20000000  08036dc0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  20000958  08037718  00050958  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ddc  08037718  00050ddc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050958  2**0
                  CONTENTS, READONLY
 12 .debug_info   000ec1aa  00000000  00000000  00050988  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000d174  00000000  00000000  0013cb32  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000049d0  00000000  00000000  00149ca8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004858  00000000  00000000  0014e678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023675  00000000  00000000  00152ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00034d29  00000000  00000000  00176545  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00136904  00000000  00000000  001ab26e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002e1b72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00016c04  00000000  00000000  002e1bf0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000958 	.word	0x20000958
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08017ac8 	.word	0x08017ac8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000095c 	.word	0x2000095c
 80001dc:	08017ac8 	.word	0x08017ac8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9ac 	b.w	8001028 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f840 	bl	8000d5c <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <__aeabi_d2ulz+0x3c>)
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	2200      	movs	r2, #0
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <__aeabi_d2ulz+0x40>)
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4310      	orrs	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	bdd0      	pop	{r4, r6, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	3df00000 	.word	0x3df00000
 8000d58:	41f00000 	.word	0x41f00000

08000d5c <__udivmoddi4>:
 8000d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d60:	9e08      	ldr	r6, [sp, #32]
 8000d62:	4604      	mov	r4, r0
 8000d64:	4688      	mov	r8, r1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d14b      	bne.n	8000e02 <__udivmoddi4+0xa6>
 8000d6a:	428a      	cmp	r2, r1
 8000d6c:	4615      	mov	r5, r2
 8000d6e:	d967      	bls.n	8000e40 <__udivmoddi4+0xe4>
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	b14a      	cbz	r2, 8000d8a <__udivmoddi4+0x2e>
 8000d76:	f1c2 0720 	rsb	r7, r2, #32
 8000d7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d82:	4095      	lsls	r5, r2
 8000d84:	ea47 0803 	orr.w	r8, r7, r3
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d94:	fa1f fc85 	uxth.w	ip, r5
 8000d98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da0:	fb07 f10c 	mul.w	r1, r7, ip
 8000da4:	4299      	cmp	r1, r3
 8000da6:	d909      	bls.n	8000dbc <__udivmoddi4+0x60>
 8000da8:	18eb      	adds	r3, r5, r3
 8000daa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dae:	f080 811b 	bcs.w	8000fe8 <__udivmoddi4+0x28c>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 8118 	bls.w	8000fe8 <__udivmoddi4+0x28c>
 8000db8:	3f02      	subs	r7, #2
 8000dba:	442b      	add	r3, r5
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x8c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x290>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x290>
 8000de4:	3802      	subs	r0, #2
 8000de6:	442c      	add	r4, r5
 8000de8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	2700      	movs	r7, #0
 8000df2:	b11e      	cbz	r6, 8000dfc <__udivmoddi4+0xa0>
 8000df4:	40d4      	lsrs	r4, r2
 8000df6:	2300      	movs	r3, #0
 8000df8:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0xbe>
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	f000 80eb 	beq.w	8000fe2 <__udivmoddi4+0x286>
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000e12:	4638      	mov	r0, r7
 8000e14:	4639      	mov	r1, r7
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f783 	clz	r7, r3
 8000e1e:	2f00      	cmp	r7, #0
 8000e20:	d147      	bne.n	8000eb2 <__udivmoddi4+0x156>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xd0>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80fa 	bhi.w	8001020 <__udivmoddi4+0x2c4>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4698      	mov	r8, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d0e0      	beq.n	8000dfc <__udivmoddi4+0xa0>
 8000e3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3e:	e7dd      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000e40:	b902      	cbnz	r2, 8000e44 <__udivmoddi4+0xe8>
 8000e42:	deff      	udf	#255	; 0xff
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f040 808f 	bne.w	8000f6c <__udivmoddi4+0x210>
 8000e4e:	1b49      	subs	r1, r1, r5
 8000e50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e54:	fa1f f885 	uxth.w	r8, r5
 8000e58:	2701      	movs	r7, #1
 8000e5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5e:	0c23      	lsrs	r3, r4, #16
 8000e60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e68:	fb08 f10c 	mul.w	r1, r8, ip
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x124>
 8000e70:	18eb      	adds	r3, r5, r3
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x122>
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2bc>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x14c>
 8000e98:	192c      	adds	r4, r5, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x14a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80b6 	bhi.w	8001012 <__udivmoddi4+0x2b6>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e79f      	b.n	8000df2 <__udivmoddi4+0x96>
 8000eb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb6:	40bb      	lsls	r3, r7
 8000eb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ebc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ec0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ecc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ed0:	4325      	orrs	r5, r4
 8000ed2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed6:	0c2c      	lsrs	r4, r5, #16
 8000ed8:	fb08 3319 	mls	r3, r8, r9, r3
 8000edc:	fa1f fa8e 	uxth.w	sl, lr
 8000ee0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee8:	429c      	cmp	r4, r3
 8000eea:	fa02 f207 	lsl.w	r2, r2, r7
 8000eee:	fa00 f107 	lsl.w	r1, r0, r7
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b0>
 8000ef4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000efc:	f080 8087 	bcs.w	800100e <__udivmoddi4+0x2b2>
 8000f00:	429c      	cmp	r4, r3
 8000f02:	f240 8084 	bls.w	800100e <__udivmoddi4+0x2b2>
 8000f06:	f1a9 0902 	sub.w	r9, r9, #2
 8000f0a:	4473      	add	r3, lr
 8000f0c:	1b1b      	subs	r3, r3, r4
 8000f0e:	b2ad      	uxth	r5, r5
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3310 	mls	r3, r8, r0, r3
 8000f18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f20:	45a2      	cmp	sl, r4
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1da>
 8000f24:	eb1e 0404 	adds.w	r4, lr, r4
 8000f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f2c:	d26b      	bcs.n	8001006 <__udivmoddi4+0x2aa>
 8000f2e:	45a2      	cmp	sl, r4
 8000f30:	d969      	bls.n	8001006 <__udivmoddi4+0x2aa>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4474      	add	r4, lr
 8000f36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3e:	eba4 040a 	sub.w	r4, r4, sl
 8000f42:	454c      	cmp	r4, r9
 8000f44:	46c2      	mov	sl, r8
 8000f46:	464b      	mov	r3, r9
 8000f48:	d354      	bcc.n	8000ff4 <__udivmoddi4+0x298>
 8000f4a:	d051      	beq.n	8000ff0 <__udivmoddi4+0x294>
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	d069      	beq.n	8001024 <__udivmoddi4+0x2c8>
 8000f50:	ebb1 050a 	subs.w	r5, r1, sl
 8000f54:	eb64 0403 	sbc.w	r4, r4, r3
 8000f58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f5c:	40fd      	lsrs	r5, r7
 8000f5e:	40fc      	lsrs	r4, r7
 8000f60:	ea4c 0505 	orr.w	r5, ip, r5
 8000f64:	e9c6 5400 	strd	r5, r4, [r6]
 8000f68:	2700      	movs	r7, #0
 8000f6a:	e747      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000f6c:	f1c2 0320 	rsb	r3, r2, #32
 8000f70:	fa20 f703 	lsr.w	r7, r0, r3
 8000f74:	4095      	lsls	r5, r2
 8000f76:	fa01 f002 	lsl.w	r0, r1, r2
 8000f7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f82:	4338      	orrs	r0, r7
 8000f84:	0c01      	lsrs	r1, r0, #16
 8000f86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f8a:	fa1f f885 	uxth.w	r8, r5
 8000f8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f96:	fb07 f308 	mul.w	r3, r7, r8
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d907      	bls.n	8000fb2 <__udivmoddi4+0x256>
 8000fa2:	1869      	adds	r1, r5, r1
 8000fa4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa8:	d22f      	bcs.n	800100a <__udivmoddi4+0x2ae>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d92d      	bls.n	800100a <__udivmoddi4+0x2ae>
 8000fae:	3f02      	subs	r7, #2
 8000fb0:	4429      	add	r1, r5
 8000fb2:	1acb      	subs	r3, r1, r3
 8000fb4:	b281      	uxth	r1, r0
 8000fb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc2:	fb00 f308 	mul.w	r3, r0, r8
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d907      	bls.n	8000fda <__udivmoddi4+0x27e>
 8000fca:	1869      	adds	r1, r5, r1
 8000fcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fd0:	d217      	bcs.n	8001002 <__udivmoddi4+0x2a6>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	d915      	bls.n	8001002 <__udivmoddi4+0x2a6>
 8000fd6:	3802      	subs	r0, #2
 8000fd8:	4429      	add	r1, r5
 8000fda:	1ac9      	subs	r1, r1, r3
 8000fdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fe0:	e73b      	b.n	8000e5a <__udivmoddi4+0xfe>
 8000fe2:	4637      	mov	r7, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e709      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000fe8:	4607      	mov	r7, r0
 8000fea:	e6e7      	b.n	8000dbc <__udivmoddi4+0x60>
 8000fec:	4618      	mov	r0, r3
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x8c>
 8000ff0:	4541      	cmp	r1, r8
 8000ff2:	d2ab      	bcs.n	8000f4c <__udivmoddi4+0x1f0>
 8000ff4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ffc:	3801      	subs	r0, #1
 8000ffe:	4613      	mov	r3, r2
 8001000:	e7a4      	b.n	8000f4c <__udivmoddi4+0x1f0>
 8001002:	4660      	mov	r0, ip
 8001004:	e7e9      	b.n	8000fda <__udivmoddi4+0x27e>
 8001006:	4618      	mov	r0, r3
 8001008:	e795      	b.n	8000f36 <__udivmoddi4+0x1da>
 800100a:	4667      	mov	r7, ip
 800100c:	e7d1      	b.n	8000fb2 <__udivmoddi4+0x256>
 800100e:	4681      	mov	r9, r0
 8001010:	e77c      	b.n	8000f0c <__udivmoddi4+0x1b0>
 8001012:	3802      	subs	r0, #2
 8001014:	442c      	add	r4, r5
 8001016:	e747      	b.n	8000ea8 <__udivmoddi4+0x14c>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	442b      	add	r3, r5
 800101e:	e72f      	b.n	8000e80 <__udivmoddi4+0x124>
 8001020:	4638      	mov	r0, r7
 8001022:	e708      	b.n	8000e36 <__udivmoddi4+0xda>
 8001024:	4637      	mov	r7, r6
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0xa0>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	fab3 f383 	clz	r3, r3
 800103a:	f1c3 031f 	rsb	r3, r3, #31
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	ed87 0a01 	vstr	s0, [r7, #4]
 800106c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001070:	eef0 7ae7 	vabs.f32	s15, s15
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	ffff8000 	.word	0xffff8000

08001098 <_ZNSt14numeric_limitsIsE3maxEv>:

      static _GLIBCXX_CONSTEXPR short
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
 800109c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	2203      	movs	r2, #3
 800110c:	4798      	blx	r3
    }
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	731a      	strb	r2, [r3, #12]
 800115a:	e00e      	b.n	800117a <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	2101      	movs	r1, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f00b fb2b 	bl	800c7c4 <_Z9ei_callocjj>
 800116e:	4602      	mov	r2, r0
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2201      	movs	r2, #1
 8001178:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <_ZN2ei9ei_matrixD1Ev+0x22>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7b1b      	ldrb	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00b fb17 	bl	800c7e0 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	731a      	strb	r2, [r3, #12]
 80011dc:	e00d      	b.n	80011fa <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	2101      	movs	r1, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00b faeb 	bl	800c7c4 <_Z9ei_callocjj>
 80011ee:	4602      	mov	r2, r0
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2201      	movs	r2, #1
 80011f8:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7b1b      	ldrb	r3, [r3, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d004      	beq.n	8001232 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f00b fad7 	bl	800c7e0 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
 8001240:	e7fe      	b.n	8001240 <_ZSt25__throw_bad_function_callv+0x4>

08001242 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	ed87 0a01 	vstr	s0, [r7, #4]
 800124c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001250:	f011 f932 	bl	80124b8 <expf>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	ed87 0a01 	vstr	s0, [r7, #4]
 800126c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001270:	f010 ff32 	bl	80120d8 <roundf>
 8001274:	eef0 7a40 	vmov.f32	s15, s0
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4619      	mov	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	461a      	mov	r2, r3
 800129a:	f000 f817 	bl	80012cc <_ZN2ei5numpy9transposeEPfii>
 800129e:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	e00c      	b.n	80012c4 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 80012b6:	893a      	ldrh	r2, [r7, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 80012bc:	897a      	ldrh	r2, [r7, #10]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80012c2:	2300      	movs	r3, #0
    }
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_ZN2ei5numpy9transposeEPfii>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b08f      	sub	sp, #60	; 0x3c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80012e0:	2300      	movs	r3, #0
 80012e2:	f7ff ff2a 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <_ZN2ei5numpy9transposeEPfii+0x24>
 80012ec:	4c23      	ldr	r4, [pc, #140]	; (800137c <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80012ee:	e03b      	b.n	8001368 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80012f6:	4c21      	ldr	r4, [pc, #132]	; (800137c <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80012f8:	e036      	b.n	8001368 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001300:	da03      	bge.n	800130a <_ZN2ei5numpy9transposeEPfii+0x3e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	db01      	blt.n	800130e <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 800130a:	4c1d      	ldr	r4, [pc, #116]	; (8001380 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 800130c:	e02c      	b.n	8001368 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	b29b      	uxth	r3, r3
 8001312:	83bb      	strh	r3, [r7, #28]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	b29b      	uxth	r3, r3
 8001318:	83fb      	strh	r3, [r7, #30]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	b29b      	uxth	r3, r3
 8001322:	82bb      	strh	r3, [r7, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	b29b      	uxth	r3, r3
 8001328:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 800132c:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 800132e:	f107 0214 	add.w	r2, r7, #20
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f006 fecf 	bl	80080dc <arm_mat_trans_f32>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001344:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 800134c:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001350:	e00a      	b.n	8001368 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	461a      	mov	r2, r3
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f013 fc65 	bl	8014c30 <memcpy>

        return EIDSP_OK;
 8001366:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff0f 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8001372:	4623      	mov	r3, r4
    }
 8001374:	4618      	mov	r0, r3
 8001376:	373c      	adds	r7, #60	; 0x3c
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	fffffc16 	.word	0xfffffc16
 8001380:	fffffc0c 	.word	0xfffffc0c

08001384 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001390:	edd7 7a00 	vldr	s15, [r7]
 8001394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001398:	eef4 7a47 	vcmp.f32	s15, s14
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d101      	bne.n	80013a6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 80013a2:	2300      	movs	r3, #0
 80013a4:	e033      	b.n	800140e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ae:	d204      	bcs.n	80013ba <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b8:	d301      	bcc.n	80013be <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 80013bc:	e027      	b.n	800140e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	82bb      	strh	r3, [r7, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	82fb      	strh	r3, [r7, #22]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	81bb      	strh	r3, [r7, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	81fb      	strh	r3, [r7, #14]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4611      	mov	r1, r2
 80013f4:	ed97 0a00 	vldr	s0, [r7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f006 fe39 	bl	8008070 <arm_mat_scale_f32>
 80013fe:	4603      	mov	r3, r0
 8001400:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	e000      	b.n	800140e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 800140c:	2300      	movs	r3, #0
    }
 800140e:	4618      	mov	r0, r3
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	fffffc0c 	.word	0xfffffc0c

0800141c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6892      	ldr	r2, [r2, #8]
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	429a      	cmp	r2, r3
 800143c:	d215      	bcs.n	800146a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	edd7 7a00 	vldr	s15, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3301      	adds	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e7e0      	b.n	800142c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 800146a:	2300      	movs	r3, #0
    }
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d001      	beq.n	8001492 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800148e:	4c27      	ldr	r4, [pc, #156]	; (800152c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001490:	e047      	b.n	8001522 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xaa>
        }

        if (subtract_matrix->cols != 1) {
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800149a:	4c24      	ldr	r4, [pc, #144]	; (800152c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 800149c:	e041      	b.n	8001522 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xaa>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d239      	bcs.n	8001520 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa8>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689d      	ldr	r5, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	69f9      	ldr	r1, [r7, #28]
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	f107 000c 	add.w	r0, r7, #12
 80014c6:	462a      	mov	r2, r5
 80014c8:	2101      	movs	r1, #1
 80014ca:	f7ff fe36 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 80014d4:	4c16      	ldr	r4, [pc, #88]	; (8001530 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb8>)
 80014d6:	2500      	movs	r5, #0
 80014d8:	e016      	b.n	8001508 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x90>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff93 	bl	800141c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 80014f6:	4603      	mov	r3, r0
 80014f8:	60bb      	str	r3, [r7, #8]
            if (ret != EIDSP_OK) {
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
                EIDSP_ERR(ret);
 8001500:	68bc      	ldr	r4, [r7, #8]
 8001502:	2500      	movs	r5, #0
 8001504:	e000      	b.n	8001508 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x90>
 8001506:	2501      	movs	r5, #1
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe3f 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8001512:	2d01      	cmp	r5, #1
 8001514:	d105      	bne.n	8001522 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xaa>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001516:	bf00      	nop
        for (size_t row = 0; row < matrix->rows; row++) {
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	3301      	adds	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	e7c0      	b.n	80014a2 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 8001520:	2400      	movs	r4, #0
 8001522:	4623      	mov	r3, r4
    }
 8001524:	4618      	mov	r0, r3
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bdb0      	pop	{r4, r5, r7, pc}
 800152c:	fffffc14 	.word	0xfffffc14
 8001530:	fffffc16 	.word	0xfffffc16

08001534 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 800154c:	e028      	b.n	80015a0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d001      	beq.n	800155a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001558:	e022      	b.n	80015a0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d21a      	bcs.n	800159e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	18d0      	adds	r0, r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f107 0208 	add.w	r2, r7, #8
 8001582:	4619      	mov	r1, r3
 8001584:	f006 fe1a 	bl	80081bc <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e7df      	b.n	800155e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 800159e:	2300      	movs	r3, #0
    }
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	fffffc14 	.word	0xfffffc14

080015ac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d001      	beq.n	80015c6 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80015c4:	e028      	b.n	8001618 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80015d0:	e022      	b.n	8001618 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d21a      	bcs.n	8001616 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	18d0      	adds	r0, r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f107 0208 	add.w	r2, r7, #8
 80015fa:	4619      	mov	r1, r3
 80015fc:	f006 fdaf 	bl	800815e <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e7df      	b.n	80015d6 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001616:	2300      	movs	r3, #0
    }
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	fffffc14 	.word	0xfffffc14

08001624 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	b099      	sub	sp, #100	; 0x64
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3301      	adds	r3, #1
 8001638:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001642:	4c6e      	ldr	r4, [pc, #440]	; (80017fc <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d8>)
 8001644:	e0d4      	b.n	80017f0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1cc>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800164a:	429a      	cmp	r2, r3
 800164c:	d901      	bls.n	8001652 <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 800164e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001650:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001652:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001656:	2300      	movs	r3, #0
 8001658:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800165a:	2101      	movs	r1, #1
 800165c:	f7ff fd6d 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8001660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001666:	4c66      	ldr	r4, [pc, #408]	; (8001800 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001668:	e0bd      	b.n	80017e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
        if (!fft_input.buffer) {
 800166a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001670:	4c63      	ldr	r4, [pc, #396]	; (8001800 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001672:	e0b8      	b.n	80017e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001674:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	461a      	mov	r2, r3
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	f013 fad7 	bl	8014c30 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	18d0      	adds	r0, r2, r3
 800168a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	461a      	mov	r2, r3
 8001694:	2100      	movs	r1, #0
 8001696:	f013 faef 	bl	8014c78 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 800169a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800169c:	2b20      	cmp	r3, #32
 800169e:	d026      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016a2:	2b40      	cmp	r3, #64	; 0x40
 80016a4:	d023      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016a8:	2b80      	cmp	r3, #128	; 0x80
 80016aa:	d020      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b2:	d01c      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ba:	d018      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80016bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c2:	d014      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ca:	d010      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d2:	d00c      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80016d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f000 f9e4 	bl	8001aa8 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 80016e0:	4603      	mov	r3, r0
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
            if (ret != EIDSP_OK) {
 80016e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d079      	beq.n	80017de <_ZN2ei5numpy4rfftEPKfjPfjj+0x1ba>
                EIDSP_ERR(ret);
 80016ea:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80016ec:	e07b      	b.n	80017e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 80016ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f009 fa99 	bl	800ac30 <arm_rfft_fast_init_f32>
 80016fe:	4603      	mov	r3, r0
 8001700:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (status != ARM_MATH_SUCCESS) {
 8001704:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <_ZN2ei5numpy4rfftEPKfjPfjj+0xee>
                return status;
 800170c:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8001710:	e068      	b.n	80017e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c0>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001712:	f107 0014 	add.w	r0, r7, #20
 8001716:	2300      	movs	r3, #0
 8001718:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800171a:	2101      	movs	r1, #1
 800171c:	f7ff fd0d 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <_ZN2ei5numpy4rfftEPKfjPfjj+0x108>
 8001726:	4c36      	ldr	r4, [pc, #216]	; (8001800 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001728:	2500      	movs	r5, #0
 800172a:	e050      	b.n	80017ce <_ZN2ei5numpy4rfftEPKfjPfjj+0x1aa>
            if (!fft_output.buffer) {
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <_ZN2ei5numpy4rfftEPKfjPfjj+0x114>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001732:	4c33      	ldr	r4, [pc, #204]	; (8001800 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001734:	2500      	movs	r5, #0
 8001736:	e04a      	b.n	80017ce <_ZN2ei5numpy4rfftEPKfjPfjj+0x1aa>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001738:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001740:	2300      	movs	r3, #0
 8001742:	f009 f915 	bl	800a970 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001752:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001756:	3b01      	subs	r3, #1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	440b      	add	r3, r1
 800175e:	6852      	ldr	r2, [r2, #4]
 8001760:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001762:	2302      	movs	r3, #2
 8001764:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001766:	2301      	movs	r3, #1
 8001768:	65bb      	str	r3, [r7, #88]	; 0x58
 800176a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176c:	3b01      	subs	r3, #1
 800176e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001770:	429a      	cmp	r2, r3
 8001772:	d22b      	bcs.n	80017cc <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	f107 0210 	add.w	r2, r7, #16
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f006 fd1a 	bl	80081bc <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fef4 	bl	8000578 <__aeabi_f2d>
 8001790:	4605      	mov	r5, r0
 8001792:	460e      	mov	r6, r1
 8001794:	2002      	movs	r0, #2
 8001796:	f003 f8b6 	bl	8004906 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800179a:	ec53 2b10 	vmov	r2, r3, d0
 800179e:	4628      	mov	r0, r5
 80017a0:	4631      	mov	r1, r6
 80017a2:	f7fe ff41 	bl	8000628 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	18d5      	adds	r5, r2, r3
 80017b6:	f7ff fa2f 	bl	8000c18 <__aeabi_d2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	602b      	str	r3, [r5, #0]

                fft_output_buffer_ix += 2;
 80017be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c0:	3302      	adds	r3, #2
 80017c2:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80017c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017c6:	3301      	adds	r3, #1
 80017c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80017ca:	e7ce      	b.n	800176a <_ZN2ei5numpy4rfftEPKfjPfjj+0x146>
 80017cc:	2501      	movs	r5, #1
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fcdc 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80017d8:	2d01      	cmp	r5, #1
 80017da:	d103      	bne.n	80017e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c0>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80017dc:	e000      	b.n	80017e0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1bc>
            }
 80017de:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80017e0:	2400      	movs	r4, #0
 80017e2:	e000      	b.n	80017e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
                return status;
 80017e4:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 80017e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fcd0 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80017f0:	4623      	mov	r3, r4
    }
 80017f2:	4618      	mov	r0, r3
 80017f4:	3764      	adds	r7, #100	; 0x64
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	fffffc11 	.word	0xfffffc11
 8001800:	fffffc16 	.word	0xfffffc16

08001804 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b098      	sub	sp, #96	; 0x60
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3301      	adds	r3, #1
 8001818:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800181e:	429a      	cmp	r2, r3
 8001820:	d001      	beq.n	8001826 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001822:	4c72      	ldr	r4, [pc, #456]	; (80019ec <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e8>)
 8001824:	e0dd      	b.n	80019e2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1de>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800182a:	429a      	cmp	r2, r3
 800182c:	d901      	bls.n	8001832 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 800182e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001830:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001832:	2300      	movs	r3, #0
 8001834:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800183a:	429a      	cmp	r2, r3
 800183c:	d101      	bne.n	8001842 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001842:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001848:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800184a:	2101      	movs	r1, #1
 800184c:	f7ff fc75 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8001850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8001856:	4c66      	ldr	r4, [pc, #408]	; (80019f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 8001858:	e0be      	b.n	80019d8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d4>
        if (!fft_input.buffer) {
 800185a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001860:	4c63      	ldr	r4, [pc, #396]	; (80019f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 8001862:	e0b9      	b.n	80019d8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d4>
        }

        if (!fft_input_buffer) {
 8001864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d112      	bne.n	8001890 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 800186a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	461a      	mov	r2, r3
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	f013 f9dc 	bl	8014c30 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	18d0      	adds	r0, r2, r3
 8001880:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	461a      	mov	r2, r3
 800188a:	2100      	movs	r1, #0
 800188c:	f013 f9f4 	bl	8014c78 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001892:	2b20      	cmp	r3, #32
 8001894:	d026      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 8001896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001898:	2b40      	cmp	r3, #64	; 0x40
 800189a:	d023      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 800189c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800189e:	2b80      	cmp	r3, #128	; 0x80
 80018a0:	d020      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 80018a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a8:	d01c      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 80018aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b0:	d018      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80018b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b8:	d014      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 80018ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018c0:	d010      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 80018c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c8:	d00c      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80018ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	f000 f95b 	bl	8001b8c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 80018d6:	4603      	mov	r3, r0
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
            if (ret != EIDSP_OK) {
 80018da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d077      	beq.n	80019d0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1cc>
                EIDSP_ERR(ret);
 80018e0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80018e2:	e079      	b.n	80019d8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d4>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 80018e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f009 f99e 	bl	800ac30 <arm_rfft_fast_init_f32>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (status != ARM_MATH_SUCCESS) {
 80018fa:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x104>
                return status;
 8001902:	f997 404f 	ldrsb.w	r4, [r7, #79]	; 0x4f
 8001906:	e066      	b.n	80019d6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d2>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001908:	f107 0010 	add.w	r0, r7, #16
 800190c:	2300      	movs	r3, #0
 800190e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001910:	2101      	movs	r1, #1
 8001912:	f7ff fc12 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11e>
 800191c:	4c34      	ldr	r4, [pc, #208]	; (80019f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 800191e:	2500      	movs	r5, #0
 8001920:	e04e      	b.n	80019c0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1bc>
            if (!fft_output.buffer) {
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x12a>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001928:	4c31      	ldr	r4, [pc, #196]	; (80019f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 800192a:	2500      	movs	r5, #0
 800192c:	e048      	b.n	80019c0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1bc>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 800192e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	f107 0020 	add.w	r0, r7, #32
 8001936:	2300      	movs	r3, #0
 8001938:	f009 f81a 	bl	800a970 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001950:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001954:	3b01      	subs	r3, #1
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	440b      	add	r3, r1
 800195c:	6852      	ldr	r2, [r2, #4]
 800195e:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8001960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001962:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001966:	3b01      	subs	r3, #1
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8001974:	2302      	movs	r3, #2
 8001976:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001978:	2301      	movs	r3, #1
 800197a:	657b      	str	r3, [r7, #84]	; 0x54
 800197c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800197e:	3b01      	subs	r3, #1
 8001980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001982:	429a      	cmp	r2, r3
 8001984:	d21b      	bcs.n	80019be <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ba>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	441a      	add	r2, r3
 800198e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	440b      	add	r3, r1
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800199e:	3301      	adds	r3, #1
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	441a      	add	r2, r3
 80019a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	440b      	add	r3, r1
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80019b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b2:	3302      	adds	r3, #2
 80019b4:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	3301      	adds	r3, #1
 80019ba:	657b      	str	r3, [r7, #84]	; 0x54
 80019bc:	e7de      	b.n	800197c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x178>
 80019be:	2501      	movs	r5, #1
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fbe3 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80019ca:	2d01      	cmp	r5, #1
 80019cc:	d103      	bne.n	80019d6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d2>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80019ce:	e000      	b.n	80019d2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ce>
            }
 80019d0:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80019d2:	2400      	movs	r4, #0
 80019d4:	e000      	b.n	80019d8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d4>
                return status;
 80019d6:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 80019d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fbd7 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80019e2:	4623      	mov	r3, r4
    }
 80019e4:	4618      	mov	r0, r3
 80019e6:	3760      	adds	r7, #96	; 0x60
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	fffffc11 	.word	0xfffffc11
 80019f0:	fffffc16 	.word	0xfffffc16

080019f4 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80019fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8001a14:	e03f      	b.n	8001a96 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d104      	bne.n	8001a26 <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e037      	b.n	8001a96 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8001a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a42:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d216      	bcs.n	8001a82 <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e7e3      	b.n	8001a4a <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 8001a94:	2300      	movs	r3, #0
    }
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	fffffc10 	.word	0xfffffc10

08001aa8 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

        return EIDSP_OK;
    }

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f00a fe76 	bl	800c7ac <_Z9ei_mallocj>
 8001ac0:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8001aca:	e059      	b.n	8001b80 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f00a faad 	bl	800c038 <kiss_fftr_alloc>
 8001ade:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8001ae6:	69b8      	ldr	r0, [r7, #24]
 8001ae8:	f00a fe7a 	bl	800c7e0 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8001aee:	e047      	b.n	8001b80 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f00a fbc9 	bl	800c28c <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d235      	bcs.n	8001b72 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xca>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	2002      	movs	r0, #2
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	f002 ff0d 	bl	8004936 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b1c:	ec55 4b10 	vmov	r4, r5, d0
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4413      	add	r3, r2
 8001b28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b32:	f002 ff00 	bl	8004936 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b36:	ec53 2b10 	vmov	r2, r3, d0
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f7fe fbbd 	bl	80002bc <__adddf3>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	ec44 3b17 	vmov	d7, r3, r4
 8001b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4e:	eef0 0a67 	vmov.f32	s1, s15
 8001b52:	f010 fc57 	bl	8012404 <sqrt>
 8001b56:	ec51 0b10 	vmov	r0, r1, d0
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	18d4      	adds	r4, r2, r3
 8001b62:	f7ff f859 	bl	8000c18 <__aeabi_d2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	e7c5      	b.n	8001afe <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f00a fe34 	bl	800c7e0 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8001b78:	69b8      	ldr	r0, [r7, #24]
 8001b7a:	f00a fe31 	bl	800c7e0 <_Z7ei_freePv>

        return EIDSP_OK;
 8001b7e:	2300      	movs	r3, #0
    }
 8001b80:	4618      	mov	r0, r3
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bdb0      	pop	{r4, r5, r7, pc}
 8001b88:	fffffc16 	.word	0xfffffc16

08001b8c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f00a fa46 	bl	800c038 <kiss_fftr_alloc>
 8001bac:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8001bb6:	e008      	b.n	8001bca <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	68f9      	ldr	r1, [r7, #12]
 8001bbc:	6978      	ldr	r0, [r7, #20]
 8001bbe:	f00a fb65 	bl	800c28c <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f00a fe0c 	bl	800c7e0 <_Z7ei_freePv>

        return EIDSP_OK;
 8001bc8:	2300      	movs	r3, #0
    }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	fffffc16 	.word	0xfffffc16

08001bd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8001bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bdc:	b095      	sub	sp, #84	; 0x54
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6178      	str	r0, [r7, #20]
 8001be2:	ed87 0a04 	vstr	s0, [r7, #16]
 8001be6:	edc7 0a03 	vstr	s1, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	0fda      	lsrs	r2, r3, #31
 8001bf4:	4413      	add	r3, r2
 8001bf6:	105b      	asrs	r3, r3, #1
 8001bf8:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7fe fcbc 	bl	8000578 <__aeabi_f2d>
 8001c00:	a3f5      	add	r3, pc, #980	; (adr r3, 8001fd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fd0f 	bl	8000628 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4690      	mov	r8, r2
 8001c10:	4699      	mov	r9, r3
 8001c12:	6938      	ldr	r0, [r7, #16]
 8001c14:	f7fe fcb0 	bl	8000578 <__aeabi_f2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	4649      	mov	r1, r9
 8001c20:	f7fe fe2c 	bl	800087c <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	ec43 2b17 	vmov	d7, r2, r3
 8001c2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c30:	eef0 0a67 	vmov.f32	s1, s15
 8001c34:	f010 fa20 	bl	8012078 <tan>
 8001c38:	ec53 2b10 	vmov	r2, r3, d0
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe ffea 	bl	8000c18 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8001c48:	2002      	movs	r0, #2
 8001c4a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001c4e:	f002 fe72 	bl	8004936 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c52:	ec53 2b10 	vmov	r2, r3, d0
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffdd 	bl	8000c18 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8001c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c64:	2104      	movs	r1, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00a fdac 	bl	800c7c4 <_Z9ei_callocjj>
 8001c6c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	2104      	movs	r1, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00a fda6 	bl	800c7c4 <_Z9ei_callocjj>
 8001c78:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00a fda0 	bl	800c7c4 <_Z9ei_callocjj>
 8001c84:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c88:	2104      	movs	r1, #4
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00a fd9a 	bl	800c7c4 <_Z9ei_callocjj>
 8001c90:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c94:	2104      	movs	r1, #4
 8001c96:	4618      	mov	r0, r3
 8001c98:	f00a fd94 	bl	800c7c4 <_Z9ei_callocjj>
 8001c9c:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00a fd8e 	bl	800c7c4 <_Z9ei_callocjj>
 8001ca8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 8001caa:	2300      	movs	r3, #0
 8001cac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	f280 80e5 	bge.w	8001e82 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8001cb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cba:	f7fe fc4b 	bl	8000554 <__aeabi_i2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	f7fe fafb 	bl	80002bc <__adddf3>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4bc3      	ldr	r3, [pc, #780]	; (8001fe0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8001cd4:	f7fe faf2 	bl	80002bc <__adddf3>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	a3bd      	add	r3, pc, #756	; (adr r3, 8001fd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fc9f 	bl	8000628 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4690      	mov	r8, r2
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7fe fc2e 	bl	8000554 <__aeabi_i2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	f7fe fade 	bl	80002bc <__adddf3>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4640      	mov	r0, r8
 8001d06:	4649      	mov	r1, r9
 8001d08:	f7fe fdb8 	bl	800087c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	ec43 2b17 	vmov	d7, r2, r3
 8001d14:	eeb0 0a47 	vmov.f32	s0, s14
 8001d18:	eef0 0a67 	vmov.f32	s1, s15
 8001d1c:	f010 f964 	bl	8011fe8 <sin>
 8001d20:	ec53 2b10 	vmov	r2, r3, d0
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ff76 	bl	8000c18 <__aeabi_d2f>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8001d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d32:	f7fe fc21 	bl	8000578 <__aeabi_f2d>
 8001d36:	4680      	mov	r8, r0
 8001d38:	4689      	mov	r9, r1
 8001d3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d3c:	f7fe fc1c 	bl	8000578 <__aeabi_f2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	f7fe faba 	bl	80002bc <__adddf3>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4692      	mov	sl, r2
 8001d4e:	469b      	mov	fp, r3
 8001d50:	69f8      	ldr	r0, [r7, #28]
 8001d52:	f7fe fc11 	bl	8000578 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4650      	mov	r0, sl
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	f7fe fc63 	bl	8000628 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4640      	mov	r0, r8
 8001d68:	4649      	mov	r1, r9
 8001d6a:	f7fe faa7 	bl	80002bc <__adddf3>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8001d7c:	f7fe fa9e 	bl	80002bc <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7fe ff46 	bl	8000c18 <__aeabi_d2f>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 8001d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d96:	4413      	add	r3, r2
 8001d98:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001d9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8001da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db4:	ee17 0a90 	vmov	r0, s15
 8001db8:	f7fe fbde 	bl	8000578 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	f7fe fa7c 	bl	80002bc <__adddf3>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4690      	mov	r8, r2
 8001dca:	4699      	mov	r9, r3
 8001dcc:	6938      	ldr	r0, [r7, #16]
 8001dce:	f7fe fbd3 	bl	8000578 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4640      	mov	r0, r8
 8001dd8:	4649      	mov	r1, r9
 8001dda:	f7fe fd4f 	bl	800087c <__aeabi_ddiv>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dec:	18d6      	adds	r6, r2, r3
 8001dee:	f7fe ff13 	bl	8000c18 <__aeabi_d2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8001df6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001df8:	f7fe fbbe 	bl	8000578 <__aeabi_f2d>
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	4689      	mov	r9, r1
 8001e00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e02:	f7fe fbb9 	bl	8000578 <__aeabi_f2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	f7fe fa57 	bl	80002bc <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4692      	mov	sl, r2
 8001e14:	469b      	mov	fp, r3
 8001e16:	69f8      	ldr	r0, [r7, #28]
 8001e18:	f7fe fbae 	bl	8000578 <__aeabi_f2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4650      	mov	r0, sl
 8001e22:	4659      	mov	r1, fp
 8001e24:	f7fe fc00 	bl	8000628 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4640      	mov	r0, r8
 8001e2e:	4649      	mov	r1, r9
 8001e30:	f7fe fa42 	bl	80002b8 <__aeabi_dsub>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8001e42:	f7fe fa3b 	bl	80002bc <__adddf3>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e50:	6938      	ldr	r0, [r7, #16]
 8001e52:	f7fe fb91 	bl	8000578 <__aeabi_f2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	f7fe fd0d 	bl	800087c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e70:	18d6      	adds	r6, r2, r3
 8001e72:	f7fe fed1 	bl	8000c18 <__aeabi_d2f>
 8001e76:	4603      	mov	r3, r0
 8001e78:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8001e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e80:	e715      	b.n	8001cae <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	f080 80aa 	bcs.w	8001fe4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8001e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	441a      	add	r2, r3
 8001e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	440b      	add	r3, r1
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f280 808e 	bge.w	8001fce <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8001eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb8:	4413      	add	r3, r2
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec4:	4413      	add	r3, r2
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed4:	4413      	add	r3, r2
 8001ed6:	edd3 6a00 	vldr	s13, [r3]
 8001eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	6a3a      	ldr	r2, [r7, #32]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f00:	4413      	add	r3, r2
 8001f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f06:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 8001f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f10:	4413      	add	r3, r2
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fb2f 	bl	8000578 <__aeabi_f2d>
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	460d      	mov	r5, r1
 8001f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f24:	4413      	add	r3, r2
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb25 	bl	8000578 <__aeabi_f2d>
 8001f2e:	4680      	mov	r8, r0
 8001f30:	4689      	mov	r9, r1
 8001f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f38:	4413      	add	r3, r2
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fb1b 	bl	8000578 <__aeabi_f2d>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	f7fe f9b9 	bl	80002bc <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4649      	mov	r1, r9
 8001f52:	f7fe f9b3 	bl	80002bc <__adddf3>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	4699      	mov	r9, r3
 8001f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	6a3a      	ldr	r2, [r7, #32]
 8001f64:	4413      	add	r3, r2
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fb05 	bl	8000578 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4640      	mov	r0, r8
 8001f74:	4649      	mov	r1, r9
 8001f76:	f7fe f9a1 	bl	80002bc <__adddf3>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe fb51 	bl	8000628 <__aeabi_dmul>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	18d4      	adds	r4, r2, r3
 8001f96:	f7fe fe3f 	bl	8000c18 <__aeabi_d2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8001f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	441a      	add	r2, r3
 8001fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	6a39      	ldr	r1, [r7, #32]
 8001fac:	440b      	add	r3, r1
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8001fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb8:	441a      	add	r2, r3
 8001fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc0:	440b      	add	r3, r1
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8001fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc8:	3301      	adds	r3, #1
 8001fca:	647b      	str	r3, [r7, #68]	; 0x44
 8001fcc:	e76c      	b.n	8001ea8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8001fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fd4:	e757      	b.n	8001e86 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 8001fd6:	bf00      	nop
 8001fd8:	54442d18 	.word	0x54442d18
 8001fdc:	400921fb 	.word	0x400921fb
 8001fe0:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8001fe4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fe6:	f00a fbfb 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(d1);
 8001fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fec:	f00a fbf8 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(d2);
 8001ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ff2:	f00a fbf5 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(w0);
 8001ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ff8:	f00a fbf2 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(w1);
 8001ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ffe:	f00a fbef 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(w2);
 8002002:	6a38      	ldr	r0, [r7, #32]
 8002004:	f00a fbec 	bl	800c7e0 <_Z7ei_freePv>
    }
 8002008:	bf00      	nop
 800200a:	3754      	adds	r7, #84	; 0x54
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002012:	bf00      	nop
 8002014:	0000      	movs	r0, r0
	...

08002018 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800201c:	b095      	sub	sp, #84	; 0x54
 800201e:	af00      	add	r7, sp, #0
 8002020:	6178      	str	r0, [r7, #20]
 8002022:	ed87 0a04 	vstr	s0, [r7, #16]
 8002026:	edc7 0a03 	vstr	s1, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	0fda      	lsrs	r2, r3, #31
 8002034:	4413      	add	r3, r2
 8002036:	105b      	asrs	r3, r3, #1
 8002038:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7fe fa9c 	bl	8000578 <__aeabi_f2d>
 8002040:	a3f5      	add	r3, pc, #980	; (adr r3, 8002418 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe faef 	bl	8000628 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4690      	mov	r8, r2
 8002050:	4699      	mov	r9, r3
 8002052:	6938      	ldr	r0, [r7, #16]
 8002054:	f7fe fa90 	bl	8000578 <__aeabi_f2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4640      	mov	r0, r8
 800205e:	4649      	mov	r1, r9
 8002060:	f7fe fc0c 	bl	800087c <__aeabi_ddiv>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	ec43 2b17 	vmov	d7, r2, r3
 800206c:	eeb0 0a47 	vmov.f32	s0, s14
 8002070:	eef0 0a67 	vmov.f32	s1, s15
 8002074:	f010 f800 	bl	8012078 <tan>
 8002078:	ec53 2b10 	vmov	r2, r3, d0
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fdca 	bl	8000c18 <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002088:	2002      	movs	r0, #2
 800208a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800208e:	f002 fc52 	bl	8004936 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002092:	ec53 2b10 	vmov	r2, r3, d0
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fdbd 	bl	8000c18 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 80020a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a4:	2104      	movs	r1, #4
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00a fb8c 	bl	800c7c4 <_Z9ei_callocjj>
 80020ac:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 80020ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b0:	2104      	movs	r1, #4
 80020b2:	4618      	mov	r0, r3
 80020b4:	f00a fb86 	bl	800c7c4 <_Z9ei_callocjj>
 80020b8:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 80020ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020bc:	2104      	movs	r1, #4
 80020be:	4618      	mov	r0, r3
 80020c0:	f00a fb80 	bl	800c7c4 <_Z9ei_callocjj>
 80020c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	2104      	movs	r1, #4
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00a fb7a 	bl	800c7c4 <_Z9ei_callocjj>
 80020d0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 80020d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d4:	2104      	movs	r1, #4
 80020d6:	4618      	mov	r0, r3
 80020d8:	f00a fb74 	bl	800c7c4 <_Z9ei_callocjj>
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 80020de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e0:	2104      	movs	r1, #4
 80020e2:	4618      	mov	r0, r3
 80020e4:	f00a fb6e 	bl	800c7c4 <_Z9ei_callocjj>
 80020e8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f2:	429a      	cmp	r2, r3
 80020f4:	f280 80e5 	bge.w	80022c2 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 80020f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80020fa:	f7fe fa2b 	bl	8000554 <__aeabi_i2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	f7fe f8db 	bl	80002bc <__adddf3>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4bc3      	ldr	r3, [pc, #780]	; (8002420 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002114:	f7fe f8d2 	bl	80002bc <__adddf3>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	a3bd      	add	r3, pc, #756	; (adr r3, 8002418 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe fa7f 	bl	8000628 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4690      	mov	r8, r2
 8002130:	4699      	mov	r9, r3
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7fe fa0e 	bl	8000554 <__aeabi_i2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	f7fe f8be 	bl	80002bc <__adddf3>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4640      	mov	r0, r8
 8002146:	4649      	mov	r1, r9
 8002148:	f7fe fb98 	bl	800087c <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	ec43 2b17 	vmov	d7, r2, r3
 8002154:	eeb0 0a47 	vmov.f32	s0, s14
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	f00f ff44 	bl	8011fe8 <sin>
 8002160:	ec53 2b10 	vmov	r2, r3, d0
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fd56 	bl	8000c18 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002172:	f7fe fa01 	bl	8000578 <__aeabi_f2d>
 8002176:	4680      	mov	r8, r0
 8002178:	4689      	mov	r9, r1
 800217a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800217c:	f7fe f9fc 	bl	8000578 <__aeabi_f2d>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	f7fe f89a 	bl	80002bc <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4692      	mov	sl, r2
 800218e:	469b      	mov	fp, r3
 8002190:	69f8      	ldr	r0, [r7, #28]
 8002192:	f7fe f9f1 	bl	8000578 <__aeabi_f2d>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4650      	mov	r0, sl
 800219c:	4659      	mov	r1, fp
 800219e:	f7fe fa43 	bl	8000628 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4640      	mov	r0, r8
 80021a8:	4649      	mov	r1, r9
 80021aa:	f7fe f887 	bl	80002bc <__adddf3>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b99      	ldr	r3, [pc, #612]	; (8002420 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 80021bc:	f7fe f87e 	bl	80002bc <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7fe fd26 	bl	8000c18 <__aeabi_d2f>
 80021cc:	4603      	mov	r3, r0
 80021ce:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 80021d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d6:	4413      	add	r3, r2
 80021d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80021e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80021e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021ec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f4:	ee17 0a90 	vmov	r0, s15
 80021f8:	f7fe f9be 	bl	8000578 <__aeabi_f2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	f7fe f85c 	bl	80002bc <__adddf3>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4690      	mov	r8, r2
 800220a:	4699      	mov	r9, r3
 800220c:	6938      	ldr	r0, [r7, #16]
 800220e:	f7fe f9b3 	bl	8000578 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4640      	mov	r0, r8
 8002218:	4649      	mov	r1, r9
 800221a:	f7fe fb2f 	bl	800087c <__aeabi_ddiv>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222c:	18d6      	adds	r6, r2, r3
 800222e:	f7fe fcf3 	bl	8000c18 <__aeabi_d2f>
 8002232:	4603      	mov	r3, r0
 8002234:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002236:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002238:	f7fe f99e 	bl	8000578 <__aeabi_f2d>
 800223c:	4680      	mov	r8, r0
 800223e:	4689      	mov	r9, r1
 8002240:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002242:	f7fe f999 	bl	8000578 <__aeabi_f2d>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	f7fe f837 	bl	80002bc <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4692      	mov	sl, r2
 8002254:	469b      	mov	fp, r3
 8002256:	69f8      	ldr	r0, [r7, #28]
 8002258:	f7fe f98e 	bl	8000578 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4650      	mov	r0, sl
 8002262:	4659      	mov	r1, fp
 8002264:	f7fe f9e0 	bl	8000628 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4640      	mov	r0, r8
 800226e:	4649      	mov	r1, r9
 8002270:	f7fe f822 	bl	80002b8 <__aeabi_dsub>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	4b67      	ldr	r3, [pc, #412]	; (8002420 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002282:	f7fe f81b 	bl	80002bc <__adddf3>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4614      	mov	r4, r2
 800228c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002290:	6938      	ldr	r0, [r7, #16]
 8002292:	f7fe f971 	bl	8000578 <__aeabi_f2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fe faed 	bl	800087c <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b0:	18d6      	adds	r6, r2, r3
 80022b2:	f7fe fcb1 	bl	8000c18 <__aeabi_d2f>
 80022b6:	4603      	mov	r3, r0
 80022b8:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	3301      	adds	r3, #1
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c0:	e715      	b.n	80020ee <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80022c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	f080 80aa 	bcs.w	8002424 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 80022d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	441a      	add	r2, r3
 80022d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	440b      	add	r3, r1
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	647b      	str	r3, [r7, #68]	; 0x44
 80022e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f280 808e 	bge.w	800240e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80022f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f8:	4413      	add	r3, r2
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	4413      	add	r3, r2
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800230e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002314:	4413      	add	r3, r2
 8002316:	edd3 6a00 	vldr	s13, [r3]
 800231a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	6a3a      	ldr	r2, [r7, #32]
 8002320:	4413      	add	r3, r2
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002340:	4413      	add	r3, r2
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 800234a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002350:	4413      	add	r3, r2
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f90f 	bl	8000578 <__aeabi_f2d>
 800235a:	4604      	mov	r4, r0
 800235c:	460d      	mov	r5, r1
 800235e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002364:	4413      	add	r3, r2
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f905 	bl	8000578 <__aeabi_f2d>
 800236e:	4680      	mov	r8, r0
 8002370:	4689      	mov	r9, r1
 8002372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	4413      	add	r3, r2
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	f7fd ff99 	bl	80002bc <__adddf3>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4640      	mov	r0, r8
 8002390:	4649      	mov	r1, r9
 8002392:	f7fd ff91 	bl	80002b8 <__aeabi_dsub>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4690      	mov	r8, r2
 800239c:	4699      	mov	r9, r3
 800239e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	6a3a      	ldr	r2, [r7, #32]
 80023a4:	4413      	add	r3, r2
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8e5 	bl	8000578 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4640      	mov	r0, r8
 80023b4:	4649      	mov	r1, r9
 80023b6:	f7fd ff81 	bl	80002bc <__adddf3>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe f931 	bl	8000628 <__aeabi_dmul>
 80023c6:	4603      	mov	r3, r0
 80023c8:	460c      	mov	r4, r1
 80023ca:	4618      	mov	r0, r3
 80023cc:	4621      	mov	r1, r4
 80023ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	18d4      	adds	r4, r2, r3
 80023d6:	f7fe fc1f 	bl	8000c18 <__aeabi_d2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80023de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	441a      	add	r2, r3
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	6a39      	ldr	r1, [r7, #32]
 80023ec:	440b      	add	r3, r1
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80023f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f8:	441a      	add	r2, r3
 80023fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002400:	440b      	add	r3, r1
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002408:	3301      	adds	r3, #1
 800240a:	647b      	str	r3, [r7, #68]	; 0x44
 800240c:	e76c      	b.n	80022e8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 800240e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002410:	3301      	adds	r3, #1
 8002412:	64bb      	str	r3, [r7, #72]	; 0x48
 8002414:	e757      	b.n	80022c6 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 8002416:	bf00      	nop
 8002418:	54442d18 	.word	0x54442d18
 800241c:	400921fb 	.word	0x400921fb
 8002420:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002424:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002426:	f00a f9db 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(d1);
 800242a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800242c:	f00a f9d8 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(d2);
 8002430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002432:	f00a f9d5 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(w0);
 8002436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002438:	f00a f9d2 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(w1);
 800243c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800243e:	f00a f9cf 	bl	800c7e0 <_Z7ei_freePv>
        ei_free(w2);
 8002442:	6a38      	ldr	r0, [r7, #32]
 8002444:	f00a f9cc 	bl	800c7e0 <_Z7ei_freePv>
    }
 8002448:	bf00      	nop
 800244a:	3754      	adds	r7, #84	; 0x54
 800244c:	46bd      	mov	sp, r7
 800244e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002452:	bf00      	nop

08002454 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002460:	edc7 0a01 	vstr	s1, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	429a      	cmp	r2, r3
 8002474:	d21f      	bcs.n	80024b6 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 8002476:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	6979      	ldr	r1, [r7, #20]
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	6979      	ldr	r1, [r7, #20]
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 800249a:	441a      	add	r2, r3
                matrix->cols);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80024a0:	4621      	mov	r1, r4
 80024a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80024a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80024aa:	f7ff fb95 	bl	8001bd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e7da      	b.n	800246c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 80024b6:	2300      	movs	r3, #0
    }
 80024b8:	4618      	mov	r0, r3
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}

080024c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80024cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d21f      	bcs.n	8002522 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 80024e2:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	6979      	ldr	r1, [r7, #20]
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	6979      	ldr	r1, [r7, #20]
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8002506:	441a      	add	r2, r3
                matrix->cols);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 800250c:	4621      	mov	r1, r4
 800250e:	edd7 0a01 	vldr	s1, [r7, #4]
 8002512:	ed97 0a02 	vldr	s0, [r7, #8]
 8002516:	f7ff fd7f 	bl	8002018 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e7da      	b.n	80024d8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8002522:	2300      	movs	r3, #0
    }
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}

0800252c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 800252c:	b480      	push	{r7}
 800252e:	b091      	sub	sp, #68	; 0x44
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	ed87 0a01 	vstr	s0, [r7, #4]
 800253a:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d001      	beq.n	8002548 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002544:	4b60      	ldr	r3, [pc, #384]	; (80026c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002546:	e0b9      	b.n	80026bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d001      	beq.n	8002554 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002550:	4b5d      	ldr	r3, [pc, #372]	; (80026c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002552:	e0b3      	b.n	80026bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8002570:	4b56      	ldr	r3, [pc, #344]	; (80026cc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	3b01      	subs	r3, #1
 8002582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002584:	429a      	cmp	r2, r3
 8002586:	d229      	bcs.n	80025dc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	4413      	add	r3, r2
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	dd05      	ble.n	80025ae <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	6a3a      	ldr	r2, [r7, #32]
 80025a8:	4413      	add	r3, r2
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	6a3a      	ldr	r2, [r7, #32]
 80025b4:	4413      	add	r3, r2
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80025be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d505      	bpl.n	80025d4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	4413      	add	r3, r2
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	3301      	adds	r3, #1
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
 80025da:	e7d0      	b.n	800257e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80025e2:	2301      	movs	r3, #1
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3b01      	subs	r3, #1
 80025ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d261      	bcs.n	80026b4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	4413      	add	r3, r2
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	d549      	bpl.n	800269e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	6a3a      	ldr	r2, [r7, #32]
 8002610:	4413      	add	r3, r2
 8002612:	ed93 7a00 	vldr	s14, [r3]
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	3301      	adds	r3, #1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	6a3a      	ldr	r2, [r7, #32]
 800261e:	4413      	add	r3, r2
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262c:	dd37      	ble.n	800269e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	6a3a      	ldr	r2, [r7, #32]
 8002634:	4413      	add	r3, r2
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800263e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	6a3a      	ldr	r2, [r7, #32]
 8002648:	4413      	add	r3, r2
 800264a:	edd3 6a00 	vldr	s13, [r3]
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	3301      	adds	r3, #1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	4413      	add	r3, r2
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002664:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8002668:	ed97 7a05 	vldr	s14, [r7, #20]
 800266c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	dd11      	ble.n	800269e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 800267a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002684:	ee07 2a90 	vmov	s15, r2
 8002688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268c:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 8002690:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002692:	3301      	adds	r3, #1
 8002694:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 8002696:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	429a      	cmp	r2, r3
 800269c:	d009      	beq.n	80026b2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	6a3a      	ldr	r2, [r7, #32]
 80026a4:	4413      	add	r3, r2
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	3301      	adds	r3, #1
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b0:	e799      	b.n	80025e6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 80026b2:	bf00      	nop
        }

        *peaks_found = out_ix;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80026b8:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80026ba:	2300      	movs	r3, #0
    }
 80026bc:	4618      	mov	r0, r3
 80026be:	3744      	adds	r7, #68	; 0x44
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	fffffc14 	.word	0xfffffc14
 80026cc:	7f7fffff 	.word	0x7f7fffff

080026d0 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	ed93 7a01 	vldr	s14, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80026e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	bfcc      	ite	gt
 80026f2:	2301      	movgt	r3, #1
 80026f4:	2300      	movle	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
        });
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	ed2d 8b02 	vpush	{d8}
 800270a:	b09e      	sub	sp, #120	; 0x78
 800270c:	af00      	add	r7, sp, #0
 800270e:	6178      	str	r0, [r7, #20]
 8002710:	6139      	str	r1, [r7, #16]
 8002712:	ed87 0a03 	vstr	s0, [r7, #12]
 8002716:	edc7 0a02 	vstr	s1, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d001      	beq.n	800272a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002726:	4c93      	ldr	r4, [pc, #588]	; (8002974 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x270>)
 8002728:	e11c      	b.n	8002964 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        if (output_matrix->cols != 2) {
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d001      	beq.n	8002736 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002732:	4c90      	ldr	r4, [pc, #576]	; (8002974 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x270>)
 8002734:	e116      	b.n	8002964 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        int N = static_cast<int>(fft_length);
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	66bb      	str	r3, [r7, #104]	; 0x68
        float T = 1.0f / sampling_freq;
 800273a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800273e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002746:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002752:	2300      	movs	r3, #0
 8002754:	2101      	movs	r1, #1
 8002756:	f7fe fcf0 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 800275a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x60>
 8002760:	4c85      	ldr	r4, [pc, #532]	; (8002978 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x274>)
 8002762:	e0fa      	b.n	800295a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8002764:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002768:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800276c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002770:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002776:	0fda      	lsrs	r2, r3, #31
 8002778:	4413      	add	r3, r2
 800277a:	105b      	asrs	r3, r3, #1
 800277c:	4618      	mov	r0, r3
 800277e:	f002 f929 	bl	80049d4 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002782:	ec54 3b10 	vmov	r3, r4, d0
 8002786:	4618      	mov	r0, r3
 8002788:	4621      	mov	r1, r4
 800278a:	f7fe fa25 	bl	8000bd8 <__aeabi_d2uiz>
 800278e:	4602      	mov	r2, r0
 8002790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	eef0 0a48 	vmov.f32	s1, s16
 800279a:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800297c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>
 800279e:	f7ff f929 	bl	80019f4 <_ZN2ei5numpy8linspaceEffmPf>
 80027a2:	4603      	mov	r3, r0
 80027a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 80027a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xac>
            EIDSP_ERR(ret);
 80027ac:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80027ae:	e0d4      	b.n	800295a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4619      	mov	r1, r3
 80027be:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80027c2:	2300      	movs	r3, #0
 80027c4:	2201      	movs	r2, #1
 80027c6:	f7fe fcb8 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80027ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xd0>
 80027d0:	4c69      	ldr	r4, [pc, #420]	; (8002978 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x274>)
 80027d2:	e0bd      	b.n	8002950 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x24c>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 80027d4:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 80027d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027dc:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800297c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>
 80027e0:	4619      	mov	r1, r3
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff fea2 	bl	800252c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 80027e8:	4603      	mov	r3, r0
 80027ea:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 80027ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xf2>
            EIDSP_ERR(ret);
 80027f2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80027f4:	e0ac      	b.n	8002950 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x24c>
        std::vector<freq_peak_t> peaks;
 80027f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 f8fc 	bl	80049f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8002800:	2300      	movs	r3, #0
 8002802:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002806:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800280a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800280c:	4293      	cmp	r3, r2
 800280e:	da3d      	bge.n	800288c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x188>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8002810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002814:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002824:	ee17 3a90 	vmov	r3, s15
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002836:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002846:	ee17 3a90 	vmov	r3, s15
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
            if (d.amplitude < threshold) {
 8002852:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002856:	ed97 7a02 	vldr	s14, [r7, #8]
 800285a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	dd05      	ble.n	8002870 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x16c>
                d.freq = 0.0f;
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
                d.amplitude = 0.0f;
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
            peaks.push_back(d);
 8002870:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f002 f8e4 	bl	8004a48 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8002880:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002884:	3301      	adds	r3, #1
 8002886:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800288a:	e7bc      	b.n	8002806 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x102>
        sort(peaks.begin(), peaks.end(),
 800288c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002890:	4618      	mov	r0, r3
 8002892:	f002 f8ff 	bl	8004a94 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>
 8002896:	4604      	mov	r4, r0
 8002898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289c:	4618      	mov	r0, r3
 800289e:	f002 f909 	bl	8004ab4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	462a      	mov	r2, r5
 80028a6:	4619      	mov	r1, r3
 80028a8:	4620      	mov	r0, r4
 80028aa:	f002 f93f 	bl	8004b2c <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESC_fftEUlRKS5_SE_E_EvT_SG_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80028ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 f94c 	bl	8004b50 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 80028b8:	6738      	str	r0, [r7, #112]	; 0x70
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d211      	bcs.n	80028e8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e4>
            freq_peak_t d;
            d.freq = 0;
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
            d.amplitude = 0;
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
            peaks.push_back(d);
 80028d0:	f107 021c 	add.w	r2, r7, #28
 80028d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 f8b4 	bl	8004a48 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80028e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e2:	3301      	adds	r3, #1
 80028e4:	673b      	str	r3, [r7, #112]	; 0x70
 80028e6:	e7e8      	b.n	80028ba <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1b6>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 80028e8:	2300      	movs	r3, #0
 80028ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d226      	bcs.n	8002944 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x240>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 80028f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028fa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 f938 	bl	8004b72 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	6802      	ldr	r2, [r0, #0]
 8002916:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8002918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800291e:	4618      	mov	r0, r3
 8002920:	f002 f927 	bl	8004b72 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	3301      	adds	r3, #1
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	6842      	ldr	r2, [r0, #4]
 800293a:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 800293c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293e:	3301      	adds	r3, #1
 8002940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002942:	e7d3      	b.n	80028ec <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e8>
        }

        return EIDSP_OK;
 8002944:	2400      	movs	r4, #0
        std::vector<freq_peak_t> peaks;
 8002946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294a:	4618      	mov	r0, r3
 800294c:	f002 f861 	bl	8004a12 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8002950:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fc1b 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800295a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fc16 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8002964:	4623      	mov	r3, r4
    }
 8002966:	4618      	mov	r0, r3
 8002968:	3778      	adds	r7, #120	; 0x78
 800296a:	46bd      	mov	sp, r7
 800296c:	ecbd 8b02 	vpop	{d8}
 8002970:	bdb0      	pop	{r4, r5, r7, pc}
 8002972:	bf00      	nop
 8002974:	fffffc14 	.word	0xfffffc14
 8002978:	fffffc16 	.word	0xfffffc16
 800297c:	00000000 	.word	0x00000000

08002980 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b093      	sub	sp, #76	; 0x4c
 8002984:	af00      	add	r7, sp, #0
 8002986:	6178      	str	r0, [r7, #20]
 8002988:	6139      	str	r1, [r7, #16]
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d103      	bne.n	80029a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d001      	beq.n	80029a6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80029a2:	4c7b      	ldr	r4, [pc, #492]	; (8002b90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80029a4:	e0ef      	b.n	8002b86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80029ae:	4c78      	ldr	r4, [pc, #480]	; (8002b90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80029b0:	e0e9      	b.n	8002b86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	429a      	cmp	r2, r3
 80029be:	d105      	bne.n	80029cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80029cc:	4c70      	ldr	r4, [pc, #448]	; (8002b90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80029ce:	e0da      	b.n	8002b86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80029dc:	4c6c      	ldr	r4, [pc, #432]	; (8002b90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80029de:	e0d2      	b.n	8002b86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80029ea:	2300      	movs	r3, #0
 80029ec:	2101      	movs	r1, #1
 80029ee:	f7fe fba4 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 80029f8:	4c66      	ldr	r4, [pc, #408]	; (8002b94 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 80029fa:	e0bf      	b.n	8002b7c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	f107 0018 	add.w	r0, r7, #24
 8002a06:	2300      	movs	r3, #0
 8002a08:	2101      	movs	r1, #1
 8002a0a:	f7fe fb96 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8002a14:	4c5f      	ldr	r4, [pc, #380]	; (8002b94 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8002a16:	e0ac      	b.n	8002b72 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a1e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d264      	bcs.n	8002af4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a50:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d244      	bcs.n	8002ae8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	db2f      	blt.n	8002adc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a84:	3301      	adds	r3, #1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d51f      	bpl.n	8002adc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 8002a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	ed93 7a00 	vldr	s14, [r3]
 8002aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abc:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ad2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad6:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8002ada:	e005      	b.n	8002ae8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002adc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ae6:	e7b3      	b.n	8002a50 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8002ae8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002aec:	3301      	adds	r3, #1
 8002aee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002af2:	e794      	b.n	8002a1e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002afa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d233      	bcs.n	8002b70 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	d109      	bne.n	8002b34 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e017      	b.n	8002b64 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8002b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	edd3 6a00 	vldr	s13, [r3]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	ed93 7a00 	vldr	s14, [r3]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b60:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002b64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002b6e:	e7c4      	b.n	8002afa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 8002b70:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8002b72:	f107 0318 	add.w	r3, r7, #24
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fb0a 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8002b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fb05 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8002b86:	4623      	mov	r3, r4
    }
 8002b88:	4618      	mov	r0, r3
 8002b8a:	374c      	adds	r7, #76	; 0x4c
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd90      	pop	{r4, r7, pc}
 8002b90:	fffffc14 	.word	0xfffffc14
 8002b94:	fffffc16 	.word	0xfffffc16

08002b98 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	ed2d 8b02 	vpush	{d8}
 8002b9e:	b09b      	sub	sp, #108	; 0x6c
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	6178      	str	r0, [r7, #20]
 8002ba4:	6139      	str	r1, [r7, #16]
 8002ba6:	60fa      	str	r2, [r7, #12]
 8002ba8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bac:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002bb6:	4c82      	ldr	r4, [pc, #520]	; (8002dc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8002bb8:	e197      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	0852      	lsrs	r2, r2, #1
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	3201      	adds	r2, #1
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d001      	beq.n	8002bd6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002bd2:	4c7b      	ldr	r4, [pc, #492]	; (8002dc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8002bd4:	e189      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	0852      	lsrs	r2, r2, #1
 8002be6:	b292      	uxth	r2, r2
 8002be8:	3201      	adds	r2, #1
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d001      	beq.n	8002bf2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002bee:	4c74      	ldr	r4, [pc, #464]	; (8002dc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8002bf0:	e17b      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (input_matrix->buffer == NULL) {
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002bfa:	4c72      	ldr	r4, [pc, #456]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002bfc:	e175      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (out_fft_matrix->buffer == NULL) {
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002c06:	4c6f      	ldr	r4, [pc, #444]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002c08:	e16f      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (out_freq_matrix->buffer == NULL) {
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002c12:	4c6c      	ldr	r4, [pc, #432]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002c14:	e169      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002c26:	f7fe fa88 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8002c30:	4c64      	ldr	r4, [pc, #400]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002c32:	e155      	b.n	8002ee0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>

        uint16_t nperseg = n_fft;
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d904      	bls.n	8002c4e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c4c:	e006      	b.n	8002c5c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d201      	bcs.n	8002c5c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8002c5c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002c60:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002c64:	2300      	movs	r3, #0
 8002c66:	2101      	movs	r1, #1
 8002c68:	f7fe fa67 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 8002c72:	4c54      	ldr	r4, [pc, #336]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002c74:	e12f      	b.n	8002ed6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002c7c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002c80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d20d      	bcs.n	8002ca4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 8002c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c96:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8002c98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002ca2:	e7eb      	b.n	8002c7c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 8002ca4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002cca:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	da26      	bge.n	8002d28 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x190>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8002cda:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002cf0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cf8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002cfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d00:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002d04:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d18:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002d1c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002d20:	3301      	adds	r3, #1
 8002d22:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002d26:	e7d0      	b.n	8002cca <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8002d28:	f107 001c 	add.w	r0, r7, #28
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2101      	movs	r1, #1
 8002d32:	f7fe fa02 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a8>
 8002d3c:	4c21      	ldr	r4, [pc, #132]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002d3e:	e0c5      	b.n	8002ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8002d40:	f107 021c 	add.w	r2, r7, #28
 8002d44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fc2e 	bl	80015ac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8002d50:	4603      	mov	r3, r0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (ret != EIDSP_OK) {
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c6>
            EIDSP_ERR(ret);
 8002d5a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002d5c:	e0b6      	b.n	8002ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 8002d5e:	f107 021c 	add.w	r2, r7, #28
 8002d62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fb85 	bl	8001478 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (ret != EIDSP_OK) {
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1e4>
            EIDSP_ERR(ret);
 8002d78:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002d7a:	e0a7      	b.n	8002ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f009 fd1b 	bl	800c7c4 <_Z9ei_callocjj>
 8002d8e:	6538      	str	r0, [r7, #80]	; 0x50
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 8002d90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002da6:	f7fe fd2d 	bl	8001804 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 8002daa:	4603      	mov	r3, r0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (ret != EIDSP_OK) {
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x230>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8002db4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002db6:	f009 fd13 	bl	800c7e0 <_Z7ei_freePv>
            EIDSP_ERR(ret);
 8002dba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002dbc:	e086      	b.n	8002ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
 8002dbe:	bf00      	nop
 8002dc0:	fffffc14 	.word	0xfffffc14
 8002dc4:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002dce:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	da72      	bge.n	8002ec4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32c>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8002dde:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002de6:	4413      	add	r3, r2
 8002de8:	ed93 7a00 	vldr	s14, [r3]
 8002dec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002df4:	4413      	add	r3, r2
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8002dfe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e06:	4413      	add	r3, r2
 8002e08:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e0c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e14:	4413      	add	r3, r2
 8002e16:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e22:	f7fe f91e 	bl	8001062 <_ZSt3absf>
 8002e26:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8002e2a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e32:	4413      	add	r3, r2
 8002e34:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002e38:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 8002e3c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e44:	4413      	add	r3, r2
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 8002e4c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e54:	4413      	add	r3, r2
 8002e56:	ed93 7a00 	vldr	s14, [r3]
 8002e5a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e62:	4413      	add	r3, r2
 8002e64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6c:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d00f      	beq.n	8002e9e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x306>
                fft_output[ix].r *= 2;
 8002e7e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e86:	4413      	add	r3, r2
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e94:	4413      	add	r3, r2
 8002e96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e9a:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 8002e9e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ea6:	441a      	add	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6819      	ldr	r1, [r3, #0]
 8002eac:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002eb8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002ec2:	e784      	b.n	8002dce <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x236>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8002ec4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ec6:	f009 fc8b 	bl	800c7e0 <_Z7ei_freePv>

        return EIDSP_OK;
 8002eca:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8002ecc:	f107 031c 	add.w	r3, r7, #28
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe f95d 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8002ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe f958 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8002ee0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe f953 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8002eea:	4623      	mov	r3, r4
    }
 8002eec:	4618      	mov	r0, r3
 8002eee:	3764      	adds	r7, #100	; 0x64
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	ecbd 8b02 	vpop	{d8}
 8002ef6:	bd90      	pop	{r4, r7, pc}

08002ef8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8002ef8:	b5b0      	push	{r4, r5, r7, lr}
 8002efa:	b0b4      	sub	sp, #208	; 0xd0
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	6178      	str	r0, [r7, #20]
 8002f00:	6139      	str	r1, [r7, #16]
 8002f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f06:	4611      	mov	r1, r2
 8002f08:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	ed87 1a00 	vstr	s2, [r7]
 8002f12:	460b      	mov	r3, r1
 8002f14:	72fb      	strb	r3, [r7, #11]
 8002f16:	4613      	mov	r3, r2
 8002f18:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f26:	4cc2      	ldr	r4, [pc, #776]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002f28:	e258      	b.n	80033dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4e4>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	689d      	ldr	r5, [r3, #8]
 8002f2e:	f897 10dc 	ldrb.w	r1, [r7, #220]	; 0xdc
 8002f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f000 fa54 	bl	80033e8 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8002f40:	4603      	mov	r3, r0
 8002f42:	429d      	cmp	r5, r3
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f50:	4cb7      	ldr	r4, [pc, #732]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002f52:	e243      	b.n	80033dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4e4>
        }

        if (edges_matrix_in->cols != 1) {
 8002f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f5e:	4cb4      	ldr	r4, [pc, #720]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002f60:	e23c      	b.n	80033dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4e4>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, axes, 1);
 8002f6a:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2201      	movs	r2, #1
 8002f72:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8002f76:	f7fe f8e0 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8e>
 8002f82:	4cac      	ldr	r4, [pc, #688]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 8002f84:	e225      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
        ret = numpy::mean(input_matrix, &mean_matrix);
 8002f86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6938      	ldr	r0, [r7, #16]
 8002f8e:	f7fe fb0d 	bl	80015ac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if (ret != EIDSP_OK) {
 8002f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xac>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002fa0:	4ca3      	ldr	r4, [pc, #652]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002fa2:	e216      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8002fa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6938      	ldr	r0, [r7, #16]
 8002fac:	f7fe fa64 	bl	8001478 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if (ret != EIDSP_OK) {
 8002fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xca>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002fbe:	4c9c      	ldr	r4, [pc, #624]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002fc0:	e207      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
        }

        // apply filter
        if (filter_type == filter_lowpass) {
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d111      	bne.n	8002fec <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf4>
            ret = spectral::processing::butterworth_lowpass_filter(
 8002fc8:	7abb      	ldrb	r3, [r7, #10]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	edd7 0a01 	vldr	s1, [r7, #4]
 8002fd0:	ed97 0a03 	vldr	s0, [r7, #12]
 8002fd4:	6938      	ldr	r0, [r7, #16]
 8002fd6:	f7ff fa3d 	bl	8002454 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8002fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d016      	beq.n	8003016 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x11e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002fe8:	4c91      	ldr	r4, [pc, #580]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002fea:	e1f2      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
            }
        }
        else if (filter_type == filter_highpass) {
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d111      	bne.n	8003016 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x11e>
            ret = spectral::processing::butterworth_highpass_filter(
 8002ff2:	7abb      	ldrb	r3, [r7, #10]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	edd7 0a01 	vldr	s1, [r7, #4]
 8002ffa:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ffe:	6938      	ldr	r0, [r7, #16]
 8003000:	f7ff fa5e 	bl	80024c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8003004:	4603      	mov	r3, r0
 8003006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 800300a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x11e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003012:	4c87      	ldr	r4, [pc, #540]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8003014:	e1dd      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003016:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800301a:	2300      	movs	r3, #0
 800301c:	2201      	movs	r2, #1
 800301e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003022:	f7fe f88a 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8003026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x13a>
 800302e:	4c81      	ldr	r4, [pc, #516]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 8003030:	e1ca      	b.n	80033c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4d0>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8003032:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003036:	4619      	mov	r1, r3
 8003038:	6938      	ldr	r0, [r7, #16]
 800303a:	f7fe fa7b 	bl	8001534 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800303e:	4603      	mov	r3, r0
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if (ret != EIDSP_OK) {
 8003044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x158>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800304c:	4c78      	ldr	r4, [pc, #480]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 800304e:	e1bb      	b.n	80033c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4d0>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003050:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	461a      	mov	r2, r3
 8003058:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800305c:	2300      	movs	r3, #0
 800305e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003062:	f7fe f86a 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8003066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x178>
 800306c:	4c71      	ldr	r4, [pc, #452]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 800306e:	e1a6      	b.n	80033be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c6>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800307e:	429a      	cmp	r2, r3
 8003080:	f080 819c 	bcs.w	80033bc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c4>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	689d      	ldr	r5, [r3, #8]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80030a0:	462a      	mov	r2, r5
 80030a2:	2101      	movs	r1, #1
 80030a4:	f7fe f849 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1bc>
 80030ae:	4c61      	ldr	r4, [pc, #388]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 80030b0:	2500      	movs	r5, #0
 80030b2:	e175      	b.n	80033a0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4a8>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 80030b4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	461a      	mov	r2, r3
 80030c0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80030c4:	2300      	movs	r3, #0
 80030c6:	2101      	movs	r1, #1
 80030c8:	f7fe f837 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80030cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1e0>
 80030d2:	4c58      	ldr	r4, [pc, #352]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 80030d4:	2500      	movs	r5, #0
 80030d6:	e158      	b.n	800338a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x492>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 80030d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80030da:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80030dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030de:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 80030e0:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	462b      	mov	r3, r5
 80030e8:	f7fe fa9c 	bl	8001624 <_ZN2ei5numpy4rfftEPKfjPfjj>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if (ret != EIDSP_OK) {
 80030f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x208>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80030fa:	4c4d      	ldr	r4, [pc, #308]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 80030fc:	2500      	movs	r5, #0
 80030fe:	e144      	b.n	800338a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x492>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003100:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003110:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003114:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003118:	eeb0 0a66 	vmov.f32	s0, s13
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f931 	bl	8001384 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003122:	f897 10dc 	ldrb.w	r1, [r7, #220]	; 0xdc
 8003126:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800312a:	2300      	movs	r3, #0
 800312c:	2202      	movs	r2, #2
 800312e:	f7fe f804 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8003132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x246>
 8003138:	4c3e      	ldr	r4, [pc, #248]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 800313a:	2500      	movs	r5, #0
 800313c:	e11a      	b.n	8003374 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47c>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 800313e:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8003142:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003146:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800314a:	edd7 0a00 	vldr	s1, [r7]
 800314e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fad6 	bl	8002704 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8003158:	4603      	mov	r3, r0
 800315a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 800315e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x274>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003166:	4c32      	ldr	r4, [pc, #200]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8003168:	2500      	movs	r5, #0
 800316a:	e103      	b.n	8003374 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47c>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 800316c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	b29b      	uxth	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	461a      	mov	r2, r3
 8003178:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800317c:	2300      	movs	r3, #0
 800317e:	2101      	movs	r1, #1
 8003180:	f7fd ffdb 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8003184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x298>
 800318a:	4c2a      	ldr	r4, [pc, #168]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 800318c:	2500      	movs	r5, #0
 800318e:	e0e6      	b.n	800335e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003190:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	b29b      	uxth	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	461a      	mov	r2, r3
 800319c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80031a0:	2300      	movs	r3, #0
 80031a2:	2101      	movs	r1, #1
 80031a4:	f7fd ffc9 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2bc>
 80031ae:	4c21      	ldr	r4, [pc, #132]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 80031b0:	2500      	movs	r5, #0
 80031b2:	e0c9      	b.n	8003348 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
            ret = spectral::processing::periodogram(&axis_matrix,
 80031b4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80031b8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80031bc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80031c0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80031c4:	ed97 0a03 	vldr	s0, [r7, #12]
 80031c8:	f7ff fce6 	bl	8002b98 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 80031d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ea>
                EIDSP_ERR(ret);
 80031da:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80031de:	2500      	movs	r5, #0
 80031e0:	e0b2      	b.n	8003348 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 80031e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	1e59      	subs	r1, r3, #1
 80031ea:	f107 001c 	add.w	r0, r7, #28
 80031ee:	2300      	movs	r3, #0
 80031f0:	2201      	movs	r2, #1
 80031f2:	f7fd ffa2 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x30a>
 80031fc:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 80031fe:	2500      	movs	r5, #0
 8003200:	e097      	b.n	8003332 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43a>
            ret = spectral::processing::spectral_power_edges(
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800320a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800320e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003216:	f7ff fbb3 	bl	8002980 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 800321a:	4603      	mov	r3, r0
 800321c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8003220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x340>
                EIDSP_ERR(ret);
 8003228:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800322c:	2500      	movs	r5, #0
 800322e:	e080      	b.n	8003332 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43a>
 8003230:	fffffc14 	.word	0xfffffc14
 8003234:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            size_t fx = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            features_row[fx++] = rms_matrix.buffer[row];
 8003256:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800325a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8003272:	440b      	add	r3, r1
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800327e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003280:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003284:	429a      	cmp	r2, r3
 8003286:	d22c      	bcs.n	80032e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ea>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 8003288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800329c:	1c59      	adds	r1, r3, #1
 800329e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80032a8:	440b      	add	r3, r1
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 80032ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032c4:	1c59      	adds	r1, r3, #1
 80032c6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80032d0:	440b      	add	r3, r1
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 80032d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032da:	3301      	adds	r3, #1
 80032dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032e0:	e7cd      	b.n	800327e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x386>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d21e      	bcs.n	8003330 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x438>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	ed93 7a00 	vldr	s14, [r3]
 8003306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003316:	4413      	add	r3, r2
 8003318:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800331c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003320:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003324:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003328:	3301      	adds	r3, #1
 800332a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800332e:	e7db      	b.n	80032e8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f0>
 8003330:	2501      	movs	r5, #1
 8003332:	f107 031c 	add.w	r3, r7, #28
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd ff2a 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 800333c:	2d01      	cmp	r5, #1
 800333e:	d001      	beq.n	8003344 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x44c>
 8003340:	2500      	movs	r5, #0
 8003342:	e001      	b.n	8003348 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003344:	bf00      	nop
 8003346:	2501      	movs	r5, #1
 8003348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd ff1f 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003352:	2d01      	cmp	r5, #1
 8003354:	d001      	beq.n	800335a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x462>
 8003356:	2500      	movs	r5, #0
 8003358:	e001      	b.n	800335e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 800335a:	bf00      	nop
 800335c:	2501      	movs	r5, #1
 800335e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd ff14 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003368:	2d01      	cmp	r5, #1
 800336a:	d001      	beq.n	8003370 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
 800336c:	2500      	movs	r5, #0
 800336e:	e001      	b.n	8003374 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47c>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 8003370:	bf00      	nop
 8003372:	2501      	movs	r5, #1
 8003374:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd ff09 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 800337e:	2d01      	cmp	r5, #1
 8003380:	d001      	beq.n	8003386 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x48e>
 8003382:	2500      	movs	r5, #0
 8003384:	e001      	b.n	800338a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x492>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003386:	bf00      	nop
 8003388:	2501      	movs	r5, #1
 800338a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd fefe 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003394:	2d01      	cmp	r5, #1
 8003396:	d001      	beq.n	800339c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4a4>
 8003398:	2500      	movs	r5, #0
 800339a:	e001      	b.n	80033a0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4a8>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 800339c:	bf00      	nop
 800339e:	2501      	movs	r5, #1
 80033a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd fef3 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80033aa:	2d01      	cmp	r5, #1
 80033ac:	d107      	bne.n	80033be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c6>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 80033ae:	bf00      	nop
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80033b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b4:	3301      	adds	r3, #1
 80033b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ba:	e65c      	b.n	8003076 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x17e>
            }
        }

        return EIDSP_OK;
 80033bc:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 80033be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fee4 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 80033c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fedf 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, axes, 1);
 80033d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd feda 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80033dc:	4623      	mov	r3, r4
    }
 80033de:	4618      	mov	r0, r3
 80033e0:	37c8      	adds	r7, #200	; 0xc8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bdb0      	pop	{r4, r5, r7, pc}
 80033e6:	bf00      	nop

080033e8 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3301      	adds	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4413      	add	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	4413      	add	r3, r2
 800341c:	3b01      	subs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8003420:	697b      	ldr	r3, [r7, #20]
    }
 8003422:	4618      	mov	r0, r3
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
float ei_dsp_image_buffer[EI_DSP_IMAGE_BUFFER_STATIC_SIZE];
#endif

__attribute__((unused)) int extract_spectral_analysis_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b0c1      	sub	sp, #260	; 0x104
 8003434:	af04      	add	r7, sp, #16
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t config = *((ei_dsp_config_spectral_analysis_t*)config_ptr);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8003446:	461d      	mov	r5, r3
 8003448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800344a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800344c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800344e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003450:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003454:	e884 0003 	stmia.w	r4, {r0, r1}

    int ret;

    const float sampling_freq = frequency;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003466:	fbb3 f1f2 	udiv	r1, r3, r2
 800346a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800346e:	461a      	mov	r2, r3
 8003470:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8003474:	2300      	movs	r3, #0
 8003476:	f7fd fe60 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 800347a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x56>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003482:	4c99      	ldr	r4, [pc, #612]	; (80036e8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b8>)
 8003484:	e125      	b.n	80036d2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a2>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003490:	2100      	movs	r1, #0
 8003492:	f001 fa71 	bl	8004978 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    ret = numpy::scale(&input_matrix, config.scale_axes);
 8003496:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800349a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800349e:	eeb0 0a67 	vmov.f32	s0, s15
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd ff6e 	bl	8001384 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (ret != EIDSP_OK) {
 80034ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
        ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 80034b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034ba:	4619      	mov	r1, r3
 80034bc:	488b      	ldr	r0, [pc, #556]	; (80036ec <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2bc>)
 80034be:	f001 f86f 	bl	80045a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80034c2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80034c6:	e104      	b.n	80036d2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a2>
    }

    // transpose the matrix so we have one row per axis (nifty!)
    ret = numpy::transpose(&input_matrix);
 80034c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd fed8 	bl	8001282 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (ret != EIDSP_OK) {
 80034d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc2>
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 80034e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034e4:	4619      	mov	r1, r3
 80034e6:	4882      	ldr	r0, [pc, #520]	; (80036f0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c0>)
 80034e8:	f001 f85a 	bl	80045a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80034ec:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80034f0:	e0ef      	b.n	80036d2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a2>
    }

    // the spectral edges that we want to calculate
    matrix_t edges_matrix_in(64, 1);
 80034f2:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80034f6:	2300      	movs	r3, #0
 80034f8:	2201      	movs	r2, #1
 80034fa:	2140      	movs	r1, #64	; 0x40
 80034fc:	f7fd fe1d 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
    size_t edge_matrix_ix = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    char spectral_str[128] = { 0 };
 8003506:	f107 0310 	add.w	r3, r7, #16
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f011 fbb2 	bl	8014c78 <memset>
    if (strlen(config.spectral_power_edges) > sizeof(spectral_str) - 1) {
 8003514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003518:	4618      	mov	r0, r3
 800351a:	f7fc fe6b 	bl	80001f4 <strlen>
 800351e:	4603      	mov	r3, r0
 8003520:	2b7f      	cmp	r3, #127	; 0x7f
 8003522:	d901      	bls.n	8003528 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf8>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8003524:	4c73      	ldr	r4, [pc, #460]	; (80036f4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c4>)
 8003526:	e0cf      	b.n	80036c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x298>
    }
    memcpy(spectral_str, config.spectral_power_edges, strlen(config.spectral_power_edges));
 8003528:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800352c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003530:	4618      	mov	r0, r3
 8003532:	f7fc fe5f 	bl	80001f4 <strlen>
 8003536:	4602      	mov	r2, r0
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	4621      	mov	r1, r4
 800353e:	4618      	mov	r0, r3
 8003540:	f011 fb76 	bl	8014c30 <memcpy>

    // convert spectral_power_edges (string) into float array
    char *spectral_ptr = spectral_str;
 8003544:	f107 0310 	add.w	r3, r7, #16
 8003548:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    while (spectral_ptr != NULL) {
 800354c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d034      	beq.n	80035be <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18e>
        edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8003554:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003558:	f011 faa2 	bl	8014aa0 <atof>
 800355c:	ec56 5b10 	vmov	r5, r6, d0
 8003560:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003564:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003568:	1c59      	adds	r1, r3, #1
 800356a:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	18d4      	adds	r4, r2, r3
 8003572:	4628      	mov	r0, r5
 8003574:	4631      	mov	r1, r6
 8003576:	f7fd fb4f 	bl	8000c18 <__aeabi_d2f>
 800357a:	4603      	mov	r3, r0
 800357c:	6023      	str	r3, [r4, #0]

        // find next (spectral) delimiter (or '\0' character)
        while((*spectral_ptr != ',')) {
 800357e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b2c      	cmp	r3, #44	; 0x2c
 8003586:	d00b      	beq.n	80035a0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x170>
            spectral_ptr++;
 8003588:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800358c:	3301      	adds	r3, #1
 800358e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            if (*spectral_ptr == '\0') break;
 8003592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d000      	beq.n	800359e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16e>
        while((*spectral_ptr != ',')) {
 800359c:	e7ef      	b.n	800357e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
            if (*spectral_ptr == '\0') break;
 800359e:	bf00      	nop
        }

        if (*spectral_ptr == '\0') {
 80035a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            spectral_ptr = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035b0:	e7cc      	b.n	800354c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
        }
        else  {
            spectral_ptr++;
 80035b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035b6:	3301      	adds	r3, #1
 80035b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    while (spectral_ptr != NULL) {
 80035bc:	e7c6      	b.n	800354c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
        }
    }
    edges_matrix_in.rows = edge_matrix_ix;
 80035be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // calculate how much room we need for the output matrix
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
        true, config.spectral_peaks_count, edges_matrix_in.rows
 80035c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80035ca:	4619      	mov	r1, r3
        true, config.spectral_peaks_count, edges_matrix_in.rows
 80035cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    );
 80035d0:	461a      	mov	r2, r3
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7ff ff08 	bl	80033e8 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80035d8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
    if (output_matrix->cols * output_matrix->rows != static_cast<uint32_t>(output_matrix_cols * config.axes)) {
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	6852      	ldr	r2, [r2, #4]
 80035e4:	fb02 f203 	mul.w	r2, r2, r3
 80035e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035ec:	4619      	mov	r1, r3
 80035ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f2:	fb03 f301 	mul.w	r3, r3, r1
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ce>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035fa:	4c3f      	ldr	r4, [pc, #252]	; (80036f8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c8>)
 80035fc:	e064      	b.n	80036c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x298>
    }

    output_matrix->cols = output_matrix_cols;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003604:	609a      	str	r2, [r3, #8]
    output_matrix->rows = config.axes;
 8003606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	605a      	str	r2, [r3, #4]

    spectral::filter_t filter_type;
    if (strcmp(config.filter_type, "low") == 0) {
 8003610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003614:	4939      	ldr	r1, [pc, #228]	; (80036fc <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2cc>)
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc fde2 	bl	80001e0 <strcmp>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fa>
        filter_type = spectral::filter_lowpass;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003628:	e00f      	b.n	800364a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x21a>
    }
    else if (strcmp(config.filter_type, "high") == 0) {
 800362a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800362e:	4934      	ldr	r1, [pc, #208]	; (8003700 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d0>)
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc fdd5 	bl	80001e0 <strcmp>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d103      	bne.n	8003644 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x214>
        filter_type = spectral::filter_highpass;
 800363c:	2302      	movs	r3, #2
 800363e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003642:	e002      	b.n	800364a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x21a>
    }
    else {
        filter_type = spectral::filter_none;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    }

    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 800364a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
        sampling_freq, filter_type, config.filter_cutoff, config.filter_order,
 800364e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 8003652:	b2dd      	uxtb	r5, r3
        config.fft_length, config.spectral_peaks_count, config.spectral_peaks_threshold, &edges_matrix_in);
 8003654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 8003658:	b29b      	uxth	r3, r3
        config.fft_length, config.spectral_peaks_count, config.spectral_peaks_threshold, &edges_matrix_in);
 800365a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8003664:	f897 40e7 	ldrb.w	r4, [r7, #231]	; 0xe7
 8003668:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800366c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003670:	9102      	str	r1, [sp, #8]
 8003672:	9201      	str	r2, [sp, #4]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	eeb0 1a47 	vmov.f32	s2, s14
 800367a:	462b      	mov	r3, r5
 800367c:	eef0 0a67 	vmov.f32	s1, s15
 8003680:	4622      	mov	r2, r4
 8003682:	ed97 0a38 	vldr	s0, [r7, #224]	; 0xe0
 8003686:	4601      	mov	r1, r0
 8003688:	68b8      	ldr	r0, [r7, #8]
 800368a:	f7ff fc35 	bl	8002ef8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 800368e:	4603      	mov	r3, r0
 8003690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (ret != EIDSP_OK) {
 8003694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27e>
        ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 800369c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036a0:	4619      	mov	r1, r3
 80036a2:	4818      	ldr	r0, [pc, #96]	; (8003704 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d4>)
 80036a4:	f000 ff7c 	bl	80045a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80036a8:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80036ac:	e00c      	b.n	80036c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x298>
    }

    // flatten again
    output_matrix->cols = config.axes * output_matrix_cols;
 80036ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036b2:	461a      	mov	r2, r3
 80036b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b8:	fb03 f202 	mul.w	r2, r3, r2
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2201      	movs	r2, #1
 80036c4:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80036c6:	2400      	movs	r4, #0
    matrix_t edges_matrix_in(64, 1);
 80036c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fd5f 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 80036d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fd5a 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80036dc:	4623      	mov	r3, r4
}
 80036de:	4618      	mov	r0, r3
 80036e0:	37f4      	adds	r7, #244	; 0xf4
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e6:	bf00      	nop
 80036e8:	fffffc16 	.word	0xfffffc16
 80036ec:	08017b1c 	.word	0x08017b1c
 80036f0:	08017b40 	.word	0x08017b40
 80036f4:	fffffc10 	.word	0xfffffc10
 80036f8:	fffffc14 	.word	0xfffffc14
 80036fc:	08017b00 	.word	0x08017b00
 8003700:	08017b68 	.word	0x08017b68
 8003704:	08017b70 	.word	0x08017b70

08003708 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fced 	bl	80010f2 <_ZNSt14_Function_baseD1Ev>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fa30 	bl	8004b92 <_ZNSt8functionIFijjPfEEC1Ev>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    output_matrix->rows = 1;

    return EIDSP_OK;
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 800373c:	b5b0      	push	{r4, r5, r7, lr}
 800373e:	b098      	sub	sp, #96	; 0x60
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003752:	ca07      	ldmia	r2, {r0, r1, r2}
 8003754:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8003758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800375a:	4972      	ldr	r1, [pc, #456]	; (8003924 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>)
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc fd3f 	bl	80001e0 <strcmp>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 800376c:	2303      	movs	r3, #3
 800376e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00d      	beq.n	800379e <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x62>
        ei_printf("out_matrix = %hu items\n", output_matrix->rows, output_matrix->cols);
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6859      	ldr	r1, [r3, #4]
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	461a      	mov	r2, r3
 800378c:	4866      	ldr	r0, [pc, #408]	; (8003928 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ec>)
 800378e:	f000 ff07 	bl	80045a0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hu items\n", static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 8003792:	2100      	movs	r1, #0
 8003794:	4865      	ldr	r0, [pc, #404]	; (800392c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f0>)
 8003796:	f000 ff03 	bl	80045a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800379a:	4c65      	ldr	r4, [pc, #404]	; (8003930 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>)
 800379c:	e0bd      	b.n	800391a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1de>
    }

    size_t output_ix = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80037a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037a6:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80037ae:	2300      	movs	r3, #0
 80037b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037b8:	429a      	cmp	r2, r3
 80037ba:	f080 80ad 	bcs.w	8003918 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1dc>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c4:	d803      	bhi.n	80037ce <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x92>
 80037c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	e001      	b.n	80037d2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
 80037ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037d2:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 80037d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d6:	461a      	mov	r2, r3
 80037d8:	f107 0014 	add.w	r0, r7, #20
 80037dc:	2300      	movs	r3, #0
 80037de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80037e0:	f7fd fcab 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d102      	bne.n	80037f0 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80037ea:	4c52      	ldr	r4, [pc, #328]	; (8003934 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>)
 80037ec:	2500      	movs	r5, #0
 80037ee:	e086      	b.n	80038fe <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c2>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037f8:	f001 f8be 	bl	8004978 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80037fc:	2300      	movs	r3, #0
 80037fe:	657b      	str	r3, [r7, #84]	; 0x54
 8003800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003804:	429a      	cmp	r2, r3
 8003806:	d275      	bcs.n	80038f4 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	edd3 7a00 	vldr	s15, [r3]
 8003814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003818:	ee17 3a90 	vmov	r3, s15
 800381c:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 800381e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003820:	0c1b      	lsrs	r3, r3, #16
 8003822:	b2db      	uxtb	r3, r3
 8003824:	ee07 3a90 	vmov	s15, r3
 8003828:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800382c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8003938 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
 8003830:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003834:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8003838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383a:	0a1b      	lsrs	r3, r3, #8
 800383c:	b2db      	uxtb	r3, r3
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003846:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003938 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
 800384a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800384e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8003852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003854:	b2db      	uxtb	r3, r3
 8003856:	ee07 3a90 	vmov	s15, r3
 800385a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800385e:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003938 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
 8003862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003866:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 800386a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800386e:	2b03      	cmp	r3, #3
 8003870:	d11b      	bne.n	80038aa <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16e>
                output_matrix->buffer[output_ix++] = r;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003878:	1c59      	adds	r1, r3, #1
 800387a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003882:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800388a:	1c59      	adds	r1, r3, #1
 800388c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003894:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800389c:	1c59      	adds	r1, r3, #1
 800389e:	65f9      	str	r1, [r7, #92]	; 0x5c
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	e020      	b.n	80038ec <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 80038aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80038ae:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800393c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x200>
 80038b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038b6:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80038ba:	eddf 6a21 	vldr	s13, [pc, #132]	; 8003940 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x204>
 80038be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80038ca:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003944 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x208>
 80038ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038e0:	1c59      	adds	r1, r3, #1
 80038e2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038ea:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 80038ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ee:	3301      	adds	r3, #1
 80038f0:	657b      	str	r3, [r7, #84]	; 0x54
 80038f2:	e785      	b.n	8003800 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc4>
            }
        }

        bytes_left -= elements_to_read;
 80038f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
 80038fc:	2501      	movs	r5, #1
 80038fe:	f107 0314 	add.w	r3, r7, #20
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fc44 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003908:	2d01      	cmp	r5, #1
 800390a:	d106      	bne.n	800391a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1de>
        matrix_t input_matrix(elements_to_read, config.axes);
 800390c:	bf00      	nop
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800390e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003910:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003914:	65bb      	str	r3, [r7, #88]	; 0x58
 8003916:	e74c      	b.n	80037b2 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x76>
    }

    return EIDSP_OK;
 8003918:	2400      	movs	r4, #0
 800391a:	4623      	mov	r3, r4
}
 800391c:	4618      	mov	r0, r3
 800391e:	3760      	adds	r7, #96	; 0x60
 8003920:	46bd      	mov	sp, r7
 8003922:	bdb0      	pop	{r4, r5, r7, pc}
 8003924:	08017c40 	.word	0x08017c40
 8003928:	08017c4c 	.word	0x08017c4c
 800392c:	08017c64 	.word	0x08017c64
 8003930:	fffffc14 	.word	0xfffffc14
 8003934:	fffffc16 	.word	0xfffffc16
 8003938:	437f0000 	.word	0x437f0000
 800393c:	3e991687 	.word	0x3e991687
 8003940:	3f1645a2 	.word	0x3f1645a2
 8003944:	3de978d5 	.word	0x3de978d5

08003948 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>:

#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8003948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800394c:	b098      	sub	sp, #96	; 0x60
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003960:	ca07      	ldmia	r2, {r0, r1, r2}
 8003962:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8003966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003968:	49b7      	ldr	r1, [pc, #732]	; (8003c48 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x300>)
 800396a:	4618      	mov	r0, r3
 800396c:	f7fc fc38 	bl	80001e0 <strcmp>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34>
 800397a:	2303      	movs	r3, #3
 800397c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	6892      	ldr	r2, [r2, #8]
 8003988:	fb02 f303 	mul.w	r3, r2, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00d      	beq.n	80039ac <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x64>
        ei_printf("out_matrix = %hu items\n", output_matrix->rows, output_matrix->cols);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	461a      	mov	r2, r3
 800399a:	48ac      	ldr	r0, [pc, #688]	; (8003c4c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x304>)
 800399c:	f000 fe00 	bl	80045a0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hu items\n", static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 80039a0:	2100      	movs	r1, #0
 80039a2:	48ab      	ldr	r0, [pc, #684]	; (8003c50 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x308>)
 80039a4:	f000 fdfc 	bl	80045a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80039a8:	4caa      	ldr	r4, [pc, #680]	; (8003c54 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x30c>)
 80039aa:	e142      	b.n	8003c32 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2ea>
    }

    size_t output_ix = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80039b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039b4:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80039bc:	2300      	movs	r3, #0
 80039be:	65bb      	str	r3, [r7, #88]	; 0x58
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039c6:	429a      	cmp	r2, r3
 80039c8:	f080 8132 	bcs.w	8003c30 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2e8>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d2:	d803      	bhi.n	80039dc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x94>
 80039d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	e001      	b.n	80039e0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x98>
 80039dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039e0:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 80039e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e4:	461a      	mov	r2, r3
 80039e6:	f107 0014 	add.w	r0, r7, #20
 80039ea:	2300      	movs	r3, #0
 80039ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80039ee:	f7fd fba4 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xb6>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80039f8:	4c97      	ldr	r4, [pc, #604]	; (8003c58 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x310>)
 80039fa:	2500      	movs	r5, #0
 80039fc:	e10b      	b.n	8003c16 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2ce>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a06:	f000 ffb7 	bl	8004978 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a12:	429a      	cmp	r2, r3
 8003a14:	f080 80fa 	bcs.w	8003c0c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2c4>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	edd3 7a00 	vldr	s15, [r3]
 8003a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a28:	ee17 3a90 	vmov	r3, s15
 8003a2c:	647b      	str	r3, [r7, #68]	; 0x44

            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8003a2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a30:	0c1b      	lsrs	r3, r3, #16
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	ee07 3a90 	vmov	s15, r3
 8003a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a3c:	eddf 6a87 	vldr	s13, [pc, #540]	; 8003c5c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x314>
 8003a40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a44:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8003a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4a:	0a1b      	lsrs	r3, r3, #8
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a56:	eddf 6a81 	vldr	s13, [pc, #516]	; 8003c5c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x314>
 8003a5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a5e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8003a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a6e:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8003c5c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x314>
 8003a72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a76:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8003a7a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d17e      	bne.n	8003b80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x238>
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003a82:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a84:	f7fc fd78 	bl	8000578 <__aeabi_f2d>
 8003a88:	a36d      	add	r3, pc, #436	; (adr r3, 8003c40 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2f8>)
 8003a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a8e:	f7fc fef5 	bl	800087c <__aeabi_ddiv>
 8003a92:	4602      	mov	r2, r0
 8003a94:	460b      	mov	r3, r1
 8003a96:	ec43 2b17 	vmov	d7, r2, r3
 8003a9a:	eeb0 0a47 	vmov.f32	s0, s14
 8003a9e:	eef0 0a67 	vmov.f32	s1, s15
 8003aa2:	f00e fa57 	bl	8011f54 <round>
 8003aa6:	ec51 0b10 	vmov	r0, r1, d0
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	4b6c      	ldr	r3, [pc, #432]	; (8003c60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x318>)
 8003ab0:	f7fc fc02 	bl	80002b8 <__aeabi_dsub>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4690      	mov	r8, r2
 8003aba:	4699      	mov	r9, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ac2:	1c59      	adds	r1, r3, #1
 8003ac4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003ac6:	18d5      	adds	r5, r2, r3
 8003ac8:	4640      	mov	r0, r8
 8003aca:	4649      	mov	r1, r9
 8003acc:	f7fd f85c 	bl	8000b88 <__aeabi_d2iz>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	b25b      	sxtb	r3, r3
 8003ad4:	702b      	strb	r3, [r5, #0]
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003ad6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003ad8:	f7fc fd4e 	bl	8000578 <__aeabi_f2d>
 8003adc:	a358      	add	r3, pc, #352	; (adr r3, 8003c40 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2f8>)
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	f7fc fecb 	bl	800087c <__aeabi_ddiv>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	ec43 2b17 	vmov	d7, r2, r3
 8003aee:	eeb0 0a47 	vmov.f32	s0, s14
 8003af2:	eef0 0a67 	vmov.f32	s1, s15
 8003af6:	f00e fa2d 	bl	8011f54 <round>
 8003afa:	ec51 0b10 	vmov	r0, r1, d0
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	4b57      	ldr	r3, [pc, #348]	; (8003c60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x318>)
 8003b04:	f7fc fbd8 	bl	80002b8 <__aeabi_dsub>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4690      	mov	r8, r2
 8003b0e:	4699      	mov	r9, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b16:	1c59      	adds	r1, r3, #1
 8003b18:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003b1a:	18d5      	adds	r5, r2, r3
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	4649      	mov	r1, r9
 8003b20:	f7fd f832 	bl	8000b88 <__aeabi_d2iz>
 8003b24:	4603      	mov	r3, r0
 8003b26:	b25b      	sxtb	r3, r3
 8003b28:	702b      	strb	r3, [r5, #0]
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003b2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b2c:	f7fc fd24 	bl	8000578 <__aeabi_f2d>
 8003b30:	a343      	add	r3, pc, #268	; (adr r3, 8003c40 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2f8>)
 8003b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b36:	f7fc fea1 	bl	800087c <__aeabi_ddiv>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	ec43 2b17 	vmov	d7, r2, r3
 8003b42:	eeb0 0a47 	vmov.f32	s0, s14
 8003b46:	eef0 0a67 	vmov.f32	s1, s15
 8003b4a:	f00e fa03 	bl	8011f54 <round>
 8003b4e:	ec51 0b10 	vmov	r0, r1, d0
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	4b42      	ldr	r3, [pc, #264]	; (8003c60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x318>)
 8003b58:	f7fc fbae 	bl	80002b8 <__aeabi_dsub>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4690      	mov	r8, r2
 8003b62:	4699      	mov	r9, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b6a:	1c59      	adds	r1, r3, #1
 8003b6c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003b6e:	18d5      	adds	r5, r2, r3
 8003b70:	4640      	mov	r0, r8
 8003b72:	4649      	mov	r1, r9
 8003b74:	f7fd f808 	bl	8000b88 <__aeabi_d2iz>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	b25b      	sxtb	r3, r3
 8003b7c:	702b      	strb	r3, [r5, #0]
 8003b7e:	e041      	b.n	8003c04 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2bc>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8003b80:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003b84:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003c64 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x31c>
 8003b88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b8c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003b90:	eddf 6a35 	vldr	s13, [pc, #212]	; 8003c68 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x320>
 8003b94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b9c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003ba0:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003c6c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x324>
 8003ba4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003bb0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bb2:	f7fc fce1 	bl	8000578 <__aeabi_f2d>
 8003bb6:	a322      	add	r3, pc, #136	; (adr r3, 8003c40 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2f8>)
 8003bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbc:	f7fc fe5e 	bl	800087c <__aeabi_ddiv>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	ec43 2b17 	vmov	d7, r2, r3
 8003bc8:	eeb0 0a47 	vmov.f32	s0, s14
 8003bcc:	eef0 0a67 	vmov.f32	s1, s15
 8003bd0:	f00e f9c0 	bl	8011f54 <round>
 8003bd4:	ec51 0b10 	vmov	r0, r1, d0
 8003bd8:	f04f 0200 	mov.w	r2, #0
 8003bdc:	4b20      	ldr	r3, [pc, #128]	; (8003c60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x318>)
 8003bde:	f7fc fb6b 	bl	80002b8 <__aeabi_dsub>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4690      	mov	r8, r2
 8003be8:	4699      	mov	r9, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bf0:	1c59      	adds	r1, r3, #1
 8003bf2:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003bf4:	18d5      	adds	r5, r2, r3
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	f7fc ffc5 	bl	8000b88 <__aeabi_d2iz>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	b25b      	sxtb	r3, r3
 8003c02:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8003c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c06:	3301      	adds	r3, #1
 8003c08:	657b      	str	r3, [r7, #84]	; 0x54
 8003c0a:	e700      	b.n	8003a0e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xc6>
            }
        }

        bytes_left -= elements_to_read;
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	627b      	str	r3, [r7, #36]	; 0x24
 8003c14:	2501      	movs	r5, #1
 8003c16:	f107 0314 	add.w	r3, r7, #20
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd fab8 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003c20:	2d01      	cmp	r5, #1
 8003c22:	d106      	bne.n	8003c32 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2ea>
        matrix_t input_matrix(elements_to_read, config.axes);
 8003c24:	bf00      	nop
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8003c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c2e:	e6c7      	b.n	80039c0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x78>
    }

    return EIDSP_OK;
 8003c30:	2400      	movs	r4, #0
 8003c32:	4623      	mov	r3, r4
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3760      	adds	r7, #96	; 0x60
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c3e:	bf00      	nop
 8003c40:	a0000000 	.word	0xa0000000
 8003c44:	3fbd90e6 	.word	0x3fbd90e6
 8003c48:	08017c40 	.word	0x08017c40
 8003c4c:	08017c4c 	.word	0x08017c4c
 8003c50:	08017c64 	.word	0x08017c64
 8003c54:	fffffc14 	.word	0xfffffc14
 8003c58:	fffffc16 	.word	0xfffffc16
 8003c5c:	437f0000 	.word	0x437f0000
 8003c60:	40600000 	.word	0x40600000
 8003c64:	3e991687 	.word	0x3e991687
 8003c68:	3f1645a2 	.word	0x3f1645a2
 8003c6c:	3de978d5 	.word	0x3de978d5

08003c70 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_malloc(size_t align, size_t size)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	1e5a      	subs	r2, r3, #1
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4013      	ands	r3, r2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x26>
 8003c8a:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x74>)
 8003c8c:	4a16      	ldr	r2, [pc, #88]	; (8003ce8 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x78>)
 8003c8e:	213c      	movs	r1, #60	; 0x3c
 8003c90:	4816      	ldr	r0, [pc, #88]	; (8003cec <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x7c>)
 8003c92:	f010 fee7 	bl	8014a64 <__assert_func>

	if(align && size)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d01e      	beq.n	8003cda <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d01b      	beq.n	8003cda <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	613b      	str	r3, [r7, #16]
		void * p = ei_malloc(size + hdr_size);
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4413      	add	r3, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f008 fd7c 	bl	800c7ac <_Z9ei_mallocj>
 8003cb4:	60f8      	str	r0, [r7, #12]

		if(p)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00e      	beq.n	8003cda <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	425b      	negs	r3, r3
 8003cc8:	4013      	ands	r3, r2
 8003cca:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	1ad2      	subs	r2, r2, r3
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	3b02      	subs	r3, #2
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 8003cda:	697b      	ldr	r3, [r7, #20]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	08017c98 	.word	0x08017c98
 8003ce8:	08018bfc 	.word	0x08018bfc
 8003cec:	08017cb4 	.word	0x08017cb4

08003cf0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d105      	bne.n	8003d0a <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8003d00:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8003d02:	215f      	movs	r1, #95	; 0x5f
 8003d04:	480b      	ldr	r0, [pc, #44]	; (8003d34 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8003d06:	f010 fead 	bl	8014a64 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8003d10:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	89fb      	ldrh	r3, [r7, #14]
 8003d16:	425b      	negs	r3, r3
 8003d18:	4413      	add	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 8003d1c:	68b8      	ldr	r0, [r7, #8]
 8003d1e:	f008 fd5f 	bl	800c7e0 <_Z7ei_freePv>
}
 8003d22:	bf00      	nop
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	08017d38 	.word	0x08017d38
 8003d30:	08018c34 	.word	0x08018c34
 8003d34:	08017cb4 	.word	0x08017cb4

08003d38 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6178      	str	r0, [r7, #20]
 8003d40:	6139      	str	r1, [r7, #16]
 8003d42:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d46:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d837      	bhi.n	8003dc8 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f993 3000 	ldrsb.w	r3, [r3]
 8003d62:	ee07 3a90 	vmov	s15, r3
 8003d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d72:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d7a:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00e      	beq.n	8003da2 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8003d84:	4a12      	ldr	r2, [pc, #72]	; (8003dd0 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4811      	ldr	r0, [pc, #68]	; (8003dd4 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x9c>)
 8003d90:	f000 fc06 	bl	80045a0 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8003d94:	ed97 0a06 	vldr	s0, [r7, #24]
 8003d98:	f008 fbee 	bl	800c578 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8003d9c:	480e      	ldr	r0, [pc, #56]	; (8003dd8 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0xa0>)
 8003d9e:	f000 fbff 	bl	80045a0 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8003da2:	4a0b      	ldr	r2, [pc, #44]	; (8003dd0 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	3304      	adds	r3, #4
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e7c4      	b.n	8003d52 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x1a>
    }
}
 8003dc8:	bf00      	nop
 8003dca:	3720      	adds	r7, #32
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	08017e18 	.word	0x08017e18
 8003dd8:	08017df8 	.word	0x08017df8

08003ddc <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	4613      	mov	r3, r2
 8003de8:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d82a      	bhi.n	8003e4a <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	613b      	str	r3, [r7, #16]

        if (debug) {
 8003e00:	79fb      	ldrb	r3, [r7, #7]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00e      	beq.n	8003e24 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8003e06:	4a13      	ldr	r2, [pc, #76]	; (8003e54 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4811      	ldr	r0, [pc, #68]	; (8003e58 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x7c>)
 8003e12:	f000 fbc5 	bl	80045a0 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8003e16:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e1a:	f008 fbad 	bl	800c578 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8003e1e:	480f      	ldr	r0, [pc, #60]	; (8003e5c <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x80>)
 8003e20:	f000 fbbe 	bl	80045a0 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8003e24:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	3301      	adds	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	e7d1      	b.n	8003dee <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x12>
    }
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000000 	.word	0x20000000
 8003e58:	08017e18 	.word	0x08017e18
 8003e5c:	08017df8 	.word	0x08017df8

08003e60 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh>:
    TfLiteTensor** output_scores,
#endif
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter** micro_interpreter,
#endif
    uint8_t** micro_tensor_arena) {
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    TfLiteStatus init_status = trained_model_init(ei_aligned_malloc);
 8003e6e:	4842      	ldr	r0, [pc, #264]	; (8003f78 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x118>)
 8003e70:	f00c fbfa 	bl	8010668 <_Z18trained_model_initPFPvjjE>
 8003e74:	4603      	mov	r3, r0
 8003e76:	75fb      	strb	r3, [r7, #23]
    if (init_status != kTfLiteOk) {
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x2e>
        ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	4619      	mov	r1, r3
 8003e82:	483e      	ldr	r0, [pc, #248]	; (8003f7c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x11c>)
 8003e84:	f000 fb8c 	bl	80045a0 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8003e88:	f06f 0305 	mvn.w	r3, #5
 8003e8c:	e070      	b.n	8003f70 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x110>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
    }
    *micro_tensor_arena = tensor_arena;
#endif

    *ctx_start_ms = ei_read_timer_ms();
 8003e8e:	f008 fb69 	bl	800c564 <_Z16ei_read_timer_msv>
 8003e92:	4603      	mov	r3, r0
 8003e94:	460c      	mov	r4, r1
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	e9c2 3400 	strd	r3, r4, [r2]
    resolver.AddCustom("TFLite_Detection_PostProcess", tflite::ops::micro::Register_TFLite_Detection_PostProcess());
#endif
#endif // EI_CLASSIFIER_COMPILED != 1

#if (EI_CLASSIFIER_COMPILED == 1)
    *input = trained_model_input(0);
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f00c fdcf 	bl	8010a40 <_Z19trained_model_inputi>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	601a      	str	r2, [r3, #0]
    *output = trained_model_output(0);
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f00c fddb 	bl	8010a64 <_Z20trained_model_outputi>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]
    *output_labels = interpreter->output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION
#endif

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8003eb4:	4b32      	ldr	r3, [pc, #200]	; (8003f80 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x120>)
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d058      	beq.n	8003f6e <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x10e>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2b09      	cmp	r3, #9
 8003ec4:	d006      	beq.n	8003ed4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x74>
 8003ec6:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x124>)
 8003ec8:	4a2f      	ldr	r2, [pc, #188]	; (8003f88 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8003eca:	f240 210d 	movw	r1, #525	; 0x20d
 8003ece:	482f      	ldr	r0, [pc, #188]	; (8003f8c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8003ed0:	f010 fdc8 	bl	8014a64 <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b09      	cmp	r3, #9
 8003edc:	d006      	beq.n	8003eec <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x8c>
 8003ede:	4b2c      	ldr	r3, [pc, #176]	; (8003f90 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x130>)
 8003ee0:	4a29      	ldr	r2, [pc, #164]	; (8003f88 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8003ee2:	f240 210e 	movw	r1, #526	; 0x20e
 8003ee6:	4829      	ldr	r0, [pc, #164]	; (8003f8c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8003ee8:	f010 fdbc 	bl	8014a64 <__assert_func>
        assert((*output_scores)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
        assert((*output_labels)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
#endif
#if defined(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) || defined(EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED)
        if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ef4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003f94 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x134>
 8003ef8:	eef4 7a47 	vcmp.f32	s15, s14
 8003efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f00:	d006      	beq.n	8003f10 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xb0>
 8003f02:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x138>)
 8003f04:	4a20      	ldr	r2, [pc, #128]	; (8003f88 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8003f06:	f240 2115 	movw	r1, #533	; 0x215
 8003f0a:	4820      	ldr	r0, [pc, #128]	; (8003f8c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8003f0c:	f010 fdaa 	bl	8014a64 <__assert_func>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8003f1a:	d006      	beq.n	8003f2a <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xca>
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x13c>)
 8003f1e:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8003f20:	f240 2116 	movw	r1, #534	; 0x216
 8003f24:	4819      	ldr	r0, [pc, #100]	; (8003f8c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8003f26:	f010 fd9d 	bl	8014a64 <__assert_func>
        }
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f32:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003fa0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x140>
 8003f36:	eef4 7a47 	vcmp.f32	s15, s14
 8003f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f3e:	d006      	beq.n	8003f4e <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0xee>
 8003f40:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x144>)
 8003f42:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8003f44:	f240 2119 	movw	r1, #537	; 0x219
 8003f48:	4810      	ldr	r0, [pc, #64]	; (8003f8c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8003f4a:	f010 fd8b 	bl	8014a64 <__assert_func>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8003f58:	d006      	beq.n	8003f68 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x108>
 8003f5a:	4b13      	ldr	r3, [pc, #76]	; (8003fa8 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x148>)
 8003f5c:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x128>)
 8003f5e:	f240 211a 	movw	r1, #538	; 0x21a
 8003f62:	480a      	ldr	r0, [pc, #40]	; (8003f8c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x12c>)
 8003f64:	f010 fd7e 	bl	8014a64 <__assert_func>
        }
#endif
        tflite_first_run = false;
 8003f68:	4b05      	ldr	r3, [pc, #20]	; (8003f80 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh+0x120>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	371c      	adds	r7, #28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd90      	pop	{r4, r7, pc}
 8003f78:	08003c71 	.word	0x08003c71
 8003f7c:	08017e20 	.word	0x08017e20
 8003f80:	20000044 	.word	0x20000044
 8003f84:	08017e54 	.word	0x08017e54
 8003f88:	08018c60 	.word	0x08018c60
 8003f8c:	08017e8c 	.word	0x08017e8c
 8003f90:	08017f10 	.word	0x08017f10
 8003f94:	3dec8735 	.word	0x3dec8735
 8003f98:	08017f48 	.word	0x08017f48
 8003f9c:	08017f84 	.word	0x08017f84
 8003fa0:	3b800000 	.word	0x3b800000
 8003fa4:	08017fc8 	.word	0x08017fc8
 8003fa8:	08018008 	.word	0x08018008

08003fac <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>:
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter* interpreter,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b088      	sub	sp, #32
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_invoke();
 8003fba:	f00c fd65 	bl	8010a88 <_Z20trained_model_invokev>
        return EI_IMPULSE_TFLITE_ERROR;
    }
    delete interpreter;
#endif

    uint64_t ctx_end_ms = ei_read_timer_ms();
 8003fbe:	f008 fad1 	bl	800c564 <_Z16ei_read_timer_msv>
 8003fc2:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification = ctx_end_ms - ctx_start_ms;
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	62da      	str	r2, [r3, #44]	; 0x2c

    // Read the predicted y value from the model's output tensor
    if (debug) {
 8003fd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x3a>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8003fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4820      	ldr	r0, [pc, #128]	; (8004064 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xb8>)
 8003fe2:	f000 fadd 	bl	80045a0 <_Z9ei_printfPKcz>
    }
#if EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b09      	cmp	r3, #9
 8003fec:	bf0c      	ite	eq
 8003fee:	2301      	moveq	r3, #1
 8003ff0:	2300      	movne	r3, #0
 8003ff2:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d015      	beq.n	8004026 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x7a>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	ee07 3a90 	vmov	s15, r3
 8004006:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004010:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004014:	461a      	mov	r2, r3
 8004016:	eef0 0a47 	vmov.f32	s1, s14
 800401a:	eeb0 0a67 	vmov.f32	s0, s15
 800401e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004020:	f7ff fe8a 	bl	8003d38 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>
 8004024:	e007      	b.n	8004036 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0x8a>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800402e:	4619      	mov	r1, r3
 8004030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004032:	f7ff fed3 	bl	8003ddc <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>
    }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_reset(ei_aligned_free);
 8004036:	480c      	ldr	r0, [pc, #48]	; (8004068 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xbc>)
 8004038:	f00c fd5c 	bl	8010af4 <_Z19trained_model_resetPFvPvE>
#else
    ei_aligned_free(tensor_arena);
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800403c:	f008 fa8a 	bl	800c554 <_Z29ei_run_impulse_check_canceledv>
 8004040:	4603      	mov	r3, r0
 8004042:	f113 0f02 	cmn.w	r3, #2
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d002      	beq.n	8004058 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xac>
        return EI_IMPULSE_CANCELED;
 8004052:	f06f 0301 	mvn.w	r3, #1
 8004056:	e000      	b.n	800405a <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb+0xae>
    }

    return EI_IMPULSE_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3720      	adds	r7, #32
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	08018050 	.word	0x08018050
 8004068:	08003cf1 	.word	0x08003cf1

0800406c <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b08f      	sub	sp, #60	; 0x3c
 8004070:	af02      	add	r7, sp, #8
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	71fb      	strb	r3, [r7, #7]
        EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_ms, &input, &output,
    #if EI_CLASSIFIER_OBJECT_DETECTION
            &output_labels,
            &output_scores,
    #endif
            &tensor_arena);
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	f107 0218 	add.w	r2, r7, #24
 8004082:	f107 011c 	add.w	r1, r7, #28
 8004086:	f107 0020 	add.w	r0, r7, #32
 800408a:	f7ff fee9 	bl	8003e60 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            &output_labels,
            &output_scores,
    #endif
            &interpreter, &tensor_arena);
#endif
        if (init_res != EI_IMPULSE_OK) {
 8004094:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <run_inference+0x36>
            return init_res;
 800409c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80040a0:	e070      	b.n	8004184 <run_inference+0x118>
            else {
                input->data.f[ix] = fmatrix->buffer[ix];
            }
        }
#else
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	2b09      	cmp	r3, #9
 80040a8:	bf0c      	ite	eq
 80040aa:	2301      	moveq	r3, #1
 80040ac:	2300      	movne	r3, #0
 80040ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80040b2:	2300      	movs	r3, #0
 80040b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	6892      	ldr	r2, [r2, #8]
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d239      	bcs.n	800413c <run_inference+0xd0>
            // Quantize the input if it is int8
            if (int8_input) {
 80040c8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d025      	beq.n	800411c <run_inference+0xb0>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	ed93 7a00 	vldr	s14, [r3]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80040e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80040e8:	eeb0 0a66 	vmov.f32	s0, s13
 80040ec:	f7fd f8b9 	bl	8001262 <_ZSt5roundf>
 80040f0:	eeb0 7a40 	vmov.f32	s14, s0
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	ee07 3a90 	vmov	s15, r3
 80040fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	4413      	add	r3, r2
 800410c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004110:	edc7 7a00 	vstr	s15, [r7]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	b252      	sxtb	r2, r2
 8004118:	701a      	strb	r2, [r3, #0]
 800411a:	e00b      	b.n	8004134 <run_inference+0xc8>
                // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	441a      	add	r2, r3
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	6859      	ldr	r1, [r3, #4]
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8004134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004136:	3301      	adds	r3, #1
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413a:	e7bc      	b.n	80040b6 <run_inference+0x4a>
            }
        }
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
        EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_ms, output,
 800413c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	697c      	ldr	r4, [r7, #20]
    #if EI_CLASSIFIER_OBJECT_DETECTION
            output_labels,
            output_scores,
    #endif
            tensor_arena, result, debug);
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	9301      	str	r3, [sp, #4]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	4623      	mov	r3, r4
 800414e:	f7ff ff2d 	bl	8003fac <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
            output_scores,
    #endif
            interpreter, tensor_arena, result, debug);
#endif

        if (run_res != EI_IMPULSE_OK) {
 8004158:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <run_inference+0xfa>
            return run_res;
 8004160:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8004164:	e00e      	b.n	8004184 <run_inference+0x118>
        result->anomaly = anomaly;
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004166:	f008 f9f5 	bl	800c554 <_Z29ei_run_impulse_check_canceledv>
 800416a:	4603      	mov	r3, r0
 800416c:	f113 0f02 	cmn.w	r3, #2
 8004170:	bf0c      	ite	eq
 8004172:	2301      	moveq	r3, #1
 8004174:	2300      	movne	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <run_inference+0x116>
        return EI_IMPULSE_CANCELED;
 800417c:	f06f 0301 	mvn.w	r3, #1
 8004180:	e000      	b.n	8004184 <run_inference+0x118>
    }

    return EI_IMPULSE_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3734      	adds	r7, #52	; 0x34
 8004188:	46bd      	mov	sp, r7
 800418a:	bd90      	pop	{r4, r7, pc}

0800418c <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800418c:	b5b0      	push	{r4, r5, r7, lr}
 800418e:	b096      	sub	sp, #88	; 0x58
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized() == EI_IMPULSE_OK) {
 800419a:	f000 f8d7 	bl	800434c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d008      	beq.n	80041c0 <run_classifier+0x34>
        return run_classifier_image_quantized(signal, result, debug);
 80041ae:	79fb      	ldrb	r3, [r7, #7]
 80041b0:	461a      	mov	r2, r3
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f8df 	bl	8004378 <run_classifier_image_quantized>
 80041ba:	4603      	mov	r3, r0
 80041bc:	461d      	mov	r5, r3
 80041be:	e0af      	b.n	8004320 <run_classifier+0x194>
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80041c0:	2234      	movs	r2, #52	; 0x34
 80041c2:	2100      	movs	r1, #0
 80041c4:	68b8      	ldr	r0, [r7, #8]
 80041c6:	f010 fd57 	bl	8014c78 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 80041ca:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80041ce:	2300      	movs	r3, #0
 80041d0:	2221      	movs	r2, #33	; 0x21
 80041d2:	2101      	movs	r1, #1
 80041d4:	f7fc ffb1 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_ms = ei_read_timer_ms();
 80041d8:	f008 f9c4 	bl	800c564 <_Z16ei_read_timer_msv>
 80041dc:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

    size_t out_features_index = 0;
 80041e0:	2300      	movs	r3, #0
 80041e2:	657b      	str	r3, [r7, #84]	; 0x54

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80041e4:	2300      	movs	r3, #0
 80041e6:	653b      	str	r3, [r7, #80]	; 0x50
 80041e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d155      	bne.n	800429a <run_classifier+0x10e>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 80041ee:	494f      	ldr	r1, [pc, #316]	; (800432c <run_classifier+0x1a0>)
 80041f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	18ca      	adds	r2, r1, r3
 80041fc:	f107 0320 	add.w	r3, r7, #32
 8004200:	ca07      	ldmia	r2, {r0, r1, r2}
 8004202:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 8004206:	6a3a      	ldr	r2, [r7, #32]
 8004208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800420a:	4413      	add	r3, r2
 800420c:	2b21      	cmp	r3, #33	; 0x21
 800420e:	d905      	bls.n	800421c <run_classifier+0x90>
            ei_printf("ERR: Would write outside feature buffer\n");
 8004210:	4847      	ldr	r0, [pc, #284]	; (8004330 <run_classifier+0x1a4>)
 8004212:	f000 f9c5 	bl	80045a0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8004216:	f06f 0504 	mvn.w	r5, #4
 800421a:	e07b      	b.n	8004314 <run_classifier+0x188>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 800421c:	6a39      	ldr	r1, [r7, #32]
 800421e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	f107 0010 	add.w	r0, r7, #16
 800422a:	460a      	mov	r2, r1
 800422c:	2101      	movs	r1, #1
 800422e:	f7fc ff84 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>

        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004236:	f107 0110 	add.w	r1, r7, #16
 800423a:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 8004334 <run_classifier+0x1a8>
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	4798      	blx	r3
 8004242:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (ret != EIDSP_OK) {
 8004244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d007      	beq.n	800425a <run_classifier+0xce>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 800424a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800424c:	483a      	ldr	r0, [pc, #232]	; (8004338 <run_classifier+0x1ac>)
 800424e:	f000 f9a7 	bl	80045a0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8004252:	f06f 0504 	mvn.w	r5, #4
 8004256:	2400      	movs	r4, #0
 8004258:	e013      	b.n	8004282 <run_classifier+0xf6>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 800425a:	f008 f97b 	bl	800c554 <_Z29ei_run_impulse_check_canceledv>
 800425e:	4603      	mov	r3, r0
 8004260:	f113 0f02 	cmn.w	r3, #2
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <run_classifier+0xec>
            return EI_IMPULSE_CANCELED;
 8004270:	f06f 0501 	mvn.w	r5, #1
 8004274:	2400      	movs	r4, #0
 8004276:	e004      	b.n	8004282 <run_classifier+0xf6>
        }

        out_features_index += block.n_output_features;
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800427c:	4413      	add	r3, r2
 800427e:	657b      	str	r3, [r7, #84]	; 0x54
 8004280:	2401      	movs	r4, #1
 8004282:	f107 0310 	add.w	r3, r7, #16
 8004286:	4618      	mov	r0, r3
 8004288:	f7fc ff82 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 800428c:	2c01      	cmp	r4, #1
 800428e:	d141      	bne.n	8004314 <run_classifier+0x188>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8004290:	bf00      	nop
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 8004292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004294:	3301      	adds	r3, #1
 8004296:	653b      	str	r3, [r7, #80]	; 0x50
 8004298:	e7a6      	b.n	80041e8 <run_classifier+0x5c>
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 800429a:	f008 f963 	bl	800c564 <_Z16ei_read_timer_msv>
 800429e:	4603      	mov	r3, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	461a      	mov	r2, r3
 80042a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	629a      	str	r2, [r3, #40]	; 0x28

    if (debug) {
 80042ae:	79fb      	ldrb	r3, [r7, #7]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d01f      	beq.n	80042f4 <run_classifier+0x168>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b8:	4619      	mov	r1, r3
 80042ba:	4820      	ldr	r0, [pc, #128]	; (800433c <run_classifier+0x1b0>)
 80042bc:	f000 f970 	bl	80045a0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80042c0:	2300      	movs	r3, #0
 80042c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d210      	bcs.n	80042ee <run_classifier+0x162>
            ei_printf_float(features_matrix.buffer[ix]);
 80042cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	edd3 7a00 	vldr	s15, [r3]
 80042d8:	eeb0 0a67 	vmov.f32	s0, s15
 80042dc:	f008 f94c 	bl	800c578 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80042e0:	4817      	ldr	r0, [pc, #92]	; (8004340 <run_classifier+0x1b4>)
 80042e2:	f000 f95d 	bl	80045a0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80042e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e8:	3301      	adds	r3, #1
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ec:	e7ea      	b.n	80042c4 <run_classifier+0x138>
        }
        ei_printf("\n");
 80042ee:	4815      	ldr	r0, [pc, #84]	; (8004344 <run_classifier+0x1b8>)
 80042f0:	f000 f956 	bl	80045a0 <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 80042f4:	79fb      	ldrb	r3, [r7, #7]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <run_classifier+0x174>
        ei_printf("Running neural network...\n");
 80042fa:	4813      	ldr	r0, [pc, #76]	; (8004348 <run_classifier+0x1bc>)
 80042fc:	f000 f950 	bl	80045a0 <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 8004300:	79fa      	ldrb	r2, [r7, #7]
 8004302:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	4618      	mov	r0, r3
 800430a:	f7ff feaf 	bl	800406c <run_inference>
 800430e:	4603      	mov	r3, r0
 8004310:	461d      	mov	r5, r3
 8004312:	e000      	b.n	8004316 <run_classifier+0x18a>
            return EI_IMPULSE_DSP_ERROR;
 8004314:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc ff38 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8004320:	462b      	mov	r3, r5
}
 8004322:	4618      	mov	r0, r3
 8004324:	3758      	adds	r7, #88	; 0x58
 8004326:	46bd      	mov	sp, r7
 8004328:	bdb0      	pop	{r4, r5, r7, pc}
 800432a:	bf00      	nop
 800432c:	20000038 	.word	0x20000038
 8004330:	08017d3c 	.word	0x08017d3c
 8004334:	427a0000 	.word	0x427a0000
 8004338:	08017db4 	.word	0x08017db4
 800433c:	08018070 	.word	0x08018070
 8004340:	08017df4 	.word	0x08017df4
 8004344:	08017df8 	.word	0x08017df8
 8004348:	08017dfc 	.word	0x08017dfc

0800434c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>:
}

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized() {
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED != 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
#endif

    // And if we have one DSP block which operates on images...
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
 8004350:	4b06      	ldr	r3, [pc, #24]	; (800436c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x20>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	4a06      	ldr	r2, [pc, #24]	; (8004370 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x24>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d002      	beq.n	8004360 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x14>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800435a:	f06f 0308 	mvn.w	r3, #8
 800435e:	e000      	b.n	8004362 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x16>
    }

    return EI_IMPULSE_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	20000038 	.word	0x20000038
 8004370:	0800373d 	.word	0x0800373d
 8004374:	00000000 	.word	0x00000000

08004378 <run_classifier_image_quantized>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b097      	sub	sp, #92	; 0x5c
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	4613      	mov	r3, r2
 8004384:	71fb      	strb	r3, [r7, #7]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
 8004386:	f7ff ffe1 	bl	800434c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 800438a:	4603      	mov	r3, r0
 800438c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (verify_res != EI_IMPULSE_OK) {
 8004390:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <run_classifier_image_quantized+0x26>
        return verify_res;
 8004398:	f997 404b 	ldrsb.w	r4, [r7, #75]	; 0x4b
 800439c:	e0ab      	b.n	80044f6 <run_classifier_image_quantized+0x17e>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 800439e:	2234      	movs	r2, #52	; 0x34
 80043a0:	2100      	movs	r1, #0
 80043a2:	68b8      	ldr	r0, [r7, #8]
 80043a4:	f010 fc68 	bl	8014c78 <memset>
    EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_ms, &input, &output,
    #if EI_CLASSIFIER_OBJECT_DETECTION
        &output_labels,
        &output_scores,
    #endif
        &tensor_arena);
 80043a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043b0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80043b4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80043b8:	f7ff fd52 	bl	8003e60 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPh>
 80043bc:	4603      	mov	r3, r0
 80043be:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        &output_scores,
    #endif
        &interpreter,
        &tensor_arena);
#endif
    if (init_res != EI_IMPULSE_OK) {
 80043c2:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d002      	beq.n	80043d0 <run_classifier_image_quantized+0x58>
        return init_res;
 80043ca:	f997 404a 	ldrsb.w	r4, [r7, #74]	; 0x4a
 80043ce:	e092      	b.n	80044f6 <run_classifier_image_quantized+0x17e>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b09      	cmp	r3, #9
 80043d6:	d002      	beq.n	80043de <run_classifier_image_quantized+0x66>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 80043d8:	f06f 0408 	mvn.w	r4, #8
 80043dc:	e08b      	b.n	80044f6 <run_classifier_image_quantized+0x17e>
    }

    uint64_t dsp_start_ms = ei_read_timer_ms();
 80043de:	f008 f8c1 	bl	800c564 <_Z16ei_read_timer_msv>
 80043e2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 80043e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f107 0014 	add.w	r0, r7, #20
 80043ee:	2221      	movs	r2, #33	; 0x21
 80043f0:	2101      	movs	r1, #1
 80043f2:	f7fc fee3 	bl	80011bc <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
 80043f6:	4b44      	ldr	r3, [pc, #272]	; (8004508 <run_classifier_image_quantized+0x190>)
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	f107 0314 	add.w	r3, r7, #20
 80043fe:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800450c <run_classifier_image_quantized+0x194>
 8004402:	4619      	mov	r1, r3
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f7ff fa9f 	bl	8003948 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>
 800440a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (ret != EIDSP_OK) {
 800440c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800440e:	2b00      	cmp	r3, #0
 8004410:	d006      	beq.n	8004420 <run_classifier_image_quantized+0xa8>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8004412:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004414:	483e      	ldr	r0, [pc, #248]	; (8004510 <run_classifier_image_quantized+0x198>)
 8004416:	f000 f8c3 	bl	80045a0 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 800441a:	f06f 0404 	mvn.w	r4, #4
 800441e:	e065      	b.n	80044ec <run_classifier_image_quantized+0x174>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004420:	f008 f898 	bl	800c554 <_Z29ei_run_impulse_check_canceledv>
 8004424:	4603      	mov	r3, r0
 8004426:	f113 0f02 	cmn.w	r3, #2
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <run_classifier_image_quantized+0xc4>
        return EI_IMPULSE_CANCELED;
 8004436:	f06f 0401 	mvn.w	r4, #1
 800443a:	e057      	b.n	80044ec <run_classifier_image_quantized+0x174>
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 800443c:	f008 f892 	bl	800c564 <_Z16ei_read_timer_msv>
 8004440:	4603      	mov	r3, r0
 8004442:	460c      	mov	r4, r1
 8004444:	461a      	mov	r2, r3
 8004446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	461a      	mov	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	629a      	str	r2, [r3, #40]	; 0x28

    if (debug) {
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d02e      	beq.n	80044b4 <run_classifier_image_quantized+0x13c>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	4619      	mov	r1, r3
 800445c:	482d      	ldr	r0, [pc, #180]	; (8004514 <run_classifier_image_quantized+0x19c>)
 800445e:	f000 f89f 	bl	80045a0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8004462:	2300      	movs	r3, #0
 8004464:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800446a:	429a      	cmp	r2, r3
 800446c:	d21f      	bcs.n	80044ae <run_classifier_image_quantized+0x136>
            ei_printf_float((features_matrix.buffer[ix] - EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004472:	4413      	add	r3, r2
 8004474:	f993 3000 	ldrsb.w	r3, [r3]
 8004478:	3380      	adds	r3, #128	; 0x80
 800447a:	4618      	mov	r0, r3
 800447c:	f7fc f86a 	bl	8000554 <__aeabi_i2d>
 8004480:	a31f      	add	r3, pc, #124	; (adr r3, 8004500 <run_classifier_image_quantized+0x188>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fc f8cf 	bl	8000628 <__aeabi_dmul>
 800448a:	4603      	mov	r3, r0
 800448c:	460c      	mov	r4, r1
 800448e:	4618      	mov	r0, r3
 8004490:	4621      	mov	r1, r4
 8004492:	f7fc fbc1 	bl	8000c18 <__aeabi_d2f>
 8004496:	4603      	mov	r3, r0
 8004498:	ee00 3a10 	vmov	s0, r3
 800449c:	f008 f86c 	bl	800c578 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80044a0:	481d      	ldr	r0, [pc, #116]	; (8004518 <run_classifier_image_quantized+0x1a0>)
 80044a2:	f000 f87d 	bl	80045a0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80044a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044a8:	3301      	adds	r3, #1
 80044aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ac:	e7db      	b.n	8004466 <run_classifier_image_quantized+0xee>
        }
        ei_printf("\n");
 80044ae:	481b      	ldr	r0, [pc, #108]	; (800451c <run_classifier_image_quantized+0x1a4>)
 80044b0:	f000 f876 	bl	80045a0 <_Z9ei_printfPKcz>
    }

    ctx_start_ms = ei_read_timer_ms();
 80044b4:	f008 f856 	bl	800c564 <_Z16ei_read_timer_msv>
 80044b8:	4603      	mov	r3, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

#if (EI_CLASSIFIER_COMPILED == 1)
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_ms, output,
 80044c0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80044c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
    #if EI_CLASSIFIER_OBJECT_DETECTION
        output_labels,
        output_scores,
    #endif
        tensor_arena, result, debug);
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	4623      	mov	r3, r4
 80044d2:	f7ff fd6b 	bl	8003fac <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPhP19ei_impulse_result_tb>
 80044d6:	4603      	mov	r3, r0
 80044d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        output_scores,
    #endif
        interpreter, tensor_arena, result, debug);
#endif

    if (run_res != EI_IMPULSE_OK) {
 80044dc:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <run_classifier_image_quantized+0x172>
        return run_res;
 80044e4:	f997 403b 	ldrsb.w	r4, [r7, #59]	; 0x3b
 80044e8:	e000      	b.n	80044ec <run_classifier_image_quantized+0x174>
    }

    return EI_IMPULSE_OK;
 80044ea:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 80044ec:	f107 0314 	add.w	r3, r7, #20
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fc fe8d 	bl	8001210 <_ZN2ei12ei_matrix_i8D1Ev>
 80044f6:	4623      	mov	r3, r4
#endif // EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3754      	adds	r7, #84	; 0x54
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd90      	pop	{r4, r7, pc}
 8004500:	a0000000 	.word	0xa0000000
 8004504:	3fbd90e6 	.word	0x3fbd90e6
 8004508:	20000038 	.word	0x20000038
 800450c:	427a0000 	.word	0x427a0000
 8004510:	08017db4 	.word	0x08017db4
 8004514:	08018070 	.word	0x08018070
 8004518:	08017df4 	.word	0x08017df4
 800451c:	08017df8 	.word	0x08017df8

08004520 <_Z16get_feature_datajjPf>:
// paste the raw features here
static float features[] = {
		-5.0000, -5.5500, 2.3700, -5.0000, -5.5500, 2.3700, -3.2300, -5.3400, 2.0800, -1.7100, -4.6300, 0.8400, -1.1800, -4.6200, 0.0600, -1.3400, -5.3900, 0.4600, -1.2500, -6.2500, 1.4800, -1.4600, -5.8500, 1.3100, -1.4600, -5.8500, 1.3100, 0.9600, -5.8100, -0.2300, 2.0200, -4.6200, -1.3600, 1.7900, -5.0700, -1.0600, 1.8300, -5.2100, -0.6000, 3.1000, -4.5300, -0.8600, 3.2400, -3.9500, -1.5000, 3.2400, -3.9500, -1.5000, 4.0700, -3.9200, -1.3300, 5.4500, -3.8700, -1.3100, 7.2500, -3.1300, -2.2200, 7.4400, -2.5700, -3.0700, 7.0100, -2.6900, -2.8200, 7.3700, -3.0400, -3.0400, 7.3700, -3.0400, -3.0400, 9.8600, -2.5400, -4.1700, 12.4200, -2.4900, -5.7200, 12.8000, -2.8200, -6.6200, 13.5000, -3.8200, -7.0100, 14.5000, -4.6300, -7.9200, 15.3400, -5.2100, -8.0200, 15.3400, -5.2100, -8.0200, 15.2500, -6.5000, -7.1700, 14.9500, -7.0600, -6.9800, 16.3900, -7.2100, -7.4200, 17.4900, -7.1800, -7.2600, 16.4400, -7.4500, -5.8100, 15.2600, -7.4400, -5.3800, 15.2600, -7.4400, -5.3800, 14.8100, -6.6400, -6.0900, 14.5100, -6.2300, -5.1300, 13.3400, -6.1300, -4.2100, 12.6000, -5.7300, -4.4700, 11.2900, -4.9800, -4.8000, 9.6700, -4.6800, -4.3500, 9.6700, -4.6800, -4.3500, 8.1700, -4.8800, -3.4700, 8.2300, -4.3500, -4.2200, 7.9200, -3.7000, -4.1200, 7.9900, -2.8500, -3.3100, 7.2900, -3.0300, -1.9800, 6.0800, -3.2600, -1.1900, 6.0800, -3.2600, -1.1900, 4.7400, -3.1700, -0.5900, 3.8600, -2.8500, -0.0400, 2.2400, -2.9400, 1.0300, 1.0500, -3.3600, 1.2300, -0.8300, -3.0700, 1.3600, -0.8300, -3.0700, 1.3600, -1.7600, -3.1000, 2.0800, -1.7500, -2.9600, 2.2300, -3.3100, -2.7200, 1.7100, -4.9600, -2.4600, 1.7400, -5.7600, -2.5400, 2.9400, -6.2400, -2.1700, 2.6300, -6.2400, -2.1700, 2.6300, -6.7200, -1.7900, 2.1500, -7.8200, -1.2500, 1.9500, -8.6900, -1.4100, 2.3000, -10.7100, -2.1000, 3.6000, -11.4100, -2.2500, 3.4700, -12.8200, -1.8700, 2.4100, -12.8200, -1.8700, 2.4100, -16.0200, -2.9100, 3.4200, -19.0100, -4.7700, 5.0000, -19.9500, -5.8200, 4.6900, -19.9800, -5.6800, 3.2200, -19.9800, -5.6100, 2.7100, -19.9800, -6.1900, 3.5400, -19.9800, -6.1900, 3.5400, -19.9800, -6.9500, 4.2000, -19.8200, -6.6400, 4.0100, -18.0700, -6.1700, 3.6200, -16.2000, -6.0200, 3.9900, -14.6200, -5.9600, 4.7200, -13.1900, -5.6900, 5.0300, -13.1900, -5.6900, 5.0300, -11.9600, -5.1000, 4.2600, -11.1800, -5.0100, 3.3600, -10.8800, -4.8400, 3.4400, -10.1300, -4.7000, 3.1500, -9.2200, -4.5700, 2.9600, -7.4100, -4.5000, 3.0500, -7.4100, -4.5000, 3.0500, -6.1900, -4.9300, 3.5300, -4.9900, -4.8500, 3.7500, -3.8200, -4.3900, 2.3600, -2.0500, -4.3100, 1.7200, -1.2500, -5.0600, 2.2000, -1.0900, -5.1900, 2.3500, -1.0900, -5.1900, 2.3500, -0.3800, -4.8500, 1.6500, 0.9600, -4.4500, 1.0900, 1.8700, -4.0700, 0.7400, 2.6300, -3.4500, -0.3400, 3.4800, -2.7000, -0.6900, 4.1900, -2.6100, -1.2700, 4.1900, -2.6100, -1.2700, 4.7200, -2.8200, -1.4500, 4.8000, -2.9700, -1.5700, 5.5200, -2.1000, -2.5400, 6.4800, -2.0200, -3.4000, 7.4000, -2.4400, -3.2700, 7.9500, -2.2700, -3.6100, 7.9500, -2.2700, -3.6100, 7.9400, -1.9600, -4.3200, 7.8100, -2.3200, -4.5100, 9.3000, -2.7800, -4.8100, 12.6200, -2.4600, -5.7800, 13.9700, -2.6100, -5.8300, 13.9700, -2.6100, -5.0400, 13.6000, -4.0500, -5.0400, 13.1900, -5.3500, -4.9700, 13.2000, -5.9600, -4.8700, 14.1900, -6.6000, -4.6300, 15.3400, -7.0800, -4.5700, 15.2800, -6.9500, -4.7900
};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4a06      	ldr	r2, [pc, #24]	; (800454c <_Z16get_feature_datajjPf+0x2c>)
 8004532:	1899      	adds	r1, r3, r2
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	461a      	mov	r2, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f010 fb78 	bl	8014c30 <memcpy>
    return 0;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000048 	.word	0x20000048

08004550 <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b0b4      	sub	sp, #208	; 0xd0
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	4618      	mov	r0, r3
 8004564:	f011 fe2a 	bl	80161bc <vsiprintf>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	bfcc      	ite	gt
 800456e:	2301      	movgt	r3, #1
 8004570:	2300      	movle	r3, #0
 8004572:	b2db      	uxtb	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00d      	beq.n	8004594 <_Z6vprintPKcSt9__va_list+0x44>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 8004578:	f107 0308 	add.w	r3, r7, #8
 800457c:	4618      	mov	r0, r3
 800457e:	f7fb fe39 	bl	80001f4 <strlen>
 8004582:	4603      	mov	r3, r0
 8004584:	b29a      	uxth	r2, r3
 8004586:	f107 0108 	add.w	r1, r7, #8
 800458a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800458e:	4803      	ldr	r0, [pc, #12]	; (800459c <_Z6vprintPKcSt9__va_list+0x4c>)
 8004590:	f003 f90f 	bl	80077b2 <HAL_UART_Transmit>
    }
}
 8004594:	bf00      	nop
 8004596:	37d0      	adds	r7, #208	; 0xd0
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	2000097c 	.word	0x2000097c

080045a0 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 80045a0:	b40f      	push	{r0, r1, r2, r3}
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 80045a8:	f107 0314 	add.w	r3, r7, #20
 80045ac:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	6938      	ldr	r0, [r7, #16]
 80045b2:	f7ff ffcd 	bl	8004550 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 80045b6:	bf00      	nop
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045c0:	b004      	add	sp, #16
 80045c2:	4770      	bx	lr

080045c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b096      	sub	sp, #88	; 0x58
 80045c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045ca:	f002 f911 	bl	80067f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 80045ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff f8a5 	bl	8003722 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 80045d8:	f240 1377 	movw	r3, #375	; 0x177
 80045dc:	64bb      	str	r3, [r7, #72]	; 0x48
  signal.get_data = &get_feature_data;
 80045de:	4b2a      	ldr	r3, [pc, #168]	; (8004688 <main+0xc4>)
 80045e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80045e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fae8 	bl	8004bc2 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeENSt9result_ofIFRSA_jjS0_EE4typeEEE5valueERS2_E4typeEOS8_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045f2:	f000 f855 	bl	80046a0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045f6:	f000 f90f 	bl	8004818 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80045fa:	f000 f8df 	bl	80047bc <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 80045fe:	f000 f8c5 	bl	800478c <_ZL11MX_CRC_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		ei_impulse_result_t result = { 0 };
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	2234      	movs	r2, #52	; 0x34
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f010 fb35 	bl	8014c78 <memset>
		EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 800460e:	1d39      	adds	r1, r7, #4
 8004610:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004614:	2201      	movs	r2, #1
 8004616:	4618      	mov	r0, r3
 8004618:	f7ff fdb8 	bl	800418c <run_classifier>
 800461c:	4603      	mov	r3, r0
 800461e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		ei_printf("run_classifier returned: %d\r\n", res);
 8004622:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004626:	4619      	mov	r1, r3
 8004628:	4818      	ldr	r0, [pc, #96]	; (800468c <main+0xc8>)
 800462a:	f7ff ffb9 	bl	80045a0 <_Z9ei_printfPKcz>

		ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \r\n",
 800462e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004634:	4816      	ldr	r0, [pc, #88]	; (8004690 <main+0xcc>)
 8004636:	f7ff ffb3 	bl	80045a0 <_Z9ei_printfPKcz>
			result.timing.dsp, result.timing.classification, result.timing.anomaly);

		// print the predictions
		ei_printf("[");
 800463a:	4816      	ldr	r0, [pc, #88]	; (8004694 <main+0xd0>)
 800463c:	f7ff ffb0 	bl	80045a0 <_Z9ei_printfPKcz>
		for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004640:	2300      	movs	r3, #0
 8004642:	657b      	str	r3, [r7, #84]	; 0x54
 8004644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004646:	2b03      	cmp	r3, #3
 8004648:	d815      	bhi.n	8004676 <main+0xb2>
			ei_printf_float(result.classification[ix].value);
 800464a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004652:	4413      	add	r3, r2
 8004654:	3b50      	subs	r3, #80	; 0x50
 8004656:	edd3 7a00 	vldr	s15, [r3]
 800465a:	eeb0 0a67 	vmov.f32	s0, s15
 800465e:	f007 ff8b 	bl	800c578 <_Z15ei_printf_floatf>
	#if EI_CLASSIFIER_HAS_ANOMALY == 1
			ei_printf(", ");
	#else
			if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8004662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004664:	2b03      	cmp	r3, #3
 8004666:	d002      	beq.n	800466e <main+0xaa>
				ei_printf(", ");
 8004668:	480b      	ldr	r0, [pc, #44]	; (8004698 <main+0xd4>)
 800466a:	f7ff ff99 	bl	80045a0 <_Z9ei_printfPKcz>
		for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800466e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004670:	3301      	adds	r3, #1
 8004672:	657b      	str	r3, [r7, #84]	; 0x54
 8004674:	e7e6      	b.n	8004644 <main+0x80>
	#endif
		}
	#if EI_CLASSIFIER_HAS_ANOMALY == 1
		ei_printf_float(result.anomaly);
	#endif
		ei_printf("]\r\n\n\n");
 8004676:	4809      	ldr	r0, [pc, #36]	; (800469c <main+0xd8>)
 8004678:	f7ff ff92 	bl	80045a0 <_Z9ei_printfPKcz>

	  HAL_Delay(5000);
 800467c:	f241 3088 	movw	r0, #5000	; 0x1388
 8004680:	f002 f928 	bl	80068d4 <HAL_Delay>
    /* USER CODE BEGIN 3 */
  }
 8004684:	e7bd      	b.n	8004602 <main+0x3e>
 8004686:	bf00      	nop
 8004688:	08004521 	.word	0x08004521
 800468c:	080180cc 	.word	0x080180cc
 8004690:	080180ec 	.word	0x080180ec
 8004694:	08018134 	.word	0x08018134
 8004698:	08018138 	.word	0x08018138
 800469c:	0801813c 	.word	0x0801813c

080046a0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b094      	sub	sp, #80	; 0x50
 80046a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046a6:	f107 0320 	add.w	r3, r7, #32
 80046aa:	2230      	movs	r2, #48	; 0x30
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f010 fae2 	bl	8014c78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046c4:	2300      	movs	r3, #0
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	4b2e      	ldr	r3, [pc, #184]	; (8004784 <_Z18SystemClock_Configv+0xe4>)
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	4a2d      	ldr	r2, [pc, #180]	; (8004784 <_Z18SystemClock_Configv+0xe4>)
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d2:	6413      	str	r3, [r2, #64]	; 0x40
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <_Z18SystemClock_Configv+0xe4>)
 80046d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80046e0:	2300      	movs	r3, #0
 80046e2:	607b      	str	r3, [r7, #4]
 80046e4:	4b28      	ldr	r3, [pc, #160]	; (8004788 <_Z18SystemClock_Configv+0xe8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80046ec:	4a26      	ldr	r2, [pc, #152]	; (8004788 <_Z18SystemClock_Configv+0xe8>)
 80046ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	4b24      	ldr	r3, [pc, #144]	; (8004788 <_Z18SystemClock_Configv+0xe8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80046fc:	607b      	str	r3, [r7, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004700:	2302      	movs	r3, #2
 8004702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004704:	2301      	movs	r3, #1
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004708:	2310      	movs	r3, #16
 800470a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800470c:	2302      	movs	r3, #2
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004710:	2300      	movs	r3, #0
 8004712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004714:	2310      	movs	r3, #16
 8004716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004718:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800471c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800471e:	2304      	movs	r3, #4
 8004720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004722:	2307      	movs	r3, #7
 8004724:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004726:	f107 0320 	add.w	r3, r7, #32
 800472a:	4618      	mov	r0, r3
 800472c:	f002 fb92 	bl	8006e54 <HAL_RCC_OscConfig>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8004740:	f000 f8da 	bl	80048f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004744:	230f      	movs	r3, #15
 8004746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004748:	2302      	movs	r3, #2
 800474a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800475a:	f107 030c 	add.w	r3, r7, #12
 800475e:	2102      	movs	r1, #2
 8004760:	4618      	mov	r0, r3
 8004762:	f002 fde7 	bl	8007334 <HAL_RCC_ClockConfig>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8004776:	f000 f8bf 	bl	80048f8 <Error_Handler>
  }
}
 800477a:	bf00      	nop
 800477c:	3750      	adds	r7, #80	; 0x50
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023800 	.word	0x40023800
 8004788:	40007000 	.word	0x40007000

0800478c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004790:	4b08      	ldr	r3, [pc, #32]	; (80047b4 <_ZL11MX_CRC_Initv+0x28>)
 8004792:	4a09      	ldr	r2, [pc, #36]	; (80047b8 <_ZL11MX_CRC_Initv+0x2c>)
 8004794:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004796:	4807      	ldr	r0, [pc, #28]	; (80047b4 <_ZL11MX_CRC_Initv+0x28>)
 8004798:	f002 f9a3 	bl	8006ae2 <HAL_CRC_Init>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80047ac:	f000 f8a4 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80047b0:	bf00      	nop
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20000974 	.word	0x20000974
 80047b8:	40023000 	.word	0x40023000

080047bc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047c0:	4b13      	ldr	r3, [pc, #76]	; (8004810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80047c2:	4a14      	ldr	r2, [pc, #80]	; (8004814 <_ZL19MX_USART2_UART_Initv+0x58>)
 80047c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80047c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80047cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047ce:	4b10      	ldr	r3, [pc, #64]	; (8004810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047d4:	4b0e      	ldr	r3, [pc, #56]	; (8004810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80047dc:	2200      	movs	r2, #0
 80047de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80047e0:	4b0b      	ldr	r3, [pc, #44]	; (8004810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80047e2:	220c      	movs	r2, #12
 80047e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80047e6:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80047f2:	4807      	ldr	r0, [pc, #28]	; (8004810 <_ZL19MX_USART2_UART_Initv+0x54>)
 80047f4:	f002 ff90 	bl	8007718 <HAL_UART_Init>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	bf14      	ite	ne
 80047fe:	2301      	movne	r3, #1
 8004800:	2300      	moveq	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8004808:	f000 f876 	bl	80048f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800480c:	bf00      	nop
 800480e:	bd80      	pop	{r7, pc}
 8004810:	2000097c 	.word	0x2000097c
 8004814:	40004400 	.word	0x40004400

08004818 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800481e:	f107 0314 	add.w	r3, r7, #20
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	605a      	str	r2, [r3, #4]
 8004828:	609a      	str	r2, [r3, #8]
 800482a:	60da      	str	r2, [r3, #12]
 800482c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	6313      	str	r3, [r2, #48]	; 0x30
 800483e:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800484a:	2300      	movs	r3, #0
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	4b26      	ldr	r3, [pc, #152]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	4a25      	ldr	r2, [pc, #148]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 8004854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004858:	6313      	str	r3, [r2, #48]	; 0x30
 800485a:	4b23      	ldr	r3, [pc, #140]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	4b1f      	ldr	r3, [pc, #124]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 800486c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486e:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 8004870:	f043 0301 	orr.w	r3, r3, #1
 8004874:	6313      	str	r3, [r2, #48]	; 0x30
 8004876:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	60bb      	str	r3, [r7, #8]
 8004880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004882:	2300      	movs	r3, #0
 8004884:	607b      	str	r3, [r7, #4]
 8004886:	4b18      	ldr	r3, [pc, #96]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	4a17      	ldr	r2, [pc, #92]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 800488c:	f043 0302 	orr.w	r3, r3, #2
 8004890:	6313      	str	r3, [r2, #48]	; 0x30
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <_ZL12MX_GPIO_Initv+0xd0>)
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800489e:	2200      	movs	r2, #0
 80048a0:	2120      	movs	r1, #32
 80048a2:	4812      	ldr	r0, [pc, #72]	; (80048ec <_ZL12MX_GPIO_Initv+0xd4>)
 80048a4:	f002 fabc 	bl	8006e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80048a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80048ae:	4b10      	ldr	r3, [pc, #64]	; (80048f0 <_ZL12MX_GPIO_Initv+0xd8>)
 80048b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80048b6:	f107 0314 	add.w	r3, r7, #20
 80048ba:	4619      	mov	r1, r3
 80048bc:	480d      	ldr	r0, [pc, #52]	; (80048f4 <_ZL12MX_GPIO_Initv+0xdc>)
 80048be:	f002 f92d 	bl	8006b1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80048c2:	2320      	movs	r3, #32
 80048c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048c6:	2301      	movs	r3, #1
 80048c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ce:	2300      	movs	r3, #0
 80048d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80048d2:	f107 0314 	add.w	r3, r7, #20
 80048d6:	4619      	mov	r1, r3
 80048d8:	4804      	ldr	r0, [pc, #16]	; (80048ec <_ZL12MX_GPIO_Initv+0xd4>)
 80048da:	f002 f91f 	bl	8006b1c <HAL_GPIO_Init>

}
 80048de:	bf00      	nop
 80048e0:	3728      	adds	r7, #40	; 0x28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	40023800 	.word	0x40023800
 80048ec:	40020000 	.word	0x40020000
 80048f0:	10210000 	.word	0x10210000
 80048f4:	40020800 	.word	0x40020800

080048f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80048fc:	bf00      	nop
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 8004906:	b590      	push	{r4, r7, lr}
 8004908:	b083      	sub	sp, #12
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fb fe20 	bl	8000554 <__aeabi_i2d>
 8004914:	4603      	mov	r3, r0
 8004916:	460c      	mov	r4, r1
 8004918:	ec44 3b10 	vmov	d0, r3, r4
 800491c:	f00d fd72 	bl	8012404 <sqrt>
 8004920:	eeb0 7a40 	vmov.f32	s14, s0
 8004924:	eef0 7a60 	vmov.f32	s15, s1
 8004928:	eeb0 0a47 	vmov.f32	s0, s14
 800492c:	eef0 0a67 	vmov.f32	s1, s15
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	bd90      	pop	{r4, r7, pc}

08004936 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8004936:	b5b0      	push	{r4, r5, r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	ed87 0a01 	vstr	s0, [r7, #4]
 8004940:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fb fe18 	bl	8000578 <__aeabi_f2d>
 8004948:	4604      	mov	r4, r0
 800494a:	460d      	mov	r5, r1
 800494c:	6838      	ldr	r0, [r7, #0]
 800494e:	f7fb fe01 	bl	8000554 <__aeabi_i2d>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	ec43 2b11 	vmov	d1, r2, r3
 800495a:	ec45 4b10 	vmov	d0, r4, r5
 800495e:	f00d fbe1 	bl	8012124 <pow>
 8004962:	eeb0 7a40 	vmov.f32	s14, s0
 8004966:	eef0 7a60 	vmov.f32	s15, s1
    }
 800496a:	eeb0 0a47 	vmov.f32	s0, s14
 800496e:	eef0 0a67 	vmov.f32	s1, s15
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bdb0      	pop	{r4, r5, r7, pc}

08004978 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8004978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497c:	b084      	sub	sp, #16
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4618      	mov	r0, r3
 800498c:	f7fc fbc4 	bl	8001118 <_ZNKSt14_Function_base8_M_emptyEv>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8004996:	f7fc fc51 	bl	800123c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	68dc      	ldr	r4, [r3, #12]
 800499e:	68fd      	ldr	r5, [r7, #12]
 80049a0:	f107 0308 	add.w	r3, r7, #8
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 f94d 	bl	8004c44 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80049aa:	4606      	mov	r6, r0
 80049ac:	1d3b      	adds	r3, r7, #4
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f948 	bl	8004c44 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80049b4:	4680      	mov	r8, r0
 80049b6:	463b      	mov	r3, r7
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f94e 	bl	8004c5a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80049be:	4603      	mov	r3, r0
 80049c0:	4642      	mov	r2, r8
 80049c2:	4631      	mov	r1, r6
 80049c4:	4628      	mov	r0, r5
 80049c6:	47a0      	blx	r4
 80049c8:	4603      	mov	r3, r0
    }
 80049ca:	4618      	mov	r0, r3
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080049d4 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 80049d4:	b590      	push	{r4, r7, lr}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f7fb fdb9 	bl	8000554 <__aeabi_i2d>
 80049e2:	4603      	mov	r3, r0
 80049e4:	460c      	mov	r4, r1
 80049e6:	ec44 3b17 	vmov	d7, r3, r4
 80049ea:	eeb0 0a47 	vmov.f32	s0, s14
 80049ee:	eef0 0a67 	vmov.f32	s1, s15
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd90      	pop	{r4, r7, pc}

080049f8 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f000 f940 	bl	8004c88 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8004a12:	b5b0      	push	{r4, r5, r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681c      	ldr	r4, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 f956 	bl	8004cd6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004a2a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4620      	mov	r0, r4
 8004a32:	f000 f95b 	bl	8004cec <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 f932 	bl	8004ca2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bdb0      	pop	{r4, r5, r7, pc}

08004a48 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d00d      	beq.n	8004a7a <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	4619      	mov	r1, r3
 8004a68:	f000 f959 	bl	8004d1e <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f103 0208 	add.w	r2, r3, #8
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8004a78:	e008      	b.n	8004a8c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f81a 	bl	8004ab4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>
 8004a80:	4603      	mov	r3, r0
 8004a82:	683a      	ldr	r2, [r7, #0]
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 f95c 	bl	8004d44 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 8004a8c:	bf00      	nop
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	f107 030c 	add.w	r3, r7, #12
 8004aa2:	4611      	mov	r1, r2
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 f9d9 	bl	8004e5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	1d1a      	adds	r2, r3, #4
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f9c8 	bl	8004e5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit _GLIBCXX14_CONSTEXPR
      _Iter_comp_iter(_Compare __comp)
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8004af6:	463b      	mov	r3, r7
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7ff ffec 	bl	8004ad6 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8004b08:	b5b0      	push	{r4, r5, r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8004b10:	1d3b      	adds	r3, r7, #4
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff ffdf 	bl	8004ad6 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 8004b18:	f107 030c 	add.w	r3, r7, #12
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff ffe4 	bl	8004aec <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 8004b24:	4620      	mov	r0, r4
 8004b26:	3710      	adds	r7, #16
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bdb0      	pop	{r4, r5, r7, pc}

08004b2c <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESC_fftEUlRKS5_SE_E_EvT_SG_T0_>:
   *  The relative ordering of equivalent elements is not preserved, use
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004b2c:	b590      	push	{r4, r7, lr}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ffe5 	bl	8004b08 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 8004b3e:	4622      	mov	r2, r4
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f99a 	bl	8004e7c <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8004b48:	bf00      	nop
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd90      	pop	{r4, r7, pc}

08004b50 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	10db      	asrs	r3, r3, #3
 8004b66:	4618      	mov	r0, r3
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
      }
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b082      	sub	sp, #8
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fc fa9a 	bl	80010d6 <_ZNSt14_Function_baseC1Ev>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeENSt9result_ofIFRSA_jjS0_EE4typeEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b086      	sub	sp, #24
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8004bcc:	6838      	ldr	r0, [r7, #0]
 8004bce:	f7ff ffed 	bl	8004bac <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f107 0308 	add.w	r3, r7, #8
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f985 	bl	8004eec <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 f80a 	bl	8004c02 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7fe fd88 	bl	8003708 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8004bf8:	687b      	ldr	r3, [r7, #4]
	}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	4611      	mov	r1, r2
 8004c12:	4618      	mov	r0, r3
 8004c14:	f000 f99f 	bl	8004f56 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f103 0208 	add.w	r2, r3, #8
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f000 f9c8 	bl	8004fba <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f103 020c 	add.w	r2, r3, #12
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	330c      	adds	r3, #12
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f000 f9e9 	bl	800500e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f9fc 	bl	8005076 <_ZNSaIN2ei8spectral10processing11freq_peak_tEED1Ev>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4618      	mov	r0, r3
 8004c82:	3708      	adds	r7, #8
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>:
      _Vector_base()
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 f9da 	bl	800504c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implC1Ev>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6819      	ldr	r1, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f9e5 	bl	800508e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff ffd2 	bl	8004c70 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implD1Ev>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f000 f9da 	bl	80050b4 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tEEvT_S5_>
    }
 8004d00:	bf00      	nop
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	60f8      	str	r0, [r7, #12]
 8004d26:	60b9      	str	r1, [r7, #8]
 8004d28:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ffec 	bl	8004d08 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004d30:	4603      	mov	r3, r0
 8004d32:	461a      	mov	r2, r3
 8004d34:	68b9      	ldr	r1, [r7, #8]
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 f9c9 	bl	80050ce <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8004d44:	b5b0      	push	{r4, r5, r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8004d50:	4a41      	ldr	r2, [pc, #260]	; (8004e58 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 8004d52:	2101      	movs	r1, #1
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f9d5 	bl	8005104 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc>
 8004d5a:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f7ff fe99 	bl	8004a94 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>
 8004d62:	4603      	mov	r3, r0
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	f107 0214 	add.w	r2, r7, #20
 8004d6a:	f107 0308 	add.w	r3, r7, #8
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fa0f 	bl	8005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8004d76:	4603      	mov	r3, r0
 8004d78:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fa1e 	bl	80051c0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj>
 8004d84:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8004d8a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	18d5      	adds	r5, r2, r3
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7ff ffb7 	bl	8004d08 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4620      	mov	r0, r4
 8004da2:	f7ff ffbc 	bl	8004d1e <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8004da6:	2300      	movs	r3, #0
 8004da8:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681c      	ldr	r4, [r3, #0]
 8004dae:	f107 0308 	add.w	r3, r7, #8
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fa18 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8004db8:	4603      	mov	r3, r0
 8004dba:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff ff89 	bl	8004cd6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004dc4:	4603      	mov	r3, r0
	  __new_finish
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	4629      	mov	r1, r5
 8004dca:	4620      	mov	r0, r4
 8004dcc:	f000 fa17 	bl	80051fe <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 8004dd0:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	3308      	adds	r3, #8
 8004dd6:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8004dd8:	f107 0308 	add.w	r3, r7, #8
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 fa03 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8004de2:	4603      	mov	r3, r0
 8004de4:	681c      	ldr	r4, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff ff72 	bl	8004cd6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004df2:	4603      	mov	r3, r0
	  __new_finish
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4629      	mov	r1, r5
 8004df8:	4620      	mov	r0, r4
 8004dfa:	f000 fa00 	bl	80051fe <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 8004dfe:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681c      	ldr	r4, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff ff63 	bl	8004cd6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004e10:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004e12:	461a      	mov	r2, r3
 8004e14:	4629      	mov	r1, r5
 8004e16:	4620      	mov	r0, r4
 8004e18:	f7ff ff68 	bl	8004cec <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8004e26:	461a      	mov	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8004e30:	461a      	mov	r2, r3
 8004e32:	f000 f92c 	bl	800508e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	69fa      	ldr	r2, [r7, #28]
 8004e3a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	00db      	lsls	r3, r3, #3
 8004e46:	69fa      	ldr	r2, [r7, #28]
 8004e48:	441a      	add	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	609a      	str	r2, [r3, #8]
    }
 8004e4e:	bf00      	nop
 8004e50:	3728      	adds	r7, #40	; 0x28
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bdb0      	pop	{r4, r5, r7, pc}
 8004e56:	bf00      	nop
 8004e58:	08018178 	.word	0x08018178

08004e5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4618      	mov	r0, r3
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 8004e88:	f107 0208 	add.w	r2, r7, #8
 8004e8c:	f107 030c 	add.w	r3, r7, #12
 8004e90:	4611      	mov	r1, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 f9cc 	bl	8005230 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d017      	beq.n	8004ece <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x52>
				std::__lg(__last - __first) * 2,
 8004e9e:	f107 020c 	add.w	r2, r7, #12
 8004ea2:	f107 0308 	add.w	r3, r7, #8
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f973 	bl	8005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7fc f8bb 	bl	800102c <_ZSt4__lgi>
 8004eb6:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8004eb8:	005a      	lsls	r2, r3, #1
 8004eba:	793b      	ldrb	r3, [r7, #4]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f9ce 	bl	8005260 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 8004ec4:	793a      	ldrb	r2, [r7, #4]
 8004ec6:	68b9      	ldr	r1, [r7, #8]
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f000 fa00 	bl	80052ce <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr

08004eec <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fc f8ec 	bl	80010d6 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 fa1c 	bl	800533e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00f      	beq.n	8004f2c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8004f0c:	687c      	ldr	r4, [r7, #4]
 8004f0e:	463b      	mov	r3, r7
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7ff ffe0 	bl	8004ed6 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8004f16:	4603      	mov	r3, r0
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	f000 fa1f 	bl	800535e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a05      	ldr	r2, [pc, #20]	; (8004f38 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8004f24:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a04      	ldr	r2, [pc, #16]	; (8004f3c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8004f2a:	609a      	str	r2, [r3, #8]
      }
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd90      	pop	{r4, r7, pc}
 8004f36:	bf00      	nop
 8004f38:	08005383 	.word	0x08005383
 8004f3c:	080053cb 	.word	0x080053cb

08004f40 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
 8004f5e:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ffed 	bl	8004f40 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8004f66:	4602      	mov	r2, r0
 8004f68:	f107 0308 	add.w	r3, r7, #8
 8004f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f70:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8004f74:	6838      	ldr	r0, [r7, #0]
 8004f76:	f7ff ffe3 	bl	8004f40 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f82:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8004f86:	f107 0308 	add.w	r3, r7, #8
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff ffd8 	bl	8004f40 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8004f90:	4602      	mov	r2, r0
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f98:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004f9c:	bf00      	nop
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff ffed 	bl	8004fa4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8004fd0:	6838      	ldr	r0, [r7, #0]
 8004fd2:	f7ff ffe7 	bl	8004fa4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7ff ffde 	bl	8004fa4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	601a      	str	r2, [r3, #0]
    }
 8004ff0:	bf00      	nop
 8004ff2:	3710      	adds	r7, #16
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f7ff ffed 	bl	8004ff8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800501e:	4603      	mov	r3, r0
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005024:	6838      	ldr	r0, [r7, #0]
 8005026:	f7ff ffe7 	bl	8004ff8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800502a:	4603      	mov	r3, r0
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005032:	f107 030c 	add.w	r3, r7, #12
 8005036:	4618      	mov	r0, r3
 8005038:	f7ff ffde 	bl	8004ff8 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 800503c:	4603      	mov	r3, r0
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	601a      	str	r2, [r3, #0]
    }
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f9e0 	bl	800541a <_ZNSaIN2ei8spectral10processing11freq_peak_tEEC1Ev>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	605a      	str	r2, [r3, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	609a      	str	r2, [r3, #8]
	{ }
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4618      	mov	r0, r3
 8005070:	3708      	adds	r7, #8
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}

08005076 <_ZNSaIN2ei8spectral10processing11freq_peak_tEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8005076:	b580      	push	{r7, lr}
 8005078:	b082      	sub	sp, #8
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9d7 	bl	8005432 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEED1Ev>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 800508e:	b580      	push	{r7, lr}
 8005090:	b084      	sub	sp, #16
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
	if (__p)
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f9ce 	bl	8005448 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE10deallocateERS4_PS3_j>
      }
 80050ac:	bf00      	nop
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f9d0 	bl	8005466 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2ei8spectral10processing11freq_peak_tEEEvT_S7_>
    }
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80050ce:	b590      	push	{r4, r7, lr}
 80050d0:	b085      	sub	sp, #20
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	60b9      	str	r1, [r7, #8]
 80050d8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7ff fe14 	bl	8004d08 <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 80050e0:	4604      	mov	r4, r0
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4619      	mov	r1, r3
 80050e6:	2008      	movs	r0, #8
 80050e8:	f7fb ffaf 	bl	800104a <_ZnwjPv>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2e>
 80050f2:	4622      	mov	r2, r4
 80050f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	bd90      	pop	{r4, r7, pc}

08005104 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8005104:	b590      	push	{r4, r7, lr}
 8005106:	b087      	sub	sp, #28
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 f9b3 	bl	800547c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 8005116:	4604      	mov	r4, r0
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f7ff fd19 	bl	8004b50 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 800511e:	4603      	mov	r3, r0
 8005120:	1ae2      	subs	r2, r4, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	bf34      	ite	cc
 8005128:	2301      	movcc	r3, #1
 800512a:	2300      	movcs	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4618      	mov	r0, r3
 8005136:	f00c fe0a 	bl	8011d4e <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f7ff fd08 	bl	8004b50 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 8005140:	4604      	mov	r4, r0
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7ff fd04 	bl	8004b50 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 8005148:	4603      	mov	r3, r0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	f107 0208 	add.w	r2, r7, #8
 8005150:	f107 0310 	add.w	r3, r7, #16
 8005154:	4611      	mov	r1, r2
 8005156:	4618      	mov	r0, r3
 8005158:	f000 f9a1 	bl	800549e <_ZSt3maxIjERKT_S2_S2_>
 800515c:	4603      	mov	r3, r0
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4423      	add	r3, r4
 8005162:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005164:	68f8      	ldr	r0, [r7, #12]
 8005166:	f7ff fcf3 	bl	8004b50 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 800516a:	4602      	mov	r2, r0
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	4293      	cmp	r3, r2
 8005170:	d306      	bcc.n	8005180 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x7c>
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f982 	bl	800547c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 8005178:	4602      	mov	r2, r0
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4293      	cmp	r3, r2
 800517e:	d904      	bls.n	800518a <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x86>
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f97b 	bl	800547c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 8005186:	4603      	mov	r3, r0
 8005188:	e000      	b.n	800518c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x88>
 800518a:	697b      	ldr	r3, [r7, #20]
      }
 800518c:	4618      	mov	r0, r3
 800518e:	371c      	adds	r7, #28
 8005190:	46bd      	mov	sp, r7
 8005192:	bd90      	pop	{r4, r7, pc}

08005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005194:	b590      	push	{r4, r7, lr}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f822 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 80051a4:	4603      	mov	r3, r0
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461c      	mov	r4, r3
 80051aa:	6838      	ldr	r0, [r7, #0]
 80051ac:	f000 f81c 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 80051b0:	4603      	mov	r3, r0
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	1ae3      	subs	r3, r4, r3
 80051b6:	10db      	asrs	r3, r3, #3
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd90      	pop	{r4, r7, pc}

080051c0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d006      	beq.n	80051de <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj+0x1e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 f976 	bl	80054c6 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8allocateERS4_j>
 80051da:	4603      	mov	r3, r0
 80051dc:	e000      	b.n	80051e0 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj+0x20>
 80051de:	2300      	movs	r3, #0
      }
 80051e0:	4618      	mov	r0, r3
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80051fe:	b590      	push	{r4, r7, lr}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f969 	bl	80054e4 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8005212:	4604      	mov	r4, r0
 8005214:	68b8      	ldr	r0, [r7, #8]
 8005216:	f000 f965 	bl	80054e4 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 800521a:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	4620      	mov	r0, r4
 8005222:	f000 f96e 	bl	8005502 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 8005226:	4603      	mov	r3, r0
    }
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	bd90      	pop	{r4, r7, pc}

08005230 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff ffd4 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005240:	4603      	mov	r3, r0
 8005242:	681c      	ldr	r4, [r3, #0]
 8005244:	6838      	ldr	r0, [r7, #0]
 8005246:	f7ff ffcf 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800524a:	4603      	mov	r3, r0
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	429c      	cmp	r4, r3
 8005250:	bf14      	ite	ne
 8005252:	2301      	movne	r3, #1
 8005254:	2300      	moveq	r3, #0
 8005256:	b2db      	uxtb	r3, r3
 8005258:	4618      	mov	r0, r3
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bd90      	pop	{r4, r7, pc}

08005260 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8005260:	b580      	push	{r7, lr}
 8005262:	b086      	sub	sp, #24
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 800526e:	f107 020c 	add.w	r2, r7, #12
 8005272:	f107 0308 	add.w	r3, r7, #8
 8005276:	4611      	mov	r1, r2
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff ff8b 	bl	8005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800527e:	4603      	mov	r3, r0
 8005280:	2b10      	cmp	r3, #16
 8005282:	bfcc      	ite	gt
 8005284:	2301      	movgt	r3, #1
 8005286:	2300      	movle	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d01c      	beq.n	80052c8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x68>
	  if (__depth_limit == 0)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d106      	bne.n	80052a2 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 8005294:	783b      	ldrb	r3, [r7, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f000 f942 	bl	8005524 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>
 80052a0:	e012      	b.n	80052c8 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x68>
	  --__depth_limit;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3b01      	subs	r3, #1
 80052a6:	607b      	str	r3, [r7, #4]
	  _RandomAccessIterator __cut =
 80052a8:	783a      	ldrb	r2, [r7, #0]
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f950 	bl	8005552 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_T0_>
 80052b2:	4603      	mov	r3, r0
 80052b4:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 80052b6:	783b      	ldrb	r3, [r7, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	6978      	ldr	r0, [r7, #20]
 80052be:	f7ff ffcf 	bl	8005260 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
	  __last = __cut;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 80052c6:	e7d2      	b.n	800526e <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xe>
    }
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 80052da:	f107 020c 	add.w	r2, r7, #12
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4611      	mov	r1, r2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff ff55 	bl	8005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	bfcc      	ite	gt
 80052f0:	2301      	movgt	r3, #1
 80052f2:	2300      	movle	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d018      	beq.n	800532c <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80052fa:	f107 030c 	add.w	r3, r7, #12
 80052fe:	2110      	movs	r1, #16
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f968 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005306:	4603      	mov	r3, r0
 8005308:	793a      	ldrb	r2, [r7, #4]
 800530a:	4619      	mov	r1, r3
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f985 	bl	800561c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8005312:	f107 030c 	add.w	r3, r7, #12
 8005316:	2110      	movs	r1, #16
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f95c 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 800531e:	4603      	mov	r3, r0
 8005320:	793a      	ldrb	r2, [r7, #4]
 8005322:	68b9      	ldr	r1, [r7, #8]
 8005324:	4618      	mov	r0, r3
 8005326:	f000 f9e5 	bl	80056f4 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 800532a:	e004      	b.n	8005336 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 800532c:	793a      	ldrb	r2, [r7, #4]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f973 	bl	800561c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8005336:	bf00      	nop
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	bf14      	ite	ne
 800534c:	2301      	movne	r3, #1
 800534e:	2300      	moveq	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	4618      	mov	r0, r3
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr

0800535e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800535e:	b590      	push	{r4, r7, lr}
 8005360:	b085      	sub	sp, #20
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8005368:	6838      	ldr	r0, [r7, #0]
 800536a:	f7ff fdb4 	bl	8004ed6 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800536e:	4603      	mov	r3, r0
 8005370:	4622      	mov	r2, r4
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f9e1 	bl	800573c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	bd90      	pop	{r4, r7, pc}

08005382 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005382:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005384:	b085      	sub	sp, #20
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f9ee 	bl	8005772 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8005396:	4603      	mov	r3, r0
 8005398:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 800539a:	68b8      	ldr	r0, [r7, #8]
 800539c:	f7ff fc52 	bl	8004c44 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80053a0:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 80053a2:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f7ff fc4d 	bl	8004c44 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80053aa:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 80053ac:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 80053ae:	6838      	ldr	r0, [r7, #0]
 80053b0:	f7ff fc53 	bl	8004c5a <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80053b4:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 80053b6:	681b      	ldr	r3, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 80053b8:	461a      	mov	r2, r3
 80053ba:	4631      	mov	r1, r6
 80053bc:	4628      	mov	r0, r5
 80053be:	47a0      	blx	r4
 80053c0:	4603      	mov	r3, r0
      }
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053ca <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80053ca:	b5b0      	push	{r4, r5, r7, lr}
 80053cc:	b086      	sub	sp, #24
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	4613      	mov	r3, r2
 80053d6:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d00d      	beq.n	80053fa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x30>
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d011      	beq.n	8005406 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x3c>
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d114      	bne.n	8005410 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f9d4 	bl	8005794 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 80053ec:	4604      	mov	r4, r0
 80053ee:	68b8      	ldr	r0, [r7, #8]
 80053f0:	f000 f9bf 	bl	8005772 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 80053f4:	4603      	mov	r3, r0
 80053f6:	6023      	str	r3, [r4, #0]
	      break;
 80053f8:	e00a      	b.n	8005410 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 80053fa:	462a      	mov	r2, r5
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 f9d4 	bl	80057ac <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8005404:	e004      	b.n	8005410 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 8005406:	4621      	mov	r1, r4
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 f9ea 	bl	80057e2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800540e:	bf00      	nop
	  return false;
 8005410:	2300      	movs	r3, #0
	}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bdb0      	pop	{r4, r5, r7, pc}

0800541a <_ZNSaIN2ei8spectral10processing11freq_peak_tEEC1Ev>:
      allocator() throw() { }
 800541a:	b580      	push	{r7, lr}
 800541c:	b082      	sub	sp, #8
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f9e9 	bl	80057fa <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEEC1Ev>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4618      	mov	r0, r3
 800542c:	3708      	adds	r7, #8
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 f9d9 	bl	8005810 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE10deallocateEPS4_j>
 800545e:	bf00      	nop
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2ei8spectral10processing11freq_peak_tEEEvT_S7_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f9db 	bl	8005842 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 800548c:	4603      	mov	r3, r0
 800548e:	4618      	mov	r0, r3
 8005490:	f000 f9cb 	bl	800582a <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8max_sizeERKS4_>
 8005494:	4603      	mov	r3, r0
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d201      	bcs.n	80054b8 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	e000      	b.n	80054ba <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80054b8:	687b      	ldr	r3, [r7, #4]
    }
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b082      	sub	sp, #8
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80054d0:	2200      	movs	r2, #0
 80054d2:	6839      	ldr	r1, [r7, #0]
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f9bf 	bl	8005858 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv>
 80054da:	4603      	mov	r3, r0
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80054ec:	f107 030c 	add.w	r3, r7, #12
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 f9ce 	bl	8005894 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005502:	b580      	push	{r7, lr}
 8005504:	b084      	sub	sp, #16
 8005506:	af00      	add	r7, sp, #0
 8005508:	60f8      	str	r0, [r7, #12]
 800550a:	60b9      	str	r1, [r7, #8]
 800550c:	607a      	str	r2, [r7, #4]
 800550e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005510:	687a      	ldr	r2, [r7, #4]
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 f9cc 	bl	80058b2 <_ZSt18uninitialized_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>
 800551a:	4603      	mov	r3, r0
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8005532:	783b      	ldrb	r3, [r7, #0]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	68b9      	ldr	r1, [r7, #8]
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f9cc 	bl	80058d6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>
      std::__sort_heap(__first, __middle, __comp);
 800553e:	463b      	mov	r3, r7
 8005540:	461a      	mov	r2, r3
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f000 f9f8 	bl	800593a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>
    }
 800554a:	bf00      	nop
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8005552:	b590      	push	{r4, r7, lr}
 8005554:	b089      	sub	sp, #36	; 0x24
 8005556:	af02      	add	r7, sp, #8
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800555e:	f107 020c 	add.w	r2, r7, #12
 8005562:	f107 0308 	add.w	r3, r7, #8
 8005566:	4611      	mov	r1, r2
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff fe13 	bl	8005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800556e:	4603      	mov	r3, r0
 8005570:	0fda      	lsrs	r2, r3, #31
 8005572:	4413      	add	r3, r2
 8005574:	105b      	asrs	r3, r3, #1
 8005576:	461a      	mov	r2, r3
 8005578:	f107 030c 	add.w	r3, r7, #12
 800557c:	4611      	mov	r1, r2
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f829 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005584:	4603      	mov	r3, r0
 8005586:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8005588:	f107 030c 	add.w	r3, r7, #12
 800558c:	2101      	movs	r1, #1
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f821 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005594:	4604      	mov	r4, r0
 8005596:	f107 0308 	add.w	r3, r7, #8
 800559a:	2101      	movs	r1, #1
 800559c:	4618      	mov	r0, r3
 800559e:	f000 f9f2 	bl	8005986 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmiEi>
 80055a2:	4602      	mov	r2, r0
 80055a4:	793b      	ldrb	r3, [r7, #4]
 80055a6:	f88d 3000 	strb.w	r3, [sp]
 80055aa:	4613      	mov	r3, r2
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4621      	mov	r1, r4
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f000 fa1d 	bl	80059f0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 80055b6:	f107 030c 	add.w	r3, r7, #12
 80055ba:	2101      	movs	r1, #1
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 f80a 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80055c2:	793b      	ldrb	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	f000 fa67 	bl	8005a9a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_>
 80055cc:	4603      	mov	r3, r0
    }
 80055ce:	4618      	mov	r0, r3
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd90      	pop	{r4, r7, pc}

080055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	00db      	lsls	r3, r3, #3
 80055e8:	4413      	add	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	f107 020c 	add.w	r2, r7, #12
 80055f0:	f107 0308 	add.w	r3, r7, #8
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fc30 	bl	8004e5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 800561c:	b5b0      	push	{r4, r5, r7, lr}
 800561e:	b088      	sub	sp, #32
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 8005628:	f107 0208 	add.w	r2, r7, #8
 800562c:	f107 030c 	add.w	r3, r7, #12
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fa79 	bl	8005b2a <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d156      	bne.n	80056ec <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800563e:	f107 030c 	add.w	r3, r7, #12
 8005642:	2101      	movs	r1, #1
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff ffc6 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 800564a:	4603      	mov	r3, r0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	f107 0208 	add.w	r2, r7, #8
 8005652:	f107 031c 	add.w	r3, r7, #28
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fde9 	bl	8005230 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d044      	beq.n	80056ee <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xd2>
	  if (__comp(__i, __first))
 8005664:	1d3b      	adds	r3, r7, #4
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	69f9      	ldr	r1, [r7, #28]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 f9a4 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d02d      	beq.n	80056d2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 8005676:	f107 031c 	add.w	r3, r7, #28
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fa7e 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005680:	4603      	mov	r3, r0
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff ffbf 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005688:	4602      	mov	r2, r0
 800568a:	f107 0314 	add.w	r3, r7, #20
 800568e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005692:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8005696:	f107 031c 	add.w	r3, r7, #28
 800569a:	2101      	movs	r1, #1
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff ff9a 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80056a2:	4603      	mov	r3, r0
 80056a4:	461a      	mov	r2, r3
 80056a6:	69f9      	ldr	r1, [r7, #28]
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fa73 	bl	8005b94 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET0_T_SC_SB_>
	      *__first = _GLIBCXX_MOVE(__val);
 80056ae:	f107 0314 	add.w	r3, r7, #20
 80056b2:	4618      	mov	r0, r3
 80056b4:	f7ff ffa7 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80056b8:	4604      	mov	r4, r0
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 fa5c 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80056c4:	4603      	mov	r3, r0
 80056c6:	4622      	mov	r2, r4
 80056c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80056d0:	e006      	b.n	80056e0 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 80056d2:	7938      	ldrb	r0, [r7, #4]
 80056d4:	f000 fa81 	bl	8005bda <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 80056d8:	4629      	mov	r1, r5
 80056da:	69f8      	ldr	r0, [r7, #28]
 80056dc:	f000 fa90 	bl	8005c00 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80056e0:	f107 031c 	add.w	r3, r7, #28
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fa38 	bl	8005b5a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 80056ea:	e7b0      	b.n	800564e <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x32>
      if (__first == __last) return;
 80056ec:	bf00      	nop
    }
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bdb0      	pop	{r4, r5, r7, pc}

080056f4 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	f107 0208 	add.w	r2, r7, #8
 8005708:	f107 0314 	add.w	r3, r7, #20
 800570c:	4611      	mov	r1, r2
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff fd8e 	bl	8005230 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00c      	beq.n	8005734 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 800571a:	7938      	ldrb	r0, [r7, #4]
 800571c:	f000 fa5d 	bl	8005bda <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8005720:	4621      	mov	r1, r4
 8005722:	6978      	ldr	r0, [r7, #20]
 8005724:	f000 fa6c 	bl	8005c00 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8005728:	f107 0314 	add.w	r3, r7, #20
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fa14 	bl	8005b5a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 8005732:	e7e7      	b.n	8005704 <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x10>
    }
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	bd90      	pop	{r4, r7, pc}

0800573c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800573c:	b590      	push	{r4, r7, lr}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8005748:	68b8      	ldr	r0, [r7, #8]
 800574a:	f7ff fbc4 	bl	8004ed6 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800574e:	4603      	mov	r3, r0
 8005750:	681c      	ldr	r4, [r3, #0]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7fb fca9 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 8005758:	4603      	mov	r3, r0
 800575a:	4619      	mov	r1, r3
 800575c:	2004      	movs	r0, #4
 800575e:	f7fb fc74 	bl	800104a <_ZnwjPv>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d000      	beq.n	800576a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE+0x2e>
 8005768:	601c      	str	r4, [r3, #0]
 800576a:	bf00      	nop
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	bd90      	pop	{r4, r7, pc}

08005772 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa95 	bl	8005caa <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8005780:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fa9d 	bl	8005cc2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8005788:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 800578a:	68fb      	ldr	r3, [r7, #12]
	}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7fb fc84 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80057b8:	68b8      	ldr	r0, [r7, #8]
 80057ba:	f000 fa76 	bl	8005caa <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 80057be:	4603      	mov	r3, r0
 80057c0:	681c      	ldr	r4, [r3, #0]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7fb fc71 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 80057c8:	4603      	mov	r3, r0
 80057ca:	4619      	mov	r1, r3
 80057cc:	2004      	movs	r0, #4
 80057ce:	f7fb fc3c 	bl	800104a <_ZnwjPv>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d000      	beq.n	80057da <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE+0x2e>
 80057d8:	601c      	str	r4, [r3, #0]
	}
 80057da:	bf00      	nop
 80057dc:	3714      	adds	r7, #20
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd90      	pop	{r4, r7, pc}

080057e2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fa73 	bl	8005cd8 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 800581c:	68b8      	ldr	r0, [r7, #8]
 800581e:	f00c fa91 	bl	8011d44 <_ZdlPv>
      }
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 fa5c 	bl	8005cf0 <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>
 8005838:	4603      	mov	r3, r0
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}

08005842 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005842:	b480      	push	{r7}
 8005844:	b083      	sub	sp, #12
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4618      	mov	r0, r3
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 fa43 	bl	8005cf0 <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>
 800586a:	4602      	mov	r2, r0
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4293      	cmp	r3, r2
 8005870:	bf8c      	ite	hi
 8005872:	2301      	movhi	r3, #1
 8005874:	2300      	movls	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800587c:	f00c fa64 	bl	8011d48 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4618      	mov	r0, r3
 8005886:	f00c fa43 	bl	8011d10 <_Znwj>
 800588a:	4603      	mov	r3, r0
      }
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4618      	mov	r0, r3
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <_ZSt18uninitialized_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b086      	sub	sp, #24
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80058be:	2301      	movs	r3, #1
 80058c0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fa1e 	bl	8005d08 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES7_EET0_T_SA_S9_>
 80058cc:	4603      	mov	r3, r0
    }
 80058ce:	4618      	mov	r0, r3
 80058d0:	3718      	adds	r7, #24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>:
    __heap_select(_RandomAccessIterator __first,
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b086      	sub	sp, #24
 80058da:	af00      	add	r7, sp, #0
 80058dc:	60f8      	str	r0, [r7, #12]
 80058de:	60b9      	str	r1, [r7, #8]
 80058e0:	607a      	str	r2, [r7, #4]
 80058e2:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 80058e4:	463b      	mov	r3, r7
 80058e6:	461a      	mov	r2, r3
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fa1c 	bl	8005d28 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	617b      	str	r3, [r7, #20]
 80058f4:	1d3a      	adds	r2, r7, #4
 80058f6:	f107 0314 	add.w	r3, r7, #20
 80058fa:	4611      	mov	r1, r2
 80058fc:	4618      	mov	r0, r3
 80058fe:	f000 fa72 	bl	8005de6 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d014      	beq.n	8005932 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x5c>
	if (__comp(__i, __first))
 8005908:	463b      	mov	r3, r7
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f852 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 800591a:	463b      	mov	r3, r7
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f000 fa78 	bl	8005e16 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 8005926:	f107 0314 	add.w	r3, r7, #20
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f915 	bl	8005b5a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 8005930:	e7e0      	b.n	80058f4 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x1e>
    }
 8005932:	bf00      	nop
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>:
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8005946:	f107 020c 	add.w	r2, r7, #12
 800594a:	f107 0308 	add.w	r3, r7, #8
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fc1f 	bl	8005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005956:	4603      	mov	r3, r0
 8005958:	2b01      	cmp	r3, #1
 800595a:	bfcc      	ite	gt
 800595c:	2301      	movgt	r3, #1
 800595e:	2300      	movle	r3, #0
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0x44>
	{
	  --__last;
 8005966:	f107 0308 	add.w	r3, r7, #8
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fa9f 	bl	8005eae <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	68b9      	ldr	r1, [r7, #8]
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 fa4d 	bl	8005e16 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>
      while (__last - __first > 1)
 800597c:	e7e3      	b.n	8005946 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xc>
	}
    }
 800597e:	bf00      	nop
 8005980:	3710      	adds	r7, #16
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	00db      	lsls	r3, r3, #3
 8005998:	425b      	negs	r3, r3
 800599a:	4413      	add	r3, r2
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	f107 020c 	add.w	r2, r7, #12
 80059a2:	f107 0308 	add.w	r3, r7, #8
 80059a6:	4611      	mov	r1, r2
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7ff fa57 	bl	8004e5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 80059b8:	b5b0      	push	{r4, r5, r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 80059c4:	68fc      	ldr	r4, [r7, #12]
 80059c6:	f107 0308 	add.w	r3, r7, #8
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f8d6 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80059d0:	4605      	mov	r5, r0
 80059d2:	1d3b      	adds	r3, r7, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 f8d1 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80059da:	4603      	mov	r3, r0
 80059dc:	461a      	mov	r2, r3
 80059de:	4629      	mov	r1, r5
 80059e0:	4620      	mov	r0, r4
 80059e2:	f7fc fe75 	bl	80026d0 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80059e6:	4603      	mov	r3, r0
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bdb0      	pop	{r4, r5, r7, pc}

080059f0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	f107 0018 	add.w	r0, r7, #24
 8005a06:	f7ff ffd7 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d020      	beq.n	8005a52 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x62>
	  if (__comp(__b, __c))
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	f107 0018 	add.w	r0, r7, #24
 8005a18:	f7ff ffce 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d004      	beq.n	8005a2c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x3c>
	    std::iter_swap(__result, __b);
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f000 fa53 	bl	8005ed0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005a2a:	e032      	b.n	8005a92 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	  else if (__comp(__a, __c))
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	68b9      	ldr	r1, [r7, #8]
 8005a30:	f107 0018 	add.w	r0, r7, #24
 8005a34:	f7ff ffc0 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d004      	beq.n	8005a48 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x58>
	    std::iter_swap(__result, __c);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 fa45 	bl	8005ed0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005a46:	e024      	b.n	8005a92 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	    std::iter_swap(__result, __a);
 8005a48:	68b9      	ldr	r1, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f000 fa40 	bl	8005ed0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005a50:	e01f      	b.n	8005a92 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
      else if (__comp(__a, __c))
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	f107 0018 	add.w	r0, r7, #24
 8005a5a:	f7ff ffad 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x7e>
	std::iter_swap(__result, __a);
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fa32 	bl	8005ed0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005a6c:	e011      	b.n	8005a92 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
      else if (__comp(__b, __c))
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	f107 0018 	add.w	r0, r7, #24
 8005a76:	f7ff ff9f 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d004      	beq.n	8005a8a <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x9a>
	std::iter_swap(__result, __c);
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	68f8      	ldr	r0, [r7, #12]
 8005a84:	f000 fa24 	bl	8005ed0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005a88:	e003      	b.n	8005a92 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	std::iter_swap(__result, __b);
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 fa1f 	bl	8005ed0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	60f8      	str	r0, [r7, #12]
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68f9      	ldr	r1, [r7, #12]
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff ff82 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d005      	beq.n	8005ac6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x2c>
	    ++__first;
 8005aba:	f107 030c 	add.w	r3, r7, #12
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f84b 	bl	8005b5a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
	  while (__comp(__first, __pivot))
 8005ac4:	e7f0      	b.n	8005aa8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0xe>
	  --__last;
 8005ac6:	f107 0308 	add.w	r3, r7, #8
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 f9ef 	bl	8005eae <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  while (__comp(__pivot, __last))
 8005ad0:	463b      	mov	r3, r7
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	6879      	ldr	r1, [r7, #4]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff ff6e 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d005      	beq.n	8005aee <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x54>
	    --__last;
 8005ae2:	f107 0308 	add.w	r3, r7, #8
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f000 f9e1 	bl	8005eae <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  while (__comp(__pivot, __last))
 8005aec:	e7f0      	b.n	8005ad0 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x36>
	  if (!(__first < __last))
 8005aee:	f107 0208 	add.w	r2, r7, #8
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f000 f974 	bl	8005de6 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8005afe:	4603      	mov	r3, r0
 8005b00:	f083 0301 	eor.w	r3, r3, #1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x74>
	    return __first;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	e009      	b.n	8005b22 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x88>
	  std::iter_swap(__first, __last);
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f9dd 	bl	8005ed0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
	  ++__first;
 8005b16:	f107 030c 	add.w	r3, r7, #12
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 f81d 	bl	8005b5a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
      while (true)
 8005b20:	e7c2      	b.n	8005aa8 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0xe>
    }
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005b2a:	b590      	push	{r4, r7, lr}
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff fb57 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	681c      	ldr	r4, [r3, #0]
 8005b3e:	6838      	ldr	r0, [r7, #0]
 8005b40:	f7ff fb52 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005b44:	4603      	mov	r3, r0
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	bf0c      	ite	eq
 8005b4c:	2301      	moveq	r3, #1
 8005b4e:	2300      	movne	r3, #0
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	4618      	mov	r0, r3
 8005b54:	370c      	adds	r7, #12
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd90      	pop	{r4, r7, pc}

08005b5a <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005b5a:	b480      	push	{r7}
 8005b5c:	b083      	sub	sp, #12
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f103 0208 	add.w	r2, r3, #8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	601a      	str	r2, [r3, #0]
	return *this;
 8005b6e:	687b      	ldr	r3, [r7, #4]
      }
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET0_T_SC_SB_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8005b94:	b590      	push	{r4, r7, lr}
 8005b96:	b085      	sub	sp, #20
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f000 f9ac 	bl	8005efe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>
 8005ba6:	4604      	mov	r4, r0
 8005ba8:	68b8      	ldr	r0, [r7, #8]
 8005baa:	f000 f9a8 	bl	8005efe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>
 8005bae:	4603      	mov	r3, r0
						__result);
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	f000 f9ad 	bl	8005f14 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET1_T0_SC_SB_>
 8005bba:	4603      	mov	r3, r0
    }
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd90      	pop	{r4, r7, pc}

08005bc4 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 8005bda:	b590      	push	{r4, r7, lr}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ffed 	bl	8005bc4 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8005bea:	4602      	mov	r2, r0
 8005bec:	f107 030c 	add.w	r3, r7, #12
 8005bf0:	4611      	mov	r1, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f9b4 	bl	8005f60 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd90      	pop	{r4, r7, pc}

08005c00 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 8005c0a:	1d3b      	adds	r3, r7, #4
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7ff ffb5 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005c12:	4603      	mov	r3, r0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff fcf6 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	f107 0310 	add.w	r3, r7, #16
 8005c20:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c24:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
      --__next;
 8005c2c:	f107 030c 	add.w	r3, r7, #12
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 f93c 	bl	8005eae <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
      while (__comp(__val, __next))
 8005c36:	f107 0110 	add.w	r1, r7, #16
 8005c3a:	463b      	mov	r3, r7
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f99c 	bl	8005f7c <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEEEEbRT_T0_>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01b      	beq.n	8005c82 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff ff94 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005c54:	4603      	mov	r3, r0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fcd5 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005c5c:	4604      	mov	r4, r0
 8005c5e:	1d3b      	adds	r3, r7, #4
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ff8b 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005c66:	4603      	mov	r3, r0
 8005c68:	4622      	mov	r2, r4
 8005c6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c6e:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	607b      	str	r3, [r7, #4]
	  --__next;
 8005c76:	f107 030c 	add.w	r3, r7, #12
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f917 	bl	8005eae <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
      while (__comp(__val, __next))
 8005c80:	e7d9      	b.n	8005c36 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 8005c82:	f107 0310 	add.w	r3, r7, #16
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7ff fcbd 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	1d3b      	adds	r3, r7, #4
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff ff73 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005c96:	4603      	mov	r3, r0
 8005c98:	4622      	mov	r2, r4
 8005c9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c9e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005ca2:	bf00      	nop
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd90      	pop	{r4, r7, pc}

08005caa <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b082      	sub	sp, #8
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fb fa04 	bl	80010c0 <_ZNKSt9_Any_data9_M_accessEv>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7fb f9e2 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005cf8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	68b9      	ldr	r1, [r7, #8]
 8005d18:	68f8      	ldr	r0, [r7, #12]
 8005d1a:	f000 f945 	bl	8005fa8 <_ZSt4copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08a      	sub	sp, #40	; 0x28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 8005d34:	f107 020c 	add.w	r2, r7, #12
 8005d38:	f107 0308 	add.w	r3, r7, #8
 8005d3c:	4611      	mov	r1, r2
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fa28 	bl	8005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	bfd4      	ite	le
 8005d4a:	2301      	movle	r3, #1
 8005d4c:	2300      	movgt	r3, #0
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d142      	bne.n	8005dda <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 8005d54:	f107 020c 	add.w	r2, r7, #12
 8005d58:	f107 0308 	add.w	r3, r7, #8
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fa18 	bl	8005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005d64:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	3b02      	subs	r3, #2
 8005d6a:	0fda      	lsrs	r2, r3, #31
 8005d6c:	4413      	add	r3, r2
 8005d6e:	105b      	asrs	r3, r3, #1
 8005d70:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 8005d72:	f107 030c 	add.w	r3, r7, #12
 8005d76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fc2c 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	f107 031c 	add.w	r3, r7, #28
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff fef8 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fc39 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005d94:	4602      	mov	r2, r0
 8005d96:	f107 0314 	add.w	r3, r7, #20
 8005d9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d9e:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8005da2:	f107 0314 	add.w	r3, r7, #20
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff fc2d 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005dac:	4603      	mov	r3, r0
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	ed93 7a00 	vldr	s14, [r3]
 8005db4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005db8:	7813      	ldrb	r3, [r2, #0]
 8005dba:	eeb0 0a47 	vmov.f32	s0, s14
 8005dbe:	eef0 0a67 	vmov.f32	s1, s15
 8005dc2:	6a3a      	ldr	r2, [r7, #32]
 8005dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f906 	bl	8005fd8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>
	  if (__parent == 0)
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb6>
	  __parent--;
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 8005dd8:	e7cb      	b.n	8005d72 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0x4a>
	return;
 8005dda:	bf00      	nop
 8005ddc:	e000      	b.n	8005de0 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb8>
	    return;
 8005dde:	bf00      	nop
    }
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005de6:	b590      	push	{r4, r7, lr}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff f9f9 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005df6:	4603      	mov	r3, r0
 8005df8:	681c      	ldr	r4, [r3, #0]
 8005dfa:	6838      	ldr	r0, [r7, #0]
 8005dfc:	f7ff f9f4 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005e00:	4603      	mov	r3, r0
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	429c      	cmp	r4, r3
 8005e06:	bf34      	ite	cc
 8005e08:	2301      	movcc	r3, #1
 8005e0a:	2300      	movcs	r3, #0
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd90      	pop	{r4, r7, pc}

08005e16 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005e16:	b590      	push	{r4, r7, lr}
 8005e18:	b087      	sub	sp, #28
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8005e24:	1d3b      	adds	r3, r7, #4
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7ff fea8 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fbe9 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005e34:	4602      	mov	r2, r0
 8005e36:	f107 0310 	add.w	r3, r7, #16
 8005e3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e3e:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8005e42:	f107 030c 	add.w	r3, r7, #12
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff fe98 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f7ff fbd9 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005e54:	4604      	mov	r4, r0
 8005e56:	1d3b      	adds	r3, r7, #4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fe8f 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4622      	mov	r2, r4
 8005e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e66:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 8005e6a:	f107 020c 	add.w	r2, r7, #12
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	4611      	mov	r1, r2
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff f98d 	bl	8005194 <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005e7a:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8005e7c:	f107 0310 	add.w	r3, r7, #16
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff fbc0 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8005e86:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	ed93 7a00 	vldr	s14, [r3]
 8005e8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e92:	7813      	ldrb	r3, [r2, #0]
 8005e94:	eeb0 0a47 	vmov.f32	s0, s14
 8005e98:	eef0 0a67 	vmov.f32	s1, s15
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f899 	bl	8005fd8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>
    }
 8005ea6:	bf00      	nop
 8005ea8:	371c      	adds	r7, #28
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd90      	pop	{r4, r7, pc}

08005eae <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
	--_M_current;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f1a3 0208 	sub.w	r2, r3, #8
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
	return *this;
 8005ec2:	687b      	ldr	r3, [r7, #4]
      }
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 8005ed0:	b590      	push	{r4, r7, lr}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 8005eda:	1d3b      	adds	r3, r7, #4
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7ff fe4d 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	463b      	mov	r3, r7
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7ff fe48 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f000 f934 	bl	800615e <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd90      	pop	{r4, r7, pc}

08005efe <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET1_T0_SC_SB_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8005f14:	b5b0      	push	{r4, r5, r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f943 	bl	80061ac <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8005f26:	4604      	mov	r4, r0
 8005f28:	68b8      	ldr	r0, [r7, #8]
 8005f2a:	f000 f93f 	bl	80061ac <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8005f2e:	4605      	mov	r5, r0
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 f93b 	bl	80061ac <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8005f36:	4603      	mov	r3, r0
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 f943 	bl	80061c8 <_ZSt22__copy_move_backward_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8005f42:	4603      	mov	r3, r0
 8005f44:	617b      	str	r3, [r7, #20]
		   std::__niter_base(__result)));
 8005f46:	f107 0214 	add.w	r2, r7, #20
 8005f4a:	f107 0310 	add.w	r3, r7, #16
 8005f4e:	4611      	mov	r1, r2
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe ff83 	bl	8004e5c <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8005f56:	693b      	ldr	r3, [r7, #16]
    }
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bdb0      	pop	{r4, r5, r7, pc}

08005f60 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7fe fdb2 	bl	8004ad6 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 8005f7c:	b590      	push	{r4, r7, lr}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 8005f88:	68fc      	ldr	r4, [r7, #12]
 8005f8a:	1d3b      	adds	r3, r7, #4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fdf5 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8005f92:	4603      	mov	r3, r0
 8005f94:	461a      	mov	r2, r3
 8005f96:	68b9      	ldr	r1, [r7, #8]
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7fc fb99 	bl	80026d0 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd90      	pop	{r4, r7, pc}

08005fa8 <_ZSt4copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f919 	bl	80061ec <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005fba:	4604      	mov	r4, r0
 8005fbc:	68b8      	ldr	r0, [r7, #8]
 8005fbe:	f000 f915 	bl	80061ec <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8005fc2:	4603      	mov	r3, r0
	       __result));
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 f920 	bl	800620e <_ZSt14__copy_move_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8005fce:	4603      	mov	r3, r0
    }
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd90      	pop	{r4, r7, pc}

08005fd8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8005fd8:	b590      	push	{r4, r7, lr}
 8005fda:	b08f      	sub	sp, #60	; 0x3c
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6178      	str	r0, [r7, #20]
 8005fe0:	6139      	str	r1, [r7, #16]
 8005fe2:	60fa      	str	r2, [r7, #12]
 8005fe4:	eeb0 7a40 	vmov.f32	s14, s0
 8005fe8:	eef0 7a60 	vmov.f32	s15, s1
 8005fec:	703b      	strb	r3, [r7, #0]
 8005fee:	ed87 7a01 	vstr	s14, [r7, #4]
 8005ff2:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3b01      	subs	r3, #1
 8006002:	0fda      	lsrs	r2, r3, #31
 8006004:	4413      	add	r3, r2
 8006006:	105b      	asrs	r3, r3, #1
 8006008:	461a      	mov	r2, r3
 800600a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800600c:	4293      	cmp	r3, r2
 800600e:	da46      	bge.n	800609e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 8006010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006012:	3301      	adds	r3, #1
 8006014:	005b      	lsls	r3, r3, #1
 8006016:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fad9 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006024:	4604      	mov	r4, r0
 8006026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006028:	1e5a      	subs	r2, r3, #1
 800602a:	f107 0314 	add.w	r3, r7, #20
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fad0 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006036:	4602      	mov	r2, r0
 8006038:	463b      	mov	r3, r7
 800603a:	4621      	mov	r1, r4
 800603c:	4618      	mov	r0, r3
 800603e:	f7ff fcbb 	bl	80059b8 <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d002      	beq.n	800604e <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x76>
	    __secondChild--;
 8006048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604a:	3b01      	subs	r3, #1
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800604e:	f107 0314 	add.w	r3, r7, #20
 8006052:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fabe 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 800605a:	4603      	mov	r3, r0
 800605c:	623b      	str	r3, [r7, #32]
 800605e:	f107 0320 	add.w	r3, r7, #32
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff fd8a 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006068:	4603      	mov	r3, r0
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff facb 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006070:	4604      	mov	r4, r0
 8006072:	f107 0314 	add.w	r3, r7, #20
 8006076:	6939      	ldr	r1, [r7, #16]
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff faac 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 800607e:	4603      	mov	r3, r0
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
 8006082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006086:	4618      	mov	r0, r3
 8006088:	f7ff fd78 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800608c:	4603      	mov	r3, r0
 800608e:	4622      	mov	r2, r4
 8006090:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006094:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 8006098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800609a:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 800609c:	e7af      	b.n	8005ffe <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d136      	bne.n	8006116 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x13e>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3b02      	subs	r3, #2
 80060ac:	0fda      	lsrs	r2, r3, #31
 80060ae:	4413      	add	r3, r2
 80060b0:	105b      	asrs	r3, r3, #1
 80060b2:	461a      	mov	r2, r3
 80060b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d12d      	bne.n	8006116 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 80060ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060bc:	3301      	adds	r3, #1
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80060c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c4:	1e5a      	subs	r2, r3, #1
 80060c6:	f107 0314 	add.w	r3, r7, #20
 80060ca:	4611      	mov	r1, r2
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7ff fa82 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80060d2:	4603      	mov	r3, r0
 80060d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fd4e 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80060e0:	4603      	mov	r3, r0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff fa8f 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80060e8:	4604      	mov	r4, r0
 80060ea:	f107 0314 	add.w	r3, r7, #20
 80060ee:	6939      	ldr	r1, [r7, #16]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fa70 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80060f6:	4603      	mov	r3, r0
 80060f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80060fe:	4618      	mov	r0, r3
 8006100:	f7ff fd3c 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006104:	4603      	mov	r3, r0
 8006106:	4622      	mov	r2, r4
 8006108:	e892 0003 	ldmia.w	r2, {r0, r1}
 800610c:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 8006110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006112:	3b01      	subs	r3, #1
 8006114:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8006116:	463b      	mov	r3, r7
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fd53 	bl	8005bc4 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 800611e:	4602      	mov	r2, r0
 8006120:	f107 031c 	add.w	r3, r7, #28
 8006124:	4611      	mov	r1, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f000 f88d 	bl	8006246 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 800612c:	1d3b      	adds	r3, r7, #4
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff fa69 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006134:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8006136:	f107 021c 	add.w	r2, r7, #28
 800613a:	ed93 7a00 	vldr	s14, [r3]
 800613e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	eeb0 0a47 	vmov.f32	s0, s14
 8006148:	eef0 0a67 	vmov.f32	s1, s15
 800614c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614e:	6939      	ldr	r1, [r7, #16]
 8006150:	6978      	ldr	r0, [r7, #20]
 8006152:	f000 f886 	bl	8006262 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_>
    }
 8006156:	bf00      	nop
 8006158:	373c      	adds	r7, #60	; 0x3c
 800615a:	46bd      	mov	sp, r7
 800615c:	bd90      	pop	{r4, r7, pc}

0800615e <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff fa4c 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800616e:	4602      	mov	r2, r0
 8006170:	f107 0308 	add.w	r3, r7, #8
 8006174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006178:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800617c:	6838      	ldr	r0, [r7, #0]
 800617e:	f7ff fa42 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006182:	4602      	mov	r2, r0
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800618a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800618e:	f107 0308 	add.w	r3, r7, #8
 8006192:	4618      	mov	r0, r3
 8006194:	f7ff fa37 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006198:	4602      	mov	r2, r0
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80061a0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80061a4:	bf00      	nop
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 80061b4:	1d3b      	adds	r3, r7, #4
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff f816 	bl	80051e8 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 80061bc:	4603      	mov	r3, r0
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <_ZSt22__copy_move_backward_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 80061d4:	2301      	movs	r3, #1
 80061d6:	75fb      	strb	r3, [r7, #23]
								 __result);
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f8b7 	bl	8006350 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 80061e2:	4603      	mov	r3, r0
    }
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80061f4:	1d3b      	adds	r3, r7, #4
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 f8cc 	bl	8006394 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 80061fc:	4603      	mov	r3, r0
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f8d4 	bl	80063ac <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006204:	4603      	mov	r3, r0
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <_ZSt14__copy_move_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800620e:	b5b0      	push	{r4, r5, r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f8d1 	bl	80063c2 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006220:	4604      	mov	r4, r0
 8006222:	68b8      	ldr	r0, [r7, #8]
 8006224:	f000 f8cd 	bl	80063c2 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006228:	4605      	mov	r5, r0
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f8c9 	bl	80063c2 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006230:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8006232:	461a      	mov	r2, r3
 8006234:	4629      	mov	r1, r5
 8006236:	4620      	mov	r0, r4
 8006238:	f000 f8ce 	bl	80063d8 <_ZSt13__copy_move_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 800623c:	4603      	mov	r3, r0
    }
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bdb0      	pop	{r4, r5, r7, pc}

08006246 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8006246:	b580      	push	{r7, lr}
 8006248:	b082      	sub	sp, #8
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fc3f 	bl	8004ad6 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8006262:	b590      	push	{r4, r7, lr}
 8006264:	b08b      	sub	sp, #44	; 0x2c
 8006266:	af00      	add	r7, sp, #0
 8006268:	6178      	str	r0, [r7, #20]
 800626a:	6139      	str	r1, [r7, #16]
 800626c:	60fa      	str	r2, [r7, #12]
 800626e:	eeb0 7a40 	vmov.f32	s14, s0
 8006272:	eef0 7a60 	vmov.f32	s15, s1
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	ed87 7a01 	vstr	s14, [r7, #4]
 800627c:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	3b01      	subs	r3, #1
 8006284:	0fda      	lsrs	r2, r3, #31
 8006286:	4413      	add	r3, r2
 8006288:	105b      	asrs	r3, r3, #1
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	429a      	cmp	r2, r3
 8006292:	dd10      	ble.n	80062b6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x54>
 8006294:	f107 0314 	add.w	r3, r7, #20
 8006298:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff f99b 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80062a0:	4601      	mov	r1, r0
 80062a2:	1d3b      	adds	r3, r7, #4
 80062a4:	461a      	mov	r2, r3
 80062a6:	6838      	ldr	r0, [r7, #0]
 80062a8:	f000 f8a8 	bl	80063fc <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEES7_EEbT_RT0_>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d001      	beq.n	80062b6 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x54>
 80062b2:	2301      	movs	r3, #1
 80062b4:	e000      	b.n	80062b8 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x56>
 80062b6:	2300      	movs	r3, #0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d02d      	beq.n	8006318 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80062bc:	f107 0314 	add.w	r3, r7, #20
 80062c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff f987 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80062c8:	4603      	mov	r3, r0
 80062ca:	61bb      	str	r3, [r7, #24]
 80062cc:	f107 0318 	add.w	r3, r7, #24
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff fc53 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80062d6:	4603      	mov	r3, r0
 80062d8:	4618      	mov	r0, r3
 80062da:	f7ff f994 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80062de:	4604      	mov	r4, r0
 80062e0:	f107 0314 	add.w	r3, r7, #20
 80062e4:	6939      	ldr	r1, [r7, #16]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff f975 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80062ec:	4603      	mov	r3, r0
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	f107 031c 	add.w	r3, r7, #28
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fc41 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80062fa:	4603      	mov	r3, r0
 80062fc:	4622      	mov	r2, r4
 80062fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006302:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	3b01      	subs	r3, #1
 800630e:	0fda      	lsrs	r2, r3, #31
 8006310:	4413      	add	r3, r2
 8006312:	105b      	asrs	r3, r3, #1
 8006314:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006316:	e7b9      	b.n	800628c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8006318:	1d3b      	adds	r3, r7, #4
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff f973 	bl	8005606 <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006320:	4604      	mov	r4, r0
 8006322:	f107 0314 	add.w	r3, r7, #20
 8006326:	6939      	ldr	r1, [r7, #16]
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff f954 	bl	80055d6 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 800632e:	4603      	mov	r3, r0
 8006330:	623b      	str	r3, [r7, #32]
 8006332:	f107 0320 	add.w	r3, r7, #32
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff fc20 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800633c:	4603      	mov	r3, r0
 800633e:	4622      	mov	r2, r4
 8006340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006344:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006348:	bf00      	nop
 800634a:	372c      	adds	r7, #44	; 0x2c
 800634c:	46bd      	mov	sp, r7
 800634e:	bd90      	pop	{r4, r7, pc}

08006350 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	10db      	asrs	r3, r3, #3
 8006364:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	425b      	negs	r3, r3
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	18d0      	adds	r0, r2, r3
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	461a      	mov	r2, r3
 800637c:	68f9      	ldr	r1, [r7, #12]
 800637e:	f00e fc62 	bl	8014c46 <memmove>
	  return __result - _Num;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	425b      	negs	r3, r3
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	4413      	add	r3, r2
	}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __miter_base(_Iterator __it)
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <_ZSt13__copy_move_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	68b9      	ldr	r1, [r7, #8]
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f000 f81c 	bl	800642a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 80063f2:	4603      	mov	r3, r0
    }
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 80063fc:	b590      	push	{r4, r7, lr}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8006408:	68fc      	ldr	r4, [r7, #12]
 800640a:	f107 0308 	add.w	r3, r7, #8
 800640e:	4618      	mov	r0, r3
 8006410:	f7ff fbb4 	bl	8005b7c <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006414:	4603      	mov	r3, r0
 8006416:	687a      	ldr	r2, [r7, #4]
 8006418:	4619      	mov	r1, r3
 800641a:	4620      	mov	r0, r4
 800641c:	f7fc f958 	bl	80026d0 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8006420:	4603      	mov	r3, r0
 8006422:	4618      	mov	r0, r3
 8006424:	3714      	adds	r7, #20
 8006426:	46bd      	mov	sp, r7
 8006428:	bd90      	pop	{r4, r7, pc}

0800642a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800642a:	b580      	push	{r7, lr}
 800642c:	b086      	sub	sp, #24
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	10db      	asrs	r3, r3, #3
 800643e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d006      	beq.n	8006454 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	00db      	lsls	r3, r3, #3
 800644a:	461a      	mov	r2, r3
 800644c:	68f9      	ldr	r1, [r7, #12]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f00e fbf9 	bl	8014c46 <memmove>
	  return __result + _Num;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	4413      	add	r3, r2
	}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800646a:	2300      	movs	r3, #0
 800646c:	607b      	str	r3, [r7, #4]
 800646e:	4b10      	ldr	r3, [pc, #64]	; (80064b0 <HAL_MspInit+0x4c>)
 8006470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006472:	4a0f      	ldr	r2, [pc, #60]	; (80064b0 <HAL_MspInit+0x4c>)
 8006474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006478:	6453      	str	r3, [r2, #68]	; 0x44
 800647a:	4b0d      	ldr	r3, [pc, #52]	; (80064b0 <HAL_MspInit+0x4c>)
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006486:	2300      	movs	r3, #0
 8006488:	603b      	str	r3, [r7, #0]
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <HAL_MspInit+0x4c>)
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	4a08      	ldr	r2, [pc, #32]	; (80064b0 <HAL_MspInit+0x4c>)
 8006490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006494:	6413      	str	r3, [r2, #64]	; 0x40
 8006496:	4b06      	ldr	r3, [pc, #24]	; (80064b0 <HAL_MspInit+0x4c>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80064a2:	2007      	movs	r0, #7
 80064a4:	f000 faea 	bl	8006a7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064a8:	bf00      	nop
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40023800 	.word	0x40023800

080064b4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a0b      	ldr	r2, [pc, #44]	; (80064f0 <HAL_CRC_MspInit+0x3c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d10d      	bne.n	80064e2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
 80064ca:	4b0a      	ldr	r3, [pc, #40]	; (80064f4 <HAL_CRC_MspInit+0x40>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	4a09      	ldr	r2, [pc, #36]	; (80064f4 <HAL_CRC_MspInit+0x40>)
 80064d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80064d4:	6313      	str	r3, [r2, #48]	; 0x30
 80064d6:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <HAL_CRC_MspInit+0x40>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064de:	60fb      	str	r3, [r7, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80064e2:	bf00      	nop
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40023000 	.word	0x40023000
 80064f4:	40023800 	.word	0x40023800

080064f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08a      	sub	sp, #40	; 0x28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006500:	f107 0314 	add.w	r3, r7, #20
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
 8006508:	605a      	str	r2, [r3, #4]
 800650a:	609a      	str	r2, [r3, #8]
 800650c:	60da      	str	r2, [r3, #12]
 800650e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a19      	ldr	r2, [pc, #100]	; (800657c <HAL_UART_MspInit+0x84>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d12b      	bne.n	8006572 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	4b18      	ldr	r3, [pc, #96]	; (8006580 <HAL_UART_MspInit+0x88>)
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	4a17      	ldr	r2, [pc, #92]	; (8006580 <HAL_UART_MspInit+0x88>)
 8006524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006528:	6413      	str	r3, [r2, #64]	; 0x40
 800652a:	4b15      	ldr	r3, [pc, #84]	; (8006580 <HAL_UART_MspInit+0x88>)
 800652c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <HAL_UART_MspInit+0x88>)
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	4a10      	ldr	r2, [pc, #64]	; (8006580 <HAL_UART_MspInit+0x88>)
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	6313      	str	r3, [r2, #48]	; 0x30
 8006546:	4b0e      	ldr	r3, [pc, #56]	; (8006580 <HAL_UART_MspInit+0x88>)
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006552:	230c      	movs	r3, #12
 8006554:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006556:	2302      	movs	r3, #2
 8006558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800655a:	2300      	movs	r3, #0
 800655c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800655e:	2300      	movs	r3, #0
 8006560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006562:	2307      	movs	r3, #7
 8006564:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006566:	f107 0314 	add.w	r3, r7, #20
 800656a:	4619      	mov	r1, r3
 800656c:	4805      	ldr	r0, [pc, #20]	; (8006584 <HAL_UART_MspInit+0x8c>)
 800656e:	f000 fad5 	bl	8006b1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006572:	bf00      	nop
 8006574:	3728      	adds	r7, #40	; 0x28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	40004400 	.word	0x40004400
 8006580:	40023800 	.word	0x40023800
 8006584:	40020000 	.word	0x40020000

08006588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006588:	b480      	push	{r7}
 800658a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800658c:	bf00      	nop
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006596:	b480      	push	{r7}
 8006598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800659a:	e7fe      	b.n	800659a <HardFault_Handler+0x4>

0800659c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80065a0:	e7fe      	b.n	80065a0 <MemManage_Handler+0x4>

080065a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80065a2:	b480      	push	{r7}
 80065a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80065a6:	e7fe      	b.n	80065a6 <BusFault_Handler+0x4>

080065a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80065ac:	e7fe      	b.n	80065ac <UsageFault_Handler+0x4>

080065ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80065ae:	b480      	push	{r7}
 80065b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80065b2:	bf00      	nop
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80065c0:	bf00      	nop
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr

080065ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80065ca:	b480      	push	{r7}
 80065cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80065ce:	bf00      	nop
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80065dc:	f000 f95a 	bl	8006894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80065e0:	bf00      	nop
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065e4:	b480      	push	{r7}
 80065e6:	af00      	add	r7, sp, #0
	return 1;
 80065e8:	2301      	movs	r3, #1
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <_kill>:

int _kill(int pid, int sig)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80065fe:	f00e fa5b 	bl	8014ab8 <__errno>
 8006602:	4602      	mov	r2, r0
 8006604:	2316      	movs	r3, #22
 8006606:	6013      	str	r3, [r2, #0]
	return -1;
 8006608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800660c:	4618      	mov	r0, r3
 800660e:	3708      	adds	r7, #8
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <_exit>:

void _exit (int status)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800661c:	f04f 31ff 	mov.w	r1, #4294967295
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff ffe7 	bl	80065f4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006626:	e7fe      	b.n	8006626 <_exit+0x12>

08006628 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	e00a      	b.n	8006650 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800663a:	f3af 8000 	nop.w
 800663e:	4601      	mov	r1, r0
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	60ba      	str	r2, [r7, #8]
 8006646:	b2ca      	uxtb	r2, r1
 8006648:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	3301      	adds	r3, #1
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	dbf0      	blt.n	800663a <_read+0x12>
	}

return len;
 8006658:	687b      	ldr	r3, [r7, #4]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3718      	adds	r7, #24
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006662:	b580      	push	{r7, lr}
 8006664:	b086      	sub	sp, #24
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	e009      	b.n	8006688 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	1c5a      	adds	r2, r3, #1
 8006678:	60ba      	str	r2, [r7, #8]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	3301      	adds	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	dbf1      	blt.n	8006674 <_write+0x12>
	}
	return len;
 8006690:	687b      	ldr	r3, [r7, #4]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <_close>:

int _close(int file)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
	return -1;
 80066a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b083      	sub	sp, #12
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066c2:	605a      	str	r2, [r3, #4]
	return 0;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <_isatty>:

int _isatty(int file)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
	return 1;
 80066da:	2301      	movs	r3, #1
}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
	return 0;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800670c:	4a14      	ldr	r2, [pc, #80]	; (8006760 <_sbrk+0x5c>)
 800670e:	4b15      	ldr	r3, [pc, #84]	; (8006764 <_sbrk+0x60>)
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006718:	4b13      	ldr	r3, [pc, #76]	; (8006768 <_sbrk+0x64>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006720:	4b11      	ldr	r3, [pc, #68]	; (8006768 <_sbrk+0x64>)
 8006722:	4a12      	ldr	r2, [pc, #72]	; (800676c <_sbrk+0x68>)
 8006724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006726:	4b10      	ldr	r3, [pc, #64]	; (8006768 <_sbrk+0x64>)
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4413      	add	r3, r2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	429a      	cmp	r2, r3
 8006732:	d207      	bcs.n	8006744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006734:	f00e f9c0 	bl	8014ab8 <__errno>
 8006738:	4602      	mov	r2, r0
 800673a:	230c      	movs	r3, #12
 800673c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800673e:	f04f 33ff 	mov.w	r3, #4294967295
 8006742:	e009      	b.n	8006758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006744:	4b08      	ldr	r3, [pc, #32]	; (8006768 <_sbrk+0x64>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800674a:	4b07      	ldr	r3, [pc, #28]	; (8006768 <_sbrk+0x64>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4413      	add	r3, r2
 8006752:	4a05      	ldr	r2, [pc, #20]	; (8006768 <_sbrk+0x64>)
 8006754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006756:	68fb      	ldr	r3, [r7, #12]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}
 8006760:	20018000 	.word	0x20018000
 8006764:	00000400 	.word	0x00000400
 8006768:	200009bc 	.word	0x200009bc
 800676c:	20000de0 	.word	0x20000de0

08006770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006774:	4b08      	ldr	r3, [pc, #32]	; (8006798 <SystemInit+0x28>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	4a07      	ldr	r2, [pc, #28]	; (8006798 <SystemInit+0x28>)
 800677c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006784:	4b04      	ldr	r3, [pc, #16]	; (8006798 <SystemInit+0x28>)
 8006786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800678a:	609a      	str	r2, [r3, #8]
#endif
}
 800678c:	bf00      	nop
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
 8006796:	bf00      	nop
 8006798:	e000ed00 	.word	0xe000ed00

0800679c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800679c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80067d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80067a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80067a2:	e003      	b.n	80067ac <LoopCopyDataInit>

080067a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80067a4:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80067a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80067a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80067aa:	3104      	adds	r1, #4

080067ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80067ac:	480b      	ldr	r0, [pc, #44]	; (80067dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80067ae:	4b0c      	ldr	r3, [pc, #48]	; (80067e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80067b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80067b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80067b4:	d3f6      	bcc.n	80067a4 <CopyDataInit>
  ldr  r2, =_sbss
 80067b6:	4a0b      	ldr	r2, [pc, #44]	; (80067e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80067b8:	e002      	b.n	80067c0 <LoopFillZerobss>

080067ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80067ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80067bc:	f842 3b04 	str.w	r3, [r2], #4

080067c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80067c0:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80067c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80067c4:	d3f9      	bcc.n	80067ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80067c6:	f7ff ffd3 	bl	8006770 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067ca:	f00e f9fd 	bl	8014bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067ce:	f7fd fef9 	bl	80045c4 <main>
  bx  lr    
 80067d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80067d4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80067d8:	08036dc0 	.word	0x08036dc0
  ldr  r0, =_sdata
 80067dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80067e0:	20000958 	.word	0x20000958
  ldr  r2, =_sbss
 80067e4:	20000958 	.word	0x20000958
  ldr  r3, = _ebss
 80067e8:	20000ddc 	.word	0x20000ddc

080067ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80067ec:	e7fe      	b.n	80067ec <ADC_IRQHandler>
	...

080067f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <HAL_Init+0x40>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a0d      	ldr	r2, [pc, #52]	; (8006830 <HAL_Init+0x40>)
 80067fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006800:	4b0b      	ldr	r3, [pc, #44]	; (8006830 <HAL_Init+0x40>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a0a      	ldr	r2, [pc, #40]	; (8006830 <HAL_Init+0x40>)
 8006806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800680a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800680c:	4b08      	ldr	r3, [pc, #32]	; (8006830 <HAL_Init+0x40>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a07      	ldr	r2, [pc, #28]	; (8006830 <HAL_Init+0x40>)
 8006812:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006818:	2003      	movs	r0, #3
 800681a:	f000 f92f 	bl	8006a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800681e:	2000      	movs	r0, #0
 8006820:	f000 f808 	bl	8006834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006824:	f7ff fe1e 	bl	8006464 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	40023c00 	.word	0x40023c00

08006834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800683c:	4b12      	ldr	r3, [pc, #72]	; (8006888 <HAL_InitTick+0x54>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	4b12      	ldr	r3, [pc, #72]	; (800688c <HAL_InitTick+0x58>)
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	4619      	mov	r1, r3
 8006846:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800684a:	fbb3 f3f1 	udiv	r3, r3, r1
 800684e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006852:	4618      	mov	r0, r3
 8006854:	f000 f939 	bl	8006aca <HAL_SYSTICK_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e00e      	b.n	8006880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b0f      	cmp	r3, #15
 8006866:	d80a      	bhi.n	800687e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006868:	2200      	movs	r2, #0
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	f04f 30ff 	mov.w	r0, #4294967295
 8006870:	f000 f90f 	bl	8006a92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006874:	4a06      	ldr	r2, [pc, #24]	; (8006890 <HAL_InitTick+0x5c>)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800687a:	2300      	movs	r3, #0
 800687c:	e000      	b.n	8006880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
}
 8006880:	4618      	mov	r0, r3
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}
 8006888:	20000624 	.word	0x20000624
 800688c:	2000062c 	.word	0x2000062c
 8006890:	20000628 	.word	0x20000628

08006894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006898:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <HAL_IncTick+0x20>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	4b06      	ldr	r3, [pc, #24]	; (80068b8 <HAL_IncTick+0x24>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4413      	add	r3, r2
 80068a4:	4a04      	ldr	r2, [pc, #16]	; (80068b8 <HAL_IncTick+0x24>)
 80068a6:	6013      	str	r3, [r2, #0]
}
 80068a8:	bf00      	nop
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop
 80068b4:	2000062c 	.word	0x2000062c
 80068b8:	20000dd4 	.word	0x20000dd4

080068bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  return uwTick;
 80068c0:	4b03      	ldr	r3, [pc, #12]	; (80068d0 <HAL_GetTick+0x14>)
 80068c2:	681b      	ldr	r3, [r3, #0]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	20000dd4 	.word	0x20000dd4

080068d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80068dc:	f7ff ffee 	bl	80068bc <HAL_GetTick>
 80068e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d005      	beq.n	80068fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80068ee:	4b09      	ldr	r3, [pc, #36]	; (8006914 <HAL_Delay+0x40>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	461a      	mov	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4413      	add	r3, r2
 80068f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80068fa:	bf00      	nop
 80068fc:	f7ff ffde 	bl	80068bc <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	429a      	cmp	r2, r3
 800690a:	d8f7      	bhi.n	80068fc <HAL_Delay+0x28>
  {
  }
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	2000062c 	.word	0x2000062c

08006918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f003 0307 	and.w	r3, r3, #7
 8006926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006928:	4b0c      	ldr	r3, [pc, #48]	; (800695c <__NVIC_SetPriorityGrouping+0x44>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006934:	4013      	ands	r3, r2
 8006936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006940:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800694a:	4a04      	ldr	r2, [pc, #16]	; (800695c <__NVIC_SetPriorityGrouping+0x44>)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	60d3      	str	r3, [r2, #12]
}
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	e000ed00 	.word	0xe000ed00

08006960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006960:	b480      	push	{r7}
 8006962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <__NVIC_GetPriorityGrouping+0x18>)
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	0a1b      	lsrs	r3, r3, #8
 800696a:	f003 0307 	and.w	r3, r3, #7
}
 800696e:	4618      	mov	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	e000ed00 	.word	0xe000ed00

0800697c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	6039      	str	r1, [r7, #0]
 8006986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800698c:	2b00      	cmp	r3, #0
 800698e:	db0a      	blt.n	80069a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	b2da      	uxtb	r2, r3
 8006994:	490c      	ldr	r1, [pc, #48]	; (80069c8 <__NVIC_SetPriority+0x4c>)
 8006996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800699a:	0112      	lsls	r2, r2, #4
 800699c:	b2d2      	uxtb	r2, r2
 800699e:	440b      	add	r3, r1
 80069a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80069a4:	e00a      	b.n	80069bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	4908      	ldr	r1, [pc, #32]	; (80069cc <__NVIC_SetPriority+0x50>)
 80069ac:	79fb      	ldrb	r3, [r7, #7]
 80069ae:	f003 030f 	and.w	r3, r3, #15
 80069b2:	3b04      	subs	r3, #4
 80069b4:	0112      	lsls	r2, r2, #4
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	440b      	add	r3, r1
 80069ba:	761a      	strb	r2, [r3, #24]
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	e000e100 	.word	0xe000e100
 80069cc:	e000ed00 	.word	0xe000ed00

080069d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b089      	sub	sp, #36	; 0x24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f003 0307 	and.w	r3, r3, #7
 80069e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	f1c3 0307 	rsb	r3, r3, #7
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	bf28      	it	cs
 80069ee:	2304      	movcs	r3, #4
 80069f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	3304      	adds	r3, #4
 80069f6:	2b06      	cmp	r3, #6
 80069f8:	d902      	bls.n	8006a00 <NVIC_EncodePriority+0x30>
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	3b03      	subs	r3, #3
 80069fe:	e000      	b.n	8006a02 <NVIC_EncodePriority+0x32>
 8006a00:	2300      	movs	r3, #0
 8006a02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a04:	f04f 32ff 	mov.w	r2, #4294967295
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	43da      	mvns	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	401a      	ands	r2, r3
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a18:	f04f 31ff 	mov.w	r1, #4294967295
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a22:	43d9      	mvns	r1, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a28:	4313      	orrs	r3, r2
         );
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3724      	adds	r7, #36	; 0x24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
	...

08006a38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a48:	d301      	bcc.n	8006a4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e00f      	b.n	8006a6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a4e:	4a0a      	ldr	r2, [pc, #40]	; (8006a78 <SysTick_Config+0x40>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a56:	210f      	movs	r1, #15
 8006a58:	f04f 30ff 	mov.w	r0, #4294967295
 8006a5c:	f7ff ff8e 	bl	800697c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a60:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <SysTick_Config+0x40>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a66:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <SysTick_Config+0x40>)
 8006a68:	2207      	movs	r2, #7
 8006a6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	e000e010 	.word	0xe000e010

08006a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b082      	sub	sp, #8
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff ff47 	bl	8006918 <__NVIC_SetPriorityGrouping>
}
 8006a8a:	bf00      	nop
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b086      	sub	sp, #24
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	4603      	mov	r3, r0
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
 8006a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006aa4:	f7ff ff5c 	bl	8006960 <__NVIC_GetPriorityGrouping>
 8006aa8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	68b9      	ldr	r1, [r7, #8]
 8006aae:	6978      	ldr	r0, [r7, #20]
 8006ab0:	f7ff ff8e 	bl	80069d0 <NVIC_EncodePriority>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006aba:	4611      	mov	r1, r2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f7ff ff5d 	bl	800697c <__NVIC_SetPriority>
}
 8006ac2:	bf00      	nop
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b082      	sub	sp, #8
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff ffb0 	bl	8006a38 <SysTick_Config>
 8006ad8:	4603      	mov	r3, r0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b082      	sub	sp, #8
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e00e      	b.n	8006b12 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	795b      	ldrb	r3, [r3, #5]
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d105      	bne.n	8006b0a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff fcd5 	bl	80064b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006b10:	2300      	movs	r3, #0
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b089      	sub	sp, #36	; 0x24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b32:	2300      	movs	r3, #0
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	e159      	b.n	8006dec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006b38:	2201      	movs	r2, #1
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4013      	ands	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	f040 8148 	bne.w	8006de6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d00b      	beq.n	8006b76 <HAL_GPIO_Init+0x5a>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d007      	beq.n	8006b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b6a:	2b11      	cmp	r3, #17
 8006b6c:	d003      	beq.n	8006b76 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	2b12      	cmp	r3, #18
 8006b74:	d130      	bne.n	8006bd8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	005b      	lsls	r3, r3, #1
 8006b80:	2203      	movs	r2, #3
 8006b82:	fa02 f303 	lsl.w	r3, r2, r3
 8006b86:	43db      	mvns	r3, r3
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	005b      	lsls	r3, r3, #1
 8006b96:	fa02 f303 	lsl.w	r3, r2, r3
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bac:	2201      	movs	r2, #1
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb4:	43db      	mvns	r3, r3
 8006bb6:	69ba      	ldr	r2, [r7, #24]
 8006bb8:	4013      	ands	r3, r2
 8006bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	091b      	lsrs	r3, r3, #4
 8006bc2:	f003 0201 	and.w	r2, r3, #1
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	2203      	movs	r2, #3
 8006be4:	fa02 f303 	lsl.w	r3, r2, r3
 8006be8:	43db      	mvns	r3, r3
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	4013      	ands	r3, r2
 8006bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689a      	ldr	r2, [r3, #8]
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	005b      	lsls	r3, r3, #1
 8006bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d003      	beq.n	8006c18 <HAL_GPIO_Init+0xfc>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b12      	cmp	r3, #18
 8006c16:	d123      	bne.n	8006c60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	08da      	lsrs	r2, r3, #3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3208      	adds	r2, #8
 8006c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	220f      	movs	r2, #15
 8006c30:	fa02 f303 	lsl.w	r3, r2, r3
 8006c34:	43db      	mvns	r3, r3
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	08da      	lsrs	r2, r3, #3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	3208      	adds	r2, #8
 8006c5a:	69b9      	ldr	r1, [r7, #24]
 8006c5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	43db      	mvns	r3, r3
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	4013      	ands	r3, r2
 8006c76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	f003 0203 	and.w	r2, r3, #3
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	005b      	lsls	r3, r3, #1
 8006c84:	fa02 f303 	lsl.w	r3, r2, r3
 8006c88:	69ba      	ldr	r2, [r7, #24]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80a2 	beq.w	8006de6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	4b56      	ldr	r3, [pc, #344]	; (8006e00 <HAL_GPIO_Init+0x2e4>)
 8006ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006caa:	4a55      	ldr	r2, [pc, #340]	; (8006e00 <HAL_GPIO_Init+0x2e4>)
 8006cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8006cb2:	4b53      	ldr	r3, [pc, #332]	; (8006e00 <HAL_GPIO_Init+0x2e4>)
 8006cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cba:	60fb      	str	r3, [r7, #12]
 8006cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006cbe:	4a51      	ldr	r2, [pc, #324]	; (8006e04 <HAL_GPIO_Init+0x2e8>)
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	089b      	lsrs	r3, r3, #2
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	220f      	movs	r2, #15
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	43db      	mvns	r3, r3
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a48      	ldr	r2, [pc, #288]	; (8006e08 <HAL_GPIO_Init+0x2ec>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d019      	beq.n	8006d1e <HAL_GPIO_Init+0x202>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a47      	ldr	r2, [pc, #284]	; (8006e0c <HAL_GPIO_Init+0x2f0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d013      	beq.n	8006d1a <HAL_GPIO_Init+0x1fe>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a46      	ldr	r2, [pc, #280]	; (8006e10 <HAL_GPIO_Init+0x2f4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d00d      	beq.n	8006d16 <HAL_GPIO_Init+0x1fa>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a45      	ldr	r2, [pc, #276]	; (8006e14 <HAL_GPIO_Init+0x2f8>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d007      	beq.n	8006d12 <HAL_GPIO_Init+0x1f6>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a44      	ldr	r2, [pc, #272]	; (8006e18 <HAL_GPIO_Init+0x2fc>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d101      	bne.n	8006d0e <HAL_GPIO_Init+0x1f2>
 8006d0a:	2304      	movs	r3, #4
 8006d0c:	e008      	b.n	8006d20 <HAL_GPIO_Init+0x204>
 8006d0e:	2307      	movs	r3, #7
 8006d10:	e006      	b.n	8006d20 <HAL_GPIO_Init+0x204>
 8006d12:	2303      	movs	r3, #3
 8006d14:	e004      	b.n	8006d20 <HAL_GPIO_Init+0x204>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e002      	b.n	8006d20 <HAL_GPIO_Init+0x204>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e000      	b.n	8006d20 <HAL_GPIO_Init+0x204>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	f002 0203 	and.w	r2, r2, #3
 8006d26:	0092      	lsls	r2, r2, #2
 8006d28:	4093      	lsls	r3, r2
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006d30:	4934      	ldr	r1, [pc, #208]	; (8006e04 <HAL_GPIO_Init+0x2e8>)
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	089b      	lsrs	r3, r3, #2
 8006d36:	3302      	adds	r3, #2
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d3e:	4b37      	ldr	r3, [pc, #220]	; (8006e1c <HAL_GPIO_Init+0x300>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d003      	beq.n	8006d62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d62:	4a2e      	ldr	r2, [pc, #184]	; (8006e1c <HAL_GPIO_Init+0x300>)
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006d68:	4b2c      	ldr	r3, [pc, #176]	; (8006e1c <HAL_GPIO_Init+0x300>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	69ba      	ldr	r2, [r7, #24]
 8006d74:	4013      	ands	r3, r2
 8006d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d003      	beq.n	8006d8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d8c:	4a23      	ldr	r2, [pc, #140]	; (8006e1c <HAL_GPIO_Init+0x300>)
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d92:	4b22      	ldr	r3, [pc, #136]	; (8006e1c <HAL_GPIO_Init+0x300>)
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	43db      	mvns	r3, r3
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006dae:	69ba      	ldr	r2, [r7, #24]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006db6:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <HAL_GPIO_Init+0x300>)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006dbc:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <HAL_GPIO_Init+0x300>)
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006de0:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <HAL_GPIO_Init+0x300>)
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	3301      	adds	r3, #1
 8006dea:	61fb      	str	r3, [r7, #28]
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	f67f aea2 	bls.w	8006b38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006df4:	bf00      	nop
 8006df6:	3724      	adds	r7, #36	; 0x24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40023800 	.word	0x40023800
 8006e04:	40013800 	.word	0x40013800
 8006e08:	40020000 	.word	0x40020000
 8006e0c:	40020400 	.word	0x40020400
 8006e10:	40020800 	.word	0x40020800
 8006e14:	40020c00 	.word	0x40020c00
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	40013c00 	.word	0x40013c00

08006e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	807b      	strh	r3, [r7, #2]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006e30:	787b      	ldrb	r3, [r7, #1]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d003      	beq.n	8006e3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006e36:	887a      	ldrh	r2, [r7, #2]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006e3c:	e003      	b.n	8006e46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006e3e:	887b      	ldrh	r3, [r7, #2]
 8006e40:	041a      	lsls	r2, r3, #16
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	619a      	str	r2, [r3, #24]
}
 8006e46:	bf00      	nop
 8006e48:	370c      	adds	r7, #12
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e25b      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d075      	beq.n	8006f5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e72:	4ba3      	ldr	r3, [pc, #652]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 030c 	and.w	r3, r3, #12
 8006e7a:	2b04      	cmp	r3, #4
 8006e7c:	d00c      	beq.n	8006e98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e7e:	4ba0      	ldr	r3, [pc, #640]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d112      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e8a:	4b9d      	ldr	r3, [pc, #628]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e96:	d10b      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e98:	4b99      	ldr	r3, [pc, #612]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d05b      	beq.n	8006f5c <HAL_RCC_OscConfig+0x108>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d157      	bne.n	8006f5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e236      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eb8:	d106      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x74>
 8006eba:	4b91      	ldr	r3, [pc, #580]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a90      	ldr	r2, [pc, #576]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	e01d      	b.n	8006f04 <HAL_RCC_OscConfig+0xb0>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ed0:	d10c      	bne.n	8006eec <HAL_RCC_OscConfig+0x98>
 8006ed2:	4b8b      	ldr	r3, [pc, #556]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a8a      	ldr	r2, [pc, #552]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006edc:	6013      	str	r3, [r2, #0]
 8006ede:	4b88      	ldr	r3, [pc, #544]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a87      	ldr	r2, [pc, #540]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	e00b      	b.n	8006f04 <HAL_RCC_OscConfig+0xb0>
 8006eec:	4b84      	ldr	r3, [pc, #528]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a83      	ldr	r2, [pc, #524]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef6:	6013      	str	r3, [r2, #0]
 8006ef8:	4b81      	ldr	r3, [pc, #516]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a80      	ldr	r2, [pc, #512]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d013      	beq.n	8006f34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7ff fcd6 	bl	80068bc <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f14:	f7ff fcd2 	bl	80068bc <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b64      	cmp	r3, #100	; 0x64
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e1fb      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f26:	4b76      	ldr	r3, [pc, #472]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d0f0      	beq.n	8006f14 <HAL_RCC_OscConfig+0xc0>
 8006f32:	e014      	b.n	8006f5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f34:	f7ff fcc2 	bl	80068bc <HAL_GetTick>
 8006f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f3c:	f7ff fcbe 	bl	80068bc <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b64      	cmp	r3, #100	; 0x64
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e1e7      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006f4e:	4b6c      	ldr	r3, [pc, #432]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f0      	bne.n	8006f3c <HAL_RCC_OscConfig+0xe8>
 8006f5a:	e000      	b.n	8006f5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d063      	beq.n	8007032 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f6a:	4b65      	ldr	r3, [pc, #404]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f003 030c 	and.w	r3, r3, #12
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00b      	beq.n	8006f8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f76:	4b62      	ldr	r3, [pc, #392]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f7e:	2b08      	cmp	r3, #8
 8006f80:	d11c      	bne.n	8006fbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f82:	4b5f      	ldr	r3, [pc, #380]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d116      	bne.n	8006fbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f8e:	4b5c      	ldr	r3, [pc, #368]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d005      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x152>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d001      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e1bb      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa6:	4b56      	ldr	r3, [pc, #344]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	4952      	ldr	r1, [pc, #328]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006fba:	e03a      	b.n	8007032 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d020      	beq.n	8007006 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006fc4:	4b4f      	ldr	r3, [pc, #316]	; (8007104 <HAL_RCC_OscConfig+0x2b0>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fca:	f7ff fc77 	bl	80068bc <HAL_GetTick>
 8006fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fd2:	f7ff fc73 	bl	80068bc <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e19c      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fe4:	4b46      	ldr	r3, [pc, #280]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0f0      	beq.n	8006fd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ff0:	4b43      	ldr	r3, [pc, #268]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	691b      	ldr	r3, [r3, #16]
 8006ffc:	00db      	lsls	r3, r3, #3
 8006ffe:	4940      	ldr	r1, [pc, #256]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8007000:	4313      	orrs	r3, r2
 8007002:	600b      	str	r3, [r1, #0]
 8007004:	e015      	b.n	8007032 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007006:	4b3f      	ldr	r3, [pc, #252]	; (8007104 <HAL_RCC_OscConfig+0x2b0>)
 8007008:	2200      	movs	r2, #0
 800700a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700c:	f7ff fc56 	bl	80068bc <HAL_GetTick>
 8007010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007014:	f7ff fc52 	bl	80068bc <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e17b      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007026:	4b36      	ldr	r3, [pc, #216]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1f0      	bne.n	8007014 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0308 	and.w	r3, r3, #8
 800703a:	2b00      	cmp	r3, #0
 800703c:	d030      	beq.n	80070a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d016      	beq.n	8007074 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007046:	4b30      	ldr	r3, [pc, #192]	; (8007108 <HAL_RCC_OscConfig+0x2b4>)
 8007048:	2201      	movs	r2, #1
 800704a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800704c:	f7ff fc36 	bl	80068bc <HAL_GetTick>
 8007050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007052:	e008      	b.n	8007066 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007054:	f7ff fc32 	bl	80068bc <HAL_GetTick>
 8007058:	4602      	mov	r2, r0
 800705a:	693b      	ldr	r3, [r7, #16]
 800705c:	1ad3      	subs	r3, r2, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d901      	bls.n	8007066 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e15b      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007066:	4b26      	ldr	r3, [pc, #152]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8007068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d0f0      	beq.n	8007054 <HAL_RCC_OscConfig+0x200>
 8007072:	e015      	b.n	80070a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007074:	4b24      	ldr	r3, [pc, #144]	; (8007108 <HAL_RCC_OscConfig+0x2b4>)
 8007076:	2200      	movs	r2, #0
 8007078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800707a:	f7ff fc1f 	bl	80068bc <HAL_GetTick>
 800707e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007080:	e008      	b.n	8007094 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007082:	f7ff fc1b 	bl	80068bc <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e144      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007094:	4b1a      	ldr	r3, [pc, #104]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 8007096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1f0      	bne.n	8007082 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 80a0 	beq.w	80071ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070b2:	4b13      	ldr	r3, [pc, #76]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d10f      	bne.n	80070de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070be:	2300      	movs	r3, #0
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	4b0f      	ldr	r3, [pc, #60]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	4a0e      	ldr	r2, [pc, #56]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 80070c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070cc:	6413      	str	r3, [r2, #64]	; 0x40
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <HAL_RCC_OscConfig+0x2ac>)
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070d6:	60bb      	str	r3, [r7, #8]
 80070d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070da:	2301      	movs	r3, #1
 80070dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_RCC_OscConfig+0x2b8>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d121      	bne.n	800712e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80070ea:	4b08      	ldr	r3, [pc, #32]	; (800710c <HAL_RCC_OscConfig+0x2b8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a07      	ldr	r2, [pc, #28]	; (800710c <HAL_RCC_OscConfig+0x2b8>)
 80070f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070f6:	f7ff fbe1 	bl	80068bc <HAL_GetTick>
 80070fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070fc:	e011      	b.n	8007122 <HAL_RCC_OscConfig+0x2ce>
 80070fe:	bf00      	nop
 8007100:	40023800 	.word	0x40023800
 8007104:	42470000 	.word	0x42470000
 8007108:	42470e80 	.word	0x42470e80
 800710c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007110:	f7ff fbd4 	bl	80068bc <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d901      	bls.n	8007122 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800711e:	2303      	movs	r3, #3
 8007120:	e0fd      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007122:	4b81      	ldr	r3, [pc, #516]	; (8007328 <HAL_RCC_OscConfig+0x4d4>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712a:	2b00      	cmp	r3, #0
 800712c:	d0f0      	beq.n	8007110 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d106      	bne.n	8007144 <HAL_RCC_OscConfig+0x2f0>
 8007136:	4b7d      	ldr	r3, [pc, #500]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800713a:	4a7c      	ldr	r2, [pc, #496]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 800713c:	f043 0301 	orr.w	r3, r3, #1
 8007140:	6713      	str	r3, [r2, #112]	; 0x70
 8007142:	e01c      	b.n	800717e <HAL_RCC_OscConfig+0x32a>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b05      	cmp	r3, #5
 800714a:	d10c      	bne.n	8007166 <HAL_RCC_OscConfig+0x312>
 800714c:	4b77      	ldr	r3, [pc, #476]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 800714e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007150:	4a76      	ldr	r2, [pc, #472]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 8007152:	f043 0304 	orr.w	r3, r3, #4
 8007156:	6713      	str	r3, [r2, #112]	; 0x70
 8007158:	4b74      	ldr	r3, [pc, #464]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 800715a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715c:	4a73      	ldr	r2, [pc, #460]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 800715e:	f043 0301 	orr.w	r3, r3, #1
 8007162:	6713      	str	r3, [r2, #112]	; 0x70
 8007164:	e00b      	b.n	800717e <HAL_RCC_OscConfig+0x32a>
 8007166:	4b71      	ldr	r3, [pc, #452]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 8007168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800716a:	4a70      	ldr	r2, [pc, #448]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 800716c:	f023 0301 	bic.w	r3, r3, #1
 8007170:	6713      	str	r3, [r2, #112]	; 0x70
 8007172:	4b6e      	ldr	r3, [pc, #440]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 8007174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007176:	4a6d      	ldr	r2, [pc, #436]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 8007178:	f023 0304 	bic.w	r3, r3, #4
 800717c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d015      	beq.n	80071b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007186:	f7ff fb99 	bl	80068bc <HAL_GetTick>
 800718a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800718c:	e00a      	b.n	80071a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800718e:	f7ff fb95 	bl	80068bc <HAL_GetTick>
 8007192:	4602      	mov	r2, r0
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	1ad3      	subs	r3, r2, r3
 8007198:	f241 3288 	movw	r2, #5000	; 0x1388
 800719c:	4293      	cmp	r3, r2
 800719e:	d901      	bls.n	80071a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e0bc      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071a4:	4b61      	ldr	r3, [pc, #388]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 80071a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0ee      	beq.n	800718e <HAL_RCC_OscConfig+0x33a>
 80071b0:	e014      	b.n	80071dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071b2:	f7ff fb83 	bl	80068bc <HAL_GetTick>
 80071b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071b8:	e00a      	b.n	80071d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071ba:	f7ff fb7f 	bl	80068bc <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d901      	bls.n	80071d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e0a6      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80071d0:	4b56      	ldr	r3, [pc, #344]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 80071d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1ee      	bne.n	80071ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071dc:	7dfb      	ldrb	r3, [r7, #23]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d105      	bne.n	80071ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071e2:	4b52      	ldr	r3, [pc, #328]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4a51      	ldr	r2, [pc, #324]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 80071e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 8092 	beq.w	800731c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071f8:	4b4c      	ldr	r3, [pc, #304]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	f003 030c 	and.w	r3, r3, #12
 8007200:	2b08      	cmp	r3, #8
 8007202:	d05c      	beq.n	80072be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	2b02      	cmp	r3, #2
 800720a:	d141      	bne.n	8007290 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800720c:	4b48      	ldr	r3, [pc, #288]	; (8007330 <HAL_RCC_OscConfig+0x4dc>)
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007212:	f7ff fb53 	bl	80068bc <HAL_GetTick>
 8007216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007218:	e008      	b.n	800722c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800721a:	f7ff fb4f 	bl	80068bc <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	2b02      	cmp	r3, #2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e078      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800722c:	4b3f      	ldr	r3, [pc, #252]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1f0      	bne.n	800721a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	69da      	ldr	r2, [r3, #28]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	019b      	lsls	r3, r3, #6
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	3b01      	subs	r3, #1
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	431a      	orrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725a:	061b      	lsls	r3, r3, #24
 800725c:	4933      	ldr	r1, [pc, #204]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 800725e:	4313      	orrs	r3, r2
 8007260:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007262:	4b33      	ldr	r3, [pc, #204]	; (8007330 <HAL_RCC_OscConfig+0x4dc>)
 8007264:	2201      	movs	r2, #1
 8007266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007268:	f7ff fb28 	bl	80068bc <HAL_GetTick>
 800726c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800726e:	e008      	b.n	8007282 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007270:	f7ff fb24 	bl	80068bc <HAL_GetTick>
 8007274:	4602      	mov	r2, r0
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d901      	bls.n	8007282 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e04d      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007282:	4b2a      	ldr	r3, [pc, #168]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0f0      	beq.n	8007270 <HAL_RCC_OscConfig+0x41c>
 800728e:	e045      	b.n	800731c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007290:	4b27      	ldr	r3, [pc, #156]	; (8007330 <HAL_RCC_OscConfig+0x4dc>)
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007296:	f7ff fb11 	bl	80068bc <HAL_GetTick>
 800729a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800729e:	f7ff fb0d 	bl	80068bc <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e036      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072b0:	4b1e      	ldr	r3, [pc, #120]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1f0      	bne.n	800729e <HAL_RCC_OscConfig+0x44a>
 80072bc:	e02e      	b.n	800731c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	699b      	ldr	r3, [r3, #24]
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d101      	bne.n	80072ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e029      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80072ca:	4b18      	ldr	r3, [pc, #96]	; (800732c <HAL_RCC_OscConfig+0x4d8>)
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	69db      	ldr	r3, [r3, #28]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d11c      	bne.n	8007318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d115      	bne.n	8007318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072f2:	4013      	ands	r3, r2
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d10d      	bne.n	8007318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007306:	429a      	cmp	r2, r3
 8007308:	d106      	bne.n	8007318 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007314:	429a      	cmp	r2, r3
 8007316:	d001      	beq.n	800731c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	40007000 	.word	0x40007000
 800732c:	40023800 	.word	0x40023800
 8007330:	42470060 	.word	0x42470060

08007334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e0cc      	b.n	80074e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007348:	4b68      	ldr	r3, [pc, #416]	; (80074ec <HAL_RCC_ClockConfig+0x1b8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 030f 	and.w	r3, r3, #15
 8007350:	683a      	ldr	r2, [r7, #0]
 8007352:	429a      	cmp	r2, r3
 8007354:	d90c      	bls.n	8007370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007356:	4b65      	ldr	r3, [pc, #404]	; (80074ec <HAL_RCC_ClockConfig+0x1b8>)
 8007358:	683a      	ldr	r2, [r7, #0]
 800735a:	b2d2      	uxtb	r2, r2
 800735c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800735e:	4b63      	ldr	r3, [pc, #396]	; (80074ec <HAL_RCC_ClockConfig+0x1b8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 030f 	and.w	r3, r3, #15
 8007366:	683a      	ldr	r2, [r7, #0]
 8007368:	429a      	cmp	r2, r3
 800736a:	d001      	beq.n	8007370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e0b8      	b.n	80074e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d020      	beq.n	80073be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0304 	and.w	r3, r3, #4
 8007384:	2b00      	cmp	r3, #0
 8007386:	d005      	beq.n	8007394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007388:	4b59      	ldr	r3, [pc, #356]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	4a58      	ldr	r2, [pc, #352]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 800738e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007392:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0308 	and.w	r3, r3, #8
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073a0:	4b53      	ldr	r3, [pc, #332]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	4a52      	ldr	r2, [pc, #328]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073ac:	4b50      	ldr	r3, [pc, #320]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	494d      	ldr	r1, [pc, #308]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d044      	beq.n	8007454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d107      	bne.n	80073e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073d2:	4b47      	ldr	r3, [pc, #284]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d119      	bne.n	8007412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e07f      	b.n	80074e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d003      	beq.n	80073f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d107      	bne.n	8007402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073f2:	4b3f      	ldr	r3, [pc, #252]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d109      	bne.n	8007412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e06f      	b.n	80074e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007402:	4b3b      	ldr	r3, [pc, #236]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0302 	and.w	r3, r3, #2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e067      	b.n	80074e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007412:	4b37      	ldr	r3, [pc, #220]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	f023 0203 	bic.w	r2, r3, #3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	4934      	ldr	r1, [pc, #208]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007420:	4313      	orrs	r3, r2
 8007422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007424:	f7ff fa4a 	bl	80068bc <HAL_GetTick>
 8007428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800742a:	e00a      	b.n	8007442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800742c:	f7ff fa46 	bl	80068bc <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	f241 3288 	movw	r2, #5000	; 0x1388
 800743a:	4293      	cmp	r3, r2
 800743c:	d901      	bls.n	8007442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e04f      	b.n	80074e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007442:	4b2b      	ldr	r3, [pc, #172]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 020c 	and.w	r2, r3, #12
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	429a      	cmp	r2, r3
 8007452:	d1eb      	bne.n	800742c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007454:	4b25      	ldr	r3, [pc, #148]	; (80074ec <HAL_RCC_ClockConfig+0x1b8>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	683a      	ldr	r2, [r7, #0]
 800745e:	429a      	cmp	r2, r3
 8007460:	d20c      	bcs.n	800747c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007462:	4b22      	ldr	r3, [pc, #136]	; (80074ec <HAL_RCC_ClockConfig+0x1b8>)
 8007464:	683a      	ldr	r2, [r7, #0]
 8007466:	b2d2      	uxtb	r2, r2
 8007468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800746a:	4b20      	ldr	r3, [pc, #128]	; (80074ec <HAL_RCC_ClockConfig+0x1b8>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	683a      	ldr	r2, [r7, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d001      	beq.n	800747c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e032      	b.n	80074e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f003 0304 	and.w	r3, r3, #4
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007488:	4b19      	ldr	r3, [pc, #100]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	4916      	ldr	r1, [pc, #88]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007496:	4313      	orrs	r3, r2
 8007498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0308 	and.w	r3, r3, #8
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d009      	beq.n	80074ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074a6:	4b12      	ldr	r3, [pc, #72]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	490e      	ldr	r1, [pc, #56]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074ba:	f000 f821 	bl	8007500 <HAL_RCC_GetSysClockFreq>
 80074be:	4601      	mov	r1, r0
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <HAL_RCC_ClockConfig+0x1bc>)
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	091b      	lsrs	r3, r3, #4
 80074c6:	f003 030f 	and.w	r3, r3, #15
 80074ca:	4a0a      	ldr	r2, [pc, #40]	; (80074f4 <HAL_RCC_ClockConfig+0x1c0>)
 80074cc:	5cd3      	ldrb	r3, [r2, r3]
 80074ce:	fa21 f303 	lsr.w	r3, r1, r3
 80074d2:	4a09      	ldr	r2, [pc, #36]	; (80074f8 <HAL_RCC_ClockConfig+0x1c4>)
 80074d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074d6:	4b09      	ldr	r3, [pc, #36]	; (80074fc <HAL_RCC_ClockConfig+0x1c8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f7ff f9aa 	bl	8006834 <HAL_InitTick>

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	40023c00 	.word	0x40023c00
 80074f0:	40023800 	.word	0x40023800
 80074f4:	08018ccc 	.word	0x08018ccc
 80074f8:	20000624 	.word	0x20000624
 80074fc:	20000628 	.word	0x20000628

08007500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007506:	2300      	movs	r3, #0
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
 800750e:	2300      	movs	r3, #0
 8007510:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007516:	4b63      	ldr	r3, [pc, #396]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 030c 	and.w	r3, r3, #12
 800751e:	2b04      	cmp	r3, #4
 8007520:	d007      	beq.n	8007532 <HAL_RCC_GetSysClockFreq+0x32>
 8007522:	2b08      	cmp	r3, #8
 8007524:	d008      	beq.n	8007538 <HAL_RCC_GetSysClockFreq+0x38>
 8007526:	2b00      	cmp	r3, #0
 8007528:	f040 80b4 	bne.w	8007694 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800752c:	4b5e      	ldr	r3, [pc, #376]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800752e:	60bb      	str	r3, [r7, #8]
       break;
 8007530:	e0b3      	b.n	800769a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007532:	4b5e      	ldr	r3, [pc, #376]	; (80076ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007534:	60bb      	str	r3, [r7, #8]
      break;
 8007536:	e0b0      	b.n	800769a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007538:	4b5a      	ldr	r3, [pc, #360]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007540:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007542:	4b58      	ldr	r3, [pc, #352]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d04a      	beq.n	80075e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800754e:	4b55      	ldr	r3, [pc, #340]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	099b      	lsrs	r3, r3, #6
 8007554:	f04f 0400 	mov.w	r4, #0
 8007558:	f240 11ff 	movw	r1, #511	; 0x1ff
 800755c:	f04f 0200 	mov.w	r2, #0
 8007560:	ea03 0501 	and.w	r5, r3, r1
 8007564:	ea04 0602 	and.w	r6, r4, r2
 8007568:	4629      	mov	r1, r5
 800756a:	4632      	mov	r2, r6
 800756c:	f04f 0300 	mov.w	r3, #0
 8007570:	f04f 0400 	mov.w	r4, #0
 8007574:	0154      	lsls	r4, r2, #5
 8007576:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800757a:	014b      	lsls	r3, r1, #5
 800757c:	4619      	mov	r1, r3
 800757e:	4622      	mov	r2, r4
 8007580:	1b49      	subs	r1, r1, r5
 8007582:	eb62 0206 	sbc.w	r2, r2, r6
 8007586:	f04f 0300 	mov.w	r3, #0
 800758a:	f04f 0400 	mov.w	r4, #0
 800758e:	0194      	lsls	r4, r2, #6
 8007590:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007594:	018b      	lsls	r3, r1, #6
 8007596:	1a5b      	subs	r3, r3, r1
 8007598:	eb64 0402 	sbc.w	r4, r4, r2
 800759c:	f04f 0100 	mov.w	r1, #0
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	00e2      	lsls	r2, r4, #3
 80075a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80075aa:	00d9      	lsls	r1, r3, #3
 80075ac:	460b      	mov	r3, r1
 80075ae:	4614      	mov	r4, r2
 80075b0:	195b      	adds	r3, r3, r5
 80075b2:	eb44 0406 	adc.w	r4, r4, r6
 80075b6:	f04f 0100 	mov.w	r1, #0
 80075ba:	f04f 0200 	mov.w	r2, #0
 80075be:	0262      	lsls	r2, r4, #9
 80075c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80075c4:	0259      	lsls	r1, r3, #9
 80075c6:	460b      	mov	r3, r1
 80075c8:	4614      	mov	r4, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	4621      	mov	r1, r4
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f04f 0400 	mov.w	r4, #0
 80075d4:	461a      	mov	r2, r3
 80075d6:	4623      	mov	r3, r4
 80075d8:	f7f9 fb6e 	bl	8000cb8 <__aeabi_uldivmod>
 80075dc:	4603      	mov	r3, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	e049      	b.n	8007678 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075e4:	4b2f      	ldr	r3, [pc, #188]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	099b      	lsrs	r3, r3, #6
 80075ea:	f04f 0400 	mov.w	r4, #0
 80075ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80075f2:	f04f 0200 	mov.w	r2, #0
 80075f6:	ea03 0501 	and.w	r5, r3, r1
 80075fa:	ea04 0602 	and.w	r6, r4, r2
 80075fe:	4629      	mov	r1, r5
 8007600:	4632      	mov	r2, r6
 8007602:	f04f 0300 	mov.w	r3, #0
 8007606:	f04f 0400 	mov.w	r4, #0
 800760a:	0154      	lsls	r4, r2, #5
 800760c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007610:	014b      	lsls	r3, r1, #5
 8007612:	4619      	mov	r1, r3
 8007614:	4622      	mov	r2, r4
 8007616:	1b49      	subs	r1, r1, r5
 8007618:	eb62 0206 	sbc.w	r2, r2, r6
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	f04f 0400 	mov.w	r4, #0
 8007624:	0194      	lsls	r4, r2, #6
 8007626:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800762a:	018b      	lsls	r3, r1, #6
 800762c:	1a5b      	subs	r3, r3, r1
 800762e:	eb64 0402 	sbc.w	r4, r4, r2
 8007632:	f04f 0100 	mov.w	r1, #0
 8007636:	f04f 0200 	mov.w	r2, #0
 800763a:	00e2      	lsls	r2, r4, #3
 800763c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007640:	00d9      	lsls	r1, r3, #3
 8007642:	460b      	mov	r3, r1
 8007644:	4614      	mov	r4, r2
 8007646:	195b      	adds	r3, r3, r5
 8007648:	eb44 0406 	adc.w	r4, r4, r6
 800764c:	f04f 0100 	mov.w	r1, #0
 8007650:	f04f 0200 	mov.w	r2, #0
 8007654:	02a2      	lsls	r2, r4, #10
 8007656:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800765a:	0299      	lsls	r1, r3, #10
 800765c:	460b      	mov	r3, r1
 800765e:	4614      	mov	r4, r2
 8007660:	4618      	mov	r0, r3
 8007662:	4621      	mov	r1, r4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f04f 0400 	mov.w	r4, #0
 800766a:	461a      	mov	r2, r3
 800766c:	4623      	mov	r3, r4
 800766e:	f7f9 fb23 	bl	8000cb8 <__aeabi_uldivmod>
 8007672:	4603      	mov	r3, r0
 8007674:	460c      	mov	r4, r1
 8007676:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	0c1b      	lsrs	r3, r3, #16
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	3301      	adds	r3, #1
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	60bb      	str	r3, [r7, #8]
      break;
 8007692:	e002      	b.n	800769a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007694:	4b04      	ldr	r3, [pc, #16]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007696:	60bb      	str	r3, [r7, #8]
      break;
 8007698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800769a:	68bb      	ldr	r3, [r7, #8]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3714      	adds	r7, #20
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076a4:	40023800 	.word	0x40023800
 80076a8:	00f42400 	.word	0x00f42400
 80076ac:	007a1200 	.word	0x007a1200

080076b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076b6:	681b      	ldr	r3, [r3, #0]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000624 	.word	0x20000624

080076c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076cc:	f7ff fff0 	bl	80076b0 <HAL_RCC_GetHCLKFreq>
 80076d0:	4601      	mov	r1, r0
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	0a9b      	lsrs	r3, r3, #10
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	4a03      	ldr	r2, [pc, #12]	; (80076ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80076de:	5cd3      	ldrb	r3, [r2, r3]
 80076e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40023800 	.word	0x40023800
 80076ec:	08018cdc 	.word	0x08018cdc

080076f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076f4:	f7ff ffdc 	bl	80076b0 <HAL_RCC_GetHCLKFreq>
 80076f8:	4601      	mov	r1, r0
 80076fa:	4b05      	ldr	r3, [pc, #20]	; (8007710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	0b5b      	lsrs	r3, r3, #13
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	4a03      	ldr	r2, [pc, #12]	; (8007714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007706:	5cd3      	ldrb	r3, [r2, r3]
 8007708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800770c:	4618      	mov	r0, r3
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40023800 	.word	0x40023800
 8007714:	08018cdc 	.word	0x08018cdc

08007718 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e03f      	b.n	80077aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fe feda 	bl	80064f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2224      	movs	r2, #36	; 0x24
 8007748:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800775a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f90b 	bl	8007978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007770:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695a      	ldr	r2, [r3, #20]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007780:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007790:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2220      	movs	r2, #32
 800779c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b088      	sub	sp, #32
 80077b6:	af02      	add	r7, sp, #8
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	4613      	mov	r3, r2
 80077c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	f040 8083 	bne.w	80078da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_UART_Transmit+0x2e>
 80077da:	88fb      	ldrh	r3, [r7, #6]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e07b      	b.n	80078dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d101      	bne.n	80077f2 <HAL_UART_Transmit+0x40>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e074      	b.n	80078dc <HAL_UART_Transmit+0x12a>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2201      	movs	r2, #1
 80077f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2221      	movs	r2, #33	; 0x21
 8007804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8007808:	f7ff f858 	bl	80068bc <HAL_GetTick>
 800780c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	88fa      	ldrh	r2, [r7, #6]
 8007812:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	88fa      	ldrh	r2, [r7, #6]
 8007818:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007822:	e042      	b.n	80078aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800783a:	d122      	bne.n	8007882 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	2200      	movs	r2, #0
 8007844:	2180      	movs	r1, #128	; 0x80
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f84c 	bl	80078e4 <UART_WaitOnFlagUntilTimeout>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d001      	beq.n	8007856 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e042      	b.n	80078dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007868:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d103      	bne.n	800787a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	3302      	adds	r3, #2
 8007876:	60bb      	str	r3, [r7, #8]
 8007878:	e017      	b.n	80078aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	3301      	adds	r3, #1
 800787e:	60bb      	str	r3, [r7, #8]
 8007880:	e013      	b.n	80078aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2200      	movs	r2, #0
 800788a:	2180      	movs	r1, #128	; 0x80
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 f829 	bl	80078e4 <UART_WaitOnFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8007898:	2303      	movs	r3, #3
 800789a:	e01f      	b.n	80078dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	60ba      	str	r2, [r7, #8]
 80078a2:	781a      	ldrb	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d1b7      	bne.n	8007824 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2200      	movs	r2, #0
 80078bc:	2140      	movs	r1, #64	; 0x40
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f810 	bl	80078e4 <UART_WaitOnFlagUntilTimeout>
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e006      	b.n	80078dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e000      	b.n	80078dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80078da:	2302      	movs	r3, #2
  }
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}

080078e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	4613      	mov	r3, r2
 80078f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078f4:	e02c      	b.n	8007950 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078fc:	d028      	beq.n	8007950 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d007      	beq.n	8007914 <UART_WaitOnFlagUntilTimeout+0x30>
 8007904:	f7fe ffda 	bl	80068bc <HAL_GetTick>
 8007908:	4602      	mov	r2, r0
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	429a      	cmp	r2, r3
 8007912:	d21d      	bcs.n	8007950 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68da      	ldr	r2, [r3, #12]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007922:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	695a      	ldr	r2, [r3, #20]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0201 	bic.w	r2, r2, #1
 8007932:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2220      	movs	r2, #32
 8007940:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e00f      	b.n	8007970 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	4013      	ands	r3, r2
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	429a      	cmp	r2, r3
 800795e:	bf0c      	ite	eq
 8007960:	2301      	moveq	r3, #1
 8007962:	2300      	movne	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	79fb      	ldrb	r3, [r7, #7]
 800796a:	429a      	cmp	r2, r3
 800796c:	d0c3      	beq.n	80078f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68da      	ldr	r2, [r3, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	695b      	ldr	r3, [r3, #20]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80079ba:	f023 030c 	bic.w	r3, r3, #12
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6812      	ldr	r2, [r2, #0]
 80079c2:	68f9      	ldr	r1, [r7, #12]
 80079c4:	430b      	orrs	r3, r1
 80079c6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	699a      	ldr	r2, [r3, #24]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079e6:	f040 818b 	bne.w	8007d00 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4ac1      	ldr	r2, [pc, #772]	; (8007cf4 <UART_SetConfig+0x37c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d005      	beq.n	8007a00 <UART_SetConfig+0x88>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4abf      	ldr	r2, [pc, #764]	; (8007cf8 <UART_SetConfig+0x380>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	f040 80bd 	bne.w	8007b7a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a00:	f7ff fe76 	bl	80076f0 <HAL_RCC_GetPCLK2Freq>
 8007a04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	461d      	mov	r5, r3
 8007a0a:	f04f 0600 	mov.w	r6, #0
 8007a0e:	46a8      	mov	r8, r5
 8007a10:	46b1      	mov	r9, r6
 8007a12:	eb18 0308 	adds.w	r3, r8, r8
 8007a16:	eb49 0409 	adc.w	r4, r9, r9
 8007a1a:	4698      	mov	r8, r3
 8007a1c:	46a1      	mov	r9, r4
 8007a1e:	eb18 0805 	adds.w	r8, r8, r5
 8007a22:	eb49 0906 	adc.w	r9, r9, r6
 8007a26:	f04f 0100 	mov.w	r1, #0
 8007a2a:	f04f 0200 	mov.w	r2, #0
 8007a2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a3a:	4688      	mov	r8, r1
 8007a3c:	4691      	mov	r9, r2
 8007a3e:	eb18 0005 	adds.w	r0, r8, r5
 8007a42:	eb49 0106 	adc.w	r1, r9, r6
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	461d      	mov	r5, r3
 8007a4c:	f04f 0600 	mov.w	r6, #0
 8007a50:	196b      	adds	r3, r5, r5
 8007a52:	eb46 0406 	adc.w	r4, r6, r6
 8007a56:	461a      	mov	r2, r3
 8007a58:	4623      	mov	r3, r4
 8007a5a:	f7f9 f92d 	bl	8000cb8 <__aeabi_uldivmod>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	460c      	mov	r4, r1
 8007a62:	461a      	mov	r2, r3
 8007a64:	4ba5      	ldr	r3, [pc, #660]	; (8007cfc <UART_SetConfig+0x384>)
 8007a66:	fba3 2302 	umull	r2, r3, r3, r2
 8007a6a:	095b      	lsrs	r3, r3, #5
 8007a6c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	461d      	mov	r5, r3
 8007a74:	f04f 0600 	mov.w	r6, #0
 8007a78:	46a9      	mov	r9, r5
 8007a7a:	46b2      	mov	sl, r6
 8007a7c:	eb19 0309 	adds.w	r3, r9, r9
 8007a80:	eb4a 040a 	adc.w	r4, sl, sl
 8007a84:	4699      	mov	r9, r3
 8007a86:	46a2      	mov	sl, r4
 8007a88:	eb19 0905 	adds.w	r9, r9, r5
 8007a8c:	eb4a 0a06 	adc.w	sl, sl, r6
 8007a90:	f04f 0100 	mov.w	r1, #0
 8007a94:	f04f 0200 	mov.w	r2, #0
 8007a98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007a9c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007aa0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007aa4:	4689      	mov	r9, r1
 8007aa6:	4692      	mov	sl, r2
 8007aa8:	eb19 0005 	adds.w	r0, r9, r5
 8007aac:	eb4a 0106 	adc.w	r1, sl, r6
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	461d      	mov	r5, r3
 8007ab6:	f04f 0600 	mov.w	r6, #0
 8007aba:	196b      	adds	r3, r5, r5
 8007abc:	eb46 0406 	adc.w	r4, r6, r6
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	4623      	mov	r3, r4
 8007ac4:	f7f9 f8f8 	bl	8000cb8 <__aeabi_uldivmod>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	461a      	mov	r2, r3
 8007ace:	4b8b      	ldr	r3, [pc, #556]	; (8007cfc <UART_SetConfig+0x384>)
 8007ad0:	fba3 1302 	umull	r1, r3, r3, r2
 8007ad4:	095b      	lsrs	r3, r3, #5
 8007ad6:	2164      	movs	r1, #100	; 0x64
 8007ad8:	fb01 f303 	mul.w	r3, r1, r3
 8007adc:	1ad3      	subs	r3, r2, r3
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	3332      	adds	r3, #50	; 0x32
 8007ae2:	4a86      	ldr	r2, [pc, #536]	; (8007cfc <UART_SetConfig+0x384>)
 8007ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007af0:	4498      	add	r8, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	461d      	mov	r5, r3
 8007af6:	f04f 0600 	mov.w	r6, #0
 8007afa:	46a9      	mov	r9, r5
 8007afc:	46b2      	mov	sl, r6
 8007afe:	eb19 0309 	adds.w	r3, r9, r9
 8007b02:	eb4a 040a 	adc.w	r4, sl, sl
 8007b06:	4699      	mov	r9, r3
 8007b08:	46a2      	mov	sl, r4
 8007b0a:	eb19 0905 	adds.w	r9, r9, r5
 8007b0e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b12:	f04f 0100 	mov.w	r1, #0
 8007b16:	f04f 0200 	mov.w	r2, #0
 8007b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b26:	4689      	mov	r9, r1
 8007b28:	4692      	mov	sl, r2
 8007b2a:	eb19 0005 	adds.w	r0, r9, r5
 8007b2e:	eb4a 0106 	adc.w	r1, sl, r6
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	461d      	mov	r5, r3
 8007b38:	f04f 0600 	mov.w	r6, #0
 8007b3c:	196b      	adds	r3, r5, r5
 8007b3e:	eb46 0406 	adc.w	r4, r6, r6
 8007b42:	461a      	mov	r2, r3
 8007b44:	4623      	mov	r3, r4
 8007b46:	f7f9 f8b7 	bl	8000cb8 <__aeabi_uldivmod>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	461a      	mov	r2, r3
 8007b50:	4b6a      	ldr	r3, [pc, #424]	; (8007cfc <UART_SetConfig+0x384>)
 8007b52:	fba3 1302 	umull	r1, r3, r3, r2
 8007b56:	095b      	lsrs	r3, r3, #5
 8007b58:	2164      	movs	r1, #100	; 0x64
 8007b5a:	fb01 f303 	mul.w	r3, r1, r3
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	00db      	lsls	r3, r3, #3
 8007b62:	3332      	adds	r3, #50	; 0x32
 8007b64:	4a65      	ldr	r2, [pc, #404]	; (8007cfc <UART_SetConfig+0x384>)
 8007b66:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6a:	095b      	lsrs	r3, r3, #5
 8007b6c:	f003 0207 	and.w	r2, r3, #7
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4442      	add	r2, r8
 8007b76:	609a      	str	r2, [r3, #8]
 8007b78:	e26f      	b.n	800805a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b7a:	f7ff fda5 	bl	80076c8 <HAL_RCC_GetPCLK1Freq>
 8007b7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	461d      	mov	r5, r3
 8007b84:	f04f 0600 	mov.w	r6, #0
 8007b88:	46a8      	mov	r8, r5
 8007b8a:	46b1      	mov	r9, r6
 8007b8c:	eb18 0308 	adds.w	r3, r8, r8
 8007b90:	eb49 0409 	adc.w	r4, r9, r9
 8007b94:	4698      	mov	r8, r3
 8007b96:	46a1      	mov	r9, r4
 8007b98:	eb18 0805 	adds.w	r8, r8, r5
 8007b9c:	eb49 0906 	adc.w	r9, r9, r6
 8007ba0:	f04f 0100 	mov.w	r1, #0
 8007ba4:	f04f 0200 	mov.w	r2, #0
 8007ba8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bb4:	4688      	mov	r8, r1
 8007bb6:	4691      	mov	r9, r2
 8007bb8:	eb18 0005 	adds.w	r0, r8, r5
 8007bbc:	eb49 0106 	adc.w	r1, r9, r6
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	461d      	mov	r5, r3
 8007bc6:	f04f 0600 	mov.w	r6, #0
 8007bca:	196b      	adds	r3, r5, r5
 8007bcc:	eb46 0406 	adc.w	r4, r6, r6
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4623      	mov	r3, r4
 8007bd4:	f7f9 f870 	bl	8000cb8 <__aeabi_uldivmod>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	460c      	mov	r4, r1
 8007bdc:	461a      	mov	r2, r3
 8007bde:	4b47      	ldr	r3, [pc, #284]	; (8007cfc <UART_SetConfig+0x384>)
 8007be0:	fba3 2302 	umull	r2, r3, r3, r2
 8007be4:	095b      	lsrs	r3, r3, #5
 8007be6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	461d      	mov	r5, r3
 8007bee:	f04f 0600 	mov.w	r6, #0
 8007bf2:	46a9      	mov	r9, r5
 8007bf4:	46b2      	mov	sl, r6
 8007bf6:	eb19 0309 	adds.w	r3, r9, r9
 8007bfa:	eb4a 040a 	adc.w	r4, sl, sl
 8007bfe:	4699      	mov	r9, r3
 8007c00:	46a2      	mov	sl, r4
 8007c02:	eb19 0905 	adds.w	r9, r9, r5
 8007c06:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c0a:	f04f 0100 	mov.w	r1, #0
 8007c0e:	f04f 0200 	mov.w	r2, #0
 8007c12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c1e:	4689      	mov	r9, r1
 8007c20:	4692      	mov	sl, r2
 8007c22:	eb19 0005 	adds.w	r0, r9, r5
 8007c26:	eb4a 0106 	adc.w	r1, sl, r6
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	461d      	mov	r5, r3
 8007c30:	f04f 0600 	mov.w	r6, #0
 8007c34:	196b      	adds	r3, r5, r5
 8007c36:	eb46 0406 	adc.w	r4, r6, r6
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4623      	mov	r3, r4
 8007c3e:	f7f9 f83b 	bl	8000cb8 <__aeabi_uldivmod>
 8007c42:	4603      	mov	r3, r0
 8007c44:	460c      	mov	r4, r1
 8007c46:	461a      	mov	r2, r3
 8007c48:	4b2c      	ldr	r3, [pc, #176]	; (8007cfc <UART_SetConfig+0x384>)
 8007c4a:	fba3 1302 	umull	r1, r3, r3, r2
 8007c4e:	095b      	lsrs	r3, r3, #5
 8007c50:	2164      	movs	r1, #100	; 0x64
 8007c52:	fb01 f303 	mul.w	r3, r1, r3
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	3332      	adds	r3, #50	; 0x32
 8007c5c:	4a27      	ldr	r2, [pc, #156]	; (8007cfc <UART_SetConfig+0x384>)
 8007c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c62:	095b      	lsrs	r3, r3, #5
 8007c64:	005b      	lsls	r3, r3, #1
 8007c66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007c6a:	4498      	add	r8, r3
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	461d      	mov	r5, r3
 8007c70:	f04f 0600 	mov.w	r6, #0
 8007c74:	46a9      	mov	r9, r5
 8007c76:	46b2      	mov	sl, r6
 8007c78:	eb19 0309 	adds.w	r3, r9, r9
 8007c7c:	eb4a 040a 	adc.w	r4, sl, sl
 8007c80:	4699      	mov	r9, r3
 8007c82:	46a2      	mov	sl, r4
 8007c84:	eb19 0905 	adds.w	r9, r9, r5
 8007c88:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c8c:	f04f 0100 	mov.w	r1, #0
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ca0:	4689      	mov	r9, r1
 8007ca2:	4692      	mov	sl, r2
 8007ca4:	eb19 0005 	adds.w	r0, r9, r5
 8007ca8:	eb4a 0106 	adc.w	r1, sl, r6
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	461d      	mov	r5, r3
 8007cb2:	f04f 0600 	mov.w	r6, #0
 8007cb6:	196b      	adds	r3, r5, r5
 8007cb8:	eb46 0406 	adc.w	r4, r6, r6
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4623      	mov	r3, r4
 8007cc0:	f7f8 fffa 	bl	8000cb8 <__aeabi_uldivmod>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	461a      	mov	r2, r3
 8007cca:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <UART_SetConfig+0x384>)
 8007ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	2164      	movs	r1, #100	; 0x64
 8007cd4:	fb01 f303 	mul.w	r3, r1, r3
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	00db      	lsls	r3, r3, #3
 8007cdc:	3332      	adds	r3, #50	; 0x32
 8007cde:	4a07      	ldr	r2, [pc, #28]	; (8007cfc <UART_SetConfig+0x384>)
 8007ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ce4:	095b      	lsrs	r3, r3, #5
 8007ce6:	f003 0207 	and.w	r2, r3, #7
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4442      	add	r2, r8
 8007cf0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007cf2:	e1b2      	b.n	800805a <UART_SetConfig+0x6e2>
 8007cf4:	40011000 	.word	0x40011000
 8007cf8:	40011400 	.word	0x40011400
 8007cfc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4ad7      	ldr	r2, [pc, #860]	; (8008064 <UART_SetConfig+0x6ec>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d005      	beq.n	8007d16 <UART_SetConfig+0x39e>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4ad6      	ldr	r2, [pc, #856]	; (8008068 <UART_SetConfig+0x6f0>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	f040 80d1 	bne.w	8007eb8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d16:	f7ff fceb 	bl	80076f0 <HAL_RCC_GetPCLK2Freq>
 8007d1a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	469a      	mov	sl, r3
 8007d20:	f04f 0b00 	mov.w	fp, #0
 8007d24:	46d0      	mov	r8, sl
 8007d26:	46d9      	mov	r9, fp
 8007d28:	eb18 0308 	adds.w	r3, r8, r8
 8007d2c:	eb49 0409 	adc.w	r4, r9, r9
 8007d30:	4698      	mov	r8, r3
 8007d32:	46a1      	mov	r9, r4
 8007d34:	eb18 080a 	adds.w	r8, r8, sl
 8007d38:	eb49 090b 	adc.w	r9, r9, fp
 8007d3c:	f04f 0100 	mov.w	r1, #0
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d48:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d4c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d50:	4688      	mov	r8, r1
 8007d52:	4691      	mov	r9, r2
 8007d54:	eb1a 0508 	adds.w	r5, sl, r8
 8007d58:	eb4b 0609 	adc.w	r6, fp, r9
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	4619      	mov	r1, r3
 8007d62:	f04f 0200 	mov.w	r2, #0
 8007d66:	f04f 0300 	mov.w	r3, #0
 8007d6a:	f04f 0400 	mov.w	r4, #0
 8007d6e:	0094      	lsls	r4, r2, #2
 8007d70:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007d74:	008b      	lsls	r3, r1, #2
 8007d76:	461a      	mov	r2, r3
 8007d78:	4623      	mov	r3, r4
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	4631      	mov	r1, r6
 8007d7e:	f7f8 ff9b 	bl	8000cb8 <__aeabi_uldivmod>
 8007d82:	4603      	mov	r3, r0
 8007d84:	460c      	mov	r4, r1
 8007d86:	461a      	mov	r2, r3
 8007d88:	4bb8      	ldr	r3, [pc, #736]	; (800806c <UART_SetConfig+0x6f4>)
 8007d8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d8e:	095b      	lsrs	r3, r3, #5
 8007d90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	469b      	mov	fp, r3
 8007d98:	f04f 0c00 	mov.w	ip, #0
 8007d9c:	46d9      	mov	r9, fp
 8007d9e:	46e2      	mov	sl, ip
 8007da0:	eb19 0309 	adds.w	r3, r9, r9
 8007da4:	eb4a 040a 	adc.w	r4, sl, sl
 8007da8:	4699      	mov	r9, r3
 8007daa:	46a2      	mov	sl, r4
 8007dac:	eb19 090b 	adds.w	r9, r9, fp
 8007db0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007db4:	f04f 0100 	mov.w	r1, #0
 8007db8:	f04f 0200 	mov.w	r2, #0
 8007dbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007dc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dc8:	4689      	mov	r9, r1
 8007dca:	4692      	mov	sl, r2
 8007dcc:	eb1b 0509 	adds.w	r5, fp, r9
 8007dd0:	eb4c 060a 	adc.w	r6, ip, sl
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	4619      	mov	r1, r3
 8007dda:	f04f 0200 	mov.w	r2, #0
 8007dde:	f04f 0300 	mov.w	r3, #0
 8007de2:	f04f 0400 	mov.w	r4, #0
 8007de6:	0094      	lsls	r4, r2, #2
 8007de8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dec:	008b      	lsls	r3, r1, #2
 8007dee:	461a      	mov	r2, r3
 8007df0:	4623      	mov	r3, r4
 8007df2:	4628      	mov	r0, r5
 8007df4:	4631      	mov	r1, r6
 8007df6:	f7f8 ff5f 	bl	8000cb8 <__aeabi_uldivmod>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	460c      	mov	r4, r1
 8007dfe:	461a      	mov	r2, r3
 8007e00:	4b9a      	ldr	r3, [pc, #616]	; (800806c <UART_SetConfig+0x6f4>)
 8007e02:	fba3 1302 	umull	r1, r3, r3, r2
 8007e06:	095b      	lsrs	r3, r3, #5
 8007e08:	2164      	movs	r1, #100	; 0x64
 8007e0a:	fb01 f303 	mul.w	r3, r1, r3
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	011b      	lsls	r3, r3, #4
 8007e12:	3332      	adds	r3, #50	; 0x32
 8007e14:	4a95      	ldr	r2, [pc, #596]	; (800806c <UART_SetConfig+0x6f4>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	095b      	lsrs	r3, r3, #5
 8007e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e20:	4498      	add	r8, r3
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	469b      	mov	fp, r3
 8007e26:	f04f 0c00 	mov.w	ip, #0
 8007e2a:	46d9      	mov	r9, fp
 8007e2c:	46e2      	mov	sl, ip
 8007e2e:	eb19 0309 	adds.w	r3, r9, r9
 8007e32:	eb4a 040a 	adc.w	r4, sl, sl
 8007e36:	4699      	mov	r9, r3
 8007e38:	46a2      	mov	sl, r4
 8007e3a:	eb19 090b 	adds.w	r9, r9, fp
 8007e3e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e42:	f04f 0100 	mov.w	r1, #0
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e56:	4689      	mov	r9, r1
 8007e58:	4692      	mov	sl, r2
 8007e5a:	eb1b 0509 	adds.w	r5, fp, r9
 8007e5e:	eb4c 060a 	adc.w	r6, ip, sl
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	4619      	mov	r1, r3
 8007e68:	f04f 0200 	mov.w	r2, #0
 8007e6c:	f04f 0300 	mov.w	r3, #0
 8007e70:	f04f 0400 	mov.w	r4, #0
 8007e74:	0094      	lsls	r4, r2, #2
 8007e76:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e7a:	008b      	lsls	r3, r1, #2
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	4623      	mov	r3, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	4631      	mov	r1, r6
 8007e84:	f7f8 ff18 	bl	8000cb8 <__aeabi_uldivmod>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4b77      	ldr	r3, [pc, #476]	; (800806c <UART_SetConfig+0x6f4>)
 8007e90:	fba3 1302 	umull	r1, r3, r3, r2
 8007e94:	095b      	lsrs	r3, r3, #5
 8007e96:	2164      	movs	r1, #100	; 0x64
 8007e98:	fb01 f303 	mul.w	r3, r1, r3
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	3332      	adds	r3, #50	; 0x32
 8007ea2:	4a72      	ldr	r2, [pc, #456]	; (800806c <UART_SetConfig+0x6f4>)
 8007ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea8:	095b      	lsrs	r3, r3, #5
 8007eaa:	f003 020f 	and.w	r2, r3, #15
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4442      	add	r2, r8
 8007eb4:	609a      	str	r2, [r3, #8]
 8007eb6:	e0d0      	b.n	800805a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007eb8:	f7ff fc06 	bl	80076c8 <HAL_RCC_GetPCLK1Freq>
 8007ebc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	469a      	mov	sl, r3
 8007ec2:	f04f 0b00 	mov.w	fp, #0
 8007ec6:	46d0      	mov	r8, sl
 8007ec8:	46d9      	mov	r9, fp
 8007eca:	eb18 0308 	adds.w	r3, r8, r8
 8007ece:	eb49 0409 	adc.w	r4, r9, r9
 8007ed2:	4698      	mov	r8, r3
 8007ed4:	46a1      	mov	r9, r4
 8007ed6:	eb18 080a 	adds.w	r8, r8, sl
 8007eda:	eb49 090b 	adc.w	r9, r9, fp
 8007ede:	f04f 0100 	mov.w	r1, #0
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007eea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007eee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007ef2:	4688      	mov	r8, r1
 8007ef4:	4691      	mov	r9, r2
 8007ef6:	eb1a 0508 	adds.w	r5, sl, r8
 8007efa:	eb4b 0609 	adc.w	r6, fp, r9
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	4619      	mov	r1, r3
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	f04f 0400 	mov.w	r4, #0
 8007f10:	0094      	lsls	r4, r2, #2
 8007f12:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f16:	008b      	lsls	r3, r1, #2
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4623      	mov	r3, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	4631      	mov	r1, r6
 8007f20:	f7f8 feca 	bl	8000cb8 <__aeabi_uldivmod>
 8007f24:	4603      	mov	r3, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4b50      	ldr	r3, [pc, #320]	; (800806c <UART_SetConfig+0x6f4>)
 8007f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f30:	095b      	lsrs	r3, r3, #5
 8007f32:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	469b      	mov	fp, r3
 8007f3a:	f04f 0c00 	mov.w	ip, #0
 8007f3e:	46d9      	mov	r9, fp
 8007f40:	46e2      	mov	sl, ip
 8007f42:	eb19 0309 	adds.w	r3, r9, r9
 8007f46:	eb4a 040a 	adc.w	r4, sl, sl
 8007f4a:	4699      	mov	r9, r3
 8007f4c:	46a2      	mov	sl, r4
 8007f4e:	eb19 090b 	adds.w	r9, r9, fp
 8007f52:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f56:	f04f 0100 	mov.w	r1, #0
 8007f5a:	f04f 0200 	mov.w	r2, #0
 8007f5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f6a:	4689      	mov	r9, r1
 8007f6c:	4692      	mov	sl, r2
 8007f6e:	eb1b 0509 	adds.w	r5, fp, r9
 8007f72:	eb4c 060a 	adc.w	r6, ip, sl
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	f04f 0200 	mov.w	r2, #0
 8007f80:	f04f 0300 	mov.w	r3, #0
 8007f84:	f04f 0400 	mov.w	r4, #0
 8007f88:	0094      	lsls	r4, r2, #2
 8007f8a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f8e:	008b      	lsls	r3, r1, #2
 8007f90:	461a      	mov	r2, r3
 8007f92:	4623      	mov	r3, r4
 8007f94:	4628      	mov	r0, r5
 8007f96:	4631      	mov	r1, r6
 8007f98:	f7f8 fe8e 	bl	8000cb8 <__aeabi_uldivmod>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	4b32      	ldr	r3, [pc, #200]	; (800806c <UART_SetConfig+0x6f4>)
 8007fa4:	fba3 1302 	umull	r1, r3, r3, r2
 8007fa8:	095b      	lsrs	r3, r3, #5
 8007faa:	2164      	movs	r1, #100	; 0x64
 8007fac:	fb01 f303 	mul.w	r3, r1, r3
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	3332      	adds	r3, #50	; 0x32
 8007fb6:	4a2d      	ldr	r2, [pc, #180]	; (800806c <UART_SetConfig+0x6f4>)
 8007fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbc:	095b      	lsrs	r3, r3, #5
 8007fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fc2:	4498      	add	r8, r3
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	469b      	mov	fp, r3
 8007fc8:	f04f 0c00 	mov.w	ip, #0
 8007fcc:	46d9      	mov	r9, fp
 8007fce:	46e2      	mov	sl, ip
 8007fd0:	eb19 0309 	adds.w	r3, r9, r9
 8007fd4:	eb4a 040a 	adc.w	r4, sl, sl
 8007fd8:	4699      	mov	r9, r3
 8007fda:	46a2      	mov	sl, r4
 8007fdc:	eb19 090b 	adds.w	r9, r9, fp
 8007fe0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007fe4:	f04f 0100 	mov.w	r1, #0
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ff0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ff4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ff8:	4689      	mov	r9, r1
 8007ffa:	4692      	mov	sl, r2
 8007ffc:	eb1b 0509 	adds.w	r5, fp, r9
 8008000:	eb4c 060a 	adc.w	r6, ip, sl
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	4619      	mov	r1, r3
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	f04f 0300 	mov.w	r3, #0
 8008012:	f04f 0400 	mov.w	r4, #0
 8008016:	0094      	lsls	r4, r2, #2
 8008018:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800801c:	008b      	lsls	r3, r1, #2
 800801e:	461a      	mov	r2, r3
 8008020:	4623      	mov	r3, r4
 8008022:	4628      	mov	r0, r5
 8008024:	4631      	mov	r1, r6
 8008026:	f7f8 fe47 	bl	8000cb8 <__aeabi_uldivmod>
 800802a:	4603      	mov	r3, r0
 800802c:	460c      	mov	r4, r1
 800802e:	461a      	mov	r2, r3
 8008030:	4b0e      	ldr	r3, [pc, #56]	; (800806c <UART_SetConfig+0x6f4>)
 8008032:	fba3 1302 	umull	r1, r3, r3, r2
 8008036:	095b      	lsrs	r3, r3, #5
 8008038:	2164      	movs	r1, #100	; 0x64
 800803a:	fb01 f303 	mul.w	r3, r1, r3
 800803e:	1ad3      	subs	r3, r2, r3
 8008040:	011b      	lsls	r3, r3, #4
 8008042:	3332      	adds	r3, #50	; 0x32
 8008044:	4a09      	ldr	r2, [pc, #36]	; (800806c <UART_SetConfig+0x6f4>)
 8008046:	fba2 2303 	umull	r2, r3, r2, r3
 800804a:	095b      	lsrs	r3, r3, #5
 800804c:	f003 020f 	and.w	r2, r3, #15
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4442      	add	r2, r8
 8008056:	609a      	str	r2, [r3, #8]
}
 8008058:	e7ff      	b.n	800805a <UART_SetConfig+0x6e2>
 800805a:	bf00      	nop
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008064:	40011000 	.word	0x40011000
 8008068:	40011400 	.word	0x40011400
 800806c:	51eb851f 	.word	0x51eb851f

08008070 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8008070:	b480      	push	{r7}
 8008072:	b08b      	sub	sp, #44	; 0x2c
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	ed87 0a02 	vstr	s0, [r7, #8]
 800807c:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	461a      	mov	r2, r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	885b      	ldrh	r3, [r3, #2]
 8008094:	fb03 f302 	mul.w	r3, r3, r2
 8008098:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800809e:	e010      	b.n	80080c2 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	1d1a      	adds	r2, r3, #4
 80080a4:	627a      	str	r2, [r7, #36]	; 0x24
 80080a6:	ed93 7a00 	vldr	s14, [r3]
 80080aa:	6a3b      	ldr	r3, [r7, #32]
 80080ac:	1d1a      	adds	r2, r3, #4
 80080ae:	623a      	str	r2, [r7, #32]
 80080b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80080b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080b8:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	3b01      	subs	r3, #1
 80080c0:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d1eb      	bne.n	80080a0 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80080c8:	2300      	movs	r3, #0
 80080ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80080cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	372c      	adds	r7, #44	; 0x2c
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80080dc:	b480      	push	{r7}
 80080de:	b08b      	sub	sp, #44	; 0x2c
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	885b      	ldrh	r3, [r3, #2]
 80080fc:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 80080fe:	89fb      	ldrh	r3, [r7, #14]
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	4413      	add	r3, r2
 800810e:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8008110:	89bb      	ldrh	r3, [r7, #12]
 8008112:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8008114:	e00d      	b.n	8008132 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	1d1a      	adds	r2, r3, #4
 800811a:	627a      	str	r2, [r7, #36]	; 0x24
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8008122:	89fb      	ldrh	r3, [r7, #14]
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	6a3a      	ldr	r2, [r7, #32]
 8008128:	4413      	add	r3, r2
 800812a:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	3b01      	subs	r3, #1
 8008130:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1ee      	bne.n	8008116 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	3301      	adds	r3, #1
 800813c:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	3b01      	subs	r3, #1
 8008142:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1dd      	bne.n	8008106 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800814a:	2300      	movs	r3, #0
 800814c:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800814e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008152:	4618      	mov	r0, r3
 8008154:	372c      	adds	r7, #44	; 0x2c
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 800815e:	b480      	push	{r7}
 8008160:	b087      	sub	sp, #28
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 800816a:	f04f 0300 	mov.w	r3, #0
 800816e:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8008174:	e00d      	b.n	8008192 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	1d1a      	adds	r2, r3, #4
 800817a:	60fa      	str	r2, [r7, #12]
 800817c:	edd3 7a00 	vldr	s15, [r3]
 8008180:	ed97 7a04 	vldr	s14, [r7, #16]
 8008184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008188:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	3b01      	subs	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1ee      	bne.n	8008176 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80081a2:	edd7 6a04 	vldr	s13, [r7, #16]
 80081a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	edc3 7a00 	vstr	s15, [r3]
}
 80081b0:	bf00      	nop
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b08a      	sub	sp, #40	; 0x28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 80081c8:	f04f 0300 	mov.w	r3, #0
 80081cc:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 80081d2:	e013      	b.n	80081fc <arm_rms_f32+0x40>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	1d1a      	adds	r2, r3, #4
 80081d8:	60fa      	str	r2, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 80081de:	ed97 7a07 	vldr	s14, [r7, #28]
 80081e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80081e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80081ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081f2:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	3b01      	subs	r3, #1
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e8      	bne.n	80081d4 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	ee07 3a90 	vmov	s15, r3
 8008208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800820c:	edd7 6a08 	vldr	s13, [r7, #32]
 8008210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008214:	edc7 7a06 	vstr	s15, [r7, #24]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800821c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008220:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008228:	db09      	blt.n	800823e <arm_rms_f32+0x82>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800822a:	ed97 0a06 	vldr	s0, [r7, #24]
 800822e:	f00a fa33 	bl	8012698 <sqrtf>
 8008232:	eef0 7a40 	vmov.f32	s15, s0
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	edc3 7a00 	vstr	s15, [r3]
 800823c:	e003      	b.n	8008246 <arm_rms_f32+0x8a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	601a      	str	r2, [r3, #0]
}
 8008246:	bf00      	nop
 8008248:	3728      	adds	r7, #40	; 0x28
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800824e:	b480      	push	{r7}
 8008250:	b089      	sub	sp, #36	; 0x24
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	460b      	mov	r3, r1
 8008258:	607a      	str	r2, [r7, #4]
 800825a:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800825c:	2300      	movs	r3, #0
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	e043      	b.n	80082ea <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	005b      	lsls	r3, r3, #1
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	4413      	add	r3, r2
 800826a:	881b      	ldrh	r3, [r3, #0]
 800826c:	089b      	lsrs	r3, r3, #2
 800826e:	b29b      	uxth	r3, r3
 8008270:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	3301      	adds	r3, #1
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	4413      	add	r3, r2
 800827c:	881b      	ldrh	r3, [r3, #0]
 800827e:	089b      	lsrs	r3, r3, #2
 8008280:	b29b      	uxth	r3, r3
 8008282:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4413      	add	r3, r2
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	441a      	add	r2, r3
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	68f9      	ldr	r1, [r7, #12]
 800829e:	440b      	add	r3, r1
 80082a0:	6812      	ldr	r2, [r2, #0]
 80082a2:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	693a      	ldr	r2, [r7, #16]
 80082ae:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	3301      	adds	r3, #1
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4413      	add	r3, r2
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	3301      	adds	r3, #1
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	441a      	add	r2, r3
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	3301      	adds	r3, #1
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	440b      	add	r3, r1
 80082d2:	6812      	ldr	r2, [r2, #0]
 80082d4:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	3301      	adds	r3, #1
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4413      	add	r3, r2
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	601a      	str	r2, [r3, #0]

    i += 2;
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	3302      	adds	r3, #2
 80082e8:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 80082ea:	897b      	ldrh	r3, [r7, #10]
 80082ec:	69fa      	ldr	r2, [r7, #28]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d3b7      	bcc.n	8008262 <arm_bitreversal_32+0x14>
  }
}
 80082f2:	bf00      	nop
 80082f4:	3724      	adds	r7, #36	; 0x24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b0a0      	sub	sp, #128	; 0x80
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800830e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	4413      	add	r3, r2
 8008316:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8008322:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008324:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8008326:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008328:	085b      	lsrs	r3, r3, #1
 800832a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800832c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	4413      	add	r3, r2
 8008334:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8008336:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800833c:	4413      	add	r3, r2
 800833e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8008340:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008342:	089b      	lsrs	r3, r3, #2
 8008344:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008346:	e1b6      	b.n	80086b6 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	68db      	ldr	r3, [r3, #12]
 800835e:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8008360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8008366:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008368:	685b      	ldr	r3, [r3, #4]
 800836a:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800836c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8008372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8008378:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800837e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8008384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800838a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800838c:	68db      	ldr	r3, [r3, #12]
 800838e:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8008390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8008396:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800839c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 80083a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 80083a8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80083ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	1d1a      	adds	r2, r3, #4
 80083b4:	603a      	str	r2, [r7, #0]
 80083b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083ba:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 80083be:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80083c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	1d1a      	adds	r2, r3, #4
 80083ca:	603a      	str	r2, [r7, #0]
 80083cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083d0:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 80083d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80083d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	1d1a      	adds	r2, r3, #4
 80083e0:	603a      	str	r2, [r7, #0]
 80083e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083e6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80083ea:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80083ee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	1d1a      	adds	r2, r3, #4
 80083f6:	603a      	str	r2, [r7, #0]
 80083f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083fc:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8008400:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008404:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800840c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8008410:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008414:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800841c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8008420:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008424:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800842c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8008430:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8008434:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800843c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8008440:	ed97 7a06 	vldr	s14, [r7, #24]
 8008444:	edd7 7a02 	vldr	s15, [r7, #8]
 8008448:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800844a:	1d1a      	adds	r2, r3, #4
 800844c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800844e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008452:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8008456:	ed97 7a07 	vldr	s14, [r7, #28]
 800845a:	edd7 7a03 	vldr	s15, [r7, #12]
 800845e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008468:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800846c:	ed97 7a08 	vldr	s14, [r7, #32]
 8008470:	edd7 7a04 	vldr	s15, [r7, #16]
 8008474:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008476:	1d1a      	adds	r2, r3, #4
 8008478:	67fa      	str	r2, [r7, #124]	; 0x7c
 800847a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800847e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8008482:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008486:	edd7 7a05 	vldr	s15, [r7, #20]
 800848a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800848c:	1d1a      	adds	r2, r3, #4
 800848e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008494:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 8008498:	ed97 7a02 	vldr	s14, [r7, #8]
 800849c:	edd7 7a06 	vldr	s15, [r7, #24]
 80084a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084a4:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80084a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80084ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80084b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084b4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 80084b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80084bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80084c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084c4:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 80084c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80084cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80084d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084d4:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80084d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084da:	1d1a      	adds	r2, r3, #4
 80084dc:	673a      	str	r2, [r7, #112]	; 0x70
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80084e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80084e4:	1d1a      	adds	r2, r3, #4
 80084e6:	673a      	str	r2, [r7, #112]	; 0x70
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 80084ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084f0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80084f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 80084fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008500:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008508:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800850c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008510:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008518:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800851c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008520:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008528:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800852c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800852e:	1d1a      	adds	r2, r3, #4
 8008530:	677a      	str	r2, [r7, #116]	; 0x74
 8008532:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008536:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800853a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800853e:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8008542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008544:	1d1a      	adds	r2, r3, #4
 8008546:	677a      	str	r2, [r7, #116]	; 0x74
 8008548:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800854c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8008550:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008554:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 8008558:	edd7 7a02 	vldr	s15, [r7, #8]
 800855c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008564:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 8008568:	edd7 7a03 	vldr	s15, [r7, #12]
 800856c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008574:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 8008578:	edd7 7a03 	vldr	s15, [r7, #12]
 800857c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008584:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 8008588:	edd7 7a02 	vldr	s15, [r7, #8]
 800858c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008594:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8008598:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800859a:	1d1a      	adds	r2, r3, #4
 800859c:	67ba      	str	r2, [r7, #120]	; 0x78
 800859e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80085a2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80085a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80085aa:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80085ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085b0:	1d1a      	adds	r2, r3, #4
 80085b2:	67ba      	str	r2, [r7, #120]	; 0x78
 80085b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80085b8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80085bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80085c0:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 80085c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085c6:	1d1a      	adds	r2, r3, #4
 80085c8:	673a      	str	r2, [r7, #112]	; 0x70
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 80085ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085d0:	1d1a      	adds	r2, r3, #4
 80085d2:	673a      	str	r2, [r7, #112]	; 0x70
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 80085d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80085dc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80085e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 80085e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80085ec:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80085f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 80085f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80085fc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008604:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8008608:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800860c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008614:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8008618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800861a:	1d1a      	adds	r2, r3, #4
 800861c:	677a      	str	r2, [r7, #116]	; 0x74
 800861e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008622:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800862a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800862e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008630:	1d1a      	adds	r2, r3, #4
 8008632:	677a      	str	r2, [r7, #116]	; 0x74
 8008634:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008638:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800863c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008640:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8008644:	edd7 7a04 	vldr	s15, [r7, #16]
 8008648:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800864c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008650:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 8008654:	edd7 7a05 	vldr	s15, [r7, #20]
 8008658:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800865c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008660:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 8008664:	edd7 7a05 	vldr	s15, [r7, #20]
 8008668:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800866c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008670:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8008674:	edd7 7a04 	vldr	s15, [r7, #16]
 8008678:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800867c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008680:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8008684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008686:	1d1a      	adds	r2, r3, #4
 8008688:	67ba      	str	r2, [r7, #120]	; 0x78
 800868a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800868e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8008692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008696:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800869a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	67ba      	str	r2, [r7, #120]	; 0x78
 80086a0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80086a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80086a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80086ac:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80086b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b2:	3b01      	subs	r3, #1
 80086b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f47f ae45 	bne.w	8008348 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80086be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086c0:	b299      	uxth	r1, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	2302      	movs	r3, #2
 80086c8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80086ca:	f000 ff9f 	bl	800960c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80086ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086d0:	b299      	uxth	r1, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	2302      	movs	r3, #2
 80086d8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80086da:	f000 ff97 	bl	800960c <arm_radix8_butterfly_f32>
}
 80086de:	bf00      	nop
 80086e0:	3780      	adds	r7, #128	; 0x80
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b0ac      	sub	sp, #176	; 0xb0
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
 80086ee:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	881b      	ldrh	r3, [r3, #0]
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80086fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	4413      	add	r3, r2
 8008706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800870a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008714:	4413      	add	r3, r2
 8008716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800871a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008724:	4413      	add	r3, r2
 8008726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800872e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008732:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 8008734:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008738:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800873a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800873e:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8008740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008744:	3b04      	subs	r3, #4
 8008746:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800874a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800874e:	3b04      	subs	r3, #4
 8008750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8008754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008758:	3b04      	subs	r3, #4
 800875a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800875e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008768:	4413      	add	r3, r2
 800876a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008776:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800877a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800877e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008782:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8008786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800878a:	085b      	lsrs	r3, r3, #1
 800878c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8008790:	2302      	movs	r3, #2
 8008792:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8008794:	2304      	movs	r3, #4
 8008796:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8008798:	2306      	movs	r3, #6
 800879a:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	ed93 7a00 	vldr	s14, [r3]
 80087a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087a6:	edd3 7a00 	vldr	s15, [r3]
 80087aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087ae:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	ed93 7a00 	vldr	s14, [r3]
 80087b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087bc:	edd3 7a00 	vldr	s15, [r3]
 80087c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087c4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	3304      	adds	r3, #4
 80087cc:	ed93 7a00 	vldr	s14, [r3]
 80087d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087d4:	3304      	adds	r3, #4
 80087d6:	edd3 7a00 	vldr	s15, [r3]
 80087da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80087de:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	3304      	adds	r3, #4
 80087e6:	ed93 7a00 	vldr	s14, [r3]
 80087ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80087ee:	3304      	adds	r3, #4
 80087f0:	edd3 7a00 	vldr	s15, [r3]
 80087f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087f8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80087fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008800:	3304      	adds	r3, #4
 8008802:	ed93 7a00 	vldr	s14, [r3]
 8008806:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800880a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800880e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008812:	3304      	adds	r3, #4
 8008814:	edd3 7a00 	vldr	s15, [r3]
 8008818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800881c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8008820:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008824:	edd3 7a00 	vldr	s15, [r3]
 8008828:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800882c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008834:	edd3 7a00 	vldr	s15, [r3]
 8008838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800883c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8008840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008844:	edd3 7a00 	vldr	s15, [r3]
 8008848:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800884c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008850:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008854:	edd3 7a00 	vldr	s15, [r3]
 8008858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800885c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008864:	3304      	adds	r3, #4
 8008866:	edd3 7a00 	vldr	s15, [r3]
 800886a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800886e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008872:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008876:	3304      	adds	r3, #4
 8008878:	edd3 7a00 	vldr	s15, [r3]
 800887c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008880:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8008884:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008888:	3304      	adds	r3, #4
 800888a:	edd3 7a00 	vldr	s15, [r3]
 800888e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008892:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008896:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800889a:	3304      	adds	r3, #4
 800889c:	edd3 7a00 	vldr	s15, [r3]
 80088a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088a4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80088a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088ac:	ed93 7a00 	vldr	s14, [r3]
 80088b0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80088b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088bc:	edd3 7a00 	vldr	s15, [r3]
 80088c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088c4:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80088c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088cc:	ed93 7a00 	vldr	s14, [r3]
 80088d0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80088d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80088dc:	edd3 7a00 	vldr	s15, [r3]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	1d1a      	adds	r2, r3, #4
 80088e4:	603a      	str	r2, [r7, #0]
 80088e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088ea:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80088ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80088f2:	3304      	adds	r3, #4
 80088f4:	ed93 7a00 	vldr	s14, [r3]
 80088f8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80088fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008900:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008904:	3304      	adds	r3, #4
 8008906:	edd3 7a00 	vldr	s15, [r3]
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	1d1a      	adds	r2, r3, #4
 800890e:	603a      	str	r2, [r7, #0]
 8008910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008914:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8008918:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008924:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8008926:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800892a:	1d1a      	adds	r2, r3, #4
 800892c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008932:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8008934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008938:	1d1a      	adds	r2, r3, #4
 800893a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8008942:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008946:	1d1a      	adds	r2, r3, #4
 8008948:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800894c:	6a3a      	ldr	r2, [r7, #32]
 800894e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8008950:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008954:	1d1a      	adds	r2, r3, #4
 8008956:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800895e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008962:	1d1a      	adds	r2, r3, #4
 8008964:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800896c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800896e:	009b      	lsls	r3, r3, #2
 8008970:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8008974:	4413      	add	r3, r2
 8008976:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800897a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008982:	4413      	add	r3, r2
 8008984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8008988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008990:	4413      	add	r3, r2
 8008992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8008996:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800899a:	3b02      	subs	r3, #2
 800899c:	085b      	lsrs	r3, r3, #1
 800899e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089a2:	e31a      	b.n	8008fda <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	ed93 7a00 	vldr	s14, [r3]
 80089aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089ae:	edd3 7a00 	vldr	s15, [r3]
 80089b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089b6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	ed93 7a00 	vldr	s14, [r3]
 80089c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089c4:	edd3 7a00 	vldr	s15, [r3]
 80089c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80089cc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	3304      	adds	r3, #4
 80089d4:	ed93 7a00 	vldr	s14, [r3]
 80089d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089dc:	3304      	adds	r3, #4
 80089de:	edd3 7a00 	vldr	s15, [r3]
 80089e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80089e6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	3304      	adds	r3, #4
 80089ee:	ed93 7a00 	vldr	s14, [r3]
 80089f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80089f6:	3304      	adds	r3, #4
 80089f8:	edd3 7a00 	vldr	s15, [r3]
 80089fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a00:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8008a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a08:	3304      	adds	r3, #4
 8008a0a:	ed93 7a00 	vldr	s14, [r3]
 8008a0e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a16:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	edd3 7a00 	vldr	s15, [r3]
 8008a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a24:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8008a28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a2c:	edd3 7a00 	vldr	s15, [r3]
 8008a30:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8008a34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a3c:	edd3 7a00 	vldr	s15, [r3]
 8008a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008a44:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8008a48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a4c:	edd3 7a00 	vldr	s15, [r3]
 8008a50:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008a54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a5c:	edd3 7a00 	vldr	s15, [r3]
 8008a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a64:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8008a68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	edd3 7a00 	vldr	s15, [r3]
 8008a72:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008a76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a7e:	3304      	adds	r3, #4
 8008a80:	edd3 7a00 	vldr	s15, [r3]
 8008a84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a88:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8008a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a90:	3304      	adds	r3, #4
 8008a92:	edd3 7a00 	vldr	s15, [r3]
 8008a96:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8008a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008a9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	edd3 7a00 	vldr	s15, [r3]
 8008aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008aac:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8008ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ab4:	ed93 7a00 	vldr	s14, [r3]
 8008ab8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ac4:	edd3 7a00 	vldr	s15, [r3]
 8008ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008acc:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8008ad0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ad4:	ed93 7a00 	vldr	s14, [r3]
 8008ad8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008ae4:	edd3 7a00 	vldr	s15, [r3]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	1d1a      	adds	r2, r3, #4
 8008aec:	603a      	str	r2, [r7, #0]
 8008aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008af2:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8008af6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008afa:	3304      	adds	r3, #4
 8008afc:	ed93 7a00 	vldr	s14, [r3]
 8008b00:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008b04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b0c:	3304      	adds	r3, #4
 8008b0e:	edd3 7a00 	vldr	s15, [r3]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	1d1a      	adds	r2, r3, #4
 8008b16:	603a      	str	r2, [r7, #0]
 8008b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b1c:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8008b20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b24:	3b04      	subs	r3, #4
 8008b26:	ed93 7a00 	vldr	s14, [r3]
 8008b2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b2e:	3b04      	subs	r3, #4
 8008b30:	edd3 7a00 	vldr	s15, [r3]
 8008b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b38:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8008b3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b40:	3b04      	subs	r3, #4
 8008b42:	ed93 7a00 	vldr	s14, [r3]
 8008b46:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b4a:	3b04      	subs	r3, #4
 8008b4c:	edd3 7a00 	vldr	s15, [r3]
 8008b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b54:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8008b58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b5c:	ed93 7a00 	vldr	s14, [r3]
 8008b60:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b64:	edd3 7a00 	vldr	s15, [r3]
 8008b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b6c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8008b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b74:	ed93 7a00 	vldr	s14, [r3]
 8008b78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b7c:	edd3 7a00 	vldr	s15, [r3]
 8008b80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b84:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8008b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008b8c:	ed93 7a00 	vldr	s14, [r3]
 8008b90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b94:	edd3 7a00 	vldr	s15, [r3]
 8008b98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008b9c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ba4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8008ba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008bac:	ed93 7a00 	vldr	s14, [r3]
 8008bb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008bb4:	edd3 7a00 	vldr	s15, [r3]
 8008bb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008bc0:	3b04      	subs	r3, #4
 8008bc2:	edd3 7a00 	vldr	s15, [r3]
 8008bc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bce:	3b04      	subs	r3, #4
 8008bd0:	edd3 7a00 	vldr	s15, [r3]
 8008bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008bd8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8008bdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008be0:	3b04      	subs	r3, #4
 8008be2:	edd3 7a00 	vldr	s15, [r3]
 8008be6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8008bea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008bf2:	3b04      	subs	r3, #4
 8008bf4:	edd3 7a00 	vldr	s15, [r3]
 8008bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bfc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8008c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c04:	edd3 7a00 	vldr	s15, [r3]
 8008c08:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8008c0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c14:	edd3 7a00 	vldr	s15, [r3]
 8008c18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c1c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8008c20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c24:	ed93 7a00 	vldr	s14, [r3]
 8008c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c2c:	edd3 7a00 	vldr	s15, [r3]
 8008c30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c34:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8008c38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c3c:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8008c40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c44:	3b04      	subs	r3, #4
 8008c46:	ed93 7a00 	vldr	s14, [r3]
 8008c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c4e:	3b04      	subs	r3, #4
 8008c50:	edd3 7a00 	vldr	s15, [r3]
 8008c54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c58:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8008c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c60:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8008c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c68:	ed93 7a00 	vldr	s14, [r3]
 8008c6c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8008c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c78:	edd3 7a00 	vldr	s15, [r3]
 8008c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c80:	1f1a      	subs	r2, r3, #4
 8008c82:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008c86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c8a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8008c8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c92:	3b04      	subs	r3, #4
 8008c94:	ed93 7a00 	vldr	s14, [r3]
 8008c98:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8008c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ca0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ca4:	3b04      	subs	r3, #4
 8008ca6:	edd3 7a00 	vldr	s15, [r3]
 8008caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cae:	1f1a      	subs	r2, r3, #4
 8008cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cb8:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8008cbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cc0:	1d1a      	adds	r2, r3, #4
 8008cc2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8008cca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8008cd8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008cdc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ce4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8008ce8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008cec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cf4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8008cf8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008cfc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d04:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8008d08:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008d0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d14:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8008d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d1c:	1d1a      	adds	r2, r3, #4
 8008d1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008d22:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008d26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d2e:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8008d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d36:	1d1a      	adds	r2, r3, #4
 8008d38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008d3c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008d40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008d44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008d48:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8008d4c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008d50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d58:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8008d5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008d60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d68:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8008d6c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8008d70:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d78:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 8008d7c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8008d80:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 8008d8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d90:	1f1a      	subs	r2, r3, #4
 8008d92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d96:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008d9a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008da2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8008da6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008daa:	1f1a      	subs	r2, r3, #4
 8008dac:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008db0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008db4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008db8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dbc:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8008dc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8008dc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8008dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008dd8:	4413      	add	r3, r2
 8008dda:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8008dde:	edd7 7a07 	vldr	s15, [r7, #28]
 8008de2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8008dee:	edd7 7a08 	vldr	s15, [r7, #32]
 8008df2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dfa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8008dfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8008e02:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8008e0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e12:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8008e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e22:	1d1a      	adds	r2, r3, #4
 8008e24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e28:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008e2c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e34:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8008e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e3c:	1d1a      	adds	r2, r3, #4
 8008e3e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e42:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008e46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e4e:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8008e52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008e56:	eef1 7a67 	vneg.f32	s15, s15
 8008e5a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e62:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8008e66:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e6a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e72:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8008e76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e7a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e82:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8008e86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008e8a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e92:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8008e96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008e9a:	1f1a      	subs	r2, r3, #4
 8008e9c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008ea0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008ea4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008eac:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8008eb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008eb4:	1f1a      	subs	r2, r3, #4
 8008eb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008eba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8008ebe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8008ec2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ec6:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8008eca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8008ed2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8008eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008edc:	009b      	lsls	r3, r3, #2
 8008ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8008ee8:	edd7 7a03 	vldr	s15, [r7, #12]
 8008eec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ef4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8008ef8:	edd7 7a04 	vldr	s15, [r7, #16]
 8008efc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f04:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8008f08:	edd7 7a04 	vldr	s15, [r7, #16]
 8008f0c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f14:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8008f18:	edd7 7a03 	vldr	s15, [r7, #12]
 8008f1c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f24:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8008f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f2c:	1d1a      	adds	r2, r3, #4
 8008f2e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008f32:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008f36:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008f3e:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8008f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f46:	1d1a      	adds	r2, r3, #4
 8008f48:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008f4c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008f50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f58:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8008f5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f60:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f68:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8008f6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f78:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8008f7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f80:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8008f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f88:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8008f8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008f90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8008f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f98:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8008f9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fa0:	1f1a      	subs	r2, r3, #4
 8008fa2:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008fa6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8008faa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8008fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008fb2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8008fb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008fba:	1f1a      	subs	r2, r3, #4
 8008fbc:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8008fc0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8008fc4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008fc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fcc:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8008fd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	f47f ace0 	bne.w	80089a4 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	ed93 7a00 	vldr	s14, [r3]
 8008fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fee:	edd3 7a00 	vldr	s15, [r3]
 8008ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ff6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	ed93 7a00 	vldr	s14, [r3]
 8009000:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009004:	edd3 7a00 	vldr	s15, [r3]
 8009008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800900c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	3304      	adds	r3, #4
 8009014:	ed93 7a00 	vldr	s14, [r3]
 8009018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800901c:	3304      	adds	r3, #4
 800901e:	edd3 7a00 	vldr	s15, [r3]
 8009022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009026:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	3304      	adds	r3, #4
 800902e:	ed93 7a00 	vldr	s14, [r3]
 8009032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009036:	3304      	adds	r3, #4
 8009038:	edd3 7a00 	vldr	s15, [r3]
 800903c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009040:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009044:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009048:	3304      	adds	r3, #4
 800904a:	ed93 7a00 	vldr	s14, [r3]
 800904e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009052:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009056:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800905a:	3304      	adds	r3, #4
 800905c:	edd3 7a00 	vldr	s15, [r3]
 8009060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009064:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800906c:	edd3 7a00 	vldr	s15, [r3]
 8009070:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009074:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009078:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800907c:	edd3 7a00 	vldr	s15, [r3]
 8009080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009084:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800908c:	edd3 7a00 	vldr	s15, [r3]
 8009090:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009094:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800909c:	edd3 7a00 	vldr	s15, [r3]
 80090a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090a4:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80090a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090ac:	3304      	adds	r3, #4
 80090ae:	edd3 7a00 	vldr	s15, [r3]
 80090b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80090b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090be:	3304      	adds	r3, #4
 80090c0:	edd3 7a00 	vldr	s15, [r3]
 80090c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090c8:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80090cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090d0:	3304      	adds	r3, #4
 80090d2:	edd3 7a00 	vldr	s15, [r3]
 80090d6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80090da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090e2:	3304      	adds	r3, #4
 80090e4:	edd3 7a00 	vldr	s15, [r3]
 80090e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090ec:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80090f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80090f4:	ed93 7a00 	vldr	s14, [r3]
 80090f8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80090fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009100:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009104:	edd3 7a00 	vldr	s15, [r3]
 8009108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800910c:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009110:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009114:	ed93 7a00 	vldr	s14, [r3]
 8009118:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800911c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009120:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009124:	edd3 7a00 	vldr	s15, [r3]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	1d1a      	adds	r2, r3, #4
 800912c:	603a      	str	r2, [r7, #0]
 800912e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009132:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009136:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800913a:	3304      	adds	r3, #4
 800913c:	ed93 7a00 	vldr	s14, [r3]
 8009140:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009144:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800914c:	3304      	adds	r3, #4
 800914e:	edd3 7a00 	vldr	s15, [r3]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	1d1a      	adds	r2, r3, #4
 8009156:	603a      	str	r2, [r7, #0]
 8009158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800915c:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8009160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8009168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8009170:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009174:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800917c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8009180:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009184:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8009190:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009194:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 80091a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80091a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80091a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 80091b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091b4:	1d1a      	adds	r2, r3, #4
 80091b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80091ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80091be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80091c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091c6:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80091ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091ce:	1d1a      	adds	r2, r3, #4
 80091d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80091d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80091d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80091dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091e0:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 80091e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80091ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80091f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80091f8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80091fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009200:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8009204:	edd7 7a08 	vldr	s15, [r7, #32]
 8009208:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800920c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009210:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8009214:	edd7 7a08 	vldr	s15, [r7, #32]
 8009218:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800921c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009220:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8009224:	edd7 7a07 	vldr	s15, [r7, #28]
 8009228:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800922c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009230:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8009234:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009238:	1d1a      	adds	r2, r3, #4
 800923a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800923e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009242:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800924a:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800924e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009252:	1d1a      	adds	r2, r3, #4
 8009254:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009258:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800925c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009264:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8009268:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8009270:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8009278:	edd7 7a03 	vldr	s15, [r7, #12]
 800927c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009280:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009284:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8009288:	edd7 7a04 	vldr	s15, [r7, #16]
 800928c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009294:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8009298:	edd7 7a04 	vldr	s15, [r7, #16]
 800929c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80092a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 80092a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80092ac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80092b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 80092b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092bc:	1d1a      	adds	r2, r3, #4
 80092be:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80092c2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80092c6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80092ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092ce:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80092d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092d6:	1d1a      	adds	r2, r3, #4
 80092d8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80092dc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80092e0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80092e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e8:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 80092ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80092f0:	b299      	uxth	r1, r3
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	2304      	movs	r3, #4
 80092f8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80092fa:	f000 f987 	bl	800960c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 80092fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009302:	b299      	uxth	r1, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	2304      	movs	r3, #4
 800930a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800930c:	f000 f97e 	bl	800960c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8009310:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009314:	b299      	uxth	r1, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685a      	ldr	r2, [r3, #4]
 800931a:	2304      	movs	r3, #4
 800931c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800931e:	f000 f975 	bl	800960c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8009322:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009326:	b299      	uxth	r1, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	2304      	movs	r3, #4
 800932e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009330:	f000 f96c 	bl	800960c <arm_radix8_butterfly_f32>
}
 8009334:	bf00      	nop
 8009336:	37b0      	adds	r7, #176	; 0xb0
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b088      	sub	sp, #32
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	4611      	mov	r1, r2
 8009348:	461a      	mov	r2, r3
 800934a:	460b      	mov	r3, r1
 800934c:	71fb      	strb	r3, [r7, #7]
 800934e:	4613      	mov	r3, r2
 8009350:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	881b      	ldrh	r3, [r3, #0]
 8009356:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8009358:	79fb      	ldrb	r3, [r7, #7]
 800935a:	2b01      	cmp	r3, #1
 800935c:	d117      	bne.n	800938e <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	3304      	adds	r3, #4
 8009362:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8009364:	2300      	movs	r3, #0
 8009366:	61fb      	str	r3, [r7, #28]
 8009368:	e00d      	b.n	8009386 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	edd3 7a00 	vldr	s15, [r3]
 8009370:	eef1 7a67 	vneg.f32	s15, s15
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	3308      	adds	r3, #8
 800937e:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	3301      	adds	r3, #1
 8009384:	61fb      	str	r3, [r7, #28]
 8009386:	69fa      	ldr	r2, [r7, #28]
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	429a      	cmp	r2, r3
 800938c:	d3ed      	bcc.n	800936a <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009394:	d024      	beq.n	80093e0 <arm_cfft_f32+0xa4>
 8009396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800939a:	d80b      	bhi.n	80093b4 <arm_cfft_f32+0x78>
 800939c:	2b20      	cmp	r3, #32
 800939e:	d01f      	beq.n	80093e0 <arm_cfft_f32+0xa4>
 80093a0:	2b20      	cmp	r3, #32
 80093a2:	d802      	bhi.n	80093aa <arm_cfft_f32+0x6e>
 80093a4:	2b10      	cmp	r3, #16
 80093a6:	d016      	beq.n	80093d6 <arm_cfft_f32+0x9a>
 80093a8:	e028      	b.n	80093fc <arm_cfft_f32+0xc0>
 80093aa:	2b40      	cmp	r3, #64	; 0x40
 80093ac:	d01d      	beq.n	80093ea <arm_cfft_f32+0xae>
 80093ae:	2b80      	cmp	r3, #128	; 0x80
 80093b0:	d011      	beq.n	80093d6 <arm_cfft_f32+0x9a>
 80093b2:	e023      	b.n	80093fc <arm_cfft_f32+0xc0>
 80093b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093b8:	d00d      	beq.n	80093d6 <arm_cfft_f32+0x9a>
 80093ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093be:	d803      	bhi.n	80093c8 <arm_cfft_f32+0x8c>
 80093c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093c4:	d011      	beq.n	80093ea <arm_cfft_f32+0xae>
 80093c6:	e019      	b.n	80093fc <arm_cfft_f32+0xc0>
 80093c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093cc:	d008      	beq.n	80093e0 <arm_cfft_f32+0xa4>
 80093ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093d2:	d00a      	beq.n	80093ea <arm_cfft_f32+0xae>
 80093d4:	e012      	b.n	80093fc <arm_cfft_f32+0xc0>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80093d6:	68b9      	ldr	r1, [r7, #8]
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f7fe ff90 	bl	80082fe <arm_cfft_radix8by2_f32>
    break;
 80093de:	e00d      	b.n	80093fc <arm_cfft_f32+0xc0>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80093e0:	68b9      	ldr	r1, [r7, #8]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f7ff f97f 	bl	80086e6 <arm_cfft_radix8by4_f32>
    break;
 80093e8:	e008      	b.n	80093fc <arm_cfft_f32+0xc0>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	b299      	uxth	r1, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	2301      	movs	r3, #1
 80093f4:	68b8      	ldr	r0, [r7, #8]
 80093f6:	f000 f909 	bl	800960c <arm_radix8_butterfly_f32>
    break;
 80093fa:	bf00      	nop
  }

  if ( bitReverseFlag )
 80093fc:	79bb      	ldrb	r3, [r7, #6]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d007      	beq.n	8009412 <arm_cfft_f32+0xd6>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8999      	ldrh	r1, [r3, #12]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	461a      	mov	r2, r3
 800940c:	68b8      	ldr	r0, [r7, #8]
 800940e:	f7fe ff1e 	bl	800824e <arm_bitreversal_32>

  if (ifftFlag == 1U)
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d130      	bne.n	800947a <arm_cfft_f32+0x13e>
  {
    invL = 1.0f / (float32_t)L;
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	ee07 3a90 	vmov	s15, r3
 800941e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009422:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800942a:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 8009432:	2300      	movs	r3, #0
 8009434:	61fb      	str	r3, [r7, #28]
 8009436:	e01c      	b.n	8009472 <arm_cfft_f32+0x136>
    {
      *pSrc++ *=   invL ;
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	1d1a      	adds	r2, r3, #4
 800943c:	61ba      	str	r2, [r7, #24]
 800943e:	ed93 7a00 	vldr	s14, [r3]
 8009442:	edd7 7a04 	vldr	s15, [r7, #16]
 8009446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800944a:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	edd3 7a00 	vldr	s15, [r3]
 8009454:	eeb1 7a67 	vneg.f32	s14, s15
 8009458:	edd7 7a04 	vldr	s15, [r7, #16]
 800945c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	3304      	adds	r3, #4
 800946a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	3301      	adds	r3, #1
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	69fa      	ldr	r2, [r7, #28]
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	429a      	cmp	r2, r3
 8009478:	d3de      	bcc.n	8009438 <arm_cfft_f32+0xfc>
    }
  }
}
 800947a:	bf00      	nop
 800947c:	3720      	adds	r7, #32
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
	...

08009484 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 8009484:	b480      	push	{r7}
 8009486:	b085      	sub	sp, #20
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	460b      	mov	r3, r1
 800948e:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8009490:	2300      	movs	r3, #0
 8009492:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	887a      	ldrh	r2, [r7, #2]
 8009498:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094a8:	d052      	beq.n	8009550 <arm_cfft_init_f32+0xcc>
 80094aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ae:	dc0b      	bgt.n	80094c8 <arm_cfft_init_f32+0x44>
 80094b0:	2b20      	cmp	r3, #32
 80094b2:	d074      	beq.n	800959e <arm_cfft_init_f32+0x11a>
 80094b4:	2b20      	cmp	r3, #32
 80094b6:	dc02      	bgt.n	80094be <arm_cfft_init_f32+0x3a>
 80094b8:	2b10      	cmp	r3, #16
 80094ba:	d07d      	beq.n	80095b8 <arm_cfft_init_f32+0x134>
 80094bc:	e089      	b.n	80095d2 <arm_cfft_init_f32+0x14e>
 80094be:	2b40      	cmp	r3, #64	; 0x40
 80094c0:	d060      	beq.n	8009584 <arm_cfft_init_f32+0x100>
 80094c2:	2b80      	cmp	r3, #128	; 0x80
 80094c4:	d051      	beq.n	800956a <arm_cfft_init_f32+0xe6>
 80094c6:	e084      	b.n	80095d2 <arm_cfft_init_f32+0x14e>
 80094c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094cc:	d026      	beq.n	800951c <arm_cfft_init_f32+0x98>
 80094ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d2:	dc03      	bgt.n	80094dc <arm_cfft_init_f32+0x58>
 80094d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094d8:	d02d      	beq.n	8009536 <arm_cfft_init_f32+0xb2>
 80094da:	e07a      	b.n	80095d2 <arm_cfft_init_f32+0x14e>
 80094dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094e0:	d00f      	beq.n	8009502 <arm_cfft_init_f32+0x7e>
 80094e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094e6:	d174      	bne.n	80095d2 <arm_cfft_init_f32+0x14e>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 80094e8:	4b3f      	ldr	r3, [pc, #252]	; (80095e8 <arm_cfft_init_f32+0x164>)
 80094ea:	899a      	ldrh	r2, [r3, #12]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	819a      	strh	r2, [r3, #12]
 80094f0:	4b3d      	ldr	r3, [pc, #244]	; (80095e8 <arm_cfft_init_f32+0x164>)
 80094f2:	689a      	ldr	r2, [r3, #8]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	609a      	str	r2, [r3, #8]
 80094f8:	4b3b      	ldr	r3, [pc, #236]	; (80095e8 <arm_cfft_init_f32+0x164>)
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	605a      	str	r2, [r3, #4]
            break;
 8009500:	e06a      	b.n	80095d8 <arm_cfft_init_f32+0x154>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 8009502:	4b3a      	ldr	r3, [pc, #232]	; (80095ec <arm_cfft_init_f32+0x168>)
 8009504:	899a      	ldrh	r2, [r3, #12]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	819a      	strh	r2, [r3, #12]
 800950a:	4b38      	ldr	r3, [pc, #224]	; (80095ec <arm_cfft_init_f32+0x168>)
 800950c:	689a      	ldr	r2, [r3, #8]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	609a      	str	r2, [r3, #8]
 8009512:	4b36      	ldr	r3, [pc, #216]	; (80095ec <arm_cfft_init_f32+0x168>)
 8009514:	685a      	ldr	r2, [r3, #4]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	605a      	str	r2, [r3, #4]

            break;
 800951a:	e05d      	b.n	80095d8 <arm_cfft_init_f32+0x154>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 800951c:	4b34      	ldr	r3, [pc, #208]	; (80095f0 <arm_cfft_init_f32+0x16c>)
 800951e:	899a      	ldrh	r2, [r3, #12]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	819a      	strh	r2, [r3, #12]
 8009524:	4b32      	ldr	r3, [pc, #200]	; (80095f0 <arm_cfft_init_f32+0x16c>)
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	609a      	str	r2, [r3, #8]
 800952c:	4b30      	ldr	r3, [pc, #192]	; (80095f0 <arm_cfft_init_f32+0x16c>)
 800952e:	685a      	ldr	r2, [r3, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	605a      	str	r2, [r3, #4]

            break;
 8009534:	e050      	b.n	80095d8 <arm_cfft_init_f32+0x154>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 8009536:	4b2f      	ldr	r3, [pc, #188]	; (80095f4 <arm_cfft_init_f32+0x170>)
 8009538:	899a      	ldrh	r2, [r3, #12]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	819a      	strh	r2, [r3, #12]
 800953e:	4b2d      	ldr	r3, [pc, #180]	; (80095f4 <arm_cfft_init_f32+0x170>)
 8009540:	689a      	ldr	r2, [r3, #8]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	609a      	str	r2, [r3, #8]
 8009546:	4b2b      	ldr	r3, [pc, #172]	; (80095f4 <arm_cfft_init_f32+0x170>)
 8009548:	685a      	ldr	r2, [r3, #4]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	605a      	str	r2, [r3, #4]
            break;
 800954e:	e043      	b.n	80095d8 <arm_cfft_init_f32+0x154>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 8009550:	4b29      	ldr	r3, [pc, #164]	; (80095f8 <arm_cfft_init_f32+0x174>)
 8009552:	899a      	ldrh	r2, [r3, #12]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	819a      	strh	r2, [r3, #12]
 8009558:	4b27      	ldr	r3, [pc, #156]	; (80095f8 <arm_cfft_init_f32+0x174>)
 800955a:	689a      	ldr	r2, [r3, #8]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	609a      	str	r2, [r3, #8]
 8009560:	4b25      	ldr	r3, [pc, #148]	; (80095f8 <arm_cfft_init_f32+0x174>)
 8009562:	685a      	ldr	r2, [r3, #4]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	605a      	str	r2, [r3, #4]
            break;
 8009568:	e036      	b.n	80095d8 <arm_cfft_init_f32+0x154>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800956a:	4b24      	ldr	r3, [pc, #144]	; (80095fc <arm_cfft_init_f32+0x178>)
 800956c:	899a      	ldrh	r2, [r3, #12]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	819a      	strh	r2, [r3, #12]
 8009572:	4b22      	ldr	r3, [pc, #136]	; (80095fc <arm_cfft_init_f32+0x178>)
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	609a      	str	r2, [r3, #8]
 800957a:	4b20      	ldr	r3, [pc, #128]	; (80095fc <arm_cfft_init_f32+0x178>)
 800957c:	685a      	ldr	r2, [r3, #4]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	605a      	str	r2, [r3, #4]
            break;
 8009582:	e029      	b.n	80095d8 <arm_cfft_init_f32+0x154>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 8009584:	4b1e      	ldr	r3, [pc, #120]	; (8009600 <arm_cfft_init_f32+0x17c>)
 8009586:	899a      	ldrh	r2, [r3, #12]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	819a      	strh	r2, [r3, #12]
 800958c:	4b1c      	ldr	r3, [pc, #112]	; (8009600 <arm_cfft_init_f32+0x17c>)
 800958e:	689a      	ldr	r2, [r3, #8]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	609a      	str	r2, [r3, #8]
 8009594:	4b1a      	ldr	r3, [pc, #104]	; (8009600 <arm_cfft_init_f32+0x17c>)
 8009596:	685a      	ldr	r2, [r3, #4]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	605a      	str	r2, [r3, #4]
            break;
 800959c:	e01c      	b.n	80095d8 <arm_cfft_init_f32+0x154>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 800959e:	4b19      	ldr	r3, [pc, #100]	; (8009604 <arm_cfft_init_f32+0x180>)
 80095a0:	899a      	ldrh	r2, [r3, #12]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	819a      	strh	r2, [r3, #12]
 80095a6:	4b17      	ldr	r3, [pc, #92]	; (8009604 <arm_cfft_init_f32+0x180>)
 80095a8:	689a      	ldr	r2, [r3, #8]
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	609a      	str	r2, [r3, #8]
 80095ae:	4b15      	ldr	r3, [pc, #84]	; (8009604 <arm_cfft_init_f32+0x180>)
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	605a      	str	r2, [r3, #4]
            break;
 80095b6:	e00f      	b.n	80095d8 <arm_cfft_init_f32+0x154>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 80095b8:	4b13      	ldr	r3, [pc, #76]	; (8009608 <arm_cfft_init_f32+0x184>)
 80095ba:	899a      	ldrh	r2, [r3, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	819a      	strh	r2, [r3, #12]
 80095c0:	4b11      	ldr	r3, [pc, #68]	; (8009608 <arm_cfft_init_f32+0x184>)
 80095c2:	689a      	ldr	r2, [r3, #8]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	609a      	str	r2, [r3, #8]
 80095c8:	4b0f      	ldr	r3, [pc, #60]	; (8009608 <arm_cfft_init_f32+0x184>)
 80095ca:	685a      	ldr	r2, [r3, #4]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	605a      	str	r2, [r3, #4]
            break;
 80095d0:	e002      	b.n	80095d8 <arm_cfft_init_f32+0x154>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 80095d2:	23ff      	movs	r3, #255	; 0xff
 80095d4:	73fb      	strb	r3, [r7, #15]
            break;
 80095d6:	bf00      	nop
        }


        return (status);
 80095d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3714      	adds	r7, #20
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr
 80095e8:	0803613c 	.word	0x0803613c
 80095ec:	0803612c 	.word	0x0803612c
 80095f0:	0803611c 	.word	0x0803611c
 80095f4:	0803610c 	.word	0x0803610c
 80095f8:	080360fc 	.word	0x080360fc
 80095fc:	080360ec 	.word	0x080360ec
 8009600:	080360dc 	.word	0x080360dc
 8009604:	080360cc 	.word	0x080360cc
 8009608:	080360bc 	.word	0x080360bc

0800960c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 800960c:	b480      	push	{r7}
 800960e:	b0bd      	sub	sp, #244	; 0xf4
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	607a      	str	r2, [r7, #4]
 8009616:	461a      	mov	r2, r3
 8009618:	460b      	mov	r3, r1
 800961a:	817b      	strh	r3, [r7, #10]
 800961c:	4613      	mov	r3, r2
 800961e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8009620:	4b09      	ldr	r3, [pc, #36]	; (8009648 <arm_radix8_butterfly_f32+0x3c>)
 8009622:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8009626:	897b      	ldrh	r3, [r7, #10]
 8009628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 800962c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009630:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8009634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009638:	08db      	lsrs	r3, r3, #3
 800963a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009644:	e002      	b.n	800964c <arm_radix8_butterfly_f32+0x40>
 8009646:	bf00      	nop
 8009648:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800964c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009654:	4413      	add	r3, r2
 8009656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800965a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800965e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009662:	4413      	add	r3, r2
 8009664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8009668:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800966c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009670:	4413      	add	r3, r2
 8009672:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8009676:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800967a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800967e:	4413      	add	r3, r2
 8009680:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8009684:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800968c:	4413      	add	r3, r2
 800968e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 8009692:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800969a:	4413      	add	r3, r2
 800969c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80096a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80096a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a8:	4413      	add	r3, r2
 80096aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80096ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	4413      	add	r3, r2
 80096b8:	ed93 7a00 	vldr	s14, [r3]
 80096bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	4413      	add	r3, r2
 80096c6:	edd3 7a00 	vldr	s15, [r3]
 80096ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096ce:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80096d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	ed93 7a00 	vldr	s14, [r3]
 80096e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096e4:	00db      	lsls	r3, r3, #3
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	4413      	add	r3, r2
 80096ea:	edd3 7a00 	vldr	s15, [r3]
 80096ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096f2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80096f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	68fa      	ldr	r2, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	ed93 7a00 	vldr	s14, [r3]
 8009704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009708:	00db      	lsls	r3, r3, #3
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4413      	add	r3, r2
 800970e:	edd3 7a00 	vldr	s15, [r3]
 8009712:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009716:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800971a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800971e:	00db      	lsls	r3, r3, #3
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4413      	add	r3, r2
 8009724:	ed93 7a00 	vldr	s14, [r3]
 8009728:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800972c:	00db      	lsls	r3, r3, #3
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	4413      	add	r3, r2
 8009732:	edd3 7a00 	vldr	s15, [r3]
 8009736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800973a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800973e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009742:	00db      	lsls	r3, r3, #3
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4413      	add	r3, r2
 8009748:	ed93 7a00 	vldr	s14, [r3]
 800974c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009750:	00db      	lsls	r3, r3, #3
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	edd3 7a00 	vldr	s15, [r3]
 800975a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800975e:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8009762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	ed93 7a00 	vldr	s14, [r3]
 8009770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009774:	00db      	lsls	r3, r3, #3
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	4413      	add	r3, r2
 800977a:	edd3 7a00 	vldr	s15, [r3]
 800977e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009782:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8009786:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800978a:	00db      	lsls	r3, r3, #3
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4413      	add	r3, r2
 8009790:	ed93 7a00 	vldr	s14, [r3]
 8009794:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4413      	add	r3, r2
 800979e:	edd3 7a00 	vldr	s15, [r3]
 80097a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097a6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80097aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097ae:	00db      	lsls	r3, r3, #3
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4413      	add	r3, r2
 80097b4:	ed93 7a00 	vldr	s14, [r3]
 80097b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	68fa      	ldr	r2, [r7, #12]
 80097c0:	4413      	add	r3, r2
 80097c2:	edd3 7a00 	vldr	s15, [r3]
 80097c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097ca:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80097ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80097d2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80097d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097da:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 80097de:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80097e2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80097e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ea:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 80097ee:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80097f2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80097f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097fa:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 80097fe:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009802:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800980a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800980e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009812:	00db      	lsls	r3, r3, #3
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800981c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009824:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8009828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800982c:	00db      	lsls	r3, r3, #3
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	4413      	add	r3, r2
 8009832:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009836:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800983a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800983e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8009842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	3304      	adds	r3, #4
 800984a:	68fa      	ldr	r2, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	ed93 7a00 	vldr	s14, [r3]
 8009852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009856:	00db      	lsls	r3, r3, #3
 8009858:	3304      	adds	r3, #4
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	4413      	add	r3, r2
 800985e:	edd3 7a00 	vldr	s15, [r3]
 8009862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009866:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800986a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	3304      	adds	r3, #4
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	4413      	add	r3, r2
 8009876:	ed93 7a00 	vldr	s14, [r3]
 800987a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	3304      	adds	r3, #4
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	4413      	add	r3, r2
 8009886:	edd3 7a00 	vldr	s15, [r3]
 800988a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800988e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8009892:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009896:	00db      	lsls	r3, r3, #3
 8009898:	3304      	adds	r3, #4
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	ed93 7a00 	vldr	s14, [r3]
 80098a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098a6:	00db      	lsls	r3, r3, #3
 80098a8:	3304      	adds	r3, #4
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	edd3 7a00 	vldr	s15, [r3]
 80098b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098b6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80098ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	3304      	adds	r3, #4
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	4413      	add	r3, r2
 80098c6:	ed93 7a00 	vldr	s14, [r3]
 80098ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80098ce:	00db      	lsls	r3, r3, #3
 80098d0:	3304      	adds	r3, #4
 80098d2:	68fa      	ldr	r2, [r7, #12]
 80098d4:	4413      	add	r3, r2
 80098d6:	edd3 7a00 	vldr	s15, [r3]
 80098da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098de:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80098e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80098e6:	00db      	lsls	r3, r3, #3
 80098e8:	3304      	adds	r3, #4
 80098ea:	68fa      	ldr	r2, [r7, #12]
 80098ec:	4413      	add	r3, r2
 80098ee:	ed93 7a00 	vldr	s14, [r3]
 80098f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80098f6:	00db      	lsls	r3, r3, #3
 80098f8:	3304      	adds	r3, #4
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4413      	add	r3, r2
 80098fe:	edd3 7a00 	vldr	s15, [r3]
 8009902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009906:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800990a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	3304      	adds	r3, #4
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	4413      	add	r3, r2
 8009916:	ed93 7a00 	vldr	s14, [r3]
 800991a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	3304      	adds	r3, #4
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4413      	add	r3, r2
 8009926:	edd3 7a00 	vldr	s15, [r3]
 800992a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800992e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8009932:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009936:	00db      	lsls	r3, r3, #3
 8009938:	3304      	adds	r3, #4
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	ed93 7a00 	vldr	s14, [r3]
 8009942:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009946:	00db      	lsls	r3, r3, #3
 8009948:	3304      	adds	r3, #4
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	4413      	add	r3, r2
 800994e:	edd3 7a00 	vldr	s15, [r3]
 8009952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009956:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800995a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	3304      	adds	r3, #4
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4413      	add	r3, r2
 8009966:	ed93 7a00 	vldr	s14, [r3]
 800996a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	3304      	adds	r3, #4
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	4413      	add	r3, r2
 8009976:	edd3 7a00 	vldr	s15, [r3]
 800997a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800997e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8009982:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009986:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800998a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800998e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8009992:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009996:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800999a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800999e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 80099a2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80099a6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80099aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099ae:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 80099b2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80099b6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80099ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099be:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 80099c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099c6:	00db      	lsls	r3, r3, #3
 80099c8:	3304      	adds	r3, #4
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	4413      	add	r3, r2
 80099ce:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80099d2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80099d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099da:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 80099de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099e2:	00db      	lsls	r3, r3, #3
 80099e4:	3304      	adds	r3, #4
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	4413      	add	r3, r2
 80099ea:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80099ee:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80099f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099f6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 80099fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009a08:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a10:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8009a14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a18:	00db      	lsls	r3, r3, #3
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009a22:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8009a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a2a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8009a2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009a32:	00db      	lsls	r3, r3, #3
 8009a34:	3304      	adds	r3, #4
 8009a36:	68fa      	ldr	r2, [r7, #12]
 8009a38:	4413      	add	r3, r2
 8009a3a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009a3e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009a42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a46:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8009a4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	3304      	adds	r3, #4
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	4413      	add	r3, r2
 8009a56:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009a5a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a62:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8009a66:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8009a6a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009a6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a72:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a7a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8009a7e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8009a82:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a8a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a92:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8009a96:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8009a9a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009aa2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aaa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8009aae:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8009ab2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009aba:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8009abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ac2:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8009ac6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009aca:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ad2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8009ad6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009ada:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8009ade:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ae2:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8009ae6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8009aea:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8009aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009af2:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8009af6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8009afa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8009afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b02:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8009b06:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009b0a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b12:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8009b16:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009b1a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b22:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8009b26:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8009b2a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8009b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b32:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8009b36:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8009b3a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8009b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b42:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8009b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009b4a:	00db      	lsls	r3, r3, #3
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	4413      	add	r3, r2
 8009b50:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009b54:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b5c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8009b60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	4413      	add	r3, r2
 8009b6a:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8009b6e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8009b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b76:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8009b7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009b7e:	00db      	lsls	r3, r3, #3
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	4413      	add	r3, r2
 8009b84:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009b88:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b90:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8009b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009b98:	00db      	lsls	r3, r3, #3
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8009ba2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8009ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009baa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8009bae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bb2:	00db      	lsls	r3, r3, #3
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	4413      	add	r3, r2
 8009bba:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009bbe:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bc6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8009bca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	3304      	adds	r3, #4
 8009bd2:	68fa      	ldr	r2, [r7, #12]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8009bda:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8009bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009be2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8009be6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009bea:	00db      	lsls	r3, r3, #3
 8009bec:	3304      	adds	r3, #4
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009bf6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bfe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8009c02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c06:	00db      	lsls	r3, r3, #3
 8009c08:	3304      	adds	r3, #4
 8009c0a:	68fa      	ldr	r2, [r7, #12]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8009c12:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8009c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c1a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8009c1e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c26:	4413      	add	r3, r2
 8009c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8009c2c:	897b      	ldrh	r3, [r7, #10]
 8009c2e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009c32:	429a      	cmp	r2, r3
 8009c34:	f4ff ad0a 	bcc.w	800964c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8009c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c3c:	2b07      	cmp	r3, #7
 8009c3e:	f240 84e3 	bls.w	800a608 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8009c4e:	893b      	ldrh	r3, [r7, #8]
 8009c50:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009c54:	4413      	add	r3, r2
 8009c56:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8009c58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8009c5e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8009c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c64:	4413      	add	r3, r2
 8009c66:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8009c68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c6c:	4413      	add	r3, r2
 8009c6e:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8009c70:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c74:	4413      	add	r3, r2
 8009c76:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8009c78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009c7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c7c:	4413      	add	r3, r2
 8009c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8009c80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c84:	4413      	add	r3, r2
 8009c86:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8009c88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009c8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c8c:	4413      	add	r3, r2
 8009c8e:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8009c90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009c94:	00db      	lsls	r3, r3, #3
 8009c96:	687a      	ldr	r2, [r7, #4]
 8009c98:	4413      	add	r3, r2
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8009c9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	4413      	add	r3, r2
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8009caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cac:	00db      	lsls	r3, r3, #3
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8009cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cb8:	00db      	lsls	r3, r3, #3
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8009cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc4:	00db      	lsls	r3, r3, #3
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	4413      	add	r3, r2
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8009cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cd0:	00db      	lsls	r3, r3, #3
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8009cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cdc:	00db      	lsls	r3, r3, #3
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8009ce6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009cea:	00db      	lsls	r3, r3, #3
 8009cec:	3304      	adds	r3, #4
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8009cf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009cf8:	00db      	lsls	r3, r3, #3
 8009cfa:	3304      	adds	r3, #4
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	4413      	add	r3, r2
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8009d04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	3304      	adds	r3, #4
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8009d12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	3304      	adds	r3, #4
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8009d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d22:	00db      	lsls	r3, r3, #3
 8009d24:	3304      	adds	r3, #4
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	4413      	add	r3, r2
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8009d2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d30:	00db      	lsls	r3, r3, #3
 8009d32:	3304      	adds	r3, #4
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	4413      	add	r3, r2
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8009d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d3e:	00db      	lsls	r3, r3, #3
 8009d40:	3304      	adds	r3, #4
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	4413      	add	r3, r2
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8009d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8009d52:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8009d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8009d60:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8009d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d68:	4413      	add	r3, r2
 8009d6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8009d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d76:	4413      	add	r3, r2
 8009d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8009d7c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8009d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d84:	4413      	add	r3, r2
 8009d86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8009d8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d92:	4413      	add	r3, r2
 8009d94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8009d98:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009da0:	4413      	add	r3, r2
 8009da2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8009da6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dae:	4413      	add	r3, r2
 8009db0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8009db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009db8:	00db      	lsls	r3, r3, #3
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	ed93 7a00 	vldr	s14, [r3]
 8009dc2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	68fa      	ldr	r2, [r7, #12]
 8009dca:	4413      	add	r3, r2
 8009dcc:	edd3 7a00 	vldr	s15, [r3]
 8009dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009dd4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8009dd8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009ddc:	00db      	lsls	r3, r3, #3
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	4413      	add	r3, r2
 8009de2:	ed93 7a00 	vldr	s14, [r3]
 8009de6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009dea:	00db      	lsls	r3, r3, #3
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	edd3 7a00 	vldr	s15, [r3]
 8009df4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009df8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8009dfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e00:	00db      	lsls	r3, r3, #3
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	4413      	add	r3, r2
 8009e06:	ed93 7a00 	vldr	s14, [r3]
 8009e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	68fa      	ldr	r2, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	edd3 7a00 	vldr	s15, [r3]
 8009e18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e1c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8009e20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009e24:	00db      	lsls	r3, r3, #3
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	4413      	add	r3, r2
 8009e2a:	ed93 7a00 	vldr	s14, [r3]
 8009e2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	68fa      	ldr	r2, [r7, #12]
 8009e36:	4413      	add	r3, r2
 8009e38:	edd3 7a00 	vldr	s15, [r3]
 8009e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e40:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8009e44:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e48:	00db      	lsls	r3, r3, #3
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	ed93 7a00 	vldr	s14, [r3]
 8009e52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e56:	00db      	lsls	r3, r3, #3
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	edd3 7a00 	vldr	s15, [r3]
 8009e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e64:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8009e68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009e6c:	00db      	lsls	r3, r3, #3
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	4413      	add	r3, r2
 8009e72:	ed93 7a00 	vldr	s14, [r3]
 8009e76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009e7a:	00db      	lsls	r3, r3, #3
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4413      	add	r3, r2
 8009e80:	edd3 7a00 	vldr	s15, [r3]
 8009e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e88:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8009e8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009e90:	00db      	lsls	r3, r3, #3
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	4413      	add	r3, r2
 8009e96:	ed93 7a00 	vldr	s14, [r3]
 8009e9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	edd3 7a00 	vldr	s15, [r3]
 8009ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009eac:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8009eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4413      	add	r3, r2
 8009eba:	ed93 7a00 	vldr	s14, [r3]
 8009ebe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009ec2:	00db      	lsls	r3, r3, #3
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	edd3 7a00 	vldr	s15, [r3]
 8009ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ed0:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8009ed4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009ed8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ee0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8009ee4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009ee8:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8009eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ef0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8009ef4:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009ef8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009efc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f00:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8009f04:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8009f08:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8009f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f10:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8009f14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f18:	00db      	lsls	r3, r3, #3
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009f22:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f2a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8009f2e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8009f32:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8009f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f3a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8009f3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f42:	00db      	lsls	r3, r3, #3
 8009f44:	3304      	adds	r3, #4
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	4413      	add	r3, r2
 8009f4a:	ed93 7a00 	vldr	s14, [r3]
 8009f4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f52:	00db      	lsls	r3, r3, #3
 8009f54:	3304      	adds	r3, #4
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	4413      	add	r3, r2
 8009f5a:	edd3 7a00 	vldr	s15, [r3]
 8009f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8009f66:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009f6a:	00db      	lsls	r3, r3, #3
 8009f6c:	3304      	adds	r3, #4
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4413      	add	r3, r2
 8009f72:	ed93 7a00 	vldr	s14, [r3]
 8009f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f7a:	00db      	lsls	r3, r3, #3
 8009f7c:	3304      	adds	r3, #4
 8009f7e:	68fa      	ldr	r2, [r7, #12]
 8009f80:	4413      	add	r3, r2
 8009f82:	edd3 7a00 	vldr	s15, [r3]
 8009f86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f8a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8009f8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f92:	00db      	lsls	r3, r3, #3
 8009f94:	3304      	adds	r3, #4
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	4413      	add	r3, r2
 8009f9a:	ed93 7a00 	vldr	s14, [r3]
 8009f9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	4413      	add	r3, r2
 8009faa:	edd3 7a00 	vldr	s15, [r3]
 8009fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009fb2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8009fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fba:	00db      	lsls	r3, r3, #3
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	ed93 7a00 	vldr	s14, [r3]
 8009fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009fca:	00db      	lsls	r3, r3, #3
 8009fcc:	3304      	adds	r3, #4
 8009fce:	68fa      	ldr	r2, [r7, #12]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	edd3 7a00 	vldr	s15, [r3]
 8009fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fda:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8009fde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	3304      	adds	r3, #4
 8009fe6:	68fa      	ldr	r2, [r7, #12]
 8009fe8:	4413      	add	r3, r2
 8009fea:	ed93 7a00 	vldr	s14, [r3]
 8009fee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ff2:	00db      	lsls	r3, r3, #3
 8009ff4:	3304      	adds	r3, #4
 8009ff6:	68fa      	ldr	r2, [r7, #12]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	edd3 7a00 	vldr	s15, [r3]
 8009ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a002:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800a006:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a00a:	00db      	lsls	r3, r3, #3
 800a00c:	3304      	adds	r3, #4
 800a00e:	68fa      	ldr	r2, [r7, #12]
 800a010:	4413      	add	r3, r2
 800a012:	ed93 7a00 	vldr	s14, [r3]
 800a016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a01a:	00db      	lsls	r3, r3, #3
 800a01c:	3304      	adds	r3, #4
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	4413      	add	r3, r2
 800a022:	edd3 7a00 	vldr	s15, [r3]
 800a026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a02a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800a02e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a032:	00db      	lsls	r3, r3, #3
 800a034:	3304      	adds	r3, #4
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	4413      	add	r3, r2
 800a03a:	ed93 7a00 	vldr	s14, [r3]
 800a03e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	3304      	adds	r3, #4
 800a046:	68fa      	ldr	r2, [r7, #12]
 800a048:	4413      	add	r3, r2
 800a04a:	edd3 7a00 	vldr	s15, [r3]
 800a04e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a052:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800a056:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a05a:	00db      	lsls	r3, r3, #3
 800a05c:	3304      	adds	r3, #4
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	4413      	add	r3, r2
 800a062:	ed93 7a00 	vldr	s14, [r3]
 800a066:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a06a:	00db      	lsls	r3, r3, #3
 800a06c:	3304      	adds	r3, #4
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	4413      	add	r3, r2
 800a072:	edd3 7a00 	vldr	s15, [r3]
 800a076:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a07a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800a07e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a082:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a086:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a08a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800a08e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a092:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a09a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800a09e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a0a2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a0a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0aa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800a0ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a0b2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a0b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800a0be:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a0c2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a0c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0ca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800a0ce:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a0d2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a0d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a0da:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800a0de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0e2:	00db      	lsls	r3, r3, #3
 800a0e4:	3304      	adds	r3, #4
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a0f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a0f6:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800a0fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a102:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a106:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800a10a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a10e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a112:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a116:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800a11a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a11e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a122:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a126:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800a12a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a12e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a132:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a136:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800a13a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a13e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a142:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a146:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800a14a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a14e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a152:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a156:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800a15a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a15e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a162:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a166:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800a16a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a16e:	00db      	lsls	r3, r3, #3
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	4413      	add	r3, r2
 800a174:	ed97 7a07 	vldr	s14, [r7, #28]
 800a178:	edd7 7a06 	vldr	s15, [r7, #24]
 800a17c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a180:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800a184:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	3304      	adds	r3, #4
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	ed97 7a05 	vldr	s14, [r7, #20]
 800a194:	edd7 7a04 	vldr	s15, [r7, #16]
 800a198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a19c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800a1a0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a1a4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1ac:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800a1b0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a1b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1bc:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800a1c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a1c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1cc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800a1d0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a1d4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a1d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1dc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800a1e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a1e4:	00db      	lsls	r3, r3, #3
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	ed97 7a07 	vldr	s14, [r7, #28]
 800a1ee:	edd7 7a06 	vldr	s15, [r7, #24]
 800a1f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1f6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800a1fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a1fe:	00db      	lsls	r3, r3, #3
 800a200:	3304      	adds	r3, #4
 800a202:	68fa      	ldr	r2, [r7, #12]
 800a204:	4413      	add	r3, r2
 800a206:	ed97 7a05 	vldr	s14, [r7, #20]
 800a20a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a20e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a212:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800a216:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a21a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a222:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800a226:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a22a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a232:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800a236:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a23a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a242:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800a246:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a24a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a252:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800a256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	68fa      	ldr	r2, [r7, #12]
 800a25e:	4413      	add	r3, r2
 800a260:	ed97 7a07 	vldr	s14, [r7, #28]
 800a264:	edd7 7a06 	vldr	s15, [r7, #24]
 800a268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a26c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800a270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	3304      	adds	r3, #4
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	4413      	add	r3, r2
 800a27c:	ed97 7a05 	vldr	s14, [r7, #20]
 800a280:	edd7 7a04 	vldr	s15, [r7, #16]
 800a284:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a288:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800a28c:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a290:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a294:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a298:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a29c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2a0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800a2a4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a2a8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a2ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2b0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a2b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2b8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800a2bc:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a2c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a2c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2c8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a2cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2d0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800a2d4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a2d8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a2dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2e0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800a2ec:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a2f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a2f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2f8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800a2fc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a300:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a304:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a308:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800a30c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a310:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a314:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a318:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800a31c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a320:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a324:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a328:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800a32c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a330:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a334:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a338:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800a33c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a340:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a344:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a348:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800a34c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a350:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a354:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a358:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800a35c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a360:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a364:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a368:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800a36c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a370:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a374:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a378:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800a37c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a380:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a384:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a388:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800a38c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a390:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a394:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a398:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800a39c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a3a0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a3a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3a8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800a3ac:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a3b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a3b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3b8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800a3bc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a3c0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a3c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3c8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800a3cc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a3d0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a3d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3d8:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800a3dc:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a3e0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a3e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3e8:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800a3ec:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a3f0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a3f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800a3fc:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a400:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a408:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800a40c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a410:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a414:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a418:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800a41c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a420:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a424:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a428:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800a42c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a430:	00db      	lsls	r3, r3, #3
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	4413      	add	r3, r2
 800a436:	ed97 7a07 	vldr	s14, [r7, #28]
 800a43a:	edd7 7a06 	vldr	s15, [r7, #24]
 800a43e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a442:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800a446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a44a:	00db      	lsls	r3, r3, #3
 800a44c:	3304      	adds	r3, #4
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	4413      	add	r3, r2
 800a452:	ed97 7a05 	vldr	s14, [r7, #20]
 800a456:	edd7 7a04 	vldr	s15, [r7, #16]
 800a45a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a45e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800a462:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a466:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a46a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a46e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800a472:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a476:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a47a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800a482:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800a486:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800a48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a48e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800a492:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a496:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800a49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a49e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800a4a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4a6:	00db      	lsls	r3, r3, #3
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	ed97 7a07 	vldr	s14, [r7, #28]
 800a4b0:	edd7 7a06 	vldr	s15, [r7, #24]
 800a4b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4b8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800a4bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a4c0:	00db      	lsls	r3, r3, #3
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	ed97 7a05 	vldr	s14, [r7, #20]
 800a4cc:	edd7 7a04 	vldr	s15, [r7, #16]
 800a4d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4d4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800a4d8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a4dc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a4e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800a4e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4ec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a4f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800a4f8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800a4fc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a500:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a504:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800a508:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a50c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a510:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a514:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800a518:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	4413      	add	r3, r2
 800a522:	ed97 7a07 	vldr	s14, [r7, #28]
 800a526:	edd7 7a06 	vldr	s15, [r7, #24]
 800a52a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a52e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800a532:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a536:	00db      	lsls	r3, r3, #3
 800a538:	3304      	adds	r3, #4
 800a53a:	68fa      	ldr	r2, [r7, #12]
 800a53c:	4413      	add	r3, r2
 800a53e:	ed97 7a05 	vldr	s14, [r7, #20]
 800a542:	edd7 7a04 	vldr	s15, [r7, #16]
 800a546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a54a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800a54e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a552:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a55a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800a55e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a562:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800a56e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a572:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800a576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800a57e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a582:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800a586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a58a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800a58e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a592:	00db      	lsls	r3, r3, #3
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	ed97 7a07 	vldr	s14, [r7, #28]
 800a59c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a5a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5a4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800a5a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5ac:	00db      	lsls	r3, r3, #3
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	4413      	add	r3, r2
 800a5b4:	ed97 7a05 	vldr	s14, [r7, #20]
 800a5b8:	edd7 7a04 	vldr	s15, [r7, #16]
 800a5bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5c0:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800a5c4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a5c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5cc:	4413      	add	r3, r2
 800a5ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800a5d2:	897b      	ldrh	r3, [r7, #10]
 800a5d4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	f4ff abba 	bcc.w	8009d52 <arm_radix8_butterfly_f32+0x746>

         j++;
 800a5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800a5e8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a5ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	f4ff ab2c 	bcc.w	8009c4e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800a5f6:	893b      	ldrh	r3, [r7, #8]
 800a5f8:	00db      	lsls	r3, r3, #3
 800a5fa:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800a5fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a600:	2b07      	cmp	r3, #7
 800a602:	f63f a813 	bhi.w	800962c <arm_radix8_butterfly_f32+0x20>
}
 800a606:	e000      	b.n	800a60a <arm_radix8_butterfly_f32+0xffe>
         break;
 800a608:	bf00      	nop
}
 800a60a:	bf00      	nop
 800a60c:	37f4      	adds	r7, #244	; 0xf4
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop

0800a618 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800a618:	b480      	push	{r7}
 800a61a:	b095      	sub	sp, #84	; 0x54
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	695b      	ldr	r3, [r3, #20]
 800a628:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	881b      	ldrh	r3, [r3, #0]
 800a636:	3b01      	subs	r3, #1
 800a638:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800a63a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800a640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800a646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800a64c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800a652:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a654:	1d1a      	adds	r2, r3, #4
 800a656:	64ba      	str	r2, [r7, #72]	; 0x48
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800a65c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a65e:	1d1a      	adds	r2, r3, #4
 800a660:	64ba      	str	r2, [r7, #72]	; 0x48
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800a666:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a66a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a66e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a672:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800a676:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a67a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a67e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a682:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800a686:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a68a:	edd7 7a08 	vldr	s15, [r7, #32]
 800a68e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	1d1a      	adds	r2, r3, #4
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a69c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6a0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800a6a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a6a8:	edd7 7a08 	vldr	s15, [r7, #32]
 800a6ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	1d1a      	adds	r2, r3, #4
 800a6b4:	607a      	str	r2, [r7, #4]
 800a6b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a6ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a6be:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800a6c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6c4:	00db      	lsls	r3, r3, #3
 800a6c6:	68ba      	ldr	r2, [r7, #8]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800a6cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ce:	3308      	adds	r3, #8
 800a6d0:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800a6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800a6d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800a6de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800a6e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800a6ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ec:	1d1a      	adds	r2, r3, #4
 800a6ee:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800a6f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6f6:	1d1a      	adds	r2, r3, #4
 800a6f8:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800a6fe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a702:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a706:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a70a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800a70e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a712:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a716:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a71a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800a71e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a722:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800a72e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a732:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a73a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800a73e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a742:	edd7 7a08 	vldr	s15, [r7, #32]
 800a746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a74a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800a74e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a752:	edd7 7a08 	vldr	s15, [r7, #32]
 800a756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75a:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800a75e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a762:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800a766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a76a:	edd7 7a07 	vldr	s15, [r7, #28]
 800a76e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a772:	edd7 7a04 	vldr	s15, [r7, #16]
 800a776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	1d1a      	adds	r2, r3, #4
 800a77e:	607a      	str	r2, [r7, #4]
 800a780:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a784:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a788:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800a78c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800a790:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a794:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a798:	edd7 7a06 	vldr	s15, [r7, #24]
 800a79c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a7a0:	edd7 7a05 	vldr	s15, [r7, #20]
 800a7a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	1d1a      	adds	r2, r3, #4
 800a7ac:	607a      	str	r2, [r7, #4]
 800a7ae:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a7b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a7b6:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800a7ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7bc:	3308      	adds	r3, #8
 800a7be:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800a7c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7c2:	3b08      	subs	r3, #8
 800a7c4:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800a7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7c8:	3b01      	subs	r3, #1
 800a7ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 800a7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f47f af7f 	bne.w	800a6d2 <stage_rfft_f32+0xba>
}
 800a7d4:	bf00      	nop
 800a7d6:	3754      	adds	r7, #84	; 0x54
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b095      	sub	sp, #84	; 0x54
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	60f8      	str	r0, [r7, #12]
 800a7e8:	60b9      	str	r1, [r7, #8]
 800a7ea:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800a802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800a808:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800a80e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a810:	3308      	adds	r3, #8
 800a812:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800a814:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a818:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a81c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	1d1a      	adds	r2, r3, #4
 800a824:	607a      	str	r2, [r7, #4]
 800a826:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a82a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a82e:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800a832:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a836:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800a83a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	1d1a      	adds	r2, r3, #4
 800a842:	607a      	str	r2, [r7, #4]
 800a844:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a848:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a84c:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800a850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a852:	00db      	lsls	r3, r3, #3
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	4413      	add	r3, r2
 800a858:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800a85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a85c:	3308      	adds	r3, #8
 800a85e:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800a860:	e07c      	b.n	800a95c <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800a862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800a868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800a86e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800a874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800a87a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a87c:	1d1a      	adds	r2, r3, #4
 800a87e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800a884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a886:	1d1a      	adds	r2, r3, #4
 800a888:	64ba      	str	r2, [r7, #72]	; 0x48
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800a88e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a892:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a896:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a89a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800a89e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a8a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a8a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8aa:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800a8ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a8b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ba:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800a8be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8c2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ca:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800a8ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8da:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800a8de:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800a8e2:	edd7 7a08 	vldr	s15, [r7, #32]
 800a8e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8ea:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800a8ee:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a8f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a8f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8fa:	edd7 7a07 	vldr	s15, [r7, #28]
 800a8fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a902:	edd7 7a06 	vldr	s15, [r7, #24]
 800a906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	1d1a      	adds	r2, r3, #4
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a914:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a918:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800a91c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a920:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a924:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a928:	edd7 7a05 	vldr	s15, [r7, #20]
 800a92c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a930:	edd7 7a04 	vldr	s15, [r7, #16]
 800a934:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	1d1a      	adds	r2, r3, #4
 800a93c:	607a      	str	r2, [r7, #4]
 800a93e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800a942:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a946:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800a94a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a94c:	3308      	adds	r3, #8
 800a94e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800a950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a952:	3b08      	subs	r3, #8
 800a954:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800a956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a958:	3b01      	subs	r3, #1
 800a95a:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 800a95c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f47f af7f 	bne.w	800a862 <merge_rfft_f32+0x82>
   }

}
 800a964:	bf00      	nop
 800a966:	3754      	adds	r7, #84	; 0x54
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800a982:	78fb      	ldrb	r3, [r7, #3]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00b      	beq.n	800a9a0 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	68b9      	ldr	r1, [r7, #8]
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	f7ff ff27 	bl	800a7e0 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800a992:	78fa      	ldrb	r2, [r7, #3]
 800a994:	2301      	movs	r3, #1
 800a996:	6879      	ldr	r1, [r7, #4]
 800a998:	6978      	ldr	r0, [r7, #20]
 800a99a:	f7fe fccf 	bl	800933c <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800a99e:	e00a      	b.n	800a9b6 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	68b9      	ldr	r1, [r7, #8]
 800a9a6:	6978      	ldr	r0, [r7, #20]
 800a9a8:	f7fe fcc8 	bl	800933c <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	68b9      	ldr	r1, [r7, #8]
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f7ff fe31 	bl	800a618 <stage_rfft_f32>
}
 800a9b6:	bf00      	nop
 800a9b8:	3718      	adds	r7, #24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d102      	bne.n	800a9d4 <arm_rfft_32_fast_init_f32+0x14>
 800a9ce:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d2:	e014      	b.n	800a9fe <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2110      	movs	r1, #16
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fe fd53 	bl	8009484 <arm_cfft_init_f32>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800a9e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 800a9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ee:	e006      	b.n	800a9fe <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a03      	ldr	r2, [pc, #12]	; (800aa08 <arm_rfft_32_fast_init_f32+0x48>)
 800a9fa:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	0802e13c 	.word	0x0802e13c

0800aa0c <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d102      	bne.n	800aa20 <arm_rfft_64_fast_init_f32+0x14>
 800aa1a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1e:	e014      	b.n	800aa4a <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2120      	movs	r1, #32
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fe fd2d 	bl	8009484 <arm_cfft_init_f32>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800aa2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d002      	beq.n	800aa3c <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 800aa36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa3a:	e006      	b.n	800aa4a <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2240      	movs	r2, #64	; 0x40
 800aa40:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a03      	ldr	r2, [pc, #12]	; (800aa54 <arm_rfft_64_fast_init_f32+0x48>)
 800aa46:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	0802e1bc 	.word	0x0802e1bc

0800aa58 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b084      	sub	sp, #16
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d102      	bne.n	800aa6c <arm_rfft_128_fast_init_f32+0x14>
 800aa66:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6a:	e014      	b.n	800aa96 <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2140      	movs	r1, #64	; 0x40
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe fd07 	bl	8009484 <arm_cfft_init_f32>
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800aa7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d002      	beq.n	800aa88 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 800aa82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa86:	e006      	b.n	800aa96 <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2280      	movs	r2, #128	; 0x80
 800aa8c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	4a03      	ldr	r2, [pc, #12]	; (800aaa0 <arm_rfft_128_fast_init_f32+0x48>)
 800aa92:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0802e2bc 	.word	0x0802e2bc

0800aaa4 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b084      	sub	sp, #16
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d102      	bne.n	800aab8 <arm_rfft_256_fast_init_f32+0x14>
 800aab2:	f04f 33ff 	mov.w	r3, #4294967295
 800aab6:	e015      	b.n	800aae4 <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2180      	movs	r1, #128	; 0x80
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe fce1 	bl	8009484 <arm_cfft_init_f32>
 800aac2:	4603      	mov	r3, r0
 800aac4:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800aac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d002      	beq.n	800aad4 <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 800aace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aad2:	e007      	b.n	800aae4 <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aada:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a03      	ldr	r2, [pc, #12]	; (800aaec <arm_rfft_256_fast_init_f32+0x48>)
 800aae0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800aae2:	2300      	movs	r3, #0
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3710      	adds	r7, #16
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}
 800aaec:	0802e4bc 	.word	0x0802e4bc

0800aaf0 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <arm_rfft_512_fast_init_f32+0x14>
 800aafe:	f04f 33ff 	mov.w	r3, #4294967295
 800ab02:	e016      	b.n	800ab32 <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe fcba 	bl	8009484 <arm_cfft_init_f32>
 800ab10:	4603      	mov	r3, r0
 800ab12:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800ab14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d002      	beq.n	800ab22 <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 800ab1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab20:	e007      	b.n	800ab32 <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab28:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a03      	ldr	r2, [pc, #12]	; (800ab3c <arm_rfft_512_fast_init_f32+0x4c>)
 800ab2e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800ab30:	2300      	movs	r3, #0
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3710      	adds	r7, #16
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	0802e8bc 	.word	0x0802e8bc

0800ab40 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b084      	sub	sp, #16
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d102      	bne.n	800ab54 <arm_rfft_1024_fast_init_f32+0x14>
 800ab4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab52:	e016      	b.n	800ab82 <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f7fe fc92 	bl	8009484 <arm_cfft_init_f32>
 800ab60:	4603      	mov	r3, r0
 800ab62:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800ab64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 800ab6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab70:	e007      	b.n	800ab82 <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab78:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a03      	ldr	r2, [pc, #12]	; (800ab8c <arm_rfft_1024_fast_init_f32+0x4c>)
 800ab7e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	0802f0bc 	.word	0x0802f0bc

0800ab90 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b084      	sub	sp, #16
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <arm_rfft_2048_fast_init_f32+0x14>
 800ab9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aba2:	e016      	b.n	800abd2 <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800abaa:	4618      	mov	r0, r3
 800abac:	f7fe fc6a 	bl	8009484 <arm_cfft_init_f32>
 800abb0:	4603      	mov	r3, r0
 800abb2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800abb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d002      	beq.n	800abc2 <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 800abbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800abc0:	e007      	b.n	800abd2 <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abc8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a03      	ldr	r2, [pc, #12]	; (800abdc <arm_rfft_2048_fast_init_f32+0x4c>)
 800abce:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	080300bc 	.word	0x080300bc

0800abe0 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <arm_rfft_4096_fast_init_f32+0x14>
 800abee:	f04f 33ff 	mov.w	r3, #4294967295
 800abf2:	e016      	b.n	800ac22 <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fe fc42 	bl	8009484 <arm_cfft_init_f32>
 800ac00:	4603      	mov	r3, r0
 800ac02:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800ac04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 800ac0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac10:	e007      	b.n	800ac22 <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ac18:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4a03      	ldr	r2, [pc, #12]	; (800ac2c <arm_rfft_4096_fast_init_f32+0x4c>)
 800ac1e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800ac20:	2300      	movs	r3, #0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
 800ac2a:	bf00      	nop
 800ac2c:	080320bc 	.word	0x080320bc

0800ac30 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b084      	sub	sp, #16
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
 800ac38:	460b      	mov	r3, r1
 800ac3a:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 800ac40:	887b      	ldrh	r3, [r7, #2]
 800ac42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac46:	d025      	beq.n	800ac94 <arm_rfft_fast_init_f32+0x64>
 800ac48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac4c:	dc06      	bgt.n	800ac5c <arm_rfft_fast_init_f32+0x2c>
 800ac4e:	2b40      	cmp	r3, #64	; 0x40
 800ac50:	d026      	beq.n	800aca0 <arm_rfft_fast_init_f32+0x70>
 800ac52:	2b80      	cmp	r3, #128	; 0x80
 800ac54:	d021      	beq.n	800ac9a <arm_rfft_fast_init_f32+0x6a>
 800ac56:	2b20      	cmp	r3, #32
 800ac58:	d025      	beq.n	800aca6 <arm_rfft_fast_init_f32+0x76>
 800ac5a:	e027      	b.n	800acac <arm_rfft_fast_init_f32+0x7c>
 800ac5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac60:	d012      	beq.n	800ac88 <arm_rfft_fast_init_f32+0x58>
 800ac62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac66:	dc03      	bgt.n	800ac70 <arm_rfft_fast_init_f32+0x40>
 800ac68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac6c:	d00f      	beq.n	800ac8e <arm_rfft_fast_init_f32+0x5e>
 800ac6e:	e01d      	b.n	800acac <arm_rfft_fast_init_f32+0x7c>
 800ac70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac74:	d005      	beq.n	800ac82 <arm_rfft_fast_init_f32+0x52>
 800ac76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac7a:	d117      	bne.n	800acac <arm_rfft_fast_init_f32+0x7c>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 800ac7c:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <arm_rfft_fast_init_f32+0xa0>)
 800ac7e:	60fb      	str	r3, [r7, #12]
    break;
 800ac80:	e017      	b.n	800acb2 <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 800ac82:	4b14      	ldr	r3, [pc, #80]	; (800acd4 <arm_rfft_fast_init_f32+0xa4>)
 800ac84:	60fb      	str	r3, [r7, #12]
    break;
 800ac86:	e014      	b.n	800acb2 <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 800ac88:	4b13      	ldr	r3, [pc, #76]	; (800acd8 <arm_rfft_fast_init_f32+0xa8>)
 800ac8a:	60fb      	str	r3, [r7, #12]
    break;
 800ac8c:	e011      	b.n	800acb2 <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 800ac8e:	4b13      	ldr	r3, [pc, #76]	; (800acdc <arm_rfft_fast_init_f32+0xac>)
 800ac90:	60fb      	str	r3, [r7, #12]
    break;
 800ac92:	e00e      	b.n	800acb2 <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 800ac94:	4b12      	ldr	r3, [pc, #72]	; (800ace0 <arm_rfft_fast_init_f32+0xb0>)
 800ac96:	60fb      	str	r3, [r7, #12]
    break;
 800ac98:	e00b      	b.n	800acb2 <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 800ac9a:	4b12      	ldr	r3, [pc, #72]	; (800ace4 <arm_rfft_fast_init_f32+0xb4>)
 800ac9c:	60fb      	str	r3, [r7, #12]
    break;
 800ac9e:	e008      	b.n	800acb2 <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 800aca0:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <arm_rfft_fast_init_f32+0xb8>)
 800aca2:	60fb      	str	r3, [r7, #12]
    break;
 800aca4:	e005      	b.n	800acb2 <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 800aca6:	4b11      	ldr	r3, [pc, #68]	; (800acec <arm_rfft_fast_init_f32+0xbc>)
 800aca8:	60fb      	str	r3, [r7, #12]
    break;
 800acaa:	e002      	b.n	800acb2 <arm_rfft_fast_init_f32+0x82>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 800acac:	f04f 33ff 	mov.w	r3, #4294967295
 800acb0:	e009      	b.n	800acc6 <arm_rfft_fast_init_f32+0x96>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d102      	bne.n	800acbe <arm_rfft_fast_init_f32+0x8e>
 800acb8:	f04f 33ff 	mov.w	r3, #4294967295
 800acbc:	e003      	b.n	800acc6 <arm_rfft_fast_init_f32+0x96>
  return fptr( S );
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	4798      	blx	r3
 800acc4:	4603      	mov	r3, r0

}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	0800abe1 	.word	0x0800abe1
 800acd4:	0800ab91 	.word	0x0800ab91
 800acd8:	0800ab41 	.word	0x0800ab41
 800acdc:	0800aaf1 	.word	0x0800aaf1
 800ace0:	0800aaa5 	.word	0x0800aaa5
 800ace4:	0800aa59 	.word	0x0800aa59
 800ace8:	0800aa0d 	.word	0x0800aa0d
 800acec:	0800a9c1 	.word	0x0800a9c1

0800acf0 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800acf0:	b480      	push	{r7}
 800acf2:	b089      	sub	sp, #36	; 0x24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800ad04:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	00db      	lsls	r3, r3, #3
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	ed93 7a00 	vldr	s14, [r3]
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	edd3 7a00 	vldr	s15, [r3]
 800ad1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad20:	69fb      	ldr	r3, [r7, #28]
 800ad22:	edd3 6a01 	vldr	s13, [r3, #4]
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad30:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad34:	edc7 7a04 	vstr	s15, [r7, #16]
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	ed93 7a00 	vldr	s14, [r3]
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	edd3 7a01 	vldr	s15, [r3, #4]
 800ad44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	edd3 6a01 	vldr	s13, [r3, #4]
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	edd3 7a00 	vldr	s15, [r3]
 800ad54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad5c:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	00db      	lsls	r3, r3, #3
 800ad64:	69ba      	ldr	r2, [r7, #24]
 800ad66:	4413      	add	r3, r2
 800ad68:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	ed93 7a00 	vldr	s14, [r3]
 800ad70:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	edc3 7a00 	vstr	s15, [r3]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	ed93 7a01 	vldr	s14, [r3, #4]
 800ad84:	edd7 7a05 	vldr	s15, [r7, #20]
 800ad88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	ed93 7a00 	vldr	s14, [r3]
 800ad98:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	edc3 7a00 	vstr	s15, [r3]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	ed93 7a01 	vldr	s14, [r3, #4]
 800adac:	edd7 7a05 	vldr	s15, [r7, #20]
 800adb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	3308      	adds	r3, #8
 800adbe:	61fb      	str	r3, [r7, #28]
        ++Fout;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3308      	adds	r3, #8
 800adc4:	60fb      	str	r3, [r7, #12]
    }while (--m);
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	3b01      	subs	r3, #1
 800adca:	603b      	str	r3, [r7, #0]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	bf14      	ite	ne
 800add2:	2301      	movne	r3, #1
 800add4:	2300      	moveq	r3, #0
 800add6:	b2db      	uxtb	r3, r3
 800add8:	2b00      	cmp	r3, #0
 800adda:	d000      	beq.n	800adde <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 800addc:	e798      	b.n	800ad10 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 800adde:	bf00      	nop
 800ade0:	3724      	adds	r7, #36	; 0x24
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 800adea:	b480      	push	{r7}
 800adec:	b097      	sub	sp, #92	; 0x5c
 800adee:	af00      	add	r7, sp, #0
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	60b9      	str	r1, [r7, #8]
 800adf4:	607a      	str	r2, [r7, #4]
 800adf6:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	005b      	lsls	r3, r3, #1
 800ae00:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	4613      	mov	r3, r2
 800ae06:	005b      	lsls	r3, r3, #1
 800ae08:	4413      	add	r3, r2
 800ae0a:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800ae12:	657b      	str	r3, [r7, #84]	; 0x54
 800ae14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae16:	653b      	str	r3, [r7, #80]	; 0x50
 800ae18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae1a:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	00db      	lsls	r3, r3, #3
 800ae20:	68fa      	ldr	r2, [r7, #12]
 800ae22:	4413      	add	r3, r2
 800ae24:	ed93 7a00 	vldr	s14, [r3]
 800ae28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae2a:	edd3 7a00 	vldr	s15, [r3]
 800ae2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	00db      	lsls	r3, r3, #3
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	4413      	add	r3, r2
 800ae3a:	edd3 6a01 	vldr	s13, [r3, #4]
 800ae3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae40:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae48:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae4c:	edc7 7a04 	vstr	s15, [r7, #16]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	00db      	lsls	r3, r3, #3
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	4413      	add	r3, r2
 800ae58:	ed93 7a00 	vldr	s14, [r3]
 800ae5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae5e:	edd3 7a01 	vldr	s15, [r3, #4]
 800ae62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	00db      	lsls	r3, r3, #3
 800ae6a:	68fa      	ldr	r2, [r7, #12]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	edd3 6a01 	vldr	s13, [r3, #4]
 800ae72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae74:	edd3 7a00 	vldr	s15, [r3]
 800ae78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae80:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 800ae84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae86:	00db      	lsls	r3, r3, #3
 800ae88:	68fa      	ldr	r2, [r7, #12]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	ed93 7a00 	vldr	s14, [r3]
 800ae90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae92:	edd3 7a00 	vldr	s15, [r3]
 800ae96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae9c:	00db      	lsls	r3, r3, #3
 800ae9e:	68fa      	ldr	r2, [r7, #12]
 800aea0:	4413      	add	r3, r2
 800aea2:	edd3 6a01 	vldr	s13, [r3, #4]
 800aea6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aea8:	edd3 7a01 	vldr	s15, [r3, #4]
 800aeac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aeb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeb4:	edc7 7a06 	vstr	s15, [r7, #24]
 800aeb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aeba:	00db      	lsls	r3, r3, #3
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	ed93 7a00 	vldr	s14, [r3]
 800aec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aec6:	edd3 7a01 	vldr	s15, [r3, #4]
 800aeca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aed0:	00db      	lsls	r3, r3, #3
 800aed2:	68fa      	ldr	r2, [r7, #12]
 800aed4:	4413      	add	r3, r2
 800aed6:	edd3 6a01 	vldr	s13, [r3, #4]
 800aeda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aedc:	edd3 7a00 	vldr	s15, [r3]
 800aee0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aee8:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 800aeec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	68fa      	ldr	r2, [r7, #12]
 800aef2:	4413      	add	r3, r2
 800aef4:	ed93 7a00 	vldr	s14, [r3]
 800aef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aefa:	edd3 7a00 	vldr	s15, [r3]
 800aefe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	4413      	add	r3, r2
 800af0a:	edd3 6a01 	vldr	s13, [r3, #4]
 800af0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af10:	edd3 7a01 	vldr	s15, [r3, #4]
 800af14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af1c:	edc7 7a08 	vstr	s15, [r7, #32]
 800af20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af22:	00db      	lsls	r3, r3, #3
 800af24:	68fa      	ldr	r2, [r7, #12]
 800af26:	4413      	add	r3, r2
 800af28:	ed93 7a00 	vldr	s14, [r3]
 800af2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af2e:	edd3 7a01 	vldr	s15, [r3, #4]
 800af32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af38:	00db      	lsls	r3, r3, #3
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	4413      	add	r3, r2
 800af3e:	edd3 6a01 	vldr	s13, [r3, #4]
 800af42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af44:	edd3 7a00 	vldr	s15, [r3]
 800af48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800af4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af50:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	ed93 7a00 	vldr	s14, [r3]
 800af5a:	edd7 7a06 	vldr	s15, [r7, #24]
 800af5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af62:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	ed93 7a01 	vldr	s14, [r3, #4]
 800af6c:	edd7 7a07 	vldr	s15, [r7, #28]
 800af70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af74:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	ed93 7a00 	vldr	s14, [r3]
 800af7e:	edd7 7a06 	vldr	s15, [r7, #24]
 800af82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	edc3 7a00 	vstr	s15, [r3]
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	ed93 7a01 	vldr	s14, [r3, #4]
 800af92:	edd7 7a07 	vldr	s15, [r7, #28]
 800af96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 800afa0:	ed97 7a04 	vldr	s14, [r7, #16]
 800afa4:	edd7 7a08 	vldr	s15, [r7, #32]
 800afa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800afb0:	ed97 7a05 	vldr	s14, [r7, #20]
 800afb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800afb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afbc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 800afc0:	ed97 7a04 	vldr	s14, [r7, #16]
 800afc4:	edd7 7a08 	vldr	s15, [r7, #32]
 800afc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afcc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800afd0:	ed97 7a05 	vldr	s14, [r7, #20]
 800afd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800afd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afdc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	ed93 7a00 	vldr	s14, [r3]
 800afe6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afec:	00db      	lsls	r3, r3, #3
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	4413      	add	r3, r2
 800aff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aff6:	edc3 7a00 	vstr	s15, [r3]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	ed93 7a01 	vldr	s14, [r3, #4]
 800b000:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b006:	00db      	lsls	r3, r3, #3
 800b008:	68fa      	ldr	r2, [r7, #12]
 800b00a:	4413      	add	r3, r2
 800b00c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b010:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b01a:	4413      	add	r3, r2
 800b01c:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	011b      	lsls	r3, r3, #4
 800b022:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b024:	4413      	add	r3, r2
 800b026:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	4613      	mov	r3, r2
 800b02c:	005b      	lsls	r3, r3, #1
 800b02e:	4413      	add	r3, r2
 800b030:	00db      	lsls	r3, r3, #3
 800b032:	461a      	mov	r2, r3
 800b034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b036:	4413      	add	r3, r2
 800b038:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	ed93 7a00 	vldr	s14, [r3]
 800b040:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b044:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	edc3 7a00 	vstr	s15, [r3]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	ed93 7a01 	vldr	s14, [r3, #4]
 800b054:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d030      	beq.n	800b0cc <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 800b06a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b06e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	4413      	add	r3, r2
 800b07a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b07e:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 800b082:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b086:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	00db      	lsls	r3, r3, #3
 800b08e:	68fa      	ldr	r2, [r7, #12]
 800b090:	4413      	add	r3, r2
 800b092:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b096:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 800b09a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b09e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0a4:	00db      	lsls	r3, r3, #3
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0ae:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 800b0b2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b0b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b0ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0bc:	00db      	lsls	r3, r3, #3
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0c6:	edc3 7a01 	vstr	s15, [r3, #4]
 800b0ca:	e02f      	b.n	800b12c <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 800b0cc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b0d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	00db      	lsls	r3, r3, #3
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	4413      	add	r3, r2
 800b0dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0e0:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 800b0e4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b0e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0f8:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 800b0fc:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b100:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	68fa      	ldr	r2, [r7, #12]
 800b10a:	4413      	add	r3, r2
 800b10c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b110:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 800b114:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b118:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b11c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b11e:	00db      	lsls	r3, r3, #3
 800b120:	68fa      	ldr	r2, [r7, #12]
 800b122:	4413      	add	r3, r2
 800b124:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b128:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	3308      	adds	r3, #8
 800b130:	60fb      	str	r3, [r7, #12]
    }while(--k);
 800b132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b134:	3b01      	subs	r3, #1
 800b136:	64bb      	str	r3, [r7, #72]	; 0x48
 800b138:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	bf14      	ite	ne
 800b13e:	2301      	movne	r3, #1
 800b140:	2300      	moveq	r3, #0
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	d000      	beq.n	800b14a <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 800b148:	e668      	b.n	800ae1c <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 800b14a:	bf00      	nop
 800b14c:	375c      	adds	r7, #92	; 0x5c
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
	...

0800b158 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 800b158:	b5b0      	push	{r4, r5, r7, lr}
 800b15a:	b094      	sub	sp, #80	; 0x50
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
     size_t k=m;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	005b      	lsls	r3, r3, #1
 800b16e:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	fb02 f303 	mul.w	r3, r2, r3
 800b178:	6879      	ldr	r1, [r7, #4]
 800b17a:	3321      	adds	r3, #33	; 0x21
 800b17c:	f107 0210 	add.w	r2, r7, #16
 800b180:	00db      	lsls	r3, r3, #3
 800b182:	440b      	add	r3, r1
 800b184:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b188:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b192:	647b      	str	r3, [r7, #68]	; 0x44
 800b194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b196:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	00db      	lsls	r3, r3, #3
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	4413      	add	r3, r2
 800b1a0:	ed93 7a00 	vldr	s14, [r3]
 800b1a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1a6:	edd3 7a00 	vldr	s15, [r3]
 800b1aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	00db      	lsls	r3, r3, #3
 800b1b2:	68fa      	ldr	r2, [r7, #12]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	edd3 6a01 	vldr	s13, [r3, #4]
 800b1ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1bc:	edd3 7a01 	vldr	s15, [r3, #4]
 800b1c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1c8:	edc7 7a08 	vstr	s15, [r7, #32]
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	00db      	lsls	r3, r3, #3
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	ed93 7a00 	vldr	s14, [r3]
 800b1d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1da:	edd3 7a01 	vldr	s15, [r3, #4]
 800b1de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	00db      	lsls	r3, r3, #3
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	4413      	add	r3, r2
 800b1ea:	edd3 6a01 	vldr	s13, [r3, #4]
 800b1ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1f0:	edd3 7a00 	vldr	s15, [r3]
 800b1f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 800b200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	68fa      	ldr	r2, [r7, #12]
 800b206:	4413      	add	r3, r2
 800b208:	ed93 7a00 	vldr	s14, [r3]
 800b20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b20e:	edd3 7a00 	vldr	s15, [r3]
 800b212:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	68fa      	ldr	r2, [r7, #12]
 800b21c:	4413      	add	r3, r2
 800b21e:	edd3 6a01 	vldr	s13, [r3, #4]
 800b222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b224:	edd3 7a01 	vldr	s15, [r3, #4]
 800b228:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b22c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b230:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800b234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b236:	00db      	lsls	r3, r3, #3
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	4413      	add	r3, r2
 800b23c:	ed93 7a00 	vldr	s14, [r3]
 800b240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b242:	edd3 7a01 	vldr	s15, [r3, #4]
 800b246:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b24a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b24c:	00db      	lsls	r3, r3, #3
 800b24e:	68fa      	ldr	r2, [r7, #12]
 800b250:	4413      	add	r3, r2
 800b252:	edd3 6a01 	vldr	s13, [r3, #4]
 800b256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b258:	edd3 7a00 	vldr	s15, [r3]
 800b25c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b260:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b264:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 800b268:	ed97 7a08 	vldr	s14, [r7, #32]
 800b26c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b270:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b274:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800b278:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b27c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b280:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b284:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 800b288:	ed97 7a08 	vldr	s14, [r7, #32]
 800b28c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b290:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b294:	edc7 7a06 	vstr	s15, [r7, #24]
 800b298:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b29c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800b2a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2a4:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	00db      	lsls	r3, r3, #3
 800b2ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2ae:	4413      	add	r3, r2
 800b2b0:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	011b      	lsls	r3, r3, #4
 800b2b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2b8:	4413      	add	r3, r2
 800b2ba:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7f5 f959 	bl	8000578 <__aeabi_f2d>
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7f5 f953 	bl	8000578 <__aeabi_f2d>
 800b2d2:	f04f 0200 	mov.w	r2, #0
 800b2d6:	4b57      	ldr	r3, [pc, #348]	; (800b434 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800b2d8:	f7f5 f9a6 	bl	8000628 <__aeabi_dmul>
 800b2dc:	4602      	mov	r2, r0
 800b2de:	460b      	mov	r3, r1
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	4629      	mov	r1, r5
 800b2e4:	f7f4 ffe8 	bl	80002b8 <__aeabi_dsub>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	18d4      	adds	r4, r2, r3
 800b2f8:	f7f5 fc8e 	bl	8000c18 <__aeabi_d2f>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	4618      	mov	r0, r3
 800b306:	f7f5 f937 	bl	8000578 <__aeabi_f2d>
 800b30a:	4604      	mov	r4, r0
 800b30c:	460d      	mov	r5, r1
 800b30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b310:	4618      	mov	r0, r3
 800b312:	f7f5 f931 	bl	8000578 <__aeabi_f2d>
 800b316:	f04f 0200 	mov.w	r2, #0
 800b31a:	4b46      	ldr	r3, [pc, #280]	; (800b434 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800b31c:	f7f5 f984 	bl	8000628 <__aeabi_dmul>
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	4620      	mov	r0, r4
 800b326:	4629      	mov	r1, r5
 800b328:	f7f4 ffc6 	bl	80002b8 <__aeabi_dsub>
 800b32c:	4603      	mov	r3, r0
 800b32e:	460c      	mov	r4, r1
 800b330:	4618      	mov	r0, r3
 800b332:	4621      	mov	r1, r4
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	18d4      	adds	r4, r2, r3
 800b33c:	f7f5 fc6c 	bl	8000c18 <__aeabi_d2f>
 800b340:	4603      	mov	r3, r0
 800b342:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 800b344:	ed97 7a06 	vldr	s14, [r7, #24]
 800b348:	edd7 7a05 	vldr	s15, [r7, #20]
 800b34c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b350:	edc7 7a06 	vstr	s15, [r7, #24]
 800b354:	ed97 7a07 	vldr	s14, [r7, #28]
 800b358:	edd7 7a05 	vldr	s15, [r7, #20]
 800b35c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b360:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	ed93 7a00 	vldr	s14, [r3]
 800b36a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b36e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	edc3 7a00 	vstr	s15, [r3]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	ed93 7a01 	vldr	s14, [r3, #4]
 800b37e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b382:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	00db      	lsls	r3, r3, #3
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	ed93 7a00 	vldr	s14, [r3]
 800b398:	edd7 7a07 	vldr	s15, [r7, #28]
 800b39c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b39e:	00db      	lsls	r3, r3, #3
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3a8:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	00db      	lsls	r3, r3, #3
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	ed93 7a01 	vldr	s14, [r3, #4]
 800b3b8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3be:	00db      	lsls	r3, r3, #3
 800b3c0:	68fa      	ldr	r2, [r7, #12]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3c8:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	00db      	lsls	r3, r3, #3
 800b3d0:	68fa      	ldr	r2, [r7, #12]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	ed93 7a00 	vldr	s14, [r3]
 800b3d8:	edd7 7a07 	vldr	s15, [r7, #28]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	00db      	lsls	r3, r3, #3
 800b3e0:	68fa      	ldr	r2, [r7, #12]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3e8:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	00db      	lsls	r3, r3, #3
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	ed93 7a01 	vldr	s14, [r3, #4]
 800b3f8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	00db      	lsls	r3, r3, #3
 800b400:	68fa      	ldr	r2, [r7, #12]
 800b402:	4413      	add	r3, r2
 800b404:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b408:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3308      	adds	r3, #8
 800b410:	60fb      	str	r3, [r7, #12]
     }while(--k);
 800b412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b414:	3b01      	subs	r3, #1
 800b416:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	bf14      	ite	ne
 800b41e:	2301      	movne	r3, #1
 800b420:	2300      	moveq	r3, #0
 800b422:	b2db      	uxtb	r3, r3
 800b424:	2b00      	cmp	r3, #0
 800b426:	d000      	beq.n	800b42a <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 800b428:	e6b6      	b.n	800b198 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 800b42a:	bf00      	nop
 800b42c:	3750      	adds	r7, #80	; 0x50
 800b42e:	46bd      	mov	sp, r7
 800b430:	bdb0      	pop	{r4, r5, r7, pc}
 800b432:	bf00      	nop
 800b434:	3fe00000 	.word	0x3fe00000

0800b438 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800b438:	b480      	push	{r7}
 800b43a:	b0ab      	sub	sp, #172	; 0xac
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b44c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	fb02 f303 	mul.w	r3, r2, r3
 800b458:	00db      	lsls	r3, r3, #3
 800b45a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b45e:	441a      	add	r2, r3
 800b460:	f107 0318 	add.w	r3, r7, #24
 800b464:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b468:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	68ba      	ldr	r2, [r7, #8]
 800b470:	fb02 f303 	mul.w	r3, r2, r3
 800b474:	011b      	lsls	r3, r3, #4
 800b476:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b47a:	441a      	add	r2, r3
 800b47c:	f107 0310 	add.w	r3, r7, #16
 800b480:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b484:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	00db      	lsls	r3, r3, #3
 800b492:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b496:	4413      	add	r3, r2
 800b498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 800b4ac:	683a      	ldr	r2, [r7, #0]
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	005b      	lsls	r3, r3, #1
 800b4b2:	4413      	add	r3, r2
 800b4b4:	00db      	lsls	r3, r3, #3
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4bc:	4413      	add	r3, r2
 800b4be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	015b      	lsls	r3, r3, #5
 800b4c6:	461a      	mov	r2, r3
 800b4c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b4d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4e2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	f280 82a9 	bge.w	800ba40 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x608>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 800b4ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b4f2:	f107 0320 	add.w	r3, r7, #32
 800b4f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b4fa:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 800b4fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b502:	ed93 7a00 	vldr	s14, [r3]
 800b506:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	fb02 f303 	mul.w	r3, r2, r3
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b516:	4413      	add	r3, r2
 800b518:	edd3 7a00 	vldr	s15, [r3]
 800b51c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b520:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b524:	edd3 6a01 	vldr	s13, [r3, #4]
 800b528:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b52c:	68ba      	ldr	r2, [r7, #8]
 800b52e:	fb02 f303 	mul.w	r3, r2, r3
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b538:	4413      	add	r3, r2
 800b53a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b53e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b542:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b546:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800b54a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b54e:	ed93 7a00 	vldr	s14, [r3]
 800b552:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b556:	68ba      	ldr	r2, [r7, #8]
 800b558:	fb02 f303 	mul.w	r3, r2, r3
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b562:	4413      	add	r3, r2
 800b564:	edd3 7a01 	vldr	s15, [r3, #4]
 800b568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b56c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b570:	edd3 6a01 	vldr	s13, [r3, #4]
 800b574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b578:	68ba      	ldr	r2, [r7, #8]
 800b57a:	fb02 f303 	mul.w	r3, r2, r3
 800b57e:	00db      	lsls	r3, r3, #3
 800b580:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b584:	4413      	add	r3, r2
 800b586:	edd3 7a00 	vldr	s15, [r3]
 800b58a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b58e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b592:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 800b596:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b59a:	ed93 7a00 	vldr	s14, [r3]
 800b59e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5a2:	68ba      	ldr	r2, [r7, #8]
 800b5a4:	fb02 f303 	mul.w	r3, r2, r3
 800b5a8:	011b      	lsls	r3, r3, #4
 800b5aa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5ae:	4413      	add	r3, r2
 800b5b0:	edd3 7a00 	vldr	s15, [r3]
 800b5b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5bc:	edd3 6a01 	vldr	s13, [r3, #4]
 800b5c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5c4:	68ba      	ldr	r2, [r7, #8]
 800b5c6:	fb02 f303 	mul.w	r3, r2, r3
 800b5ca:	011b      	lsls	r3, r3, #4
 800b5cc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5d0:	4413      	add	r3, r2
 800b5d2:	edd3 7a01 	vldr	s15, [r3, #4]
 800b5d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b5da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800b5e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5e6:	ed93 7a00 	vldr	s14, [r3]
 800b5ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b5ee:	68ba      	ldr	r2, [r7, #8]
 800b5f0:	fb02 f303 	mul.w	r3, r2, r3
 800b5f4:	011b      	lsls	r3, r3, #4
 800b5f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b5fa:	4413      	add	r3, r2
 800b5fc:	edd3 7a01 	vldr	s15, [r3, #4]
 800b600:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b608:	edd3 6a01 	vldr	s13, [r3, #4]
 800b60c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	fb02 f303 	mul.w	r3, r2, r3
 800b616:	011b      	lsls	r3, r3, #4
 800b618:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b61c:	4413      	add	r3, r2
 800b61e:	edd3 7a00 	vldr	s15, [r3]
 800b622:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b62a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 800b62e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b632:	ed93 7a00 	vldr	s14, [r3]
 800b636:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	fb02 f203 	mul.w	r2, r2, r3
 800b640:	4613      	mov	r3, r2
 800b642:	005b      	lsls	r3, r3, #1
 800b644:	4413      	add	r3, r2
 800b646:	00db      	lsls	r3, r3, #3
 800b648:	461a      	mov	r2, r3
 800b64a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b64e:	4413      	add	r3, r2
 800b650:	edd3 7a00 	vldr	s15, [r3]
 800b654:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b65c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	fb02 f203 	mul.w	r2, r2, r3
 800b66a:	4613      	mov	r3, r2
 800b66c:	005b      	lsls	r3, r3, #1
 800b66e:	4413      	add	r3, r2
 800b670:	00db      	lsls	r3, r3, #3
 800b672:	461a      	mov	r2, r3
 800b674:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b678:	4413      	add	r3, r2
 800b67a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b67e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b682:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b686:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800b68a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b68e:	ed93 7a00 	vldr	s14, [r3]
 800b692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	fb02 f203 	mul.w	r2, r2, r3
 800b69c:	4613      	mov	r3, r2
 800b69e:	005b      	lsls	r3, r3, #1
 800b6a0:	4413      	add	r3, r2
 800b6a2:	00db      	lsls	r3, r3, #3
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6aa:	4413      	add	r3, r2
 800b6ac:	edd3 7a01 	vldr	s15, [r3, #4]
 800b6b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6b8:	edd3 6a01 	vldr	s13, [r3, #4]
 800b6bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6c0:	68ba      	ldr	r2, [r7, #8]
 800b6c2:	fb02 f203 	mul.w	r2, r2, r3
 800b6c6:	4613      	mov	r3, r2
 800b6c8:	005b      	lsls	r3, r3, #1
 800b6ca:	4413      	add	r3, r2
 800b6cc:	00db      	lsls	r3, r3, #3
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6d4:	4413      	add	r3, r2
 800b6d6:	edd3 7a00 	vldr	s15, [r3]
 800b6da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b6de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6e2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 800b6e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b6ea:	ed93 7a00 	vldr	s14, [r3]
 800b6ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	fb02 f303 	mul.w	r3, r2, r3
 800b6f8:	015b      	lsls	r3, r3, #5
 800b6fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b6fe:	4413      	add	r3, r2
 800b700:	edd3 7a00 	vldr	s15, [r3]
 800b704:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b708:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b70c:	edd3 6a01 	vldr	s13, [r3, #4]
 800b710:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b714:	68ba      	ldr	r2, [r7, #8]
 800b716:	fb02 f303 	mul.w	r3, r2, r3
 800b71a:	015b      	lsls	r3, r3, #5
 800b71c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b720:	4413      	add	r3, r2
 800b722:	edd3 7a01 	vldr	s15, [r3, #4]
 800b726:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b72a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b72e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800b732:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b736:	ed93 7a00 	vldr	s14, [r3]
 800b73a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	fb02 f303 	mul.w	r3, r2, r3
 800b744:	015b      	lsls	r3, r3, #5
 800b746:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b74a:	4413      	add	r3, r2
 800b74c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b750:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b754:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b758:	edd3 6a01 	vldr	s13, [r3, #4]
 800b75c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	fb02 f303 	mul.w	r3, r2, r3
 800b766:	015b      	lsls	r3, r3, #5
 800b768:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b76c:	4413      	add	r3, r2
 800b76e:	edd3 7a00 	vldr	s15, [r3]
 800b772:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b77a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 800b77e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b782:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800b786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b78a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800b78e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b792:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b79a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 800b79e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7a2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800b7a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7aa:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 800b7ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b7b2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b7b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7ba:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 800b7be:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b7c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b7c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7ca:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 800b7ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b7d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7da:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 800b7de:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b7e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b7e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7ea:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800b7ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b7f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7fa:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 800b7fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b802:	ed93 7a00 	vldr	s14, [r3]
 800b806:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800b80a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800b80e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b812:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b81a:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 800b81e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b822:	ed93 7a01 	vldr	s14, [r3, #4]
 800b826:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800b82a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800b82e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b832:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b83a:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 800b83e:	ed97 7a08 	vldr	s14, [r7, #32]
 800b842:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800b846:	edd7 7a06 	vldr	s15, [r7, #24]
 800b84a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b84e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b852:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800b856:	edd7 7a04 	vldr	s15, [r7, #16]
 800b85a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b85e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b862:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 800b866:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b86a:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800b86e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b876:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b87a:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800b87e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b88a:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 800b88e:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800b892:	edd7 7a07 	vldr	s15, [r7, #28]
 800b896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b89a:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800b89e:	edd7 7a05 	vldr	s15, [r7, #20]
 800b8a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8aa:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 800b8ae:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800b8b2:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ba:	eeb1 7a67 	vneg.f32	s14, s15
 800b8be:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800b8c2:	edd7 7a05 	vldr	s15, [r7, #20]
 800b8c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b8ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8ce:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 800b8d2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b8d6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800b8da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8e2:	edc3 7a00 	vstr	s15, [r3]
 800b8e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b8ea:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800b8ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b8f6:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 800b8fa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b8fe:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800b902:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b906:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b90a:	edc3 7a00 	vstr	s15, [r3]
 800b90e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b912:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800b916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b91a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b91e:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 800b922:	ed97 7a08 	vldr	s14, [r7, #32]
 800b926:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800b92a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b92e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b932:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b936:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800b93a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b93e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b942:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b946:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 800b94a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b94e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800b952:	edd7 7a04 	vldr	s15, [r7, #16]
 800b956:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b95a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b95e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800b962:	edd7 7a06 	vldr	s15, [r7, #24]
 800b966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b96a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b96e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 800b972:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800b976:	edd7 7a07 	vldr	s15, [r7, #28]
 800b97a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b97e:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800b982:	edd7 7a05 	vldr	s15, [r7, #20]
 800b986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b98a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b98e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 800b992:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800b996:	edd7 7a05 	vldr	s15, [r7, #20]
 800b99a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b99e:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800b9a2:	edd7 7a07 	vldr	s15, [r7, #28]
 800b9a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ae:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 800b9b2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800b9b6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b9ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b9c2:	edc3 7a00 	vstr	s15, [r3]
 800b9c6:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800b9ca:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b9ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b9d6:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 800b9da:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800b9de:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b9e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9ea:	edc3 7a00 	vstr	s15, [r3]
 800b9ee:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800b9f2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b9f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b9fe:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 800ba02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba06:	3308      	adds	r3, #8
 800ba08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ba0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba10:	3308      	adds	r3, #8
 800ba12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ba16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ba1a:	3308      	adds	r3, #8
 800ba1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ba20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ba24:	3308      	adds	r3, #8
 800ba26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ba2e:	3308      	adds	r3, #8
 800ba30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 800ba34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ba38:	3301      	adds	r3, #1
 800ba3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ba3e:	e550      	b.n	800b4e2 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xaa>
    }
}
 800ba40:	bf00      	nop
 800ba42:	37ac      	adds	r7, #172	; 0xac
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b08e      	sub	sp, #56	; 0x38
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	60f8      	str	r0, [r7, #12]
 800ba54:	60b9      	str	r1, [r7, #8]
 800ba56:	607a      	str	r2, [r7, #4]
 800ba58:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800ba60:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 800ba68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba6a:	00db      	lsls	r3, r3, #3
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 fe9d 	bl	800c7ac <_Z9ei_mallocj>
 800ba72:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 800ba74:	2300      	movs	r3, #0
 800ba76:	637b      	str	r3, [r7, #52]	; 0x34
 800ba78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	f280 80b6 	bge.w	800bbee <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 800ba82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba84:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800ba86:	2300      	movs	r3, #0
 800ba88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ba8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	da14      	bge.n	800babc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 800ba92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba94:	00db      	lsls	r3, r3, #3
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	18d1      	adds	r1, r2, r3
 800ba9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9c:	00db      	lsls	r3, r3, #3
 800ba9e:	69ba      	ldr	r2, [r7, #24]
 800baa0:	4413      	add	r3, r2
 800baa2:	460a      	mov	r2, r1
 800baa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800baa8:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 800baac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	4413      	add	r3, r2
 800bab2:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800bab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab6:	3301      	adds	r3, #1
 800bab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baba:	e7e6      	b.n	800ba8a <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 800babc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800babe:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800bac0:	2300      	movs	r3, #0
 800bac2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bac4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bac8:	429a      	cmp	r2, r3
 800baca:	f280 808c 	bge.w	800bbe6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 800bace:	2300      	movs	r3, #0
 800bad0:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	00db      	lsls	r3, r3, #3
 800bad6:	68fa      	ldr	r2, [r7, #12]
 800bad8:	4413      	add	r3, r2
 800bada:	69ba      	ldr	r2, [r7, #24]
 800badc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bae0:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 800bae4:	2301      	movs	r3, #1
 800bae6:	62bb      	str	r3, [r7, #40]	; 0x28
 800bae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800baec:	429a      	cmp	r2, r3
 800baee:	da72      	bge.n	800bbd6 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 800baf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	fb02 f203 	mul.w	r2, r2, r3
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	4413      	add	r3, r2
 800bafc:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 800bafe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	db03      	blt.n	800bb0e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 800bb06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb08:	69fb      	ldr	r3, [r7, #28]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	00db      	lsls	r3, r3, #3
 800bb12:	69ba      	ldr	r2, [r7, #24]
 800bb14:	4413      	add	r3, r2
 800bb16:	ed93 7a00 	vldr	s14, [r3]
 800bb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb1c:	00db      	lsls	r3, r3, #3
 800bb1e:	6a3a      	ldr	r2, [r7, #32]
 800bb20:	4413      	add	r3, r2
 800bb22:	edd3 7a00 	vldr	s15, [r3]
 800bb26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	4413      	add	r3, r2
 800bb32:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb38:	00db      	lsls	r3, r3, #3
 800bb3a:	6a3a      	ldr	r2, [r7, #32]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb4a:	edc7 7a04 	vstr	s15, [r7, #16]
 800bb4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb50:	00db      	lsls	r3, r3, #3
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	4413      	add	r3, r2
 800bb56:	ed93 7a00 	vldr	s14, [r3]
 800bb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5c:	00db      	lsls	r3, r3, #3
 800bb5e:	6a3a      	ldr	r2, [r7, #32]
 800bb60:	4413      	add	r3, r2
 800bb62:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6c:	00db      	lsls	r3, r3, #3
 800bb6e:	69ba      	ldr	r2, [r7, #24]
 800bb70:	4413      	add	r3, r2
 800bb72:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	00db      	lsls	r3, r3, #3
 800bb7a:	6a3a      	ldr	r2, [r7, #32]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	edd3 7a00 	vldr	s15, [r3]
 800bb82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb8a:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 800bb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb90:	00db      	lsls	r3, r3, #3
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	4413      	add	r3, r2
 800bb96:	ed93 7a00 	vldr	s14, [r3]
 800bb9a:	edd7 7a04 	vldr	s15, [r7, #16]
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	00db      	lsls	r3, r3, #3
 800bba2:	68fa      	ldr	r2, [r7, #12]
 800bba4:	4413      	add	r3, r2
 800bba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbaa:	edc3 7a00 	vstr	s15, [r3]
 800bbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	ed93 7a01 	vldr	s14, [r3, #4]
 800bbba:	edd7 7a05 	vldr	s15, [r7, #20]
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc0:	00db      	lsls	r3, r3, #3
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbca:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 800bbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbd4:	e788      	b.n	800bae8 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 800bbd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	4413      	add	r3, r2
 800bbdc:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800bbde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbe4:	e76e      	b.n	800bac4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 800bbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe8:	3301      	adds	r3, #1
 800bbea:	637b      	str	r3, [r7, #52]	; 0x34
 800bbec:	e744      	b.n	800ba78 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 800bbee:	69b8      	ldr	r0, [r7, #24]
 800bbf0:	f000 fdf6 	bl	800c7e0 <_Z7ei_freePv>
}
 800bbf4:	bf00      	nop
 800bbf6:	3738      	adds	r7, #56	; 0x38
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b08a      	sub	sp, #40	; 0x28
 800bc00:	af02      	add	r7, sp, #8
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
 800bc08:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	1d1a      	adds	r2, r3, #4
 800bc12:	62ba      	str	r2, [r7, #40]	; 0x28
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	1d1a      	adds	r2, r3, #4
 800bc1c:	62ba      	str	r2, [r7, #40]	; 0x28
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 800bc22:	69bb      	ldr	r3, [r7, #24]
 800bc24:	697a      	ldr	r2, [r7, #20]
 800bc26:	fb02 f303 	mul.w	r3, r2, r3
 800bc2a:	00db      	lsls	r3, r3, #3
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	4413      	add	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d11a      	bne.n	800bc6e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc40:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	fb02 f303 	mul.w	r3, r2, r3
 800bc4c:	00db      	lsls	r3, r3, #3
 800bc4e:	68ba      	ldr	r2, [r7, #8]
 800bc50:	4413      	add	r3, r2
 800bc52:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	3308      	adds	r3, #8
 800bc58:	60fb      	str	r3, [r7, #12]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	bf14      	ite	ne
 800bc62:	2301      	movne	r3, #1
 800bc64:	2300      	moveq	r3, #0
 800bc66:	b2db      	uxtb	r3, r3
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d024      	beq.n	800bcb6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800bc6c:	e7e4      	b.n	800bc38 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	fb02 f203 	mul.w	r2, r2, r3
 800bc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc78:	9301      	str	r3, [sp, #4]
 800bc7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc7c:	9300      	str	r3, [sp, #0]
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	68b9      	ldr	r1, [r7, #8]
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f7ff ffba 	bl	800bbfc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	fb02 f303 	mul.w	r3, r2, r3
 800bc90:	00db      	lsls	r3, r3, #3
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	4413      	add	r3, r2
 800bc96:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	00db      	lsls	r3, r3, #3
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	60fb      	str	r3, [r7, #12]
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	bf14      	ite	ne
 800bcaa:	2301      	movne	r3, #1
 800bcac:	2300      	moveq	r3, #0
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d000      	beq.n	800bcb6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800bcb4:	e7db      	b.n	800bc6e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	3b02      	subs	r3, #2
 800bcbe:	2b03      	cmp	r3, #3
 800bcc0:	d826      	bhi.n	800bd10 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 800bcc2:	a201      	add	r2, pc, #4	; (adr r2, 800bcc8 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 800bcc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc8:	0800bcd9 	.word	0x0800bcd9
 800bccc:	0800bce7 	.word	0x0800bce7
 800bcd0:	0800bcf5 	.word	0x0800bcf5
 800bcd4:	0800bd03 	.word	0x0800bd03
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcdc:	6879      	ldr	r1, [r7, #4]
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f7ff f806 	bl	800acf0 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 800bce4:	e01d      	b.n	800bd22 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcea:	6879      	ldr	r1, [r7, #4]
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f7ff fa33 	bl	800b158 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 800bcf2:	e016      	b.n	800bd22 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bcf8:	6879      	ldr	r1, [r7, #4]
 800bcfa:	68f8      	ldr	r0, [r7, #12]
 800bcfc:	f7ff f875 	bl	800adea <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 800bd00:	e00f      	b.n	800bd22 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd06:	6879      	ldr	r1, [r7, #4]
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f7ff fb95 	bl	800b438 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 800bd0e:	e008      	b.n	800bd22 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd18:	6879      	ldr	r1, [r7, #4]
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f7ff fe96 	bl	800ba4c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 800bd20:	bf00      	nop
    }
}
 800bd22:	bf00      	nop
 800bd24:	3720      	adds	r7, #32
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop

0800bd2c <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 800bd2c:	b590      	push	{r4, r7, lr}
 800bd2e:	b087      	sub	sp, #28
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
    int p=4;
 800bd36:	2304      	movs	r3, #4
 800bd38:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7f4 fc0a 	bl	8000554 <__aeabi_i2d>
 800bd40:	4603      	mov	r3, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	ec44 3b10 	vmov	d0, r3, r4
 800bd48:	f006 fb5c 	bl	8012404 <sqrt>
 800bd4c:	eeb0 7a40 	vmov.f32	s14, s0
 800bd50:	eef0 7a60 	vmov.f32	s15, s1
 800bd54:	eeb0 0a47 	vmov.f32	s0, s14
 800bd58:	eef0 0a67 	vmov.f32	s1, s15
 800bd5c:	f006 f840 	bl	8011de0 <floor>
 800bd60:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	fb93 f2f2 	sdiv	r2, r3, r2
 800bd6c:	6979      	ldr	r1, [r7, #20]
 800bd6e:	fb01 f202 	mul.w	r2, r1, r2
 800bd72:	1a9b      	subs	r3, r3, r2
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d01f      	beq.n	800bdb8 <_ZL9kf_factoriPi+0x8c>
            switch (p) {
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2b02      	cmp	r3, #2
 800bd7c:	d004      	beq.n	800bd88 <_ZL9kf_factoriPi+0x5c>
 800bd7e:	2b04      	cmp	r3, #4
 800bd80:	d105      	bne.n	800bd8e <_ZL9kf_factoriPi+0x62>
                case 4: p = 2; break;
 800bd82:	2302      	movs	r3, #2
 800bd84:	617b      	str	r3, [r7, #20]
 800bd86:	e006      	b.n	800bd96 <_ZL9kf_factoriPi+0x6a>
                case 2: p = 3; break;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	e003      	b.n	800bd96 <_ZL9kf_factoriPi+0x6a>
                default: p += 2; break;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	3302      	adds	r3, #2
 800bd92:	617b      	str	r3, [r7, #20]
 800bd94:	bf00      	nop
            }
            if (p > floor_sqrt)
 800bd96:	6978      	ldr	r0, [r7, #20]
 800bd98:	f7f4 fbdc 	bl	8000554 <__aeabi_i2d>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	461a      	mov	r2, r3
 800bda2:	4623      	mov	r3, r4
 800bda4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bda8:	f7f4 feb0 	bl	8000b0c <__aeabi_dcmplt>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <_ZL9kf_factoriPi+0x8a>
                p = n;          /* no more factors, skip to end */
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	617b      	str	r3, [r7, #20]
        while (n % p) {
 800bdb6:	e7d5      	b.n	800bd64 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 800bdb8:	687a      	ldr	r2, [r7, #4]
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	fb92 f3f3 	sdiv	r3, r2, r3
 800bdc0:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	1d1a      	adds	r2, r3, #4
 800bdc6:	603a      	str	r2, [r7, #0]
 800bdc8:	697a      	ldr	r2, [r7, #20]
 800bdca:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	1d1a      	adds	r2, r3, #4
 800bdd0:	603a      	str	r2, [r7, #0]
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	dd00      	ble.n	800bdde <_ZL9kf_factoriPi+0xb2>
    do {
 800bddc:	e7c2      	b.n	800bd64 <_ZL9kf_factoriPi+0x38>
}
 800bdde:	bf00      	nop
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd90      	pop	{r4, r7, pc}
	...

0800bde8 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 800bde8:	b5b0      	push	{r4, r5, r7, lr}
 800bdea:	b090      	sub	sp, #64	; 0x40
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
 800bdf4:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 800bdfa:	68fb      	ldr	r3, [r7, #12]
    size_t memneeded = sizeof(struct kiss_fft_state)
 800bdfc:	3321      	adds	r3, #33	; 0x21
 800bdfe:	00db      	lsls	r3, r3, #3
 800be00:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d104      	bne.n	800be12 <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 800be08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800be0a:	f000 fccf 	bl	800c7ac <_Z9ei_mallocj>
 800be0e:	63f8      	str	r0, [r7, #60]	; 0x3c
 800be10:	e00c      	b.n	800be2c <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d006      	beq.n	800be26 <kiss_fft_alloc+0x3e>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be1e:	429a      	cmp	r2, r3
 800be20:	d801      	bhi.n	800be26 <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be2a:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 800be2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f000 80a0 	beq.w	800bf74 <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 800be34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 800be3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d048      	beq.n	800bed8 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 800be46:	2300      	movs	r3, #0
 800be48:	63bb      	str	r3, [r7, #56]	; 0x38
 800be4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	429a      	cmp	r2, r3
 800be50:	f280 808a 	bge.w	800bf68 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 800be54:	a44e      	add	r4, pc, #312	; (adr r4, 800bf90 <kiss_fft_alloc+0x1a8>)
 800be56:	e9d4 3400 	ldrd	r3, r4, [r4]
 800be5a:	e9c7 3406 	strd	r3, r4, [r7, #24]
                double phase = 2*pi*i / nfft;
 800be5e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800be60:	f7f4 fb78 	bl	8000554 <__aeabi_i2d>
 800be64:	a34c      	add	r3, pc, #304	; (adr r3, 800bf98 <kiss_fft_alloc+0x1b0>)
 800be66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6a:	f7f4 fbdd 	bl	8000628 <__aeabi_dmul>
 800be6e:	4603      	mov	r3, r0
 800be70:	460c      	mov	r4, r1
 800be72:	4625      	mov	r5, r4
 800be74:	461c      	mov	r4, r3
 800be76:	68f8      	ldr	r0, [r7, #12]
 800be78:	f7f4 fb6c 	bl	8000554 <__aeabi_i2d>
 800be7c:	4602      	mov	r2, r0
 800be7e:	460b      	mov	r3, r1
 800be80:	4620      	mov	r0, r4
 800be82:	4629      	mov	r1, r5
 800be84:	f7f4 fcfa 	bl	800087c <__aeabi_ddiv>
 800be88:	4603      	mov	r3, r0
 800be8a:	460c      	mov	r4, r1
 800be8c:	e9c7 3404 	strd	r3, r4, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 800be90:	ed97 0b04 	vldr	d0, [r7, #16]
 800be94:	f005 ff60 	bl	8011d58 <cos>
 800be98:	ec51 0b10 	vmov	r0, r1, d0
 800be9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be9e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800bea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea4:	00db      	lsls	r3, r3, #3
 800bea6:	18d4      	adds	r4, r2, r3
 800bea8:	f7f4 feb6 	bl	8000c18 <__aeabi_d2f>
 800beac:	4603      	mov	r3, r0
 800beae:	6023      	str	r3, [r4, #0]
 800beb0:	ed97 0b04 	vldr	d0, [r7, #16]
 800beb4:	f006 f898 	bl	8011fe8 <sin>
 800beb8:	ec51 0b10 	vmov	r0, r1, d0
 800bebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebe:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800bec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec4:	00db      	lsls	r3, r3, #3
 800bec6:	18d4      	adds	r4, r2, r3
 800bec8:	f7f4 fea6 	bl	8000c18 <__aeabi_d2f>
 800becc:	4603      	mov	r3, r0
 800bece:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 800bed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed2:	3301      	adds	r3, #1
 800bed4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bed6:	e7b8      	b.n	800be4a <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 800bed8:	2300      	movs	r3, #0
 800beda:	63bb      	str	r3, [r7, #56]	; 0x38
 800bedc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	da41      	bge.n	800bf68 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 800bee4:	a42a      	add	r4, pc, #168	; (adr r4, 800bf90 <kiss_fft_alloc+0x1a8>)
 800bee6:	e9d4 3400 	ldrd	r3, r4, [r4]
 800beea:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 800beee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bef0:	f7f4 fb30 	bl	8000554 <__aeabi_i2d>
 800bef4:	a32a      	add	r3, pc, #168	; (adr r3, 800bfa0 <kiss_fft_alloc+0x1b8>)
 800bef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befa:	f7f4 fb95 	bl	8000628 <__aeabi_dmul>
 800befe:	4603      	mov	r3, r0
 800bf00:	460c      	mov	r4, r1
 800bf02:	4625      	mov	r5, r4
 800bf04:	461c      	mov	r4, r3
 800bf06:	68f8      	ldr	r0, [r7, #12]
 800bf08:	f7f4 fb24 	bl	8000554 <__aeabi_i2d>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	4620      	mov	r0, r4
 800bf12:	4629      	mov	r1, r5
 800bf14:	f7f4 fcb2 	bl	800087c <__aeabi_ddiv>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	460c      	mov	r4, r1
 800bf1c:	e9c7 3408 	strd	r3, r4, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 800bf20:	ed97 0b08 	vldr	d0, [r7, #32]
 800bf24:	f005 ff18 	bl	8011d58 <cos>
 800bf28:	ec51 0b10 	vmov	r0, r1, d0
 800bf2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf2e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800bf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	18d4      	adds	r4, r2, r3
 800bf38:	f7f4 fe6e 	bl	8000c18 <__aeabi_d2f>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	6023      	str	r3, [r4, #0]
 800bf40:	ed97 0b08 	vldr	d0, [r7, #32]
 800bf44:	f006 f850 	bl	8011fe8 <sin>
 800bf48:	ec51 0b10 	vmov	r0, r1, d0
 800bf4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf4e:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800bf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf54:	00db      	lsls	r3, r3, #3
 800bf56:	18d4      	adds	r4, r2, r3
 800bf58:	f7f4 fe5e 	bl	8000c18 <__aeabi_d2f>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 800bf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf62:	3301      	adds	r3, #1
 800bf64:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf66:	e7b9      	b.n	800bedc <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 800bf68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf6a:	3308      	adds	r3, #8
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f7ff fedc 	bl	800bd2c <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 800bf74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d002      	beq.n	800bf80 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 800bf7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bf7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf7e:	601a      	str	r2, [r3, #0]
    }

    return st;
 800bf80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3740      	adds	r7, #64	; 0x40
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bdb0      	pop	{r4, r5, r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	f3af 8000 	nop.w
 800bf90:	54442d18 	.word	0x54442d18
 800bf94:	400921fb 	.word	0x400921fb
 800bf98:	54442d18 	.word	0x54442d18
 800bf9c:	401921fb 	.word	0x401921fb
 800bfa0:	54442d18 	.word	0x54442d18
 800bfa4:	c01921fb 	.word	0xc01921fb

0800bfa8 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
 800bfb4:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 800bfb6:	68ba      	ldr	r2, [r7, #8]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d11d      	bne.n	800bffa <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	00db      	lsls	r3, r3, #3
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 fbf1 	bl	800c7ac <_Z9ei_mallocj>
 800bfca:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	3308      	adds	r3, #8
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	9201      	str	r2, [sp, #4]
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	2201      	movs	r2, #1
 800bfda:	68b9      	ldr	r1, [r7, #8]
 800bfdc:	6978      	ldr	r0, [r7, #20]
 800bfde:	f7ff fe0d 	bl	800bbfc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	461a      	mov	r2, r3
 800bfea:	6979      	ldr	r1, [r7, #20]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f008 fe1f 	bl	8014c30 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 800bff2:	6978      	ldr	r0, [r7, #20]
 800bff4:	f000 fbf4 	bl	800c7e0 <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 800bff8:	e00a      	b.n	800c010 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3308      	adds	r3, #8
 800bffe:	68fa      	ldr	r2, [r7, #12]
 800c000:	9201      	str	r2, [sp, #4]
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	2201      	movs	r2, #1
 800c008:	68b9      	ldr	r1, [r7, #8]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7ff fdf6 	bl	800bbfc <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 800c010:	bf00      	nop
 800c012:	3718      	adds	r7, #24
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	60f8      	str	r0, [r7, #12]
 800c020:	60b9      	str	r1, [r7, #8]
 800c022:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 800c024:	2301      	movs	r3, #1
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	68b9      	ldr	r1, [r7, #8]
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7ff ffbc 	bl	800bfa8 <kiss_fft_stride>
}
 800c030:	bf00      	nop
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 800c038:	b5b0      	push	{r4, r5, r7, lr}
 800c03a:	b090      	sub	sp, #64	; 0x40
 800c03c:	af02      	add	r7, sp, #8
 800c03e:	60f8      	str	r0, [r7, #12]
 800c040:	60b9      	str	r1, [r7, #8]
 800c042:	607a      	str	r2, [r7, #4]
 800c044:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 800c046:	2300      	movs	r3, #0
 800c048:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 800c04a:	2300      	movs	r3, #0
 800c04c:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f003 0301 	and.w	r3, r3, #1
 800c054:	2b00      	cmp	r3, #0
 800c056:	d009      	beq.n	800c06c <kiss_fftr_alloc+0x34>
        fprintf(stderr,"Real FFT optimization must be even.\n");
 800c058:	4b89      	ldr	r3, [pc, #548]	; (800c280 <kiss_fftr_alloc+0x248>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	2224      	movs	r2, #36	; 0x24
 800c060:	2101      	movs	r1, #1
 800c062:	4888      	ldr	r0, [pc, #544]	; (800c284 <kiss_fftr_alloc+0x24c>)
 800c064:	f008 fda2 	bl	8014bac <fwrite>
        return NULL;
 800c068:	2300      	movs	r3, #0
 800c06a:	e0fb      	b.n	800c264 <kiss_fftr_alloc+0x22c>
    }
    nfft >>= 1;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	105b      	asrs	r3, r3, #1
 800c070:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 800c072:	f107 0214 	add.w	r2, r7, #20
 800c076:	2300      	movs	r3, #0
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	4613      	mov	r3, r2
 800c07c:	2200      	movs	r2, #0
 800c07e:	68b9      	ldr	r1, [r7, #8]
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f7ff feb1 	bl	800bde8 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	4613      	mov	r3, r2
 800c08a:	005b      	lsls	r3, r3, #1
 800c08c:	4413      	add	r3, r2
 800c08e:	0fda      	lsrs	r2, r3, #31
 800c090:	4413      	add	r3, r2
 800c092:	105b      	asrs	r3, r3, #1
 800c094:	00da      	lsls	r2, r3, #3
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	4413      	add	r3, r2
 800c09a:	330c      	adds	r3, #12
 800c09c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d104      	bne.n	800c0ae <kiss_fftr_alloc+0x76>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 800c0a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0a6:	f000 fb81 	bl	800c7ac <_Z9ei_mallocj>
 800c0aa:	6338      	str	r0, [r7, #48]	; 0x30
 800c0ac:	e009      	b.n	800c0c2 <kiss_fftr_alloc+0x8a>
    } else {
        if (*lenmem >= memneeded)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d801      	bhi.n	800c0bc <kiss_fftr_alloc+0x84>
            st = (kiss_fftr_cfg) mem;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c0:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d101      	bne.n	800c0cc <kiss_fftr_alloc+0x94>
        return NULL;
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	e0cb      	b.n	800c264 <kiss_fftr_alloc+0x22c>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 800c0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ce:	f103 020c 	add.w	r2, r3, #12
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 800c0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	441a      	add	r2, r3
 800c0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e0:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	685a      	ldr	r2, [r3, #4]
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	00db      	lsls	r3, r3, #3
 800c0ea:	441a      	add	r2, r3
 800c0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ee:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	f107 0114 	add.w	r1, r7, #20
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	68b9      	ldr	r1, [r7, #8]
 800c100:	68f8      	ldr	r0, [r7, #12]
 800c102:	f7ff fe71 	bl	800bde8 <kiss_fft_alloc>

    if (inverse_fft) {
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d052      	beq.n	800c1b2 <kiss_fftr_alloc+0x17a>
        for (i = 0; i < nfft/2; ++i) {
 800c10c:	2300      	movs	r3, #0
 800c10e:	637b      	str	r3, [r7, #52]	; 0x34
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	0fda      	lsrs	r2, r3, #31
 800c114:	4413      	add	r3, r2
 800c116:	105b      	asrs	r3, r3, #1
 800c118:	461a      	mov	r2, r3
 800c11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11c:	4293      	cmp	r3, r2
 800c11e:	f280 809a 	bge.w	800c256 <kiss_fftr_alloc+0x21e>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 800c122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c124:	3301      	adds	r3, #1
 800c126:	4618      	mov	r0, r3
 800c128:	f7f4 fa14 	bl	8000554 <__aeabi_i2d>
 800c12c:	4604      	mov	r4, r0
 800c12e:	460d      	mov	r5, r1
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	f7f4 fa0f 	bl	8000554 <__aeabi_i2d>
 800c136:	4602      	mov	r2, r0
 800c138:	460b      	mov	r3, r1
 800c13a:	4620      	mov	r0, r4
 800c13c:	4629      	mov	r1, r5
 800c13e:	f7f4 fb9d 	bl	800087c <__aeabi_ddiv>
 800c142:	4603      	mov	r3, r0
 800c144:	460c      	mov	r4, r1
 800c146:	4618      	mov	r0, r3
 800c148:	4621      	mov	r1, r4
 800c14a:	f04f 0200 	mov.w	r2, #0
 800c14e:	4b4e      	ldr	r3, [pc, #312]	; (800c288 <kiss_fftr_alloc+0x250>)
 800c150:	f7f4 f8b4 	bl	80002bc <__adddf3>
 800c154:	4603      	mov	r3, r0
 800c156:	460c      	mov	r4, r1
 800c158:	4618      	mov	r0, r3
 800c15a:	4621      	mov	r1, r4
            double phase =
 800c15c:	a344      	add	r3, pc, #272	; (adr r3, 800c270 <kiss_fftr_alloc+0x238>)
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	f7f4 fa61 	bl	8000628 <__aeabi_dmul>
 800c166:	4603      	mov	r3, r0
 800c168:	460c      	mov	r4, r1
 800c16a:	e9c7 3406 	strd	r3, r4, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 800c16e:	ed97 0b06 	vldr	d0, [r7, #24]
 800c172:	f005 fdf1 	bl	8011d58 <cos>
 800c176:	ec51 0b10 	vmov	r0, r1, d0
 800c17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17c:	689a      	ldr	r2, [r3, #8]
 800c17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	18d4      	adds	r4, r2, r3
 800c184:	f7f4 fd48 	bl	8000c18 <__aeabi_d2f>
 800c188:	4603      	mov	r3, r0
 800c18a:	6023      	str	r3, [r4, #0]
 800c18c:	ed97 0b06 	vldr	d0, [r7, #24]
 800c190:	f005 ff2a 	bl	8011fe8 <sin>
 800c194:	ec51 0b10 	vmov	r0, r1, d0
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	689a      	ldr	r2, [r3, #8]
 800c19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19e:	00db      	lsls	r3, r3, #3
 800c1a0:	18d4      	adds	r4, r2, r3
 800c1a2:	f7f4 fd39 	bl	8000c18 <__aeabi_d2f>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 800c1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	637b      	str	r3, [r7, #52]	; 0x34
 800c1b0:	e7ae      	b.n	800c110 <kiss_fftr_alloc+0xd8>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	0fda      	lsrs	r2, r3, #31
 800c1ba:	4413      	add	r3, r2
 800c1bc:	105b      	asrs	r3, r3, #1
 800c1be:	461a      	mov	r2, r3
 800c1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	da47      	bge.n	800c256 <kiss_fftr_alloc+0x21e>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 800c1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f7f4 f9c2 	bl	8000554 <__aeabi_i2d>
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	460d      	mov	r5, r1
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f7f4 f9bd 	bl	8000554 <__aeabi_i2d>
 800c1da:	4602      	mov	r2, r0
 800c1dc:	460b      	mov	r3, r1
 800c1de:	4620      	mov	r0, r4
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	f7f4 fb4b 	bl	800087c <__aeabi_ddiv>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	460c      	mov	r4, r1
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	4621      	mov	r1, r4
 800c1ee:	f04f 0200 	mov.w	r2, #0
 800c1f2:	4b25      	ldr	r3, [pc, #148]	; (800c288 <kiss_fftr_alloc+0x250>)
 800c1f4:	f7f4 f862 	bl	80002bc <__adddf3>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	460c      	mov	r4, r1
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	4621      	mov	r1, r4
            double phase =
 800c200:	a31d      	add	r3, pc, #116	; (adr r3, 800c278 <kiss_fftr_alloc+0x240>)
 800c202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c206:	f7f4 fa0f 	bl	8000628 <__aeabi_dmul>
 800c20a:	4603      	mov	r3, r0
 800c20c:	460c      	mov	r4, r1
 800c20e:	e9c7 3408 	strd	r3, r4, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 800c212:	ed97 0b08 	vldr	d0, [r7, #32]
 800c216:	f005 fd9f 	bl	8011d58 <cos>
 800c21a:	ec51 0b10 	vmov	r0, r1, d0
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	689a      	ldr	r2, [r3, #8]
 800c222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c224:	00db      	lsls	r3, r3, #3
 800c226:	18d4      	adds	r4, r2, r3
 800c228:	f7f4 fcf6 	bl	8000c18 <__aeabi_d2f>
 800c22c:	4603      	mov	r3, r0
 800c22e:	6023      	str	r3, [r4, #0]
 800c230:	ed97 0b08 	vldr	d0, [r7, #32]
 800c234:	f005 fed8 	bl	8011fe8 <sin>
 800c238:	ec51 0b10 	vmov	r0, r1, d0
 800c23c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23e:	689a      	ldr	r2, [r3, #8]
 800c240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c242:	00db      	lsls	r3, r3, #3
 800c244:	18d4      	adds	r4, r2, r3
 800c246:	f7f4 fce7 	bl	8000c18 <__aeabi_d2f>
 800c24a:	4603      	mov	r3, r0
 800c24c:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 800c24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c250:	3301      	adds	r3, #1
 800c252:	637b      	str	r3, [r7, #52]	; 0x34
 800c254:	e7af      	b.n	800c1b6 <kiss_fftr_alloc+0x17e>
        }
    }

    if (memallocated != NULL) {
 800c256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <kiss_fftr_alloc+0x22a>
        *memallocated = memneeded;
 800c25c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c25e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c260:	601a      	str	r2, [r3, #0]
    }

    return st;
 800c262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800c264:	4618      	mov	r0, r3
 800c266:	3738      	adds	r7, #56	; 0x38
 800c268:	46bd      	mov	sp, r7
 800c26a:	bdb0      	pop	{r4, r5, r7, pc}
 800c26c:	f3af 8000 	nop.w
 800c270:	54442d18 	.word	0x54442d18
 800c274:	400921fb 	.word	0x400921fb
 800c278:	54442d18 	.word	0x54442d18
 800c27c:	c00921fb 	.word	0xc00921fb
 800c280:	20000788 	.word	0x20000788
 800c284:	080181e0 	.word	0x080181e0
 800c288:	3fe00000 	.word	0x3fe00000

0800c28c <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b092      	sub	sp, #72	; 0x48
 800c290:	af00      	add	r7, sp, #0
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	60b9      	str	r1, [r7, #8]
 800c296:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00a      	beq.n	800c2b8 <kiss_fftr+0x2c>
        fprintf(stderr,"kiss fft usage error: improper alloc\n");
 800c2a2:	4b8b      	ldr	r3, [pc, #556]	; (800c4d0 <kiss_fftr+0x244>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	2225      	movs	r2, #37	; 0x25
 800c2aa:	2101      	movs	r1, #1
 800c2ac:	4889      	ldr	r0, [pc, #548]	; (800c4d4 <kiss_fftr+0x248>)
 800c2ae:	f008 fc7d 	bl	8014bac <fwrite>
        exit(1);
 800c2b2:	2001      	movs	r0, #1
 800c2b4:	f008 fc06 	bl	8014ac4 <exit>
    }

    ncfft = st->substate->nfft;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	6818      	ldr	r0, [r3, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	685b      	ldr	r3, [r3, #4]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	68b9      	ldr	r1, [r7, #8]
 800c2cc:	f7ff fea4 	bl	800c018 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 800c2e0:	ed97 7a04 	vldr	s14, [r7, #16]
 800c2e4:	edd7 7a05 	vldr	s15, [r7, #20]
 800c2e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 800c2f2:	ed97 7a04 	vldr	s14, [r7, #16]
 800c2f6:	edd7 7a05 	vldr	s15, [r7, #20]
 800c2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2fc:	00db      	lsls	r3, r3, #3
 800c2fe:	687a      	ldr	r2, [r7, #4]
 800c300:	4413      	add	r3, r2
 800c302:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c306:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f04f 0200 	mov.w	r2, #0
 800c310:	605a      	str	r2, [r3, #4]
 800c312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	4413      	add	r3, r2
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	6852      	ldr	r2, [r2, #4]
 800c31e:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 800c320:	2301      	movs	r3, #1
 800c322:	647b      	str	r3, [r7, #68]	; 0x44
 800c324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c326:	0fda      	lsrs	r2, r3, #31
 800c328:	4413      	add	r3, r2
 800c32a:	105b      	asrs	r3, r3, #1
 800c32c:	461a      	mov	r2, r3
 800c32e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c330:	4293      	cmp	r3, r2
 800c332:	f300 80c9 	bgt.w	800c4c8 <kiss_fftr+0x23c>
        fpk    = st->tmpbuf[k];
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	685a      	ldr	r2, [r3, #4]
 800c33a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c33c:	00db      	lsls	r3, r3, #3
 800c33e:	441a      	add	r2, r3
 800c340:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c344:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c348:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c354:	1acb      	subs	r3, r1, r3
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	4413      	add	r3, r2
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c364:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c366:	1acb      	subs	r3, r1, r3
 800c368:	00db      	lsls	r3, r3, #3
 800c36a:	4413      	add	r3, r2
 800c36c:	edd3 7a01 	vldr	s15, [r3, #4]
 800c370:	eef1 7a67 	vneg.f32	s15, s15
 800c374:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 800c378:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c37c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c380:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c384:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800c388:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c38c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c390:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c394:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 800c398:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c39c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c3a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3a4:	edc7 7a08 	vstr	s15, [r7, #32]
 800c3a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3ac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c3b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3b4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 800c3b8:	ed97 7a08 	vldr	s14, [r7, #32]
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	689a      	ldr	r2, [r3, #8]
 800c3c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3c2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c3c6:	3b01      	subs	r3, #1
 800c3c8:	00db      	lsls	r3, r3, #3
 800c3ca:	4413      	add	r3, r2
 800c3cc:	edd3 7a00 	vldr	s15, [r3]
 800c3d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3d4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	689a      	ldr	r2, [r3, #8]
 800c3dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3de:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	00db      	lsls	r3, r3, #3
 800c3e6:	4413      	add	r3, r2
 800c3e8:	edd3 7a01 	vldr	s15, [r3, #4]
 800c3ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3f4:	edc7 7a06 	vstr	s15, [r7, #24]
 800c3f8:	ed97 7a08 	vldr	s14, [r7, #32]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	689a      	ldr	r2, [r3, #8]
 800c400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c402:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c406:	3b01      	subs	r3, #1
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	4413      	add	r3, r2
 800c40c:	edd3 7a01 	vldr	s15, [r3, #4]
 800c410:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c414:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c41e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800c422:	3b01      	subs	r3, #1
 800c424:	00db      	lsls	r3, r3, #3
 800c426:	4413      	add	r3, r2
 800c428:	edd3 7a00 	vldr	s15, [r3]
 800c42c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c430:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c434:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 800c438:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c43c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c440:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	4413      	add	r3, r2
 800c44c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c450:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c454:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 800c458:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c45c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c460:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c466:	00db      	lsls	r3, r3, #3
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	4413      	add	r3, r2
 800c46c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c470:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c474:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 800c478:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c47c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c480:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	00db      	lsls	r3, r3, #3
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	4413      	add	r3, r2
 800c490:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c494:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c498:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 800c49c:	ed97 7a07 	vldr	s14, [r7, #28]
 800c4a0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800c4a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	00db      	lsls	r3, r3, #3
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	4413      	add	r3, r2
 800c4b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c4b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4bc:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 800c4c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	647b      	str	r3, [r7, #68]	; 0x44
 800c4c6:	e72d      	b.n	800c324 <kiss_fftr+0x98>
    }
}
 800c4c8:	bf00      	nop
 800c4ca:	3748      	adds	r7, #72	; 0x48
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}
 800c4d0:	20000788 	.word	0x20000788
 800c4d4:	08018208 	.word	0x08018208

0800c4d8 <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	ed87 0a01 	vstr	s0, [r7, #4]
 800c4e2:	ed97 0a01 	vldr	s0, [r7, #4]
 800c4e6:	f006 f861 	bl	80125ac <log10f>
 800c4ea:	eef0 7a40 	vmov.f32	s15, s0
 800c4ee:	eeb0 0a67 	vmov.f32	s0, s15
 800c4f2:	3708      	adds	r7, #8
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd80      	pop	{r7, pc}

0800c4f8 <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 800c4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	ed87 0b00 	vstr	d0, [r7]
 800c502:	683c      	ldr	r4, [r7, #0]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800c50a:	2301      	movs	r3, #1
 800c50c:	461e      	mov	r6, r3
 800c50e:	f04f 32ff 	mov.w	r2, #4294967295
 800c512:	4b0f      	ldr	r3, [pc, #60]	; (800c550 <_ZSt5isinfd+0x58>)
 800c514:	4620      	mov	r0, r4
 800c516:	4629      	mov	r1, r5
 800c518:	f7f4 fb20 	bl	8000b5c <__aeabi_dcmpun>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10b      	bne.n	800c53a <_ZSt5isinfd+0x42>
 800c522:	f04f 32ff 	mov.w	r2, #4294967295
 800c526:	4b0a      	ldr	r3, [pc, #40]	; (800c550 <_ZSt5isinfd+0x58>)
 800c528:	4620      	mov	r0, r4
 800c52a:	4629      	mov	r1, r5
 800c52c:	f7f4 faf8 	bl	8000b20 <__aeabi_dcmple>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <_ZSt5isinfd+0x42>
 800c536:	2300      	movs	r3, #0
 800c538:	461e      	mov	r6, r3
 800c53a:	b2f3      	uxtb	r3, r6
 800c53c:	f083 0301 	eor.w	r3, r3, #1
 800c540:	b2db      	uxtb	r3, r3
 800c542:	f003 0301 	and.w	r3, r3, #1
 800c546:	b2db      	uxtb	r3, r3
 800c548:	4618      	mov	r0, r3
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c550:	7fefffff 	.word	0x7fefffff

0800c554 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 800c554:	b480      	push	{r7}
 800c556:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 800c564:	b598      	push	{r3, r4, r7, lr}
 800c566:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800c568:	f7fa f9a8 	bl	80068bc <HAL_GetTick>
 800c56c:	4603      	mov	r3, r0
 800c56e:	f04f 0400 	mov.w	r4, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	4621      	mov	r1, r4
 800c576:	bd98      	pop	{r3, r4, r7, pc}

0800c578 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 800c578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c57a:	b08d      	sub	sp, #52	; 0x34
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 800c582:	466b      	mov	r3, sp
 800c584:	461e      	mov	r6, r3
    float n = f;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	62bb      	str	r3, [r7, #40]	; 0x28
    char s[MAX_NUMBER_STRING_SIZE];
 800c58a:	4b83      	ldr	r3, [pc, #524]	; (800c798 <_Z15ei_printf_floatf+0x220>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	1e58      	subs	r0, r3, #1
 800c590:	6278      	str	r0, [r7, #36]	; 0x24
 800c592:	4603      	mov	r3, r0
 800c594:	3301      	adds	r3, #1
 800c596:	4619      	mov	r1, r3
 800c598:	f04f 0200 	mov.w	r2, #0
 800c59c:	f04f 0300 	mov.w	r3, #0
 800c5a0:	f04f 0400 	mov.w	r4, #0
 800c5a4:	00d4      	lsls	r4, r2, #3
 800c5a6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800c5aa:	00cb      	lsls	r3, r1, #3
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	f04f 0200 	mov.w	r2, #0
 800c5b6:	f04f 0300 	mov.w	r3, #0
 800c5ba:	f04f 0400 	mov.w	r4, #0
 800c5be:	00d4      	lsls	r4, r2, #3
 800c5c0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800c5c4:	00cb      	lsls	r3, r1, #3
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	3301      	adds	r3, #1
 800c5ca:	3307      	adds	r3, #7
 800c5cc:	08db      	lsrs	r3, r3, #3
 800c5ce:	00db      	lsls	r3, r3, #3
 800c5d0:	ebad 0d03 	sub.w	sp, sp, r3
 800c5d4:	466b      	mov	r3, sp
 800c5d6:	3300      	adds	r3, #0
 800c5d8:	623b      	str	r3, [r7, #32]
    if (n == 0.0) {
 800c5da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5de:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e6:	d106      	bne.n	800c5f6 <_Z15ei_printf_floatf+0x7e>
        strcpy(s, "0");
 800c5e8:	6a3b      	ldr	r3, [r7, #32]
 800c5ea:	496c      	ldr	r1, [pc, #432]	; (800c79c <_Z15ei_printf_floatf+0x224>)
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	881b      	ldrh	r3, [r3, #0]
 800c5f2:	8013      	strh	r3, [r2, #0]
 800c5f4:	e0c1      	b.n	800c77a <_Z15ei_printf_floatf+0x202>
        char *c = s;
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	60bb      	str	r3, [r7, #8]
        int neg = (n < 0);
 800c5fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c606:	bf4c      	ite	mi
 800c608:	2301      	movmi	r3, #1
 800c60a:	2300      	movpl	r3, #0
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	61fb      	str	r3, [r7, #28]
        if (neg) {
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d005      	beq.n	800c622 <_Z15ei_printf_floatf+0xaa>
            n = -n;
 800c616:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c61a:	eef1 7a67 	vneg.f32	s15, s15
 800c61e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        m = log10(n);
 800c622:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800c626:	f7ff ff57 	bl	800c4d8 <_ZSt5log10f>
 800c62a:	eef0 7a40 	vmov.f32	s15, s0
 800c62e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c632:	ee17 3a90 	vmov	r3, s15
 800c636:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (neg) {
 800c638:	69fb      	ldr	r3, [r7, #28]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d004      	beq.n	800c648 <_Z15ei_printf_floatf+0xd0>
            *(c++) = '-';
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	1c5a      	adds	r2, r3, #1
 800c642:	60ba      	str	r2, [r7, #8]
 800c644:	222d      	movs	r2, #45	; 0x2d
 800c646:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 800c648:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c64a:	f7f3 ff83 	bl	8000554 <__aeabi_i2d>
 800c64e:	f04f 0200 	mov.w	r2, #0
 800c652:	4b53      	ldr	r3, [pc, #332]	; (800c7a0 <_Z15ei_printf_floatf+0x228>)
 800c654:	f7f4 fa5a 	bl	8000b0c <__aeabi_dcmplt>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <_Z15ei_printf_floatf+0xea>
            m = 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (n > PRECISION || m >= 0) {
 800c662:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c664:	f7f3 ff88 	bl	8000578 <__aeabi_f2d>
 800c668:	4b4e      	ldr	r3, [pc, #312]	; (800c7a4 <_Z15ei_printf_floatf+0x22c>)
 800c66a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c66e:	2201      	movs	r2, #1
 800c670:	4615      	mov	r5, r2
 800c672:	461a      	mov	r2, r3
 800c674:	4623      	mov	r3, r4
 800c676:	f7f4 fa67 	bl	8000b48 <__aeabi_dcmpgt>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <_Z15ei_printf_floatf+0x10c>
 800c680:	2300      	movs	r3, #0
 800c682:	461d      	mov	r5, r3
 800c684:	b2eb      	uxtb	r3, r5
 800c686:	f083 0301 	eor.w	r3, r3, #1
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d002      	beq.n	800c696 <_Z15ei_printf_floatf+0x11e>
 800c690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c692:	2b00      	cmp	r3, #0
 800c694:	db6e      	blt.n	800c774 <_Z15ei_printf_floatf+0x1fc>
            double weight = pow(10.0, m);
 800c696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c698:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 800c790 <_Z15ei_printf_floatf+0x218>
 800c69c:	f000 f8ab 	bl	800c7f6 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800c6a0:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 800c6a4:	f04f 0200 	mov.w	r2, #0
 800c6a8:	f04f 0300 	mov.w	r3, #0
 800c6ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c6b0:	f7f4 fa4a 	bl	8000b48 <__aeabi_dcmpgt>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00b      	beq.n	800c6d2 <_Z15ei_printf_floatf+0x15a>
 800c6ba:	ed97 0b04 	vldr	d0, [r7, #16]
 800c6be:	f7ff ff1b 	bl	800c4f8 <_ZSt5isinfd>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	f083 0301 	eor.w	r3, r3, #1
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d001      	beq.n	800c6d2 <_Z15ei_printf_floatf+0x15a>
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e000      	b.n	800c6d4 <_Z15ei_printf_floatf+0x15c>
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d03a      	beq.n	800c74e <_Z15ei_printf_floatf+0x1d6>
                digit = floor(n / weight);
 800c6d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c6da:	f7f3 ff4d 	bl	8000578 <__aeabi_f2d>
 800c6de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c6e2:	f7f4 f8cb 	bl	800087c <__aeabi_ddiv>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	ec44 3b17 	vmov	d7, r3, r4
 800c6ee:	eeb0 0a47 	vmov.f32	s0, s14
 800c6f2:	eef0 0a67 	vmov.f32	s1, s15
 800c6f6:	f005 fb73 	bl	8011de0 <floor>
 800c6fa:	ec54 3b10 	vmov	r3, r4, d0
 800c6fe:	4618      	mov	r0, r3
 800c700:	4621      	mov	r1, r4
 800c702:	f7f4 fa41 	bl	8000b88 <__aeabi_d2iz>
 800c706:	4603      	mov	r3, r0
 800c708:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 800c70a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c70c:	f7f3 ff34 	bl	8000578 <__aeabi_f2d>
 800c710:	4604      	mov	r4, r0
 800c712:	460d      	mov	r5, r1
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7f3 ff1d 	bl	8000554 <__aeabi_i2d>
 800c71a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c71e:	f7f3 ff83 	bl	8000628 <__aeabi_dmul>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4620      	mov	r0, r4
 800c728:	4629      	mov	r1, r5
 800c72a:	f7f3 fdc5 	bl	80002b8 <__aeabi_dsub>
 800c72e:	4603      	mov	r3, r0
 800c730:	460c      	mov	r4, r1
 800c732:	4618      	mov	r0, r3
 800c734:	4621      	mov	r1, r4
 800c736:	f7f4 fa6f 	bl	8000c18 <__aeabi_d2f>
 800c73a:	4603      	mov	r3, r0
 800c73c:	62bb      	str	r3, [r7, #40]	; 0x28
                *(c++) = '0' + digit;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	b2da      	uxtb	r2, r3
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	1c59      	adds	r1, r3, #1
 800c746:	60b9      	str	r1, [r7, #8]
 800c748:	3230      	adds	r2, #48	; 0x30
 800c74a:	b2d2      	uxtb	r2, r2
 800c74c:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 800c74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d10b      	bne.n	800c76c <_Z15ei_printf_floatf+0x1f4>
 800c754:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c758:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c760:	dd04      	ble.n	800c76c <_Z15ei_printf_floatf+0x1f4>
                *(c++) = '.';
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	1c5a      	adds	r2, r3, #1
 800c766:	60ba      	str	r2, [r7, #8]
 800c768:	222e      	movs	r2, #46	; 0x2e
 800c76a:	701a      	strb	r2, [r3, #0]
            m--;
 800c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76e:	3b01      	subs	r3, #1
 800c770:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (n > PRECISION || m >= 0) {
 800c772:	e776      	b.n	800c662 <_Z15ei_printf_floatf+0xea>
        *(c) = '\0';
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2200      	movs	r2, #0
 800c778:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 800c77a:	6a3b      	ldr	r3, [r7, #32]
 800c77c:	4619      	mov	r1, r3
 800c77e:	480a      	ldr	r0, [pc, #40]	; (800c7a8 <_Z15ei_printf_floatf+0x230>)
 800c780:	f7f7 ff0e 	bl	80045a0 <_Z9ei_printfPKcz>
 800c784:	46b5      	mov	sp, r6
}
 800c786:	bf00      	nop
 800c788:	3734      	adds	r7, #52	; 0x34
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c78e:	bf00      	nop
 800c790:	00000000 	.word	0x00000000
 800c794:	40240000 	.word	0x40240000
 800c798:	20000638 	.word	0x20000638
 800c79c:	08018230 	.word	0x08018230
 800c7a0:	3ff00000 	.word	0x3ff00000
 800c7a4:	20000630 	.word	0x20000630
 800c7a8:	08018234 	.word	0x08018234

0800c7ac <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
    return malloc(size);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f008 fa2b 	bl	8014c10 <malloc>
 800c7ba:	4603      	mov	r3, r0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f008 f969 	bl	8014aa8 <calloc>
 800c7d6:	4603      	mov	r3, r0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
    free(ptr);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f008 fa19 	bl	8014c20 <free>
}
 800c7ee:	bf00      	nop
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800c7f6:	b590      	push	{r4, r7, lr}
 800c7f8:	b085      	sub	sp, #20
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	ed87 0b02 	vstr	d0, [r7, #8]
 800c800:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f7f3 fea6 	bl	8000554 <__aeabi_i2d>
 800c808:	4603      	mov	r3, r0
 800c80a:	460c      	mov	r4, r1
 800c80c:	ec44 3b11 	vmov	d1, r3, r4
 800c810:	ed97 0b02 	vldr	d0, [r7, #8]
 800c814:	f005 fc86 	bl	8012124 <pow>
 800c818:	eeb0 7a40 	vmov.f32	s14, s0
 800c81c:	eef0 7a60 	vmov.f32	s15, s1
    }
 800c820:	eeb0 0a47 	vmov.f32	s0, s14
 800c824:	eef0 0a67 	vmov.f32	s1, s15
 800c828:	3714      	adds	r7, #20
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd90      	pop	{r4, r7, pc}
	...

0800c830 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	4603      	mov	r3, r0
 800c838:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800c83a:	79fb      	ldrb	r3, [r7, #7]
 800c83c:	2b0b      	cmp	r3, #11
 800c83e:	d833      	bhi.n	800c8a8 <TfLiteTypeGetName+0x78>
 800c840:	a201      	add	r2, pc, #4	; (adr r2, 800c848 <TfLiteTypeGetName+0x18>)
 800c842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c846:	bf00      	nop
 800c848:	0800c879 	.word	0x0800c879
 800c84c:	0800c87d 	.word	0x0800c87d
 800c850:	0800c885 	.word	0x0800c885
 800c854:	0800c889 	.word	0x0800c889
 800c858:	0800c891 	.word	0x0800c891
 800c85c:	0800c89d 	.word	0x0800c89d
 800c860:	0800c895 	.word	0x0800c895
 800c864:	0800c881 	.word	0x0800c881
 800c868:	0800c899 	.word	0x0800c899
 800c86c:	0800c88d 	.word	0x0800c88d
 800c870:	0800c8a1 	.word	0x0800c8a1
 800c874:	0800c8a5 	.word	0x0800c8a5
    case kTfLiteNoType:
      return "NOTYPE";
 800c878:	4b0f      	ldr	r3, [pc, #60]	; (800c8b8 <TfLiteTypeGetName+0x88>)
 800c87a:	e016      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800c87c:	4b0f      	ldr	r3, [pc, #60]	; (800c8bc <TfLiteTypeGetName+0x8c>)
 800c87e:	e014      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 800c880:	4b0f      	ldr	r3, [pc, #60]	; (800c8c0 <TfLiteTypeGetName+0x90>)
 800c882:	e012      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 800c884:	4b0f      	ldr	r3, [pc, #60]	; (800c8c4 <TfLiteTypeGetName+0x94>)
 800c886:	e010      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 800c888:	4b0f      	ldr	r3, [pc, #60]	; (800c8c8 <TfLiteTypeGetName+0x98>)
 800c88a:	e00e      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 800c88c:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <TfLiteTypeGetName+0x9c>)
 800c88e:	e00c      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 800c890:	4b0f      	ldr	r3, [pc, #60]	; (800c8d0 <TfLiteTypeGetName+0xa0>)
 800c892:	e00a      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 800c894:	4b0f      	ldr	r3, [pc, #60]	; (800c8d4 <TfLiteTypeGetName+0xa4>)
 800c896:	e008      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800c898:	4b0f      	ldr	r3, [pc, #60]	; (800c8d8 <TfLiteTypeGetName+0xa8>)
 800c89a:	e006      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 800c89c:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <TfLiteTypeGetName+0xac>)
 800c89e:	e004      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 800c8a0:	4b0f      	ldr	r3, [pc, #60]	; (800c8e0 <TfLiteTypeGetName+0xb0>)
 800c8a2:	e002      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 800c8a4:	4b0f      	ldr	r3, [pc, #60]	; (800c8e4 <TfLiteTypeGetName+0xb4>)
 800c8a6:	e000      	b.n	800c8aa <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 800c8a8:	4b0f      	ldr	r3, [pc, #60]	; (800c8e8 <TfLiteTypeGetName+0xb8>)
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	370c      	adds	r7, #12
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b4:	4770      	bx	lr
 800c8b6:	bf00      	nop
 800c8b8:	08018238 	.word	0x08018238
 800c8bc:	08018240 	.word	0x08018240
 800c8c0:	08018248 	.word	0x08018248
 800c8c4:	08018250 	.word	0x08018250
 800c8c8:	08018258 	.word	0x08018258
 800c8cc:	08018260 	.word	0x08018260
 800c8d0:	08018268 	.word	0x08018268
 800c8d4:	08018270 	.word	0x08018270
 800c8d8:	08018278 	.word	0x08018278
 800c8dc:	08018284 	.word	0x08018284
 800c8e0:	0801828c 	.word	0x0801828c
 800c8e4:	08018294 	.word	0x08018294
 800c8e8:	0801829c 	.word	0x0801829c

0800c8ec <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800c8ec:	b480      	push	{r7}
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
	...

0800c900 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800c900:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800c904:	b088      	sub	sp, #32
 800c906:	af00      	add	r7, sp, #0
 800c908:	ed87 0b02 	vstr	d0, [r7, #8]
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800c910:	f04f 0200 	mov.w	r2, #0
 800c914:	f04f 0300 	mov.w	r3, #0
 800c918:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c91c:	f7f4 f8ec 	bl	8000af8 <__aeabi_dcmpeq>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d006      	beq.n	800c934 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	2200      	movs	r2, #0
 800c930:	601a      	str	r2, [r3, #0]
 800c932:	e06a      	b.n	800ca0a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800c934:	6838      	ldr	r0, [r7, #0]
 800c936:	ed97 0b02 	vldr	d0, [r7, #8]
 800c93a:	f005 fad5 	bl	8011ee8 <frexp>
 800c93e:	ed87 0b06 	vstr	d0, [r7, #24]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800c942:	f04f 0200 	mov.w	r2, #0
 800c946:	4b33      	ldr	r3, [pc, #204]	; (800ca14 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 800c948:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c94c:	f7f3 fe6c 	bl	8000628 <__aeabi_dmul>
 800c950:	4603      	mov	r3, r0
 800c952:	460c      	mov	r4, r1
 800c954:	ec44 3b17 	vmov	d7, r3, r4
 800c958:	eeb0 0a47 	vmov.f32	s0, s14
 800c95c:	eef0 0a67 	vmov.f32	s1, s15
 800c960:	f000 f981 	bl	800cc66 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800c964:	ec54 3b10 	vmov	r3, r4, d0
 800c968:	4618      	mov	r0, r3
 800c96a:	4621      	mov	r1, r4
 800c96c:	f7f4 f9bc 	bl	8000ce8 <__aeabi_d2lz>
 800c970:	4603      	mov	r3, r0
 800c972:	460c      	mov	r4, r1
 800c974:	e9c7 3404 	strd	r3, r4, [r7, #16]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800c978:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c97c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c980:	f04f 0200 	mov.w	r2, #0
 800c984:	4299      	cmp	r1, r3
 800c986:	eb72 0304 	sbcs.w	r3, r2, r4
 800c98a:	da01      	bge.n	800c990 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>
 800c98c:	f008 f863 	bl	8014a56 <abort>
  if (q_fixed == (1ll << 31)) {
 800c990:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c994:	2c00      	cmp	r4, #0
 800c996:	bf08      	it	eq
 800c998:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
 800c99c:	d114      	bne.n	800c9c8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 800c99e:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 800c9a2:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800c9a6:	4611      	mov	r1, r2
 800c9a8:	f04f 0200 	mov.w	r2, #0
 800c9ac:	eb1b 0301 	adds.w	r3, fp, r1
 800c9b0:	eb4c 0402 	adc.w	r4, ip, r2
 800c9b4:	1064      	asrs	r4, r4, #1
 800c9b6:	ea4f 0333 	mov.w	r3, r3, rrx
 800c9ba:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ++*shift;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	1c5a      	adds	r2, r3, #1
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800c9c8:	f7ff ff90 	bl	800c8ec <_ZNSt14numeric_limitsIlE3maxEv>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	4619      	mov	r1, r3
 800c9d0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800c9d4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800c9d8:	4299      	cmp	r1, r3
 800c9da:	eb72 0304 	sbcs.w	r3, r2, r4
 800c9de:	da01      	bge.n	800c9e4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 800c9e0:	f008 f839 	bl	8014a56 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f113 0f1f 	cmn.w	r3, #31
 800c9ec:	da08      	bge.n	800ca00 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800c9f4:	f04f 0300 	mov.w	r3, #0
 800c9f8:	f04f 0400 	mov.w	r4, #0
 800c9fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800ca00:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800ca04:	461a      	mov	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	601a      	str	r2, [r3, #0]
}
 800ca0a:	3720      	adds	r7, #32
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ca12:	bf00      	nop
 800ca14:	41e00000 	.word	0x41e00000

0800ca18 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	ed87 0b02 	vstr	d0, [r7, #8]
 800ca22:	6078      	str	r0, [r7, #4]
 800ca24:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800ca26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca2a:	f04f 0200 	mov.w	r2, #0
 800ca2e:	4b0e      	ldr	r3, [pc, #56]	; (800ca68 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x50>)
 800ca30:	f7f4 f88a 	bl	8000b48 <__aeabi_dcmpgt>
 800ca34:	4603      	mov	r3, r0
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d101      	bne.n	800ca3e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800ca3a:	f008 f80c 	bl	8014a56 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800ca3e:	ed97 7b02 	vldr	d7, [r7, #8]
 800ca42:	6839      	ldr	r1, [r7, #0]
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	eeb0 0a47 	vmov.f32	s0, s14
 800ca4a:	eef0 0a67 	vmov.f32	s1, s15
 800ca4e:	f7ff ff57 	bl	800c900 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	da01      	bge.n	800ca5e <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x46>
 800ca5a:	f007 fffc 	bl	8014a56 <abort>
}
 800ca5e:	bf00      	nop
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	3ff00000 	.word	0x3ff00000

0800ca6c <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ca6c:	b590      	push	{r4, r7, lr}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ca82:	461a      	mov	r2, r3
 800ca84:	4623      	mov	r3, r4
 800ca86:	f7f4 f841 	bl	8000b0c <__aeabi_dcmplt>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d001      	beq.n	800ca94 <_ZSt3minIdERKT_S2_S2_+0x28>
	return __b;
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	e000      	b.n	800ca96 <_ZSt3minIdERKT_S2_S2_+0x2a>
      return __a;
 800ca94:	687b      	ldr	r3, [r7, #4]
    }
 800ca96:	4618      	mov	r0, r3
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd90      	pop	{r4, r7, pc}
	...

0800caa0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800caa0:	b5b0      	push	{r4, r5, r7, lr}
 800caa2:	b08e      	sub	sp, #56	; 0x38
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	ed87 0b06 	vstr	d0, [r7, #24]
 800caaa:	ed87 1b04 	vstr	d1, [r7, #16]
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  // Patched by Edge Impulse, cast double to std::min/std::max calls
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800cab4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cab8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cabc:	f7f3 fdb4 	bl	8000628 <__aeabi_dmul>
 800cac0:	4603      	mov	r3, r0
 800cac2:	460c      	mov	r4, r1
 800cac4:	4625      	mov	r5, r4
 800cac6:	461c      	mov	r4, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f1c3 031f 	rsb	r3, r3, #31
 800cace:	2201      	movs	r2, #1
 800cad0:	fa02 f303 	lsl.w	r3, r2, r3
 800cad4:	4618      	mov	r0, r3
 800cad6:	f7f3 fd3d 	bl	8000554 <__aeabi_i2d>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	4620      	mov	r0, r4
 800cae0:	4629      	mov	r1, r5
 800cae2:	f7f3 fda1 	bl	8000628 <__aeabi_dmul>
 800cae6:	4603      	mov	r3, r0
 800cae8:	460c      	mov	r4, r1
 800caea:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800caee:	a40e      	add	r4, pc, #56	; (adr r4, 800cb28 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800caf0:	e9d4 3400 	ldrd	r3, r4, [r4]
 800caf4:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800caf8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cafc:	f107 0320 	add.w	r3, r7, #32
 800cb00:	4611      	mov	r1, r2
 800cb02:	4618      	mov	r0, r3
 800cb04:	f7ff ffb2 	bl	800ca6c <_ZSt3minIdERKT_S2_S2_>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800cb0e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800cb12:	6879      	ldr	r1, [r7, #4]
 800cb14:	68b8      	ldr	r0, [r7, #8]
 800cb16:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800cb1a:	f7ff ff7d 	bl	800ca18 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800cb1e:	bf00      	nop
 800cb20:	3738      	adds	r7, #56	; 0x38
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bdb0      	pop	{r4, r5, r7, pc}
 800cb26:	bf00      	nop
 800cb28:	ffc00000 	.word	0xffc00000
 800cb2c:	41dfffff 	.word	0x41dfffff

0800cb30 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	b087      	sub	sp, #28
 800cb36:	af00      	add	r7, sp, #0
 800cb38:	60f8      	str	r0, [r7, #12]
 800cb3a:	60b9      	str	r1, [r7, #8]
 800cb3c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800cb3e:	2201      	movs	r2, #1
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	fa02 f303 	lsl.w	r3, r2, r3
 800cb46:	3b01      	subs	r3, #1
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7f3 fd03 	bl	8000554 <__aeabi_i2d>
 800cb4e:	4682      	mov	sl, r0
 800cb50:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	1ad1      	subs	r1, r2, r3
 800cb58:	f04f 0201 	mov.w	r2, #1
 800cb5c:	f04f 0300 	mov.w	r3, #0
 800cb60:	f1a1 0620 	sub.w	r6, r1, #32
 800cb64:	f1c1 0020 	rsb	r0, r1, #32
 800cb68:	fa03 f901 	lsl.w	r9, r3, r1
 800cb6c:	fa02 f606 	lsl.w	r6, r2, r6
 800cb70:	ea49 0906 	orr.w	r9, r9, r6
 800cb74:	fa22 f000 	lsr.w	r0, r2, r0
 800cb78:	ea49 0900 	orr.w	r9, r9, r0
 800cb7c:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800cb80:	4640      	mov	r0, r8
 800cb82:	4649      	mov	r1, r9
 800cb84:	f7f3 fd22 	bl	80005cc <__aeabi_l2d>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	460b      	mov	r3, r1
 800cb8c:	4650      	mov	r0, sl
 800cb8e:	4659      	mov	r1, fp
 800cb90:	f7f3 fd4a 	bl	8000628 <__aeabi_dmul>
 800cb94:	4602      	mov	r2, r0
 800cb96:	460b      	mov	r3, r1
 800cb98:	4690      	mov	r8, r2
 800cb9a:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800cb9c:	f04f 0201 	mov.w	r2, #1
 800cba0:	f04f 0300 	mov.w	r3, #0
 800cba4:	68b9      	ldr	r1, [r7, #8]
 800cba6:	f1a1 0620 	sub.w	r6, r1, #32
 800cbaa:	f1c1 0020 	rsb	r0, r1, #32
 800cbae:	fa03 f501 	lsl.w	r5, r3, r1
 800cbb2:	fa02 f606 	lsl.w	r6, r2, r6
 800cbb6:	4335      	orrs	r5, r6
 800cbb8:	fa22 f000 	lsr.w	r0, r2, r0
 800cbbc:	4305      	orrs	r5, r0
 800cbbe:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800cbc2:	4620      	mov	r0, r4
 800cbc4:	4629      	mov	r1, r5
 800cbc6:	f7f3 fd01 	bl	80005cc <__aeabi_l2d>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	460c      	mov	r4, r1
  const double max_input_rescaled =
 800cbce:	461a      	mov	r2, r3
 800cbd0:	4623      	mov	r3, r4
 800cbd2:	4640      	mov	r0, r8
 800cbd4:	4649      	mov	r1, r9
 800cbd6:	f7f3 fe51 	bl	800087c <__aeabi_ddiv>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	460c      	mov	r4, r1
 800cbde:	e9c7 3404 	strd	r3, r4, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800cbe2:	ed97 0b04 	vldr	d0, [r7, #16]
 800cbe6:	f005 f8fb 	bl	8011de0 <floor>
 800cbea:	ec54 3b10 	vmov	r3, r4, d0
 800cbee:	4618      	mov	r0, r3
 800cbf0:	4621      	mov	r1, r4
 800cbf2:	f7f3 ffc9 	bl	8000b88 <__aeabi_d2iz>
 800cbf6:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	371c      	adds	r7, #28
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cc02 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800cc02:	b480      	push	{r7}
 800cc04:	b083      	sub	sp, #12
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	ed93 7a00 	vldr	s14, [r3]
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	edd3 7a00 	vldr	s15, [r3]
 800cc18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc20:	d501      	bpl.n	800cc26 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	e000      	b.n	800cc28 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800cc26:	687b      	ldr	r3, [r7, #4]
    }
 800cc28:	4618      	mov	r0, r3
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800cc34:	b480      	push	{r7}
 800cc36:	b083      	sub	sp, #12
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
 800cc3c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	ed93 7a00 	vldr	s14, [r3]
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	edd3 7a00 	vldr	s15, [r3]
 800cc4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cc4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc52:	d501      	bpl.n	800cc58 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	e000      	b.n	800cc5a <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800cc58:	687b      	ldr	r3, [r7, #4]
    }
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	370c      	adds	r7, #12
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b082      	sub	sp, #8
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	ed87 0b00 	vstr	d0, [r7]
 800cc70:	ed97 0b00 	vldr	d0, [r7]
 800cc74:	f005 f96e 	bl	8011f54 <round>
 800cc78:	eeb0 7a40 	vmov.f32	s14, s0
 800cc7c:	eef0 7a60 	vmov.f32	s15, s1
 800cc80:	eeb0 0a47 	vmov.f32	s0, s14
 800cc84:	eef0 0a67 	vmov.f32	s1, s15
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b082      	sub	sp, #8
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	ed87 0a01 	vstr	s0, [r7, #4]
 800cc98:	ed97 0a01 	vldr	s0, [r7, #4]
 800cc9c:	f7f4 fae1 	bl	8001262 <_ZSt5roundf>
 800cca0:	eef0 7a40 	vmov.f32	s15, s0
 800cca4:	eeb0 0a67 	vmov.f32	s0, s15
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}

0800ccae <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800ccae:	b480      	push	{r7}
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800ccc0:	b480      	push	{r7}
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	237f      	movs	r3, #127	; 0x7f
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800ccd0:	b480      	push	{r7}
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800cce0:	b480      	push	{r7}
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	23ff      	movs	r3, #255	; 0xff
 800cce6:	4618      	mov	r0, r3
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr

0800ccf0 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	370c      	adds	r7, #12
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 800cd0a:	b490      	push	{r4, r7}
 800cd0c:	b082      	sub	sp, #8
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	ed87 0b00 	vstr	d0, [r7]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 800cd1c:	ec44 3b17 	vmov	d7, r3, r4
 800cd20:	eeb0 0a47 	vmov.f32	s0, s14
 800cd24:	eef0 0a67 	vmov.f32	s1, s15
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bc90      	pop	{r4, r7}
 800cd2e:	4770      	bx	lr

0800cd30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800cd30:	b5b0      	push	{r4, r5, r7, lr}
 800cd32:	b08e      	sub	sp, #56	; 0x38
 800cd34:	af02      	add	r7, sp, #8
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7f3 fc18 	bl	8000578 <__aeabi_f2d>
 800cd48:	4604      	mov	r4, r0
 800cd4a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7f3 fc11 	bl	8000578 <__aeabi_f2d>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	f7f3 fc63 	bl	8000628 <__aeabi_dmul>
 800cd62:	4603      	mov	r3, r0
 800cd64:	460c      	mov	r4, r1
 800cd66:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d04a      	beq.n	800ce06 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7f3 fbff 	bl	8000578 <__aeabi_f2d>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	460c      	mov	r4, r1
 800cd7e:	e9c7 3408 	strd	r3, r4, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800cd82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cd86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800cd8a:	f7f3 fa95 	bl	80002b8 <__aeabi_dsub>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	460c      	mov	r4, r1
 800cd92:	ec44 3b17 	vmov	d7, r3, r4
 800cd96:	eeb0 0a47 	vmov.f32	s0, s14
 800cd9a:	eef0 0a67 	vmov.f32	s1, s15
 800cd9e:	f7ff ffb4 	bl	800cd0a <_ZSt3absd>
 800cda2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800cda6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f3 fbe4 	bl	8000578 <__aeabi_f2d>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	e9c7 3404 	strd	r3, r4, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800cdb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cdbc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cdc0:	f7f3 fd5c 	bl	800087c <__aeabi_ddiv>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	4618      	mov	r0, r3
 800cdca:	4621      	mov	r1, r4
 800cdcc:	2301      	movs	r3, #1
 800cdce:	461c      	mov	r4, r3
 800cdd0:	a316      	add	r3, pc, #88	; (adr r3, 800ce2c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	f7f3 fea3 	bl	8000b20 <__aeabi_dcmple>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d101      	bne.n	800cde4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800cde0:	2300      	movs	r3, #0
 800cde2:	461c      	mov	r4, r3
 800cde4:	b2e3      	uxtb	r3, r4
 800cde6:	f083 0301 	eor.w	r3, r3, #1
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d00a      	beq.n	800ce06 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	695c      	ldr	r4, [r3, #20]
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	4b0a      	ldr	r3, [pc, #40]	; (800ce20 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf0>)
 800cdf8:	9300      	str	r3, [sp, #0]
 800cdfa:	239a      	movs	r3, #154	; 0x9a
 800cdfc:	4a09      	ldr	r2, [pc, #36]	; (800ce24 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf4>)
 800cdfe:	490a      	ldr	r1, [pc, #40]	; (800ce28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800ce00:	47a0      	blx	r4
 800ce02:	2301      	movs	r3, #1
 800ce04:	e008      	b.n	800ce18 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xe8>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800ce06:	68f8      	ldr	r0, [r7, #12]
                                          multiplier);
 800ce08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	68b9      	ldr	r1, [r7, #8]
 800ce12:	f000 f80f 	bl	800ce34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800ce16:	4603      	mov	r3, r0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3730      	adds	r7, #48	; 0x30
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bdb0      	pop	{r4, r5, r7, pc}
 800ce20:	080184c0 	.word	0x080184c0
 800ce24:	080182ac 	.word	0x080182ac
 800ce28:	080183ac 	.word	0x080183ac
 800ce2c:	47ae147b 	.word	0x47ae147b
 800ce30:	3f947ae1 	.word	0x3f947ae1

0800ce34 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800ce34:	b590      	push	{r4, r7, lr}
 800ce36:	b089      	sub	sp, #36	; 0x24
 800ce38:	af02      	add	r7, sp, #8
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
 800ce40:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800ce42:	68bb      	ldr	r3, [r7, #8]
 800ce44:	ed93 7a03 	vldr	s14, [r3, #12]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	edd3 7a03 	vldr	s15, [r3, #12]
 800ce4e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800ce52:	ee17 0a90 	vmov	r0, s15
 800ce56:	f7f3 fb8f 	bl	8000578 <__aeabi_f2d>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	460c      	mov	r4, r1
 800ce5e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800ce62:	2301      	movs	r3, #1
 800ce64:	461c      	mov	r4, r3
 800ce66:	f04f 0200 	mov.w	r2, #0
 800ce6a:	f04f 0300 	mov.w	r3, #0
 800ce6e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ce72:	f7f3 fe5f 	bl	8000b34 <__aeabi_dcmpge>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	461c      	mov	r4, r3
 800ce80:	b2e3      	uxtb	r3, r4
 800ce82:	f083 0301 	eor.w	r3, r3, #1
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00a      	beq.n	800cea2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	695c      	ldr	r4, [r3, #20]
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	4b0f      	ldr	r3, [pc, #60]	; (800ced0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	23a7      	movs	r3, #167	; 0xa7
 800ce98:	4a0e      	ldr	r2, [pc, #56]	; (800ced4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800ce9a:	490f      	ldr	r1, [pc, #60]	; (800ced8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800ce9c:	47a0      	blx	r4
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e012      	b.n	800cec8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x94>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800cea2:	683b      	ldr	r3, [r7, #0]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7f3 fb66 	bl	8000578 <__aeabi_f2d>
 800ceac:	4603      	mov	r3, r0
 800ceae:	460c      	mov	r4, r1
 800ceb0:	461a      	mov	r2, r3
 800ceb2:	4623      	mov	r3, r4
 800ceb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ceb8:	f7f3 fce0 	bl	800087c <__aeabi_ddiv>
 800cebc:	4603      	mov	r3, r0
 800cebe:	460c      	mov	r4, r1
 800cec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cec2:	e9c2 3400 	strd	r3, r4, [r2]

  return kTfLiteOk;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	371c      	adds	r7, #28
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd90      	pop	{r4, r7, pc}
 800ced0:	080184e4 	.word	0x080184e4
 800ced4:	080182ac 	.word	0x080182ac
 800ced8:	080183ac 	.word	0x080183ac

0800cedc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	ed87 0a00 	vstr	s0, [r7]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800ceee:	ed97 7a00 	vldr	s14, [r7]
 800cef2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cef6:	eeb0 0a66 	vmov.f32	s0, s13
 800cefa:	f7ff fec8 	bl	800cc8e <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800cefe:	eef0 7a40 	vmov.f32	s15, s0
 800cf02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cf06:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
  };
 800cf0e:	4413      	add	r3, r2
 800cf10:	4618      	mov	r0, r3
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}

0800cf18 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b08e      	sub	sp, #56	; 0x38
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	60b9      	str	r1, [r7, #8]
 800cf20:	607a      	str	r2, [r7, #4]
 800cf22:	603b      	str	r3, [r7, #0]
 800cf24:	4603      	mov	r3, r0
 800cf26:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	68db      	ldr	r3, [r3, #12]
 800cf2c:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	633b      	str	r3, [r7, #48]	; 0x30
  };
 800cf34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf36:	617b      	str	r3, [r7, #20]
 800cf38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3a:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 800cf3c:	7bfb      	ldrb	r3, [r7, #15]
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d118      	bne.n	800cf74 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800cf42:	f107 0314 	add.w	r3, r7, #20
 800cf46:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800d03c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7ff ffc6 	bl	800cedc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800cf50:	4603      	mov	r3, r0
 800cf52:	61fb      	str	r3, [r7, #28]
 800cf54:	f107 021c 	add.w	r2, r7, #28
 800cf58:	f107 0308 	add.w	r3, r7, #8
 800cf5c:	4611      	mov	r1, r2
 800cf5e:	4618      	mov	r0, r3
 800cf60:	f000 f8c2 	bl	800d0e8 <_ZSt3maxIlERKT_S2_S2_>
 800cf64:	4603      	mov	r3, r0
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6a:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf70:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 800cf72:	e05f      	b.n	800d034 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d129      	bne.n	800cfce <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 800cf7a:	f107 0314 	add.w	r3, r7, #20
 800cf7e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800d03c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff ffaa 	bl	800cedc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	623b      	str	r3, [r7, #32]
 800cf8c:	f107 0220 	add.w	r2, r7, #32
 800cf90:	f107 0308 	add.w	r3, r7, #8
 800cf94:	4611      	mov	r1, r2
 800cf96:	4618      	mov	r0, r3
 800cf98:	f000 f8a6 	bl	800d0e8 <_ZSt3maxIlERKT_S2_S2_>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa2:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 800cfa4:	f107 0314 	add.w	r3, r7, #20
 800cfa8:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7ff ff95 	bl	800cedc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	627b      	str	r3, [r7, #36]	; 0x24
 800cfb6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800cfba:	1d3b      	adds	r3, r7, #4
 800cfbc:	4611      	mov	r1, r2
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f000 f8a6 	bl	800d110 <_ZSt3minIlERKT_S2_S2_>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfca:	601a      	str	r2, [r3, #0]
}
 800cfcc:	e032      	b.n	800d034 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 800cfce:	7bfb      	ldrb	r3, [r7, #15]
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d129      	bne.n	800d028 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 800cfd4:	f107 0314 	add.w	r3, r7, #20
 800cfd8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7ff ff7d 	bl	800cedc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfe6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800cfea:	f107 0308 	add.w	r3, r7, #8
 800cfee:	4611      	mov	r1, r2
 800cff0:	4618      	mov	r0, r3
 800cff2:	f000 f879 	bl	800d0e8 <_ZSt3maxIlERKT_S2_S2_>
 800cff6:	4603      	mov	r3, r0
 800cff8:	681a      	ldr	r2, [r3, #0]
 800cffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cffc:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 800cffe:	f107 0314 	add.w	r3, r7, #20
 800d002:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d006:	4618      	mov	r0, r3
 800d008:	f7ff ff68 	bl	800cedc <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800d00c:	4603      	mov	r3, r0
 800d00e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d010:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800d014:	1d3b      	adds	r3, r7, #4
 800d016:	4611      	mov	r1, r2
 800d018:	4618      	mov	r0, r3
 800d01a:	f000 f879 	bl	800d110 <_ZSt3minIlERKT_S2_S2_>
 800d01e:	4603      	mov	r3, r0
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d024:	601a      	str	r2, [r3, #0]
}
 800d026:	e005      	b.n	800d034 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 800d028:	68ba      	ldr	r2, [r7, #8]
 800d02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d02c:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800d02e:	687a      	ldr	r2, [r7, #4]
 800d030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d032:	601a      	str	r2, [r3, #0]
}
 800d034:	bf00      	nop
 800d036:	3738      	adds	r7, #56	; 0x38
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	00000000 	.word	0x00000000

0800d040 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800d040:	b590      	push	{r4, r7, lr}
 800d042:	b089      	sub	sp, #36	; 0x24
 800d044:	af02      	add	r7, sp, #8
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	607a      	str	r2, [r7, #4]
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	460b      	mov	r3, r1
 800d04e:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800d050:	2300      	movs	r3, #0
 800d052:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800d054:	2300      	movs	r3, #0
 800d056:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	2b03      	cmp	r3, #3
 800d05e:	d108      	bne.n	800d072 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800d060:	f7ff fe36 	bl	800ccd0 <_ZNSt14numeric_limitsIhE3minEv>
 800d064:	4603      	mov	r3, r0
 800d066:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800d068:	f7ff fe3a 	bl	800cce0 <_ZNSt14numeric_limitsIhE3maxEv>
 800d06c:	4603      	mov	r3, r0
 800d06e:	613b      	str	r3, [r7, #16]
 800d070:	e024      	b.n	800d0bc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	2b09      	cmp	r3, #9
 800d078:	d108      	bne.n	800d08c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800d07a:	f7ff fe18 	bl	800ccae <_ZNSt14numeric_limitsIaE3minEv>
 800d07e:	4603      	mov	r3, r0
 800d080:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800d082:	f7ff fe1d 	bl	800ccc0 <_ZNSt14numeric_limitsIaE3maxEv>
 800d086:	4603      	mov	r3, r0
 800d088:	613b      	str	r3, [r7, #16]
 800d08a:	e017      	b.n	800d0bc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	2b07      	cmp	r3, #7
 800d092:	d108      	bne.n	800d0a6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800d094:	f7f3 fff6 	bl	8001084 <_ZNSt14numeric_limitsIsE3minEv>
 800d098:	4603      	mov	r3, r0
 800d09a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800d09c:	f7f3 fffc 	bl	8001098 <_ZNSt14numeric_limitsIsE3maxEv>
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	613b      	str	r3, [r7, #16]
 800d0a4:	e00a      	b.n	800d0bc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	695c      	ldr	r4, [r3, #20]
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	4b0b      	ldr	r3, [pc, #44]	; (800d0dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 800d0ae:	9300      	str	r3, [sp, #0]
 800d0b0:	23da      	movs	r3, #218	; 0xda
 800d0b2:	4a0b      	ldr	r2, [pc, #44]	; (800d0e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 800d0b4:	490b      	ldr	r1, [pc, #44]	; (800d0e4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800d0b6:	47a0      	blx	r4
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e00a      	b.n	800d0d2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 800d0bc:	7af8      	ldrb	r0, [r7, #11]
 800d0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c0:	9301      	str	r3, [sp, #4]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	9300      	str	r3, [sp, #0]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	693a      	ldr	r2, [r7, #16]
 800d0ca:	6979      	ldr	r1, [r7, #20]
 800d0cc:	f7ff ff24 	bl	800cf18 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	371c      	adds	r7, #28
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd90      	pop	{r4, r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	08018500 	.word	0x08018500
 800d0e0:	080182ac 	.word	0x080182ac
 800d0e4:	080183ac 	.word	0x080183ac

0800d0e8 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	da01      	bge.n	800d102 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	e000      	b.n	800d104 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800d102:	687b      	ldr	r3, [r7, #4]
    }
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	681a      	ldr	r2, [r3, #0]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	429a      	cmp	r2, r3
 800d124:	da01      	bge.n	800d12a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	e000      	b.n	800d12c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800d12a:	687b      	ldr	r3, [r7, #4]
    }
 800d12c:	4618      	mov	r0, r3
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
 800d138:	b480      	push	{r7}
 800d13a:	b085      	sub	sp, #20
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	60f8      	str	r0, [r7, #12]
 800d140:	60b9      	str	r1, [r7, #8]
 800d142:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->inputs->data[index]];
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	689a      	ldr	r2, [r3, #8]
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	6819      	ldr	r1, [r3, #0]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	440b      	add	r3, r1
 800d152:	685b      	ldr	r3, [r3, #4]
 800d154:	019b      	lsls	r3, r3, #6
 800d156:	4413      	add	r3, r2
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                                      const TfLiteNode* node, int index) {
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->outputs->data[index]];
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	689a      	ldr	r2, [r3, #8]
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	6859      	ldr	r1, [r3, #4]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	440b      	add	r3, r1
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	019b      	lsls	r3, r3, #6
 800d182:	4413      	add	r3, r2
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800d190:	b480      	push	{r7}
 800d192:	b083      	sub	sp, #12
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d002      	beq.n	800d1a4 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800d1a2:	e000      	b.n	800d1a6 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800d1a4:	2300      	movs	r3, #0
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr

0800d1b2 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800d1b2:	b480      	push	{r7}
 800d1b4:	b083      	sub	sp, #12
 800d1b6:	af00      	add	r7, sp, #0
 800d1b8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d002      	beq.n	800d1c6 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	685b      	ldr	r3, [r3, #4]
 800d1c4:	e000      	b.n	800d1c8 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 800d1c6:	2300      	movs	r3, #0
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	601a      	str	r2, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	370c      	adds	r7, #12
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800d202:	687a      	ldr	r2, [r7, #4]
 800d204:	68b9      	ldr	r1, [r7, #8]
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f000 f8a0 	bl	800d34c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 800d216:	b580      	push	{r7, lr}
 800d218:	b082      	sub	sp, #8
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	2b05      	cmp	r3, #5
 800d224:	dd08      	ble.n	800d238 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	685b      	ldr	r3, [r3, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d004      	beq.n	800d238 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	4618      	mov	r0, r3
 800d234:	f004 fd68 	bl	8011d08 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	4618      	mov	r0, r3
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 800d242:	b480      	push	{r7}
 800d244:	b083      	sub	sp, #12
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4618      	mov	r0, r3
 800d250:	370c      	adds	r7, #12
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr

0800d25a <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 800d25a:	b580      	push	{r7, lr}
 800d25c:	b082      	sub	sp, #8
 800d25e:	af00      	add	r7, sp, #0
 800d260:	6078      	str	r0, [r7, #4]
 800d262:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	da01      	bge.n	800d26e <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800d26a:	f007 fbf4 	bl	8014a56 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	429a      	cmp	r2, r3
 800d276:	dc01      	bgt.n	800d27c <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800d278:	f007 fbed 	bl	8014a56 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2b05      	cmp	r3, #5
 800d282:	dd06      	ble.n	800d292 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685a      	ldr	r2, [r3, #4]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4413      	add	r3, r2
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	e004      	b.n	800d29c <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	687a      	ldr	r2, [r7, #4]
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	685b      	ldr	r3, [r3, #4]
  }
 800d29c:	4618      	mov	r0, r3
 800d29e:	3708      	adds	r7, #8
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}

0800d2a4 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 800d2a4:	b480      	push	{r7}
 800d2a6:	b083      	sub	sp, #12
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	2b05      	cmp	r3, #5
 800d2b2:	dd02      	ble.n	800d2ba <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	685b      	ldr	r3, [r3, #4]
 800d2b8:	e001      	b.n	800d2be <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	3304      	adds	r3, #4
  }
 800d2be:	4618      	mov	r0, r3
 800d2c0:	370c      	adds	r7, #12
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c8:	4770      	bx	lr

0800d2ca <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 800d2ca:	b480      	push	{r7}
 800d2cc:	b083      	sub	sp, #12
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b05      	cmp	r3, #5
 800d2d8:	dd02      	ble.n	800d2e0 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	e001      	b.n	800d2e4 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	3304      	adds	r3, #4
  }
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr

0800d2f0 <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b082      	sub	sp, #8
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	2b05      	cmp	r3, #5
 800d300:	dd08      	ble.n	800d314 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d004      	beq.n	800d314 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	4618      	mov	r0, r3
 800d310:	f004 fcfa 	bl	8011d08 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b05      	cmp	r3, #5
 800d31e:	dd0e      	ble.n	800d33e <_ZN6tflite12RuntimeShape6ResizeEi+0x4e>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	4a09      	ldr	r2, [pc, #36]	; (800d348 <_ZN6tflite12RuntimeShape6ResizeEi+0x58>)
 800d324:	4293      	cmp	r3, r2
 800d326:	d801      	bhi.n	800d32c <_ZN6tflite12RuntimeShape6ResizeEi+0x3c>
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	e001      	b.n	800d330 <_ZN6tflite12RuntimeShape6ResizeEi+0x40>
 800d32c:	f04f 33ff 	mov.w	r3, #4294967295
 800d330:	4618      	mov	r0, r3
 800d332:	f004 fceb 	bl	8011d0c <_Znaj>
 800d336:	4603      	mov	r3, r0
 800d338:	461a      	mov	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800d33e:	bf00      	nop
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	1ffffffe 	.word	0x1ffffffe

0800d34c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b086      	sub	sp, #24
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800d358:	68b9      	ldr	r1, [r7, #8]
 800d35a:	68f8      	ldr	r0, [r7, #12]
 800d35c:	f7ff ffc8 	bl	800d2f0 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f7ff ff9f 	bl	800d2a4 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800d366:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	461a      	mov	r2, r3
 800d36e:	6879      	ldr	r1, [r7, #4]
 800d370:	6978      	ldr	r0, [r7, #20]
 800d372:	f007 fc5d 	bl	8014c30 <memcpy>
  }
 800d376:	bf00      	nop
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800d37e:	b580      	push	{r7, lr}
 800d380:	b086      	sub	sp, #24
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d103      	bne.n	800d396 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7ff ff20 	bl	800d1d4 <_ZN6tflite12RuntimeShapeC1Ev>
 800d394:	e00d      	b.n	800d3b2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	689b      	ldr	r3, [r3, #8]
 800d39a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800d3a2:	697b      	ldr	r3, [r7, #20]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	6939      	ldr	r1, [r7, #16]
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7ff ff1f 	bl	800d1f0 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	3718      	adds	r7, #24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800d3ba:	b480      	push	{r7}
 800d3bc:	b083      	sub	sp, #12
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d002      	beq.n	800d3ce <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800d3cc:	e000      	b.n	800d3d0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800d3ce:	2300      	movs	r3, #0
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	370c      	adds	r7, #12
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d002      	beq.n	800d3f0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	e000      	b.n	800d3f2 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 800d3f0:	2300      	movs	r3, #0
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	370c      	adds	r7, #12
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800d3fe:	b480      	push	{r7}
 800d400:	b083      	sub	sp, #12
 800d402:	af00      	add	r7, sp, #0
 800d404:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d002      	beq.n	800d412 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800d410:	e000      	b.n	800d414 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800d412:	2300      	movs	r3, #0
}
 800d414:	4618      	mov	r0, r3
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800d420:	b480      	push	{r7}
 800d422:	b083      	sub	sp, #12
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d002      	beq.n	800d434 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	e000      	b.n	800d436 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800d442:	b480      	push	{r7}
 800d444:	af00      	add	r7, sp, #0
 800d446:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d44a:	4618      	mov	r0, r3
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800d454:	b480      	push	{r7}
 800d456:	af00      	add	r7, sp, #0
 800d458:	4b04      	ldr	r3, [pc, #16]	; (800d46c <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800d45a:	ee07 3a90 	vmov	s15, r3
 800d45e:	eeb0 0a67 	vmov.f32	s0, s15
 800d462:	46bd      	mov	sp, r7
 800d464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d468:	4770      	bx	lr
 800d46a:	bf00      	nop
 800d46c:	7f7fffff 	.word	0x7f7fffff

0800d470 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800d470:	b480      	push	{r7}
 800d472:	af00      	add	r7, sp, #0
 800d474:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800d478:	ee07 3a90 	vmov	s15, r3
 800d47c:	eeb0 0a67 	vmov.f32	s0, s15
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800d488:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800d48c:	b08c      	sub	sp, #48	; 0x30
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
 800d492:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	429a      	cmp	r2, r3
 800d49a:	d107      	bne.n	800d4ac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800d49c:	f7ff ffd1 	bl	800d442 <_ZNSt14numeric_limitsIlE3minEv>
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	d101      	bne.n	800d4ac <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	e000      	b.n	800d4ae <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800d4b8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b_64(b);
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800d4c2:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	69ba      	ldr	r2, [r7, #24]
 800d4ca:	fb02 f203 	mul.w	r2, r2, r3
 800d4ce:	69fb      	ldr	r3, [r7, #28]
 800d4d0:	6a39      	ldr	r1, [r7, #32]
 800d4d2:	fb01 f303 	mul.w	r3, r1, r3
 800d4d6:	441a      	add	r2, r3
 800d4d8:	6a39      	ldr	r1, [r7, #32]
 800d4da:	69bb      	ldr	r3, [r7, #24]
 800d4dc:	fba1 3403 	umull	r3, r4, r1, r3
 800d4e0:	4422      	add	r2, r4
 800d4e2:	4614      	mov	r4, r2
 800d4e4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800d4e8:	e9c7 3404 	strd	r3, r4, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d4ec:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	f174 0300 	sbcs.w	r3, r4, #0
 800d4f6:	db02      	blt.n	800d4fe <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x76>
 800d4f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4fc:	e000      	b.n	800d500 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800d4fe:	4b19      	ldr	r3, [pc, #100]	; (800d564 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800d500:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	4619      	mov	r1, r3
 800d506:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800d50a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d50e:	eb13 0b01 	adds.w	fp, r3, r1
 800d512:	eb44 0c02 	adc.w	ip, r4, r2
 800d516:	465b      	mov	r3, fp
 800d518:	4664      	mov	r4, ip
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	f174 0200 	sbcs.w	r2, r4, #0
 800d520:	da06      	bge.n	800d530 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800d522:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d526:	f04f 0200 	mov.w	r2, #0
 800d52a:	185b      	adds	r3, r3, r1
 800d52c:	eb44 0402 	adc.w	r4, r4, r2
 800d530:	f04f 0100 	mov.w	r1, #0
 800d534:	f04f 0200 	mov.w	r2, #0
 800d538:	0fd9      	lsrs	r1, r3, #31
 800d53a:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 800d53e:	17e2      	asrs	r2, r4, #31
 800d540:	460b      	mov	r3, r1
 800d542:	4614      	mov	r4, r2
  std::int32_t ab_x2_high32 =
 800d544:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800d546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d003      	beq.n	800d556 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xce>
 800d54e:	f7ff f9cd 	bl	800c8ec <_ZNSt14numeric_limitsIlE3maxEv>
 800d552:	4603      	mov	r3, r0
 800d554:	e000      	b.n	800d558 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800d556:	68bb      	ldr	r3, [r7, #8]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3730      	adds	r7, #48	; 0x30
 800d55c:	46bd      	mov	sp, r7
 800d55e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800d562:	bf00      	nop
 800d564:	c0000001 	.word	0xc0000001

0800d568 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	ed87 0a03 	vstr	s0, [r7, #12]
 800d572:	edc7 0a02 	vstr	s1, [r7, #8]
 800d576:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 800d57a:	f107 0208 	add.w	r2, r7, #8
 800d57e:	f107 030c 	add.w	r3, r7, #12
 800d582:	4611      	mov	r1, r2
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff fb3c 	bl	800cc02 <_ZSt3maxIfERKT_S2_S2_>
 800d58a:	4602      	mov	r2, r0
 800d58c:	1d3b      	adds	r3, r7, #4
 800d58e:	4619      	mov	r1, r3
 800d590:	4610      	mov	r0, r2
 800d592:	f7ff fb4f 	bl	800cc34 <_ZSt3minIfERKT_S2_S2_>
 800d596:	4603      	mov	r3, r0
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	ee07 3a90 	vmov	s15, r3
}
 800d59e:	eeb0 0a67 	vmov.f32	s0, s15
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800d5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5aa:	b089      	sub	sp, #36	; 0x24
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800d5b2:	683a      	ldr	r2, [r7, #0]
 800d5b4:	2a00      	cmp	r2, #0
 800d5b6:	da06      	bge.n	800d5c6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800d5b8:	4b30      	ldr	r3, [pc, #192]	; (800d67c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd4>)
 800d5ba:	4a31      	ldr	r2, [pc, #196]	; (800d680 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800d5bc:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800d5c0:	4830      	ldr	r0, [pc, #192]	; (800d684 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800d5c2:	f007 fa4f 	bl	8014a64 <__assert_func>
  assert(exponent <= 31);
 800d5c6:	683a      	ldr	r2, [r7, #0]
 800d5c8:	2a1f      	cmp	r2, #31
 800d5ca:	dd06      	ble.n	800d5da <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800d5cc:	4b2e      	ldr	r3, [pc, #184]	; (800d688 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800d5ce:	4a2c      	ldr	r2, [pc, #176]	; (800d680 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800d5d0:	f240 1167 	movw	r1, #359	; 0x167
 800d5d4:	482b      	ldr	r0, [pc, #172]	; (800d684 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800d5d6:	f007 fa45 	bl	8014a64 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800d5da:	f04f 0101 	mov.w	r1, #1
 800d5de:	f04f 0200 	mov.w	r2, #0
 800d5e2:	6838      	ldr	r0, [r7, #0]
 800d5e4:	f1a0 0620 	sub.w	r6, r0, #32
 800d5e8:	f1c0 0520 	rsb	r5, r0, #32
 800d5ec:	fa02 f400 	lsl.w	r4, r2, r0
 800d5f0:	fa01 f606 	lsl.w	r6, r1, r6
 800d5f4:	4334      	orrs	r4, r6
 800d5f6:	fa21 f505 	lsr.w	r5, r1, r5
 800d5fa:	432c      	orrs	r4, r5
 800d5fc:	fa01 f300 	lsl.w	r3, r1, r0
 800d600:	3b01      	subs	r3, #1
 800d602:	4618      	mov	r0, r3
 800d604:	f000 f884 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d608:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800d60a:	2000      	movs	r0, #0
 800d60c:	f000 f880 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d610:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800d612:	2001      	movs	r0, #1
 800d614:	f000 f87c 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800d618:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800d61a:	69f9      	ldr	r1, [r7, #28]
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	f000 f882 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d622:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800d624:	2101      	movs	r1, #1
 800d626:	69f8      	ldr	r0, [r7, #28]
 800d628:	f000 f88b 	bl	800d742 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800d62c:	4604      	mov	r4, r0
 800d62e:	69b9      	ldr	r1, [r7, #24]
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f895 	bl	800d760 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800d636:	4603      	mov	r3, r0
 800d638:	6979      	ldr	r1, [r7, #20]
 800d63a:	4618      	mov	r0, r3
 800d63c:	f000 f873 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d640:	4603      	mov	r3, r0
  const IntegerType threshold =
 800d642:	4619      	mov	r1, r3
 800d644:	4620      	mov	r0, r4
 800d646:	f000 f89f 	bl	800d788 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800d64a:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f877 	bl	800d742 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800d654:	4604      	mov	r4, r0
 800d656:	68f9      	ldr	r1, [r7, #12]
 800d658:	6938      	ldr	r0, [r7, #16]
 800d65a:	f000 f8a3 	bl	800d7a4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800d65e:	4603      	mov	r3, r0
 800d660:	6979      	ldr	r1, [r7, #20]
 800d662:	4618      	mov	r0, r3
 800d664:	f000 f85f 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800d668:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 800d66a:	4619      	mov	r1, r3
 800d66c:	4620      	mov	r0, r4
 800d66e:	f000 f88b 	bl	800d788 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800d672:	4603      	mov	r3, r0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3724      	adds	r7, #36	; 0x24
 800d678:	46bd      	mov	sp, r7
 800d67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d67c:	08018598 	.word	0x08018598
 800d680:	0803614c 	.word	0x0803614c
 800d684:	080185a8 	.word	0x080185a8
 800d688:	08018638 	.word	0x08018638

0800d68c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b084      	sub	sp, #16
 800d690:	af00      	add	r7, sp, #0
 800d692:	4603      	mov	r3, r0
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	607a      	str	r2, [r7, #4]
 800d698:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800d69a:	7bfb      	ldrb	r3, [r7, #15]
 800d69c:	2b01      	cmp	r3, #1
 800d69e:	d10b      	bne.n	800d6b8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
 800d6a2:	f04f 0200 	mov.w	r2, #0
 800d6a6:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800d6a8:	f7ff fed4 	bl	800d454 <_ZNSt14numeric_limitsIfE3maxEv>
 800d6ac:	eef0 7a40 	vmov.f32	s15, s0
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800d6b6:	e023      	b.n	800d700 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ba:	2b03      	cmp	r3, #3
 800d6bc:	d107      	bne.n	800d6ce <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	f04f 0200 	mov.w	r2, #0
 800d6c4:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a0f      	ldr	r2, [pc, #60]	; (800d708 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800d6ca:	601a      	str	r2, [r3, #0]
}
 800d6cc:	e018      	b.n	800d700 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800d6ce:	7bfb      	ldrb	r3, [r7, #15]
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	d107      	bne.n	800d6e4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	4a0d      	ldr	r2, [pc, #52]	; (800d70c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800d6d8:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800d6e0:	601a      	str	r2, [r3, #0]
}
 800d6e2:	e00d      	b.n	800d700 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800d6e4:	f7ff fec4 	bl	800d470 <_ZNSt14numeric_limitsIfE6lowestEv>
 800d6e8:	eef0 7a40 	vmov.f32	s15, s0
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800d6f2:	f7ff feaf 	bl	800d454 <_ZNSt14numeric_limitsIfE3maxEv>
 800d6f6:	eef0 7a40 	vmov.f32	s15, s0
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	edc3 7a00 	vstr	s15, [r3]
}
 800d700:	bf00      	nop
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}
 800d708:	40c00000 	.word	0x40c00000
 800d70c:	bf800000 	.word	0xbf800000

0800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  return x;
 800d718:	687b      	ldr	r3, [r7, #4]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	370c      	adds	r7, #12
 800d71e:	46bd      	mov	sp, r7
 800d720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d724:	4770      	bx	lr

0800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800d726:	b480      	push	{r7}
 800d728:	b083      	sub	sp, #12
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
 800d72e:	6039      	str	r1, [r7, #0]
  return a & b;
 800d730:	687a      	ldr	r2, [r7, #4]
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	4013      	ands	r3, r2
}
 800d736:	4618      	mov	r0, r3
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800d742:	b480      	push	{r7}
 800d744:	b083      	sub	sp, #12
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	fa42 f303 	asr.w	r3, r2, r3
}
 800d754:	4618      	mov	r0, r3
 800d756:	370c      	adds	r7, #12
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800d76a:	687a      	ldr	r2, [r7, #4]
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	bfb4      	ite	lt
 800d772:	2301      	movlt	r3, #1
 800d774:	2300      	movge	r3, #0
 800d776:	b2db      	uxtb	r3, r3
 800d778:	4618      	mov	r0, r3
 800d77a:	f000 f827 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d77e:	4603      	mov	r3, r0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3708      	adds	r7, #8
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800d788:	b480      	push	{r7}
 800d78a:	b083      	sub	sp, #12
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
 800d790:	6039      	str	r1, [r7, #0]
  return a + b;
 800d792:	687a      	ldr	r2, [r7, #4]
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	4413      	add	r3, r2
}
 800d798:	4618      	mov	r0, r3
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	bfcc      	ite	gt
 800d7b6:	2301      	movgt	r3, #1
 800d7b8:	2300      	movle	r3, #0
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f000 f805 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800d7c2:	4603      	mov	r3, r0
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	3708      	adds	r7, #8
 800d7c8:	46bd      	mov	sp, r7
 800d7ca:	bd80      	pop	{r7, pc}

0800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b082      	sub	sp, #8
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d004      	beq.n	800d7e4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800d7da:	2000      	movs	r0, #0
 800d7dc:	f000 f807 	bl	800d7ee <_ZN8gemmlowp6BitNotIlEET_S1_>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	e000      	b.n	800d7e6 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800d7e4:	2300      	movs	r3, #0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3708      	adds	r7, #8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800d7ee:	b480      	push	{r7}
 800d7f0:	b083      	sub	sp, #12
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
  return ~a;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	43db      	mvns	r3, r3
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	370c      	adds	r7, #12
 800d7fe:	46bd      	mov	sp, r7
 800d800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d804:	4770      	bx	lr

0800d806 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800d806:	b480      	push	{r7}
 800d808:	b083      	sub	sp, #12
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d002      	beq.n	800d81a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800d818:	e000      	b.n	800d81c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800d81a:	2300      	movs	r3, #0
}
 800d81c:	4618      	mov	r0, r3
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	4618      	mov	r0, r3
 800d838:	370c      	adds	r7, #12
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr

0800d842 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800d842:	b480      	push	{r7}
 800d844:	b083      	sub	sp, #12
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4618      	mov	r0, r3
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 800d85c:	b590      	push	{r4, r7, lr}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
 800d868:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d86a:	68b9      	ldr	r1, [r7, #8]
 800d86c:	68f8      	ldr	r0, [r7, #12]
 800d86e:	f7ff fcf4 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800d872:	4604      	mov	r4, r0
 800d874:	6839      	ldr	r1, [r7, #0]
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff fcef 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800d87c:	4603      	mov	r3, r0
 800d87e:	429c      	cmp	r4, r3
 800d880:	d001      	beq.n	800d886 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800d882:	f007 f8e8 	bl	8014a56 <abort>
  return shape1.Dims(index1);
 800d886:	68b9      	ldr	r1, [r7, #8]
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	f7ff fce6 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800d88e:	4603      	mov	r3, r0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3714      	adds	r7, #20
 800d894:	46bd      	mov	sp, r7
 800d896:	bd90      	pop	{r4, r7, pc}

0800d898 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
 800d898:	b580      	push	{r7, lr}
 800d89a:	b086      	sub	sp, #24
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d8aa:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	dc02      	bgt.n	800d8b8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	425b      	negs	r3, r3
 800d8b6:	e000      	b.n	800d8ba <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c4:	68b9      	ldr	r1, [r7, #8]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff fdde 	bl	800d488 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800d8cc:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
 800d8ce:	6939      	ldr	r1, [r7, #16]
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7ff fe69 	bl	800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800d8d6:	4603      	mov	r3, r0
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 800d8e0:	b480      	push	{r7}
 800d8e2:	b087      	sub	sp, #28
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	da0a      	bge.n	800d90e <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	009b      	lsls	r3, r3, #2
 800d900:	4413      	add	r3, r2
 800d902:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 800d904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d908:	d001      	beq.n	800d90e <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 800d90a:	2301      	movs	r3, #1
 800d90c:	e000      	b.n	800d910 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 800d90e:	2300      	movs	r3, #0
 800d910:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 800d912:	7dfb      	ldrb	r3, [r7, #23]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d00a      	beq.n	800d92e <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x4e>
    return &context->tensors[node->inputs->data[index]];
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	689a      	ldr	r2, [r3, #8]
 800d91c:	68bb      	ldr	r3, [r7, #8]
 800d91e:	6819      	ldr	r1, [r3, #0]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	440b      	add	r3, r1
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	019b      	lsls	r3, r3, #6
 800d92a:	4413      	add	r3, r2
 800d92c:	e000      	b.n	800d930 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x50>
  return nullptr;
 800d92e:	2300      	movs	r3, #0
}
 800d930:	4618      	mov	r0, r3
 800d932:	371c      	adds	r7, #28
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800d946:	6878      	ldr	r0, [r7, #4]
 800d948:	f7ff fc7b 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d94c:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	db03      	blt.n	800d95c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800d954:	683a      	ldr	r2, [r7, #0]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	429a      	cmp	r2, r3
 800d95a:	db01      	blt.n	800d960 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800d95c:	f007 f87b 	bl	8014a56 <abort>
  const auto* dims_data = shape.DimsData();
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f7ff fcb2 	bl	800d2ca <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800d966:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800d968:	2301      	movs	r3, #1
 800d96a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800d96c:	2300      	movs	r3, #0
 800d96e:	613b      	str	r3, [r7, #16]
 800d970:	693a      	ldr	r2, [r7, #16]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	429a      	cmp	r2, r3
 800d976:	da12      	bge.n	800d99e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d978:	693a      	ldr	r2, [r7, #16]
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d005      	beq.n	800d98c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	68ba      	ldr	r2, [r7, #8]
 800d986:	4413      	add	r3, r2
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	e000      	b.n	800d98e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 800d98c:	2301      	movs	r3, #1
 800d98e:	697a      	ldr	r2, [r7, #20]
 800d990:	fb03 f302 	mul.w	r3, r3, r2
 800d994:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	3301      	adds	r3, #1
 800d99a:	613b      	str	r3, [r7, #16]
 800d99c:	e7e8      	b.n	800d970 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 800d99e:	697b      	ldr	r3, [r7, #20]
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3718      	adds	r7, #24
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800d9a8:	b590      	push	{r4, r7, lr}
 800d9aa:	b091      	sub	sp, #68	; 0x44
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	60f8      	str	r0, [r7, #12]
 800d9b0:	60b9      	str	r1, [r7, #8]
 800d9b2:	607a      	str	r2, [r7, #4]
 800d9b4:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	69db      	ldr	r3, [r3, #28]
 800d9ba:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6a1b      	ldr	r3, [r3, #32]
 800d9c0:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800d9c2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d9c4:	f7ff fc3d 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d9c8:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800d9ca:	6838      	ldr	r0, [r7, #0]
 800d9cc:	f7ff fc39 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800d9d0:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800d9d2:	6a3b      	ldr	r3, [r7, #32]
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	4619      	mov	r1, r3
 800d9d8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d9da:	f7ff ffaf 	bl	800d93c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800d9de:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	1e99      	subs	r1, r3, #2
 800d9e4:	6a3b      	ldr	r3, [r7, #32]
 800d9e6:	3b01      	subs	r3, #1
                                       output_shape, output_dims_count - 1);
 800d9e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d9ea:	6838      	ldr	r0, [r7, #0]
 800d9ec:	f7ff ff36 	bl	800d85c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800d9f0:	6178      	str	r0, [r7, #20]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800d9f2:	69fb      	ldr	r3, [r7, #28]
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6838      	ldr	r0, [r7, #0]
 800d9fa:	f7ff fc2e 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800d9fe:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800da00:	2300      	movs	r3, #0
 800da02:	63fb      	str	r3, [r7, #60]	; 0x3c
 800da04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	429a      	cmp	r2, r3
 800da0a:	da5f      	bge.n	800dacc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800da0c:	2300      	movs	r3, #0
 800da0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800da10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da12:	697b      	ldr	r3, [r7, #20]
 800da14:	429a      	cmp	r2, r3
 800da16:	da55      	bge.n	800dac4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 800da18:	f04f 0300 	mov.w	r3, #0
 800da1c:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800da1e:	2300      	movs	r3, #0
 800da20:	633b      	str	r3, [r7, #48]	; 0x30
 800da22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	429a      	cmp	r2, r3
 800da28:	da21      	bge.n	800da6e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800da2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da2c:	693a      	ldr	r2, [r7, #16]
 800da2e:	fb02 f203 	mul.w	r2, r2, r3
 800da32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da34:	4413      	add	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	4413      	add	r3, r2
 800da3c:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800da40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	fb02 f203 	mul.w	r2, r2, r3
 800da48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da4a:	4413      	add	r3, r2
 800da4c:	009b      	lsls	r3, r3, #2
 800da4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800da50:	4413      	add	r3, r2
 800da52:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800da56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da62:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800da66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da68:	3301      	adds	r3, #1
 800da6a:	633b      	str	r3, [r7, #48]	; 0x30
 800da6c:	e7d9      	b.n	800da22 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 800da6e:	f04f 0300 	mov.w	r3, #0
 800da72:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800da74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da76:	2b00      	cmp	r3, #0
 800da78:	d005      	beq.n	800da86 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 800da7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da80:	4413      	add	r3, r2
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800da86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da8a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800da8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da96:	fb02 f203 	mul.w	r2, r2, r3
 800da9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da9c:	4413      	add	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800daa2:	18d4      	adds	r4, r2, r3
 800daa4:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800daa8:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800daac:	eeb0 0a67 	vmov.f32	s0, s15
 800dab0:	f7ff fd5a 	bl	800d568 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 800dab4:	eef0 7a40 	vmov.f32	s15, s0
 800dab8:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800dabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dabe:	3301      	adds	r3, #1
 800dac0:	63bb      	str	r3, [r7, #56]	; 0x38
 800dac2:	e7a5      	b.n	800da10 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 800dac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac6:	3301      	adds	r3, #1
 800dac8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800daca:	e79b      	b.n	800da04 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800dacc:	bf00      	nop
 800dace:	3744      	adds	r7, #68	; 0x44
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd90      	pop	{r4, r7, pc}

0800dad4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b096      	sub	sp, #88	; 0x58
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
 800dae0:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	685b      	ldr	r3, [r3, #4]
 800daec:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	68db      	ldr	r3, [r3, #12]
 800daf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	695b      	ldr	r3, [r3, #20]
 800db04:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	699b      	ldr	r3, [r3, #24]
 800db0a:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800db0c:	6838      	ldr	r0, [r7, #0]
 800db0e:	f7ff fb98 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800db12:	4603      	mov	r3, r0
 800db14:	2b01      	cmp	r3, #1
 800db16:	dc01      	bgt.n	800db1c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 800db18:	f006 ff9d 	bl	8014a56 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800db1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db1e:	f7ff fb90 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	dc01      	bgt.n	800db2c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 800db28:	f006 ff95 	bl	8014a56 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800db2c:	69ba      	ldr	r2, [r7, #24]
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	429a      	cmp	r2, r3
 800db32:	dd01      	ble.n	800db38 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 800db34:	f006 ff8f 	bl	8014a56 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800db38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db3a:	f7ff fb82 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800db3e:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 800db40:	6838      	ldr	r0, [r7, #0]
 800db42:	f7ff fb7e 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800db46:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800db48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db4a:	3b01      	subs	r3, #1
 800db4c:	4619      	mov	r1, r3
 800db4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800db50:	f7ff fef4 	bl	800d93c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800db54:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800db56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db58:	1e99      	subs	r1, r3, #2
 800db5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db5c:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 800db5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800db60:	6838      	ldr	r0, [r7, #0]
 800db62:	f7ff fe7b 	bl	800d85c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800db66:	62b8      	str	r0, [r7, #40]	; 0x28
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800db68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6a:	3b01      	subs	r3, #1
 800db6c:	4619      	mov	r1, r3
 800db6e:	6838      	ldr	r0, [r7, #0]
 800db70:	f7ff fb73 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800db74:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800db76:	2300      	movs	r3, #0
 800db78:	657b      	str	r3, [r7, #84]	; 0x54
 800db7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800db7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7e:	429a      	cmp	r2, r3
 800db80:	da73      	bge.n	800dc6a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800db82:	2300      	movs	r3, #0
 800db84:	653b      	str	r3, [r7, #80]	; 0x50
 800db86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db8a:	429a      	cmp	r2, r3
 800db8c:	da69      	bge.n	800dc62 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32 acc = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800db92:	2300      	movs	r3, #0
 800db94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800db96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9a:	429a      	cmp	r2, r3
 800db9c:	da24      	bge.n	800dbe8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32 input_val = input_data[b * accum_depth + d];
 800db9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dba2:	fb02 f203 	mul.w	r2, r2, r3
 800dba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba8:	4413      	add	r3, r2
 800dbaa:	461a      	mov	r2, r3
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	4413      	add	r3, r2
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 800dbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dbb8:	fb02 f203 	mul.w	r2, r2, r3
 800dbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbbe:	4413      	add	r3, r2
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbc4:	4413      	add	r3, r2
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800dbca:	69fa      	ldr	r2, [r7, #28]
 800dbcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dbce:	4413      	add	r3, r2
 800dbd0:	6a39      	ldr	r1, [r7, #32]
 800dbd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbd4:	440a      	add	r2, r1
 800dbd6:	fb02 f203 	mul.w	r2, r2, r3
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	4413      	add	r3, r2
 800dbde:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800dbe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbe6:	e7d6      	b.n	800db96 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 800dbe8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d007      	beq.n	800dbfe <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 800dbee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dbf4:	4413      	add	r3, r2
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	4413      	add	r3, r2
 800dbfc:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff fe47 	bl	800d898 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 800dc0e:	693a      	ldr	r2, [r7, #16]
 800dc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc12:	4413      	add	r3, r2
 800dc14:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 800dc16:	f107 0218 	add.w	r2, r7, #24
 800dc1a:	f107 0310 	add.w	r3, r7, #16
 800dc1e:	4611      	mov	r1, r2
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff fa61 	bl	800d0e8 <_ZSt3maxIlERKT_S2_S2_>
 800dc26:	4603      	mov	r3, r0
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 800dc2c:	f107 0214 	add.w	r2, r7, #20
 800dc30:	f107 0310 	add.w	r3, r7, #16
 800dc34:	4611      	mov	r1, r2
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7ff fa6a 	bl	800d110 <_ZSt3minIlERKT_S2_S2_>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 800dc42:	6939      	ldr	r1, [r7, #16]
 800dc44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc48:	fb02 f203 	mul.w	r2, r2, r3
 800dc4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc4e:	4413      	add	r3, r2
 800dc50:	461a      	mov	r2, r3
 800dc52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dc54:	4413      	add	r3, r2
 800dc56:	b2ca      	uxtb	r2, r1
 800dc58:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800dc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	653b      	str	r3, [r7, #80]	; 0x50
 800dc60:	e791      	b.n	800db86 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 800dc62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc64:	3301      	adds	r3, #1
 800dc66:	657b      	str	r3, [r7, #84]	; 0x54
 800dc68:	e787      	b.n	800db7a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 800dc6a:	bf00      	nop
 800dc6c:	3758      	adds	r7, #88	; 0x58
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}

0800dc72 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b098      	sub	sp, #96	; 0x60
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	60f8      	str	r0, [r7, #12]
 800dc7a:	60b9      	str	r1, [r7, #8]
 800dc7c:	607a      	str	r2, [r7, #4]
 800dc7e:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	689b      	ldr	r3, [r3, #8]
 800dc90:	623b      	str	r3, [r7, #32]
  const int32 output_multiplier = params.output_multiplier;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	64bb      	str	r3, [r7, #72]	; 0x48
  const int output_shift = params.output_shift;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_activation_min = params.quantized_activation_min;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	61bb      	str	r3, [r7, #24]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800dcaa:	69fa      	ldr	r2, [r7, #28]
 800dcac:	69bb      	ldr	r3, [r7, #24]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	dd01      	ble.n	800dcb6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 800dcb2:	f006 fed0 	bl	8014a56 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 800dcb6:	6a3b      	ldr	r3, [r7, #32]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d001      	beq.n	800dcc0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 800dcbc:	f006 fecb 	bl	8014a56 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800dcc0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800dcc2:	f7ff fabe 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800dcc6:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_dim_count = filter_shape.DimensionsCount();
 800dcc8:	6838      	ldr	r0, [r7, #0]
 800dcca:	f7ff faba 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800dcce:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800dcd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800dcd8:	f7ff fe30 	bl	800d93c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800dcdc:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800dcde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dce0:	1e99      	subs	r1, r3, #2
 800dce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dce4:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 800dce6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800dce8:	6838      	ldr	r0, [r7, #0]
 800dcea:	f7ff fdb7 	bl	800d85c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800dcee:	6378      	str	r0, [r7, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800dcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcf2:	3b01      	subs	r3, #1
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	6838      	ldr	r0, [r7, #0]
 800dcf8:	f7ff faaf 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800dcfc:	6338      	str	r0, [r7, #48]	; 0x30
  for (int b = 0; b < batches; ++b) {
 800dcfe:	2300      	movs	r3, #0
 800dd00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dd02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd06:	429a      	cmp	r2, r3
 800dd08:	da7c      	bge.n	800de04 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd12:	429a      	cmp	r2, r3
 800dd14:	da72      	bge.n	800ddfc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 800dd16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800dd1c:	4413      	add	r3, r2
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 800dd22:	2300      	movs	r3, #0
 800dd24:	657b      	str	r3, [r7, #84]	; 0x54
 800dd26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dd28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	da2c      	bge.n	800dd88 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 800dd2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd32:	fb02 f203 	mul.w	r2, r2, r3
 800dd36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd38:	4413      	add	r3, r2
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	4413      	add	r3, r2
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	4413      	add	r3, r2
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 800dd4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd52:	fb02 f203 	mul.w	r2, r2, r3
 800dd56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd58:	4413      	add	r3, r2
 800dd5a:	461a      	mov	r2, r3
 800dd5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dd5e:	4413      	add	r3, r2
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	4413      	add	r3, r2
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        accum += filter_val * input_val;
 800dd6e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800dd72:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800dd76:	fb02 f203 	mul.w	r2, r2, r3
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	4413      	add	r3, r2
 800dd7e:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800dd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd82:	3301      	adds	r3, #1
 800dd84:	657b      	str	r3, [r7, #84]	; 0x54
 800dd86:	e7ce      	b.n	800dd26 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7ff fd82 	bl	800d898 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800dd94:	4603      	mov	r3, r0
      accum =
 800dd96:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 800dd98:	69fa      	ldr	r2, [r7, #28]
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	1ad3      	subs	r3, r2, r3
 800dd9e:	627b      	str	r3, [r7, #36]	; 0x24
 800dda0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800dda4:	f107 0314 	add.w	r3, r7, #20
 800dda8:	4611      	mov	r1, r2
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff f99c 	bl	800d0e8 <_ZSt3maxIlERKT_S2_S2_>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 800ddb6:	69ba      	ldr	r2, [r7, #24]
 800ddb8:	6a3b      	ldr	r3, [r7, #32]
 800ddba:	1ad3      	subs	r3, r2, r3
 800ddbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800ddbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800ddc2:	f107 0314 	add.w	r3, r7, #20
 800ddc6:	4611      	mov	r1, r2
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f7ff f9a1 	bl	800d110 <_ZSt3minIlERKT_S2_S2_>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 800ddd4:	697a      	ldr	r2, [r7, #20]
 800ddd6:	6a3b      	ldr	r3, [r7, #32]
 800ddd8:	4413      	add	r3, r2
 800ddda:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 800dddc:	6979      	ldr	r1, [r7, #20]
 800ddde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dde0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dde2:	fb02 f203 	mul.w	r2, r2, r3
 800dde6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dde8:	4413      	add	r3, r2
 800ddea:	005b      	lsls	r3, r3, #1
 800ddec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ddee:	4413      	add	r3, r2
 800ddf0:	b20a      	sxth	r2, r1
 800ddf2:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ddf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddfa:	e788      	b.n	800dd0e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 800ddfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddfe:	3301      	adds	r3, #1
 800de00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800de02:	e77e      	b.n	800dd02 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 800de04:	bf00      	nop
 800de06:	3760      	adds	r7, #96	; 0x60
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}

0800de0c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b096      	sub	sp, #88	; 0x58
 800de10:	af00      	add	r7, sp, #0
 800de12:	60f8      	str	r0, [r7, #12]
 800de14:	60b9      	str	r1, [r7, #8]
 800de16:	607a      	str	r2, [r7, #4]
 800de18:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	689b      	ldr	r3, [r3, #8]
 800de2a:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	695b      	ldr	r3, [r3, #20]
 800de3c:	623b      	str	r3, [r7, #32]
  const int32 output_activation_max = params.quantized_activation_max;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	699b      	ldr	r3, [r3, #24]
 800de42:	61fb      	str	r3, [r7, #28]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800de44:	6838      	ldr	r0, [r7, #0]
 800de46:	f7ff f9fc 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	dc01      	bgt.n	800de54 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800de50:	f006 fe01 	bl	8014a56 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800de54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800de56:	f7ff f9f4 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800de5a:	4603      	mov	r3, r0
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d001      	beq.n	800de64 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800de60:	f006 fdf9 	bl	8014a56 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800de64:	6a3a      	ldr	r2, [r7, #32]
 800de66:	69fb      	ldr	r3, [r7, #28]
 800de68:	429a      	cmp	r2, r3
 800de6a:	dd01      	ble.n	800de70 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800de6c:	f006 fdf3 	bl	8014a56 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800de70:	6838      	ldr	r0, [r7, #0]
 800de72:	f7ff f9e6 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800de76:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800de78:	2100      	movs	r1, #0
 800de7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800de7c:	f7ff f9ed 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800de80:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800de82:	2101      	movs	r1, #1
 800de84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800de86:	f7ff f9e8 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800de8a:	4603      	mov	r3, r0
 800de8c:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800de8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de90:	3b02      	subs	r3, #2
 800de92:	4619      	mov	r1, r3
 800de94:	6838      	ldr	r0, [r7, #0]
 800de96:	f7ff f9e0 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800de9a:	4602      	mov	r2, r0
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	da01      	bge.n	800dea6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x9a>
 800dea2:	f006 fdd8 	bl	8014a56 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800dea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dea8:	3b01      	subs	r3, #1
 800deaa:	4619      	mov	r1, r3
 800deac:	6838      	ldr	r0, [r7, #0]
 800deae:	f7ff f9d4 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800deb2:	62f8      	str	r0, [r7, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
 800deb4:	2300      	movs	r3, #0
 800deb6:	657b      	str	r3, [r7, #84]	; 0x54
 800deb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800deba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800debc:	429a      	cmp	r2, r3
 800debe:	da75      	bge.n	800dfac <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800dec0:	2300      	movs	r3, #0
 800dec2:	653b      	str	r3, [r7, #80]	; 0x50
 800dec4:	69bb      	ldr	r3, [r7, #24]
 800dec6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dec8:	429a      	cmp	r2, r3
 800deca:	da6b      	bge.n	800dfa4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x198>
      int32 acc = 0;
 800decc:	2300      	movs	r3, #0
 800dece:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800ded0:	2300      	movs	r3, #0
 800ded2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ded4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ded6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded8:	429a      	cmp	r2, r3
 800deda:	da26      	bge.n	800df2a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11e>
        int32 input_val = input_data[b * accum_depth + d];
 800dedc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dee0:	fb02 f203 	mul.w	r2, r2, r3
 800dee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dee6:	4413      	add	r3, r2
 800dee8:	461a      	mov	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	4413      	add	r3, r2
 800deee:	f993 3000 	ldrsb.w	r3, [r3]
 800def2:	62bb      	str	r3, [r7, #40]	; 0x28
        int32 filter_val = filter_data[out_c * accum_depth + d];
 800def4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800def6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800def8:	fb02 f203 	mul.w	r2, r2, r3
 800defc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defe:	4413      	add	r3, r2
 800df00:	461a      	mov	r2, r3
 800df02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800df04:	4413      	add	r3, r2
 800df06:	f993 3000 	ldrsb.w	r3, [r3]
 800df0a:	627b      	str	r3, [r7, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800df0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df10:	4413      	add	r3, r2
 800df12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df16:	440a      	add	r2, r1
 800df18:	fb02 f203 	mul.w	r2, r2, r3
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	4413      	add	r3, r2
 800df20:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800df22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df24:	3301      	adds	r3, #1
 800df26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800df28:	e7d4      	b.n	800ded4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc8>
      }
      if (bias_data) {
 800df2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d007      	beq.n	800df40 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x134>
        acc += bias_data[out_c];
 800df30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800df36:	4413      	add	r3, r2
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	4413      	add	r3, r2
 800df3e:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800df46:	4618      	mov	r0, r3
 800df48:	f7ff fca6 	bl	800d898 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800df4c:	4603      	mov	r3, r0
 800df4e:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800df50:	697a      	ldr	r2, [r7, #20]
 800df52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df54:	4413      	add	r3, r2
 800df56:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800df58:	f107 0220 	add.w	r2, r7, #32
 800df5c:	f107 0314 	add.w	r3, r7, #20
 800df60:	4611      	mov	r1, r2
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff f8c0 	bl	800d0e8 <_ZSt3maxIlERKT_S2_S2_>
 800df68:	4603      	mov	r3, r0
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800df6e:	f107 021c 	add.w	r2, r7, #28
 800df72:	f107 0314 	add.w	r3, r7, #20
 800df76:	4611      	mov	r1, r2
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff f8c9 	bl	800d110 <_ZSt3minIlERKT_S2_S2_>
 800df7e:	4603      	mov	r3, r0
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800df84:	6979      	ldr	r1, [r7, #20]
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df8a:	fb02 f203 	mul.w	r2, r2, r3
 800df8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df90:	4413      	add	r3, r2
 800df92:	461a      	mov	r2, r3
 800df94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800df96:	4413      	add	r3, r2
 800df98:	b24a      	sxtb	r2, r1
 800df9a:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800df9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df9e:	3301      	adds	r3, #1
 800dfa0:	653b      	str	r3, [r7, #80]	; 0x50
 800dfa2:	e78f      	b.n	800dec4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb8>
  for (int b = 0; b < batches; ++b) {
 800dfa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	657b      	str	r3, [r7, #84]	; 0x54
 800dfaa:	e785      	b.n	800deb8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xac>
    }
  }
}
 800dfac:	bf00      	nop
 800dfae:	3758      	adds	r7, #88	; 0x58
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 800dfb4:	b590      	push	{r4, r7, lr}
 800dfb6:	b08d      	sub	sp, #52	; 0x34
 800dfb8:	af02      	add	r7, sp, #8
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	607b      	str	r3, [r7, #4]
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	72fb      	strb	r3, [r7, #11]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 800dfcc:	7abb      	ldrb	r3, [r7, #10]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d041      	beq.n	800e056 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 800dfd2:	f04f 0300 	mov.w	r3, #0
 800dfd6:	f04f 0400 	mov.w	r4, #0
 800dfda:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800dfde:	f107 0318 	add.w	r3, r7, #24
 800dfe2:	9301      	str	r3, [sp, #4]
 800dfe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfec:	6879      	ldr	r1, [r7, #4]
 800dfee:	68f8      	ldr	r0, [r7, #12]
 800dff0:	f7fe fe9e 	bl	800cd30 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800dff4:	4603      	mov	r3, r0
 800dff6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800dffa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d002      	beq.n	800e008 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 800e002:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e006:	e028      	b.n	800e05a <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 800e008:	ed97 7b06 	vldr	d7, [r7, #24]
 800e00c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e00e:	f107 0214 	add.w	r2, r7, #20
 800e012:	4611      	mov	r1, r2
 800e014:	4618      	mov	r0, r3
 800e016:	eeb0 0a47 	vmov.f32	s0, s14
 800e01a:	eef0 0a67 	vmov.f32	s1, s15
 800e01e:	f7fe fc6f 	bl	800c900 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	425a      	negs	r2, r3
 800e026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e028:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800e02a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e02c:	f103 0208 	add.w	r2, r3, #8
 800e030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e032:	330c      	adds	r3, #12
 800e034:	7af9      	ldrb	r1, [r7, #11]
 800e036:	9300      	str	r3, [sp, #0]
 800e038:	4613      	mov	r3, r2
 800e03a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e03c:	68f8      	ldr	r0, [r7, #12]
 800e03e:	f7fe ffff 	bl	800d040 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800e042:	4603      	mov	r3, r0
 800e044:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e048:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d002      	beq.n	800e056 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 800e050:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e054:	e001      	b.n	800e05a <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 800e056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	372c      	adds	r7, #44	; 0x2c
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd90      	pop	{r4, r7, pc}

0800e062 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800e062:	b580      	push	{r7, lr}
 800e064:	b086      	sub	sp, #24
 800e066:	af00      	add	r7, sp, #0
 800e068:	60f8      	str	r0, [r7, #12]
 800e06a:	60b9      	str	r1, [r7, #8]
 800e06c:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e072:	2b00      	cmp	r3, #0
 800e074:	d101      	bne.n	800e07a <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 800e076:	f006 fcee 	bl	8014a56 <abort>
  void* data = nullptr;
 800e07a:	2300      	movs	r3, #0
 800e07c:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e082:	f107 0214 	add.w	r2, r7, #20
 800e086:	2114      	movs	r1, #20
 800e088:	68f8      	ldr	r0, [r7, #12]
 800e08a:	4798      	blx	r3
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b01      	cmp	r3, #1
 800e090:	bf0c      	ite	eq
 800e092:	2301      	moveq	r3, #1
 800e094:	2300      	movne	r3, #0
 800e096:	b2db      	uxtb	r3, r3
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d001      	beq.n	800e0a0 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 800e09c:	2300      	movs	r3, #0
 800e09e:	e000      	b.n	800e0a2 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 800e0a0:	697b      	ldr	r3, [r7, #20]
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3718      	adds	r7, #24
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
	...

0800e0ac <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800e0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ae:	b08d      	sub	sp, #52	; 0x34
 800e0b0:	af04      	add	r7, sp, #16
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800e0be:	f006 fcca 	bl	8014a56 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	695b      	ldr	r3, [r3, #20]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d101      	bne.n	800e0ce <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800e0ca:	f006 fcc4 	bl	8014a56 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	61fb      	str	r3, [r7, #28]
  const auto params =
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	695b      	ldr	r3, [r3, #20]
 800e0d8:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	6839      	ldr	r1, [r7, #0]
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7ff f829 	bl	800d138 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e0e6:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	6839      	ldr	r1, [r7, #0]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff f822 	bl	800d138 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e0f4:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2202      	movs	r2, #2
 800e0fa:	6839      	ldr	r1, [r7, #0]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7ff fbef 	bl	800d8e0 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 800e102:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2200      	movs	r2, #0
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7ff f82a 	bl	800d164 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800e110:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	781a      	ldrb	r2, [r3, #0]
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d01c      	beq.n	800e158 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	695c      	ldr	r4, [r3, #20]
 800e122:	687d      	ldr	r5, [r7, #4]
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fe fb81 	bl	800c830 <TfLiteTypeGetName>
 800e12e:	4606      	mov	r6, r0
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	781b      	ldrb	r3, [r3, #0]
 800e134:	4618      	mov	r0, r3
 800e136:	f7fe fb7b 	bl	800c830 <TfLiteTypeGetName>
 800e13a:	4603      	mov	r3, r0
 800e13c:	9303      	str	r3, [sp, #12]
 800e13e:	9602      	str	r6, [sp, #8]
 800e140:	4b17      	ldr	r3, [pc, #92]	; (800e1a0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800e142:	9301      	str	r3, [sp, #4]
 800e144:	4b17      	ldr	r3, [pc, #92]	; (800e1a4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	f240 23ef 	movw	r3, #751	; 0x2ef
 800e14c:	4a16      	ldr	r2, [pc, #88]	; (800e1a8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
 800e14e:	4917      	ldr	r1, [pc, #92]	; (800e1ac <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
 800e150:	4628      	mov	r0, r5
 800e152:	47a0      	blx	r4
 800e154:	2301      	movs	r3, #1
 800e156:	e01e      	b.n	800e196 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	781a      	ldrb	r2, [r3, #0]
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	429a      	cmp	r2, r3
 800e162:	d007      	beq.n	800e174 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	695b      	ldr	r3, [r3, #20]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	4911      	ldr	r1, [pc, #68]	; (800e1b0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
 800e16c:	4610      	mov	r0, r2
 800e16e:	4798      	blx	r3
 800e170:	2301      	movs	r3, #1
 800e172:	e010      	b.n	800e196 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	7819      	ldrb	r1, [r3, #0]
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	781a      	ldrb	r2, [r3, #0]
                         filter, bias, output, data);
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	9303      	str	r3, [sp, #12]
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	9302      	str	r3, [sp, #8]
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	f7ff ff10 	bl	800dfb4 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 800e194:	4603      	mov	r3, r0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3724      	adds	r7, #36	; 0x24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	080186f8 	.word	0x080186f8
 800e1a4:	08018708 	.word	0x08018708
 800e1a8:	08018648 	.word	0x08018648
 800e1ac:	080186dc 	.word	0x080186dc
 800e1b0:	08018714 	.word	0x08018714

0800e1b4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 800e1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1b6:	b0ad      	sub	sp, #180	; 0xb4
 800e1b8:	af06      	add	r7, sp, #24
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
 800e1c0:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	425b      	negs	r3, r3
 800e1c8:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 800e1ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800e1ce:	691b      	ldr	r3, [r3, #16]
 800e1d0:	425b      	negs	r3, r3
 800e1d2:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 800e1d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e1d8:	691b      	ldr	r3, [r3, #16]
 800e1da:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	425b      	negs	r3, r3
 800e1e8:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	689b      	ldr	r3, [r3, #8]
 800e1ee:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	68db      	ldr	r3, [r3, #12]
 800e1f4:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 800e1f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7ff f8be 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800e202:	6838      	ldr	r0, [r7, #0]
 800e204:	f7ff f8fb 	bl	800d3fe <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800e208:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 800e20a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e20e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800e212:	4618      	mov	r0, r3
 800e214:	f7ff f8b3 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800e218:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800e21c:	f7ff f8ef 	bl	800d3fe <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800e220:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800e222:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e226:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7ff f8a7 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800e230:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800e234:	f7ff fae7 	bl	800d806 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800e238:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 800e23a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e23e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e242:	4618      	mov	r0, r3
 800e244:	f7ff f89b 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800e248:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800e24c:	f7ff f8e8 	bl	800d420 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800e250:	4603      	mov	r3, r0
 800e252:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800e256:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800e25a:	f107 0010 	add.w	r0, r7, #16
 800e25e:	9304      	str	r3, [sp, #16]
 800e260:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e264:	9303      	str	r3, [sp, #12]
 800e266:	9502      	str	r5, [sp, #8]
 800e268:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e26c:	9301      	str	r3, [sp, #4]
 800e26e:	9400      	str	r4, [sp, #0]
 800e270:	4613      	mov	r3, r2
 800e272:	4632      	mov	r2, r6
 800e274:	f7ff fdca 	bl	800de0c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 800e278:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fe ffca 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800e282:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e286:	4618      	mov	r0, r3
 800e288:	f7fe ffc5 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 800e28c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e290:	4618      	mov	r0, r3
 800e292:	f7fe ffc0 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 800e296:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe ffbb 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 800e2a0:	2300      	movs	r3, #0
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	379c      	adds	r7, #156	; 0x9c
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800e2ac <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 800e2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ae:	b0c9      	sub	sp, #292	; 0x124
 800e2b0:	af06      	add	r7, sp, #24
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	f107 0008 	add.w	r0, r7, #8
 800e2b8:	6001      	str	r1, [r0, #0]
 800e2ba:	1d39      	adds	r1, r7, #4
 800e2bc:	600a      	str	r2, [r1, #0]
 800e2be:	463a      	mov	r2, r7
 800e2c0:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 800e2c2:	463b      	mov	r3, r7
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	691b      	ldr	r3, [r3, #16]
 800e2c8:	425b      	negs	r3, r3
 800e2ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 800e2ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800e2d2:	691b      	ldr	r3, [r3, #16]
 800e2d4:	425b      	negs	r3, r3
 800e2d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 800e2da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e2de:	691b      	ldr	r3, [r3, #16]
 800e2e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 800e2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e2e8:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 800e2ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800e2ee:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 800e2f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2f4:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 800e2f6:	1d3b      	adds	r3, r7, #4
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 800e2fe:	1d3b      	adds	r3, r7, #4
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	425b      	negs	r3, r3
 800e306:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 800e308:	1d3b      	adds	r3, r7, #4
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800e310:	1d3b      	adds	r3, r7, #4
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 800e318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	2b03      	cmp	r3, #3
 800e320:	d002      	beq.n	800e328 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x7c>
 800e322:	2b07      	cmp	r3, #7
 800e324:	d058      	beq.n	800e3d8 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x12c>
 800e326:	e0af      	b.n	800e488 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 800e328:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800e32c:	463b      	mov	r3, r7
 800e32e:	6819      	ldr	r1, [r3, #0]
 800e330:	4610      	mov	r0, r2
 800e332:	f7ff f824 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800e336:	463b      	mov	r3, r7
 800e338:	6818      	ldr	r0, [r3, #0]
 800e33a:	f7fe ff29 	bl	800d190 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800e33e:	4606      	mov	r6, r0
 800e340:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e344:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800e348:	4618      	mov	r0, r3
 800e34a:	f7ff f818 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800e34e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800e352:	f7fe ff1d 	bl	800d190 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800e356:	4604      	mov	r4, r0
 800e358:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e35c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800e360:	4618      	mov	r0, r3
 800e362:	f7ff f80c 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800e366:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800e36a:	f7ff fa4c 	bl	800d806 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800e36e:	4605      	mov	r5, r0
 800e370:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e374:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800e378:	4618      	mov	r0, r3
 800e37a:	f7ff f800 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800e37e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800e382:	f7fe ff16 	bl	800d1b2 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800e386:	4603      	mov	r3, r0
 800e388:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800e38c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800e390:	f107 0014 	add.w	r0, r7, #20
 800e394:	9304      	str	r3, [sp, #16]
 800e396:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e39a:	9303      	str	r3, [sp, #12]
 800e39c:	9502      	str	r5, [sp, #8]
 800e39e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e3a2:	9301      	str	r3, [sp, #4]
 800e3a4:	9400      	str	r4, [sp, #0]
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	4632      	mov	r2, r6
 800e3aa:	f7ff fb93 	bl	800dad4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 800e3ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fe ff2f 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
 800e3b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e3bc:	4618      	mov	r0, r3
 800e3be:	f7fe ff2a 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
 800e3c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fe ff25 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
 800e3cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fe ff20 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800e3d6:	e069      	b.n	800e4ac <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 800e3d8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800e3dc:	463b      	mov	r3, r7
 800e3de:	6819      	ldr	r1, [r3, #0]
 800e3e0:	4610      	mov	r0, r2
 800e3e2:	f7fe ffcc 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800e3e6:	463b      	mov	r3, r7
 800e3e8:	6818      	ldr	r0, [r3, #0]
 800e3ea:	f7fe fed1 	bl	800d190 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800e3ee:	4606      	mov	r6, r0
 800e3f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e3f4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fe ffc0 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800e3fe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800e402:	f7fe fec5 	bl	800d190 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800e406:	4604      	mov	r4, r0
 800e408:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e40c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800e410:	4618      	mov	r0, r3
 800e412:	f7fe ffb4 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800e416:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800e41a:	f7ff f9f4 	bl	800d806 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800e41e:	4605      	mov	r5, r0
 800e420:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800e424:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800e428:	4618      	mov	r0, r3
 800e42a:	f7fe ffa8 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800e42e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800e432:	f000 f937 	bl	800e6a4 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 800e436:	4603      	mov	r3, r0
 800e438:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800e43c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800e440:	f107 0014 	add.w	r0, r7, #20
 800e444:	9304      	str	r3, [sp, #16]
 800e446:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800e44a:	9303      	str	r3, [sp, #12]
 800e44c:	9502      	str	r5, [sp, #8]
 800e44e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e452:	9301      	str	r3, [sp, #4]
 800e454:	9400      	str	r4, [sp, #0]
 800e456:	4613      	mov	r3, r2
 800e458:	4632      	mov	r2, r6
 800e45a:	f7ff fc0a 	bl	800dc72 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 800e45e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800e462:	4618      	mov	r0, r3
 800e464:	f7fe fed7 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
 800e468:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe fed2 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
 800e472:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800e476:	4618      	mov	r0, r3
 800e478:	f7fe fecd 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
 800e47c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800e480:	4618      	mov	r0, r3
 800e482:	f7fe fec8 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800e486:	e011      	b.n	800e4ac <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	695c      	ldr	r4, [r3, #20]
 800e48c:	68fd      	ldr	r5, [r7, #12]
 800e48e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe f9cb 	bl	800c830 <TfLiteTypeGetName>
 800e49a:	4602      	mov	r2, r0
 800e49c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e4a0:	781b      	ldrb	r3, [r3, #0]
 800e4a2:	4905      	ldr	r1, [pc, #20]	; (800e4b8 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>)
 800e4a4:	4628      	mov	r0, r5
 800e4a6:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	e000      	b.n	800e4ae <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x202>
  }

  return kTfLiteOk;
 800e4ac:	2300      	movs	r3, #0
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4b8:	080187d8 	.word	0x080187d8

0800e4bc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 800e4bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4be:	b0af      	sub	sp, #188	; 0xbc
 800e4c0:	af06      	add	r7, sp, #24
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	603b      	str	r3, [r7, #0]
 800e4c8:	4613      	mov	r3, r2
 800e4ca:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 800e4cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800e4d0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800e4d4:	79fb      	ldrb	r3, [r7, #7]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f7ff f8d8 	bl	800d68c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 800e4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4de:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 800e4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4e2:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 800e4e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e4e8:	6839      	ldr	r1, [r7, #0]
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f7fe ff47 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800e4f0:	6838      	ldr	r0, [r7, #0]
 800e4f2:	f7fe ff62 	bl	800d3ba <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800e4f6:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 800e4f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e4fc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe ff3c 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800e506:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800e50a:	f7fe ff56 	bl	800d3ba <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800e50e:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800e510:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e514:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fe ff30 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800e51e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800e522:	f7fe ff4a 	bl	800d3ba <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800e526:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800e528:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e52c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800e530:	4618      	mov	r0, r3
 800e532:	f7fe ff24 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800e536:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800e53a:	f7fe ff4f 	bl	800d3dc <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800e53e:	4603      	mov	r3, r0
 800e540:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800e544:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800e548:	f107 0010 	add.w	r0, r7, #16
 800e54c:	9304      	str	r3, [sp, #16]
 800e54e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e552:	9303      	str	r3, [sp, #12]
 800e554:	9502      	str	r5, [sp, #8]
 800e556:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e55a:	9301      	str	r3, [sp, #4]
 800e55c:	9400      	str	r4, [sp, #0]
 800e55e:	4613      	mov	r3, r2
 800e560:	4632      	mov	r2, r6
 800e562:	f7ff fa21 	bl	800d9a8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800e566:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800e56a:	4618      	mov	r0, r3
 800e56c:	f7fe fe53 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
 800e570:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800e574:	4618      	mov	r0, r3
 800e576:	f7fe fe4e 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 800e57a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fe49 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 800e584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e588:	4618      	mov	r0, r3
 800e58a:	f7fe fe44 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	37a4      	adds	r7, #164	; 0xa4
 800e594:	46bd      	mov	sp, r7
 800e596:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e598 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800e598:	b5b0      	push	{r4, r5, r7, lr}
 800e59a:	b08c      	sub	sp, #48	; 0x30
 800e59c:	af04      	add	r7, sp, #16
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	695b      	ldr	r3, [r3, #20]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d101      	bne.n	800e5ae <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800e5aa:	f006 fa54 	bl	8014a56 <abort>
  const auto* params =
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	695b      	ldr	r3, [r3, #20]
 800e5b2:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	6839      	ldr	r1, [r7, #0]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7fe fdbc 	bl	800d138 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e5c0:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	6839      	ldr	r1, [r7, #0]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fe fdb5 	bl	800d138 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800e5ce:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2202      	movs	r2, #2
 800e5d4:	6839      	ldr	r1, [r7, #0]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7ff f982 	bl	800d8e0 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 800e5dc:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fe fdbd 	bl	800d164 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800e5ea:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	691b      	ldr	r3, [r3, #16]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d101      	bne.n	800e5f8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x60>
 800e5f4:	f006 fa2f 	bl	8014a56 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	691b      	ldr	r3, [r3, #16]
 800e5fc:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	781b      	ldrb	r3, [r3, #0]
 800e602:	2b03      	cmp	r3, #3
 800e604:	d020      	beq.n	800e648 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 800e606:	2b09      	cmp	r3, #9
 800e608:	d010      	beq.n	800e62c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x94>
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d12a      	bne.n	800e664 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	781a      	ldrb	r2, [r3, #0]
                       output);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	9302      	str	r3, [sp, #8]
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	9301      	str	r3, [sp, #4]
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	9300      	str	r3, [sp, #0]
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	6839      	ldr	r1, [r7, #0]
 800e624:	f7ff ff4a 	bl	800e4bc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 800e628:	4603      	mov	r3, r0
 800e62a:	e02a      	b.n	800e682 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 800e62c:	6878      	ldr	r0, [r7, #4]
                               output);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	9302      	str	r3, [sp, #8]
 800e632:	693b      	ldr	r3, [r7, #16]
 800e634:	9301      	str	r3, [sp, #4]
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	9300      	str	r3, [sp, #0]
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	6839      	ldr	r1, [r7, #0]
 800e640:	f7ff fdb8 	bl	800e1b4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800e644:	4603      	mov	r3, r0
 800e646:	e01c      	b.n	800e682 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	9302      	str	r3, [sp, #8]
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	9301      	str	r3, [sp, #4]
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	9300      	str	r3, [sp, #0]
 800e656:	69bb      	ldr	r3, [r7, #24]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	6839      	ldr	r1, [r7, #0]
 800e65c:	f7ff fe26 	bl	800e2ac <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800e660:	4603      	mov	r3, r0
 800e662:	e00e      	b.n	800e682 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	695c      	ldr	r4, [r3, #20]
 800e668:	687d      	ldr	r5, [r7, #4]
 800e66a:	69bb      	ldr	r3, [r7, #24]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7fe f8de 	bl	800c830 <TfLiteTypeGetName>
 800e674:	4602      	mov	r2, r0
 800e676:	69bb      	ldr	r3, [r7, #24]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	4904      	ldr	r1, [pc, #16]	; (800e68c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 800e67c:	4628      	mov	r0, r5
 800e67e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800e680:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 800e682:	4618      	mov	r0, r3
 800e684:	3720      	adds	r7, #32
 800e686:	46bd      	mov	sp, r7
 800e688:	bdb0      	pop	{r4, r5, r7, pc}
 800e68a:	bf00      	nop
 800e68c:	080187d8 	.word	0x080187d8

0800e690 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 800e690:	b480      	push	{r7}
 800e692:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 800e694:	4b02      	ldr	r3, [pc, #8]	; (800e6a0 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 800e696:	4618      	mov	r0, r3
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr
 800e6a0:	2000063c 	.word	0x2000063c

0800e6a4 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d002      	beq.n	800e6b8 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	e000      	b.n	800e6ba <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 800e6b8:	2300      	movs	r3, #0
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	370c      	adds	r7, #12
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr

0800e6c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 800e6c6:	b590      	push	{r4, r7, lr}
 800e6c8:	b087      	sub	sp, #28
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	60f8      	str	r0, [r7, #12]
 800e6ce:	60b9      	str	r1, [r7, #8]
 800e6d0:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f7fe fdb5 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800e6d8:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 800e6da:	2300      	movs	r3, #0
 800e6dc:	617b      	str	r3, [r7, #20]
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	429a      	cmp	r2, r3
 800e6e4:	da15      	bge.n	800e712 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 800e6e6:	697a      	ldr	r2, [r7, #20]
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	429a      	cmp	r2, r3
 800e6ec:	d00d      	beq.n	800e70a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800e6ee:	6979      	ldr	r1, [r7, #20]
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f7fe fdb2 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	6979      	ldr	r1, [r7, #20]
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7fe fdad 	bl	800d25a <_ZNK6tflite12RuntimeShape4DimsEi>
 800e700:	4603      	mov	r3, r0
 800e702:	429c      	cmp	r4, r3
 800e704:	d001      	beq.n	800e70a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 800e706:	f006 f9a6 	bl	8014a56 <abort>
  for (int i = 0; i < dims_count; ++i) {
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	3301      	adds	r3, #1
 800e70e:	617b      	str	r3, [r7, #20]
 800e710:	e7e5      	b.n	800e6de <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 800e712:	68b9      	ldr	r1, [r7, #8]
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f7ff f911 	bl	800d93c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800e71a:	4603      	mov	r3, r0
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	371c      	adds	r7, #28
 800e720:	46bd      	mov	sp, r7
 800e722:	bd90      	pop	{r4, r7, pc}

0800e724 <_ZN6tflite17CountLeadingZerosImEEiT_>:
  int32_t result = x >> total_shift;
  return result;
}

template <typename T>
int CountLeadingZeros(T integer_input) {
 800e724:	b480      	push	{r7}
 800e726:	b083      	sub	sp, #12
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d003      	beq.n	800e73a <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 800e738:	e000      	b.n	800e73c <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 800e73a:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	370c      	adds	r7, #12
 800e740:	46bd      	mov	sp, r7
 800e742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e746:	4770      	bx	lr

0800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 800e748:	b480      	push	{r7}
 800e74a:	b083      	sub	sp, #12
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4618      	mov	r0, r3
 800e754:	370c      	adds	r7, #12
 800e756:	46bd      	mov	sp, r7
 800e758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75c:	4770      	bx	lr

0800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800e75e:	b590      	push	{r4, r7, lr}
 800e760:	b085      	sub	sp, #20
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800e766:	f107 030c 	add.w	r3, r7, #12
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7ff ffec 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e770:	4604      	mov	r4, r0
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f7fe ffcc 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800e778:	4603      	mov	r3, r0
 800e77a:	6023      	str	r3, [r4, #0]
    return retval;
 800e77c:	68fb      	ldr	r3, [r7, #12]
  }
 800e77e:	4618      	mov	r0, r3
 800e780:	3714      	adds	r7, #20
 800e782:	46bd      	mov	sp, r7
 800e784:	bd90      	pop	{r4, r7, pc}

0800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800e786:	b580      	push	{r7, lr}
 800e788:	b082      	sub	sp, #8
 800e78a:	af00      	add	r7, sp, #0
 800e78c:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800e78e:	2100      	movs	r1, #0
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7fe ff09 	bl	800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800e796:	4603      	mov	r3, r0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3708      	adds	r7, #8
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f813 	bl	800e7d4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 800e7ae:	4603      	mov	r3, r0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 800e7b8:	b480      	push	{r7}
 800e7ba:	b083      	sub	sp, #12
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  return a - b;
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	683b      	ldr	r3, [r7, #0]
 800e7c6:	1ad3      	subs	r3, r2, r3
}
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	370c      	adds	r7, #12
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d2:	4770      	bx	lr

0800e7d4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b082      	sub	sp, #8
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800e7dc:	2101      	movs	r1, #1
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7fe fee2 	bl	800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800e7e4:	4603      	mov	r3, r0
  }
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}

0800e7ee <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 800e7ee:	b490      	push	{r4, r7}
 800e7f0:	b088      	sub	sp, #32
 800e7f2:	af00      	add	r7, sp, #0
 800e7f4:	6078      	str	r0, [r7, #4]
 800e7f6:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e7fe:	e9c7 3406 	strd	r3, r4, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 800e802:	2201      	movs	r2, #1
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	fa02 f303 	lsl.w	r3, r2, r3
 800e80a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e80e:	69fa      	ldr	r2, [r7, #28]
 800e810:	fb03 f102 	mul.w	r1, r3, r2
 800e814:	69ba      	ldr	r2, [r7, #24]
 800e816:	fb04 f202 	mul.w	r2, r4, r2
 800e81a:	440a      	add	r2, r1
 800e81c:	69b9      	ldr	r1, [r7, #24]
 800e81e:	fba1 3403 	umull	r3, r4, r1, r3
 800e822:	4422      	add	r2, r4
 800e824:	4614      	mov	r4, r2
 800e826:	e9c7 3404 	strd	r3, r4, [r7, #16]
 800e82a:	e9c7 3404 	strd	r3, r4, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 800e82e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e832:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 800e834:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e838:	60bb      	str	r3, [r7, #8]
             ? min
 800e83a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e83e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e842:	f174 33ff 	sbcs.w	r3, r4, #4294967295
 800e846:	db0e      	blt.n	800e866 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 800e848:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e84c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e850:	f04f 0200 	mov.w	r2, #0
 800e854:	4299      	cmp	r1, r3
 800e856:	eb72 0304 	sbcs.w	r3, r2, r4
 800e85a:	db01      	blt.n	800e860 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 800e85c:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 800e85e:	e004      	b.n	800e86a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 800e860:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 800e864:	e001      	b.n	800e86a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 800e866:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3720      	adds	r7, #32
 800e86e:	46bd      	mov	sp, r7
 800e870:	bc90      	pop	{r4, r7}
 800e872:	4770      	bx	lr

0800e874 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 800e874:	b590      	push	{r4, r7, lr}
 800e876:	b085      	sub	sp, #20
 800e878:	af00      	add	r7, sp, #0
 800e87a:	60f8      	str	r0, [r7, #12]
 800e87c:	60b9      	str	r1, [r7, #8]
 800e87e:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 800e880:	68b9      	ldr	r1, [r7, #8]
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f7fe ff4f 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e888:	4604      	mov	r4, r0
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	f7fe ffaf 	bl	800d7ee <_ZN8gemmlowp6BitNotIlEET_S1_>
 800e890:	4603      	mov	r3, r0
 800e892:	6879      	ldr	r1, [r7, #4]
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe ff46 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800e89a:	4603      	mov	r3, r0
 800e89c:	4619      	mov	r1, r3
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f000 f805 	bl	800e8ae <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 800e8a4:	4603      	mov	r3, r0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3714      	adds	r7, #20
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd90      	pop	{r4, r7, pc}

0800e8ae <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 800e8ae:	b480      	push	{r7}
 800e8b0:	b083      	sub	sp, #12
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	6078      	str	r0, [r7, #4]
 800e8b6:	6039      	str	r1, [r7, #0]
  return a ^ b;
 800e8b8:	687a      	ldr	r2, [r7, #4]
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	4053      	eors	r3, r2
}
 800e8be:	4618      	mov	r0, r3
 800e8c0:	370c      	adds	r7, #12
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr

0800e8ca <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 800e8ca:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 800e8ce:	b08b      	sub	sp, #44	; 0x2c
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e8dc:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b64 = b;
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800e8e6:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t sum = a64 + b64;
 800e8ea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e8ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e8f2:	eb13 0b01 	adds.w	fp, r3, r1
 800e8f6:	eb44 0c02 	adc.w	ip, r4, r2
 800e8fa:	e9c7 bc04 	strd	fp, ip, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 800e8fe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e902:	2b00      	cmp	r3, #0
 800e904:	f174 0300 	sbcs.w	r3, r4, #0
 800e908:	db04      	blt.n	800e914 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4a>
 800e90a:	f04f 0301 	mov.w	r3, #1
 800e90e:	f04f 0400 	mov.w	r4, #0
 800e912:	e003      	b.n	800e91c <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x52>
 800e914:	f04f 33ff 	mov.w	r3, #4294967295
 800e918:	f04f 34ff 	mov.w	r4, #4294967295
 800e91c:	e9c7 3402 	strd	r3, r4, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 800e920:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e924:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e928:	eb13 0b01 	adds.w	fp, r3, r1
 800e92c:	eb44 0c02 	adc.w	ip, r4, r2
 800e930:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800e934:	4611      	mov	r1, r2
 800e936:	f04f 0200 	mov.w	r2, #0
 800e93a:	eb1b 0301 	adds.w	r3, fp, r1
 800e93e:	eb4c 0402 	adc.w	r4, ip, r2
 800e942:	1064      	asrs	r4, r4, #1
 800e944:	ea4f 0333 	mov.w	r3, r3, rrx
}
 800e948:	4618      	mov	r0, r3
 800e94a:	372c      	adds	r7, #44	; 0x2c
 800e94c:	46bd      	mov	sp, r7
 800e94e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 800e952:	4770      	bx	lr

0800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800e95c:	f107 030c 	add.w	r3, r7, #12
 800e960:	4618      	mov	r0, r3
 800e962:	f7ff fef1 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800e966:	4602      	mov	r2, r0
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6013      	str	r3, [r2, #0]
    return retval;
 800e96c:	68fb      	ldr	r3, [r7, #12]
  }
 800e96e:	4618      	mov	r0, r3
 800e970:	3710      	adds	r7, #16
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
	...

0800e978 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08a      	sub	sp, #40	; 0x28
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 800e980:	f000 f85a 	bl	800ea38 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 800e984:	4603      	mov	r3, r0
 800e986:	4619      	mov	r1, r3
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 f860 	bl	800ea4e <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e98e:	4603      	mov	r3, r0
 800e990:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 800e992:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 800e996:	f000 f88c 	bl	800eab2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800e99a:	4603      	mov	r3, r0
  const F2 constant_48_over_17 =
 800e99c:	4618      	mov	r0, r3
 800e99e:	f000 f874 	bl	800ea8a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 800e9a6:	4823      	ldr	r0, [pc, #140]	; (800ea34 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800e9a8:	f000 f883 	bl	800eab2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 800e9ac:	4603      	mov	r3, r0
  const F2 constant_neg_32_over_17 =
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	f000 f86b 	bl	800ea8a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 800e9b8:	69b9      	ldr	r1, [r7, #24]
 800e9ba:	6a38      	ldr	r0, [r7, #32]
 800e9bc:	f000 f886 	bl	800eacc <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	69f8      	ldr	r0, [r7, #28]
 800e9c6:	f000 f8a3 	bl	800eb10 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	627b      	str	r3, [r7, #36]	; 0x24
 800e9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d4:	2b02      	cmp	r3, #2
 800e9d6:	dc21      	bgt.n	800ea1c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 800e9d8:	6979      	ldr	r1, [r7, #20]
 800e9da:	6a38      	ldr	r0, [r7, #32]
 800e9dc:	f000 f876 	bl	800eacc <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 800e9e4:	f000 f8b2 	bl	800eb4c <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 800e9e8:	4603      	mov	r3, r0
    F2 one_minus_half_denominator_times_x =
 800e9ea:	6939      	ldr	r1, [r7, #16]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 f8b6 	bl	800eb5e <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 800e9f6:	68f9      	ldr	r1, [r7, #12]
 800e9f8:	6978      	ldr	r0, [r7, #20]
 800e9fa:	f000 f8ce 	bl	800eb9a <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	4618      	mov	r0, r3
 800ea02:	f000 f8ec 	bl	800ebde <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800ea06:	4603      	mov	r3, r0
 800ea08:	4619      	mov	r1, r3
 800ea0a:	6978      	ldr	r0, [r7, #20]
 800ea0c:	f000 f880 	bl	800eb10 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ea10:	4603      	mov	r3, r0
 800ea12:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 800ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea16:	3301      	adds	r3, #1
 800ea18:	627b      	str	r3, [r7, #36]	; 0x24
 800ea1a:	e7da      	b.n	800e9d2 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 800ea1c:	6978      	ldr	r0, [r7, #20]
 800ea1e:	f000 f8f8 	bl	800ec12 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 800ea22:	4603      	mov	r3, r0
 800ea24:	4618      	mov	r0, r3
 800ea26:	f000 f90a 	bl	800ec3e <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800ea2a:	4603      	mov	r3, r0
}
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	3728      	adds	r7, #40	; 0x28
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bd80      	pop	{r7, pc}
 800ea34:	c3c3c3c4 	.word	0xc3c3c3c4

0800ea38 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 800ea3c:	f000 f945 	bl	800ecca <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 800ea40:	4603      	mov	r3, r0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 800ea42:	4618      	mov	r0, r3
 800ea44:	f7ff fe8b 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800ea48:	4603      	mov	r3, r0
  }
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 800ea4e:	b590      	push	{r4, r7, lr}
 800ea50:	b083      	sub	sp, #12
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
 800ea58:	1d3b      	adds	r3, r7, #4
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7ff fe74 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ea60:	4603      	mov	r3, r0
 800ea62:	681c      	ldr	r4, [r3, #0]
 800ea64:	463b      	mov	r3, r7
 800ea66:	4618      	mov	r0, r3
 800ea68:	f7ff fe6e 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4619      	mov	r1, r3
 800ea72:	4620      	mov	r0, r4
 800ea74:	f7ff ff29 	bl	800e8ca <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff ff6a 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ea80:	4603      	mov	r3, r0
 800ea82:	4618      	mov	r0, r3
 800ea84:	370c      	adds	r7, #12
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd90      	pop	{r4, r7, pc}

0800ea8a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 800ea8a:	b590      	push	{r4, r7, lr}
 800ea8c:	b085      	sub	sp, #20
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 800ea92:	f107 030c 	add.w	r3, r7, #12
 800ea96:	4618      	mov	r0, r3
 800ea98:	f000 f91e 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7fe fe36 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	6023      	str	r3, [r4, #0]
    return retval;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
  }
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3714      	adds	r7, #20
 800eaae:	46bd      	mov	sp, r7
 800eab0:	bd90      	pop	{r4, r7, pc}

0800eab2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b082      	sub	sp, #8
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 800eaba:	2100      	movs	r1, #0
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f7fe fd73 	bl	800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800eac2:	4603      	mov	r3, r0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3708      	adds	r7, #8
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800eacc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eace:	b085      	sub	sp, #20
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800ead6:	1d3b      	adds	r3, r7, #4
 800ead8:	4618      	mov	r0, r3
 800eada:	f7ff fe35 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800eade:	4603      	mov	r3, r0
 800eae0:	681d      	ldr	r5, [r3, #0]
 800eae2:	463b      	mov	r3, r7
 800eae4:	4618      	mov	r0, r3
 800eae6:	f000 f8f7 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800eaea:	4603      	mov	r3, r0
 800eaec:	681e      	ldr	r6, [r3, #0]
 800eaee:	f107 030c 	add.w	r3, r7, #12
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f000 f8f0 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800eaf8:	4604      	mov	r4, r0
 800eafa:	4631      	mov	r1, r6
 800eafc:	4628      	mov	r0, r5
 800eafe:	f7fe fcc3 	bl	800d488 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800eb02:	4603      	mov	r3, r0
 800eb04:	6023      	str	r3, [r4, #0]
  return c;
 800eb06:	68fb      	ldr	r3, [r7, #12]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb10 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800eb10:	b590      	push	{r4, r7, lr}
 800eb12:	b083      	sub	sp, #12
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
 800eb1a:	1d3b      	adds	r3, r7, #4
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f000 f8db 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800eb22:	4603      	mov	r3, r0
 800eb24:	681c      	ldr	r4, [r3, #0]
 800eb26:	463b      	mov	r3, r7
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f000 f8d5 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	4619      	mov	r1, r3
 800eb34:	4620      	mov	r0, r4
 800eb36:	f7fe fe27 	bl	800d788 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f000 f8d6 	bl	800ecee <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800eb42:	4603      	mov	r3, r0
 800eb44:	4618      	mov	r0, r3
 800eb46:	370c      	adds	r7, #12
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd90      	pop	{r4, r7, pc}

0800eb4c <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 800eb4c:	b580      	push	{r7, lr}
 800eb4e:	af00      	add	r7, sp, #0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 800eb50:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800eb54:	f7ff ff99 	bl	800ea8a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 800eb58:	4603      	mov	r3, r0
  }
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 800eb5e:	b590      	push	{r4, r7, lr}
 800eb60:	b083      	sub	sp, #12
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	6039      	str	r1, [r7, #0]
 800eb68:	1d3b      	adds	r3, r7, #4
 800eb6a:	4618      	mov	r0, r3
 800eb6c:	f000 f8b4 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800eb70:	4603      	mov	r3, r0
 800eb72:	681c      	ldr	r4, [r3, #0]
 800eb74:	463b      	mov	r3, r7
 800eb76:	4618      	mov	r0, r3
 800eb78:	f000 f8ae 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4619      	mov	r1, r3
 800eb82:	4620      	mov	r0, r4
 800eb84:	f7ff fe18 	bl	800e7b8 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f000 f8af 	bl	800ecee <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 800eb90:	4603      	mov	r3, r0
 800eb92:	4618      	mov	r0, r3
 800eb94:	370c      	adds	r7, #12
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd90      	pop	{r4, r7, pc}

0800eb9a <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800eb9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb9c:	b085      	sub	sp, #20
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
 800eba2:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800eba4:	1d3b      	adds	r3, r7, #4
 800eba6:	4618      	mov	r0, r3
 800eba8:	f000 f896 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ebac:	4603      	mov	r3, r0
 800ebae:	681d      	ldr	r5, [r3, #0]
 800ebb0:	463b      	mov	r3, r7
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f000 f890 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	681e      	ldr	r6, [r3, #0]
 800ebbc:	f107 030c 	add.w	r3, r7, #12
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f000 f856 	bl	800ec72 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	4631      	mov	r1, r6
 800ebca:	4628      	mov	r0, r5
 800ebcc:	f7fe fc5c 	bl	800d488 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	6023      	str	r3, [r4, #0]
  return c;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ebde <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800ebde:	b5b0      	push	{r4, r5, r7, lr}
 800ebe0:	b084      	sub	sp, #16
 800ebe2:	af00      	add	r7, sp, #0
 800ebe4:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800ebe6:	1d3b      	adds	r3, r7, #4
 800ebe8:	4618      	mov	r0, r3
 800ebea:	f000 f842 	bl	800ec72 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	681d      	ldr	r5, [r3, #0]
 800ebf2:	f107 030c 	add.w	r3, r7, #12
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 f86e 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	4628      	mov	r0, r5
 800ec00:	f000 f886 	bl	800ed10 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 800ec04:	4603      	mov	r3, r0
 800ec06:	6023      	str	r3, [r4, #0]
  return result;
 800ec08:	68fb      	ldr	r3, [r7, #12]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bdb0      	pop	{r4, r5, r7, pc}

0800ec12 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 800ec12:	b590      	push	{r4, r7, lr}
 800ec14:	b085      	sub	sp, #20
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 800ec1a:	1d3b      	adds	r3, r7, #4
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f000 f85b 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ec22:	4604      	mov	r4, r0
 800ec24:	f107 030c 	add.w	r3, r7, #12
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f000 f87d 	bl	800ed28 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	6823      	ldr	r3, [r4, #0]
 800ec32:	6013      	str	r3, [r2, #0]
  return c;
 800ec34:	68fb      	ldr	r3, [r7, #12]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3714      	adds	r7, #20
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd90      	pop	{r4, r7, pc}

0800ec3e <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 800ec3e:	b5b0      	push	{r4, r5, r7, lr}
 800ec40:	b084      	sub	sp, #16
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 800ec46:	1d3b      	adds	r3, r7, #4
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f000 f86d 	bl	800ed28 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	681d      	ldr	r5, [r3, #0]
 800ec52:	f107 030c 	add.w	r3, r7, #12
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff fd76 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ec5c:	4604      	mov	r4, r0
 800ec5e:	4628      	mov	r0, r5
 800ec60:	f000 f86d 	bl	800ed3e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 800ec64:	4603      	mov	r3, r0
 800ec66:	6023      	str	r3, [r4, #0]
  return result;
 800ec68:	68fb      	ldr	r3, [r7, #12]
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bdb0      	pop	{r4, r5, r7, pc}

0800ec72 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 800ec72:	b480      	push	{r7}
 800ec74:	b083      	sub	sp, #12
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 800ec88:	b590      	push	{r4, r7, lr}
 800ec8a:	b085      	sub	sp, #20
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	60f8      	str	r0, [r7, #12]
 800ec90:	60b9      	str	r1, [r7, #8]
 800ec92:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800ec94:	f107 0308 	add.w	r3, r7, #8
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fd55 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ec9e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800eca0:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800eca2:	1d3b      	adds	r3, r7, #4
 800eca4:	4618      	mov	r0, r3
 800eca6:	f7ff fd4f 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ecaa:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	461a      	mov	r2, r3
 800ecb0:	4621      	mov	r1, r4
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f7ff fdde 	bl	800e874 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800ecb8:	4603      	mov	r3, r0
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 800ecba:	4618      	mov	r0, r3
 800ecbc:	f7ff fe4a 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800ecc0:	4603      	mov	r3, r0
}
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3714      	adds	r7, #20
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd90      	pop	{r4, r7, pc}

0800ecca <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 800ecca:	b580      	push	{r7, lr}
 800eccc:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 800ecce:	f7fd fe0d 	bl	800c8ec <_ZNSt14numeric_limitsIlE3maxEv>
 800ecd2:	4603      	mov	r3, r0
  }
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 800ecd8:	b480      	push	{r7}
 800ecda:	b083      	sub	sp, #12
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4618      	mov	r0, r3
 800ece4:	370c      	adds	r7, #12
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b084      	sub	sp, #16
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800ecf6:	f107 030c 	add.w	r3, r7, #12
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7ff ffec 	bl	800ecd8 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 800ed00:	4602      	mov	r2, r0
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6013      	str	r3, [r2, #0]
    return retval;
 800ed06:	68fb      	ldr	r3, [r7, #12]
  }
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 f82f 	bl	800ed7c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 800ed1e:	4603      	mov	r3, r0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4618      	mov	r0, r3
 800ed34:	370c      	adds	r7, #12
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr

0800ed3e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800ed3e:	b580      	push	{r7, lr}
 800ed40:	b082      	sub	sp, #8
 800ed42:	af00      	add	r7, sp, #0
 800ed44:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 f85a 	bl	800ee00 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 800ed4c:	4603      	mov	r3, r0
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3708      	adds	r7, #8
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b082      	sub	sp, #8
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	bf0c      	ite	eq
 800ed64:	2301      	moveq	r3, #1
 800ed66:	2300      	movne	r3, #0
 800ed68:	b2db      	uxtb	r3, r3
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fe fd2e 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800ed70:	4603      	mov	r3, r0
}
 800ed72:	4618      	mov	r0, r3
 800ed74:	3708      	adds	r7, #8
 800ed76:	46bd      	mov	sp, r7
 800ed78:	bd80      	pop	{r7, pc}
	...

0800ed7c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b08a      	sub	sp, #40	; 0x28
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800ed84:	f7fe fb5d 	bl	800d442 <_ZNSt14numeric_limitsIlE3minEv>
 800ed88:	4603      	mov	r3, r0
    const IntegerType min =
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7fe fcc0 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ed90:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800ed92:	f7fd fdab 	bl	800c8ec <_ZNSt14numeric_limitsIlE3maxEv>
 800ed96:	4603      	mov	r3, r0
    const IntegerType max =
 800ed98:	4618      	mov	r0, r3
 800ed9a:	f7fe fcb9 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ed9e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800eda0:	2320      	movs	r3, #32
 800eda2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800eda4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800eda8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800edaa:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 800edae:	f7fe fcaf 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800edb2:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 800edb4:	4619      	mov	r1, r3
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7fe fcf4 	bl	800d7a4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800edbc:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800edbe:	480f      	ldr	r0, [pc, #60]	; (800edfc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 800edc0:	f7fe fca6 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800edc4:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 800edc6:	4619      	mov	r1, r3
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7fe fcc9 	bl	800d760 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800edce:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800edd0:	2102      	movs	r1, #2
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7ff fd0b 	bl	800e7ee <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800edd8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800edda:	68fa      	ldr	r2, [r7, #12]
 800eddc:	6a39      	ldr	r1, [r7, #32]
 800edde:	6978      	ldr	r0, [r7, #20]
 800ede0:	f7ff fd48 	bl	800e874 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800ede4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edea:	6938      	ldr	r0, [r7, #16]
 800edec:	f7ff fd42 	bl	800e874 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800edf0:	60f8      	str	r0, [r7, #12]
    return result;
 800edf2:	68fb      	ldr	r3, [r7, #12]
  }
 800edf4:	4618      	mov	r0, r3
 800edf6:	3728      	adds	r7, #40	; 0x28
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}
 800edfc:	e0000001 	.word	0xe0000001

0800ee00 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b08a      	sub	sp, #40	; 0x28
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 800ee08:	f7fe fb1b 	bl	800d442 <_ZNSt14numeric_limitsIlE3minEv>
 800ee0c:	4603      	mov	r3, r0
    const IntegerType min =
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7fe fc7e 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ee14:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 800ee16:	f7fd fd69 	bl	800c8ec <_ZNSt14numeric_limitsIlE3maxEv>
 800ee1a:	4603      	mov	r3, r0
    const IntegerType max =
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fe fc77 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ee22:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 800ee24:	2320      	movs	r3, #32
 800ee26:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 800ee28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ee2c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 800ee2e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 800ee32:	f7fe fc6d 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ee36:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 800ee38:	4619      	mov	r1, r3
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7fe fcb2 	bl	800d7a4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800ee40:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 800ee42:	480f      	ldr	r0, [pc, #60]	; (800ee80 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 800ee44:	f7fe fc64 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800ee48:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f7fe fc87 	bl	800d760 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800ee52:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 800ee54:	2101      	movs	r1, #1
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f7ff fcc9 	bl	800e7ee <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 800ee5c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	6a39      	ldr	r1, [r7, #32]
 800ee62:	6978      	ldr	r0, [r7, #20]
 800ee64:	f7ff fd06 	bl	800e874 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800ee68:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 800ee6a:	68fa      	ldr	r2, [r7, #12]
 800ee6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ee6e:	6938      	ldr	r0, [r7, #16]
 800ee70:	f7ff fd00 	bl	800e874 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 800ee74:	60f8      	str	r0, [r7, #12]
    return result;
 800ee76:	68fb      	ldr	r3, [r7, #12]
  }
 800ee78:	4618      	mov	r0, r3
 800ee7a:	3728      	adds	r7, #40	; 0x28
 800ee7c:	46bd      	mov	sp, r7
 800ee7e:	bd80      	pop	{r7, pc}
 800ee80:	c0000001 	.word	0xc0000001

0800ee84 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b08a      	sub	sp, #40	; 0x28
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 800ee8c:	482c      	ldr	r0, [pc, #176]	; (800ef40 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 800ee8e:	f7ff fc7a 	bl	800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800ee92:	4603      	mov	r3, r0
  const F constant_term =
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7ff fc62 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 800ee9e:	4829      	ldr	r0, [pc, #164]	; (800ef44 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 800eea0:	f7ff fc71 	bl	800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 800eea4:	4603      	mov	r3, r0
  const F constant_1_over_3 =
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7ff fc59 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800eeac:	4603      	mov	r3, r0
 800eeae:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 800eeb0:	f000 f86c 	bl	800ef8c <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f000 f870 	bl	800ef9e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800eebe:	4603      	mov	r3, r0
 800eec0:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 800eec2:	69f9      	ldr	r1, [r7, #28]
 800eec4:	69f8      	ldr	r0, [r7, #28]
 800eec6:	f000 f83f 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800eeca:	4603      	mov	r3, r0
 800eecc:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 800eece:	69f9      	ldr	r1, [r7, #28]
 800eed0:	69b8      	ldr	r0, [r7, #24]
 800eed2:	f000 f839 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800eed6:	4603      	mov	r3, r0
 800eed8:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 800eeda:	69b9      	ldr	r1, [r7, #24]
 800eedc:	69b8      	ldr	r0, [r7, #24]
 800eede:	f000 f833 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800eee2:	4603      	mov	r3, r0
 800eee4:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 800eee6:	6938      	ldr	r0, [r7, #16]
 800eee8:	f000 f877 	bl	800efda <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800eeec:	4603      	mov	r3, r0
 800eeee:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 800eef0:	6979      	ldr	r1, [r7, #20]
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	f000 f853 	bl	800ef9e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800eef8:	4603      	mov	r3, r0
 800eefa:	6a39      	ldr	r1, [r7, #32]
 800eefc:	4618      	mov	r0, r3
 800eefe:	f000 f823 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ef02:	4603      	mov	r3, r0
 800ef04:	69b9      	ldr	r1, [r7, #24]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f000 f849 	bl	800ef9e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ef0c:	4603      	mov	r3, r0
  F x4_over_24_plus_x3_over_6_plus_x2_over_2 =
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f000 f879 	bl	800f006 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 800ef14:	4603      	mov	r3, r0
 800ef16:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 800ef18:	68b9      	ldr	r1, [r7, #8]
 800ef1a:	69f8      	ldr	r0, [r7, #28]
 800ef1c:	f000 f83f 	bl	800ef9e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ef20:	4603      	mov	r3, r0
 800ef22:	4619      	mov	r1, r3
 800ef24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef26:	f000 f80f 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ef2a:	4603      	mov	r3, r0
      constant_term * (x + x4_over_24_plus_x3_over_6_plus_x2_over_2));
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef30:	f000 f87f 	bl	800f032 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800ef34:	4603      	mov	r3, r0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3728      	adds	r7, #40	; 0x28
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}
 800ef3e:	bf00      	nop
 800ef40:	70f5a894 	.word	0x70f5a894
 800ef44:	2aaaaaab 	.word	0x2aaaaaab

0800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 800ef48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef4a:	b085      	sub	sp, #20
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 800ef52:	1d3b      	adds	r3, r7, #4
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7ff fbf7 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	681d      	ldr	r5, [r3, #0]
 800ef5e:	463b      	mov	r3, r7
 800ef60:	4618      	mov	r0, r3
 800ef62:	f7ff fbf1 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ef66:	4603      	mov	r3, r0
 800ef68:	681e      	ldr	r6, [r3, #0]
 800ef6a:	f107 030c 	add.w	r3, r7, #12
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7ff fbea 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ef74:	4604      	mov	r4, r0
 800ef76:	4631      	mov	r1, r6
 800ef78:	4628      	mov	r0, r5
 800ef7a:	f7fe fa85 	bl	800d488 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	6023      	str	r3, [r4, #0]
  return c;
 800ef82:	68fb      	ldr	r3, [r7, #12]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3714      	adds	r7, #20
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ef8c <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 800ef90:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800ef94:	f7ff fbe3 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 800ef98:	4603      	mov	r3, r0
  }
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800ef9e:	b590      	push	{r4, r7, lr}
 800efa0:	b083      	sub	sp, #12
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	6039      	str	r1, [r7, #0]
 800efa8:	1d3b      	adds	r3, r7, #4
 800efaa:	4618      	mov	r0, r3
 800efac:	f7ff fbcc 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800efb0:	4603      	mov	r3, r0
 800efb2:	681c      	ldr	r4, [r3, #0]
 800efb4:	463b      	mov	r3, r7
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7ff fbc6 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800efbc:	4603      	mov	r3, r0
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4619      	mov	r1, r3
 800efc2:	4620      	mov	r0, r4
 800efc4:	f7fe fbe0 	bl	800d788 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800efc8:	4603      	mov	r3, r0
 800efca:	4618      	mov	r0, r3
 800efcc:	f7ff fcc2 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800efd0:	4603      	mov	r3, r0
 800efd2:	4618      	mov	r0, r3
 800efd4:	370c      	adds	r7, #12
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd90      	pop	{r4, r7, pc}

0800efda <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800efda:	b580      	push	{r7, lr}
 800efdc:	b082      	sub	sp, #8
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800efe2:	1d3b      	adds	r3, r7, #4
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7ff fbaf 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800efea:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4618      	mov	r0, r3
 800eff0:	f000 f83d 	bl	800f06e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 800eff4:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7ff fcac 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800effc:	4603      	mov	r3, r0
}
 800effe:	4618      	mov	r0, r3
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}

0800f006 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 800f006:	b580      	push	{r7, lr}
 800f008:	b082      	sub	sp, #8
 800f00a:	af00      	add	r7, sp, #0
 800f00c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800f00e:	1d3b      	adds	r3, r7, #4
 800f010:	4618      	mov	r0, r3
 800f012:	f7ff fb99 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f016:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff fbc0 	bl	800e7a0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 800f020:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 800f022:	4618      	mov	r0, r3
 800f024:	f7ff fc96 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f028:	4603      	mov	r3, r0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 800f032:	b590      	push	{r4, r7, lr}
 800f034:	b083      	sub	sp, #12
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
 800f03a:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800f03c:	1d3b      	adds	r3, r7, #4
 800f03e:	4618      	mov	r0, r3
 800f040:	f7ff fb82 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f044:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800f046:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800f048:	463b      	mov	r3, r7
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7ff fb7c 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f050:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	4619      	mov	r1, r3
 800f056:	4620      	mov	r0, r4
 800f058:	f000 f815 	bl	800f086 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 800f05c:	4603      	mov	r3, r0
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 800f05e:	4618      	mov	r0, r3
 800f060:	f7ff fc78 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f064:	4603      	mov	r3, r0
}
 800f066:	4618      	mov	r0, r3
 800f068:	370c      	adds	r7, #12
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd90      	pop	{r4, r7, pc}

0800f06e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 800f06e:	b580      	push	{r7, lr}
 800f070:	b082      	sub	sp, #8
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 f813 	bl	800f0a2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 800f07c:	4603      	mov	r3, r0
}
 800f07e:	4618      	mov	r0, r3
 800f080:	3708      	adds	r7, #8
 800f082:	46bd      	mov	sp, r7
 800f084:	bd80      	pop	{r7, pc}

0800f086 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 800f086:	b580      	push	{r7, lr}
 800f088:	b082      	sub	sp, #8
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
 800f08e:	6039      	str	r1, [r7, #0]
                                                                             b);
 800f090:	6839      	ldr	r1, [r7, #0]
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f812 	bl	800f0bc <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 800f098:	4603      	mov	r3, r0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	3708      	adds	r7, #8
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	bd80      	pop	{r7, pc}

0800f0a2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 800f0a2:	b580      	push	{r7, lr}
 800f0a4:	b082      	sub	sp, #8
 800f0a6:	af00      	add	r7, sp, #0
 800f0a8:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 800f0aa:	2102      	movs	r1, #2
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7fe fa7b 	bl	800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800f0b2:	4603      	mov	r3, r0
  }
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
 800f0c6:	6839      	ldr	r1, [r7, #0]
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f7fe fb5d 	bl	800d788 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3708      	adds	r7, #8
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f0d8:	b480      	push	{r7}
 800f0da:	b083      	sub	sp, #12
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
 800f0e0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	781a      	ldrb	r2, [r3, #0]
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	781b      	ldrb	r3, [r3, #0]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d201      	bcs.n	800f0f2 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	e000      	b.n	800f0f4 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 800f0f2:	687b      	ldr	r3, [r7, #4]
    }
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	f993 2000 	ldrsb.w	r2, [r3]
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	f993 3000 	ldrsb.w	r3, [r3]
 800f116:	429a      	cmp	r2, r3
 800f118:	da01      	bge.n	800f11e <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	e000      	b.n	800f120 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 800f11e:	687b      	ldr	r3, [r7, #4]
    }
 800f120:	4618      	mov	r0, r3
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800f138:	68fa      	ldr	r2, [r7, #12]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	fa02 f303 	lsl.w	r3, r2, r3
                                           quantized_multiplier);
 800f140:	68b9      	ldr	r1, [r7, #8]
 800f142:	4618      	mov	r0, r3
 800f144:	f7fe f9a0 	bl	800d488 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800f148:	4603      	mov	r3, r0
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
 800f152:	b580      	push	{r7, lr}
 800f154:	b088      	sub	sp, #32
 800f156:	af00      	add	r7, sp, #0
 800f158:	60f8      	str	r0, [r7, #12]
 800f15a:	60b9      	str	r1, [r7, #8]
 800f15c:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	4618      	mov	r0, r3
 800f162:	f7ff fadf 	bl	800e724 <_ZN6tflite17CountLeadingZerosImEEiT_>
 800f166:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 800f168:	68ba      	ldr	r2, [r7, #8]
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	1ad2      	subs	r2, r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	601a      	str	r2, [r3, #0]
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	fa02 f303 	lsl.w	r3, r2, r3
 800f17a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 800f17e:	61bb      	str	r3, [r7, #24]
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
 800f180:	69b8      	ldr	r0, [r7, #24]
 800f182:	f7ff fbe7 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800f186:	4603      	mov	r3, r0
 800f188:	4618      	mov	r0, r3
 800f18a:	f7ff fbf5 	bl	800e978 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 800f18e:	4603      	mov	r3, r0
 800f190:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 800f192:	f107 0314 	add.w	r3, r7, #20
 800f196:	4618      	mov	r0, r3
 800f198:	f7ff fad6 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800f19c:	4603      	mov	r3, r0
 800f19e:	681b      	ldr	r3, [r3, #0]
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3720      	adds	r7, #32
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 800f1a8:	b590      	push	{r4, r7, lr}
 800f1aa:	ed2d 8b02 	vpush	{d8}
 800f1ae:	b08f      	sub	sp, #60	; 0x3c
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
 800f1b8:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800f1ba:	68b8      	ldr	r0, [r7, #8]
 800f1bc:	f7fe f841 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 800f1c6:	683a      	ldr	r2, [r7, #0]
 800f1c8:	6a39      	ldr	r1, [r7, #32]
 800f1ca:	68b8      	ldr	r0, [r7, #8]
 800f1cc:	f7ff fa7b 	bl	800e6c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800f1d0:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 800f1d2:	6a3b      	ldr	r3, [r7, #32]
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	6a39      	ldr	r1, [r7, #32]
 800f1d8:	68b8      	ldr	r0, [r7, #8]
 800f1da:	f7fe fb3f 	bl	800d85c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f1de:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	637b      	str	r3, [r7, #52]	; 0x34
 800f1e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	f280 808f 	bge.w	800f30c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x164>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 800f1ee:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800f1f2:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	633b      	str	r3, [r7, #48]	; 0x30
 800f1f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1fa:	69bb      	ldr	r3, [r7, #24]
 800f1fc:	429a      	cmp	r2, r3
 800f1fe:	da15      	bge.n	800f22c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 800f200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f202:	69ba      	ldr	r2, [r7, #24]
 800f204:	fb02 f203 	mul.w	r2, r2, r3
 800f208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f20a:	4413      	add	r3, r2
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	687a      	ldr	r2, [r7, #4]
 800f210:	441a      	add	r2, r3
 800f212:	f107 0314 	add.w	r3, r7, #20
 800f216:	4611      	mov	r1, r2
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fd fcf2 	bl	800cc02 <_ZSt3maxIfERKT_S2_S2_>
 800f21e:	4603      	mov	r3, r0
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 800f224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f226:	3301      	adds	r3, #1
 800f228:	633b      	str	r3, [r7, #48]	; 0x30
 800f22a:	e7e5      	b.n	800f1f8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 800f22c:	f04f 0300 	mov.w	r3, #0
 800f230:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800f232:	2300      	movs	r3, #0
 800f234:	62bb      	str	r3, [r7, #40]	; 0x28
 800f236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	429a      	cmp	r2, r3
 800f23c:	da29      	bge.n	800f292 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xea>
      sum += std::exp((input_data[i * depth + c] - max) *
 800f23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f240:	69ba      	ldr	r2, [r7, #24]
 800f242:	fb02 f203 	mul.w	r2, r2, r3
 800f246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f248:	4413      	add	r3, r2
 800f24a:	009b      	lsls	r3, r3, #2
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	4413      	add	r3, r2
 800f250:	ed93 7a00 	vldr	s14, [r3]
 800f254:	edd7 7a05 	vldr	s15, [r7, #20]
 800f258:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f262:	4618      	mov	r0, r3
 800f264:	4621      	mov	r1, r4
 800f266:	f7f1 fcd7 	bl	8000c18 <__aeabi_d2f>
 800f26a:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 800f26e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f272:	eeb0 0a67 	vmov.f32	s0, s15
 800f276:	f7f1 ffe4 	bl	8001242 <_ZSt3expf>
 800f27a:	eeb0 7a40 	vmov.f32	s14, s0
 800f27e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800f282:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f286:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 800f28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f28c:	3301      	adds	r3, #1
 800f28e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f290:	e7d1      	b.n	800f236 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 800f292:	2300      	movs	r3, #0
 800f294:	627b      	str	r3, [r7, #36]	; 0x24
 800f296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f298:	69bb      	ldr	r3, [r7, #24]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	da32      	bge.n	800f304 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 800f29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a0:	69ba      	ldr	r2, [r7, #24]
 800f2a2:	fb02 f203 	mul.w	r2, r2, r3
 800f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2a8:	4413      	add	r3, r2
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	687a      	ldr	r2, [r7, #4]
 800f2ae:	4413      	add	r3, r2
 800f2b0:	ed93 7a00 	vldr	s14, [r3]
 800f2b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800f2b8:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	4621      	mov	r1, r4
 800f2c6:	f7f1 fca7 	bl	8000c18 <__aeabi_d2f>
 800f2ca:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 800f2ce:	ee68 7a27 	vmul.f32	s15, s16, s15
 800f2d2:	eeb0 0a67 	vmov.f32	s0, s15
 800f2d6:	f7f1 ffb4 	bl	8001242 <_ZSt3expf>
 800f2da:	eef0 6a40 	vmov.f32	s13, s0
 800f2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e0:	69ba      	ldr	r2, [r7, #24]
 800f2e2:	fb02 f203 	mul.w	r2, r2, r3
 800f2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e8:	4413      	add	r3, r2
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f2ee:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 800f2f0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800f2f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 800f2f8:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 800f2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fe:	3301      	adds	r3, #1
 800f300:	627b      	str	r3, [r7, #36]	; 0x24
 800f302:	e7c8      	b.n	800f296 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
  for (int i = 0; i < outer_size; ++i) {
 800f304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f306:	3301      	adds	r3, #1
 800f308:	637b      	str	r3, [r7, #52]	; 0x34
 800f30a:	e76b      	b.n	800f1e4 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
                                   sum;
    }
  }
}
 800f30c:	bf00      	nop
 800f30e:	373c      	adds	r7, #60	; 0x3c
 800f310:	46bd      	mov	sp, r7
 800f312:	ecbd 8b02 	vpop	{d8}
 800f316:	bd90      	pop	{r4, r7, pc}

0800f318 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 800f318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f31c:	b08b      	sub	sp, #44	; 0x2c
 800f31e:	af04      	add	r7, sp, #16
 800f320:	60f8      	str	r0, [r7, #12]
 800f322:	60b9      	str	r1, [r7, #8]
 800f324:	607a      	str	r2, [r7, #4]
 800f326:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	781b      	ldrb	r3, [r3, #0]
 800f32c:	2b03      	cmp	r3, #3
 800f32e:	d004      	beq.n	800f33a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 800f330:	68bb      	ldr	r3, [r7, #8]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	2b09      	cmp	r3, #9
 800f336:	f040 80f2 	bne.w	800f51e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x206>
    if (input->type == kTfLiteUInt8) {
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	2b03      	cmp	r3, #3
 800f340:	d134      	bne.n	800f3ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x94>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	781b      	ldrb	r3, [r3, #0]
 800f346:	2b03      	cmp	r3, #3
 800f348:	d019      	beq.n	800f37e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x66>
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	695c      	ldr	r4, [r3, #20]
 800f34e:	68fd      	ldr	r5, [r7, #12]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	4618      	mov	r0, r3
 800f356:	f7fd fa6b 	bl	800c830 <TfLiteTypeGetName>
 800f35a:	4606      	mov	r6, r0
 800f35c:	2003      	movs	r0, #3
 800f35e:	f7fd fa67 	bl	800c830 <TfLiteTypeGetName>
 800f362:	4603      	mov	r3, r0
 800f364:	9303      	str	r3, [sp, #12]
 800f366:	9602      	str	r6, [sp, #8]
 800f368:	4b93      	ldr	r3, [pc, #588]	; (800f5b8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 800f36a:	9301      	str	r3, [sp, #4]
 800f36c:	4b93      	ldr	r3, [pc, #588]	; (800f5bc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	23c3      	movs	r3, #195	; 0xc3
 800f372:	4a93      	ldr	r2, [pc, #588]	; (800f5c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800f374:	4993      	ldr	r1, [pc, #588]	; (800f5c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 800f376:	4628      	mov	r0, r5
 800f378:	47a0      	blx	r4
 800f37a:	2301      	movs	r3, #1
 800f37c:	e116      	b.n	800f5ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	2b00      	cmp	r3, #0
 800f384:	f000 8096 	beq.w	800f4b4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	695c      	ldr	r4, [r3, #20]
 800f38c:	68f8      	ldr	r0, [r7, #12]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	691b      	ldr	r3, [r3, #16]
 800f392:	2200      	movs	r2, #0
 800f394:	9203      	str	r2, [sp, #12]
 800f396:	9302      	str	r3, [sp, #8]
 800f398:	4b8b      	ldr	r3, [pc, #556]	; (800f5c8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 800f39a:	9301      	str	r3, [sp, #4]
 800f39c:	4b8b      	ldr	r3, [pc, #556]	; (800f5cc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	23c4      	movs	r3, #196	; 0xc4
 800f3a2:	4a87      	ldr	r2, [pc, #540]	; (800f5c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800f3a4:	498a      	ldr	r1, [pc, #552]	; (800f5d0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 800f3a6:	47a0      	blx	r4
 800f3a8:	2301      	movs	r3, #1
 800f3aa:	e0ff      	b.n	800f5ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	2b09      	cmp	r3, #9
 800f3b2:	d019      	beq.n	800f3e8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd0>
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	695c      	ldr	r4, [r3, #20]
 800f3b8:	68fd      	ldr	r5, [r7, #12]
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fd fa36 	bl	800c830 <TfLiteTypeGetName>
 800f3c4:	4606      	mov	r6, r0
 800f3c6:	2009      	movs	r0, #9
 800f3c8:	f7fd fa32 	bl	800c830 <TfLiteTypeGetName>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	9303      	str	r3, [sp, #12]
 800f3d0:	9602      	str	r6, [sp, #8]
 800f3d2:	4b80      	ldr	r3, [pc, #512]	; (800f5d4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 800f3d4:	9301      	str	r3, [sp, #4]
 800f3d6:	4b80      	ldr	r3, [pc, #512]	; (800f5d8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 800f3d8:	9300      	str	r3, [sp, #0]
 800f3da:	23c6      	movs	r3, #198	; 0xc6
 800f3dc:	4a78      	ldr	r2, [pc, #480]	; (800f5c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800f3de:	4979      	ldr	r1, [pc, #484]	; (800f5c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 800f3e0:	4628      	mov	r0, r5
 800f3e2:	47a0      	blx	r4
 800f3e4:	2301      	movs	r3, #1
 800f3e6:	e0e1      	b.n	800f5ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
      if (output->type == kTfLiteInt16) {
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	2b07      	cmp	r3, #7
 800f3ee:	d116      	bne.n	800f41e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x106>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	691b      	ldr	r3, [r3, #16]
 800f3f4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800f3f8:	d05c      	beq.n	800f4b4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	695c      	ldr	r4, [r3, #20]
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	691b      	ldr	r3, [r3, #16]
 800f404:	4a75      	ldr	r2, [pc, #468]	; (800f5dc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>)
 800f406:	9203      	str	r2, [sp, #12]
 800f408:	9302      	str	r3, [sp, #8]
 800f40a:	4b75      	ldr	r3, [pc, #468]	; (800f5e0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	4b6f      	ldr	r3, [pc, #444]	; (800f5cc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	23c8      	movs	r3, #200	; 0xc8
 800f414:	4a6a      	ldr	r2, [pc, #424]	; (800f5c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800f416:	496e      	ldr	r1, [pc, #440]	; (800f5d0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 800f418:	47a0      	blx	r4
 800f41a:	2301      	movs	r3, #1
 800f41c:	e0c6      	b.n	800f5ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	2b09      	cmp	r3, #9
 800f424:	d019      	beq.n	800f45a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x142>
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	695c      	ldr	r4, [r3, #20]
 800f42a:	68fd      	ldr	r5, [r7, #12]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	781b      	ldrb	r3, [r3, #0]
 800f430:	4618      	mov	r0, r3
 800f432:	f7fd f9fd 	bl	800c830 <TfLiteTypeGetName>
 800f436:	4606      	mov	r6, r0
 800f438:	2009      	movs	r0, #9
 800f43a:	f7fd f9f9 	bl	800c830 <TfLiteTypeGetName>
 800f43e:	4603      	mov	r3, r0
 800f440:	9303      	str	r3, [sp, #12]
 800f442:	9602      	str	r6, [sp, #8]
 800f444:	4b63      	ldr	r3, [pc, #396]	; (800f5d4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 800f446:	9301      	str	r3, [sp, #4]
 800f448:	4b5c      	ldr	r3, [pc, #368]	; (800f5bc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 800f44a:	9300      	str	r3, [sp, #0]
 800f44c:	23cc      	movs	r3, #204	; 0xcc
 800f44e:	4a5c      	ldr	r2, [pc, #368]	; (800f5c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800f450:	495c      	ldr	r1, [pc, #368]	; (800f5c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 800f452:	4628      	mov	r0, r5
 800f454:	47a0      	blx	r4
 800f456:	2301      	movs	r3, #1
 800f458:	e0a8      	b.n	800f5ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	691b      	ldr	r3, [r3, #16]
 800f45e:	f113 0f80 	cmn.w	r3, #128	; 0x80
 800f462:	d012      	beq.n	800f48a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x172>
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	695c      	ldr	r4, [r3, #20]
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	691b      	ldr	r3, [r3, #16]
 800f46e:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 800f472:	9203      	str	r2, [sp, #12]
 800f474:	9302      	str	r3, [sp, #8]
 800f476:	4b5b      	ldr	r3, [pc, #364]	; (800f5e4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 800f478:	9301      	str	r3, [sp, #4]
 800f47a:	4b54      	ldr	r3, [pc, #336]	; (800f5cc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	23cd      	movs	r3, #205	; 0xcd
 800f480:	4a4f      	ldr	r2, [pc, #316]	; (800f5c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800f482:	4953      	ldr	r1, [pc, #332]	; (800f5d0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 800f484:	47a0      	blx	r4
 800f486:	2301      	movs	r3, #1
 800f488:	e090      	b.n	800f5ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	edd3 7a03 	vldr	s15, [r3, #12]
 800f490:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800f5e8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>
 800f494:	eef4 7a47 	vcmp.f32	s15, s14
 800f498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f49c:	d00a      	beq.n	800f4b4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	695c      	ldr	r4, [r3, #20]
 800f4a2:	68f8      	ldr	r0, [r7, #12]
 800f4a4:	4b51      	ldr	r3, [pc, #324]	; (800f5ec <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 800f4a6:	9300      	str	r3, [sp, #0]
 800f4a8:	23ce      	movs	r3, #206	; 0xce
 800f4aa:	4a45      	ldr	r2, [pc, #276]	; (800f5c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800f4ac:	4950      	ldr	r1, [pc, #320]	; (800f5f0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
 800f4ae:	47a0      	blx	r4
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e07b      	b.n	800f5ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f7f1 f85d 	bl	8000578 <__aeabi_f2d>
 800f4be:	4680      	mov	r8, r0
 800f4c0:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7f1 f856 	bl	8000578 <__aeabi_f2d>
 800f4cc:	4682      	mov	sl, r0
 800f4ce:	468b      	mov	fp, r1
 800f4d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4d2:	3308      	adds	r3, #8
 800f4d4:	f107 0214 	add.w	r2, r7, #20
 800f4d8:	4619      	mov	r1, r3
 800f4da:	2005      	movs	r0, #5
 800f4dc:	ec4b ab11 	vmov	d1, sl, fp
 800f4e0:	ec49 8b10 	vmov	d0, r8, r9
 800f4e4:	f7fd fadc 	bl	800caa0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 800f4e8:	697a      	ldr	r2, [r7, #20]
 800f4ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4ec:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 800f4ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4f0:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800f4f2:	221f      	movs	r2, #31
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	2005      	movs	r0, #5
 800f4f8:	f7fd fb1a 	bl	800cb30 <_ZN6tflite20CalculateInputRadiusEiii>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7f1 f828 	bl	8000554 <__aeabi_i2d>
 800f504:	4602      	mov	r2, r0
 800f506:	460b      	mov	r3, r1
 800f508:	4614      	mov	r4, r2
 800f50a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 800f50e:	4620      	mov	r0, r4
 800f510:	4629      	mov	r1, r5
 800f512:	f7f1 fb39 	bl	8000b88 <__aeabi_d2iz>
 800f516:	4602      	mov	r2, r0
 800f518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f51a:	619a      	str	r2, [r3, #24]
                                            op_data->input_left_shift);
 800f51c:	e045      	b.n	800f5aa <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x292>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	2b01      	cmp	r3, #1
 800f524:	d019      	beq.n	800f55a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x242>
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	695c      	ldr	r4, [r3, #20]
 800f52a:	68fd      	ldr	r5, [r7, #12]
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	4618      	mov	r0, r3
 800f532:	f7fd f97d 	bl	800c830 <TfLiteTypeGetName>
 800f536:	4606      	mov	r6, r0
 800f538:	2001      	movs	r0, #1
 800f53a:	f7fd f979 	bl	800c830 <TfLiteTypeGetName>
 800f53e:	4603      	mov	r3, r0
 800f540:	9303      	str	r3, [sp, #12]
 800f542:	9602      	str	r6, [sp, #8]
 800f544:	4b2b      	ldr	r3, [pc, #172]	; (800f5f4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 800f546:	9301      	str	r3, [sp, #4]
 800f548:	4b23      	ldr	r3, [pc, #140]	; (800f5d8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	23de      	movs	r3, #222	; 0xde
 800f54e:	4a1c      	ldr	r2, [pc, #112]	; (800f5c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800f550:	491c      	ldr	r1, [pc, #112]	; (800f5c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 800f552:	4628      	mov	r0, r5
 800f554:	47a0      	blx	r4
 800f556:	2301      	movs	r3, #1
 800f558:	e028      	b.n	800f5ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d019      	beq.n	800f596 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27e>
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	695c      	ldr	r4, [r3, #20]
 800f566:	68fd      	ldr	r5, [r7, #12]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7fd f95f 	bl	800c830 <TfLiteTypeGetName>
 800f572:	4606      	mov	r6, r0
 800f574:	2001      	movs	r0, #1
 800f576:	f7fd f95b 	bl	800c830 <TfLiteTypeGetName>
 800f57a:	4603      	mov	r3, r0
 800f57c:	9303      	str	r3, [sp, #12]
 800f57e:	9602      	str	r6, [sp, #8]
 800f580:	4b1c      	ldr	r3, [pc, #112]	; (800f5f4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 800f582:	9301      	str	r3, [sp, #4]
 800f584:	4b0d      	ldr	r3, [pc, #52]	; (800f5bc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 800f586:	9300      	str	r3, [sp, #0]
 800f588:	23df      	movs	r3, #223	; 0xdf
 800f58a:	4a0d      	ldr	r2, [pc, #52]	; (800f5c0 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 800f58c:	490d      	ldr	r1, [pc, #52]	; (800f5c4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 800f58e:	4628      	mov	r0, r5
 800f590:	47a0      	blx	r4
 800f592:	2301      	movs	r3, #1
 800f594:	e00a      	b.n	800f5ac <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
    op_data->beta = static_cast<double>(params->beta);
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7f0 ffec 	bl	8000578 <__aeabi_f2d>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	460c      	mov	r4, r1
 800f5a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5a6:	e9c2 3400 	strd	r3, r4, [r2]
  }
  return kTfLiteOk;
 800f5aa:	2300      	movs	r3, #0
}
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	371c      	adds	r7, #28
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5b6:	bf00      	nop
 800f5b8:	0801894c 	.word	0x0801894c
 800f5bc:	0801895c 	.word	0x0801895c
 800f5c0:	080188a4 	.word	0x080188a4
 800f5c4:	08018930 	.word	0x08018930
 800f5c8:	08018988 	.word	0x08018988
 800f5cc:	0801898c 	.word	0x0801898c
 800f5d0:	0801896c 	.word	0x0801896c
 800f5d4:	080189a8 	.word	0x080189a8
 800f5d8:	080189b4 	.word	0x080189b4
 800f5dc:	ffff8000 	.word	0xffff8000
 800f5e0:	080189c0 	.word	0x080189c0
 800f5e4:	080189c8 	.word	0x080189c8
 800f5e8:	3b800000 	.word	0x3b800000
 800f5ec:	080189e8 	.word	0x080189e8
 800f5f0:	080189d0 	.word	0x080189d0
 800f5f4:	08018a0c 	.word	0x08018a0c

0800f5f8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800f5f8:	b5b0      	push	{r4, r5, r7, lr}
 800f5fa:	b088      	sub	sp, #32
 800f5fc:	af04      	add	r7, sp, #16
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800f602:	6838      	ldr	r0, [r7, #0]
 800f604:	f7fe f910 	bl	800d828 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b01      	cmp	r3, #1
 800f60c:	bf14      	ite	ne
 800f60e:	2301      	movne	r3, #1
 800f610:	2300      	moveq	r3, #0
 800f612:	b2db      	uxtb	r3, r3
 800f614:	2b00      	cmp	r3, #0
 800f616:	d014      	beq.n	800f642 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	695c      	ldr	r4, [r3, #20]
 800f61c:	687d      	ldr	r5, [r7, #4]
 800f61e:	6838      	ldr	r0, [r7, #0]
 800f620:	f7fe f902 	bl	800d828 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 800f624:	4602      	mov	r2, r0
 800f626:	2301      	movs	r3, #1
 800f628:	9303      	str	r3, [sp, #12]
 800f62a:	9202      	str	r2, [sp, #8]
 800f62c:	4b26      	ldr	r3, [pc, #152]	; (800f6c8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800f62e:	9301      	str	r3, [sp, #4]
 800f630:	4b26      	ldr	r3, [pc, #152]	; (800f6cc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 800f632:	9300      	str	r3, [sp, #0]
 800f634:	23e8      	movs	r3, #232	; 0xe8
 800f636:	4a26      	ldr	r2, [pc, #152]	; (800f6d0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800f638:	4926      	ldr	r1, [pc, #152]	; (800f6d4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800f63a:	4628      	mov	r0, r5
 800f63c:	47a0      	blx	r4
 800f63e:	2301      	movs	r3, #1
 800f640:	e03d      	b.n	800f6be <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800f642:	6838      	ldr	r0, [r7, #0]
 800f644:	f7fe f8fd 	bl	800d842 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800f648:	4603      	mov	r3, r0
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	bf14      	ite	ne
 800f64e:	2301      	movne	r3, #1
 800f650:	2300      	moveq	r3, #0
 800f652:	b2db      	uxtb	r3, r3
 800f654:	2b00      	cmp	r3, #0
 800f656:	d014      	beq.n	800f682 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	695c      	ldr	r4, [r3, #20]
 800f65c:	687d      	ldr	r5, [r7, #4]
 800f65e:	6838      	ldr	r0, [r7, #0]
 800f660:	f7fe f8ef 	bl	800d842 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 800f664:	4602      	mov	r2, r0
 800f666:	2301      	movs	r3, #1
 800f668:	9303      	str	r3, [sp, #12]
 800f66a:	9202      	str	r2, [sp, #8]
 800f66c:	4b16      	ldr	r3, [pc, #88]	; (800f6c8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	4b19      	ldr	r3, [pc, #100]	; (800f6d8 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 800f672:	9300      	str	r3, [sp, #0]
 800f674:	23e9      	movs	r3, #233	; 0xe9
 800f676:	4a16      	ldr	r2, [pc, #88]	; (800f6d0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800f678:	4916      	ldr	r1, [pc, #88]	; (800f6d4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 800f67a:	4628      	mov	r0, r5
 800f67c:	47a0      	blx	r4
 800f67e:	2301      	movs	r3, #1
 800f680:	e01d      	b.n	800f6be <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	6839      	ldr	r1, [r7, #0]
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fd fd55 	bl	800d138 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f68e:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f7fd fb2d 	bl	800ccf0 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	bfd4      	ite	le
 800f69c:	2301      	movle	r3, #1
 800f69e:	2300      	movgt	r3, #0
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d00a      	beq.n	800f6bc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	695c      	ldr	r4, [r3, #20]
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	4b0b      	ldr	r3, [pc, #44]	; (800f6dc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 800f6ae:	9300      	str	r3, [sp, #0]
 800f6b0:	23eb      	movs	r3, #235	; 0xeb
 800f6b2:	4a07      	ldr	r2, [pc, #28]	; (800f6d0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 800f6b4:	490a      	ldr	r1, [pc, #40]	; (800f6e0 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 800f6b6:	47a0      	blx	r4
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e000      	b.n	800f6be <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>

  return kTfLiteOk;
 800f6bc:	2300      	movs	r3, #0
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3710      	adds	r7, #16
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bdb0      	pop	{r4, r5, r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	08018a1c 	.word	0x08018a1c
 800f6cc:	08018a20 	.word	0x08018a20
 800f6d0:	080188a4 	.word	0x080188a4
 800f6d4:	0801896c 	.word	0x0801896c
 800f6d8:	08018a30 	.word	0x08018a30
 800f6dc:	08018a44 	.word	0x08018a44
 800f6e0:	080189d0 	.word	0x080189d0

0800f6e4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 800f6e4:	b590      	push	{r4, r7, lr}
 800f6e6:	b093      	sub	sp, #76	; 0x4c
 800f6e8:	af02      	add	r7, sp, #8
 800f6ea:	60f8      	str	r0, [r7, #12]
 800f6ec:	60b9      	str	r1, [r7, #8]
 800f6ee:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 800f6f0:	f107 0310 	add.w	r3, r7, #16
 800f6f4:	68f9      	ldr	r1, [r7, #12]
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fd fe41 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	f7fd fe5c 	bl	800d3ba <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800f702:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 800f704:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f708:	68b9      	ldr	r1, [r7, #8]
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fd fe37 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 800f710:	68b8      	ldr	r0, [r7, #8]
 800f712:	f7fd fe63 	bl	800d3dc <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800f716:	4602      	mov	r2, r0
 800f718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f71c:	f107 0110 	add.w	r1, r7, #16
 800f720:	9200      	str	r2, [sp, #0]
 800f722:	4622      	mov	r2, r4
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f7ff fd3f 	bl	800f1a8 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 800f72a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f72e:	4618      	mov	r0, r3
 800f730:	f7fd fd71 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 800f734:	f107 0310 	add.w	r3, r7, #16
 800f738:	4618      	mov	r0, r3
 800f73a:	f7fd fd6c 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800f73e:	bf00      	nop
 800f740:	3744      	adds	r7, #68	; 0x44
 800f742:	46bd      	mov	sp, r7
 800f744:	bd90      	pop	{r4, r7, pc}

0800f746 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 800f746:	b590      	push	{r4, r7, lr}
 800f748:	b0ab      	sub	sp, #172	; 0xac
 800f74a:	af02      	add	r7, sp, #8
 800f74c:	60f8      	str	r0, [r7, #12]
 800f74e:	60b9      	str	r1, [r7, #8]
 800f750:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	2b03      	cmp	r3, #3
 800f758:	d127      	bne.n	800f7aa <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 800f75a:	f107 0310 	add.w	r3, r7, #16
 800f75e:	68f9      	ldr	r1, [r7, #12]
 800f760:	4618      	mov	r0, r3
 800f762:	f7fd fe0c 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f7fd fd12 	bl	800d190 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800f76c:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 800f76e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f772:	68b9      	ldr	r1, [r7, #8]
 800f774:	4618      	mov	r0, r3
 800f776:	f7fd fe02 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 800f77a:	68b8      	ldr	r0, [r7, #8]
 800f77c:	f7fd fd19 	bl	800d1b2 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800f780:	4602      	mov	r2, r0
 800f782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f786:	f107 0110 	add.w	r1, r7, #16
 800f78a:	9200      	str	r2, [sp, #0]
 800f78c:	4622      	mov	r2, r4
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	f000 f8c4 	bl	800f91c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 800f794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fd fd3c 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 800f79e:	f107 0310 	add.w	r3, r7, #16
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f7fd fd37 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}
 800f7a8:	e052      	b.n	800f850 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
    if (output->type == kTfLiteInt16) {
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	2b07      	cmp	r3, #7
 800f7b0:	d127      	bne.n	800f802 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 800f7b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f7b6:	68f9      	ldr	r1, [r7, #12]
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	f7fd fde0 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 800f7be:	68f8      	ldr	r0, [r7, #12]
 800f7c0:	f7fd fe1d 	bl	800d3fe <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800f7c4:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 800f7c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f7ca:	68b9      	ldr	r1, [r7, #8]
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fd fdd6 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 800f7d2:	68b8      	ldr	r0, [r7, #8]
 800f7d4:	f7fe ff66 	bl	800e6a4 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f7de:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800f7e2:	9200      	str	r2, [sp, #0]
 800f7e4:	4622      	mov	r2, r4
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f000 f9b3 	bl	800fb52 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 800f7ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7fd fd10 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 800f7f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7fd fd0b 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800f800:	e026      	b.n	800f850 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 800f802:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f806:	68f9      	ldr	r1, [r7, #12]
 800f808:	4618      	mov	r0, r3
 800f80a:	f7fd fdb8 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f7fd fdf5 	bl	800d3fe <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800f814:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int8_t>(output));
 800f816:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f81a:	68b9      	ldr	r1, [r7, #8]
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fd fdae 	bl	800d37e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 800f822:	68b8      	ldr	r0, [r7, #8]
 800f824:	f7fd fdfc 	bl	800d420 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800f828:	4602      	mov	r2, r0
 800f82a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f82e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800f832:	9200      	str	r2, [sp, #0]
 800f834:	4622      	mov	r2, r4
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 faa9 	bl	800fd8e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
 800f83c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800f840:	4618      	mov	r0, r3
 800f842:	f7fd fce8 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 800f846:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fd fce3 	bl	800d216 <_ZN6tflite12RuntimeShapeD1Ev>
}
 800f850:	bf00      	nop
 800f852:	37a4      	adds	r7, #164	; 0xa4
 800f854:	46bd      	mov	sp, r7
 800f856:	bd90      	pop	{r4, r7, pc}

0800f858 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800f858:	b5b0      	push	{r4, r5, r7, lr}
 800f85a:	b096      	sub	sp, #88	; 0x58
 800f85c:	af02      	add	r7, sp, #8
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	695b      	ldr	r3, [r3, #20]
 800f866:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input = GetInput(context, node, 0);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2200      	movs	r2, #0
 800f86c:	6839      	ldr	r1, [r7, #0]
 800f86e:	4618      	mov	r0, r3
 800f870:	f7fd fc62 	bl	800d138 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800f874:	64b8      	str	r0, [r7, #72]	; 0x48
  TfLiteTensor* output = GetOutput(context, node, 0);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	6839      	ldr	r1, [r7, #0]
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fd fc71 	bl	800d164 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800f882:	6478      	str	r0, [r7, #68]	; 0x44

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f107 0308 	add.w	r3, r7, #8
 800f88a:	9300      	str	r3, [sp, #0]
 800f88c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f88e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f890:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f892:	f7ff fd41 	bl	800f318 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 800f896:	4603      	mov	r3, r0
 800f898:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f89c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d002      	beq.n	800f8aa <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x52>
 800f8a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f8a8:	e028      	b.n	800f8fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 800f8aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	2b03      	cmp	r3, #3
 800f8b0:	d00c      	beq.n	800f8cc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 800f8b2:	2b09      	cmp	r3, #9
 800f8b4:	d00a      	beq.n	800f8cc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 800f8b6:	2b01      	cmp	r3, #1
 800f8b8:	d111      	bne.n	800f8de <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 800f8ba:	f107 0308 	add.w	r3, r7, #8
 800f8be:	461a      	mov	r2, r3
 800f8c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8c2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f8c4:	f7ff ff0e 	bl	800f6e4 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	e017      	b.n	800f8fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 800f8cc:	f107 0308 	add.w	r3, r7, #8
 800f8d0:	461a      	mov	r2, r3
 800f8d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8d4:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f8d6:	f7ff ff36 	bl	800f746 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	e00e      	b.n	800f8fc <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	695c      	ldr	r4, [r3, #20]
 800f8e2:	687d      	ldr	r5, [r7, #4]
 800f8e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fc ffa1 	bl	800c830 <TfLiteTypeGetName>
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	4903      	ldr	r1, [pc, #12]	; (800f904 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 800f8f6:	4628      	mov	r0, r5
 800f8f8:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800f8fa:	2301      	movs	r3, #1
  }
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3750      	adds	r7, #80	; 0x50
 800f900:	46bd      	mov	sp, r7
 800f902:	bdb0      	pop	{r4, r5, r7, pc}
 800f904:	08018a60 	.word	0x08018a60

0800f908 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration* Register_SOFTMAX() {
 800f908:	b480      	push	{r7}
 800f90a:	af00      	add	r7, sp, #0
                                 /*invoke=*/activations::SoftmaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 800f90c:	4b02      	ldr	r3, [pc, #8]	; (800f918 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x10>)
}
 800f90e:	4618      	mov	r0, r3
 800f910:	46bd      	mov	sp, r7
 800f912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f916:	4770      	bx	lr
 800f918:	2000065c 	.word	0x2000065c

0800f91c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 800f91c:	b590      	push	{r4, r7, lr}
 800f91e:	b09f      	sub	sp, #124	; 0x7c
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	607a      	str	r2, [r7, #4]
 800f928:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	689b      	ldr	r3, [r3, #8]
 800f92e:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	699b      	ldr	r3, [r3, #24]
 800f93a:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800f93c:	68b8      	ldr	r0, [r7, #8]
 800f93e:	f7fd fc80 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f942:	4603      	mov	r3, r0
 800f944:	3b01      	subs	r3, #1
 800f946:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 800f948:	683a      	ldr	r2, [r7, #0]
 800f94a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f94c:	68b8      	ldr	r0, [r7, #8]
 800f94e:	f7fe feba 	bl	800e6c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800f952:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
 800f954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f956:	683a      	ldr	r2, [r7, #0]
 800f958:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f95a:	68b8      	ldr	r0, [r7, #8]
 800f95c:	f7fd ff7e 	bl	800d85c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800f960:	6538      	str	r0, [r7, #80]	; 0x50
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
 800f962:	2300      	movs	r3, #0
 800f964:	677b      	str	r3, [r7, #116]	; 0x74
 800f966:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f96a:	429a      	cmp	r2, r3
 800f96c:	f280 80ed 	bge.w	800fb4a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800f970:	2300      	movs	r3, #0
 800f972:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f976:	2300      	movs	r3, #0
 800f978:	673b      	str	r3, [r7, #112]	; 0x70
 800f97a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f97e:	429a      	cmp	r2, r3
 800f980:	da16      	bge.n	800f9b0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800f982:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f984:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f986:	fb02 f203 	mul.w	r2, r2, r3
 800f98a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f98c:	4413      	add	r3, r2
 800f98e:	461a      	mov	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	441a      	add	r2, r3
 800f994:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800f998:	4611      	mov	r1, r2
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7ff fb9c 	bl	800f0d8 <_ZSt3maxIhERKT_S2_S2_>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	781b      	ldrb	r3, [r3, #0]
 800f9a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800f9a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f9aa:	3301      	adds	r3, #1
 800f9ac:	673b      	str	r3, [r7, #112]	; 0x70
 800f9ae:	e7e4      	b.n	800f97a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800f9b0:	f000 fb0b 	bl	800ffca <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f9bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	da2f      	bge.n	800fa24 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800f9c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f9c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9c8:	fb02 f203 	mul.w	r2, r2, r3
 800f9cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9ce:	4413      	add	r3, r2
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4413      	add	r3, r2
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	461a      	mov	r2, r3
 800f9da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800f9de:	1ad3      	subs	r3, r2, r3
 800f9e0:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800f9e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f9e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	db18      	blt.n	800fa1c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32 input_diff_rescaled =
 800f9ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f9ec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f9ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f9f0:	f7ff fb9c 	bl	800f12c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800f9f4:	64b8      	str	r0, [r7, #72]	; 0x48
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
 800f9f6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f9f8:	f000 faef 	bl	800ffda <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	61fb      	str	r3, [r7, #28]
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800fa00:	69f8      	ldr	r0, [r7, #28]
 800fa02:	f000 fb19 	bl	8010038 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800fa06:	4603      	mov	r3, r0
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f000 fc5d 	bl	80102c8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	4619      	mov	r1, r3
 800fa12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fa14:	f000 faf2 	bl	800fffc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800fa1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa1e:	3301      	adds	r3, #1
 800fa20:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fa22:	e7cb      	b.n	800f9bc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800fa24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f000 fc67 	bl	80102fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800fa2e:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fa36:	210c      	movs	r1, #12
 800fa38:	4618      	mov	r0, r3
 800fa3a:	f7ff fb8a 	bl	800f152 <_ZN6tflite13GetReciprocalEliPi>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7fe ff87 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fa46:	4603      	mov	r3, r0
 800fa48:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fa4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fa50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa52:	429a      	cmp	r2, r3
 800fa54:	da75      	bge.n	800fb42 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800fa56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa5a:	fb02 f203 	mul.w	r2, r2, r3
 800fa5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fa60:	4413      	add	r3, r2
 800fa62:	461a      	mov	r2, r3
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	4413      	add	r3, r2
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800fa70:	1ad3      	subs	r3, r2, r3
 800fa72:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800fa74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	db50      	blt.n	800fb1e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32 input_diff_rescaled =
 800fa7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa7e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fa80:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fa82:	f7ff fb53 	bl	800f12c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800fa86:	6438      	str	r0, [r7, #64]	; 0x40
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
 800fa88:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fa8a:	f000 faa6 	bl	800ffda <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	61bb      	str	r3, [r7, #24]
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800fa92:	69b8      	ldr	r0, [r7, #24]
 800fa94:	f000 fad0 	bl	8010038 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 800fa9c:	6979      	ldr	r1, [r7, #20]
 800fa9e:	6a38      	ldr	r0, [r7, #32]
 800faa0:	f7ff fa52 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800faa4:	4603      	mov	r3, r0
 800faa6:	633b      	str	r3, [r7, #48]	; 0x30
 800faa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800faac:	4618      	mov	r0, r3
 800faae:	f7fe fe4b 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fab2:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800fab4:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800fab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fab8:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800faba:	4611      	mov	r1, r2
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fd fd73 	bl	800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800fac2:	63f8      	str	r0, [r7, #60]	; 0x3c

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 800fac4:	f7fd f904 	bl	800ccd0 <_ZNSt14numeric_limitsIhE3minEv>
 800fac8:	4603      	mov	r3, r0
 800faca:	461a      	mov	r2, r3
            unsat_output +
 800facc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800face:	4413      	add	r3, r2
        const int32 shifted_output =
 800fad0:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 800fad2:	f7fd f905 	bl	800cce0 <_ZNSt14numeric_limitsIhE3maxEv>
 800fad6:	4603      	mov	r3, r0
 800fad8:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 800fada:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fade:	f107 0310 	add.w	r3, r7, #16
 800fae2:	4611      	mov	r1, r2
 800fae4:	4618      	mov	r0, r3
 800fae6:	f7fd fb13 	bl	800d110 <_ZSt3minIlERKT_S2_S2_>
 800faea:	4604      	mov	r4, r0
 800faec:	f7fd f8f0 	bl	800ccd0 <_ZNSt14numeric_limitsIhE3minEv>
 800faf0:	4603      	mov	r3, r0
 800faf2:	63bb      	str	r3, [r7, #56]	; 0x38
 800faf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800faf8:	4619      	mov	r1, r3
 800fafa:	4620      	mov	r0, r4
 800fafc:	f7fd faf4 	bl	800d0e8 <_ZSt3maxIlERKT_S2_S2_>
 800fb00:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800fb02:	6819      	ldr	r1, [r3, #0]
 800fb04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb08:	fb02 f203 	mul.w	r2, r2, r3
 800fb0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb0e:	4413      	add	r3, r2
 800fb10:	461a      	mov	r2, r3
 800fb12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fb16:	4413      	add	r3, r2
 800fb18:	b2ca      	uxtb	r2, r1
 800fb1a:	701a      	strb	r2, [r3, #0]
 800fb1c:	e00d      	b.n	800fb3a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800fb1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fb22:	fb02 f203 	mul.w	r2, r2, r3
 800fb26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb28:	4413      	add	r3, r2
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fb30:	189c      	adds	r4, r3, r2
 800fb32:	f7fd f8cd 	bl	800ccd0 <_ZNSt14numeric_limitsIhE3minEv>
 800fb36:	4603      	mov	r3, r0
 800fb38:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800fb3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800fb40:	e785      	b.n	800fa4e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 800fb42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb44:	3301      	adds	r3, #1
 800fb46:	677b      	str	r3, [r7, #116]	; 0x74
 800fb48:	e70d      	b.n	800f966 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
      }
    }
  }
}
 800fb4a:	bf00      	nop
 800fb4c:	377c      	adds	r7, #124	; 0x7c
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	bd90      	pop	{r4, r7, pc}

0800fb52 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800fb52:	b590      	push	{r4, r7, lr}
 800fb54:	b09f      	sub	sp, #124	; 0x7c
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	60f8      	str	r0, [r7, #12]
 800fb5a:	60b9      	str	r1, [r7, #8]
 800fb5c:	607a      	str	r2, [r7, #4]
 800fb5e:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	68db      	ldr	r3, [r3, #12]
 800fb6a:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	699b      	ldr	r3, [r3, #24]
 800fb70:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800fb72:	68b8      	ldr	r0, [r7, #8]
 800fb74:	f7fd fb65 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 800fb7e:	683a      	ldr	r2, [r7, #0]
 800fb80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb82:	68b8      	ldr	r0, [r7, #8]
 800fb84:	f7fe fd9f 	bl	800e6c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800fb88:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 800fb8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb8c:	683a      	ldr	r2, [r7, #0]
 800fb8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb90:	68b8      	ldr	r0, [r7, #8]
 800fb92:	f7fd fe63 	bl	800d85c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fb96:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800fb98:	2300      	movs	r3, #0
 800fb9a:	677b      	str	r3, [r7, #116]	; 0x74
 800fb9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fb9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fba0:	429a      	cmp	r2, r3
 800fba2:	f280 80f0 	bge.w	800fd86 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800fba6:	2380      	movs	r3, #128	; 0x80
 800fba8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800fbac:	2300      	movs	r3, #0
 800fbae:	673b      	str	r3, [r7, #112]	; 0x70
 800fbb0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fbb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	da17      	bge.n	800fbe8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800fbb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fbbc:	fb02 f203 	mul.w	r2, r2, r3
 800fbc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbc2:	4413      	add	r3, r2
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	441a      	add	r2, r3
 800fbca:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800fbce:	4611      	mov	r1, r2
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff fa95 	bl	800f100 <_ZSt3maxIaERKT_S2_S2_>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	f993 3000 	ldrsb.w	r3, [r3]
 800fbdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800fbe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	673b      	str	r3, [r7, #112]	; 0x70
 800fbe6:	e7e3      	b.n	800fbb0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800fbe8:	f000 f9ef 	bl	800ffca <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800fbec:	4603      	mov	r3, r0
 800fbee:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fbf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fbf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	da30      	bge.n	800fc5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800fbfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc00:	fb02 f203 	mul.w	r2, r2, r3
 800fc04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc06:	4413      	add	r3, r2
 800fc08:	461a      	mov	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4413      	add	r3, r2
 800fc0e:	f993 3000 	ldrsb.w	r3, [r3]
 800fc12:	461a      	mov	r2, r3
 800fc14:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800fc1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fc1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fc20:	429a      	cmp	r2, r3
 800fc22:	db18      	blt.n	800fc56 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32 input_diff_rescaled =
 800fc24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fc26:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fc28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fc2a:	f7ff fa7f 	bl	800f12c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800fc2e:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 800fc30:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fc32:	f000 f9d2 	bl	800ffda <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800fc36:	4603      	mov	r3, r0
 800fc38:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800fc3a:	69f8      	ldr	r0, [r7, #28]
 800fc3c:	f000 f9fc 	bl	8010038 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800fc40:	4603      	mov	r3, r0
 800fc42:	4618      	mov	r0, r3
 800fc44:	f000 fb40 	bl	80102c8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	4619      	mov	r1, r3
 800fc4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc4e:	f000 f9d5 	bl	800fffc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fc52:	4603      	mov	r3, r0
 800fc54:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800fc56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc58:	3301      	adds	r3, #1
 800fc5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fc5c:	e7ca      	b.n	800fbf4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800fc5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc62:	4618      	mov	r0, r3
 800fc64:	f000 fb4a 	bl	80102fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800fc68:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fc70:	210c      	movs	r1, #12
 800fc72:	4618      	mov	r0, r3
 800fc74:	f7ff fa6d 	bl	800f152 <_ZN6tflite13GetReciprocalEliPi>
 800fc78:	4603      	mov	r3, r0
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7fe fe6a 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800fc80:	4603      	mov	r3, r0
 800fc82:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800fc84:	2300      	movs	r3, #0
 800fc86:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc88:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	da76      	bge.n	800fd7e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800fc90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fc94:	fb02 f203 	mul.w	r2, r2, r3
 800fc98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc9a:	4413      	add	r3, r2
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	4413      	add	r3, r2
 800fca2:	f993 3000 	ldrsb.w	r3, [r3]
 800fca6:	461a      	mov	r2, r3
 800fca8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800fcac:	1ad3      	subs	r3, r2, r3
 800fcae:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800fcb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fcb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	db50      	blt.n	800fd5a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32 input_diff_rescaled =
 800fcb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fcba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fcbc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fcbe:	f7ff fa35 	bl	800f12c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800fcc2:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 800fcc4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fcc6:	f000 f988 	bl	800ffda <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800fcca:	4603      	mov	r3, r0
 800fccc:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800fcce:	69b8      	ldr	r0, [r7, #24]
 800fcd0:	f000 f9b2 	bl	8010038 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800fcd8:	6979      	ldr	r1, [r7, #20]
 800fcda:	6a38      	ldr	r0, [r7, #32]
 800fcdc:	f7ff f934 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800fce0:	4603      	mov	r3, r0
 800fce2:	633b      	str	r3, [r7, #48]	; 0x30
 800fce4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7fe fd2d 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800fcee:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800fcf0:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800fcf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcf4:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800fcf6:	4611      	mov	r1, r2
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7fd fc55 	bl	800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800fcfe:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 800fd00:	f7f1 f9c0 	bl	8001084 <_ZNSt14numeric_limitsIsE3minEv>
 800fd04:	4603      	mov	r3, r0
 800fd06:	461a      	mov	r2, r3
            unsat_output +
 800fd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd0a:	4413      	add	r3, r2
        const int32 shifted_output =
 800fd0c:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 800fd0e:	f7f1 f9c3 	bl	8001098 <_ZNSt14numeric_limitsIsE3maxEv>
 800fd12:	4603      	mov	r3, r0
 800fd14:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 800fd16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800fd1a:	f107 0310 	add.w	r3, r7, #16
 800fd1e:	4611      	mov	r1, r2
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fd f9f5 	bl	800d110 <_ZSt3minIlERKT_S2_S2_>
 800fd26:	4604      	mov	r4, r0
 800fd28:	f7f1 f9ac 	bl	8001084 <_ZNSt14numeric_limitsIsE3minEv>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800fd34:	4619      	mov	r1, r3
 800fd36:	4620      	mov	r0, r4
 800fd38:	f7fd f9d6 	bl	800d0e8 <_ZSt3maxIlERKT_S2_S2_>
 800fd3c:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800fd3e:	6819      	ldr	r1, [r3, #0]
 800fd40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd44:	fb02 f203 	mul.w	r2, r2, r3
 800fd48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd4a:	4413      	add	r3, r2
 800fd4c:	005b      	lsls	r3, r3, #1
 800fd4e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fd52:	4413      	add	r3, r2
 800fd54:	b20a      	sxth	r2, r1
 800fd56:	801a      	strh	r2, [r3, #0]
 800fd58:	e00d      	b.n	800fd76 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800fd5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd5e:	fb02 f203 	mul.w	r2, r2, r3
 800fd62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd64:	4413      	add	r3, r2
 800fd66:	005b      	lsls	r3, r3, #1
 800fd68:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fd6c:	18d4      	adds	r4, r2, r3
 800fd6e:	f7f1 f989 	bl	8001084 <_ZNSt14numeric_limitsIsE3minEv>
 800fd72:	4603      	mov	r3, r0
 800fd74:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800fd76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd78:	3301      	adds	r3, #1
 800fd7a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd7c:	e784      	b.n	800fc88 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800fd7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd80:	3301      	adds	r3, #1
 800fd82:	677b      	str	r3, [r7, #116]	; 0x74
 800fd84:	e70a      	b.n	800fb9c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800fd86:	bf00      	nop
 800fd88:	377c      	adds	r7, #124	; 0x7c
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd90      	pop	{r4, r7, pc}

0800fd8e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800fd8e:	b590      	push	{r4, r7, lr}
 800fd90:	b09f      	sub	sp, #124	; 0x7c
 800fd92:	af00      	add	r7, sp, #0
 800fd94:	60f8      	str	r0, [r7, #12]
 800fd96:	60b9      	str	r1, [r7, #8]
 800fd98:	607a      	str	r2, [r7, #4]
 800fd9a:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	689b      	ldr	r3, [r3, #8]
 800fda0:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	699b      	ldr	r3, [r3, #24]
 800fdac:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800fdae:	68b8      	ldr	r0, [r7, #8]
 800fdb0:	f7fd fa47 	bl	800d242 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 800fdba:	683a      	ldr	r2, [r7, #0]
 800fdbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fdbe:	68b8      	ldr	r0, [r7, #8]
 800fdc0:	f7fe fc81 	bl	800e6c6 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 800fdc4:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 800fdc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdc8:	683a      	ldr	r2, [r7, #0]
 800fdca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fdcc:	68b8      	ldr	r0, [r7, #8]
 800fdce:	f7fd fd45 	bl	800d85c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800fdd2:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	677b      	str	r3, [r7, #116]	; 0x74
 800fdd8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fdda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fddc:	429a      	cmp	r2, r3
 800fdde:	f280 80f0 	bge.w	800ffc2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 800fde2:	2380      	movs	r3, #128	; 0x80
 800fde4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800fde8:	2300      	movs	r3, #0
 800fdea:	673b      	str	r3, [r7, #112]	; 0x70
 800fdec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fdee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	da17      	bge.n	800fe24 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 800fdf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fdf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdf8:	fb02 f203 	mul.w	r2, r2, r3
 800fdfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fdfe:	4413      	add	r3, r2
 800fe00:	461a      	mov	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	441a      	add	r2, r3
 800fe06:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7ff f977 	bl	800f100 <_ZSt3maxIaERKT_S2_S2_>
 800fe12:	4603      	mov	r3, r0
 800fe14:	f993 3000 	ldrsb.w	r3, [r3]
 800fe18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 800fe1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe1e:	3301      	adds	r3, #1
 800fe20:	673b      	str	r3, [r7, #112]	; 0x70
 800fe22:	e7e3      	b.n	800fdec <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800fe24:	f000 f8d1 	bl	800ffca <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fe32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe34:	429a      	cmp	r2, r3
 800fe36:	da30      	bge.n	800fe9a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800fe38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe3c:	fb02 f203 	mul.w	r2, r2, r3
 800fe40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe42:	4413      	add	r3, r2
 800fe44:	461a      	mov	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4413      	add	r3, r2
 800fe4a:	f993 3000 	ldrsb.w	r3, [r3]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 800fe58:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	db18      	blt.n	800fe92 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32 input_diff_rescaled =
 800fe60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fe62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fe64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fe66:	f7ff f961 	bl	800f12c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800fe6a:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 800fe6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fe6e:	f000 f8b4 	bl	800ffda <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800fe72:	4603      	mov	r3, r0
 800fe74:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800fe76:	69f8      	ldr	r0, [r7, #28]
 800fe78:	f000 f8de 	bl	8010038 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f000 fa22 	bl	80102c8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 800fe84:	4603      	mov	r3, r0
 800fe86:	4619      	mov	r1, r3
 800fe88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fe8a:	f000 f8b7 	bl	800fffc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 800fe8e:	4603      	mov	r3, r0
 800fe90:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 800fe92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe94:	3301      	adds	r3, #1
 800fe96:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe98:	e7ca      	b.n	800fe30 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 800fe9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f000 fa2c 	bl	80102fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 800fea4:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800feac:	210c      	movs	r1, #12
 800feae:	4618      	mov	r0, r3
 800feb0:	f7ff f94f 	bl	800f152 <_ZN6tflite13GetReciprocalEliPi>
 800feb4:	4603      	mov	r3, r0
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fe fd4c 	bl	800e954 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 800febc:	4603      	mov	r3, r0
 800febe:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 800fec0:	2300      	movs	r3, #0
 800fec2:	66bb      	str	r3, [r7, #104]	; 0x68
 800fec4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec8:	429a      	cmp	r2, r3
 800feca:	da76      	bge.n	800ffba <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 800fecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fece:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fed0:	fb02 f203 	mul.w	r2, r2, r3
 800fed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fed6:	4413      	add	r3, r2
 800fed8:	461a      	mov	r2, r3
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4413      	add	r3, r2
 800fede:	f993 3000 	ldrsb.w	r3, [r3]
 800fee2:	461a      	mov	r2, r3
 800fee4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 800fee8:	1ad3      	subs	r3, r2, r3
 800feea:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 800feec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800feee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fef0:	429a      	cmp	r2, r3
 800fef2:	db50      	blt.n	800ff96 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32 input_diff_rescaled =
 800fef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fef6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fef8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fefa:	f7ff f917 	bl	800f12c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 800fefe:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 800ff00:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ff02:	f000 f86a 	bl	800ffda <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 800ff06:	4603      	mov	r3, r0
 800ff08:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800ff0a:	69b8      	ldr	r0, [r7, #24]
 800ff0c:	f000 f894 	bl	8010038 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 800ff10:	4603      	mov	r3, r0
 800ff12:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 800ff14:	6979      	ldr	r1, [r7, #20]
 800ff16:	6a38      	ldr	r0, [r7, #32]
 800ff18:	f7ff f816 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	633b      	str	r3, [r7, #48]	; 0x30
 800ff20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fe fc0f 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 800ff2a:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800ff2c:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800ff2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff30:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 800ff32:	4611      	mov	r1, r2
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fd fb37 	bl	800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800ff3a:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 800ff3c:	f7fc feb7 	bl	800ccae <_ZNSt14numeric_limitsIaE3minEv>
 800ff40:	4603      	mov	r3, r0
 800ff42:	461a      	mov	r2, r3
            unsat_output +
 800ff44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff46:	4413      	add	r3, r2
        const int32 shifted_output =
 800ff48:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 800ff4a:	f7fc feb9 	bl	800ccc0 <_ZNSt14numeric_limitsIaE3maxEv>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 800ff52:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800ff56:	f107 0310 	add.w	r3, r7, #16
 800ff5a:	4611      	mov	r1, r2
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fd f8d7 	bl	800d110 <_ZSt3minIlERKT_S2_S2_>
 800ff62:	4604      	mov	r4, r0
 800ff64:	f7fc fea3 	bl	800ccae <_ZNSt14numeric_limitsIaE3minEv>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ff6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ff70:	4619      	mov	r1, r3
 800ff72:	4620      	mov	r0, r4
 800ff74:	f7fd f8b8 	bl	800d0e8 <_ZSt3maxIlERKT_S2_S2_>
 800ff78:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800ff7a:	6819      	ldr	r1, [r3, #0]
 800ff7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff80:	fb02 f203 	mul.w	r2, r2, r3
 800ff84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff86:	4413      	add	r3, r2
 800ff88:	461a      	mov	r2, r3
 800ff8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff8e:	4413      	add	r3, r2
 800ff90:	b24a      	sxtb	r2, r1
 800ff92:	701a      	strb	r2, [r3, #0]
 800ff94:	e00d      	b.n	800ffb2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800ff96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ff98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff9a:	fb02 f203 	mul.w	r2, r2, r3
 800ff9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffa0:	4413      	add	r3, r2
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffa8:	189c      	adds	r4, r3, r2
 800ffaa:	f7fc fe80 	bl	800ccae <_ZNSt14numeric_limitsIaE3minEv>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 800ffb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	66bb      	str	r3, [r7, #104]	; 0x68
 800ffb8:	e784      	b.n	800fec4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 800ffba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	677b      	str	r3, [r7, #116]	; 0x74
 800ffc0:	e70a      	b.n	800fdd8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 800ffc2:	bf00      	nop
 800ffc4:	377c      	adds	r7, #124	; 0x7c
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd90      	pop	{r4, r7, pc}

0800ffca <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 800ffca:	b580      	push	{r7, lr}
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	2000      	movs	r0, #0
 800ffd0:	f000 f99f 	bl	8010312 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	bd80      	pop	{r7, pc}

0800ffda <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 800ffda:	b580      	push	{r7, lr}
 800ffdc:	b084      	sub	sp, #16
 800ffde:	af00      	add	r7, sp, #0
 800ffe0:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 800ffe2:	f107 030c 	add.w	r3, r7, #12
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f000 f9a7 	bl	801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 800ffec:	4602      	mov	r2, r0
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6013      	str	r3, [r2, #0]
    return retval;
 800fff2:	68fb      	ldr	r3, [r7, #12]
  }
 800fff4:	4618      	mov	r0, r3
 800fff6:	3710      	adds	r7, #16
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 800fffc:	b590      	push	{r4, r7, lr}
 800fffe:	b083      	sub	sp, #12
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
 8010006:	1d3b      	adds	r3, r7, #4
 8010008:	4618      	mov	r0, r3
 801000a:	f000 f977 	bl	80102fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801000e:	4603      	mov	r3, r0
 8010010:	681c      	ldr	r4, [r3, #0]
 8010012:	463b      	mov	r3, r7
 8010014:	4618      	mov	r0, r3
 8010016:	f000 f971 	bl	80102fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801001a:	4603      	mov	r3, r0
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	4619      	mov	r1, r3
 8010020:	4620      	mov	r0, r4
 8010022:	f7fd fbb1 	bl	800d788 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8010026:	4603      	mov	r3, r0
 8010028:	4618      	mov	r0, r3
 801002a:	f000 f991 	bl	8010350 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 801002e:	4603      	mov	r3, r0
 8010030:	4618      	mov	r0, r3
 8010032:	370c      	adds	r7, #12
 8010034:	46bd      	mov	sp, r7
 8010036:	bd90      	pop	{r4, r7, pc}

08010038 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8010038:	b590      	push	{r4, r7, lr}
 801003a:	b091      	sub	sp, #68	; 0x44
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8010040:	f000 f997 	bl	8010372 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8010044:	4603      	mov	r3, r0
 8010046:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8010048:	2001      	movs	r0, #1
 801004a:	f000 f99b 	bl	8010384 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801004e:	4603      	mov	r3, r0
 8010050:	4619      	mov	r1, r3
 8010052:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8010054:	f000 f9aa 	bl	80103ac <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010058:	4603      	mov	r3, r0
 801005a:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 801005c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 f9c2 	bl	80103e8 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8010064:	4603      	mov	r3, r0
 8010066:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010068:	4618      	mov	r0, r3
 801006a:	f000 f99f 	bl	80103ac <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801006e:	4603      	mov	r3, r0
 8010070:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8010072:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010074:	f000 f9d6 	bl	8010424 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8010078:	4603      	mov	r3, r0
 801007a:	4618      	mov	r0, r3
 801007c:	f7fe ff02 	bl	800ee84 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8010080:	4603      	mov	r3, r0
 8010082:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8010084:	6879      	ldr	r1, [r7, #4]
 8010086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010088:	f000 f990 	bl	80103ac <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801008c:	4603      	mov	r3, r0
 801008e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010090:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010094:	4618      	mov	r0, r3
 8010096:	f000 f950 	bl	801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801009a:	4603      	mov	r3, r0
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 80100a0:	4883      	ldr	r0, [pc, #524]	; (80102b0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 80100a2:	f7fe fb70 	bl	800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80100a6:	4603      	mov	r3, r0
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fe fb58 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80100ae:	4603      	mov	r3, r0
 80100b0:	627b      	str	r3, [r7, #36]	; 0x24
 80100b2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80100b6:	f7fd fb2b 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80100ba:	4603      	mov	r3, r0
 80100bc:	4619      	mov	r1, r3
 80100be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80100c0:	f7fd fb31 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80100c4:	4603      	mov	r3, r0
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fd fb80 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80100cc:	4604      	mov	r4, r0
 80100ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100d2:	f7fe ff39 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80100d6:	4603      	mov	r3, r0
 80100d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80100da:	4619      	mov	r1, r3
 80100dc:	4620      	mov	r0, r4
 80100de:	f7fe fdd3 	bl	800ec88 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80100e2:	4603      	mov	r3, r0
 80100e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 80100e6:	4873      	ldr	r0, [pc, #460]	; (80102b4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 80100e8:	f7fe fb4d 	bl	800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80100ec:	4603      	mov	r3, r0
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7fe fb35 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80100f4:	4603      	mov	r3, r0
 80100f6:	623b      	str	r3, [r7, #32]
 80100f8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80100fc:	f7fd fb08 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010100:	4603      	mov	r3, r0
 8010102:	4619      	mov	r1, r3
 8010104:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010106:	f7fd fb0e 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801010a:	4603      	mov	r3, r0
 801010c:	4618      	mov	r0, r3
 801010e:	f7fd fb5d 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010112:	4604      	mov	r4, r0
 8010114:	6a39      	ldr	r1, [r7, #32]
 8010116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010118:	f7fe ff16 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801011c:	4603      	mov	r3, r0
 801011e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010120:	4619      	mov	r1, r3
 8010122:	4620      	mov	r0, r4
 8010124:	f7fe fdb0 	bl	800ec88 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010128:	4603      	mov	r3, r0
 801012a:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 801012c:	4862      	ldr	r0, [pc, #392]	; (80102b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 801012e:	f7fe fb2a 	bl	800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010132:	4603      	mov	r3, r0
 8010134:	4618      	mov	r0, r3
 8010136:	f7fe fb12 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801013a:	4603      	mov	r3, r0
 801013c:	61fb      	str	r3, [r7, #28]
 801013e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8010142:	f7fd fae5 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010146:	4603      	mov	r3, r0
 8010148:	4619      	mov	r1, r3
 801014a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801014c:	f7fd faeb 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010150:	4603      	mov	r3, r0
 8010152:	4618      	mov	r0, r3
 8010154:	f7fd fb3a 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010158:	4604      	mov	r4, r0
 801015a:	69f9      	ldr	r1, [r7, #28]
 801015c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801015e:	f7fe fef3 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010162:	4603      	mov	r3, r0
 8010164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010166:	4619      	mov	r1, r3
 8010168:	4620      	mov	r0, r4
 801016a:	f7fe fd8d 	bl	800ec88 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801016e:	4603      	mov	r3, r0
 8010170:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8010172:	4852      	ldr	r0, [pc, #328]	; (80102bc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8010174:	f7fe fb07 	bl	800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010178:	4603      	mov	r3, r0
 801017a:	4618      	mov	r0, r3
 801017c:	f7fe faef 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010180:	4603      	mov	r3, r0
 8010182:	61bb      	str	r3, [r7, #24]
 8010184:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8010188:	f7fd fac2 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801018c:	4603      	mov	r3, r0
 801018e:	4619      	mov	r1, r3
 8010190:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010192:	f7fd fac8 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010196:	4603      	mov	r3, r0
 8010198:	4618      	mov	r0, r3
 801019a:	f7fd fb17 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801019e:	4604      	mov	r4, r0
 80101a0:	69b9      	ldr	r1, [r7, #24]
 80101a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101a4:	f7fe fed0 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80101a8:	4603      	mov	r3, r0
 80101aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101ac:	4619      	mov	r1, r3
 80101ae:	4620      	mov	r0, r4
 80101b0:	f7fe fd6a 	bl	800ec88 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80101b4:	4603      	mov	r3, r0
 80101b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 80101b8:	4841      	ldr	r0, [pc, #260]	; (80102c0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 80101ba:	f7fe fae4 	bl	800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80101be:	4603      	mov	r3, r0
 80101c0:	4618      	mov	r0, r3
 80101c2:	f7fe facc 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80101c6:	4603      	mov	r3, r0
 80101c8:	617b      	str	r3, [r7, #20]
 80101ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80101ce:	f7fd fa9f 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80101d2:	4603      	mov	r3, r0
 80101d4:	4619      	mov	r1, r3
 80101d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80101d8:	f7fd faa5 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80101dc:	4603      	mov	r3, r0
 80101de:	4618      	mov	r0, r3
 80101e0:	f7fd faf4 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80101e4:	4604      	mov	r4, r0
 80101e6:	6979      	ldr	r1, [r7, #20]
 80101e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101ea:	f7fe fead 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80101ee:	4603      	mov	r3, r0
 80101f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101f2:	4619      	mov	r1, r3
 80101f4:	4620      	mov	r0, r4
 80101f6:	f7fe fd47 	bl	800ec88 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80101fa:	4603      	mov	r3, r0
 80101fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 80101fe:	4831      	ldr	r0, [pc, #196]	; (80102c4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8010200:	f7fe fac1 	bl	800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8010204:	4603      	mov	r3, r0
 8010206:	4618      	mov	r0, r3
 8010208:	f7fe faa9 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801020c:	4603      	mov	r3, r0
 801020e:	613b      	str	r3, [r7, #16]
 8010210:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8010214:	f7fd fa7c 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010218:	4603      	mov	r3, r0
 801021a:	4619      	mov	r1, r3
 801021c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801021e:	f7fd fa82 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010222:	4603      	mov	r3, r0
 8010224:	4618      	mov	r0, r3
 8010226:	f7fd fad1 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801022a:	4604      	mov	r4, r0
 801022c:	6939      	ldr	r1, [r7, #16]
 801022e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010230:	f7fe fe8a 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8010234:	4603      	mov	r3, r0
 8010236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010238:	4619      	mov	r1, r3
 801023a:	4620      	mov	r0, r4
 801023c:	f7fe fd24 	bl	800ec88 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010240:	4603      	mov	r3, r0
 8010242:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8010244:	20f2      	movs	r0, #242	; 0xf2
 8010246:	f7fe fa9e 	bl	800e786 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801024a:	4603      	mov	r3, r0
 801024c:	4618      	mov	r0, r3
 801024e:	f7fe fa86 	bl	800e75e <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8010252:	4603      	mov	r3, r0
 8010254:	60fb      	str	r3, [r7, #12]
 8010256:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801025a:	f7fd fa59 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801025e:	4603      	mov	r3, r0
 8010260:	4619      	mov	r1, r3
 8010262:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8010264:	f7fd fa5f 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010268:	4603      	mov	r3, r0
 801026a:	4618      	mov	r0, r3
 801026c:	f7fd faae 	bl	800d7cc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8010270:	4604      	mov	r4, r0
 8010272:	68f9      	ldr	r1, [r7, #12]
 8010274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010276:	f7fe fe67 	bl	800ef48 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801027a:	4603      	mov	r3, r0
 801027c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801027e:	4619      	mov	r1, r3
 8010280:	4620      	mov	r0, r4
 8010282:	f7fe fd01 	bl	800ec88 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8010286:	4603      	mov	r3, r0
 8010288:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 f8e4 	bl	8010458 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8010290:	4604      	mov	r4, r0
 8010292:	f7fe fbd1 	bl	800ea38 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8010296:	4603      	mov	r3, r0
 8010298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801029a:	4619      	mov	r1, r3
 801029c:	4620      	mov	r0, r4
 801029e:	f7fe fcf3 	bl	800ec88 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80102a2:	4603      	mov	r3, r0
 80102a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80102a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80102a8:	4618      	mov	r0, r3
 80102aa:	3744      	adds	r7, #68	; 0x44
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd90      	pop	{r4, r7, pc}
 80102b0:	63afbe7b 	.word	0x63afbe7b
 80102b4:	4da2cbf2 	.word	0x4da2cbf2
 80102b8:	2f16ac6c 	.word	0x2f16ac6c
 80102bc:	1152aaa4 	.word	0x1152aaa4
 80102c0:	02582ab7 	.word	0x02582ab7
 80102c4:	000afe11 	.word	0x000afe11

080102c8 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80102c8:	b5b0      	push	{r4, r5, r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80102d0:	1d3b      	adds	r3, r7, #4
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe fa38 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80102d8:	4603      	mov	r3, r0
 80102da:	681d      	ldr	r5, [r3, #0]
 80102dc:	f107 030c 	add.w	r3, r7, #12
 80102e0:	4618      	mov	r0, r3
 80102e2:	f000 f80b 	bl	80102fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80102e6:	4604      	mov	r4, r0
 80102e8:	4628      	mov	r0, r5
 80102ea:	f000 f8c7 	bl	801047c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 80102ee:	4603      	mov	r3, r0
 80102f0:	6023      	str	r3, [r4, #0]
  return result;
 80102f2:	68fb      	ldr	r3, [r7, #12]
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3710      	adds	r7, #16
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bdb0      	pop	{r4, r5, r7, pc}

080102fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 80102fc:	b480      	push	{r7}
 80102fe:	b083      	sub	sp, #12
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	4618      	mov	r0, r3
 8010308:	370c      	adds	r7, #12
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr

08010312 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8010312:	b590      	push	{r4, r7, lr}
 8010314:	b085      	sub	sp, #20
 8010316:	af00      	add	r7, sp, #0
 8010318:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801031a:	f107 030c 	add.w	r3, r7, #12
 801031e:	4618      	mov	r0, r3
 8010320:	f7ff ffec 	bl	80102fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010324:	4604      	mov	r4, r0
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f7fd f9f2 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801032c:	4603      	mov	r3, r0
 801032e:	6023      	str	r3, [r4, #0]
    return retval;
 8010330:	68fb      	ldr	r3, [r7, #12]
  }
 8010332:	4618      	mov	r0, r3
 8010334:	3714      	adds	r7, #20
 8010336:	46bd      	mov	sp, r7
 8010338:	bd90      	pop	{r4, r7, pc}

0801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 801033a:	b480      	push	{r7}
 801033c:	b083      	sub	sp, #12
 801033e:	af00      	add	r7, sp, #0
 8010340:	6078      	str	r0, [r7, #4]
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	4618      	mov	r0, r3
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8010350:	b580      	push	{r7, lr}
 8010352:	b084      	sub	sp, #16
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8010358:	f107 030c 	add.w	r3, r7, #12
 801035c:	4618      	mov	r0, r3
 801035e:	f7ff ffcd 	bl	80102fc <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8010362:	4602      	mov	r2, r0
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6013      	str	r3, [r2, #0]
    return retval;
 8010368:	68fb      	ldr	r3, [r7, #12]
  }
 801036a:	4618      	mov	r0, r3
 801036c:	3710      	adds	r7, #16
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8010372:	b580      	push	{r7, lr}
 8010374:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8010376:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 801037a:	f000 f803 	bl	8010384 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 801037e:	4603      	mov	r3, r0
  }
 8010380:	4618      	mov	r0, r3
 8010382:	bd80      	pop	{r7, pc}

08010384 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8010384:	b590      	push	{r4, r7, lr}
 8010386:	b085      	sub	sp, #20
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801038c:	f107 030c 	add.w	r3, r7, #12
 8010390:	4618      	mov	r0, r3
 8010392:	f7ff ffd2 	bl	801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010396:	4604      	mov	r4, r0
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7fd f9b9 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801039e:	4603      	mov	r3, r0
 80103a0:	6023      	str	r3, [r4, #0]
    return retval;
 80103a2:	68fb      	ldr	r3, [r7, #12]
  }
 80103a4:	4618      	mov	r0, r3
 80103a6:	3714      	adds	r7, #20
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd90      	pop	{r4, r7, pc}

080103ac <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 80103ac:	b590      	push	{r4, r7, lr}
 80103ae:	b083      	sub	sp, #12
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
 80103b6:	1d3b      	adds	r3, r7, #4
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7ff ffbe 	bl	801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80103be:	4603      	mov	r3, r0
 80103c0:	681c      	ldr	r4, [r3, #0]
 80103c2:	463b      	mov	r3, r7
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7ff ffb8 	bl	801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80103ca:	4603      	mov	r3, r0
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4619      	mov	r1, r3
 80103d0:	4620      	mov	r0, r4
 80103d2:	f7fe f9f1 	bl	800e7b8 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 80103d6:	4603      	mov	r3, r0
 80103d8:	4618      	mov	r0, r3
 80103da:	f7ff fdfe 	bl	800ffda <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80103de:	4603      	mov	r3, r0
 80103e0:	4618      	mov	r0, r3
 80103e2:	370c      	adds	r7, #12
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd90      	pop	{r4, r7, pc}

080103e8 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 80103e8:	b590      	push	{r4, r7, lr}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
 80103f2:	1d3b      	adds	r3, r7, #4
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7ff ffa0 	bl	801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80103fa:	4603      	mov	r3, r0
 80103fc:	681c      	ldr	r4, [r3, #0]
 80103fe:	463b      	mov	r3, r7
 8010400:	4618      	mov	r0, r3
 8010402:	f7ff ff9a 	bl	801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010406:	4603      	mov	r3, r0
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4619      	mov	r1, r3
 801040c:	4620      	mov	r0, r4
 801040e:	f7fd f98a 	bl	800d726 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010412:	4603      	mov	r3, r0
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fde0 	bl	800ffda <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801041a:	4603      	mov	r3, r0
 801041c:	4618      	mov	r0, r3
 801041e:	370c      	adds	r7, #12
 8010420:	46bd      	mov	sp, r7
 8010422:	bd90      	pop	{r4, r7, pc}

08010424 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8010424:	b5b0      	push	{r4, r5, r7, lr}
 8010426:	b084      	sub	sp, #16
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 801042c:	1d3b      	adds	r3, r7, #4
 801042e:	4618      	mov	r0, r3
 8010430:	f7ff ff83 	bl	801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010434:	4603      	mov	r3, r0
 8010436:	681d      	ldr	r5, [r3, #0]
 8010438:	f107 030c 	add.w	r3, r7, #12
 801043c:	4618      	mov	r0, r3
 801043e:	f7fe f983 	bl	800e748 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8010442:	4604      	mov	r4, r0
 8010444:	4628      	mov	r0, r5
 8010446:	f000 f825 	bl	8010494 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801044a:	4603      	mov	r3, r0
 801044c:	6023      	str	r3, [r4, #0]
  return result;
 801044e:	68fb      	ldr	r3, [r7, #12]
}
 8010450:	4618      	mov	r0, r3
 8010452:	3710      	adds	r7, #16
 8010454:	46bd      	mov	sp, r7
 8010456:	bdb0      	pop	{r4, r5, r7, pc}

08010458 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	1d3b      	adds	r3, r7, #4
 8010462:	4618      	mov	r0, r3
 8010464:	f7ff ff69 	bl	801033a <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8010468:	4603      	mov	r3, r0
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	4618      	mov	r0, r3
 801046e:	f7fe fc72 	bl	800ed56 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8010472:	4603      	mov	r3, r0
 8010474:	4618      	mov	r0, r3
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}

0801047c <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 f811 	bl	80104ac <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 801048a:	4603      	mov	r3, r0
}
 801048c:	4618      	mov	r0, r3
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 f813 	bl	80104c8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 80104a2:	4603      	mov	r3, r0
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	3708      	adds	r7, #8
 80104a8:	46bd      	mov	sp, r7
 80104aa:	bd80      	pop	{r7, pc}

080104ac <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b082      	sub	sp, #8
 80104b0:	af00      	add	r7, sp, #0
 80104b2:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80104b4:	210c      	movs	r1, #12
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7fd f876 	bl	800d5a8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80104bc:	4603      	mov	r3, r0
  }
 80104be:	4618      	mov	r0, r3
 80104c0:	3708      	adds	r7, #8
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
	...

080104c8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b08a      	sub	sp, #40	; 0x28
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 80104d0:	f7fc ffb7 	bl	800d442 <_ZNSt14numeric_limitsIlE3minEv>
 80104d4:	4603      	mov	r3, r0
    const IntegerType min =
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fd f91a 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80104dc:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 80104de:	f7fc fa05 	bl	800c8ec <_ZNSt14numeric_limitsIlE3maxEv>
 80104e2:	4603      	mov	r3, r0
    const IntegerType max =
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fd f913 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80104ea:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80104ec:	2320      	movs	r3, #32
 80104ee:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80104f0:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 80104f4:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80104f6:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 80104fa:	f7fd f909 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80104fe:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 8010500:	4619      	mov	r1, r3
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f7fd f94e 	bl	800d7a4 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8010508:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801050a:	480f      	ldr	r0, [pc, #60]	; (8010548 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 801050c:	f7fd f900 	bl	800d710 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010510:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 8010512:	4619      	mov	r1, r3
 8010514:	6878      	ldr	r0, [r7, #4]
 8010516:	f7fd f923 	bl	800d760 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801051a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 801051c:	2105      	movs	r1, #5
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f7fe f965 	bl	800e7ee <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8010524:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8010526:	68fa      	ldr	r2, [r7, #12]
 8010528:	6a39      	ldr	r1, [r7, #32]
 801052a:	6978      	ldr	r0, [r7, #20]
 801052c:	f7fe f9a2 	bl	800e874 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8010530:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8010532:	68fa      	ldr	r2, [r7, #12]
 8010534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010536:	6938      	ldr	r0, [r7, #16]
 8010538:	f7fe f99c 	bl	800e874 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801053c:	60f8      	str	r0, [r7, #12]
    return result;
 801053e:	68fb      	ldr	r3, [r7, #12]
  }
 8010540:	4618      	mov	r0, r3
 8010542:	3728      	adds	r7, #40	; 0x28
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	fc000001 	.word	0xfc000001

0801054c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>:
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	607a      	str	r2, [r7, #4]
  if (current_location - bytes < tensor_boundary) {
 8010558:	4b18      	ldr	r3, [pc, #96]	; (80105bc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 801055a:	681a      	ldr	r2, [r3, #0]
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	425b      	negs	r3, r3
 8010560:	441a      	add	r2, r3
 8010562:	4b17      	ldr	r3, [pc, #92]	; (80105c0 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x74>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	429a      	cmp	r2, r3
 8010568:	d217      	bcs.n	801059a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x4e>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
 801056a:	68b8      	ldr	r0, [r7, #8]
 801056c:	f004 fb50 	bl	8014c10 <malloc>
 8010570:	4603      	mov	r3, r0
 8010572:	461a      	mov	r2, r3
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	601a      	str	r2, [r3, #0]
    if (*ptr == NULL) {
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d106      	bne.n	801058e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x42>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	4619      	mov	r1, r3
 8010584:	480f      	ldr	r0, [pc, #60]	; (80105c4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x78>)
 8010586:	f004 fefd 	bl	8015384 <iprintf>
      return kTfLiteError;
 801058a:	2301      	movs	r3, #1
 801058c:	e011      	b.n	80105b2 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
    }
    overflow_buffers.push_back(*ptr);
 801058e:	6879      	ldr	r1, [r7, #4]
 8010590:	480d      	ldr	r0, [pc, #52]	; (80105c8 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x7c>)
 8010592:	f000 faf2 	bl	8010b7a <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return kTfLiteOk;
 8010596:	2300      	movs	r3, #0
 8010598:	e00b      	b.n	80105b2 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
  }

  current_location -= bytes;
 801059a:	4b08      	ldr	r3, [pc, #32]	; (80105bc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 801059c:	681a      	ldr	r2, [r3, #0]
 801059e:	68bb      	ldr	r3, [r7, #8]
 80105a0:	425b      	negs	r3, r3
 80105a2:	4413      	add	r3, r2
 80105a4:	4a05      	ldr	r2, [pc, #20]	; (80105bc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 80105a6:	6013      	str	r3, [r2, #0]

  *ptr = current_location;
 80105a8:	4b04      	ldr	r3, [pc, #16]	; (80105bc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 80105aa:	681a      	ldr	r2, [r3, #0]
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80105b0:	2300      	movs	r3, #0
}
 80105b2:	4618      	mov	r0, r3
 80105b4:	3710      	adds	r7, #16
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	200009c8 	.word	0x200009c8
 80105c0:	200009c4 	.word	0x200009c4
 80105c4:	08018b2c 	.word	0x08018b2c
 80105c8:	20000dac 	.word	0x20000dac

080105cc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b088      	sub	sp, #32
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	617b      	str	r3, [r7, #20]

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
 80105dc:	6979      	ldr	r1, [r7, #20]
 80105de:	f107 0314 	add.w	r3, r7, #20
 80105e2:	3304      	adds	r3, #4
 80105e4:	461a      	mov	r2, r3
 80105e6:	68f8      	ldr	r0, [r7, #12]
 80105e8:	f7ff ffb0 	bl	801054c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>
 80105ec:	4603      	mov	r3, r0
 80105ee:	77fb      	strb	r3, [r7, #31]
  if (s != kTfLiteOk) {
 80105f0:	7ffb      	ldrb	r3, [r7, #31]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2e>
    return s;
 80105f6:	7ffb      	ldrb	r3, [r7, #31]
 80105f8:	e00e      	b.n	8010618 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x4c>
  }

  scratch_buffers.push_back(b);
 80105fa:	f107 0314 	add.w	r3, r7, #20
 80105fe:	4619      	mov	r1, r3
 8010600:	4807      	ldr	r0, [pc, #28]	; (8010620 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 8010602:	f000 faec 	bl	8010bde <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 8010606:	4806      	ldr	r0, [pc, #24]	; (8010620 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 8010608:	f000 fb0f 	bl	8010c2a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801060c:	4603      	mov	r3, r0
 801060e:	3b01      	subs	r3, #1
 8010610:	461a      	mov	r2, r3
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8010616:	2300      	movs	r3, #0
}
 8010618:	4618      	mov	r0, r3
 801061a:	3720      	adds	r7, #32
 801061c:	46bd      	mov	sp, r7
 801061e:	bd80      	pop	{r7, pc}
 8010620:	20000db8 	.word	0x20000db8

08010624 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
 801062c:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 801062e:	480d      	ldr	r0, [pc, #52]	; (8010664 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8010630:	f000 fafb 	bl	8010c2a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8010634:	4603      	mov	r3, r0
 8010636:	3b01      	subs	r3, #1
 8010638:	683a      	ldr	r2, [r7, #0]
 801063a:	429a      	cmp	r2, r3
 801063c:	bfcc      	ite	gt
 801063e:	2301      	movgt	r3, #1
 8010640:	2300      	movle	r3, #0
 8010642:	b2db      	uxtb	r3, r3
 8010644:	2b00      	cmp	r3, #0
 8010646:	d001      	beq.n	801064c <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 8010648:	2300      	movs	r3, #0
 801064a:	e006      	b.n	801065a <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	4619      	mov	r1, r3
 8010650:	4804      	ldr	r0, [pc, #16]	; (8010664 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8010652:	f000 fafb 	bl	8010c4c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 8010656:	4603      	mov	r3, r0
 8010658:	685b      	ldr	r3, [r3, #4]
}
 801065a:	4618      	mov	r0, r3
 801065c:	3708      	adds	r7, #8
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop
 8010664:	20000db8 	.word	0x20000db8

08010668 <_Z18trained_model_initPFPvjjE>:
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8010668:	b5b0      	push	{r4, r5, r7, lr}
 801066a:	b08a      	sub	sp, #40	; 0x28
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2190      	movs	r1, #144	; 0x90
 8010674:	2010      	movs	r0, #16
 8010676:	4798      	blx	r3
 8010678:	4602      	mov	r2, r0
 801067a:	4b80      	ldr	r3, [pc, #512]	; (801087c <_Z18trained_model_initPFPvjjE+0x214>)
 801067c:	601a      	str	r2, [r3, #0]
  if (!tensor_arena) {
 801067e:	4b7f      	ldr	r3, [pc, #508]	; (801087c <_Z18trained_model_initPFPvjjE+0x214>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d104      	bne.n	8010690 <_Z18trained_model_initPFPvjjE+0x28>
    printf("ERR: failed to allocate tensor arena\n");
 8010686:	487e      	ldr	r0, [pc, #504]	; (8010880 <_Z18trained_model_initPFPvjjE+0x218>)
 8010688:	f004 fef0 	bl	801546c <puts>
    return kTfLiteError;
 801068c:	2301      	movs	r3, #1
 801068e:	e1cb      	b.n	8010a28 <_Z18trained_model_initPFPvjjE+0x3c0>
  }
#endif
  tensor_boundary = tensor_arena;
 8010690:	4b7a      	ldr	r3, [pc, #488]	; (801087c <_Z18trained_model_initPFPvjjE+0x214>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4a7b      	ldr	r2, [pc, #492]	; (8010884 <_Z18trained_model_initPFPvjjE+0x21c>)
 8010696:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8010698:	4b78      	ldr	r3, [pc, #480]	; (801087c <_Z18trained_model_initPFPvjjE+0x214>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	3390      	adds	r3, #144	; 0x90
 801069e:	4a7a      	ldr	r2, [pc, #488]	; (8010888 <_Z18trained_model_initPFPvjjE+0x220>)
 80106a0:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 80106a2:	4b7a      	ldr	r3, [pc, #488]	; (801088c <_Z18trained_model_initPFPvjjE+0x224>)
 80106a4:	4a7a      	ldr	r2, [pc, #488]	; (8010890 <_Z18trained_model_initPFPvjjE+0x228>)
 80106a6:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 80106a8:	4b78      	ldr	r3, [pc, #480]	; (801088c <_Z18trained_model_initPFPvjjE+0x224>)
 80106aa:	4a7a      	ldr	r2, [pc, #488]	; (8010894 <_Z18trained_model_initPFPvjjE+0x22c>)
 80106ac:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 80106ae:	4b77      	ldr	r3, [pc, #476]	; (801088c <_Z18trained_model_initPFPvjjE+0x224>)
 80106b0:	4a79      	ldr	r2, [pc, #484]	; (8010898 <_Z18trained_model_initPFPvjjE+0x230>)
 80106b2:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.tensors = tflTensors;
 80106b4:	4b75      	ldr	r3, [pc, #468]	; (801088c <_Z18trained_model_initPFPvjjE+0x224>)
 80106b6:	4a79      	ldr	r2, [pc, #484]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 80106b8:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 11;
 80106ba:	4b74      	ldr	r3, [pc, #464]	; (801088c <_Z18trained_model_initPFPvjjE+0x224>)
 80106bc:	220b      	movs	r2, #11
 80106be:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 11; ++i) {
 80106c0:	2300      	movs	r3, #0
 80106c2:	627b      	str	r3, [r7, #36]	; 0x24
 80106c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106c6:	2b0a      	cmp	r3, #10
 80106c8:	f200 80cd 	bhi.w	8010866 <_Z18trained_model_initPFPvjjE+0x1fe>
    tflTensors[i].type = tensorData[i].type;
 80106cc:	4974      	ldr	r1, [pc, #464]	; (80108a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80106ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106d0:	4613      	mov	r3, r2
 80106d2:	005b      	lsls	r3, r3, #1
 80106d4:	4413      	add	r3, r2
 80106d6:	00db      	lsls	r3, r3, #3
 80106d8:	440b      	add	r3, r1
 80106da:	3301      	adds	r3, #1
 80106dc:	7819      	ldrb	r1, [r3, #0]
 80106de:	4a6f      	ldr	r2, [pc, #444]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 80106e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e2:	019b      	lsls	r3, r3, #6
 80106e4:	4413      	add	r3, r2
 80106e6:	460a      	mov	r2, r1
 80106e8:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 80106ea:	4a6c      	ldr	r2, [pc, #432]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 80106ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ee:	019b      	lsls	r3, r3, #6
 80106f0:	4413      	add	r3, r2
 80106f2:	332d      	adds	r3, #45	; 0x2d
 80106f4:	2200      	movs	r2, #0
 80106f6:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 80106f8:	4969      	ldr	r1, [pc, #420]	; (80108a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80106fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106fc:	4613      	mov	r3, r2
 80106fe:	005b      	lsls	r3, r3, #1
 8010700:	4413      	add	r3, r2
 8010702:	00db      	lsls	r3, r3, #3
 8010704:	440b      	add	r3, r1
 8010706:	7819      	ldrb	r1, [r3, #0]
 8010708:	4a64      	ldr	r2, [pc, #400]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 801070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801070c:	019b      	lsls	r3, r3, #6
 801070e:	4413      	add	r3, r2
 8010710:	3314      	adds	r3, #20
 8010712:	460a      	mov	r2, r1
 8010714:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 8010716:	4962      	ldr	r1, [pc, #392]	; (80108a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8010718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801071a:	4613      	mov	r3, r2
 801071c:	005b      	lsls	r3, r3, #1
 801071e:	4413      	add	r3, r2
 8010720:	00db      	lsls	r3, r3, #3
 8010722:	440b      	add	r3, r1
 8010724:	330c      	adds	r3, #12
 8010726:	681a      	ldr	r2, [r3, #0]
 8010728:	495c      	ldr	r1, [pc, #368]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 801072a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801072c:	019b      	lsls	r3, r3, #6
 801072e:	440b      	add	r3, r1
 8010730:	3318      	adds	r3, #24
 8010732:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8010734:	495a      	ldr	r1, [pc, #360]	; (80108a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8010736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010738:	4613      	mov	r3, r2
 801073a:	005b      	lsls	r3, r3, #1
 801073c:	4413      	add	r3, r2
 801073e:	00db      	lsls	r3, r3, #3
 8010740:	440b      	add	r3, r1
 8010742:	3308      	adds	r3, #8
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	4955      	ldr	r1, [pc, #340]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 8010748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074a:	019b      	lsls	r3, r3, #6
 801074c:	440b      	add	r3, r1
 801074e:	3308      	adds	r3, #8
 8010750:	601a      	str	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8010752:	4a52      	ldr	r2, [pc, #328]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 8010754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010756:	019b      	lsls	r3, r3, #6
 8010758:	4413      	add	r3, r2
 801075a:	3314      	adds	r3, #20
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	2b02      	cmp	r3, #2
 8010760:	d115      	bne.n	801078e <_Z18trained_model_initPFPvjjE+0x126>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8010762:	494f      	ldr	r1, [pc, #316]	; (80108a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8010764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010766:	4613      	mov	r3, r2
 8010768:	005b      	lsls	r3, r3, #1
 801076a:	4413      	add	r3, r2
 801076c:	00db      	lsls	r3, r3, #3
 801076e:	440b      	add	r3, r1
 8010770:	3304      	adds	r3, #4
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	461a      	mov	r2, r3
 8010776:	4b41      	ldr	r3, [pc, #260]	; (801087c <_Z18trained_model_initPFPvjjE+0x214>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	4413      	add	r3, r2
 801077c:	61bb      	str	r3, [r7, #24]

     tflTensors[i].data.data =  start;
 801077e:	4a47      	ldr	r2, [pc, #284]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	019b      	lsls	r3, r3, #6
 8010784:	4413      	add	r3, r2
 8010786:	3304      	adds	r3, #4
 8010788:	69ba      	ldr	r2, [r7, #24]
 801078a:	601a      	str	r2, [r3, #0]
 801078c:	e00e      	b.n	80107ac <_Z18trained_model_initPFPvjjE+0x144>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 801078e:	4944      	ldr	r1, [pc, #272]	; (80108a0 <_Z18trained_model_initPFPvjjE+0x238>)
 8010790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010792:	4613      	mov	r3, r2
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	4413      	add	r3, r2
 8010798:	00db      	lsls	r3, r3, #3
 801079a:	440b      	add	r3, r1
 801079c:	3304      	adds	r3, #4
 801079e:	681a      	ldr	r2, [r3, #0]
 80107a0:	493e      	ldr	r1, [pc, #248]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 80107a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a4:	019b      	lsls	r3, r3, #6
 80107a6:	440b      	add	r3, r1
 80107a8:	3304      	adds	r3, #4
 80107aa:	601a      	str	r2, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 80107ac:	4a3b      	ldr	r2, [pc, #236]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 80107ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b0:	019b      	lsls	r3, r3, #6
 80107b2:	4413      	add	r3, r2
 80107b4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80107b8:	4939      	ldr	r1, [pc, #228]	; (80108a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80107ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107bc:	4613      	mov	r3, r2
 80107be:	005b      	lsls	r3, r3, #1
 80107c0:	4413      	add	r3, r2
 80107c2:	00db      	lsls	r3, r3, #3
 80107c4:	440b      	add	r3, r1
 80107c6:	f103 0210 	add.w	r2, r3, #16
 80107ca:	4603      	mov	r3, r0
 80107cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80107d0:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 80107d4:	4a31      	ldr	r2, [pc, #196]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 80107d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d8:	019b      	lsls	r3, r3, #6
 80107da:	4413      	add	r3, r2
 80107dc:	3330      	adds	r3, #48	; 0x30
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	d11b      	bne.n	801081c <_Z18trained_model_initPFPvjjE+0x1b4>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 80107e4:	492e      	ldr	r1, [pc, #184]	; (80108a0 <_Z18trained_model_initPFPvjjE+0x238>)
 80107e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107e8:	4613      	mov	r3, r2
 80107ea:	005b      	lsls	r3, r3, #1
 80107ec:	4413      	add	r3, r2
 80107ee:	00db      	lsls	r3, r3, #3
 80107f0:	440b      	add	r3, r1
 80107f2:	3314      	adds	r3, #20
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	617b      	str	r3, [r7, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	685a      	ldr	r2, [r3, #4]
 80107fe:	4927      	ldr	r1, [pc, #156]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 8010800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010802:	019b      	lsls	r3, r3, #6
 8010804:	440b      	add	r3, r1
 8010806:	330c      	adds	r3, #12
 8010808:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	685b      	ldr	r3, [r3, #4]
 801080e:	685a      	ldr	r2, [r3, #4]
 8010810:	4922      	ldr	r1, [pc, #136]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 8010812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010814:	019b      	lsls	r3, r3, #6
 8010816:	440b      	add	r3, r1
 8010818:	3310      	adds	r3, #16
 801081a:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 801081c:	4a1f      	ldr	r2, [pc, #124]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 801081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010820:	019b      	lsls	r3, r3, #6
 8010822:	4413      	add	r3, r2
 8010824:	3314      	adds	r3, #20
 8010826:	781b      	ldrb	r3, [r3, #0]
 8010828:	2b02      	cmp	r3, #2
 801082a:	d118      	bne.n	801085e <_Z18trained_model_initPFPvjjE+0x1f6>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 801082c:	4a1b      	ldr	r2, [pc, #108]	; (801089c <_Z18trained_model_initPFPvjjE+0x234>)
 801082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010830:	019b      	lsls	r3, r3, #6
 8010832:	4413      	add	r3, r2
 8010834:	3304      	adds	r3, #4
 8010836:	6819      	ldr	r1, [r3, #0]
 8010838:	4819      	ldr	r0, [pc, #100]	; (80108a0 <_Z18trained_model_initPFPvjjE+0x238>)
 801083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801083c:	4613      	mov	r3, r2
 801083e:	005b      	lsls	r3, r3, #1
 8010840:	4413      	add	r3, r2
 8010842:	00db      	lsls	r3, r3, #3
 8010844:	4403      	add	r3, r0
 8010846:	330c      	adds	r3, #12
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	440b      	add	r3, r1
 801084c:	613b      	str	r3, [r7, #16]
      if (data_end_ptr > tensor_boundary) {
 801084e:	4b0d      	ldr	r3, [pc, #52]	; (8010884 <_Z18trained_model_initPFPvjjE+0x21c>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	693a      	ldr	r2, [r7, #16]
 8010854:	429a      	cmp	r2, r3
 8010856:	d902      	bls.n	801085e <_Z18trained_model_initPFPvjjE+0x1f6>
        tensor_boundary = data_end_ptr;
 8010858:	4a0a      	ldr	r2, [pc, #40]	; (8010884 <_Z18trained_model_initPFPvjjE+0x21c>)
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 11; ++i) {
 801085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010860:	3301      	adds	r3, #1
 8010862:	627b      	str	r3, [r7, #36]	; 0x24
 8010864:	e72e      	b.n	80106c4 <_Z18trained_model_initPFPvjjE+0x5c>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 8010866:	4b07      	ldr	r3, [pc, #28]	; (8010884 <_Z18trained_model_initPFPvjjE+0x21c>)
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	4b07      	ldr	r3, [pc, #28]	; (8010888 <_Z18trained_model_initPFPvjjE+0x220>)
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	429a      	cmp	r2, r3
 8010870:	d91a      	bls.n	80108a8 <_Z18trained_model_initPFPvjjE+0x240>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8010872:	480c      	ldr	r0, [pc, #48]	; (80108a4 <_Z18trained_model_initPFPvjjE+0x23c>)
 8010874:	f004 fdfa 	bl	801546c <puts>
    return kTfLiteError;
 8010878:	2301      	movs	r3, #1
 801087a:	e0d5      	b.n	8010a28 <_Z18trained_model_initPFPvjjE+0x3c0>
 801087c:	200009c0 	.word	0x200009c0
 8010880:	08018b64 	.word	0x08018b64
 8010884:	200009c4 	.word	0x200009c4
 8010888:	200009c8 	.word	0x200009c8
 801088c:	200009cc 	.word	0x200009cc
 8010890:	0801054d 	.word	0x0801054d
 8010894:	080105cd 	.word	0x080105cd
 8010898:	08010625 	.word	0x08010625
 801089c:	20000a1c 	.word	0x20000a1c
 80108a0:	2000067c 	.word	0x2000067c
 80108a4:	08018b8c 	.word	0x08018b8c
  }
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
 80108a8:	f7fd fef2 	bl	800e690 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 80108ac:	4602      	mov	r2, r0
 80108ae:	4b60      	ldr	r3, [pc, #384]	; (8010a30 <_Z18trained_model_initPFPvjjE+0x3c8>)
 80108b0:	461c      	mov	r4, r3
 80108b2:	4615      	mov	r5, r2
 80108b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108b8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80108bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();
 80108c0:	f7ff f822 	bl	800f908 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
 80108c4:	4602      	mov	r2, r0
 80108c6:	4b5a      	ldr	r3, [pc, #360]	; (8010a30 <_Z18trained_model_initPFPvjjE+0x3c8>)
 80108c8:	f103 0420 	add.w	r4, r3, #32
 80108cc:	4615      	mov	r5, r2
 80108ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80108d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80108d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80108d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 4; ++i) {
 80108da:	2300      	movs	r3, #0
 80108dc:	623b      	str	r3, [r7, #32]
 80108de:	6a3b      	ldr	r3, [r7, #32]
 80108e0:	2b03      	cmp	r3, #3
 80108e2:	d86e      	bhi.n	80109c2 <_Z18trained_model_initPFPvjjE+0x35a>
    tflNodes[i].inputs = nodeData[i].inputs;
 80108e4:	4a53      	ldr	r2, [pc, #332]	; (8010a34 <_Z18trained_model_initPFPvjjE+0x3cc>)
 80108e6:	6a3b      	ldr	r3, [r7, #32]
 80108e8:	011b      	lsls	r3, r3, #4
 80108ea:	4413      	add	r3, r2
 80108ec:	6819      	ldr	r1, [r3, #0]
 80108ee:	4852      	ldr	r0, [pc, #328]	; (8010a38 <_Z18trained_model_initPFPvjjE+0x3d0>)
 80108f0:	6a3a      	ldr	r2, [r7, #32]
 80108f2:	4613      	mov	r3, r2
 80108f4:	00db      	lsls	r3, r3, #3
 80108f6:	4413      	add	r3, r2
 80108f8:	009b      	lsls	r3, r3, #2
 80108fa:	4403      	add	r3, r0
 80108fc:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 80108fe:	4a4d      	ldr	r2, [pc, #308]	; (8010a34 <_Z18trained_model_initPFPvjjE+0x3cc>)
 8010900:	6a3b      	ldr	r3, [r7, #32]
 8010902:	011b      	lsls	r3, r3, #4
 8010904:	4413      	add	r3, r2
 8010906:	3304      	adds	r3, #4
 8010908:	6819      	ldr	r1, [r3, #0]
 801090a:	484b      	ldr	r0, [pc, #300]	; (8010a38 <_Z18trained_model_initPFPvjjE+0x3d0>)
 801090c:	6a3a      	ldr	r2, [r7, #32]
 801090e:	4613      	mov	r3, r2
 8010910:	00db      	lsls	r3, r3, #3
 8010912:	4413      	add	r3, r2
 8010914:	009b      	lsls	r3, r3, #2
 8010916:	4403      	add	r3, r0
 8010918:	3304      	adds	r3, #4
 801091a:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801091c:	4a45      	ldr	r2, [pc, #276]	; (8010a34 <_Z18trained_model_initPFPvjjE+0x3cc>)
 801091e:	6a3b      	ldr	r3, [r7, #32]
 8010920:	011b      	lsls	r3, r3, #4
 8010922:	4413      	add	r3, r2
 8010924:	3308      	adds	r3, #8
 8010926:	6819      	ldr	r1, [r3, #0]
 8010928:	4843      	ldr	r0, [pc, #268]	; (8010a38 <_Z18trained_model_initPFPvjjE+0x3d0>)
 801092a:	6a3a      	ldr	r2, [r7, #32]
 801092c:	4613      	mov	r3, r2
 801092e:	00db      	lsls	r3, r3, #3
 8010930:	4413      	add	r3, r2
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4403      	add	r3, r0
 8010936:	3314      	adds	r3, #20
 8010938:	6019      	str	r1, [r3, #0]
    tflNodes[i].custom_initial_data = nullptr;
 801093a:	493f      	ldr	r1, [pc, #252]	; (8010a38 <_Z18trained_model_initPFPvjjE+0x3d0>)
 801093c:	6a3a      	ldr	r2, [r7, #32]
 801093e:	4613      	mov	r3, r2
 8010940:	00db      	lsls	r3, r3, #3
 8010942:	4413      	add	r3, r2
 8010944:	009b      	lsls	r3, r3, #2
 8010946:	440b      	add	r3, r1
 8010948:	3318      	adds	r3, #24
 801094a:	2200      	movs	r2, #0
 801094c:	601a      	str	r2, [r3, #0]
    tflNodes[i].custom_initial_data_size = 0;
 801094e:	493a      	ldr	r1, [pc, #232]	; (8010a38 <_Z18trained_model_initPFPvjjE+0x3d0>)
 8010950:	6a3a      	ldr	r2, [r7, #32]
 8010952:	4613      	mov	r3, r2
 8010954:	00db      	lsls	r3, r3, #3
 8010956:	4413      	add	r3, r2
 8010958:	009b      	lsls	r3, r3, #2
 801095a:	440b      	add	r3, r1
 801095c:	331c      	adds	r3, #28
 801095e:	2200      	movs	r2, #0
 8010960:	601a      	str	r2, [r3, #0]
    if (registrations[nodeData[i].used_op_index].init) {
 8010962:	4a34      	ldr	r2, [pc, #208]	; (8010a34 <_Z18trained_model_initPFPvjjE+0x3cc>)
 8010964:	6a3b      	ldr	r3, [r7, #32]
 8010966:	011b      	lsls	r3, r3, #4
 8010968:	4413      	add	r3, r2
 801096a:	330c      	adds	r3, #12
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	4a30      	ldr	r2, [pc, #192]	; (8010a30 <_Z18trained_model_initPFPvjjE+0x3c8>)
 8010970:	015b      	lsls	r3, r3, #5
 8010972:	4413      	add	r3, r2
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d01f      	beq.n	80109ba <_Z18trained_model_initPFPvjjE+0x352>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 801097a:	4a2e      	ldr	r2, [pc, #184]	; (8010a34 <_Z18trained_model_initPFPvjjE+0x3cc>)
 801097c:	6a3b      	ldr	r3, [r7, #32]
 801097e:	011b      	lsls	r3, r3, #4
 8010980:	4413      	add	r3, r2
 8010982:	330c      	adds	r3, #12
 8010984:	781b      	ldrb	r3, [r3, #0]
 8010986:	4a2a      	ldr	r2, [pc, #168]	; (8010a30 <_Z18trained_model_initPFPvjjE+0x3c8>)
 8010988:	015b      	lsls	r3, r3, #5
 801098a:	4413      	add	r3, r2
 801098c:	681c      	ldr	r4, [r3, #0]
 801098e:	492a      	ldr	r1, [pc, #168]	; (8010a38 <_Z18trained_model_initPFPvjjE+0x3d0>)
 8010990:	6a3a      	ldr	r2, [r7, #32]
 8010992:	4613      	mov	r3, r2
 8010994:	00db      	lsls	r3, r3, #3
 8010996:	4413      	add	r3, r2
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	440b      	add	r3, r1
 801099c:	3314      	adds	r3, #20
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	2200      	movs	r2, #0
 80109a2:	4619      	mov	r1, r3
 80109a4:	4825      	ldr	r0, [pc, #148]	; (8010a3c <_Z18trained_model_initPFPvjjE+0x3d4>)
 80109a6:	47a0      	blx	r4
 80109a8:	4923      	ldr	r1, [pc, #140]	; (8010a38 <_Z18trained_model_initPFPvjjE+0x3d0>)
 80109aa:	6a3a      	ldr	r2, [r7, #32]
 80109ac:	4613      	mov	r3, r2
 80109ae:	00db      	lsls	r3, r3, #3
 80109b0:	4413      	add	r3, r2
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	440b      	add	r3, r1
 80109b6:	3310      	adds	r3, #16
 80109b8:	6018      	str	r0, [r3, #0]
  for(size_t i = 0; i < 4; ++i) {
 80109ba:	6a3b      	ldr	r3, [r7, #32]
 80109bc:	3301      	adds	r3, #1
 80109be:	623b      	str	r3, [r7, #32]
 80109c0:	e78d      	b.n	80108de <_Z18trained_model_initPFPvjjE+0x276>
    }
  }
  for(size_t i = 0; i < 4; ++i) {
 80109c2:	2300      	movs	r3, #0
 80109c4:	61fb      	str	r3, [r7, #28]
 80109c6:	69fb      	ldr	r3, [r7, #28]
 80109c8:	2b03      	cmp	r3, #3
 80109ca:	d82c      	bhi.n	8010a26 <_Z18trained_model_initPFPvjjE+0x3be>
    if (registrations[nodeData[i].used_op_index].prepare) {
 80109cc:	4a19      	ldr	r2, [pc, #100]	; (8010a34 <_Z18trained_model_initPFPvjjE+0x3cc>)
 80109ce:	69fb      	ldr	r3, [r7, #28]
 80109d0:	011b      	lsls	r3, r3, #4
 80109d2:	4413      	add	r3, r2
 80109d4:	330c      	adds	r3, #12
 80109d6:	781b      	ldrb	r3, [r3, #0]
 80109d8:	4a15      	ldr	r2, [pc, #84]	; (8010a30 <_Z18trained_model_initPFPvjjE+0x3c8>)
 80109da:	015b      	lsls	r3, r3, #5
 80109dc:	4413      	add	r3, r2
 80109de:	3308      	adds	r3, #8
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d01b      	beq.n	8010a1e <_Z18trained_model_initPFPvjjE+0x3b6>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 80109e6:	4a13      	ldr	r2, [pc, #76]	; (8010a34 <_Z18trained_model_initPFPvjjE+0x3cc>)
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	011b      	lsls	r3, r3, #4
 80109ec:	4413      	add	r3, r2
 80109ee:	330c      	adds	r3, #12
 80109f0:	781b      	ldrb	r3, [r3, #0]
 80109f2:	4a0f      	ldr	r2, [pc, #60]	; (8010a30 <_Z18trained_model_initPFPvjjE+0x3c8>)
 80109f4:	015b      	lsls	r3, r3, #5
 80109f6:	4413      	add	r3, r2
 80109f8:	3308      	adds	r3, #8
 80109fa:	681c      	ldr	r4, [r3, #0]
 80109fc:	69fa      	ldr	r2, [r7, #28]
 80109fe:	4613      	mov	r3, r2
 8010a00:	00db      	lsls	r3, r3, #3
 8010a02:	4413      	add	r3, r2
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	4a0c      	ldr	r2, [pc, #48]	; (8010a38 <_Z18trained_model_initPFPvjjE+0x3d0>)
 8010a08:	4413      	add	r3, r2
 8010a0a:	4619      	mov	r1, r3
 8010a0c:	480b      	ldr	r0, [pc, #44]	; (8010a3c <_Z18trained_model_initPFPvjjE+0x3d4>)
 8010a0e:	47a0      	blx	r4
 8010a10:	4603      	mov	r3, r0
 8010a12:	73fb      	strb	r3, [r7, #15]
      if (status != kTfLiteOk) {
 8010a14:	7bfb      	ldrb	r3, [r7, #15]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d001      	beq.n	8010a1e <_Z18trained_model_initPFPvjjE+0x3b6>
        return status;
 8010a1a:	7bfb      	ldrb	r3, [r7, #15]
 8010a1c:	e004      	b.n	8010a28 <_Z18trained_model_initPFPvjjE+0x3c0>
  for(size_t i = 0; i < 4; ++i) {
 8010a1e:	69fb      	ldr	r3, [r7, #28]
 8010a20:	3301      	adds	r3, #1
 8010a22:	61fb      	str	r3, [r7, #28]
 8010a24:	e7cf      	b.n	80109c6 <_Z18trained_model_initPFPvjjE+0x35e>
      }
    }
  }
  return kTfLiteOk;
 8010a26:	2300      	movs	r3, #0
}
 8010a28:	4618      	mov	r0, r3
 8010a2a:	3728      	adds	r7, #40	; 0x28
 8010a2c:	46bd      	mov	sp, r7
 8010a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8010a30:	20000cdc 	.word	0x20000cdc
 8010a34:	080367d8 	.word	0x080367d8
 8010a38:	20000d1c 	.word	0x20000d1c
 8010a3c:	200009cc 	.word	0x200009cc

08010a40 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 8010a48:	4b05      	ldr	r3, [pc, #20]	; (8010a60 <_Z19trained_model_inputi+0x20>)
 8010a4a:	689a      	ldr	r2, [r3, #8]
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	019b      	lsls	r3, r3, #6
 8010a50:	4413      	add	r3, r2
}
 8010a52:	4618      	mov	r0, r3
 8010a54:	370c      	adds	r7, #12
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop
 8010a60:	200009cc 	.word	0x200009cc

08010a64 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 8010a6c:	4b05      	ldr	r3, [pc, #20]	; (8010a84 <_Z20trained_model_outputi+0x20>)
 8010a6e:	689a      	ldr	r2, [r3, #8]
 8010a70:	230a      	movs	r3, #10
 8010a72:	019b      	lsls	r3, r3, #6
 8010a74:	4413      	add	r3, r2
}
 8010a76:	4618      	mov	r0, r3
 8010a78:	370c      	adds	r7, #12
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a80:	4770      	bx	lr
 8010a82:	bf00      	nop
 8010a84:	200009cc 	.word	0x200009cc

08010a88 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 8010a88:	b590      	push	{r4, r7, lr}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 4; ++i) {
 8010a8e:	2300      	movs	r3, #0
 8010a90:	607b      	str	r3, [r7, #4]
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2b03      	cmp	r3, #3
 8010a96:	d81f      	bhi.n	8010ad8 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 8010a98:	4a12      	ldr	r2, [pc, #72]	; (8010ae4 <_Z20trained_model_invokev+0x5c>)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	011b      	lsls	r3, r3, #4
 8010a9e:	4413      	add	r3, r2
 8010aa0:	330c      	adds	r3, #12
 8010aa2:	781b      	ldrb	r3, [r3, #0]
 8010aa4:	4a10      	ldr	r2, [pc, #64]	; (8010ae8 <_Z20trained_model_invokev+0x60>)
 8010aa6:	015b      	lsls	r3, r3, #5
 8010aa8:	4413      	add	r3, r2
 8010aaa:	330c      	adds	r3, #12
 8010aac:	681c      	ldr	r4, [r3, #0]
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	4613      	mov	r3, r2
 8010ab2:	00db      	lsls	r3, r3, #3
 8010ab4:	4413      	add	r3, r2
 8010ab6:	009b      	lsls	r3, r3, #2
 8010ab8:	4a0c      	ldr	r2, [pc, #48]	; (8010aec <_Z20trained_model_invokev+0x64>)
 8010aba:	4413      	add	r3, r2
 8010abc:	4619      	mov	r1, r3
 8010abe:	480c      	ldr	r0, [pc, #48]	; (8010af0 <_Z20trained_model_invokev+0x68>)
 8010ac0:	47a0      	blx	r4
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8010ac6:	78fb      	ldrb	r3, [r7, #3]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d001      	beq.n	8010ad0 <_Z20trained_model_invokev+0x48>
      return status;
 8010acc:	78fb      	ldrb	r3, [r7, #3]
 8010ace:	e004      	b.n	8010ada <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 4; ++i) {
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	3301      	adds	r3, #1
 8010ad4:	607b      	str	r3, [r7, #4]
 8010ad6:	e7dc      	b.n	8010a92 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8010ad8:	2300      	movs	r3, #0
}
 8010ada:	4618      	mov	r0, r3
 8010adc:	370c      	adds	r7, #12
 8010ade:	46bd      	mov	sp, r7
 8010ae0:	bd90      	pop	{r4, r7, pc}
 8010ae2:	bf00      	nop
 8010ae4:	080367d8 	.word	0x080367d8
 8010ae8:	20000cdc 	.word	0x20000cdc
 8010aec:	20000d1c 	.word	0x20000d1c
 8010af0:	200009cc 	.word	0x200009cc

08010af4 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8010afc:	4b15      	ldr	r3, [pc, #84]	; (8010b54 <_Z19trained_model_resetPFvPvE+0x60>)
 8010afe:	681a      	ldr	r2, [r3, #0]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	4610      	mov	r0, r2
 8010b04:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 8010b06:	4814      	ldr	r0, [pc, #80]	; (8010b58 <_Z19trained_model_resetPFvPvE+0x64>)
 8010b08:	f000 f8b0 	bl	8010c6c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	60fb      	str	r3, [r7, #12]
 8010b10:	4812      	ldr	r0, [pc, #72]	; (8010b5c <_Z19trained_model_resetPFvPvE+0x68>)
 8010b12:	f000 f8b9 	bl	8010c88 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8010b16:	4602      	mov	r2, r0
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	bf34      	ite	cc
 8010b1e:	2301      	movcc	r3, #1
 8010b20:	2300      	movcs	r3, #0
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d00c      	beq.n	8010b42 <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 8010b28:	68f9      	ldr	r1, [r7, #12]
 8010b2a:	480c      	ldr	r0, [pc, #48]	; (8010b5c <_Z19trained_model_resetPFvPvE+0x68>)
 8010b2c:	f000 f8bd 	bl	8010caa <_ZNSt6vectorIPvSaIS0_EEixEj>
 8010b30:	4603      	mov	r3, r0
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	4618      	mov	r0, r3
 8010b36:	f004 f873 	bl	8014c20 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	60fb      	str	r3, [r7, #12]
 8010b40:	e7e6      	b.n	8010b10 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 8010b42:	4806      	ldr	r0, [pc, #24]	; (8010b5c <_Z19trained_model_resetPFvPvE+0x68>)
 8010b44:	f000 f8c1 	bl	8010cca <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 8010b48:	2300      	movs	r3, #0
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3710      	adds	r7, #16
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
 8010b52:	bf00      	nop
 8010b54:	200009c0 	.word	0x200009c0
 8010b58:	20000db8 	.word	0x20000db8
 8010b5c:	20000dac 	.word	0x20000dac

08010b60 <_ZNSt6vectorIPvSaIS0_EEC1Ev>:
      vector()
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b082      	sub	sp, #8
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f000 f8c7 	bl	8010cfe <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	4618      	mov	r0, r3
 8010b74:	3708      	adds	r7, #8
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b082      	sub	sp, #8
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
 8010b82:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	685a      	ldr	r2, [r3, #4]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	689b      	ldr	r3, [r3, #8]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d00c      	beq.n	8010baa <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	683a      	ldr	r2, [r7, #0]
 8010b98:	4619      	mov	r1, r3
 8010b9a:	f000 f8e2 	bl	8010d62 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	1d1a      	adds	r2, r3, #4
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	605a      	str	r2, [r3, #4]
      }
 8010ba8:	e008      	b.n	8010bbc <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f000 f8ec 	bl	8010d88 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	683a      	ldr	r2, [r7, #0]
 8010bb4:	4619      	mov	r1, r3
 8010bb6:	6878      	ldr	r0, [r7, #4]
 8010bb8:	f000 f8f8 	bl	8010dac <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8010bbc:	bf00      	nop
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector()
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b082      	sub	sp, #8
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f000 f984 	bl	8010edc <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b082      	sub	sp, #8
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	685a      	ldr	r2, [r3, #4]
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	689b      	ldr	r3, [r3, #8]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d00d      	beq.n	8010c10 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	683a      	ldr	r2, [r7, #0]
 8010bfc:	4619      	mov	r1, r3
 8010bfe:	f000 f99f 	bl	8010f40 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	f103 0208 	add.w	r2, r3, #8
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	605a      	str	r2, [r3, #4]
      }
 8010c0e:	e008      	b.n	8010c22 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f000 f9a8 	bl	8010f66 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 8010c16:	4603      	mov	r3, r0
 8010c18:	683a      	ldr	r2, [r7, #0]
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f000 f9b3 	bl	8010f88 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8010c22:	bf00      	nop
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}

08010c2a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8010c2a:	b480      	push	{r7}
 8010c2c:	b083      	sub	sp, #12
 8010c2e:	af00      	add	r7, sp, #0
 8010c30:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	685b      	ldr	r3, [r3, #4]
 8010c36:	461a      	mov	r2, r3
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	1ad3      	subs	r3, r2, r3
 8010c3e:	10db      	asrs	r3, r3, #3
 8010c40:	4618      	mov	r0, r3
 8010c42:	370c      	adds	r7, #12
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8010c4c:	b480      	push	{r7}
 8010c4e:	b083      	sub	sp, #12
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
 8010c54:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681a      	ldr	r2, [r3, #0]
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	00db      	lsls	r3, r3, #3
 8010c5e:	4413      	add	r3, r2
      }
 8010c60:	4618      	mov	r0, r3
 8010c62:	370c      	adds	r7, #12
 8010c64:	46bd      	mov	sp, r7
 8010c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c6a:	4770      	bx	lr

08010c6c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b082      	sub	sp, #8
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	4619      	mov	r1, r3
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f000 fa10 	bl	80110a0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 8010c80:	bf00      	nop
 8010c82:	3708      	adds	r7, #8
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8010c88:	b480      	push	{r7}
 8010c8a:	b083      	sub	sp, #12
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	685b      	ldr	r3, [r3, #4]
 8010c94:	461a      	mov	r2, r3
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	1ad3      	subs	r3, r2, r3
 8010c9c:	109b      	asrs	r3, r3, #2
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	370c      	adds	r7, #12
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca8:	4770      	bx	lr

08010caa <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8010caa:	b480      	push	{r7}
 8010cac:	b083      	sub	sp, #12
 8010cae:	af00      	add	r7, sp, #0
 8010cb0:	6078      	str	r0, [r7, #4]
 8010cb2:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	683b      	ldr	r3, [r7, #0]
 8010cba:	009b      	lsls	r3, r3, #2
 8010cbc:	4413      	add	r3, r2
      }
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	370c      	adds	r7, #12
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc8:	4770      	bx	lr

08010cca <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8010cca:	b580      	push	{r7, lr}
 8010ccc:	b082      	sub	sp, #8
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f000 f9f9 	bl	80110d0 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 8010cde:	bf00      	nop
 8010ce0:	3708      	adds	r7, #8
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}

08010ce6 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8010ce6:	b580      	push	{r7, lr}
 8010ce8:	b082      	sub	sp, #8
 8010cea:	af00      	add	r7, sp, #0
 8010cec:	6078      	str	r0, [r7, #4]
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f000 fa1b 	bl	801112a <_ZNSaIPvED1Ev>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}

08010cfe <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      _Vector_base()
 8010cfe:	b580      	push	{r7, lr}
 8010d00:	b082      	sub	sp, #8
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f000 f9f9 	bl	8011100 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	4618      	mov	r0, r3
 8010d12:	3708      	adds	r7, #8
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6819      	ldr	r1, [r3, #0]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8010d28:	461a      	mov	r2, r3
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	1ad3      	subs	r3, r2, r3
 8010d30:	109b      	asrs	r3, r3, #2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8010d32:	461a      	mov	r2, r3
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f000 fa04 	bl	8011142 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
		      - this->_M_impl._M_start); }
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7ff ffd2 	bl	8010ce6 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	4618      	mov	r0, r3
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4618      	mov	r0, r3
 8010d58:	370c      	adds	r7, #12
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d60:	4770      	bx	lr

08010d62 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8010d62:	b580      	push	{r7, lr}
 8010d64:	b084      	sub	sp, #16
 8010d66:	af00      	add	r7, sp, #0
 8010d68:	60f8      	str	r0, [r7, #12]
 8010d6a:	60b9      	str	r1, [r7, #8]
 8010d6c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7ff ffec 	bl	8010d4c <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8010d74:	4603      	mov	r3, r0
 8010d76:	461a      	mov	r2, r3
 8010d78:	68b9      	ldr	r1, [r7, #8]
 8010d7a:	68f8      	ldr	r0, [r7, #12]
 8010d7c:	f000 f9f4 	bl	8011168 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8010d80:	bf00      	nop
 8010d82:	3710      	adds	r7, #16
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b084      	sub	sp, #16
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	1d1a      	adds	r2, r3, #4
 8010d94:	f107 030c 	add.w	r3, r7, #12
 8010d98:	4611      	mov	r1, r2
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	f000 f9fc 	bl	8011198 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	4618      	mov	r0, r3
 8010da4:	3710      	adds	r7, #16
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
	...

08010dac <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010dac:	b5b0      	push	{r4, r5, r7, lr}
 8010dae:	b08a      	sub	sp, #40	; 0x28
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	60f8      	str	r0, [r7, #12]
 8010db4:	60b9      	str	r1, [r7, #8]
 8010db6:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8010db8:	4a41      	ldr	r2, [pc, #260]	; (8010ec0 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x114>)
 8010dba:	2101      	movs	r1, #1
 8010dbc:	68f8      	ldr	r0, [r7, #12]
 8010dbe:	f000 f9fb 	bl	80111b8 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 8010dc2:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010dc4:	68f8      	ldr	r0, [r7, #12]
 8010dc6:	f000 fa3f 	bl	8011248 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	617b      	str	r3, [r7, #20]
 8010dce:	f107 0214 	add.w	r2, r7, #20
 8010dd2:	f107 0308 	add.w	r3, r7, #8
 8010dd6:	4611      	mov	r1, r2
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f000 fa45 	bl	8011268 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8010dde:	4603      	mov	r3, r0
 8010de0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010de6:	4618      	mov	r0, r3
 8010de8:	f000 fa54 	bl	8011294 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8010dec:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010dee:	69fb      	ldr	r3, [r7, #28]
 8010df0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010df2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010df4:	6a3b      	ldr	r3, [r7, #32]
 8010df6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8010df8:	69fa      	ldr	r2, [r7, #28]
 8010dfa:	18d5      	adds	r5, r2, r3
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f7ff ffa5 	bl	8010d4c <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8010e02:	4603      	mov	r3, r0
 8010e04:	461a      	mov	r2, r3
 8010e06:	4629      	mov	r1, r5
 8010e08:	4620      	mov	r0, r4
 8010e0a:	f7ff ffaa 	bl	8010d62 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8010e0e:	2300      	movs	r3, #0
 8010e10:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	681c      	ldr	r4, [r3, #0]
 8010e16:	f107 0308 	add.w	r3, r7, #8
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f000 fa4e 	bl	80112bc <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8010e20:	4603      	mov	r3, r0
 8010e22:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	4618      	mov	r0, r3
 8010e28:	f000 fa53 	bl	80112d2 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8010e2c:	4603      	mov	r3, r0
	  __new_finish
 8010e2e:	69fa      	ldr	r2, [r7, #28]
 8010e30:	4629      	mov	r1, r5
 8010e32:	4620      	mov	r0, r4
 8010e34:	f000 fa58 	bl	80112e8 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8010e38:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8010e3a:	69bb      	ldr	r3, [r7, #24]
 8010e3c:	3304      	adds	r3, #4
 8010e3e:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 8010e40:	f107 0308 	add.w	r3, r7, #8
 8010e44:	4618      	mov	r0, r3
 8010e46:	f000 fa39 	bl	80112bc <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	681c      	ldr	r4, [r3, #0]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	4618      	mov	r0, r3
 8010e56:	f000 fa3c 	bl	80112d2 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8010e5a:	4603      	mov	r3, r0
	  __new_finish
 8010e5c:	69ba      	ldr	r2, [r7, #24]
 8010e5e:	4629      	mov	r1, r5
 8010e60:	4620      	mov	r0, r4
 8010e62:	f000 fa41 	bl	80112e8 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8010e66:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	681c      	ldr	r4, [r3, #0]
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f000 fa2d 	bl	80112d2 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8010e78:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	4629      	mov	r1, r5
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f000 fa4b 	bl	801131a <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8010e84:	68f8      	ldr	r0, [r7, #12]
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 8010e8e:	461a      	mov	r2, r3
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	1ad3      	subs	r3, r2, r3
 8010e96:	109b      	asrs	r3, r3, #2
      _M_deallocate(this->_M_impl._M_start,
 8010e98:	461a      	mov	r2, r3
 8010e9a:	f000 f952 	bl	8011142 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	69fa      	ldr	r2, [r7, #28]
 8010ea2:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	69ba      	ldr	r2, [r7, #24]
 8010ea8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	009b      	lsls	r3, r3, #2
 8010eae:	69fa      	ldr	r2, [r7, #28]
 8010eb0:	441a      	add	r2, r3
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	609a      	str	r2, [r3, #8]
    }
 8010eb6:	bf00      	nop
 8010eb8:	3728      	adds	r7, #40	; 0x28
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8010ebe:	bf00      	nop
 8010ec0:	08018be0 	.word	0x08018be0

08010ec4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b082      	sub	sp, #8
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f000 fa47 	bl	8011360 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	3708      	adds	r7, #8
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bd80      	pop	{r7, pc}

08010edc <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base()
 8010edc:	b580      	push	{r7, lr}
 8010ede:	b082      	sub	sp, #8
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f000 fa25 	bl	8011336 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}

08010ef6 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010ef6:	b580      	push	{r7, lr}
 8010ef8:	b082      	sub	sp, #8
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6819      	ldr	r1, [r3, #0]
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8010f06:	461a      	mov	r2, r3
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	1ad3      	subs	r3, r2, r3
 8010f0e:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8010f10:	461a      	mov	r2, r3
 8010f12:	6878      	ldr	r0, [r7, #4]
 8010f14:	f000 fa30 	bl	8011378 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
		      - this->_M_impl._M_start); }
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ff ffd2 	bl	8010ec4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4618      	mov	r0, r3
 8010f24:	3708      	adds	r7, #8
 8010f26:	46bd      	mov	sp, r7
 8010f28:	bd80      	pop	{r7, pc}

08010f2a <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010f2a:	b480      	push	{r7}
 8010f2c:	b083      	sub	sp, #12
 8010f2e:	af00      	add	r7, sp, #0
 8010f30:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	4618      	mov	r0, r3
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	60f8      	str	r0, [r7, #12]
 8010f48:	60b9      	str	r1, [r7, #8]
 8010f4a:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f7ff ffec 	bl	8010f2a <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010f52:	4603      	mov	r3, r0
 8010f54:	461a      	mov	r2, r3
 8010f56:	68b9      	ldr	r1, [r7, #8]
 8010f58:	68f8      	ldr	r0, [r7, #12]
 8010f5a:	f000 fa20 	bl	801139e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8010f5e:	bf00      	nop
 8010f60:	3710      	adds	r7, #16
 8010f62:	46bd      	mov	sp, r7
 8010f64:	bd80      	pop	{r7, pc}

08010f66 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010f66:	b580      	push	{r7, lr}
 8010f68:	b084      	sub	sp, #16
 8010f6a:	af00      	add	r7, sp, #0
 8010f6c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	1d1a      	adds	r2, r3, #4
 8010f72:	f107 030c 	add.w	r3, r7, #12
 8010f76:	4611      	mov	r1, r2
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f000 fa2b 	bl	80113d4 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	4618      	mov	r0, r3
 8010f82:	3710      	adds	r7, #16
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010f88:	b5b0      	push	{r4, r5, r7, lr}
 8010f8a:	b08a      	sub	sp, #40	; 0x28
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	60f8      	str	r0, [r7, #12]
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8010f94:	4a41      	ldr	r2, [pc, #260]	; (801109c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x114>)
 8010f96:	2101      	movs	r1, #1
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f000 fa2b 	bl	80113f4 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 8010f9e:	6278      	str	r0, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010fa0:	68f8      	ldr	r0, [r7, #12]
 8010fa2:	f000 fa6f 	bl	8011484 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 8010fa6:	4603      	mov	r3, r0
 8010fa8:	617b      	str	r3, [r7, #20]
 8010faa:	f107 0214 	add.w	r2, r7, #20
 8010fae:	f107 0308 	add.w	r3, r7, #8
 8010fb2:	4611      	mov	r1, r2
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	f000 fa75 	bl	80114a4 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8010fba:	4603      	mov	r3, r0
 8010fbc:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f000 fa84 	bl	80114d0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 8010fc8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010fce:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010fd0:	6a3b      	ldr	r3, [r7, #32]
 8010fd2:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8010fd4:	69fa      	ldr	r2, [r7, #28]
 8010fd6:	18d5      	adds	r5, r2, r3
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f7ff ffa6 	bl	8010f2a <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	461a      	mov	r2, r3
 8010fe2:	4629      	mov	r1, r5
 8010fe4:	4620      	mov	r0, r4
 8010fe6:	f7ff ffab 	bl	8010f40 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8010fea:	2300      	movs	r3, #0
 8010fec:	61bb      	str	r3, [r7, #24]
	    (this->_M_impl._M_start, __position.base(),
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	681c      	ldr	r4, [r3, #0]
 8010ff2:	f107 0308 	add.w	r3, r7, #8
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f000 fa7e 	bl	80114f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	4618      	mov	r0, r3
 8011004:	f000 fa83 	bl	801150e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011008:	4603      	mov	r3, r0
	  __new_finish
 801100a:	69fa      	ldr	r2, [r7, #28]
 801100c:	4629      	mov	r1, r5
 801100e:	4620      	mov	r0, r4
 8011010:	f000 fa88 	bl	8011524 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8011014:	61b8      	str	r0, [r7, #24]
	  ++__new_finish;
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	3308      	adds	r3, #8
 801101a:	61bb      	str	r3, [r7, #24]
	    (__position.base(), this->_M_impl._M_finish,
 801101c:	f107 0308 	add.w	r3, r7, #8
 8011020:	4618      	mov	r0, r3
 8011022:	f000 fa69 	bl	80114f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8011026:	4603      	mov	r3, r0
 8011028:	681c      	ldr	r4, [r3, #0]
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	4618      	mov	r0, r3
 8011032:	f000 fa6c 	bl	801150e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011036:	4603      	mov	r3, r0
	  __new_finish
 8011038:	69ba      	ldr	r2, [r7, #24]
 801103a:	4629      	mov	r1, r5
 801103c:	4620      	mov	r0, r4
 801103e:	f000 fa71 	bl	8011524 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8011042:	61b8      	str	r0, [r7, #24]
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	681c      	ldr	r4, [r3, #0]
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	4618      	mov	r0, r3
 8011050:	f000 fa5d 	bl	801150e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011054:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011056:	461a      	mov	r2, r3
 8011058:	4629      	mov	r1, r5
 801105a:	4620      	mov	r0, r4
 801105c:	f000 fa7b 	bl	8011556 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8011060:	68f8      	ldr	r0, [r7, #12]
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 801106a:	461a      	mov	r2, r3
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	1ad3      	subs	r3, r2, r3
 8011072:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8011074:	461a      	mov	r2, r3
 8011076:	f000 f97f 	bl	8011378 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	69fa      	ldr	r2, [r7, #28]
 801107e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	69ba      	ldr	r2, [r7, #24]
 8011084:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011088:	00db      	lsls	r3, r3, #3
 801108a:	69fa      	ldr	r2, [r7, #28]
 801108c:	441a      	add	r2, r3
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	609a      	str	r2, [r3, #8]
    }
 8011092:	bf00      	nop
 8011094:	3728      	adds	r7, #40	; 0x28
 8011096:	46bd      	mov	sp, r7
 8011098:	bdb0      	pop	{r4, r5, r7, pc}
 801109a:	bf00      	nop
 801109c:	08018be0 	.word	0x08018be0

080110a0 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80110a0:	b590      	push	{r4, r7, lr}
 80110a2:	b083      	sub	sp, #12
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	685c      	ldr	r4, [r3, #4]
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	4618      	mov	r0, r3
 80110b2:	f000 fa2c 	bl	801150e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80110b6:	4603      	mov	r3, r0
 80110b8:	461a      	mov	r2, r3
 80110ba:	4621      	mov	r1, r4
 80110bc:	6838      	ldr	r0, [r7, #0]
 80110be:	f000 fa4a 	bl	8011556 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	683a      	ldr	r2, [r7, #0]
 80110c6:	605a      	str	r2, [r3, #4]
      }
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd90      	pop	{r4, r7, pc}

080110d0 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 80110d0:	b590      	push	{r4, r7, lr}
 80110d2:	b083      	sub	sp, #12
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	685c      	ldr	r4, [r3, #4]
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	4618      	mov	r0, r3
 80110e2:	f000 f8f6 	bl	80112d2 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80110e6:	4603      	mov	r3, r0
 80110e8:	461a      	mov	r2, r3
 80110ea:	4621      	mov	r1, r4
 80110ec:	6838      	ldr	r0, [r7, #0]
 80110ee:	f000 f914 	bl	801131a <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	683a      	ldr	r2, [r7, #0]
 80110f6:	605a      	str	r2, [r3, #4]
      }
 80110f8:	bf00      	nop
 80110fa:	370c      	adds	r7, #12
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd90      	pop	{r4, r7, pc}

08011100 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8011108:	6878      	ldr	r0, [r7, #4]
 801110a:	f000 fa32 	bl	8011572 <_ZNSaIPvEC1Ev>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	2200      	movs	r2, #0
 8011112:	601a      	str	r2, [r3, #0]
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2200      	movs	r2, #0
 8011118:	605a      	str	r2, [r3, #4]
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2200      	movs	r2, #0
 801111e:	609a      	str	r2, [r3, #8]
	{ }
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	4618      	mov	r0, r3
 8011124:	3708      	adds	r7, #8
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <_ZNSaIPvED1Ev>:
      ~allocator() throw() { }
 801112a:	b580      	push	{r7, lr}
 801112c:	b082      	sub	sp, #8
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
 8011132:	6878      	ldr	r0, [r7, #4]
 8011134:	f000 fa29 	bl	801158a <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	4618      	mov	r0, r3
 801113c:	3708      	adds	r7, #8
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011142:	b580      	push	{r7, lr}
 8011144:	b084      	sub	sp, #16
 8011146:	af00      	add	r7, sp, #0
 8011148:	60f8      	str	r0, [r7, #12]
 801114a:	60b9      	str	r1, [r7, #8]
 801114c:	607a      	str	r2, [r7, #4]
	if (__p)
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d005      	beq.n	8011160 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	687a      	ldr	r2, [r7, #4]
 8011158:	68b9      	ldr	r1, [r7, #8]
 801115a:	4618      	mov	r0, r3
 801115c:	f000 fa20 	bl	80115a0 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8011160:	bf00      	nop
 8011162:	3710      	adds	r7, #16
 8011164:	46bd      	mov	sp, r7
 8011166:	bd80      	pop	{r7, pc}

08011168 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8011168:	b590      	push	{r4, r7, lr}
 801116a:	b085      	sub	sp, #20
 801116c:	af00      	add	r7, sp, #0
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8011174:	6878      	ldr	r0, [r7, #4]
 8011176:	f7ff fde9 	bl	8010d4c <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 801117a:	4603      	mov	r3, r0
 801117c:	681c      	ldr	r4, [r3, #0]
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	4619      	mov	r1, r3
 8011182:	2004      	movs	r0, #4
 8011184:	f7ef ff61 	bl	800104a <_ZnwjPv>
 8011188:	4603      	mov	r3, r0
 801118a:	2b00      	cmp	r3, #0
 801118c:	d000      	beq.n	8011190 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_+0x28>
 801118e:	601c      	str	r4, [r3, #0]
 8011190:	bf00      	nop
 8011192:	3714      	adds	r7, #20
 8011194:	46bd      	mov	sp, r7
 8011196:	bd90      	pop	{r4, r7, pc}

08011198 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	681a      	ldr	r2, [r3, #0]
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	601a      	str	r2, [r3, #0]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	4618      	mov	r0, r3
 80111ae:	370c      	adds	r7, #12
 80111b0:	46bd      	mov	sp, r7
 80111b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b6:	4770      	bx	lr

080111b8 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80111b8:	b590      	push	{r4, r7, lr}
 80111ba:	b087      	sub	sp, #28
 80111bc:	af00      	add	r7, sp, #0
 80111be:	60f8      	str	r0, [r7, #12]
 80111c0:	60b9      	str	r1, [r7, #8]
 80111c2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80111c4:	68f8      	ldr	r0, [r7, #12]
 80111c6:	f000 f9fa 	bl	80115be <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 80111ca:	4604      	mov	r4, r0
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f7ff fd5b 	bl	8010c88 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80111d2:	4603      	mov	r3, r0
 80111d4:	1ae2      	subs	r2, r4, r3
 80111d6:	68bb      	ldr	r3, [r7, #8]
 80111d8:	429a      	cmp	r2, r3
 80111da:	bf34      	ite	cc
 80111dc:	2301      	movcc	r3, #1
 80111de:	2300      	movcs	r3, #0
 80111e0:	b2db      	uxtb	r3, r3
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d003      	beq.n	80111ee <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	4618      	mov	r0, r3
 80111ea:	f000 fdb0 	bl	8011d4e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f7ff fd4a 	bl	8010c88 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80111f4:	4604      	mov	r4, r0
 80111f6:	68f8      	ldr	r0, [r7, #12]
 80111f8:	f7ff fd46 	bl	8010c88 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80111fc:	4603      	mov	r3, r0
 80111fe:	613b      	str	r3, [r7, #16]
 8011200:	f107 0208 	add.w	r2, r7, #8
 8011204:	f107 0310 	add.w	r3, r7, #16
 8011208:	4611      	mov	r1, r2
 801120a:	4618      	mov	r0, r3
 801120c:	f7f4 f947 	bl	800549e <_ZSt3maxIjERKT_S2_S2_>
 8011210:	4603      	mov	r3, r0
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	4423      	add	r3, r4
 8011216:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011218:	68f8      	ldr	r0, [r7, #12]
 801121a:	f7ff fd35 	bl	8010c88 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801121e:	4602      	mov	r2, r0
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	4293      	cmp	r3, r2
 8011224:	d306      	bcc.n	8011234 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7c>
 8011226:	68f8      	ldr	r0, [r7, #12]
 8011228:	f000 f9c9 	bl	80115be <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801122c:	4602      	mov	r2, r0
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	4293      	cmp	r3, r2
 8011232:	d904      	bls.n	801123e <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f000 f9c2 	bl	80115be <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801123a:	4603      	mov	r3, r0
 801123c:	e000      	b.n	8011240 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x88>
 801123e:	697b      	ldr	r3, [r7, #20]
      }
 8011240:	4618      	mov	r0, r3
 8011242:	371c      	adds	r7, #28
 8011244:	46bd      	mov	sp, r7
 8011246:	bd90      	pop	{r4, r7, pc}

08011248 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8011250:	687a      	ldr	r2, [r7, #4]
 8011252:	f107 030c 	add.w	r3, r7, #12
 8011256:	4611      	mov	r1, r2
 8011258:	4618      	mov	r0, r3
 801125a:	f7ff ff9d 	bl	8011198 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	4618      	mov	r0, r3
 8011262:	3710      	adds	r7, #16
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011268:	b590      	push	{r4, r7, lr}
 801126a:	b083      	sub	sp, #12
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 f822 	bl	80112bc <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8011278:	4603      	mov	r3, r0
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	461c      	mov	r4, r3
 801127e:	6838      	ldr	r0, [r7, #0]
 8011280:	f000 f81c 	bl	80112bc <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8011284:	4603      	mov	r3, r0
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	1ae3      	subs	r3, r4, r3
 801128a:	109b      	asrs	r3, r3, #2
 801128c:	4618      	mov	r0, r3
 801128e:	370c      	adds	r7, #12
 8011290:	46bd      	mov	sp, r7
 8011292:	bd90      	pop	{r4, r7, pc}

08011294 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011294:	b580      	push	{r7, lr}
 8011296:	b082      	sub	sp, #8
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
 801129c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d006      	beq.n	80112b2 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6839      	ldr	r1, [r7, #0]
 80112a8:	4618      	mov	r0, r3
 80112aa:	f000 f999 	bl	80115e0 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 80112ae:	4603      	mov	r3, r0
 80112b0:	e000      	b.n	80112b4 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 80112b2:	2300      	movs	r3, #0
      }
 80112b4:	4618      	mov	r0, r3
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80112bc:	b480      	push	{r7}
 80112be:	b083      	sub	sp, #12
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	4618      	mov	r0, r3
 80112c8:	370c      	adds	r7, #12
 80112ca:	46bd      	mov	sp, r7
 80112cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d0:	4770      	bx	lr

080112d2 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80112d2:	b480      	push	{r7}
 80112d4:	b083      	sub	sp, #12
 80112d6:	af00      	add	r7, sp, #0
 80112d8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	4618      	mov	r0, r3
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80112e8:	b590      	push	{r4, r7, lr}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	60f8      	str	r0, [r7, #12]
 80112f0:	60b9      	str	r1, [r7, #8]
 80112f2:	607a      	str	r2, [r7, #4]
 80112f4:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80112f6:	68f8      	ldr	r0, [r7, #12]
 80112f8:	f000 f981 	bl	80115fe <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 80112fc:	4604      	mov	r4, r0
 80112fe:	68b8      	ldr	r0, [r7, #8]
 8011300:	f000 f97d 	bl	80115fe <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8011304:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	4620      	mov	r0, r4
 801130c:	f000 f986 	bl	801161c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8011310:	4603      	mov	r3, r0
    }
 8011312:	4618      	mov	r0, r3
 8011314:	3714      	adds	r7, #20
 8011316:	46bd      	mov	sp, r7
 8011318:	bd90      	pop	{r4, r7, pc}

0801131a <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801131a:	b580      	push	{r7, lr}
 801131c:	b084      	sub	sp, #16
 801131e:	af00      	add	r7, sp, #0
 8011320:	60f8      	str	r0, [r7, #12]
 8011322:	60b9      	str	r1, [r7, #8]
 8011324:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8011326:	68b9      	ldr	r1, [r7, #8]
 8011328:	68f8      	ldr	r0, [r7, #12]
 801132a:	f000 f988 	bl	801163e <_ZSt8_DestroyIPPvEvT_S2_>
    }
 801132e:	bf00      	nop
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}

08011336 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8011336:	b580      	push	{r7, lr}
 8011338:	b082      	sub	sp, #8
 801133a:	af00      	add	r7, sp, #0
 801133c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f000 f98a 	bl	8011658 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2200      	movs	r2, #0
 8011348:	601a      	str	r2, [r3, #0]
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	2200      	movs	r2, #0
 801134e:	605a      	str	r2, [r3, #4]
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2200      	movs	r2, #0
 8011354:	609a      	str	r2, [r3, #8]
	{ }
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	4618      	mov	r0, r3
 801135a:	3708      	adds	r7, #8
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}

08011360 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8011360:	b580      	push	{r7, lr}
 8011362:	b082      	sub	sp, #8
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	f000 f981 	bl	8011670 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4618      	mov	r0, r3
 8011372:	3708      	adds	r7, #8
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	607a      	str	r2, [r7, #4]
	if (__p)
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d005      	beq.n	8011396 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	68b9      	ldr	r1, [r7, #8]
 8011390:	4618      	mov	r0, r3
 8011392:	f000 f978 	bl	8011686 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8011396:	bf00      	nop
 8011398:	3710      	adds	r7, #16
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}

0801139e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801139e:	b590      	push	{r4, r7, lr}
 80113a0:	b085      	sub	sp, #20
 80113a2:	af00      	add	r7, sp, #0
 80113a4:	60f8      	str	r0, [r7, #12]
 80113a6:	60b9      	str	r1, [r7, #8]
 80113a8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f7ff fdbd 	bl	8010f2a <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 80113b0:	4604      	mov	r4, r0
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	4619      	mov	r1, r3
 80113b6:	2008      	movs	r0, #8
 80113b8:	f7ef fe47 	bl	800104a <_ZnwjPv>
 80113bc:	4603      	mov	r3, r0
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d004      	beq.n	80113cc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_+0x2e>
 80113c2:	4622      	mov	r2, r4
 80113c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80113c8:	e883 0003 	stmia.w	r3, {r0, r1}
 80113cc:	bf00      	nop
 80113ce:	3714      	adds	r7, #20
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd90      	pop	{r4, r7, pc}

080113d4 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	601a      	str	r2, [r3, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	4618      	mov	r0, r3
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr

080113f4 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80113f4:	b590      	push	{r4, r7, lr}
 80113f6:	b087      	sub	sp, #28
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	60f8      	str	r0, [r7, #12]
 80113fc:	60b9      	str	r1, [r7, #8]
 80113fe:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011400:	68f8      	ldr	r0, [r7, #12]
 8011402:	f000 f94f 	bl	80116a4 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8011406:	4604      	mov	r4, r0
 8011408:	68f8      	ldr	r0, [r7, #12]
 801140a:	f7ff fc0e 	bl	8010c2a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801140e:	4603      	mov	r3, r0
 8011410:	1ae2      	subs	r2, r4, r3
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	429a      	cmp	r2, r3
 8011416:	bf34      	ite	cc
 8011418:	2301      	movcc	r3, #1
 801141a:	2300      	movcs	r3, #0
 801141c:	b2db      	uxtb	r3, r3
 801141e:	2b00      	cmp	r3, #0
 8011420:	d003      	beq.n	801142a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	4618      	mov	r0, r3
 8011426:	f000 fc92 	bl	8011d4e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 801142a:	68f8      	ldr	r0, [r7, #12]
 801142c:	f7ff fbfd 	bl	8010c2a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8011430:	4604      	mov	r4, r0
 8011432:	68f8      	ldr	r0, [r7, #12]
 8011434:	f7ff fbf9 	bl	8010c2a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8011438:	4603      	mov	r3, r0
 801143a:	613b      	str	r3, [r7, #16]
 801143c:	f107 0208 	add.w	r2, r7, #8
 8011440:	f107 0310 	add.w	r3, r7, #16
 8011444:	4611      	mov	r1, r2
 8011446:	4618      	mov	r0, r3
 8011448:	f7f4 f829 	bl	800549e <_ZSt3maxIjERKT_S2_S2_>
 801144c:	4603      	mov	r3, r0
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	4423      	add	r3, r4
 8011452:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011454:	68f8      	ldr	r0, [r7, #12]
 8011456:	f7ff fbe8 	bl	8010c2a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801145a:	4602      	mov	r2, r0
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	4293      	cmp	r3, r2
 8011460:	d306      	bcc.n	8011470 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7c>
 8011462:	68f8      	ldr	r0, [r7, #12]
 8011464:	f000 f91e 	bl	80116a4 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8011468:	4602      	mov	r2, r0
 801146a:	697b      	ldr	r3, [r7, #20]
 801146c:	4293      	cmp	r3, r2
 801146e:	d904      	bls.n	801147a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 8011470:	68f8      	ldr	r0, [r7, #12]
 8011472:	f000 f917 	bl	80116a4 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8011476:	4603      	mov	r3, r0
 8011478:	e000      	b.n	801147c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x88>
 801147a:	697b      	ldr	r3, [r7, #20]
      }
 801147c:	4618      	mov	r0, r3
 801147e:	371c      	adds	r7, #28
 8011480:	46bd      	mov	sp, r7
 8011482:	bd90      	pop	{r4, r7, pc}

08011484 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8011484:	b580      	push	{r7, lr}
 8011486:	b084      	sub	sp, #16
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801148c:	687a      	ldr	r2, [r7, #4]
 801148e:	f107 030c 	add.w	r3, r7, #12
 8011492:	4611      	mov	r1, r2
 8011494:	4618      	mov	r0, r3
 8011496:	f7ff ff9d 	bl	80113d4 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	4618      	mov	r0, r3
 801149e:	3710      	adds	r7, #16
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}

080114a4 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80114a4:	b590      	push	{r4, r7, lr}
 80114a6:	b083      	sub	sp, #12
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
 80114ac:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f000 f822 	bl	80114f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80114b4:	4603      	mov	r3, r0
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	461c      	mov	r4, r3
 80114ba:	6838      	ldr	r0, [r7, #0]
 80114bc:	f000 f81c 	bl	80114f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80114c0:	4603      	mov	r3, r0
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	1ae3      	subs	r3, r4, r3
 80114c6:	10db      	asrs	r3, r3, #3
 80114c8:	4618      	mov	r0, r3
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd90      	pop	{r4, r7, pc}

080114d0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d006      	beq.n	80114ee <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6839      	ldr	r1, [r7, #0]
 80114e4:	4618      	mov	r0, r3
 80114e6:	f000 f8ee 	bl	80116c6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 80114ea:	4603      	mov	r3, r0
 80114ec:	e000      	b.n	80114f0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 80114ee:	2300      	movs	r3, #0
      }
 80114f0:	4618      	mov	r0, r3
 80114f2:	3708      	adds	r7, #8
 80114f4:	46bd      	mov	sp, r7
 80114f6:	bd80      	pop	{r7, pc}

080114f8 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80114f8:	b480      	push	{r7}
 80114fa:	b083      	sub	sp, #12
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	4618      	mov	r0, r3
 8011504:	370c      	adds	r7, #12
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr

0801150e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801150e:	b480      	push	{r7}
 8011510:	b083      	sub	sp, #12
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	4618      	mov	r0, r3
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8011524:	b590      	push	{r4, r7, lr}
 8011526:	b085      	sub	sp, #20
 8011528:	af00      	add	r7, sp, #0
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	607a      	str	r2, [r7, #4]
 8011530:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8011532:	68f8      	ldr	r0, [r7, #12]
 8011534:	f000 f8d6 	bl	80116e4 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8011538:	4604      	mov	r4, r0
 801153a:	68b8      	ldr	r0, [r7, #8]
 801153c:	f000 f8d2 	bl	80116e4 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8011540:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	687a      	ldr	r2, [r7, #4]
 8011546:	4620      	mov	r0, r4
 8011548:	f000 f8db 	bl	8011702 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 801154c:	4603      	mov	r3, r0
    }
 801154e:	4618      	mov	r0, r3
 8011550:	3714      	adds	r7, #20
 8011552:	46bd      	mov	sp, r7
 8011554:	bd90      	pop	{r4, r7, pc}

08011556 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8011556:	b580      	push	{r7, lr}
 8011558:	b084      	sub	sp, #16
 801155a:	af00      	add	r7, sp, #0
 801155c:	60f8      	str	r0, [r7, #12]
 801155e:	60b9      	str	r1, [r7, #8]
 8011560:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8011562:	68b9      	ldr	r1, [r7, #8]
 8011564:	68f8      	ldr	r0, [r7, #12]
 8011566:	f000 f8dd 	bl	8011724 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 801156a:	bf00      	nop
 801156c:	3710      	adds	r7, #16
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <_ZNSaIPvEC1Ev>:
      allocator() throw() { }
 8011572:	b580      	push	{r7, lr}
 8011574:	b082      	sub	sp, #8
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
 801157a:	6878      	ldr	r0, [r7, #4]
 801157c:	f000 f8df 	bl	801173e <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	4618      	mov	r0, r3
 8011584:	3708      	adds	r7, #8
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}

0801158a <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801158a:	b480      	push	{r7}
 801158c:	b083      	sub	sp, #12
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	4618      	mov	r0, r3
 8011596:	370c      	adds	r7, #12
 8011598:	46bd      	mov	sp, r7
 801159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159e:	4770      	bx	lr

080115a0 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b084      	sub	sp, #16
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	60b9      	str	r1, [r7, #8]
 80115aa:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80115ac:	687a      	ldr	r2, [r7, #4]
 80115ae:	68b9      	ldr	r1, [r7, #8]
 80115b0:	68f8      	ldr	r0, [r7, #12]
 80115b2:	f000 f8cf 	bl	8011754 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 80115b6:	bf00      	nop
 80115b8:	3710      	adds	r7, #16
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80115be:	b580      	push	{r7, lr}
 80115c0:	b082      	sub	sp, #8
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	4618      	mov	r0, r3
 80115ca:	f000 f8dc 	bl	8011786 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80115ce:	4603      	mov	r3, r0
 80115d0:	4618      	mov	r0, r3
 80115d2:	f000 f8cc 	bl	801176e <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 80115d6:	4603      	mov	r3, r0
 80115d8:	4618      	mov	r0, r3
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}

080115e0 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80115ea:	2200      	movs	r2, #0
 80115ec:	6839      	ldr	r1, [r7, #0]
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 f8d4 	bl	801179c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 80115f4:	4603      	mov	r3, r0
 80115f6:	4618      	mov	r0, r3
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80115fe:	b580      	push	{r7, lr}
 8011600:	b084      	sub	sp, #16
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8011606:	f107 030c 	add.w	r3, r7, #12
 801160a:	6879      	ldr	r1, [r7, #4]
 801160c:	4618      	mov	r0, r3
 801160e:	f000 f8e3 	bl	80117d8 <_ZNSt13move_iteratorIPPvEC1ES1_>
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	4618      	mov	r0, r3
 8011616:	3710      	adds	r7, #16
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}

0801161c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801161c:	b580      	push	{r7, lr}
 801161e:	b084      	sub	sp, #16
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
 8011628:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	68b9      	ldr	r1, [r7, #8]
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f000 f8e1 	bl	80117f6 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8011634:	4603      	mov	r3, r0
 8011636:	4618      	mov	r0, r3
 8011638:	3710      	adds	r7, #16
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}

0801163e <_ZSt8_DestroyIPPvEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 801163e:	b580      	push	{r7, lr}
 8011640:	b082      	sub	sp, #8
 8011642:	af00      	add	r7, sp, #0
 8011644:	6078      	str	r0, [r7, #4]
 8011646:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8011648:	6839      	ldr	r1, [r7, #0]
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 f8e5 	bl	801181a <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 8011650:	bf00      	nop
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 f8e5 	bl	8011830 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	4618      	mov	r0, r3
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8011670:	b480      	push	{r7}
 8011672:	b083      	sub	sp, #12
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	4618      	mov	r0, r3
 801167c:	370c      	adds	r7, #12
 801167e:	46bd      	mov	sp, r7
 8011680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011684:	4770      	bx	lr

08011686 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011686:	b580      	push	{r7, lr}
 8011688:	b084      	sub	sp, #16
 801168a:	af00      	add	r7, sp, #0
 801168c:	60f8      	str	r0, [r7, #12]
 801168e:	60b9      	str	r1, [r7, #8]
 8011690:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8011692:	687a      	ldr	r2, [r7, #4]
 8011694:	68b9      	ldr	r1, [r7, #8]
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f000 f8d5 	bl	8011846 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 801169c:	bf00      	nop
 801169e:	3710      	adds	r7, #16
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b082      	sub	sp, #8
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	4618      	mov	r0, r3
 80116b0:	f000 f8e2 	bl	8011878 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80116b4:	4603      	mov	r3, r0
 80116b6:	4618      	mov	r0, r3
 80116b8:	f000 f8d2 	bl	8011860 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 80116bc:	4603      	mov	r3, r0
 80116be:	4618      	mov	r0, r3
 80116c0:	3708      	adds	r7, #8
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}

080116c6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80116c6:	b580      	push	{r7, lr}
 80116c8:	b082      	sub	sp, #8
 80116ca:	af00      	add	r7, sp, #0
 80116cc:	6078      	str	r0, [r7, #4]
 80116ce:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80116d0:	2200      	movs	r2, #0
 80116d2:	6839      	ldr	r1, [r7, #0]
 80116d4:	6878      	ldr	r0, [r7, #4]
 80116d6:	f000 f8da 	bl	801188e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 80116da:	4603      	mov	r3, r0
 80116dc:	4618      	mov	r0, r3
 80116de:	3708      	adds	r7, #8
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80116ec:	f107 030c 	add.w	r3, r7, #12
 80116f0:	6879      	ldr	r1, [r7, #4]
 80116f2:	4618      	mov	r0, r3
 80116f4:	f000 f8e9 	bl	80118ca <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	4618      	mov	r0, r3
 80116fc:	3710      	adds	r7, #16
 80116fe:	46bd      	mov	sp, r7
 8011700:	bd80      	pop	{r7, pc}

08011702 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8011702:	b580      	push	{r7, lr}
 8011704:	b084      	sub	sp, #16
 8011706:	af00      	add	r7, sp, #0
 8011708:	60f8      	str	r0, [r7, #12]
 801170a:	60b9      	str	r1, [r7, #8]
 801170c:	607a      	str	r2, [r7, #4]
 801170e:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8011710:	687a      	ldr	r2, [r7, #4]
 8011712:	68b9      	ldr	r1, [r7, #8]
 8011714:	68f8      	ldr	r0, [r7, #12]
 8011716:	f000 f8e7 	bl	80118e8 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 801171a:	4603      	mov	r3, r0
 801171c:	4618      	mov	r0, r3
 801171e:	3710      	adds	r7, #16
 8011720:	46bd      	mov	sp, r7
 8011722:	bd80      	pop	{r7, pc}

08011724 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8011724:	b580      	push	{r7, lr}
 8011726:	b082      	sub	sp, #8
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 801172e:	6839      	ldr	r1, [r7, #0]
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f000 f8eb 	bl	801190c <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 8011736:	bf00      	nop
 8011738:	3708      	adds	r7, #8
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801173e:	b480      	push	{r7}
 8011740:	b083      	sub	sp, #12
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	4618      	mov	r0, r3
 801174a:	370c      	adds	r7, #12
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr

08011754 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8011760:	68b8      	ldr	r0, [r7, #8]
 8011762:	f000 faef 	bl	8011d44 <_ZdlPv>
      }
 8011766:	bf00      	nop
 8011768:	3710      	adds	r7, #16
 801176a:	46bd      	mov	sp, r7
 801176c:	bd80      	pop	{r7, pc}

0801176e <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 801176e:	b580      	push	{r7, lr}
 8011770:	b082      	sub	sp, #8
 8011772:	af00      	add	r7, sp, #0
 8011774:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 f8d3 	bl	8011922 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 801177c:	4603      	mov	r3, r0
 801177e:	4618      	mov	r0, r3
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}

08011786 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8011786:	b480      	push	{r7}
 8011788:	b083      	sub	sp, #12
 801178a:	af00      	add	r7, sp, #0
 801178c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	4618      	mov	r0, r3
 8011792:	370c      	adds	r7, #12
 8011794:	46bd      	mov	sp, r7
 8011796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179a:	4770      	bx	lr

0801179c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801179c:	b580      	push	{r7, lr}
 801179e:	b084      	sub	sp, #16
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	60b9      	str	r1, [r7, #8]
 80117a6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80117a8:	68f8      	ldr	r0, [r7, #12]
 80117aa:	f000 f8ba 	bl	8011922 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 80117ae:	4602      	mov	r2, r0
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	4293      	cmp	r3, r2
 80117b4:	bf8c      	ite	hi
 80117b6:	2301      	movhi	r3, #1
 80117b8:	2300      	movls	r3, #0
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d001      	beq.n	80117c4 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80117c0:	f000 fac2 	bl	8011d48 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	009b      	lsls	r3, r3, #2
 80117c8:	4618      	mov	r0, r3
 80117ca:	f000 faa1 	bl	8011d10 <_Znwj>
 80117ce:	4603      	mov	r3, r0
      }
 80117d0:	4618      	mov	r0, r3
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 80117d8:	b480      	push	{r7}
 80117da:	b083      	sub	sp, #12
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	683a      	ldr	r2, [r7, #0]
 80117e6:	601a      	str	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4618      	mov	r0, r3
 80117ec:	370c      	adds	r7, #12
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr

080117f6 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80117f6:	b580      	push	{r7, lr}
 80117f8:	b086      	sub	sp, #24
 80117fa:	af00      	add	r7, sp, #0
 80117fc:	60f8      	str	r0, [r7, #12]
 80117fe:	60b9      	str	r1, [r7, #8]
 8011800:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8011802:	2301      	movs	r3, #1
 8011804:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8011806:	687a      	ldr	r2, [r7, #4]
 8011808:	68b9      	ldr	r1, [r7, #8]
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	f000 f895 	bl	801193a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 8011810:	4603      	mov	r3, r0
    }
 8011812:	4618      	mov	r0, r3
 8011814:	3718      	adds	r7, #24
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}

0801181a <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 801181a:	b480      	push	{r7}
 801181c:	b083      	sub	sp, #12
 801181e:	af00      	add	r7, sp, #0
 8011820:	6078      	str	r0, [r7, #4]
 8011822:	6039      	str	r1, [r7, #0]
 8011824:	bf00      	nop
 8011826:	370c      	adds	r7, #12
 8011828:	46bd      	mov	sp, r7
 801182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182e:	4770      	bx	lr

08011830 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8011830:	b480      	push	{r7}
 8011832:	b083      	sub	sp, #12
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	4618      	mov	r0, r3
 801183c:	370c      	adds	r7, #12
 801183e:	46bd      	mov	sp, r7
 8011840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011844:	4770      	bx	lr

08011846 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8011846:	b580      	push	{r7, lr}
 8011848:	b084      	sub	sp, #16
 801184a:	af00      	add	r7, sp, #0
 801184c:	60f8      	str	r0, [r7, #12]
 801184e:	60b9      	str	r1, [r7, #8]
 8011850:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8011852:	68b8      	ldr	r0, [r7, #8]
 8011854:	f000 fa76 	bl	8011d44 <_ZdlPv>
      }
 8011858:	bf00      	nop
 801185a:	3710      	adds	r7, #16
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}

08011860 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f000 f876 	bl	801195a <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 801186e:	4603      	mov	r3, r0
 8011870:	4618      	mov	r0, r3
 8011872:	3708      	adds	r7, #8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8011878:	b480      	push	{r7}
 801187a:	b083      	sub	sp, #12
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	4618      	mov	r0, r3
 8011884:	370c      	adds	r7, #12
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr

0801188e <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801188e:	b580      	push	{r7, lr}
 8011890:	b084      	sub	sp, #16
 8011892:	af00      	add	r7, sp, #0
 8011894:	60f8      	str	r0, [r7, #12]
 8011896:	60b9      	str	r1, [r7, #8]
 8011898:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 801189a:	68f8      	ldr	r0, [r7, #12]
 801189c:	f000 f85d 	bl	801195a <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 80118a0:	4602      	mov	r2, r0
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	4293      	cmp	r3, r2
 80118a6:	bf8c      	ite	hi
 80118a8:	2301      	movhi	r3, #1
 80118aa:	2300      	movls	r3, #0
 80118ac:	b2db      	uxtb	r3, r3
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d001      	beq.n	80118b6 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80118b2:	f000 fa49 	bl	8011d48 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	00db      	lsls	r3, r3, #3
 80118ba:	4618      	mov	r0, r3
 80118bc:	f000 fa28 	bl	8011d10 <_Znwj>
 80118c0:	4603      	mov	r3, r0
      }
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}

080118ca <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 80118ca:	b480      	push	{r7}
 80118cc:	b083      	sub	sp, #12
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	683a      	ldr	r2, [r7, #0]
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	4618      	mov	r0, r3
 80118de:	370c      	adds	r7, #12
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr

080118e8 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b086      	sub	sp, #24
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80118f4:	2301      	movs	r3, #1
 80118f6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	68b9      	ldr	r1, [r7, #8]
 80118fc:	68f8      	ldr	r0, [r7, #12]
 80118fe:	f000 f838 	bl	8011972 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 8011902:	4603      	mov	r3, r0
    }
 8011904:	4618      	mov	r0, r3
 8011906:	3718      	adds	r7, #24
 8011908:	46bd      	mov	sp, r7
 801190a:	bd80      	pop	{r7, pc}

0801190c <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 801190c:	b480      	push	{r7}
 801190e:	b083      	sub	sp, #12
 8011910:	af00      	add	r7, sp, #0
 8011912:	6078      	str	r0, [r7, #4]
 8011914:	6039      	str	r1, [r7, #0]
 8011916:	bf00      	nop
 8011918:	370c      	adds	r7, #12
 801191a:	46bd      	mov	sp, r7
 801191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011920:	4770      	bx	lr

08011922 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8011922:	b480      	push	{r7}
 8011924:	b083      	sub	sp, #12
 8011926:	af00      	add	r7, sp, #0
 8011928:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 801192a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801192e:	4618      	mov	r0, r3
 8011930:	370c      	adds	r7, #12
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr

0801193a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 801193a:	b580      	push	{r7, lr}
 801193c:	b084      	sub	sp, #16
 801193e:	af00      	add	r7, sp, #0
 8011940:	60f8      	str	r0, [r7, #12]
 8011942:	60b9      	str	r1, [r7, #8]
 8011944:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8011946:	687a      	ldr	r2, [r7, #4]
 8011948:	68b9      	ldr	r1, [r7, #8]
 801194a:	68f8      	ldr	r0, [r7, #12]
 801194c:	f000 f821 	bl	8011992 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8011950:	4603      	mov	r3, r0
 8011952:	4618      	mov	r0, r3
 8011954:	3710      	adds	r7, #16
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}

0801195a <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801195a:	b480      	push	{r7}
 801195c:	b083      	sub	sp, #12
 801195e:	af00      	add	r7, sp, #0
 8011960:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8011962:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8011966:	4618      	mov	r0, r3
 8011968:	370c      	adds	r7, #12
 801196a:	46bd      	mov	sp, r7
 801196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011970:	4770      	bx	lr

08011972 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8011972:	b580      	push	{r7, lr}
 8011974:	b084      	sub	sp, #16
 8011976:	af00      	add	r7, sp, #0
 8011978:	60f8      	str	r0, [r7, #12]
 801197a:	60b9      	str	r1, [r7, #8]
 801197c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	68b9      	ldr	r1, [r7, #8]
 8011982:	68f8      	ldr	r0, [r7, #12]
 8011984:	f000 f81d 	bl	80119c2 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8011988:	4603      	mov	r3, r0
 801198a:	4618      	mov	r0, r3
 801198c:	3710      	adds	r7, #16
 801198e:	46bd      	mov	sp, r7
 8011990:	bd80      	pop	{r7, pc}

08011992 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 8011992:	b590      	push	{r4, r7, lr}
 8011994:	b085      	sub	sp, #20
 8011996:	af00      	add	r7, sp, #0
 8011998:	60f8      	str	r0, [r7, #12]
 801199a:	60b9      	str	r1, [r7, #8]
 801199c:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 801199e:	68f8      	ldr	r0, [r7, #12]
 80119a0:	f000 f827 	bl	80119f2 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80119a4:	4604      	mov	r4, r0
 80119a6:	68b8      	ldr	r0, [r7, #8]
 80119a8:	f000 f823 	bl	80119f2 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80119ac:	4603      	mov	r3, r0
	       __result));
 80119ae:	687a      	ldr	r2, [r7, #4]
 80119b0:	4619      	mov	r1, r3
 80119b2:	4620      	mov	r0, r4
 80119b4:	f000 f82e 	bl	8011a14 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 80119b8:	4603      	mov	r3, r0
    }
 80119ba:	4618      	mov	r0, r3
 80119bc:	3714      	adds	r7, #20
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd90      	pop	{r4, r7, pc}

080119c2 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 80119c2:	b590      	push	{r4, r7, lr}
 80119c4:	b085      	sub	sp, #20
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	60f8      	str	r0, [r7, #12]
 80119ca:	60b9      	str	r1, [r7, #8]
 80119cc:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80119ce:	68f8      	ldr	r0, [r7, #12]
 80119d0:	f000 f83c 	bl	8011a4c <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80119d4:	4604      	mov	r4, r0
 80119d6:	68b8      	ldr	r0, [r7, #8]
 80119d8:	f000 f838 	bl	8011a4c <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80119dc:	4603      	mov	r3, r0
	       __result));
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	4619      	mov	r1, r3
 80119e2:	4620      	mov	r0, r4
 80119e4:	f000 f843 	bl	8011a6e <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 80119e8:	4603      	mov	r3, r0
    }
 80119ea:	4618      	mov	r0, r3
 80119ec:	3714      	adds	r7, #20
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd90      	pop	{r4, r7, pc}

080119f2 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 80119f2:	b580      	push	{r7, lr}
 80119f4:	b082      	sub	sp, #8
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 80119fa:	1d3b      	adds	r3, r7, #4
 80119fc:	4618      	mov	r0, r3
 80119fe:	f000 f852 	bl	8011aa6 <_ZNKSt13move_iteratorIPPvE4baseEv>
 8011a02:	4603      	mov	r3, r0
 8011a04:	4618      	mov	r0, r3
 8011a06:	f000 f85a 	bl	8011abe <_ZSt12__miter_baseIPPvET_S2_>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3708      	adds	r7, #8
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011a14:	b5b0      	push	{r4, r5, r7, lr}
 8011a16:	b084      	sub	sp, #16
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	60f8      	str	r0, [r7, #12]
 8011a1c:	60b9      	str	r1, [r7, #8]
 8011a1e:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f000 f857 	bl	8011ad4 <_ZSt12__niter_baseIPPvET_S2_>
 8011a26:	4604      	mov	r4, r0
 8011a28:	68b8      	ldr	r0, [r7, #8]
 8011a2a:	f000 f853 	bl	8011ad4 <_ZSt12__niter_baseIPPvET_S2_>
 8011a2e:	4605      	mov	r5, r0
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f000 f84f 	bl	8011ad4 <_ZSt12__niter_baseIPPvET_S2_>
 8011a36:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8011a38:	461a      	mov	r2, r3
 8011a3a:	4629      	mov	r1, r5
 8011a3c:	4620      	mov	r0, r4
 8011a3e:	f000 f854 	bl	8011aea <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 8011a42:	4603      	mov	r3, r0
    }
 8011a44:	4618      	mov	r0, r3
 8011a46:	3710      	adds	r7, #16
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bdb0      	pop	{r4, r5, r7, pc}

08011a4c <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8011a54:	1d3b      	adds	r3, r7, #4
 8011a56:	4618      	mov	r0, r3
 8011a58:	f000 f859 	bl	8011b0e <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f000 f861 	bl	8011b26 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8011a64:	4603      	mov	r3, r0
 8011a66:	4618      	mov	r0, r3
 8011a68:	3708      	adds	r7, #8
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}

08011a6e <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8011a6e:	b5b0      	push	{r4, r5, r7, lr}
 8011a70:	b084      	sub	sp, #16
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	60f8      	str	r0, [r7, #12]
 8011a76:	60b9      	str	r1, [r7, #8]
 8011a78:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8011a7a:	68f8      	ldr	r0, [r7, #12]
 8011a7c:	f000 f85e 	bl	8011b3c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8011a80:	4604      	mov	r4, r0
 8011a82:	68b8      	ldr	r0, [r7, #8]
 8011a84:	f000 f85a 	bl	8011b3c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8011a88:	4605      	mov	r5, r0
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f000 f856 	bl	8011b3c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8011a90:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8011a92:	461a      	mov	r2, r3
 8011a94:	4629      	mov	r1, r5
 8011a96:	4620      	mov	r0, r4
 8011a98:	f000 f85b 	bl	8011b52 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8011a9c:	4603      	mov	r3, r0
    }
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bdb0      	pop	{r4, r5, r7, pc}

08011aa6 <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 8011aa6:	b480      	push	{r7}
 8011aa8:	b083      	sub	sp, #12
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	370c      	adds	r7, #12
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011abc:	4770      	bx	lr

08011abe <_ZSt12__miter_baseIPPvET_S2_>:
    __miter_base(_Iterator __it)
 8011abe:	b480      	push	{r7}
 8011ac0:	b083      	sub	sp, #12
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	370c      	adds	r7, #12
 8011acc:	46bd      	mov	sp, r7
 8011ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ad2:	4770      	bx	lr

08011ad4 <_ZSt12__niter_baseIPPvET_S2_>:
    __niter_base(_Iterator __it)
 8011ad4:	b480      	push	{r7}
 8011ad6:	b083      	sub	sp, #12
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	4618      	mov	r0, r3
 8011ae0:	370c      	adds	r7, #12
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae8:	4770      	bx	lr

08011aea <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011aea:	b580      	push	{r7, lr}
 8011aec:	b086      	sub	sp, #24
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	60f8      	str	r0, [r7, #12]
 8011af2:	60b9      	str	r1, [r7, #8]
 8011af4:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8011af6:	2301      	movs	r3, #1
 8011af8:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	68b9      	ldr	r1, [r7, #8]
 8011afe:	68f8      	ldr	r0, [r7, #12]
 8011b00:	f000 f839 	bl	8011b76 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 8011b04:	4603      	mov	r3, r0
    }
 8011b06:	4618      	mov	r0, r3
 8011b08:	3718      	adds	r7, #24
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 8011b0e:	b480      	push	{r7}
 8011b10:	b083      	sub	sp, #12
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr

08011b26 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 8011b26:	b480      	push	{r7}
 8011b28:	b083      	sub	sp, #12
 8011b2a:	af00      	add	r7, sp, #0
 8011b2c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	4618      	mov	r0, r3
 8011b32:	370c      	adds	r7, #12
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr

08011b3c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 8011b3c:	b480      	push	{r7}
 8011b3e:	b083      	sub	sp, #12
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
    { return __it; }
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	4618      	mov	r0, r3
 8011b48:	370c      	adds	r7, #12
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b50:	4770      	bx	lr

08011b52 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8011b52:	b580      	push	{r7, lr}
 8011b54:	b086      	sub	sp, #24
 8011b56:	af00      	add	r7, sp, #0
 8011b58:	60f8      	str	r0, [r7, #12]
 8011b5a:	60b9      	str	r1, [r7, #8]
 8011b5c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8011b5e:	2301      	movs	r3, #1
 8011b60:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	68b9      	ldr	r1, [r7, #8]
 8011b66:	68f8      	ldr	r0, [r7, #12]
 8011b68:	f000 f822 	bl	8011bb0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 8011b6c:	4603      	mov	r3, r0
    }
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3718      	adds	r7, #24
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}

08011b76 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011b76:	b580      	push	{r7, lr}
 8011b78:	b086      	sub	sp, #24
 8011b7a:	af00      	add	r7, sp, #0
 8011b7c:	60f8      	str	r0, [r7, #12]
 8011b7e:	60b9      	str	r1, [r7, #8]
 8011b80:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011b82:	68ba      	ldr	r2, [r7, #8]
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	1ad3      	subs	r3, r2, r3
 8011b88:	109b      	asrs	r3, r3, #2
 8011b8a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011b8c:	697b      	ldr	r3, [r7, #20]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d006      	beq.n	8011ba0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011b92:	697b      	ldr	r3, [r7, #20]
 8011b94:	009b      	lsls	r3, r3, #2
 8011b96:	461a      	mov	r2, r3
 8011b98:	68f9      	ldr	r1, [r7, #12]
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f003 f853 	bl	8014c46 <memmove>
	  return __result + _Num;
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	009b      	lsls	r3, r3, #2
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	4413      	add	r3, r2
	}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3718      	adds	r7, #24
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b086      	sub	sp, #24
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	60f8      	str	r0, [r7, #12]
 8011bb8:	60b9      	str	r1, [r7, #8]
 8011bba:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8011bbc:	68ba      	ldr	r2, [r7, #8]
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	1ad3      	subs	r3, r2, r3
 8011bc2:	10db      	asrs	r3, r3, #3
 8011bc4:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d006      	beq.n	8011bda <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	00db      	lsls	r3, r3, #3
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	68f9      	ldr	r1, [r7, #12]
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	f003 f836 	bl	8014c46 <memmove>
	  return __result + _Num;
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	00db      	lsls	r3, r3, #3
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	4413      	add	r3, r2
	}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3718      	adds	r7, #24
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}
	...

08011bec <_Z41__static_initialization_and_destruction_0ii>:
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b082      	sub	sp, #8
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2b01      	cmp	r3, #1
 8011bfa:	d124      	bne.n	8011c46 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c02:	4293      	cmp	r3, r2
 8011c04:	d11f      	bne.n	8011c46 <_Z41__static_initialization_and_destruction_0ii+0x5a>
};const NodeInfo_t nodeData[] = {
 8011c06:	4b19      	ldr	r3, [pc, #100]	; (8011c6c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	4a19      	ldr	r2, [pc, #100]	; (8011c70 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011c0c:	6053      	str	r3, [r2, #4]
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
 8011c0e:	4b17      	ldr	r3, [pc, #92]	; (8011c6c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	3330      	adds	r3, #48	; 0x30
};const NodeInfo_t nodeData[] = {
 8011c14:	4a16      	ldr	r2, [pc, #88]	; (8011c70 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011c16:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8011c1a:	4b14      	ldr	r3, [pc, #80]	; (8011c6c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4a14      	ldr	r2, [pc, #80]	; (8011c70 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011c20:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
 8011c24:	4b11      	ldr	r3, [pc, #68]	; (8011c6c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	3310      	adds	r3, #16
};const NodeInfo_t nodeData[] = {
 8011c2a:	4a11      	ldr	r2, [pc, #68]	; (8011c70 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011c2c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8011c30:	4b0e      	ldr	r3, [pc, #56]	; (8011c6c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	4a0e      	ldr	r2, [pc, #56]	; (8011c70 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8011c36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
static std::vector<void*> overflow_buffers;
 8011c3a:	480e      	ldr	r0, [pc, #56]	; (8011c74 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011c3c:	f7fe ff90 	bl	8010b60 <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8011c40:	480d      	ldr	r0, [pc, #52]	; (8011c78 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8011c42:	f7fe ffbf 	bl	8010bc4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d10a      	bne.n	8011c62 <_Z41__static_initialization_and_destruction_0ii+0x76>
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d105      	bne.n	8011c62 <_Z41__static_initialization_and_destruction_0ii+0x76>
 8011c56:	4808      	ldr	r0, [pc, #32]	; (8011c78 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8011c58:	f000 f810 	bl	8011c7c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8011c5c:	4805      	ldr	r0, [pc, #20]	; (8011c74 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8011c5e:	f000 f828 	bl	8011cb2 <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 8011c62:	bf00      	nop
 8011c64:	3708      	adds	r7, #8
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}
 8011c6a:	bf00      	nop
 8011c6c:	200009c0 	.word	0x200009c0
 8011c70:	2000067c 	.word	0x2000067c
 8011c74:	20000dac 	.word	0x20000dac
 8011c78:	20000db8 	.word	0x20000db8

08011c7c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8011c7c:	b5b0      	push	{r4, r5, r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681c      	ldr	r4, [r3, #0]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7ff fc3d 	bl	801150e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8011c94:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011c96:	461a      	mov	r2, r3
 8011c98:	4629      	mov	r1, r5
 8011c9a:	4620      	mov	r0, r4
 8011c9c:	f7ff fc5b 	bl	8011556 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	f7ff f927 	bl	8010ef6 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4618      	mov	r0, r3
 8011cac:	3708      	adds	r7, #8
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bdb0      	pop	{r4, r5, r7, pc}

08011cb2 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8011cb2:	b5b0      	push	{r4, r5, r7, lr}
 8011cb4:	b082      	sub	sp, #8
 8011cb6:	af00      	add	r7, sp, #0
 8011cb8:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681c      	ldr	r4, [r3, #0]
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7ff fb04 	bl	80112d2 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8011cca:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8011ccc:	461a      	mov	r2, r3
 8011cce:	4629      	mov	r1, r5
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	f7ff fb22 	bl	801131a <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7ff f81d 	bl	8010d18 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3708      	adds	r7, #8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bdb0      	pop	{r4, r5, r7, pc}

08011ce8 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	af00      	add	r7, sp, #0
 8011cec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011cf0:	2001      	movs	r0, #1
 8011cf2:	f7ff ff7b 	bl	8011bec <_Z41__static_initialization_and_destruction_0ii>
 8011cf6:	bd80      	pop	{r7, pc}

08011cf8 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8011cf8:	b580      	push	{r7, lr}
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011d00:	2000      	movs	r0, #0
 8011d02:	f7ff ff73 	bl	8011bec <_Z41__static_initialization_and_destruction_0ii>
 8011d06:	bd80      	pop	{r7, pc}

08011d08 <_ZdaPv>:
 8011d08:	f000 b81c 	b.w	8011d44 <_ZdlPv>

08011d0c <_Znaj>:
 8011d0c:	f000 b800 	b.w	8011d10 <_Znwj>

08011d10 <_Znwj>:
 8011d10:	b510      	push	{r4, lr}
 8011d12:	2800      	cmp	r0, #0
 8011d14:	bf14      	ite	ne
 8011d16:	4604      	movne	r4, r0
 8011d18:	2401      	moveq	r4, #1
 8011d1a:	4620      	mov	r0, r4
 8011d1c:	f002 ff78 	bl	8014c10 <malloc>
 8011d20:	b930      	cbnz	r0, 8011d30 <_Znwj+0x20>
 8011d22:	f000 f807 	bl	8011d34 <_ZSt15get_new_handlerv>
 8011d26:	b908      	cbnz	r0, 8011d2c <_Znwj+0x1c>
 8011d28:	f002 fe95 	bl	8014a56 <abort>
 8011d2c:	4780      	blx	r0
 8011d2e:	e7f4      	b.n	8011d1a <_Znwj+0xa>
 8011d30:	bd10      	pop	{r4, pc}
	...

08011d34 <_ZSt15get_new_handlerv>:
 8011d34:	4b02      	ldr	r3, [pc, #8]	; (8011d40 <_ZSt15get_new_handlerv+0xc>)
 8011d36:	6818      	ldr	r0, [r3, #0]
 8011d38:	f3bf 8f5b 	dmb	ish
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	20000dc4 	.word	0x20000dc4

08011d44 <_ZdlPv>:
 8011d44:	f002 bf6c 	b.w	8014c20 <free>

08011d48 <_ZSt17__throw_bad_allocv>:
 8011d48:	b508      	push	{r3, lr}
 8011d4a:	f002 fe84 	bl	8014a56 <abort>

08011d4e <_ZSt20__throw_length_errorPKc>:
 8011d4e:	b508      	push	{r3, lr}
 8011d50:	f002 fe81 	bl	8014a56 <abort>
 8011d54:	0000      	movs	r0, r0
	...

08011d58 <cos>:
 8011d58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d5a:	ec51 0b10 	vmov	r0, r1, d0
 8011d5e:	4a1e      	ldr	r2, [pc, #120]	; (8011dd8 <cos+0x80>)
 8011d60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011d64:	4293      	cmp	r3, r2
 8011d66:	dc06      	bgt.n	8011d76 <cos+0x1e>
 8011d68:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011dd0 <cos+0x78>
 8011d6c:	f001 feb4 	bl	8013ad8 <__kernel_cos>
 8011d70:	ec51 0b10 	vmov	r0, r1, d0
 8011d74:	e007      	b.n	8011d86 <cos+0x2e>
 8011d76:	4a19      	ldr	r2, [pc, #100]	; (8011ddc <cos+0x84>)
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	dd09      	ble.n	8011d90 <cos+0x38>
 8011d7c:	ee10 2a10 	vmov	r2, s0
 8011d80:	460b      	mov	r3, r1
 8011d82:	f7ee fa99 	bl	80002b8 <__aeabi_dsub>
 8011d86:	ec41 0b10 	vmov	d0, r0, r1
 8011d8a:	b005      	add	sp, #20
 8011d8c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d90:	4668      	mov	r0, sp
 8011d92:	f001 f9e1 	bl	8013158 <__ieee754_rem_pio2>
 8011d96:	f000 0003 	and.w	r0, r0, #3
 8011d9a:	2801      	cmp	r0, #1
 8011d9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011da0:	ed9d 0b00 	vldr	d0, [sp]
 8011da4:	d007      	beq.n	8011db6 <cos+0x5e>
 8011da6:	2802      	cmp	r0, #2
 8011da8:	d00e      	beq.n	8011dc8 <cos+0x70>
 8011daa:	2800      	cmp	r0, #0
 8011dac:	d0de      	beq.n	8011d6c <cos+0x14>
 8011dae:	2001      	movs	r0, #1
 8011db0:	f002 fa9a 	bl	80142e8 <__kernel_sin>
 8011db4:	e7dc      	b.n	8011d70 <cos+0x18>
 8011db6:	f002 fa97 	bl	80142e8 <__kernel_sin>
 8011dba:	ec53 2b10 	vmov	r2, r3, d0
 8011dbe:	ee10 0a10 	vmov	r0, s0
 8011dc2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011dc6:	e7de      	b.n	8011d86 <cos+0x2e>
 8011dc8:	f001 fe86 	bl	8013ad8 <__kernel_cos>
 8011dcc:	e7f5      	b.n	8011dba <cos+0x62>
 8011dce:	bf00      	nop
	...
 8011dd8:	3fe921fb 	.word	0x3fe921fb
 8011ddc:	7fefffff 	.word	0x7fefffff

08011de0 <floor>:
 8011de0:	ec51 0b10 	vmov	r0, r1, d0
 8011de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011dec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011df0:	2e13      	cmp	r6, #19
 8011df2:	460c      	mov	r4, r1
 8011df4:	ee10 5a10 	vmov	r5, s0
 8011df8:	4680      	mov	r8, r0
 8011dfa:	dc34      	bgt.n	8011e66 <floor+0x86>
 8011dfc:	2e00      	cmp	r6, #0
 8011dfe:	da16      	bge.n	8011e2e <floor+0x4e>
 8011e00:	a335      	add	r3, pc, #212	; (adr r3, 8011ed8 <floor+0xf8>)
 8011e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e06:	f7ee fa59 	bl	80002bc <__adddf3>
 8011e0a:	2200      	movs	r2, #0
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	f7ee fe9b 	bl	8000b48 <__aeabi_dcmpgt>
 8011e12:	b148      	cbz	r0, 8011e28 <floor+0x48>
 8011e14:	2c00      	cmp	r4, #0
 8011e16:	da59      	bge.n	8011ecc <floor+0xec>
 8011e18:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011e1c:	4a30      	ldr	r2, [pc, #192]	; (8011ee0 <floor+0x100>)
 8011e1e:	432b      	orrs	r3, r5
 8011e20:	2500      	movs	r5, #0
 8011e22:	42ab      	cmp	r3, r5
 8011e24:	bf18      	it	ne
 8011e26:	4614      	movne	r4, r2
 8011e28:	4621      	mov	r1, r4
 8011e2a:	4628      	mov	r0, r5
 8011e2c:	e025      	b.n	8011e7a <floor+0x9a>
 8011e2e:	4f2d      	ldr	r7, [pc, #180]	; (8011ee4 <floor+0x104>)
 8011e30:	4137      	asrs	r7, r6
 8011e32:	ea01 0307 	and.w	r3, r1, r7
 8011e36:	4303      	orrs	r3, r0
 8011e38:	d01f      	beq.n	8011e7a <floor+0x9a>
 8011e3a:	a327      	add	r3, pc, #156	; (adr r3, 8011ed8 <floor+0xf8>)
 8011e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e40:	f7ee fa3c 	bl	80002bc <__adddf3>
 8011e44:	2200      	movs	r2, #0
 8011e46:	2300      	movs	r3, #0
 8011e48:	f7ee fe7e 	bl	8000b48 <__aeabi_dcmpgt>
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	d0eb      	beq.n	8011e28 <floor+0x48>
 8011e50:	2c00      	cmp	r4, #0
 8011e52:	bfbe      	ittt	lt
 8011e54:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011e58:	fa43 f606 	asrlt.w	r6, r3, r6
 8011e5c:	19a4      	addlt	r4, r4, r6
 8011e5e:	ea24 0407 	bic.w	r4, r4, r7
 8011e62:	2500      	movs	r5, #0
 8011e64:	e7e0      	b.n	8011e28 <floor+0x48>
 8011e66:	2e33      	cmp	r6, #51	; 0x33
 8011e68:	dd0b      	ble.n	8011e82 <floor+0xa2>
 8011e6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011e6e:	d104      	bne.n	8011e7a <floor+0x9a>
 8011e70:	ee10 2a10 	vmov	r2, s0
 8011e74:	460b      	mov	r3, r1
 8011e76:	f7ee fa21 	bl	80002bc <__adddf3>
 8011e7a:	ec41 0b10 	vmov	d0, r0, r1
 8011e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e82:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011e86:	f04f 33ff 	mov.w	r3, #4294967295
 8011e8a:	fa23 f707 	lsr.w	r7, r3, r7
 8011e8e:	4207      	tst	r7, r0
 8011e90:	d0f3      	beq.n	8011e7a <floor+0x9a>
 8011e92:	a311      	add	r3, pc, #68	; (adr r3, 8011ed8 <floor+0xf8>)
 8011e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e98:	f7ee fa10 	bl	80002bc <__adddf3>
 8011e9c:	2200      	movs	r2, #0
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	f7ee fe52 	bl	8000b48 <__aeabi_dcmpgt>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	d0bf      	beq.n	8011e28 <floor+0x48>
 8011ea8:	2c00      	cmp	r4, #0
 8011eaa:	da02      	bge.n	8011eb2 <floor+0xd2>
 8011eac:	2e14      	cmp	r6, #20
 8011eae:	d103      	bne.n	8011eb8 <floor+0xd8>
 8011eb0:	3401      	adds	r4, #1
 8011eb2:	ea25 0507 	bic.w	r5, r5, r7
 8011eb6:	e7b7      	b.n	8011e28 <floor+0x48>
 8011eb8:	2301      	movs	r3, #1
 8011eba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011ebe:	fa03 f606 	lsl.w	r6, r3, r6
 8011ec2:	4435      	add	r5, r6
 8011ec4:	4545      	cmp	r5, r8
 8011ec6:	bf38      	it	cc
 8011ec8:	18e4      	addcc	r4, r4, r3
 8011eca:	e7f2      	b.n	8011eb2 <floor+0xd2>
 8011ecc:	2500      	movs	r5, #0
 8011ece:	462c      	mov	r4, r5
 8011ed0:	e7aa      	b.n	8011e28 <floor+0x48>
 8011ed2:	bf00      	nop
 8011ed4:	f3af 8000 	nop.w
 8011ed8:	8800759c 	.word	0x8800759c
 8011edc:	7e37e43c 	.word	0x7e37e43c
 8011ee0:	bff00000 	.word	0xbff00000
 8011ee4:	000fffff 	.word	0x000fffff

08011ee8 <frexp>:
 8011ee8:	b570      	push	{r4, r5, r6, lr}
 8011eea:	2100      	movs	r1, #0
 8011eec:	ec55 4b10 	vmov	r4, r5, d0
 8011ef0:	6001      	str	r1, [r0, #0]
 8011ef2:	4916      	ldr	r1, [pc, #88]	; (8011f4c <frexp+0x64>)
 8011ef4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011ef8:	428b      	cmp	r3, r1
 8011efa:	4606      	mov	r6, r0
 8011efc:	462a      	mov	r2, r5
 8011efe:	dc22      	bgt.n	8011f46 <frexp+0x5e>
 8011f00:	ee10 1a10 	vmov	r1, s0
 8011f04:	4319      	orrs	r1, r3
 8011f06:	d01e      	beq.n	8011f46 <frexp+0x5e>
 8011f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011f0c:	da0d      	bge.n	8011f2a <frexp+0x42>
 8011f0e:	2200      	movs	r2, #0
 8011f10:	4b0f      	ldr	r3, [pc, #60]	; (8011f50 <frexp+0x68>)
 8011f12:	ee10 0a10 	vmov	r0, s0
 8011f16:	4629      	mov	r1, r5
 8011f18:	f7ee fb86 	bl	8000628 <__aeabi_dmul>
 8011f1c:	460a      	mov	r2, r1
 8011f1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011f22:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8011f26:	4604      	mov	r4, r0
 8011f28:	6031      	str	r1, [r6, #0]
 8011f2a:	6831      	ldr	r1, [r6, #0]
 8011f2c:	151b      	asrs	r3, r3, #20
 8011f2e:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8011f32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011f36:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8011f3a:	440b      	add	r3, r1
 8011f3c:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8011f40:	6033      	str	r3, [r6, #0]
 8011f42:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8011f46:	ec45 4b10 	vmov	d0, r4, r5
 8011f4a:	bd70      	pop	{r4, r5, r6, pc}
 8011f4c:	7fefffff 	.word	0x7fefffff
 8011f50:	43500000 	.word	0x43500000

08011f54 <round>:
 8011f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f56:	ec57 6b10 	vmov	r6, r7, d0
 8011f5a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8011f5e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8011f62:	2c13      	cmp	r4, #19
 8011f64:	463b      	mov	r3, r7
 8011f66:	463d      	mov	r5, r7
 8011f68:	dc17      	bgt.n	8011f9a <round+0x46>
 8011f6a:	2c00      	cmp	r4, #0
 8011f6c:	da09      	bge.n	8011f82 <round+0x2e>
 8011f6e:	3401      	adds	r4, #1
 8011f70:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8011f74:	d103      	bne.n	8011f7e <round+0x2a>
 8011f76:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011f7a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011f7e:	2100      	movs	r1, #0
 8011f80:	e02c      	b.n	8011fdc <round+0x88>
 8011f82:	4a18      	ldr	r2, [pc, #96]	; (8011fe4 <round+0x90>)
 8011f84:	4122      	asrs	r2, r4
 8011f86:	4217      	tst	r7, r2
 8011f88:	d100      	bne.n	8011f8c <round+0x38>
 8011f8a:	b19e      	cbz	r6, 8011fb4 <round+0x60>
 8011f8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011f90:	4123      	asrs	r3, r4
 8011f92:	442b      	add	r3, r5
 8011f94:	ea23 0302 	bic.w	r3, r3, r2
 8011f98:	e7f1      	b.n	8011f7e <round+0x2a>
 8011f9a:	2c33      	cmp	r4, #51	; 0x33
 8011f9c:	dd0d      	ble.n	8011fba <round+0x66>
 8011f9e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8011fa2:	d107      	bne.n	8011fb4 <round+0x60>
 8011fa4:	4630      	mov	r0, r6
 8011fa6:	4639      	mov	r1, r7
 8011fa8:	ee10 2a10 	vmov	r2, s0
 8011fac:	f7ee f986 	bl	80002bc <__adddf3>
 8011fb0:	4606      	mov	r6, r0
 8011fb2:	460f      	mov	r7, r1
 8011fb4:	ec47 6b10 	vmov	d0, r6, r7
 8011fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fba:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8011fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8011fc2:	40d0      	lsrs	r0, r2
 8011fc4:	4206      	tst	r6, r0
 8011fc6:	d0f5      	beq.n	8011fb4 <round+0x60>
 8011fc8:	2201      	movs	r2, #1
 8011fca:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8011fce:	fa02 f404 	lsl.w	r4, r2, r4
 8011fd2:	1931      	adds	r1, r6, r4
 8011fd4:	bf28      	it	cs
 8011fd6:	189b      	addcs	r3, r3, r2
 8011fd8:	ea21 0100 	bic.w	r1, r1, r0
 8011fdc:	461f      	mov	r7, r3
 8011fde:	460e      	mov	r6, r1
 8011fe0:	e7e8      	b.n	8011fb4 <round+0x60>
 8011fe2:	bf00      	nop
 8011fe4:	000fffff 	.word	0x000fffff

08011fe8 <sin>:
 8011fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fea:	ec51 0b10 	vmov	r0, r1, d0
 8011fee:	4a20      	ldr	r2, [pc, #128]	; (8012070 <sin+0x88>)
 8011ff0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	dc07      	bgt.n	8012008 <sin+0x20>
 8011ff8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012068 <sin+0x80>
 8011ffc:	2000      	movs	r0, #0
 8011ffe:	f002 f973 	bl	80142e8 <__kernel_sin>
 8012002:	ec51 0b10 	vmov	r0, r1, d0
 8012006:	e007      	b.n	8012018 <sin+0x30>
 8012008:	4a1a      	ldr	r2, [pc, #104]	; (8012074 <sin+0x8c>)
 801200a:	4293      	cmp	r3, r2
 801200c:	dd09      	ble.n	8012022 <sin+0x3a>
 801200e:	ee10 2a10 	vmov	r2, s0
 8012012:	460b      	mov	r3, r1
 8012014:	f7ee f950 	bl	80002b8 <__aeabi_dsub>
 8012018:	ec41 0b10 	vmov	d0, r0, r1
 801201c:	b005      	add	sp, #20
 801201e:	f85d fb04 	ldr.w	pc, [sp], #4
 8012022:	4668      	mov	r0, sp
 8012024:	f001 f898 	bl	8013158 <__ieee754_rem_pio2>
 8012028:	f000 0003 	and.w	r0, r0, #3
 801202c:	2801      	cmp	r0, #1
 801202e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012032:	ed9d 0b00 	vldr	d0, [sp]
 8012036:	d004      	beq.n	8012042 <sin+0x5a>
 8012038:	2802      	cmp	r0, #2
 801203a:	d005      	beq.n	8012048 <sin+0x60>
 801203c:	b970      	cbnz	r0, 801205c <sin+0x74>
 801203e:	2001      	movs	r0, #1
 8012040:	e7dd      	b.n	8011ffe <sin+0x16>
 8012042:	f001 fd49 	bl	8013ad8 <__kernel_cos>
 8012046:	e7dc      	b.n	8012002 <sin+0x1a>
 8012048:	2001      	movs	r0, #1
 801204a:	f002 f94d 	bl	80142e8 <__kernel_sin>
 801204e:	ec53 2b10 	vmov	r2, r3, d0
 8012052:	ee10 0a10 	vmov	r0, s0
 8012056:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801205a:	e7dd      	b.n	8012018 <sin+0x30>
 801205c:	f001 fd3c 	bl	8013ad8 <__kernel_cos>
 8012060:	e7f5      	b.n	801204e <sin+0x66>
 8012062:	bf00      	nop
 8012064:	f3af 8000 	nop.w
	...
 8012070:	3fe921fb 	.word	0x3fe921fb
 8012074:	7fefffff 	.word	0x7fefffff

08012078 <tan>:
 8012078:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801207a:	ec51 0b10 	vmov	r0, r1, d0
 801207e:	4a14      	ldr	r2, [pc, #80]	; (80120d0 <tan+0x58>)
 8012080:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012084:	4293      	cmp	r3, r2
 8012086:	dc05      	bgt.n	8012094 <tan+0x1c>
 8012088:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 80120c8 <tan+0x50>
 801208c:	2001      	movs	r0, #1
 801208e:	f002 f9e7 	bl	8014460 <__kernel_tan>
 8012092:	e009      	b.n	80120a8 <tan+0x30>
 8012094:	4a0f      	ldr	r2, [pc, #60]	; (80120d4 <tan+0x5c>)
 8012096:	4293      	cmp	r3, r2
 8012098:	dd09      	ble.n	80120ae <tan+0x36>
 801209a:	ee10 2a10 	vmov	r2, s0
 801209e:	460b      	mov	r3, r1
 80120a0:	f7ee f90a 	bl	80002b8 <__aeabi_dsub>
 80120a4:	ec41 0b10 	vmov	d0, r0, r1
 80120a8:	b005      	add	sp, #20
 80120aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80120ae:	4668      	mov	r0, sp
 80120b0:	f001 f852 	bl	8013158 <__ieee754_rem_pio2>
 80120b4:	0040      	lsls	r0, r0, #1
 80120b6:	f000 0002 	and.w	r0, r0, #2
 80120ba:	f1c0 0001 	rsb	r0, r0, #1
 80120be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80120c2:	ed9d 0b00 	vldr	d0, [sp]
 80120c6:	e7e2      	b.n	801208e <tan+0x16>
	...
 80120d0:	3fe921fb 	.word	0x3fe921fb
 80120d4:	7fefffff 	.word	0x7fefffff

080120d8 <roundf>:
 80120d8:	ee10 0a10 	vmov	r0, s0
 80120dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80120e0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80120e4:	2a16      	cmp	r2, #22
 80120e6:	dc15      	bgt.n	8012114 <roundf+0x3c>
 80120e8:	2a00      	cmp	r2, #0
 80120ea:	da08      	bge.n	80120fe <roundf+0x26>
 80120ec:	3201      	adds	r2, #1
 80120ee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80120f2:	d101      	bne.n	80120f8 <roundf+0x20>
 80120f4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80120f8:	ee00 3a10 	vmov	s0, r3
 80120fc:	4770      	bx	lr
 80120fe:	4908      	ldr	r1, [pc, #32]	; (8012120 <roundf+0x48>)
 8012100:	4111      	asrs	r1, r2
 8012102:	4208      	tst	r0, r1
 8012104:	d0fa      	beq.n	80120fc <roundf+0x24>
 8012106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801210a:	4113      	asrs	r3, r2
 801210c:	4403      	add	r3, r0
 801210e:	ea23 0301 	bic.w	r3, r3, r1
 8012112:	e7f1      	b.n	80120f8 <roundf+0x20>
 8012114:	2a80      	cmp	r2, #128	; 0x80
 8012116:	d1f1      	bne.n	80120fc <roundf+0x24>
 8012118:	ee30 0a00 	vadd.f32	s0, s0, s0
 801211c:	4770      	bx	lr
 801211e:	bf00      	nop
 8012120:	007fffff 	.word	0x007fffff

08012124 <pow>:
 8012124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012128:	ed2d 8b04 	vpush	{d8-d9}
 801212c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8012400 <pow+0x2dc>
 8012130:	b08d      	sub	sp, #52	; 0x34
 8012132:	ec57 6b10 	vmov	r6, r7, d0
 8012136:	ec55 4b11 	vmov	r4, r5, d1
 801213a:	f000 fafd 	bl	8012738 <__ieee754_pow>
 801213e:	f999 3000 	ldrsb.w	r3, [r9]
 8012142:	9300      	str	r3, [sp, #0]
 8012144:	3301      	adds	r3, #1
 8012146:	eeb0 8a40 	vmov.f32	s16, s0
 801214a:	eef0 8a60 	vmov.f32	s17, s1
 801214e:	46c8      	mov	r8, r9
 8012150:	d05f      	beq.n	8012212 <pow+0xee>
 8012152:	4622      	mov	r2, r4
 8012154:	462b      	mov	r3, r5
 8012156:	4620      	mov	r0, r4
 8012158:	4629      	mov	r1, r5
 801215a:	f7ee fcff 	bl	8000b5c <__aeabi_dcmpun>
 801215e:	4683      	mov	fp, r0
 8012160:	2800      	cmp	r0, #0
 8012162:	d156      	bne.n	8012212 <pow+0xee>
 8012164:	4632      	mov	r2, r6
 8012166:	463b      	mov	r3, r7
 8012168:	4630      	mov	r0, r6
 801216a:	4639      	mov	r1, r7
 801216c:	f7ee fcf6 	bl	8000b5c <__aeabi_dcmpun>
 8012170:	9001      	str	r0, [sp, #4]
 8012172:	b1e8      	cbz	r0, 80121b0 <pow+0x8c>
 8012174:	2200      	movs	r2, #0
 8012176:	2300      	movs	r3, #0
 8012178:	4620      	mov	r0, r4
 801217a:	4629      	mov	r1, r5
 801217c:	f7ee fcbc 	bl	8000af8 <__aeabi_dcmpeq>
 8012180:	2800      	cmp	r0, #0
 8012182:	d046      	beq.n	8012212 <pow+0xee>
 8012184:	2301      	movs	r3, #1
 8012186:	9302      	str	r3, [sp, #8]
 8012188:	4b96      	ldr	r3, [pc, #600]	; (80123e4 <pow+0x2c0>)
 801218a:	9303      	str	r3, [sp, #12]
 801218c:	4b96      	ldr	r3, [pc, #600]	; (80123e8 <pow+0x2c4>)
 801218e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8012192:	2200      	movs	r2, #0
 8012194:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012198:	9b00      	ldr	r3, [sp, #0]
 801219a:	2b02      	cmp	r3, #2
 801219c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80121a0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80121a4:	d033      	beq.n	801220e <pow+0xea>
 80121a6:	a802      	add	r0, sp, #8
 80121a8:	f002 fb37 	bl	801481a <matherr>
 80121ac:	bb48      	cbnz	r0, 8012202 <pow+0xde>
 80121ae:	e05d      	b.n	801226c <pow+0x148>
 80121b0:	f04f 0a00 	mov.w	sl, #0
 80121b4:	f04f 0b00 	mov.w	fp, #0
 80121b8:	4652      	mov	r2, sl
 80121ba:	465b      	mov	r3, fp
 80121bc:	4630      	mov	r0, r6
 80121be:	4639      	mov	r1, r7
 80121c0:	f7ee fc9a 	bl	8000af8 <__aeabi_dcmpeq>
 80121c4:	ec4b ab19 	vmov	d9, sl, fp
 80121c8:	2800      	cmp	r0, #0
 80121ca:	d054      	beq.n	8012276 <pow+0x152>
 80121cc:	4652      	mov	r2, sl
 80121ce:	465b      	mov	r3, fp
 80121d0:	4620      	mov	r0, r4
 80121d2:	4629      	mov	r1, r5
 80121d4:	f7ee fc90 	bl	8000af8 <__aeabi_dcmpeq>
 80121d8:	4680      	mov	r8, r0
 80121da:	b318      	cbz	r0, 8012224 <pow+0x100>
 80121dc:	2301      	movs	r3, #1
 80121de:	9302      	str	r3, [sp, #8]
 80121e0:	4b80      	ldr	r3, [pc, #512]	; (80123e4 <pow+0x2c0>)
 80121e2:	9303      	str	r3, [sp, #12]
 80121e4:	9b01      	ldr	r3, [sp, #4]
 80121e6:	930a      	str	r3, [sp, #40]	; 0x28
 80121e8:	9b00      	ldr	r3, [sp, #0]
 80121ea:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80121ee:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80121f2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d0d5      	beq.n	80121a6 <pow+0x82>
 80121fa:	4b7b      	ldr	r3, [pc, #492]	; (80123e8 <pow+0x2c4>)
 80121fc:	2200      	movs	r2, #0
 80121fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012204:	b11b      	cbz	r3, 801220e <pow+0xea>
 8012206:	f002 fc57 	bl	8014ab8 <__errno>
 801220a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801220c:	6003      	str	r3, [r0, #0]
 801220e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8012212:	eeb0 0a48 	vmov.f32	s0, s16
 8012216:	eef0 0a68 	vmov.f32	s1, s17
 801221a:	b00d      	add	sp, #52	; 0x34
 801221c:	ecbd 8b04 	vpop	{d8-d9}
 8012220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012224:	ec45 4b10 	vmov	d0, r4, r5
 8012228:	f002 faef 	bl	801480a <finite>
 801222c:	2800      	cmp	r0, #0
 801222e:	d0f0      	beq.n	8012212 <pow+0xee>
 8012230:	4652      	mov	r2, sl
 8012232:	465b      	mov	r3, fp
 8012234:	4620      	mov	r0, r4
 8012236:	4629      	mov	r1, r5
 8012238:	f7ee fc68 	bl	8000b0c <__aeabi_dcmplt>
 801223c:	2800      	cmp	r0, #0
 801223e:	d0e8      	beq.n	8012212 <pow+0xee>
 8012240:	2301      	movs	r3, #1
 8012242:	9302      	str	r3, [sp, #8]
 8012244:	4b67      	ldr	r3, [pc, #412]	; (80123e4 <pow+0x2c0>)
 8012246:	9303      	str	r3, [sp, #12]
 8012248:	f999 3000 	ldrsb.w	r3, [r9]
 801224c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8012250:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012254:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012258:	b913      	cbnz	r3, 8012260 <pow+0x13c>
 801225a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801225e:	e7a2      	b.n	80121a6 <pow+0x82>
 8012260:	4962      	ldr	r1, [pc, #392]	; (80123ec <pow+0x2c8>)
 8012262:	2000      	movs	r0, #0
 8012264:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012268:	2b02      	cmp	r3, #2
 801226a:	d19c      	bne.n	80121a6 <pow+0x82>
 801226c:	f002 fc24 	bl	8014ab8 <__errno>
 8012270:	2321      	movs	r3, #33	; 0x21
 8012272:	6003      	str	r3, [r0, #0]
 8012274:	e7c5      	b.n	8012202 <pow+0xde>
 8012276:	eeb0 0a48 	vmov.f32	s0, s16
 801227a:	eef0 0a68 	vmov.f32	s1, s17
 801227e:	f002 fac4 	bl	801480a <finite>
 8012282:	9000      	str	r0, [sp, #0]
 8012284:	2800      	cmp	r0, #0
 8012286:	f040 8081 	bne.w	801238c <pow+0x268>
 801228a:	ec47 6b10 	vmov	d0, r6, r7
 801228e:	f002 fabc 	bl	801480a <finite>
 8012292:	2800      	cmp	r0, #0
 8012294:	d07a      	beq.n	801238c <pow+0x268>
 8012296:	ec45 4b10 	vmov	d0, r4, r5
 801229a:	f002 fab6 	bl	801480a <finite>
 801229e:	2800      	cmp	r0, #0
 80122a0:	d074      	beq.n	801238c <pow+0x268>
 80122a2:	ec53 2b18 	vmov	r2, r3, d8
 80122a6:	ee18 0a10 	vmov	r0, s16
 80122aa:	4619      	mov	r1, r3
 80122ac:	f7ee fc56 	bl	8000b5c <__aeabi_dcmpun>
 80122b0:	f999 9000 	ldrsb.w	r9, [r9]
 80122b4:	4b4b      	ldr	r3, [pc, #300]	; (80123e4 <pow+0x2c0>)
 80122b6:	b1b0      	cbz	r0, 80122e6 <pow+0x1c2>
 80122b8:	2201      	movs	r2, #1
 80122ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80122be:	9b00      	ldr	r3, [sp, #0]
 80122c0:	930a      	str	r3, [sp, #40]	; 0x28
 80122c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80122c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80122ca:	f1b9 0f00 	cmp.w	r9, #0
 80122ce:	d0c4      	beq.n	801225a <pow+0x136>
 80122d0:	4652      	mov	r2, sl
 80122d2:	465b      	mov	r3, fp
 80122d4:	4650      	mov	r0, sl
 80122d6:	4659      	mov	r1, fp
 80122d8:	f7ee fad0 	bl	800087c <__aeabi_ddiv>
 80122dc:	f1b9 0f02 	cmp.w	r9, #2
 80122e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80122e4:	e7c1      	b.n	801226a <pow+0x146>
 80122e6:	2203      	movs	r2, #3
 80122e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80122ec:	900a      	str	r0, [sp, #40]	; 0x28
 80122ee:	4629      	mov	r1, r5
 80122f0:	4620      	mov	r0, r4
 80122f2:	2200      	movs	r2, #0
 80122f4:	4b3e      	ldr	r3, [pc, #248]	; (80123f0 <pow+0x2cc>)
 80122f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80122fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80122fe:	f7ee f993 	bl	8000628 <__aeabi_dmul>
 8012302:	4604      	mov	r4, r0
 8012304:	460d      	mov	r5, r1
 8012306:	f1b9 0f00 	cmp.w	r9, #0
 801230a:	d124      	bne.n	8012356 <pow+0x232>
 801230c:	4b39      	ldr	r3, [pc, #228]	; (80123f4 <pow+0x2d0>)
 801230e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012312:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012316:	4630      	mov	r0, r6
 8012318:	4652      	mov	r2, sl
 801231a:	465b      	mov	r3, fp
 801231c:	4639      	mov	r1, r7
 801231e:	f7ee fbf5 	bl	8000b0c <__aeabi_dcmplt>
 8012322:	2800      	cmp	r0, #0
 8012324:	d056      	beq.n	80123d4 <pow+0x2b0>
 8012326:	ec45 4b10 	vmov	d0, r4, r5
 801232a:	f002 fa81 	bl	8014830 <rint>
 801232e:	4622      	mov	r2, r4
 8012330:	462b      	mov	r3, r5
 8012332:	ec51 0b10 	vmov	r0, r1, d0
 8012336:	f7ee fbdf 	bl	8000af8 <__aeabi_dcmpeq>
 801233a:	b920      	cbnz	r0, 8012346 <pow+0x222>
 801233c:	4b2e      	ldr	r3, [pc, #184]	; (80123f8 <pow+0x2d4>)
 801233e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012342:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012346:	f998 3000 	ldrsb.w	r3, [r8]
 801234a:	2b02      	cmp	r3, #2
 801234c:	d142      	bne.n	80123d4 <pow+0x2b0>
 801234e:	f002 fbb3 	bl	8014ab8 <__errno>
 8012352:	2322      	movs	r3, #34	; 0x22
 8012354:	e78d      	b.n	8012272 <pow+0x14e>
 8012356:	4b29      	ldr	r3, [pc, #164]	; (80123fc <pow+0x2d8>)
 8012358:	2200      	movs	r2, #0
 801235a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801235e:	4630      	mov	r0, r6
 8012360:	4652      	mov	r2, sl
 8012362:	465b      	mov	r3, fp
 8012364:	4639      	mov	r1, r7
 8012366:	f7ee fbd1 	bl	8000b0c <__aeabi_dcmplt>
 801236a:	2800      	cmp	r0, #0
 801236c:	d0eb      	beq.n	8012346 <pow+0x222>
 801236e:	ec45 4b10 	vmov	d0, r4, r5
 8012372:	f002 fa5d 	bl	8014830 <rint>
 8012376:	4622      	mov	r2, r4
 8012378:	462b      	mov	r3, r5
 801237a:	ec51 0b10 	vmov	r0, r1, d0
 801237e:	f7ee fbbb 	bl	8000af8 <__aeabi_dcmpeq>
 8012382:	2800      	cmp	r0, #0
 8012384:	d1df      	bne.n	8012346 <pow+0x222>
 8012386:	2200      	movs	r2, #0
 8012388:	4b18      	ldr	r3, [pc, #96]	; (80123ec <pow+0x2c8>)
 801238a:	e7da      	b.n	8012342 <pow+0x21e>
 801238c:	2200      	movs	r2, #0
 801238e:	2300      	movs	r3, #0
 8012390:	ec51 0b18 	vmov	r0, r1, d8
 8012394:	f7ee fbb0 	bl	8000af8 <__aeabi_dcmpeq>
 8012398:	2800      	cmp	r0, #0
 801239a:	f43f af3a 	beq.w	8012212 <pow+0xee>
 801239e:	ec47 6b10 	vmov	d0, r6, r7
 80123a2:	f002 fa32 	bl	801480a <finite>
 80123a6:	2800      	cmp	r0, #0
 80123a8:	f43f af33 	beq.w	8012212 <pow+0xee>
 80123ac:	ec45 4b10 	vmov	d0, r4, r5
 80123b0:	f002 fa2b 	bl	801480a <finite>
 80123b4:	2800      	cmp	r0, #0
 80123b6:	f43f af2c 	beq.w	8012212 <pow+0xee>
 80123ba:	2304      	movs	r3, #4
 80123bc:	9302      	str	r3, [sp, #8]
 80123be:	4b09      	ldr	r3, [pc, #36]	; (80123e4 <pow+0x2c0>)
 80123c0:	9303      	str	r3, [sp, #12]
 80123c2:	2300      	movs	r3, #0
 80123c4:	930a      	str	r3, [sp, #40]	; 0x28
 80123c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80123ca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80123ce:	ed8d 9b08 	vstr	d9, [sp, #32]
 80123d2:	e7b8      	b.n	8012346 <pow+0x222>
 80123d4:	a802      	add	r0, sp, #8
 80123d6:	f002 fa20 	bl	801481a <matherr>
 80123da:	2800      	cmp	r0, #0
 80123dc:	f47f af11 	bne.w	8012202 <pow+0xde>
 80123e0:	e7b5      	b.n	801234e <pow+0x22a>
 80123e2:	bf00      	nop
 80123e4:	08036818 	.word	0x08036818
 80123e8:	3ff00000 	.word	0x3ff00000
 80123ec:	fff00000 	.word	0xfff00000
 80123f0:	3fe00000 	.word	0x3fe00000
 80123f4:	47efffff 	.word	0x47efffff
 80123f8:	c7efffff 	.word	0xc7efffff
 80123fc:	7ff00000 	.word	0x7ff00000
 8012400:	20000784 	.word	0x20000784

08012404 <sqrt>:
 8012404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012408:	ed2d 8b02 	vpush	{d8}
 801240c:	b08b      	sub	sp, #44	; 0x2c
 801240e:	ec55 4b10 	vmov	r4, r5, d0
 8012412:	f001 f893 	bl	801353c <__ieee754_sqrt>
 8012416:	4b26      	ldr	r3, [pc, #152]	; (80124b0 <sqrt+0xac>)
 8012418:	eeb0 8a40 	vmov.f32	s16, s0
 801241c:	eef0 8a60 	vmov.f32	s17, s1
 8012420:	f993 6000 	ldrsb.w	r6, [r3]
 8012424:	1c73      	adds	r3, r6, #1
 8012426:	d02a      	beq.n	801247e <sqrt+0x7a>
 8012428:	4622      	mov	r2, r4
 801242a:	462b      	mov	r3, r5
 801242c:	4620      	mov	r0, r4
 801242e:	4629      	mov	r1, r5
 8012430:	f7ee fb94 	bl	8000b5c <__aeabi_dcmpun>
 8012434:	4607      	mov	r7, r0
 8012436:	bb10      	cbnz	r0, 801247e <sqrt+0x7a>
 8012438:	f04f 0800 	mov.w	r8, #0
 801243c:	f04f 0900 	mov.w	r9, #0
 8012440:	4642      	mov	r2, r8
 8012442:	464b      	mov	r3, r9
 8012444:	4620      	mov	r0, r4
 8012446:	4629      	mov	r1, r5
 8012448:	f7ee fb60 	bl	8000b0c <__aeabi_dcmplt>
 801244c:	b1b8      	cbz	r0, 801247e <sqrt+0x7a>
 801244e:	2301      	movs	r3, #1
 8012450:	9300      	str	r3, [sp, #0]
 8012452:	4b18      	ldr	r3, [pc, #96]	; (80124b4 <sqrt+0xb0>)
 8012454:	9301      	str	r3, [sp, #4]
 8012456:	9708      	str	r7, [sp, #32]
 8012458:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801245c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8012460:	b9b6      	cbnz	r6, 8012490 <sqrt+0x8c>
 8012462:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8012466:	4668      	mov	r0, sp
 8012468:	f002 f9d7 	bl	801481a <matherr>
 801246c:	b1d0      	cbz	r0, 80124a4 <sqrt+0xa0>
 801246e:	9b08      	ldr	r3, [sp, #32]
 8012470:	b11b      	cbz	r3, 801247a <sqrt+0x76>
 8012472:	f002 fb21 	bl	8014ab8 <__errno>
 8012476:	9b08      	ldr	r3, [sp, #32]
 8012478:	6003      	str	r3, [r0, #0]
 801247a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801247e:	eeb0 0a48 	vmov.f32	s0, s16
 8012482:	eef0 0a68 	vmov.f32	s1, s17
 8012486:	b00b      	add	sp, #44	; 0x2c
 8012488:	ecbd 8b02 	vpop	{d8}
 801248c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012490:	4642      	mov	r2, r8
 8012492:	464b      	mov	r3, r9
 8012494:	4640      	mov	r0, r8
 8012496:	4649      	mov	r1, r9
 8012498:	f7ee f9f0 	bl	800087c <__aeabi_ddiv>
 801249c:	2e02      	cmp	r6, #2
 801249e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80124a2:	d1e0      	bne.n	8012466 <sqrt+0x62>
 80124a4:	f002 fb08 	bl	8014ab8 <__errno>
 80124a8:	2321      	movs	r3, #33	; 0x21
 80124aa:	6003      	str	r3, [r0, #0]
 80124ac:	e7df      	b.n	801246e <sqrt+0x6a>
 80124ae:	bf00      	nop
 80124b0:	20000784 	.word	0x20000784
 80124b4:	0803681c 	.word	0x0803681c

080124b8 <expf>:
 80124b8:	b530      	push	{r4, r5, lr}
 80124ba:	ed2d 8b02 	vpush	{d8}
 80124be:	4d35      	ldr	r5, [pc, #212]	; (8012594 <expf+0xdc>)
 80124c0:	b08b      	sub	sp, #44	; 0x2c
 80124c2:	eeb0 8a40 	vmov.f32	s16, s0
 80124c6:	f001 f8e9 	bl	801369c <__ieee754_expf>
 80124ca:	f995 3000 	ldrsb.w	r3, [r5]
 80124ce:	3301      	adds	r3, #1
 80124d0:	ee10 4a10 	vmov	r4, s0
 80124d4:	d030      	beq.n	8012538 <expf+0x80>
 80124d6:	eeb0 0a48 	vmov.f32	s0, s16
 80124da:	f002 faa3 	bl	8014a24 <finitef>
 80124de:	b358      	cbz	r0, 8012538 <expf+0x80>
 80124e0:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8012598 <expf+0xe0>
 80124e4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80124e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ec:	dd35      	ble.n	801255a <expf+0xa2>
 80124ee:	2303      	movs	r3, #3
 80124f0:	9300      	str	r3, [sp, #0]
 80124f2:	4b2a      	ldr	r3, [pc, #168]	; (801259c <expf+0xe4>)
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	ee18 0a10 	vmov	r0, s16
 80124fa:	2300      	movs	r3, #0
 80124fc:	9308      	str	r3, [sp, #32]
 80124fe:	f7ee f83b 	bl	8000578 <__aeabi_f2d>
 8012502:	f995 3000 	ldrsb.w	r3, [r5]
 8012506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801250a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801250e:	b9cb      	cbnz	r3, 8012544 <expf+0x8c>
 8012510:	4b23      	ldr	r3, [pc, #140]	; (80125a0 <expf+0xe8>)
 8012512:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8012516:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801251a:	4668      	mov	r0, sp
 801251c:	f002 f97d 	bl	801481a <matherr>
 8012520:	b1b0      	cbz	r0, 8012550 <expf+0x98>
 8012522:	9b08      	ldr	r3, [sp, #32]
 8012524:	b11b      	cbz	r3, 801252e <expf+0x76>
 8012526:	f002 fac7 	bl	8014ab8 <__errno>
 801252a:	9b08      	ldr	r3, [sp, #32]
 801252c:	6003      	str	r3, [r0, #0]
 801252e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012532:	f7ee fb71 	bl	8000c18 <__aeabi_d2f>
 8012536:	4604      	mov	r4, r0
 8012538:	ee00 4a10 	vmov	s0, r4
 801253c:	b00b      	add	sp, #44	; 0x2c
 801253e:	ecbd 8b02 	vpop	{d8}
 8012542:	bd30      	pop	{r4, r5, pc}
 8012544:	4917      	ldr	r1, [pc, #92]	; (80125a4 <expf+0xec>)
 8012546:	2000      	movs	r0, #0
 8012548:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801254c:	2b02      	cmp	r3, #2
 801254e:	d1e4      	bne.n	801251a <expf+0x62>
 8012550:	f002 fab2 	bl	8014ab8 <__errno>
 8012554:	2322      	movs	r3, #34	; 0x22
 8012556:	6003      	str	r3, [r0, #0]
 8012558:	e7e3      	b.n	8012522 <expf+0x6a>
 801255a:	eddf 7a13 	vldr	s15, [pc, #76]	; 80125a8 <expf+0xf0>
 801255e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8012562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012566:	d5e7      	bpl.n	8012538 <expf+0x80>
 8012568:	2304      	movs	r3, #4
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	4b0b      	ldr	r3, [pc, #44]	; (801259c <expf+0xe4>)
 801256e:	9301      	str	r3, [sp, #4]
 8012570:	ee18 0a10 	vmov	r0, s16
 8012574:	2300      	movs	r3, #0
 8012576:	9308      	str	r3, [sp, #32]
 8012578:	f7ed fffe 	bl	8000578 <__aeabi_f2d>
 801257c:	2300      	movs	r3, #0
 801257e:	2200      	movs	r2, #0
 8012580:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012584:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801258c:	f995 3000 	ldrsb.w	r3, [r5]
 8012590:	e7dc      	b.n	801254c <expf+0x94>
 8012592:	bf00      	nop
 8012594:	20000784 	.word	0x20000784
 8012598:	42b17180 	.word	0x42b17180
 801259c:	08036821 	.word	0x08036821
 80125a0:	47efffff 	.word	0x47efffff
 80125a4:	7ff00000 	.word	0x7ff00000
 80125a8:	c2cff1b5 	.word	0xc2cff1b5

080125ac <log10f>:
 80125ac:	b510      	push	{r4, lr}
 80125ae:	ed2d 8b02 	vpush	{d8}
 80125b2:	b08a      	sub	sp, #40	; 0x28
 80125b4:	eeb0 8a40 	vmov.f32	s16, s0
 80125b8:	f001 fa32 	bl	8013a20 <__ieee754_log10f>
 80125bc:	4b31      	ldr	r3, [pc, #196]	; (8012684 <log10f+0xd8>)
 80125be:	f993 4000 	ldrsb.w	r4, [r3]
 80125c2:	1c63      	adds	r3, r4, #1
 80125c4:	d059      	beq.n	801267a <log10f+0xce>
 80125c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80125ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ce:	d654      	bvs.n	801267a <log10f+0xce>
 80125d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80125d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125d8:	d84f      	bhi.n	801267a <log10f+0xce>
 80125da:	4b2b      	ldr	r3, [pc, #172]	; (8012688 <log10f+0xdc>)
 80125dc:	9301      	str	r3, [sp, #4]
 80125de:	ee18 0a10 	vmov	r0, s16
 80125e2:	2300      	movs	r3, #0
 80125e4:	9308      	str	r3, [sp, #32]
 80125e6:	f7ed ffc7 	bl	8000578 <__aeabi_f2d>
 80125ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80125ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125f2:	b994      	cbnz	r4, 801261a <log10f+0x6e>
 80125f4:	4b25      	ldr	r3, [pc, #148]	; (801268c <log10f+0xe0>)
 80125f6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80125fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80125fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012602:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012606:	d025      	beq.n	8012654 <log10f+0xa8>
 8012608:	2301      	movs	r3, #1
 801260a:	2c02      	cmp	r4, #2
 801260c:	9300      	str	r3, [sp, #0]
 801260e:	d116      	bne.n	801263e <log10f+0x92>
 8012610:	f002 fa52 	bl	8014ab8 <__errno>
 8012614:	2321      	movs	r3, #33	; 0x21
 8012616:	6003      	str	r3, [r0, #0]
 8012618:	e016      	b.n	8012648 <log10f+0x9c>
 801261a:	4b1d      	ldr	r3, [pc, #116]	; (8012690 <log10f+0xe4>)
 801261c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012620:	2200      	movs	r2, #0
 8012622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012626:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801262a:	d1ed      	bne.n	8012608 <log10f+0x5c>
 801262c:	2302      	movs	r3, #2
 801262e:	429c      	cmp	r4, r3
 8012630:	9300      	str	r3, [sp, #0]
 8012632:	d111      	bne.n	8012658 <log10f+0xac>
 8012634:	f002 fa40 	bl	8014ab8 <__errno>
 8012638:	2322      	movs	r3, #34	; 0x22
 801263a:	6003      	str	r3, [r0, #0]
 801263c:	e011      	b.n	8012662 <log10f+0xb6>
 801263e:	4668      	mov	r0, sp
 8012640:	f002 f8eb 	bl	801481a <matherr>
 8012644:	2800      	cmp	r0, #0
 8012646:	d0e3      	beq.n	8012610 <log10f+0x64>
 8012648:	4812      	ldr	r0, [pc, #72]	; (8012694 <log10f+0xe8>)
 801264a:	f002 f8e9 	bl	8014820 <nan>
 801264e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8012652:	e006      	b.n	8012662 <log10f+0xb6>
 8012654:	2302      	movs	r3, #2
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	4668      	mov	r0, sp
 801265a:	f002 f8de 	bl	801481a <matherr>
 801265e:	2800      	cmp	r0, #0
 8012660:	d0e8      	beq.n	8012634 <log10f+0x88>
 8012662:	9b08      	ldr	r3, [sp, #32]
 8012664:	b11b      	cbz	r3, 801266e <log10f+0xc2>
 8012666:	f002 fa27 	bl	8014ab8 <__errno>
 801266a:	9b08      	ldr	r3, [sp, #32]
 801266c:	6003      	str	r3, [r0, #0]
 801266e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012672:	f7ee fad1 	bl	8000c18 <__aeabi_d2f>
 8012676:	ee00 0a10 	vmov	s0, r0
 801267a:	b00a      	add	sp, #40	; 0x28
 801267c:	ecbd 8b02 	vpop	{d8}
 8012680:	bd10      	pop	{r4, pc}
 8012682:	bf00      	nop
 8012684:	20000784 	.word	0x20000784
 8012688:	08036826 	.word	0x08036826
 801268c:	c7efffff 	.word	0xc7efffff
 8012690:	fff00000 	.word	0xfff00000
 8012694:	08036aa3 	.word	0x08036aa3

08012698 <sqrtf>:
 8012698:	b510      	push	{r4, lr}
 801269a:	ed2d 8b02 	vpush	{d8}
 801269e:	b08a      	sub	sp, #40	; 0x28
 80126a0:	eeb0 8a40 	vmov.f32	s16, s0
 80126a4:	f001 fa12 	bl	8013acc <__ieee754_sqrtf>
 80126a8:	4b21      	ldr	r3, [pc, #132]	; (8012730 <sqrtf+0x98>)
 80126aa:	f993 4000 	ldrsb.w	r4, [r3]
 80126ae:	1c63      	adds	r3, r4, #1
 80126b0:	d02c      	beq.n	801270c <sqrtf+0x74>
 80126b2:	eeb4 8a48 	vcmp.f32	s16, s16
 80126b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ba:	d627      	bvs.n	801270c <sqrtf+0x74>
 80126bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80126c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126c4:	d522      	bpl.n	801270c <sqrtf+0x74>
 80126c6:	2301      	movs	r3, #1
 80126c8:	9300      	str	r3, [sp, #0]
 80126ca:	4b1a      	ldr	r3, [pc, #104]	; (8012734 <sqrtf+0x9c>)
 80126cc:	9301      	str	r3, [sp, #4]
 80126ce:	ee18 0a10 	vmov	r0, s16
 80126d2:	2300      	movs	r3, #0
 80126d4:	9308      	str	r3, [sp, #32]
 80126d6:	f7ed ff4f 	bl	8000578 <__aeabi_f2d>
 80126da:	2200      	movs	r2, #0
 80126dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80126e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126e4:	2300      	movs	r3, #0
 80126e6:	b9ac      	cbnz	r4, 8012714 <sqrtf+0x7c>
 80126e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80126ec:	4668      	mov	r0, sp
 80126ee:	f002 f894 	bl	801481a <matherr>
 80126f2:	b1b8      	cbz	r0, 8012724 <sqrtf+0x8c>
 80126f4:	9b08      	ldr	r3, [sp, #32]
 80126f6:	b11b      	cbz	r3, 8012700 <sqrtf+0x68>
 80126f8:	f002 f9de 	bl	8014ab8 <__errno>
 80126fc:	9b08      	ldr	r3, [sp, #32]
 80126fe:	6003      	str	r3, [r0, #0]
 8012700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012704:	f7ee fa88 	bl	8000c18 <__aeabi_d2f>
 8012708:	ee00 0a10 	vmov	s0, r0
 801270c:	b00a      	add	sp, #40	; 0x28
 801270e:	ecbd 8b02 	vpop	{d8}
 8012712:	bd10      	pop	{r4, pc}
 8012714:	4610      	mov	r0, r2
 8012716:	4619      	mov	r1, r3
 8012718:	f7ee f8b0 	bl	800087c <__aeabi_ddiv>
 801271c:	2c02      	cmp	r4, #2
 801271e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012722:	d1e3      	bne.n	80126ec <sqrtf+0x54>
 8012724:	f002 f9c8 	bl	8014ab8 <__errno>
 8012728:	2321      	movs	r3, #33	; 0x21
 801272a:	6003      	str	r3, [r0, #0]
 801272c:	e7e2      	b.n	80126f4 <sqrtf+0x5c>
 801272e:	bf00      	nop
 8012730:	20000784 	.word	0x20000784
 8012734:	0803682d 	.word	0x0803682d

08012738 <__ieee754_pow>:
 8012738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273c:	b091      	sub	sp, #68	; 0x44
 801273e:	ed8d 1b00 	vstr	d1, [sp]
 8012742:	e9dd 2900 	ldrd	r2, r9, [sp]
 8012746:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801274a:	ea58 0302 	orrs.w	r3, r8, r2
 801274e:	ec57 6b10 	vmov	r6, r7, d0
 8012752:	f000 84be 	beq.w	80130d2 <__ieee754_pow+0x99a>
 8012756:	4b7a      	ldr	r3, [pc, #488]	; (8012940 <__ieee754_pow+0x208>)
 8012758:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801275c:	429c      	cmp	r4, r3
 801275e:	463d      	mov	r5, r7
 8012760:	ee10 aa10 	vmov	sl, s0
 8012764:	dc09      	bgt.n	801277a <__ieee754_pow+0x42>
 8012766:	d103      	bne.n	8012770 <__ieee754_pow+0x38>
 8012768:	b93e      	cbnz	r6, 801277a <__ieee754_pow+0x42>
 801276a:	45a0      	cmp	r8, r4
 801276c:	dc0d      	bgt.n	801278a <__ieee754_pow+0x52>
 801276e:	e001      	b.n	8012774 <__ieee754_pow+0x3c>
 8012770:	4598      	cmp	r8, r3
 8012772:	dc02      	bgt.n	801277a <__ieee754_pow+0x42>
 8012774:	4598      	cmp	r8, r3
 8012776:	d10e      	bne.n	8012796 <__ieee754_pow+0x5e>
 8012778:	b16a      	cbz	r2, 8012796 <__ieee754_pow+0x5e>
 801277a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801277e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012782:	ea54 030a 	orrs.w	r3, r4, sl
 8012786:	f000 84a4 	beq.w	80130d2 <__ieee754_pow+0x99a>
 801278a:	486e      	ldr	r0, [pc, #440]	; (8012944 <__ieee754_pow+0x20c>)
 801278c:	b011      	add	sp, #68	; 0x44
 801278e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012792:	f002 b845 	b.w	8014820 <nan>
 8012796:	2d00      	cmp	r5, #0
 8012798:	da53      	bge.n	8012842 <__ieee754_pow+0x10a>
 801279a:	4b6b      	ldr	r3, [pc, #428]	; (8012948 <__ieee754_pow+0x210>)
 801279c:	4598      	cmp	r8, r3
 801279e:	dc4d      	bgt.n	801283c <__ieee754_pow+0x104>
 80127a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80127a4:	4598      	cmp	r8, r3
 80127a6:	dd4c      	ble.n	8012842 <__ieee754_pow+0x10a>
 80127a8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80127ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80127b0:	2b14      	cmp	r3, #20
 80127b2:	dd26      	ble.n	8012802 <__ieee754_pow+0xca>
 80127b4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80127b8:	fa22 f103 	lsr.w	r1, r2, r3
 80127bc:	fa01 f303 	lsl.w	r3, r1, r3
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d13e      	bne.n	8012842 <__ieee754_pow+0x10a>
 80127c4:	f001 0101 	and.w	r1, r1, #1
 80127c8:	f1c1 0b02 	rsb	fp, r1, #2
 80127cc:	2a00      	cmp	r2, #0
 80127ce:	d15b      	bne.n	8012888 <__ieee754_pow+0x150>
 80127d0:	4b5b      	ldr	r3, [pc, #364]	; (8012940 <__ieee754_pow+0x208>)
 80127d2:	4598      	cmp	r8, r3
 80127d4:	d124      	bne.n	8012820 <__ieee754_pow+0xe8>
 80127d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80127da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80127de:	ea53 030a 	orrs.w	r3, r3, sl
 80127e2:	f000 8476 	beq.w	80130d2 <__ieee754_pow+0x99a>
 80127e6:	4b59      	ldr	r3, [pc, #356]	; (801294c <__ieee754_pow+0x214>)
 80127e8:	429c      	cmp	r4, r3
 80127ea:	dd2d      	ble.n	8012848 <__ieee754_pow+0x110>
 80127ec:	f1b9 0f00 	cmp.w	r9, #0
 80127f0:	f280 8473 	bge.w	80130da <__ieee754_pow+0x9a2>
 80127f4:	2000      	movs	r0, #0
 80127f6:	2100      	movs	r1, #0
 80127f8:	ec41 0b10 	vmov	d0, r0, r1
 80127fc:	b011      	add	sp, #68	; 0x44
 80127fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012802:	2a00      	cmp	r2, #0
 8012804:	d13e      	bne.n	8012884 <__ieee754_pow+0x14c>
 8012806:	f1c3 0314 	rsb	r3, r3, #20
 801280a:	fa48 f103 	asr.w	r1, r8, r3
 801280e:	fa01 f303 	lsl.w	r3, r1, r3
 8012812:	4543      	cmp	r3, r8
 8012814:	f040 8469 	bne.w	80130ea <__ieee754_pow+0x9b2>
 8012818:	f001 0101 	and.w	r1, r1, #1
 801281c:	f1c1 0b02 	rsb	fp, r1, #2
 8012820:	4b4b      	ldr	r3, [pc, #300]	; (8012950 <__ieee754_pow+0x218>)
 8012822:	4598      	cmp	r8, r3
 8012824:	d118      	bne.n	8012858 <__ieee754_pow+0x120>
 8012826:	f1b9 0f00 	cmp.w	r9, #0
 801282a:	f280 845a 	bge.w	80130e2 <__ieee754_pow+0x9aa>
 801282e:	4948      	ldr	r1, [pc, #288]	; (8012950 <__ieee754_pow+0x218>)
 8012830:	4632      	mov	r2, r6
 8012832:	463b      	mov	r3, r7
 8012834:	2000      	movs	r0, #0
 8012836:	f7ee f821 	bl	800087c <__aeabi_ddiv>
 801283a:	e7dd      	b.n	80127f8 <__ieee754_pow+0xc0>
 801283c:	f04f 0b02 	mov.w	fp, #2
 8012840:	e7c4      	b.n	80127cc <__ieee754_pow+0x94>
 8012842:	f04f 0b00 	mov.w	fp, #0
 8012846:	e7c1      	b.n	80127cc <__ieee754_pow+0x94>
 8012848:	f1b9 0f00 	cmp.w	r9, #0
 801284c:	dad2      	bge.n	80127f4 <__ieee754_pow+0xbc>
 801284e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012852:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012856:	e7cf      	b.n	80127f8 <__ieee754_pow+0xc0>
 8012858:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801285c:	d106      	bne.n	801286c <__ieee754_pow+0x134>
 801285e:	4632      	mov	r2, r6
 8012860:	463b      	mov	r3, r7
 8012862:	4610      	mov	r0, r2
 8012864:	4619      	mov	r1, r3
 8012866:	f7ed fedf 	bl	8000628 <__aeabi_dmul>
 801286a:	e7c5      	b.n	80127f8 <__ieee754_pow+0xc0>
 801286c:	4b39      	ldr	r3, [pc, #228]	; (8012954 <__ieee754_pow+0x21c>)
 801286e:	4599      	cmp	r9, r3
 8012870:	d10a      	bne.n	8012888 <__ieee754_pow+0x150>
 8012872:	2d00      	cmp	r5, #0
 8012874:	db08      	blt.n	8012888 <__ieee754_pow+0x150>
 8012876:	ec47 6b10 	vmov	d0, r6, r7
 801287a:	b011      	add	sp, #68	; 0x44
 801287c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012880:	f000 be5c 	b.w	801353c <__ieee754_sqrt>
 8012884:	f04f 0b00 	mov.w	fp, #0
 8012888:	ec47 6b10 	vmov	d0, r6, r7
 801288c:	f001 ffb4 	bl	80147f8 <fabs>
 8012890:	ec51 0b10 	vmov	r0, r1, d0
 8012894:	f1ba 0f00 	cmp.w	sl, #0
 8012898:	d127      	bne.n	80128ea <__ieee754_pow+0x1b2>
 801289a:	b124      	cbz	r4, 80128a6 <__ieee754_pow+0x16e>
 801289c:	4b2c      	ldr	r3, [pc, #176]	; (8012950 <__ieee754_pow+0x218>)
 801289e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d121      	bne.n	80128ea <__ieee754_pow+0x1b2>
 80128a6:	f1b9 0f00 	cmp.w	r9, #0
 80128aa:	da05      	bge.n	80128b8 <__ieee754_pow+0x180>
 80128ac:	4602      	mov	r2, r0
 80128ae:	460b      	mov	r3, r1
 80128b0:	2000      	movs	r0, #0
 80128b2:	4927      	ldr	r1, [pc, #156]	; (8012950 <__ieee754_pow+0x218>)
 80128b4:	f7ed ffe2 	bl	800087c <__aeabi_ddiv>
 80128b8:	2d00      	cmp	r5, #0
 80128ba:	da9d      	bge.n	80127f8 <__ieee754_pow+0xc0>
 80128bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80128c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80128c4:	ea54 030b 	orrs.w	r3, r4, fp
 80128c8:	d108      	bne.n	80128dc <__ieee754_pow+0x1a4>
 80128ca:	4602      	mov	r2, r0
 80128cc:	460b      	mov	r3, r1
 80128ce:	4610      	mov	r0, r2
 80128d0:	4619      	mov	r1, r3
 80128d2:	f7ed fcf1 	bl	80002b8 <__aeabi_dsub>
 80128d6:	4602      	mov	r2, r0
 80128d8:	460b      	mov	r3, r1
 80128da:	e7ac      	b.n	8012836 <__ieee754_pow+0xfe>
 80128dc:	f1bb 0f01 	cmp.w	fp, #1
 80128e0:	d18a      	bne.n	80127f8 <__ieee754_pow+0xc0>
 80128e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128e6:	4619      	mov	r1, r3
 80128e8:	e786      	b.n	80127f8 <__ieee754_pow+0xc0>
 80128ea:	0fed      	lsrs	r5, r5, #31
 80128ec:	1e6b      	subs	r3, r5, #1
 80128ee:	930d      	str	r3, [sp, #52]	; 0x34
 80128f0:	ea5b 0303 	orrs.w	r3, fp, r3
 80128f4:	d102      	bne.n	80128fc <__ieee754_pow+0x1c4>
 80128f6:	4632      	mov	r2, r6
 80128f8:	463b      	mov	r3, r7
 80128fa:	e7e8      	b.n	80128ce <__ieee754_pow+0x196>
 80128fc:	4b16      	ldr	r3, [pc, #88]	; (8012958 <__ieee754_pow+0x220>)
 80128fe:	4598      	cmp	r8, r3
 8012900:	f340 80fe 	ble.w	8012b00 <__ieee754_pow+0x3c8>
 8012904:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012908:	4598      	cmp	r8, r3
 801290a:	dd0a      	ble.n	8012922 <__ieee754_pow+0x1ea>
 801290c:	4b0f      	ldr	r3, [pc, #60]	; (801294c <__ieee754_pow+0x214>)
 801290e:	429c      	cmp	r4, r3
 8012910:	dc0d      	bgt.n	801292e <__ieee754_pow+0x1f6>
 8012912:	f1b9 0f00 	cmp.w	r9, #0
 8012916:	f6bf af6d 	bge.w	80127f4 <__ieee754_pow+0xbc>
 801291a:	a307      	add	r3, pc, #28	; (adr r3, 8012938 <__ieee754_pow+0x200>)
 801291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012920:	e79f      	b.n	8012862 <__ieee754_pow+0x12a>
 8012922:	4b0e      	ldr	r3, [pc, #56]	; (801295c <__ieee754_pow+0x224>)
 8012924:	429c      	cmp	r4, r3
 8012926:	ddf4      	ble.n	8012912 <__ieee754_pow+0x1da>
 8012928:	4b09      	ldr	r3, [pc, #36]	; (8012950 <__ieee754_pow+0x218>)
 801292a:	429c      	cmp	r4, r3
 801292c:	dd18      	ble.n	8012960 <__ieee754_pow+0x228>
 801292e:	f1b9 0f00 	cmp.w	r9, #0
 8012932:	dcf2      	bgt.n	801291a <__ieee754_pow+0x1e2>
 8012934:	e75e      	b.n	80127f4 <__ieee754_pow+0xbc>
 8012936:	bf00      	nop
 8012938:	8800759c 	.word	0x8800759c
 801293c:	7e37e43c 	.word	0x7e37e43c
 8012940:	7ff00000 	.word	0x7ff00000
 8012944:	08036aa3 	.word	0x08036aa3
 8012948:	433fffff 	.word	0x433fffff
 801294c:	3fefffff 	.word	0x3fefffff
 8012950:	3ff00000 	.word	0x3ff00000
 8012954:	3fe00000 	.word	0x3fe00000
 8012958:	41e00000 	.word	0x41e00000
 801295c:	3feffffe 	.word	0x3feffffe
 8012960:	2200      	movs	r2, #0
 8012962:	4b63      	ldr	r3, [pc, #396]	; (8012af0 <__ieee754_pow+0x3b8>)
 8012964:	f7ed fca8 	bl	80002b8 <__aeabi_dsub>
 8012968:	a355      	add	r3, pc, #340	; (adr r3, 8012ac0 <__ieee754_pow+0x388>)
 801296a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801296e:	4604      	mov	r4, r0
 8012970:	460d      	mov	r5, r1
 8012972:	f7ed fe59 	bl	8000628 <__aeabi_dmul>
 8012976:	a354      	add	r3, pc, #336	; (adr r3, 8012ac8 <__ieee754_pow+0x390>)
 8012978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801297c:	4606      	mov	r6, r0
 801297e:	460f      	mov	r7, r1
 8012980:	4620      	mov	r0, r4
 8012982:	4629      	mov	r1, r5
 8012984:	f7ed fe50 	bl	8000628 <__aeabi_dmul>
 8012988:	2200      	movs	r2, #0
 801298a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801298e:	4b59      	ldr	r3, [pc, #356]	; (8012af4 <__ieee754_pow+0x3bc>)
 8012990:	4620      	mov	r0, r4
 8012992:	4629      	mov	r1, r5
 8012994:	f7ed fe48 	bl	8000628 <__aeabi_dmul>
 8012998:	4602      	mov	r2, r0
 801299a:	460b      	mov	r3, r1
 801299c:	a14c      	add	r1, pc, #304	; (adr r1, 8012ad0 <__ieee754_pow+0x398>)
 801299e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80129a2:	f7ed fc89 	bl	80002b8 <__aeabi_dsub>
 80129a6:	4622      	mov	r2, r4
 80129a8:	462b      	mov	r3, r5
 80129aa:	f7ed fe3d 	bl	8000628 <__aeabi_dmul>
 80129ae:	4602      	mov	r2, r0
 80129b0:	460b      	mov	r3, r1
 80129b2:	2000      	movs	r0, #0
 80129b4:	4950      	ldr	r1, [pc, #320]	; (8012af8 <__ieee754_pow+0x3c0>)
 80129b6:	f7ed fc7f 	bl	80002b8 <__aeabi_dsub>
 80129ba:	4622      	mov	r2, r4
 80129bc:	462b      	mov	r3, r5
 80129be:	4680      	mov	r8, r0
 80129c0:	4689      	mov	r9, r1
 80129c2:	4620      	mov	r0, r4
 80129c4:	4629      	mov	r1, r5
 80129c6:	f7ed fe2f 	bl	8000628 <__aeabi_dmul>
 80129ca:	4602      	mov	r2, r0
 80129cc:	460b      	mov	r3, r1
 80129ce:	4640      	mov	r0, r8
 80129d0:	4649      	mov	r1, r9
 80129d2:	f7ed fe29 	bl	8000628 <__aeabi_dmul>
 80129d6:	a340      	add	r3, pc, #256	; (adr r3, 8012ad8 <__ieee754_pow+0x3a0>)
 80129d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129dc:	f7ed fe24 	bl	8000628 <__aeabi_dmul>
 80129e0:	4602      	mov	r2, r0
 80129e2:	460b      	mov	r3, r1
 80129e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129e8:	f7ed fc66 	bl	80002b8 <__aeabi_dsub>
 80129ec:	4602      	mov	r2, r0
 80129ee:	460b      	mov	r3, r1
 80129f0:	4604      	mov	r4, r0
 80129f2:	460d      	mov	r5, r1
 80129f4:	4630      	mov	r0, r6
 80129f6:	4639      	mov	r1, r7
 80129f8:	f7ed fc60 	bl	80002bc <__adddf3>
 80129fc:	2000      	movs	r0, #0
 80129fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012a02:	4632      	mov	r2, r6
 8012a04:	463b      	mov	r3, r7
 8012a06:	f7ed fc57 	bl	80002b8 <__aeabi_dsub>
 8012a0a:	4602      	mov	r2, r0
 8012a0c:	460b      	mov	r3, r1
 8012a0e:	4620      	mov	r0, r4
 8012a10:	4629      	mov	r1, r5
 8012a12:	f7ed fc51 	bl	80002b8 <__aeabi_dsub>
 8012a16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a18:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012a1c:	4313      	orrs	r3, r2
 8012a1e:	4606      	mov	r6, r0
 8012a20:	460f      	mov	r7, r1
 8012a22:	f040 81eb 	bne.w	8012dfc <__ieee754_pow+0x6c4>
 8012a26:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8012ae0 <__ieee754_pow+0x3a8>
 8012a2a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012a2e:	2400      	movs	r4, #0
 8012a30:	4622      	mov	r2, r4
 8012a32:	462b      	mov	r3, r5
 8012a34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a38:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012a3c:	f7ed fc3c 	bl	80002b8 <__aeabi_dsub>
 8012a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012a44:	f7ed fdf0 	bl	8000628 <__aeabi_dmul>
 8012a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a4c:	4680      	mov	r8, r0
 8012a4e:	4689      	mov	r9, r1
 8012a50:	4630      	mov	r0, r6
 8012a52:	4639      	mov	r1, r7
 8012a54:	f7ed fde8 	bl	8000628 <__aeabi_dmul>
 8012a58:	4602      	mov	r2, r0
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	4640      	mov	r0, r8
 8012a5e:	4649      	mov	r1, r9
 8012a60:	f7ed fc2c 	bl	80002bc <__adddf3>
 8012a64:	4622      	mov	r2, r4
 8012a66:	462b      	mov	r3, r5
 8012a68:	4680      	mov	r8, r0
 8012a6a:	4689      	mov	r9, r1
 8012a6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012a70:	f7ed fdda 	bl	8000628 <__aeabi_dmul>
 8012a74:	460b      	mov	r3, r1
 8012a76:	4604      	mov	r4, r0
 8012a78:	460d      	mov	r5, r1
 8012a7a:	4602      	mov	r2, r0
 8012a7c:	4649      	mov	r1, r9
 8012a7e:	4640      	mov	r0, r8
 8012a80:	e9cd 4500 	strd	r4, r5, [sp]
 8012a84:	f7ed fc1a 	bl	80002bc <__adddf3>
 8012a88:	4b1c      	ldr	r3, [pc, #112]	; (8012afc <__ieee754_pow+0x3c4>)
 8012a8a:	4299      	cmp	r1, r3
 8012a8c:	4606      	mov	r6, r0
 8012a8e:	460f      	mov	r7, r1
 8012a90:	468b      	mov	fp, r1
 8012a92:	f340 82f7 	ble.w	8013084 <__ieee754_pow+0x94c>
 8012a96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012a9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012a9e:	4303      	orrs	r3, r0
 8012aa0:	f000 81ea 	beq.w	8012e78 <__ieee754_pow+0x740>
 8012aa4:	a310      	add	r3, pc, #64	; (adr r3, 8012ae8 <__ieee754_pow+0x3b0>)
 8012aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012aae:	f7ed fdbb 	bl	8000628 <__aeabi_dmul>
 8012ab2:	a30d      	add	r3, pc, #52	; (adr r3, 8012ae8 <__ieee754_pow+0x3b0>)
 8012ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab8:	e6d5      	b.n	8012866 <__ieee754_pow+0x12e>
 8012aba:	bf00      	nop
 8012abc:	f3af 8000 	nop.w
 8012ac0:	60000000 	.word	0x60000000
 8012ac4:	3ff71547 	.word	0x3ff71547
 8012ac8:	f85ddf44 	.word	0xf85ddf44
 8012acc:	3e54ae0b 	.word	0x3e54ae0b
 8012ad0:	55555555 	.word	0x55555555
 8012ad4:	3fd55555 	.word	0x3fd55555
 8012ad8:	652b82fe 	.word	0x652b82fe
 8012adc:	3ff71547 	.word	0x3ff71547
 8012ae0:	00000000 	.word	0x00000000
 8012ae4:	bff00000 	.word	0xbff00000
 8012ae8:	8800759c 	.word	0x8800759c
 8012aec:	7e37e43c 	.word	0x7e37e43c
 8012af0:	3ff00000 	.word	0x3ff00000
 8012af4:	3fd00000 	.word	0x3fd00000
 8012af8:	3fe00000 	.word	0x3fe00000
 8012afc:	408fffff 	.word	0x408fffff
 8012b00:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012b04:	f04f 0200 	mov.w	r2, #0
 8012b08:	da05      	bge.n	8012b16 <__ieee754_pow+0x3de>
 8012b0a:	4bd3      	ldr	r3, [pc, #844]	; (8012e58 <__ieee754_pow+0x720>)
 8012b0c:	f7ed fd8c 	bl	8000628 <__aeabi_dmul>
 8012b10:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8012b14:	460c      	mov	r4, r1
 8012b16:	1523      	asrs	r3, r4, #20
 8012b18:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012b1c:	4413      	add	r3, r2
 8012b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8012b20:	4bce      	ldr	r3, [pc, #824]	; (8012e5c <__ieee754_pow+0x724>)
 8012b22:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8012b26:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012b2a:	429c      	cmp	r4, r3
 8012b2c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012b30:	dd08      	ble.n	8012b44 <__ieee754_pow+0x40c>
 8012b32:	4bcb      	ldr	r3, [pc, #812]	; (8012e60 <__ieee754_pow+0x728>)
 8012b34:	429c      	cmp	r4, r3
 8012b36:	f340 815e 	ble.w	8012df6 <__ieee754_pow+0x6be>
 8012b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8012b40:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8012b44:	f04f 0a00 	mov.w	sl, #0
 8012b48:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8012b4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012b50:	4bc4      	ldr	r3, [pc, #784]	; (8012e64 <__ieee754_pow+0x72c>)
 8012b52:	4413      	add	r3, r2
 8012b54:	ed93 7b00 	vldr	d7, [r3]
 8012b58:	4629      	mov	r1, r5
 8012b5a:	ec53 2b17 	vmov	r2, r3, d7
 8012b5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012b62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012b66:	f7ed fba7 	bl	80002b8 <__aeabi_dsub>
 8012b6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012b6e:	4606      	mov	r6, r0
 8012b70:	460f      	mov	r7, r1
 8012b72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012b76:	f7ed fba1 	bl	80002bc <__adddf3>
 8012b7a:	4602      	mov	r2, r0
 8012b7c:	460b      	mov	r3, r1
 8012b7e:	2000      	movs	r0, #0
 8012b80:	49b9      	ldr	r1, [pc, #740]	; (8012e68 <__ieee754_pow+0x730>)
 8012b82:	f7ed fe7b 	bl	800087c <__aeabi_ddiv>
 8012b86:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012b8a:	4602      	mov	r2, r0
 8012b8c:	460b      	mov	r3, r1
 8012b8e:	4630      	mov	r0, r6
 8012b90:	4639      	mov	r1, r7
 8012b92:	f7ed fd49 	bl	8000628 <__aeabi_dmul>
 8012b96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012b9a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012b9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	9302      	str	r3, [sp, #8]
 8012ba6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012baa:	106d      	asrs	r5, r5, #1
 8012bac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012bb0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8012bba:	4640      	mov	r0, r8
 8012bbc:	4649      	mov	r1, r9
 8012bbe:	4614      	mov	r4, r2
 8012bc0:	461d      	mov	r5, r3
 8012bc2:	f7ed fd31 	bl	8000628 <__aeabi_dmul>
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	460b      	mov	r3, r1
 8012bca:	4630      	mov	r0, r6
 8012bcc:	4639      	mov	r1, r7
 8012bce:	f7ed fb73 	bl	80002b8 <__aeabi_dsub>
 8012bd2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012bd6:	4606      	mov	r6, r0
 8012bd8:	460f      	mov	r7, r1
 8012bda:	4620      	mov	r0, r4
 8012bdc:	4629      	mov	r1, r5
 8012bde:	f7ed fb6b 	bl	80002b8 <__aeabi_dsub>
 8012be2:	4602      	mov	r2, r0
 8012be4:	460b      	mov	r3, r1
 8012be6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012bea:	f7ed fb65 	bl	80002b8 <__aeabi_dsub>
 8012bee:	4642      	mov	r2, r8
 8012bf0:	464b      	mov	r3, r9
 8012bf2:	f7ed fd19 	bl	8000628 <__aeabi_dmul>
 8012bf6:	4602      	mov	r2, r0
 8012bf8:	460b      	mov	r3, r1
 8012bfa:	4630      	mov	r0, r6
 8012bfc:	4639      	mov	r1, r7
 8012bfe:	f7ed fb5b 	bl	80002b8 <__aeabi_dsub>
 8012c02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8012c06:	f7ed fd0f 	bl	8000628 <__aeabi_dmul>
 8012c0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012c12:	4610      	mov	r0, r2
 8012c14:	4619      	mov	r1, r3
 8012c16:	f7ed fd07 	bl	8000628 <__aeabi_dmul>
 8012c1a:	a37b      	add	r3, pc, #492	; (adr r3, 8012e08 <__ieee754_pow+0x6d0>)
 8012c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c20:	4604      	mov	r4, r0
 8012c22:	460d      	mov	r5, r1
 8012c24:	f7ed fd00 	bl	8000628 <__aeabi_dmul>
 8012c28:	a379      	add	r3, pc, #484	; (adr r3, 8012e10 <__ieee754_pow+0x6d8>)
 8012c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c2e:	f7ed fb45 	bl	80002bc <__adddf3>
 8012c32:	4622      	mov	r2, r4
 8012c34:	462b      	mov	r3, r5
 8012c36:	f7ed fcf7 	bl	8000628 <__aeabi_dmul>
 8012c3a:	a377      	add	r3, pc, #476	; (adr r3, 8012e18 <__ieee754_pow+0x6e0>)
 8012c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c40:	f7ed fb3c 	bl	80002bc <__adddf3>
 8012c44:	4622      	mov	r2, r4
 8012c46:	462b      	mov	r3, r5
 8012c48:	f7ed fcee 	bl	8000628 <__aeabi_dmul>
 8012c4c:	a374      	add	r3, pc, #464	; (adr r3, 8012e20 <__ieee754_pow+0x6e8>)
 8012c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c52:	f7ed fb33 	bl	80002bc <__adddf3>
 8012c56:	4622      	mov	r2, r4
 8012c58:	462b      	mov	r3, r5
 8012c5a:	f7ed fce5 	bl	8000628 <__aeabi_dmul>
 8012c5e:	a372      	add	r3, pc, #456	; (adr r3, 8012e28 <__ieee754_pow+0x6f0>)
 8012c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c64:	f7ed fb2a 	bl	80002bc <__adddf3>
 8012c68:	4622      	mov	r2, r4
 8012c6a:	462b      	mov	r3, r5
 8012c6c:	f7ed fcdc 	bl	8000628 <__aeabi_dmul>
 8012c70:	a36f      	add	r3, pc, #444	; (adr r3, 8012e30 <__ieee754_pow+0x6f8>)
 8012c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c76:	f7ed fb21 	bl	80002bc <__adddf3>
 8012c7a:	4622      	mov	r2, r4
 8012c7c:	4606      	mov	r6, r0
 8012c7e:	460f      	mov	r7, r1
 8012c80:	462b      	mov	r3, r5
 8012c82:	4620      	mov	r0, r4
 8012c84:	4629      	mov	r1, r5
 8012c86:	f7ed fccf 	bl	8000628 <__aeabi_dmul>
 8012c8a:	4602      	mov	r2, r0
 8012c8c:	460b      	mov	r3, r1
 8012c8e:	4630      	mov	r0, r6
 8012c90:	4639      	mov	r1, r7
 8012c92:	f7ed fcc9 	bl	8000628 <__aeabi_dmul>
 8012c96:	4642      	mov	r2, r8
 8012c98:	4604      	mov	r4, r0
 8012c9a:	460d      	mov	r5, r1
 8012c9c:	464b      	mov	r3, r9
 8012c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012ca2:	f7ed fb0b 	bl	80002bc <__adddf3>
 8012ca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012caa:	f7ed fcbd 	bl	8000628 <__aeabi_dmul>
 8012cae:	4622      	mov	r2, r4
 8012cb0:	462b      	mov	r3, r5
 8012cb2:	f7ed fb03 	bl	80002bc <__adddf3>
 8012cb6:	4642      	mov	r2, r8
 8012cb8:	4606      	mov	r6, r0
 8012cba:	460f      	mov	r7, r1
 8012cbc:	464b      	mov	r3, r9
 8012cbe:	4640      	mov	r0, r8
 8012cc0:	4649      	mov	r1, r9
 8012cc2:	f7ed fcb1 	bl	8000628 <__aeabi_dmul>
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	4b68      	ldr	r3, [pc, #416]	; (8012e6c <__ieee754_pow+0x734>)
 8012cca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012cce:	f7ed faf5 	bl	80002bc <__adddf3>
 8012cd2:	4632      	mov	r2, r6
 8012cd4:	463b      	mov	r3, r7
 8012cd6:	f7ed faf1 	bl	80002bc <__adddf3>
 8012cda:	9802      	ldr	r0, [sp, #8]
 8012cdc:	460d      	mov	r5, r1
 8012cde:	4604      	mov	r4, r0
 8012ce0:	4602      	mov	r2, r0
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	4640      	mov	r0, r8
 8012ce6:	4649      	mov	r1, r9
 8012ce8:	f7ed fc9e 	bl	8000628 <__aeabi_dmul>
 8012cec:	2200      	movs	r2, #0
 8012cee:	4680      	mov	r8, r0
 8012cf0:	4689      	mov	r9, r1
 8012cf2:	4b5e      	ldr	r3, [pc, #376]	; (8012e6c <__ieee754_pow+0x734>)
 8012cf4:	4620      	mov	r0, r4
 8012cf6:	4629      	mov	r1, r5
 8012cf8:	f7ed fade 	bl	80002b8 <__aeabi_dsub>
 8012cfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012d00:	f7ed fada 	bl	80002b8 <__aeabi_dsub>
 8012d04:	4602      	mov	r2, r0
 8012d06:	460b      	mov	r3, r1
 8012d08:	4630      	mov	r0, r6
 8012d0a:	4639      	mov	r1, r7
 8012d0c:	f7ed fad4 	bl	80002b8 <__aeabi_dsub>
 8012d10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012d14:	f7ed fc88 	bl	8000628 <__aeabi_dmul>
 8012d18:	4622      	mov	r2, r4
 8012d1a:	4606      	mov	r6, r0
 8012d1c:	460f      	mov	r7, r1
 8012d1e:	462b      	mov	r3, r5
 8012d20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d24:	f7ed fc80 	bl	8000628 <__aeabi_dmul>
 8012d28:	4602      	mov	r2, r0
 8012d2a:	460b      	mov	r3, r1
 8012d2c:	4630      	mov	r0, r6
 8012d2e:	4639      	mov	r1, r7
 8012d30:	f7ed fac4 	bl	80002bc <__adddf3>
 8012d34:	4606      	mov	r6, r0
 8012d36:	460f      	mov	r7, r1
 8012d38:	4602      	mov	r2, r0
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	4640      	mov	r0, r8
 8012d3e:	4649      	mov	r1, r9
 8012d40:	f7ed fabc 	bl	80002bc <__adddf3>
 8012d44:	9802      	ldr	r0, [sp, #8]
 8012d46:	a33c      	add	r3, pc, #240	; (adr r3, 8012e38 <__ieee754_pow+0x700>)
 8012d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4c:	4604      	mov	r4, r0
 8012d4e:	460d      	mov	r5, r1
 8012d50:	f7ed fc6a 	bl	8000628 <__aeabi_dmul>
 8012d54:	4642      	mov	r2, r8
 8012d56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012d5a:	464b      	mov	r3, r9
 8012d5c:	4620      	mov	r0, r4
 8012d5e:	4629      	mov	r1, r5
 8012d60:	f7ed faaa 	bl	80002b8 <__aeabi_dsub>
 8012d64:	4602      	mov	r2, r0
 8012d66:	460b      	mov	r3, r1
 8012d68:	4630      	mov	r0, r6
 8012d6a:	4639      	mov	r1, r7
 8012d6c:	f7ed faa4 	bl	80002b8 <__aeabi_dsub>
 8012d70:	a333      	add	r3, pc, #204	; (adr r3, 8012e40 <__ieee754_pow+0x708>)
 8012d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d76:	f7ed fc57 	bl	8000628 <__aeabi_dmul>
 8012d7a:	a333      	add	r3, pc, #204	; (adr r3, 8012e48 <__ieee754_pow+0x710>)
 8012d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d80:	4606      	mov	r6, r0
 8012d82:	460f      	mov	r7, r1
 8012d84:	4620      	mov	r0, r4
 8012d86:	4629      	mov	r1, r5
 8012d88:	f7ed fc4e 	bl	8000628 <__aeabi_dmul>
 8012d8c:	4602      	mov	r2, r0
 8012d8e:	460b      	mov	r3, r1
 8012d90:	4630      	mov	r0, r6
 8012d92:	4639      	mov	r1, r7
 8012d94:	f7ed fa92 	bl	80002bc <__adddf3>
 8012d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d9a:	4b35      	ldr	r3, [pc, #212]	; (8012e70 <__ieee754_pow+0x738>)
 8012d9c:	4413      	add	r3, r2
 8012d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da2:	f7ed fa8b 	bl	80002bc <__adddf3>
 8012da6:	4604      	mov	r4, r0
 8012da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012daa:	460d      	mov	r5, r1
 8012dac:	f7ed fbd2 	bl	8000554 <__aeabi_i2d>
 8012db0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012db2:	4b30      	ldr	r3, [pc, #192]	; (8012e74 <__ieee754_pow+0x73c>)
 8012db4:	4413      	add	r3, r2
 8012db6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012dba:	4606      	mov	r6, r0
 8012dbc:	460f      	mov	r7, r1
 8012dbe:	4622      	mov	r2, r4
 8012dc0:	462b      	mov	r3, r5
 8012dc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012dc6:	f7ed fa79 	bl	80002bc <__adddf3>
 8012dca:	4642      	mov	r2, r8
 8012dcc:	464b      	mov	r3, r9
 8012dce:	f7ed fa75 	bl	80002bc <__adddf3>
 8012dd2:	4632      	mov	r2, r6
 8012dd4:	463b      	mov	r3, r7
 8012dd6:	f7ed fa71 	bl	80002bc <__adddf3>
 8012dda:	9802      	ldr	r0, [sp, #8]
 8012ddc:	4632      	mov	r2, r6
 8012dde:	463b      	mov	r3, r7
 8012de0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012de4:	f7ed fa68 	bl	80002b8 <__aeabi_dsub>
 8012de8:	4642      	mov	r2, r8
 8012dea:	464b      	mov	r3, r9
 8012dec:	f7ed fa64 	bl	80002b8 <__aeabi_dsub>
 8012df0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012df4:	e607      	b.n	8012a06 <__ieee754_pow+0x2ce>
 8012df6:	f04f 0a01 	mov.w	sl, #1
 8012dfa:	e6a5      	b.n	8012b48 <__ieee754_pow+0x410>
 8012dfc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012e50 <__ieee754_pow+0x718>
 8012e00:	e613      	b.n	8012a2a <__ieee754_pow+0x2f2>
 8012e02:	bf00      	nop
 8012e04:	f3af 8000 	nop.w
 8012e08:	4a454eef 	.word	0x4a454eef
 8012e0c:	3fca7e28 	.word	0x3fca7e28
 8012e10:	93c9db65 	.word	0x93c9db65
 8012e14:	3fcd864a 	.word	0x3fcd864a
 8012e18:	a91d4101 	.word	0xa91d4101
 8012e1c:	3fd17460 	.word	0x3fd17460
 8012e20:	518f264d 	.word	0x518f264d
 8012e24:	3fd55555 	.word	0x3fd55555
 8012e28:	db6fabff 	.word	0xdb6fabff
 8012e2c:	3fdb6db6 	.word	0x3fdb6db6
 8012e30:	33333303 	.word	0x33333303
 8012e34:	3fe33333 	.word	0x3fe33333
 8012e38:	e0000000 	.word	0xe0000000
 8012e3c:	3feec709 	.word	0x3feec709
 8012e40:	dc3a03fd 	.word	0xdc3a03fd
 8012e44:	3feec709 	.word	0x3feec709
 8012e48:	145b01f5 	.word	0x145b01f5
 8012e4c:	be3e2fe0 	.word	0xbe3e2fe0
 8012e50:	00000000 	.word	0x00000000
 8012e54:	3ff00000 	.word	0x3ff00000
 8012e58:	43400000 	.word	0x43400000
 8012e5c:	0003988e 	.word	0x0003988e
 8012e60:	000bb679 	.word	0x000bb679
 8012e64:	08036838 	.word	0x08036838
 8012e68:	3ff00000 	.word	0x3ff00000
 8012e6c:	40080000 	.word	0x40080000
 8012e70:	08036858 	.word	0x08036858
 8012e74:	08036848 	.word	0x08036848
 8012e78:	a3b4      	add	r3, pc, #720	; (adr r3, 801314c <__ieee754_pow+0xa14>)
 8012e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e7e:	4640      	mov	r0, r8
 8012e80:	4649      	mov	r1, r9
 8012e82:	f7ed fa1b 	bl	80002bc <__adddf3>
 8012e86:	4622      	mov	r2, r4
 8012e88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012e8c:	462b      	mov	r3, r5
 8012e8e:	4630      	mov	r0, r6
 8012e90:	4639      	mov	r1, r7
 8012e92:	f7ed fa11 	bl	80002b8 <__aeabi_dsub>
 8012e96:	4602      	mov	r2, r0
 8012e98:	460b      	mov	r3, r1
 8012e9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012e9e:	f7ed fe53 	bl	8000b48 <__aeabi_dcmpgt>
 8012ea2:	2800      	cmp	r0, #0
 8012ea4:	f47f adfe 	bne.w	8012aa4 <__ieee754_pow+0x36c>
 8012ea8:	4aa3      	ldr	r2, [pc, #652]	; (8013138 <__ieee754_pow+0xa00>)
 8012eaa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012eae:	4293      	cmp	r3, r2
 8012eb0:	f340 810a 	ble.w	80130c8 <__ieee754_pow+0x990>
 8012eb4:	151b      	asrs	r3, r3, #20
 8012eb6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012eba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012ebe:	fa4a f303 	asr.w	r3, sl, r3
 8012ec2:	445b      	add	r3, fp
 8012ec4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8012ec8:	4e9c      	ldr	r6, [pc, #624]	; (801313c <__ieee754_pow+0xa04>)
 8012eca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8012ece:	4116      	asrs	r6, r2
 8012ed0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8012ed4:	2000      	movs	r0, #0
 8012ed6:	ea23 0106 	bic.w	r1, r3, r6
 8012eda:	f1c2 0214 	rsb	r2, r2, #20
 8012ede:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012ee2:	fa4a fa02 	asr.w	sl, sl, r2
 8012ee6:	f1bb 0f00 	cmp.w	fp, #0
 8012eea:	4602      	mov	r2, r0
 8012eec:	460b      	mov	r3, r1
 8012eee:	4620      	mov	r0, r4
 8012ef0:	4629      	mov	r1, r5
 8012ef2:	bfb8      	it	lt
 8012ef4:	f1ca 0a00 	rsblt	sl, sl, #0
 8012ef8:	f7ed f9de 	bl	80002b8 <__aeabi_dsub>
 8012efc:	e9cd 0100 	strd	r0, r1, [sp]
 8012f00:	4642      	mov	r2, r8
 8012f02:	464b      	mov	r3, r9
 8012f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f08:	f7ed f9d8 	bl	80002bc <__adddf3>
 8012f0c:	2000      	movs	r0, #0
 8012f0e:	a378      	add	r3, pc, #480	; (adr r3, 80130f0 <__ieee754_pow+0x9b8>)
 8012f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f14:	4604      	mov	r4, r0
 8012f16:	460d      	mov	r5, r1
 8012f18:	f7ed fb86 	bl	8000628 <__aeabi_dmul>
 8012f1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f20:	4606      	mov	r6, r0
 8012f22:	460f      	mov	r7, r1
 8012f24:	4620      	mov	r0, r4
 8012f26:	4629      	mov	r1, r5
 8012f28:	f7ed f9c6 	bl	80002b8 <__aeabi_dsub>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	460b      	mov	r3, r1
 8012f30:	4640      	mov	r0, r8
 8012f32:	4649      	mov	r1, r9
 8012f34:	f7ed f9c0 	bl	80002b8 <__aeabi_dsub>
 8012f38:	a36f      	add	r3, pc, #444	; (adr r3, 80130f8 <__ieee754_pow+0x9c0>)
 8012f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3e:	f7ed fb73 	bl	8000628 <__aeabi_dmul>
 8012f42:	a36f      	add	r3, pc, #444	; (adr r3, 8013100 <__ieee754_pow+0x9c8>)
 8012f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f48:	4680      	mov	r8, r0
 8012f4a:	4689      	mov	r9, r1
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	4629      	mov	r1, r5
 8012f50:	f7ed fb6a 	bl	8000628 <__aeabi_dmul>
 8012f54:	4602      	mov	r2, r0
 8012f56:	460b      	mov	r3, r1
 8012f58:	4640      	mov	r0, r8
 8012f5a:	4649      	mov	r1, r9
 8012f5c:	f7ed f9ae 	bl	80002bc <__adddf3>
 8012f60:	4604      	mov	r4, r0
 8012f62:	460d      	mov	r5, r1
 8012f64:	4602      	mov	r2, r0
 8012f66:	460b      	mov	r3, r1
 8012f68:	4630      	mov	r0, r6
 8012f6a:	4639      	mov	r1, r7
 8012f6c:	f7ed f9a6 	bl	80002bc <__adddf3>
 8012f70:	4632      	mov	r2, r6
 8012f72:	463b      	mov	r3, r7
 8012f74:	4680      	mov	r8, r0
 8012f76:	4689      	mov	r9, r1
 8012f78:	f7ed f99e 	bl	80002b8 <__aeabi_dsub>
 8012f7c:	4602      	mov	r2, r0
 8012f7e:	460b      	mov	r3, r1
 8012f80:	4620      	mov	r0, r4
 8012f82:	4629      	mov	r1, r5
 8012f84:	f7ed f998 	bl	80002b8 <__aeabi_dsub>
 8012f88:	4642      	mov	r2, r8
 8012f8a:	4606      	mov	r6, r0
 8012f8c:	460f      	mov	r7, r1
 8012f8e:	464b      	mov	r3, r9
 8012f90:	4640      	mov	r0, r8
 8012f92:	4649      	mov	r1, r9
 8012f94:	f7ed fb48 	bl	8000628 <__aeabi_dmul>
 8012f98:	a35b      	add	r3, pc, #364	; (adr r3, 8013108 <__ieee754_pow+0x9d0>)
 8012f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9e:	4604      	mov	r4, r0
 8012fa0:	460d      	mov	r5, r1
 8012fa2:	f7ed fb41 	bl	8000628 <__aeabi_dmul>
 8012fa6:	a35a      	add	r3, pc, #360	; (adr r3, 8013110 <__ieee754_pow+0x9d8>)
 8012fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fac:	f7ed f984 	bl	80002b8 <__aeabi_dsub>
 8012fb0:	4622      	mov	r2, r4
 8012fb2:	462b      	mov	r3, r5
 8012fb4:	f7ed fb38 	bl	8000628 <__aeabi_dmul>
 8012fb8:	a357      	add	r3, pc, #348	; (adr r3, 8013118 <__ieee754_pow+0x9e0>)
 8012fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fbe:	f7ed f97d 	bl	80002bc <__adddf3>
 8012fc2:	4622      	mov	r2, r4
 8012fc4:	462b      	mov	r3, r5
 8012fc6:	f7ed fb2f 	bl	8000628 <__aeabi_dmul>
 8012fca:	a355      	add	r3, pc, #340	; (adr r3, 8013120 <__ieee754_pow+0x9e8>)
 8012fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd0:	f7ed f972 	bl	80002b8 <__aeabi_dsub>
 8012fd4:	4622      	mov	r2, r4
 8012fd6:	462b      	mov	r3, r5
 8012fd8:	f7ed fb26 	bl	8000628 <__aeabi_dmul>
 8012fdc:	a352      	add	r3, pc, #328	; (adr r3, 8013128 <__ieee754_pow+0x9f0>)
 8012fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe2:	f7ed f96b 	bl	80002bc <__adddf3>
 8012fe6:	4622      	mov	r2, r4
 8012fe8:	462b      	mov	r3, r5
 8012fea:	f7ed fb1d 	bl	8000628 <__aeabi_dmul>
 8012fee:	4602      	mov	r2, r0
 8012ff0:	460b      	mov	r3, r1
 8012ff2:	4640      	mov	r0, r8
 8012ff4:	4649      	mov	r1, r9
 8012ff6:	f7ed f95f 	bl	80002b8 <__aeabi_dsub>
 8012ffa:	4604      	mov	r4, r0
 8012ffc:	460d      	mov	r5, r1
 8012ffe:	4602      	mov	r2, r0
 8013000:	460b      	mov	r3, r1
 8013002:	4640      	mov	r0, r8
 8013004:	4649      	mov	r1, r9
 8013006:	f7ed fb0f 	bl	8000628 <__aeabi_dmul>
 801300a:	2200      	movs	r2, #0
 801300c:	e9cd 0100 	strd	r0, r1, [sp]
 8013010:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013014:	4620      	mov	r0, r4
 8013016:	4629      	mov	r1, r5
 8013018:	f7ed f94e 	bl	80002b8 <__aeabi_dsub>
 801301c:	4602      	mov	r2, r0
 801301e:	460b      	mov	r3, r1
 8013020:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013024:	f7ed fc2a 	bl	800087c <__aeabi_ddiv>
 8013028:	4632      	mov	r2, r6
 801302a:	4604      	mov	r4, r0
 801302c:	460d      	mov	r5, r1
 801302e:	463b      	mov	r3, r7
 8013030:	4640      	mov	r0, r8
 8013032:	4649      	mov	r1, r9
 8013034:	f7ed faf8 	bl	8000628 <__aeabi_dmul>
 8013038:	4632      	mov	r2, r6
 801303a:	463b      	mov	r3, r7
 801303c:	f7ed f93e 	bl	80002bc <__adddf3>
 8013040:	4602      	mov	r2, r0
 8013042:	460b      	mov	r3, r1
 8013044:	4620      	mov	r0, r4
 8013046:	4629      	mov	r1, r5
 8013048:	f7ed f936 	bl	80002b8 <__aeabi_dsub>
 801304c:	4642      	mov	r2, r8
 801304e:	464b      	mov	r3, r9
 8013050:	f7ed f932 	bl	80002b8 <__aeabi_dsub>
 8013054:	4602      	mov	r2, r0
 8013056:	460b      	mov	r3, r1
 8013058:	2000      	movs	r0, #0
 801305a:	4939      	ldr	r1, [pc, #228]	; (8013140 <__ieee754_pow+0xa08>)
 801305c:	f7ed f92c 	bl	80002b8 <__aeabi_dsub>
 8013060:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013064:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013068:	4602      	mov	r2, r0
 801306a:	460b      	mov	r3, r1
 801306c:	da2f      	bge.n	80130ce <__ieee754_pow+0x996>
 801306e:	4650      	mov	r0, sl
 8013070:	ec43 2b10 	vmov	d0, r2, r3
 8013074:	f001 fc60 	bl	8014938 <scalbn>
 8013078:	ec51 0b10 	vmov	r0, r1, d0
 801307c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013080:	f7ff bbf1 	b.w	8012866 <__ieee754_pow+0x12e>
 8013084:	4b2f      	ldr	r3, [pc, #188]	; (8013144 <__ieee754_pow+0xa0c>)
 8013086:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801308a:	429e      	cmp	r6, r3
 801308c:	f77f af0c 	ble.w	8012ea8 <__ieee754_pow+0x770>
 8013090:	4b2d      	ldr	r3, [pc, #180]	; (8013148 <__ieee754_pow+0xa10>)
 8013092:	440b      	add	r3, r1
 8013094:	4303      	orrs	r3, r0
 8013096:	d00b      	beq.n	80130b0 <__ieee754_pow+0x978>
 8013098:	a325      	add	r3, pc, #148	; (adr r3, 8013130 <__ieee754_pow+0x9f8>)
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130a2:	f7ed fac1 	bl	8000628 <__aeabi_dmul>
 80130a6:	a322      	add	r3, pc, #136	; (adr r3, 8013130 <__ieee754_pow+0x9f8>)
 80130a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ac:	f7ff bbdb 	b.w	8012866 <__ieee754_pow+0x12e>
 80130b0:	4622      	mov	r2, r4
 80130b2:	462b      	mov	r3, r5
 80130b4:	f7ed f900 	bl	80002b8 <__aeabi_dsub>
 80130b8:	4642      	mov	r2, r8
 80130ba:	464b      	mov	r3, r9
 80130bc:	f7ed fd3a 	bl	8000b34 <__aeabi_dcmpge>
 80130c0:	2800      	cmp	r0, #0
 80130c2:	f43f aef1 	beq.w	8012ea8 <__ieee754_pow+0x770>
 80130c6:	e7e7      	b.n	8013098 <__ieee754_pow+0x960>
 80130c8:	f04f 0a00 	mov.w	sl, #0
 80130cc:	e718      	b.n	8012f00 <__ieee754_pow+0x7c8>
 80130ce:	4621      	mov	r1, r4
 80130d0:	e7d4      	b.n	801307c <__ieee754_pow+0x944>
 80130d2:	2000      	movs	r0, #0
 80130d4:	491a      	ldr	r1, [pc, #104]	; (8013140 <__ieee754_pow+0xa08>)
 80130d6:	f7ff bb8f 	b.w	80127f8 <__ieee754_pow+0xc0>
 80130da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80130de:	f7ff bb8b 	b.w	80127f8 <__ieee754_pow+0xc0>
 80130e2:	4630      	mov	r0, r6
 80130e4:	4639      	mov	r1, r7
 80130e6:	f7ff bb87 	b.w	80127f8 <__ieee754_pow+0xc0>
 80130ea:	4693      	mov	fp, r2
 80130ec:	f7ff bb98 	b.w	8012820 <__ieee754_pow+0xe8>
 80130f0:	00000000 	.word	0x00000000
 80130f4:	3fe62e43 	.word	0x3fe62e43
 80130f8:	fefa39ef 	.word	0xfefa39ef
 80130fc:	3fe62e42 	.word	0x3fe62e42
 8013100:	0ca86c39 	.word	0x0ca86c39
 8013104:	be205c61 	.word	0xbe205c61
 8013108:	72bea4d0 	.word	0x72bea4d0
 801310c:	3e663769 	.word	0x3e663769
 8013110:	c5d26bf1 	.word	0xc5d26bf1
 8013114:	3ebbbd41 	.word	0x3ebbbd41
 8013118:	af25de2c 	.word	0xaf25de2c
 801311c:	3f11566a 	.word	0x3f11566a
 8013120:	16bebd93 	.word	0x16bebd93
 8013124:	3f66c16c 	.word	0x3f66c16c
 8013128:	5555553e 	.word	0x5555553e
 801312c:	3fc55555 	.word	0x3fc55555
 8013130:	c2f8f359 	.word	0xc2f8f359
 8013134:	01a56e1f 	.word	0x01a56e1f
 8013138:	3fe00000 	.word	0x3fe00000
 801313c:	000fffff 	.word	0x000fffff
 8013140:	3ff00000 	.word	0x3ff00000
 8013144:	4090cbff 	.word	0x4090cbff
 8013148:	3f6f3400 	.word	0x3f6f3400
 801314c:	652b82fe 	.word	0x652b82fe
 8013150:	3c971547 	.word	0x3c971547
 8013154:	00000000 	.word	0x00000000

08013158 <__ieee754_rem_pio2>:
 8013158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801315c:	ec57 6b10 	vmov	r6, r7, d0
 8013160:	4bc3      	ldr	r3, [pc, #780]	; (8013470 <__ieee754_rem_pio2+0x318>)
 8013162:	b08d      	sub	sp, #52	; 0x34
 8013164:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013168:	4598      	cmp	r8, r3
 801316a:	4604      	mov	r4, r0
 801316c:	9704      	str	r7, [sp, #16]
 801316e:	dc07      	bgt.n	8013180 <__ieee754_rem_pio2+0x28>
 8013170:	2200      	movs	r2, #0
 8013172:	2300      	movs	r3, #0
 8013174:	ed84 0b00 	vstr	d0, [r4]
 8013178:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801317c:	2500      	movs	r5, #0
 801317e:	e027      	b.n	80131d0 <__ieee754_rem_pio2+0x78>
 8013180:	4bbc      	ldr	r3, [pc, #752]	; (8013474 <__ieee754_rem_pio2+0x31c>)
 8013182:	4598      	cmp	r8, r3
 8013184:	dc75      	bgt.n	8013272 <__ieee754_rem_pio2+0x11a>
 8013186:	9b04      	ldr	r3, [sp, #16]
 8013188:	4dbb      	ldr	r5, [pc, #748]	; (8013478 <__ieee754_rem_pio2+0x320>)
 801318a:	2b00      	cmp	r3, #0
 801318c:	ee10 0a10 	vmov	r0, s0
 8013190:	a3a9      	add	r3, pc, #676	; (adr r3, 8013438 <__ieee754_rem_pio2+0x2e0>)
 8013192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013196:	4639      	mov	r1, r7
 8013198:	dd36      	ble.n	8013208 <__ieee754_rem_pio2+0xb0>
 801319a:	f7ed f88d 	bl	80002b8 <__aeabi_dsub>
 801319e:	45a8      	cmp	r8, r5
 80131a0:	4606      	mov	r6, r0
 80131a2:	460f      	mov	r7, r1
 80131a4:	d018      	beq.n	80131d8 <__ieee754_rem_pio2+0x80>
 80131a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8013440 <__ieee754_rem_pio2+0x2e8>)
 80131a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ac:	f7ed f884 	bl	80002b8 <__aeabi_dsub>
 80131b0:	4602      	mov	r2, r0
 80131b2:	460b      	mov	r3, r1
 80131b4:	e9c4 2300 	strd	r2, r3, [r4]
 80131b8:	4630      	mov	r0, r6
 80131ba:	4639      	mov	r1, r7
 80131bc:	f7ed f87c 	bl	80002b8 <__aeabi_dsub>
 80131c0:	a39f      	add	r3, pc, #636	; (adr r3, 8013440 <__ieee754_rem_pio2+0x2e8>)
 80131c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c6:	f7ed f877 	bl	80002b8 <__aeabi_dsub>
 80131ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80131ce:	2501      	movs	r5, #1
 80131d0:	4628      	mov	r0, r5
 80131d2:	b00d      	add	sp, #52	; 0x34
 80131d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131d8:	a39b      	add	r3, pc, #620	; (adr r3, 8013448 <__ieee754_rem_pio2+0x2f0>)
 80131da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131de:	f7ed f86b 	bl	80002b8 <__aeabi_dsub>
 80131e2:	a39b      	add	r3, pc, #620	; (adr r3, 8013450 <__ieee754_rem_pio2+0x2f8>)
 80131e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e8:	4606      	mov	r6, r0
 80131ea:	460f      	mov	r7, r1
 80131ec:	f7ed f864 	bl	80002b8 <__aeabi_dsub>
 80131f0:	4602      	mov	r2, r0
 80131f2:	460b      	mov	r3, r1
 80131f4:	e9c4 2300 	strd	r2, r3, [r4]
 80131f8:	4630      	mov	r0, r6
 80131fa:	4639      	mov	r1, r7
 80131fc:	f7ed f85c 	bl	80002b8 <__aeabi_dsub>
 8013200:	a393      	add	r3, pc, #588	; (adr r3, 8013450 <__ieee754_rem_pio2+0x2f8>)
 8013202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013206:	e7de      	b.n	80131c6 <__ieee754_rem_pio2+0x6e>
 8013208:	f7ed f858 	bl	80002bc <__adddf3>
 801320c:	45a8      	cmp	r8, r5
 801320e:	4606      	mov	r6, r0
 8013210:	460f      	mov	r7, r1
 8013212:	d016      	beq.n	8013242 <__ieee754_rem_pio2+0xea>
 8013214:	a38a      	add	r3, pc, #552	; (adr r3, 8013440 <__ieee754_rem_pio2+0x2e8>)
 8013216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321a:	f7ed f84f 	bl	80002bc <__adddf3>
 801321e:	4602      	mov	r2, r0
 8013220:	460b      	mov	r3, r1
 8013222:	e9c4 2300 	strd	r2, r3, [r4]
 8013226:	4630      	mov	r0, r6
 8013228:	4639      	mov	r1, r7
 801322a:	f7ed f845 	bl	80002b8 <__aeabi_dsub>
 801322e:	a384      	add	r3, pc, #528	; (adr r3, 8013440 <__ieee754_rem_pio2+0x2e8>)
 8013230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013234:	f7ed f842 	bl	80002bc <__adddf3>
 8013238:	f04f 35ff 	mov.w	r5, #4294967295
 801323c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013240:	e7c6      	b.n	80131d0 <__ieee754_rem_pio2+0x78>
 8013242:	a381      	add	r3, pc, #516	; (adr r3, 8013448 <__ieee754_rem_pio2+0x2f0>)
 8013244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013248:	f7ed f838 	bl	80002bc <__adddf3>
 801324c:	a380      	add	r3, pc, #512	; (adr r3, 8013450 <__ieee754_rem_pio2+0x2f8>)
 801324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013252:	4606      	mov	r6, r0
 8013254:	460f      	mov	r7, r1
 8013256:	f7ed f831 	bl	80002bc <__adddf3>
 801325a:	4602      	mov	r2, r0
 801325c:	460b      	mov	r3, r1
 801325e:	e9c4 2300 	strd	r2, r3, [r4]
 8013262:	4630      	mov	r0, r6
 8013264:	4639      	mov	r1, r7
 8013266:	f7ed f827 	bl	80002b8 <__aeabi_dsub>
 801326a:	a379      	add	r3, pc, #484	; (adr r3, 8013450 <__ieee754_rem_pio2+0x2f8>)
 801326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013270:	e7e0      	b.n	8013234 <__ieee754_rem_pio2+0xdc>
 8013272:	4b82      	ldr	r3, [pc, #520]	; (801347c <__ieee754_rem_pio2+0x324>)
 8013274:	4598      	cmp	r8, r3
 8013276:	f300 80d0 	bgt.w	801341a <__ieee754_rem_pio2+0x2c2>
 801327a:	f001 fabd 	bl	80147f8 <fabs>
 801327e:	ec57 6b10 	vmov	r6, r7, d0
 8013282:	ee10 0a10 	vmov	r0, s0
 8013286:	a374      	add	r3, pc, #464	; (adr r3, 8013458 <__ieee754_rem_pio2+0x300>)
 8013288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801328c:	4639      	mov	r1, r7
 801328e:	f7ed f9cb 	bl	8000628 <__aeabi_dmul>
 8013292:	2200      	movs	r2, #0
 8013294:	4b7a      	ldr	r3, [pc, #488]	; (8013480 <__ieee754_rem_pio2+0x328>)
 8013296:	f7ed f811 	bl	80002bc <__adddf3>
 801329a:	f7ed fc75 	bl	8000b88 <__aeabi_d2iz>
 801329e:	4605      	mov	r5, r0
 80132a0:	f7ed f958 	bl	8000554 <__aeabi_i2d>
 80132a4:	a364      	add	r3, pc, #400	; (adr r3, 8013438 <__ieee754_rem_pio2+0x2e0>)
 80132a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132ae:	f7ed f9bb 	bl	8000628 <__aeabi_dmul>
 80132b2:	4602      	mov	r2, r0
 80132b4:	460b      	mov	r3, r1
 80132b6:	4630      	mov	r0, r6
 80132b8:	4639      	mov	r1, r7
 80132ba:	f7ec fffd 	bl	80002b8 <__aeabi_dsub>
 80132be:	a360      	add	r3, pc, #384	; (adr r3, 8013440 <__ieee754_rem_pio2+0x2e8>)
 80132c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c4:	4682      	mov	sl, r0
 80132c6:	468b      	mov	fp, r1
 80132c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132cc:	f7ed f9ac 	bl	8000628 <__aeabi_dmul>
 80132d0:	2d1f      	cmp	r5, #31
 80132d2:	4606      	mov	r6, r0
 80132d4:	460f      	mov	r7, r1
 80132d6:	dc0c      	bgt.n	80132f2 <__ieee754_rem_pio2+0x19a>
 80132d8:	1e6a      	subs	r2, r5, #1
 80132da:	4b6a      	ldr	r3, [pc, #424]	; (8013484 <__ieee754_rem_pio2+0x32c>)
 80132dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132e0:	4543      	cmp	r3, r8
 80132e2:	d006      	beq.n	80132f2 <__ieee754_rem_pio2+0x19a>
 80132e4:	4632      	mov	r2, r6
 80132e6:	463b      	mov	r3, r7
 80132e8:	4650      	mov	r0, sl
 80132ea:	4659      	mov	r1, fp
 80132ec:	f7ec ffe4 	bl	80002b8 <__aeabi_dsub>
 80132f0:	e00e      	b.n	8013310 <__ieee754_rem_pio2+0x1b8>
 80132f2:	4632      	mov	r2, r6
 80132f4:	463b      	mov	r3, r7
 80132f6:	4650      	mov	r0, sl
 80132f8:	4659      	mov	r1, fp
 80132fa:	f7ec ffdd 	bl	80002b8 <__aeabi_dsub>
 80132fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013302:	9305      	str	r3, [sp, #20]
 8013304:	9a05      	ldr	r2, [sp, #20]
 8013306:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801330a:	1ad3      	subs	r3, r2, r3
 801330c:	2b10      	cmp	r3, #16
 801330e:	dc02      	bgt.n	8013316 <__ieee754_rem_pio2+0x1be>
 8013310:	e9c4 0100 	strd	r0, r1, [r4]
 8013314:	e039      	b.n	801338a <__ieee754_rem_pio2+0x232>
 8013316:	a34c      	add	r3, pc, #304	; (adr r3, 8013448 <__ieee754_rem_pio2+0x2f0>)
 8013318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013320:	f7ed f982 	bl	8000628 <__aeabi_dmul>
 8013324:	4606      	mov	r6, r0
 8013326:	460f      	mov	r7, r1
 8013328:	4602      	mov	r2, r0
 801332a:	460b      	mov	r3, r1
 801332c:	4650      	mov	r0, sl
 801332e:	4659      	mov	r1, fp
 8013330:	f7ec ffc2 	bl	80002b8 <__aeabi_dsub>
 8013334:	4602      	mov	r2, r0
 8013336:	460b      	mov	r3, r1
 8013338:	4680      	mov	r8, r0
 801333a:	4689      	mov	r9, r1
 801333c:	4650      	mov	r0, sl
 801333e:	4659      	mov	r1, fp
 8013340:	f7ec ffba 	bl	80002b8 <__aeabi_dsub>
 8013344:	4632      	mov	r2, r6
 8013346:	463b      	mov	r3, r7
 8013348:	f7ec ffb6 	bl	80002b8 <__aeabi_dsub>
 801334c:	a340      	add	r3, pc, #256	; (adr r3, 8013450 <__ieee754_rem_pio2+0x2f8>)
 801334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013352:	4606      	mov	r6, r0
 8013354:	460f      	mov	r7, r1
 8013356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801335a:	f7ed f965 	bl	8000628 <__aeabi_dmul>
 801335e:	4632      	mov	r2, r6
 8013360:	463b      	mov	r3, r7
 8013362:	f7ec ffa9 	bl	80002b8 <__aeabi_dsub>
 8013366:	4602      	mov	r2, r0
 8013368:	460b      	mov	r3, r1
 801336a:	4606      	mov	r6, r0
 801336c:	460f      	mov	r7, r1
 801336e:	4640      	mov	r0, r8
 8013370:	4649      	mov	r1, r9
 8013372:	f7ec ffa1 	bl	80002b8 <__aeabi_dsub>
 8013376:	9a05      	ldr	r2, [sp, #20]
 8013378:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801337c:	1ad3      	subs	r3, r2, r3
 801337e:	2b31      	cmp	r3, #49	; 0x31
 8013380:	dc20      	bgt.n	80133c4 <__ieee754_rem_pio2+0x26c>
 8013382:	e9c4 0100 	strd	r0, r1, [r4]
 8013386:	46c2      	mov	sl, r8
 8013388:	46cb      	mov	fp, r9
 801338a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801338e:	4650      	mov	r0, sl
 8013390:	4642      	mov	r2, r8
 8013392:	464b      	mov	r3, r9
 8013394:	4659      	mov	r1, fp
 8013396:	f7ec ff8f 	bl	80002b8 <__aeabi_dsub>
 801339a:	463b      	mov	r3, r7
 801339c:	4632      	mov	r2, r6
 801339e:	f7ec ff8b 	bl	80002b8 <__aeabi_dsub>
 80133a2:	9b04      	ldr	r3, [sp, #16]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80133aa:	f6bf af11 	bge.w	80131d0 <__ieee754_rem_pio2+0x78>
 80133ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80133b2:	6063      	str	r3, [r4, #4]
 80133b4:	f8c4 8000 	str.w	r8, [r4]
 80133b8:	60a0      	str	r0, [r4, #8]
 80133ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80133be:	60e3      	str	r3, [r4, #12]
 80133c0:	426d      	negs	r5, r5
 80133c2:	e705      	b.n	80131d0 <__ieee754_rem_pio2+0x78>
 80133c4:	a326      	add	r3, pc, #152	; (adr r3, 8013460 <__ieee754_rem_pio2+0x308>)
 80133c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80133ce:	f7ed f92b 	bl	8000628 <__aeabi_dmul>
 80133d2:	4606      	mov	r6, r0
 80133d4:	460f      	mov	r7, r1
 80133d6:	4602      	mov	r2, r0
 80133d8:	460b      	mov	r3, r1
 80133da:	4640      	mov	r0, r8
 80133dc:	4649      	mov	r1, r9
 80133de:	f7ec ff6b 	bl	80002b8 <__aeabi_dsub>
 80133e2:	4602      	mov	r2, r0
 80133e4:	460b      	mov	r3, r1
 80133e6:	4682      	mov	sl, r0
 80133e8:	468b      	mov	fp, r1
 80133ea:	4640      	mov	r0, r8
 80133ec:	4649      	mov	r1, r9
 80133ee:	f7ec ff63 	bl	80002b8 <__aeabi_dsub>
 80133f2:	4632      	mov	r2, r6
 80133f4:	463b      	mov	r3, r7
 80133f6:	f7ec ff5f 	bl	80002b8 <__aeabi_dsub>
 80133fa:	a31b      	add	r3, pc, #108	; (adr r3, 8013468 <__ieee754_rem_pio2+0x310>)
 80133fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013400:	4606      	mov	r6, r0
 8013402:	460f      	mov	r7, r1
 8013404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013408:	f7ed f90e 	bl	8000628 <__aeabi_dmul>
 801340c:	4632      	mov	r2, r6
 801340e:	463b      	mov	r3, r7
 8013410:	f7ec ff52 	bl	80002b8 <__aeabi_dsub>
 8013414:	4606      	mov	r6, r0
 8013416:	460f      	mov	r7, r1
 8013418:	e764      	b.n	80132e4 <__ieee754_rem_pio2+0x18c>
 801341a:	4b1b      	ldr	r3, [pc, #108]	; (8013488 <__ieee754_rem_pio2+0x330>)
 801341c:	4598      	cmp	r8, r3
 801341e:	dd35      	ble.n	801348c <__ieee754_rem_pio2+0x334>
 8013420:	ee10 2a10 	vmov	r2, s0
 8013424:	463b      	mov	r3, r7
 8013426:	4630      	mov	r0, r6
 8013428:	4639      	mov	r1, r7
 801342a:	f7ec ff45 	bl	80002b8 <__aeabi_dsub>
 801342e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013432:	e9c4 0100 	strd	r0, r1, [r4]
 8013436:	e6a1      	b.n	801317c <__ieee754_rem_pio2+0x24>
 8013438:	54400000 	.word	0x54400000
 801343c:	3ff921fb 	.word	0x3ff921fb
 8013440:	1a626331 	.word	0x1a626331
 8013444:	3dd0b461 	.word	0x3dd0b461
 8013448:	1a600000 	.word	0x1a600000
 801344c:	3dd0b461 	.word	0x3dd0b461
 8013450:	2e037073 	.word	0x2e037073
 8013454:	3ba3198a 	.word	0x3ba3198a
 8013458:	6dc9c883 	.word	0x6dc9c883
 801345c:	3fe45f30 	.word	0x3fe45f30
 8013460:	2e000000 	.word	0x2e000000
 8013464:	3ba3198a 	.word	0x3ba3198a
 8013468:	252049c1 	.word	0x252049c1
 801346c:	397b839a 	.word	0x397b839a
 8013470:	3fe921fb 	.word	0x3fe921fb
 8013474:	4002d97b 	.word	0x4002d97b
 8013478:	3ff921fb 	.word	0x3ff921fb
 801347c:	413921fb 	.word	0x413921fb
 8013480:	3fe00000 	.word	0x3fe00000
 8013484:	08036868 	.word	0x08036868
 8013488:	7fefffff 	.word	0x7fefffff
 801348c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8013490:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8013494:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8013498:	4630      	mov	r0, r6
 801349a:	460f      	mov	r7, r1
 801349c:	f7ed fb74 	bl	8000b88 <__aeabi_d2iz>
 80134a0:	f7ed f858 	bl	8000554 <__aeabi_i2d>
 80134a4:	4602      	mov	r2, r0
 80134a6:	460b      	mov	r3, r1
 80134a8:	4630      	mov	r0, r6
 80134aa:	4639      	mov	r1, r7
 80134ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80134b0:	f7ec ff02 	bl	80002b8 <__aeabi_dsub>
 80134b4:	2200      	movs	r2, #0
 80134b6:	4b1f      	ldr	r3, [pc, #124]	; (8013534 <__ieee754_rem_pio2+0x3dc>)
 80134b8:	f7ed f8b6 	bl	8000628 <__aeabi_dmul>
 80134bc:	460f      	mov	r7, r1
 80134be:	4606      	mov	r6, r0
 80134c0:	f7ed fb62 	bl	8000b88 <__aeabi_d2iz>
 80134c4:	f7ed f846 	bl	8000554 <__aeabi_i2d>
 80134c8:	4602      	mov	r2, r0
 80134ca:	460b      	mov	r3, r1
 80134cc:	4630      	mov	r0, r6
 80134ce:	4639      	mov	r1, r7
 80134d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80134d4:	f7ec fef0 	bl	80002b8 <__aeabi_dsub>
 80134d8:	2200      	movs	r2, #0
 80134da:	4b16      	ldr	r3, [pc, #88]	; (8013534 <__ieee754_rem_pio2+0x3dc>)
 80134dc:	f7ed f8a4 	bl	8000628 <__aeabi_dmul>
 80134e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80134e4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80134e8:	f04f 0803 	mov.w	r8, #3
 80134ec:	2600      	movs	r6, #0
 80134ee:	2700      	movs	r7, #0
 80134f0:	4632      	mov	r2, r6
 80134f2:	463b      	mov	r3, r7
 80134f4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80134f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80134fc:	f7ed fafc 	bl	8000af8 <__aeabi_dcmpeq>
 8013500:	b9b0      	cbnz	r0, 8013530 <__ieee754_rem_pio2+0x3d8>
 8013502:	4b0d      	ldr	r3, [pc, #52]	; (8013538 <__ieee754_rem_pio2+0x3e0>)
 8013504:	9301      	str	r3, [sp, #4]
 8013506:	2302      	movs	r3, #2
 8013508:	9300      	str	r3, [sp, #0]
 801350a:	462a      	mov	r2, r5
 801350c:	4643      	mov	r3, r8
 801350e:	4621      	mov	r1, r4
 8013510:	a806      	add	r0, sp, #24
 8013512:	f000 fba9 	bl	8013c68 <__kernel_rem_pio2>
 8013516:	9b04      	ldr	r3, [sp, #16]
 8013518:	2b00      	cmp	r3, #0
 801351a:	4605      	mov	r5, r0
 801351c:	f6bf ae58 	bge.w	80131d0 <__ieee754_rem_pio2+0x78>
 8013520:	6863      	ldr	r3, [r4, #4]
 8013522:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013526:	6063      	str	r3, [r4, #4]
 8013528:	68e3      	ldr	r3, [r4, #12]
 801352a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801352e:	e746      	b.n	80133be <__ieee754_rem_pio2+0x266>
 8013530:	46d0      	mov	r8, sl
 8013532:	e7dd      	b.n	80134f0 <__ieee754_rem_pio2+0x398>
 8013534:	41700000 	.word	0x41700000
 8013538:	080368e8 	.word	0x080368e8

0801353c <__ieee754_sqrt>:
 801353c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013540:	4955      	ldr	r1, [pc, #340]	; (8013698 <__ieee754_sqrt+0x15c>)
 8013542:	ec55 4b10 	vmov	r4, r5, d0
 8013546:	43a9      	bics	r1, r5
 8013548:	462b      	mov	r3, r5
 801354a:	462a      	mov	r2, r5
 801354c:	d112      	bne.n	8013574 <__ieee754_sqrt+0x38>
 801354e:	ee10 2a10 	vmov	r2, s0
 8013552:	ee10 0a10 	vmov	r0, s0
 8013556:	4629      	mov	r1, r5
 8013558:	f7ed f866 	bl	8000628 <__aeabi_dmul>
 801355c:	4602      	mov	r2, r0
 801355e:	460b      	mov	r3, r1
 8013560:	4620      	mov	r0, r4
 8013562:	4629      	mov	r1, r5
 8013564:	f7ec feaa 	bl	80002bc <__adddf3>
 8013568:	4604      	mov	r4, r0
 801356a:	460d      	mov	r5, r1
 801356c:	ec45 4b10 	vmov	d0, r4, r5
 8013570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013574:	2d00      	cmp	r5, #0
 8013576:	ee10 0a10 	vmov	r0, s0
 801357a:	4621      	mov	r1, r4
 801357c:	dc0f      	bgt.n	801359e <__ieee754_sqrt+0x62>
 801357e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013582:	4330      	orrs	r0, r6
 8013584:	d0f2      	beq.n	801356c <__ieee754_sqrt+0x30>
 8013586:	b155      	cbz	r5, 801359e <__ieee754_sqrt+0x62>
 8013588:	ee10 2a10 	vmov	r2, s0
 801358c:	4620      	mov	r0, r4
 801358e:	4629      	mov	r1, r5
 8013590:	f7ec fe92 	bl	80002b8 <__aeabi_dsub>
 8013594:	4602      	mov	r2, r0
 8013596:	460b      	mov	r3, r1
 8013598:	f7ed f970 	bl	800087c <__aeabi_ddiv>
 801359c:	e7e4      	b.n	8013568 <__ieee754_sqrt+0x2c>
 801359e:	151b      	asrs	r3, r3, #20
 80135a0:	d073      	beq.n	801368a <__ieee754_sqrt+0x14e>
 80135a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80135a6:	07dd      	lsls	r5, r3, #31
 80135a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80135ac:	bf48      	it	mi
 80135ae:	0fc8      	lsrmi	r0, r1, #31
 80135b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80135b4:	bf44      	itt	mi
 80135b6:	0049      	lslmi	r1, r1, #1
 80135b8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80135bc:	2500      	movs	r5, #0
 80135be:	1058      	asrs	r0, r3, #1
 80135c0:	0fcb      	lsrs	r3, r1, #31
 80135c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80135c6:	0049      	lsls	r1, r1, #1
 80135c8:	2316      	movs	r3, #22
 80135ca:	462c      	mov	r4, r5
 80135cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80135d0:	19a7      	adds	r7, r4, r6
 80135d2:	4297      	cmp	r7, r2
 80135d4:	bfde      	ittt	le
 80135d6:	19bc      	addle	r4, r7, r6
 80135d8:	1bd2      	suble	r2, r2, r7
 80135da:	19ad      	addle	r5, r5, r6
 80135dc:	0fcf      	lsrs	r7, r1, #31
 80135de:	3b01      	subs	r3, #1
 80135e0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80135e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80135e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80135ec:	d1f0      	bne.n	80135d0 <__ieee754_sqrt+0x94>
 80135ee:	f04f 0c20 	mov.w	ip, #32
 80135f2:	469e      	mov	lr, r3
 80135f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80135f8:	42a2      	cmp	r2, r4
 80135fa:	eb06 070e 	add.w	r7, r6, lr
 80135fe:	dc02      	bgt.n	8013606 <__ieee754_sqrt+0xca>
 8013600:	d112      	bne.n	8013628 <__ieee754_sqrt+0xec>
 8013602:	428f      	cmp	r7, r1
 8013604:	d810      	bhi.n	8013628 <__ieee754_sqrt+0xec>
 8013606:	2f00      	cmp	r7, #0
 8013608:	eb07 0e06 	add.w	lr, r7, r6
 801360c:	da42      	bge.n	8013694 <__ieee754_sqrt+0x158>
 801360e:	f1be 0f00 	cmp.w	lr, #0
 8013612:	db3f      	blt.n	8013694 <__ieee754_sqrt+0x158>
 8013614:	f104 0801 	add.w	r8, r4, #1
 8013618:	1b12      	subs	r2, r2, r4
 801361a:	428f      	cmp	r7, r1
 801361c:	bf88      	it	hi
 801361e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013622:	1bc9      	subs	r1, r1, r7
 8013624:	4433      	add	r3, r6
 8013626:	4644      	mov	r4, r8
 8013628:	0052      	lsls	r2, r2, #1
 801362a:	f1bc 0c01 	subs.w	ip, ip, #1
 801362e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8013632:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013636:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801363a:	d1dd      	bne.n	80135f8 <__ieee754_sqrt+0xbc>
 801363c:	430a      	orrs	r2, r1
 801363e:	d006      	beq.n	801364e <__ieee754_sqrt+0x112>
 8013640:	1c5c      	adds	r4, r3, #1
 8013642:	bf13      	iteet	ne
 8013644:	3301      	addne	r3, #1
 8013646:	3501      	addeq	r5, #1
 8013648:	4663      	moveq	r3, ip
 801364a:	f023 0301 	bicne.w	r3, r3, #1
 801364e:	106a      	asrs	r2, r5, #1
 8013650:	085b      	lsrs	r3, r3, #1
 8013652:	07e9      	lsls	r1, r5, #31
 8013654:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8013658:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801365c:	bf48      	it	mi
 801365e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8013662:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8013666:	461c      	mov	r4, r3
 8013668:	e780      	b.n	801356c <__ieee754_sqrt+0x30>
 801366a:	0aca      	lsrs	r2, r1, #11
 801366c:	3815      	subs	r0, #21
 801366e:	0549      	lsls	r1, r1, #21
 8013670:	2a00      	cmp	r2, #0
 8013672:	d0fa      	beq.n	801366a <__ieee754_sqrt+0x12e>
 8013674:	02d6      	lsls	r6, r2, #11
 8013676:	d50a      	bpl.n	801368e <__ieee754_sqrt+0x152>
 8013678:	f1c3 0420 	rsb	r4, r3, #32
 801367c:	fa21 f404 	lsr.w	r4, r1, r4
 8013680:	1e5d      	subs	r5, r3, #1
 8013682:	4099      	lsls	r1, r3
 8013684:	4322      	orrs	r2, r4
 8013686:	1b43      	subs	r3, r0, r5
 8013688:	e78b      	b.n	80135a2 <__ieee754_sqrt+0x66>
 801368a:	4618      	mov	r0, r3
 801368c:	e7f0      	b.n	8013670 <__ieee754_sqrt+0x134>
 801368e:	0052      	lsls	r2, r2, #1
 8013690:	3301      	adds	r3, #1
 8013692:	e7ef      	b.n	8013674 <__ieee754_sqrt+0x138>
 8013694:	46a0      	mov	r8, r4
 8013696:	e7bf      	b.n	8013618 <__ieee754_sqrt+0xdc>
 8013698:	7ff00000 	.word	0x7ff00000

0801369c <__ieee754_expf>:
 801369c:	ee10 2a10 	vmov	r2, s0
 80136a0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80136a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80136a8:	d902      	bls.n	80136b0 <__ieee754_expf+0x14>
 80136aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80136ae:	4770      	bx	lr
 80136b0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 80136b4:	d106      	bne.n	80136c4 <__ieee754_expf+0x28>
 80136b6:	eddf 7a51 	vldr	s15, [pc, #324]	; 80137fc <__ieee754_expf+0x160>
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	bf18      	it	ne
 80136be:	eeb0 0a67 	vmovne.f32	s0, s15
 80136c2:	4770      	bx	lr
 80136c4:	484e      	ldr	r0, [pc, #312]	; (8013800 <__ieee754_expf+0x164>)
 80136c6:	4282      	cmp	r2, r0
 80136c8:	dd04      	ble.n	80136d4 <__ieee754_expf+0x38>
 80136ca:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8013804 <__ieee754_expf+0x168>
 80136ce:	ee20 0a00 	vmul.f32	s0, s0, s0
 80136d2:	4770      	bx	lr
 80136d4:	2a00      	cmp	r2, #0
 80136d6:	da03      	bge.n	80136e0 <__ieee754_expf+0x44>
 80136d8:	4a4b      	ldr	r2, [pc, #300]	; (8013808 <__ieee754_expf+0x16c>)
 80136da:	4291      	cmp	r1, r2
 80136dc:	f200 808a 	bhi.w	80137f4 <__ieee754_expf+0x158>
 80136e0:	4a4a      	ldr	r2, [pc, #296]	; (801380c <__ieee754_expf+0x170>)
 80136e2:	4291      	cmp	r1, r2
 80136e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80136e8:	d954      	bls.n	8013794 <__ieee754_expf+0xf8>
 80136ea:	4a49      	ldr	r2, [pc, #292]	; (8013810 <__ieee754_expf+0x174>)
 80136ec:	4291      	cmp	r1, r2
 80136ee:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80136f2:	d836      	bhi.n	8013762 <__ieee754_expf+0xc6>
 80136f4:	4947      	ldr	r1, [pc, #284]	; (8013814 <__ieee754_expf+0x178>)
 80136f6:	4411      	add	r1, r2
 80136f8:	ed91 7a00 	vldr	s14, [r1]
 80136fc:	4946      	ldr	r1, [pc, #280]	; (8013818 <__ieee754_expf+0x17c>)
 80136fe:	440a      	add	r2, r1
 8013700:	edd2 7a00 	vldr	s15, [r2]
 8013704:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013708:	f1c3 0201 	rsb	r2, r3, #1
 801370c:	1ad2      	subs	r2, r2, r3
 801370e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013712:	ee60 6a00 	vmul.f32	s13, s0, s0
 8013716:	eddf 5a41 	vldr	s11, [pc, #260]	; 801381c <__ieee754_expf+0x180>
 801371a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8013820 <__ieee754_expf+0x184>
 801371e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8013722:	eddf 5a40 	vldr	s11, [pc, #256]	; 8013824 <__ieee754_expf+0x188>
 8013726:	eee5 5a26 	vfma.f32	s11, s10, s13
 801372a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8013828 <__ieee754_expf+0x18c>
 801372e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8013732:	eddf 5a3e 	vldr	s11, [pc, #248]	; 801382c <__ieee754_expf+0x190>
 8013736:	eee5 5a26 	vfma.f32	s11, s10, s13
 801373a:	eeb0 5a40 	vmov.f32	s10, s0
 801373e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8013742:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013746:	eef0 6a45 	vmov.f32	s13, s10
 801374a:	ee20 5a05 	vmul.f32	s10, s0, s10
 801374e:	bb92      	cbnz	r2, 80137b6 <__ieee754_expf+0x11a>
 8013750:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8013754:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013758:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801375c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8013760:	4770      	bx	lr
 8013762:	4b33      	ldr	r3, [pc, #204]	; (8013830 <__ieee754_expf+0x194>)
 8013764:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8013834 <__ieee754_expf+0x198>
 8013768:	4413      	add	r3, r2
 801376a:	edd3 7a00 	vldr	s15, [r3]
 801376e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013772:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8013838 <__ieee754_expf+0x19c>
 8013776:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801377a:	ee17 2a90 	vmov	r2, s15
 801377e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013782:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013786:	eeb0 7a40 	vmov.f32	s14, s0
 801378a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801383c <__ieee754_expf+0x1a0>
 801378e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013792:	e7bc      	b.n	801370e <__ieee754_expf+0x72>
 8013794:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8013798:	d20b      	bcs.n	80137b2 <__ieee754_expf+0x116>
 801379a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8013804 <__ieee754_expf+0x168>
 801379e:	ee70 6a26 	vadd.f32	s13, s0, s13
 80137a2:	eef4 6ac6 	vcmpe.f32	s13, s12
 80137a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137aa:	dd02      	ble.n	80137b2 <__ieee754_expf+0x116>
 80137ac:	ee30 0a06 	vadd.f32	s0, s0, s12
 80137b0:	4770      	bx	lr
 80137b2:	2200      	movs	r2, #0
 80137b4:	e7ad      	b.n	8013712 <__ieee754_expf+0x76>
 80137b6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 80137ba:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80137be:	ee85 0a26 	vdiv.f32	s0, s10, s13
 80137c2:	bfb8      	it	lt
 80137c4:	3264      	addlt	r2, #100	; 0x64
 80137c6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80137ca:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80137ce:	ee76 7a40 	vsub.f32	s15, s12, s0
 80137d2:	ee17 3a90 	vmov	r3, s15
 80137d6:	bfab      	itete	ge
 80137d8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80137dc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80137e0:	ee00 3a10 	vmovge	s0, r3
 80137e4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8013840 <__ieee754_expf+0x1a4>
 80137e8:	bfbc      	itt	lt
 80137ea:	ee00 3a10 	vmovlt	s0, r3
 80137ee:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80137f2:	4770      	bx	lr
 80137f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80137fc <__ieee754_expf+0x160>
 80137f8:	4770      	bx	lr
 80137fa:	bf00      	nop
 80137fc:	00000000 	.word	0x00000000
 8013800:	42b17217 	.word	0x42b17217
 8013804:	7149f2ca 	.word	0x7149f2ca
 8013808:	42cff1b5 	.word	0x42cff1b5
 801380c:	3eb17218 	.word	0x3eb17218
 8013810:	3f851591 	.word	0x3f851591
 8013814:	080369f8 	.word	0x080369f8
 8013818:	08036a00 	.word	0x08036a00
 801381c:	3331bb4c 	.word	0x3331bb4c
 8013820:	b5ddea0e 	.word	0xb5ddea0e
 8013824:	388ab355 	.word	0x388ab355
 8013828:	bb360b61 	.word	0xbb360b61
 801382c:	3e2aaaab 	.word	0x3e2aaaab
 8013830:	080369f0 	.word	0x080369f0
 8013834:	3fb8aa3b 	.word	0x3fb8aa3b
 8013838:	3f317180 	.word	0x3f317180
 801383c:	3717f7d1 	.word	0x3717f7d1
 8013840:	0d800000 	.word	0x0d800000

08013844 <__ieee754_logf>:
 8013844:	ee10 3a10 	vmov	r3, s0
 8013848:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801384c:	d106      	bne.n	801385c <__ieee754_logf+0x18>
 801384e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80139e4 <__ieee754_logf+0x1a0>
 8013852:	eddf 7a65 	vldr	s15, [pc, #404]	; 80139e8 <__ieee754_logf+0x1a4>
 8013856:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801385a:	4770      	bx	lr
 801385c:	2b00      	cmp	r3, #0
 801385e:	da02      	bge.n	8013866 <__ieee754_logf+0x22>
 8013860:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013864:	e7f5      	b.n	8013852 <__ieee754_logf+0xe>
 8013866:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801386a:	db02      	blt.n	8013872 <__ieee754_logf+0x2e>
 801386c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013870:	4770      	bx	lr
 8013872:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013876:	bfbf      	itttt	lt
 8013878:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 80139ec <__ieee754_logf+0x1a8>
 801387c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8013880:	f06f 0118 	mvnlt.w	r1, #24
 8013884:	ee17 3a90 	vmovlt	r3, s15
 8013888:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801388c:	bfa8      	it	ge
 801388e:	2100      	movge	r1, #0
 8013890:	3a7f      	subs	r2, #127	; 0x7f
 8013892:	440a      	add	r2, r1
 8013894:	4956      	ldr	r1, [pc, #344]	; (80139f0 <__ieee754_logf+0x1ac>)
 8013896:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801389a:	4419      	add	r1, r3
 801389c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80138a0:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 80138a4:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80138a8:	4319      	orrs	r1, r3
 80138aa:	ee07 1a90 	vmov	s15, r1
 80138ae:	f103 010f 	add.w	r1, r3, #15
 80138b2:	f3c1 0116 	ubfx	r1, r1, #0, #23
 80138b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80138ba:	290f      	cmp	r1, #15
 80138bc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80138c0:	dc31      	bgt.n	8013926 <__ieee754_logf+0xe2>
 80138c2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80138c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ca:	d10f      	bne.n	80138ec <__ieee754_logf+0xa8>
 80138cc:	2a00      	cmp	r2, #0
 80138ce:	f000 8085 	beq.w	80139dc <__ieee754_logf+0x198>
 80138d2:	ee07 2a90 	vmov	s15, r2
 80138d6:	ed9f 0a47 	vldr	s0, [pc, #284]	; 80139f4 <__ieee754_logf+0x1b0>
 80138da:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80139f8 <__ieee754_logf+0x1b4>
 80138de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80138e6:	eea7 0a87 	vfma.f32	s0, s15, s14
 80138ea:	4770      	bx	lr
 80138ec:	eddf 7a43 	vldr	s15, [pc, #268]	; 80139fc <__ieee754_logf+0x1b8>
 80138f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80138f4:	eea0 7a67 	vfms.f32	s14, s0, s15
 80138f8:	ee60 7a00 	vmul.f32	s15, s0, s0
 80138fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013900:	b912      	cbnz	r2, 8013908 <__ieee754_logf+0xc4>
 8013902:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013906:	4770      	bx	lr
 8013908:	ee07 2a90 	vmov	s15, r2
 801390c:	eddf 6a39 	vldr	s13, [pc, #228]	; 80139f4 <__ieee754_logf+0x1b0>
 8013910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013914:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013918:	ee37 0a40 	vsub.f32	s0, s14, s0
 801391c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80139f8 <__ieee754_logf+0x1b4>
 8013920:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8013924:	4770      	bx	lr
 8013926:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801392a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801392e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013a00 <__ieee754_logf+0x1bc>
 8013932:	eddf 4a34 	vldr	s9, [pc, #208]	; 8013a04 <__ieee754_logf+0x1c0>
 8013936:	4934      	ldr	r1, [pc, #208]	; (8013a08 <__ieee754_logf+0x1c4>)
 8013938:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801393c:	4419      	add	r1, r3
 801393e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8013942:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8013946:	430b      	orrs	r3, r1
 8013948:	2b00      	cmp	r3, #0
 801394a:	ee07 2a90 	vmov	s15, r2
 801394e:	ee26 5a06 	vmul.f32	s10, s12, s12
 8013952:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013956:	ee25 7a05 	vmul.f32	s14, s10, s10
 801395a:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8013a0c <__ieee754_logf+0x1c8>
 801395e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013962:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8013a10 <__ieee754_logf+0x1cc>
 8013966:	eee7 5a87 	vfma.f32	s11, s15, s14
 801396a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8013a14 <__ieee754_logf+0x1d0>
 801396e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8013972:	eddf 4a29 	vldr	s9, [pc, #164]	; 8013a18 <__ieee754_logf+0x1d4>
 8013976:	eee7 4a87 	vfma.f32	s9, s15, s14
 801397a:	eddf 7a28 	vldr	s15, [pc, #160]	; 8013a1c <__ieee754_logf+0x1d8>
 801397e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8013982:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013986:	eee5 7a87 	vfma.f32	s15, s11, s14
 801398a:	dd1c      	ble.n	80139c6 <__ieee754_logf+0x182>
 801398c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8013990:	ee20 7a07 	vmul.f32	s14, s0, s14
 8013994:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013998:	ee77 7a87 	vadd.f32	s15, s15, s14
 801399c:	ee67 7a86 	vmul.f32	s15, s15, s12
 80139a0:	b922      	cbnz	r2, 80139ac <__ieee754_logf+0x168>
 80139a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139aa:	4770      	bx	lr
 80139ac:	ed9f 6a11 	vldr	s12, [pc, #68]	; 80139f4 <__ieee754_logf+0x1b0>
 80139b0:	eee6 7a86 	vfma.f32	s15, s13, s12
 80139b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80139bc:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80139f8 <__ieee754_logf+0x1b4>
 80139c0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80139c4:	4770      	bx	lr
 80139c6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80139ca:	ee67 7a86 	vmul.f32	s15, s15, s12
 80139ce:	2a00      	cmp	r2, #0
 80139d0:	d0e9      	beq.n	80139a6 <__ieee754_logf+0x162>
 80139d2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80139f4 <__ieee754_logf+0x1b0>
 80139d6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80139da:	e7ed      	b.n	80139b8 <__ieee754_logf+0x174>
 80139dc:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80139e8 <__ieee754_logf+0x1a4>
 80139e0:	4770      	bx	lr
 80139e2:	bf00      	nop
 80139e4:	cc000000 	.word	0xcc000000
 80139e8:	00000000 	.word	0x00000000
 80139ec:	4c000000 	.word	0x4c000000
 80139f0:	004afb20 	.word	0x004afb20
 80139f4:	3717f7d1 	.word	0x3717f7d1
 80139f8:	3f317180 	.word	0x3f317180
 80139fc:	3eaaaaab 	.word	0x3eaaaaab
 8013a00:	3e1cd04f 	.word	0x3e1cd04f
 8013a04:	3e178897 	.word	0x3e178897
 8013a08:	ffcf5c30 	.word	0xffcf5c30
 8013a0c:	3e638e29 	.word	0x3e638e29
 8013a10:	3ecccccd 	.word	0x3ecccccd
 8013a14:	3e3a3325 	.word	0x3e3a3325
 8013a18:	3e924925 	.word	0x3e924925
 8013a1c:	3f2aaaab 	.word	0x3f2aaaab

08013a20 <__ieee754_log10f>:
 8013a20:	b508      	push	{r3, lr}
 8013a22:	ee10 2a10 	vmov	r2, s0
 8013a26:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8013a2a:	ed2d 8b02 	vpush	{d8}
 8013a2e:	d108      	bne.n	8013a42 <__ieee754_log10f+0x22>
 8013a30:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8013ab4 <__ieee754_log10f+0x94>
 8013a34:	eddf 7a20 	vldr	s15, [pc, #128]	; 8013ab8 <__ieee754_log10f+0x98>
 8013a38:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8013a3c:	ecbd 8b02 	vpop	{d8}
 8013a40:	bd08      	pop	{r3, pc}
 8013a42:	2a00      	cmp	r2, #0
 8013a44:	da02      	bge.n	8013a4c <__ieee754_log10f+0x2c>
 8013a46:	ee30 7a40 	vsub.f32	s14, s0, s0
 8013a4a:	e7f3      	b.n	8013a34 <__ieee754_log10f+0x14>
 8013a4c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8013a50:	db02      	blt.n	8013a58 <__ieee754_log10f+0x38>
 8013a52:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013a56:	e7f1      	b.n	8013a3c <__ieee754_log10f+0x1c>
 8013a58:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8013a5c:	bfbf      	itttt	lt
 8013a5e:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 8013abc <__ieee754_log10f+0x9c>
 8013a62:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8013a66:	f06f 0118 	mvnlt.w	r1, #24
 8013a6a:	ee17 2a90 	vmovlt	r2, s15
 8013a6e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8013a72:	bfa8      	it	ge
 8013a74:	2100      	movge	r1, #0
 8013a76:	3b7f      	subs	r3, #127	; 0x7f
 8013a78:	440b      	add	r3, r1
 8013a7a:	0fd9      	lsrs	r1, r3, #31
 8013a7c:	440b      	add	r3, r1
 8013a7e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8013a82:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8013a86:	ee07 3a90 	vmov	s15, r3
 8013a8a:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 8013a8e:	ee00 3a10 	vmov	s0, r3
 8013a92:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8013a96:	f7ff fed5 	bl	8013844 <__ieee754_logf>
 8013a9a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8013ac0 <__ieee754_log10f+0xa0>
 8013a9e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013aa2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8013ac4 <__ieee754_log10f+0xa4>
 8013aa6:	eea8 0a27 	vfma.f32	s0, s16, s15
 8013aaa:	eddf 7a07 	vldr	s15, [pc, #28]	; 8013ac8 <__ieee754_log10f+0xa8>
 8013aae:	eea8 0a27 	vfma.f32	s0, s16, s15
 8013ab2:	e7c3      	b.n	8013a3c <__ieee754_log10f+0x1c>
 8013ab4:	cc000000 	.word	0xcc000000
 8013ab8:	00000000 	.word	0x00000000
 8013abc:	4c000000 	.word	0x4c000000
 8013ac0:	3ede5bd9 	.word	0x3ede5bd9
 8013ac4:	355427db 	.word	0x355427db
 8013ac8:	3e9a2080 	.word	0x3e9a2080

08013acc <__ieee754_sqrtf>:
 8013acc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013ad0:	4770      	bx	lr
 8013ad2:	0000      	movs	r0, r0
 8013ad4:	0000      	movs	r0, r0
	...

08013ad8 <__kernel_cos>:
 8013ad8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013adc:	ec59 8b10 	vmov	r8, r9, d0
 8013ae0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8013ae4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013ae8:	ed2d 8b02 	vpush	{d8}
 8013aec:	eeb0 8a41 	vmov.f32	s16, s2
 8013af0:	eef0 8a61 	vmov.f32	s17, s3
 8013af4:	da07      	bge.n	8013b06 <__kernel_cos+0x2e>
 8013af6:	ee10 0a10 	vmov	r0, s0
 8013afa:	4649      	mov	r1, r9
 8013afc:	f7ed f844 	bl	8000b88 <__aeabi_d2iz>
 8013b00:	2800      	cmp	r0, #0
 8013b02:	f000 8089 	beq.w	8013c18 <__kernel_cos+0x140>
 8013b06:	4642      	mov	r2, r8
 8013b08:	464b      	mov	r3, r9
 8013b0a:	4640      	mov	r0, r8
 8013b0c:	4649      	mov	r1, r9
 8013b0e:	f7ec fd8b 	bl	8000628 <__aeabi_dmul>
 8013b12:	2200      	movs	r2, #0
 8013b14:	4b4e      	ldr	r3, [pc, #312]	; (8013c50 <__kernel_cos+0x178>)
 8013b16:	4604      	mov	r4, r0
 8013b18:	460d      	mov	r5, r1
 8013b1a:	f7ec fd85 	bl	8000628 <__aeabi_dmul>
 8013b1e:	a340      	add	r3, pc, #256	; (adr r3, 8013c20 <__kernel_cos+0x148>)
 8013b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b24:	4682      	mov	sl, r0
 8013b26:	468b      	mov	fp, r1
 8013b28:	4620      	mov	r0, r4
 8013b2a:	4629      	mov	r1, r5
 8013b2c:	f7ec fd7c 	bl	8000628 <__aeabi_dmul>
 8013b30:	a33d      	add	r3, pc, #244	; (adr r3, 8013c28 <__kernel_cos+0x150>)
 8013b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b36:	f7ec fbc1 	bl	80002bc <__adddf3>
 8013b3a:	4622      	mov	r2, r4
 8013b3c:	462b      	mov	r3, r5
 8013b3e:	f7ec fd73 	bl	8000628 <__aeabi_dmul>
 8013b42:	a33b      	add	r3, pc, #236	; (adr r3, 8013c30 <__kernel_cos+0x158>)
 8013b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b48:	f7ec fbb6 	bl	80002b8 <__aeabi_dsub>
 8013b4c:	4622      	mov	r2, r4
 8013b4e:	462b      	mov	r3, r5
 8013b50:	f7ec fd6a 	bl	8000628 <__aeabi_dmul>
 8013b54:	a338      	add	r3, pc, #224	; (adr r3, 8013c38 <__kernel_cos+0x160>)
 8013b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b5a:	f7ec fbaf 	bl	80002bc <__adddf3>
 8013b5e:	4622      	mov	r2, r4
 8013b60:	462b      	mov	r3, r5
 8013b62:	f7ec fd61 	bl	8000628 <__aeabi_dmul>
 8013b66:	a336      	add	r3, pc, #216	; (adr r3, 8013c40 <__kernel_cos+0x168>)
 8013b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b6c:	f7ec fba4 	bl	80002b8 <__aeabi_dsub>
 8013b70:	4622      	mov	r2, r4
 8013b72:	462b      	mov	r3, r5
 8013b74:	f7ec fd58 	bl	8000628 <__aeabi_dmul>
 8013b78:	a333      	add	r3, pc, #204	; (adr r3, 8013c48 <__kernel_cos+0x170>)
 8013b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b7e:	f7ec fb9d 	bl	80002bc <__adddf3>
 8013b82:	4622      	mov	r2, r4
 8013b84:	462b      	mov	r3, r5
 8013b86:	f7ec fd4f 	bl	8000628 <__aeabi_dmul>
 8013b8a:	4622      	mov	r2, r4
 8013b8c:	462b      	mov	r3, r5
 8013b8e:	f7ec fd4b 	bl	8000628 <__aeabi_dmul>
 8013b92:	ec53 2b18 	vmov	r2, r3, d8
 8013b96:	4604      	mov	r4, r0
 8013b98:	460d      	mov	r5, r1
 8013b9a:	4640      	mov	r0, r8
 8013b9c:	4649      	mov	r1, r9
 8013b9e:	f7ec fd43 	bl	8000628 <__aeabi_dmul>
 8013ba2:	460b      	mov	r3, r1
 8013ba4:	4602      	mov	r2, r0
 8013ba6:	4629      	mov	r1, r5
 8013ba8:	4620      	mov	r0, r4
 8013baa:	f7ec fb85 	bl	80002b8 <__aeabi_dsub>
 8013bae:	4b29      	ldr	r3, [pc, #164]	; (8013c54 <__kernel_cos+0x17c>)
 8013bb0:	429e      	cmp	r6, r3
 8013bb2:	4680      	mov	r8, r0
 8013bb4:	4689      	mov	r9, r1
 8013bb6:	dc11      	bgt.n	8013bdc <__kernel_cos+0x104>
 8013bb8:	4602      	mov	r2, r0
 8013bba:	460b      	mov	r3, r1
 8013bbc:	4650      	mov	r0, sl
 8013bbe:	4659      	mov	r1, fp
 8013bc0:	f7ec fb7a 	bl	80002b8 <__aeabi_dsub>
 8013bc4:	460b      	mov	r3, r1
 8013bc6:	4924      	ldr	r1, [pc, #144]	; (8013c58 <__kernel_cos+0x180>)
 8013bc8:	4602      	mov	r2, r0
 8013bca:	2000      	movs	r0, #0
 8013bcc:	f7ec fb74 	bl	80002b8 <__aeabi_dsub>
 8013bd0:	ecbd 8b02 	vpop	{d8}
 8013bd4:	ec41 0b10 	vmov	d0, r0, r1
 8013bd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bdc:	4b1f      	ldr	r3, [pc, #124]	; (8013c5c <__kernel_cos+0x184>)
 8013bde:	491e      	ldr	r1, [pc, #120]	; (8013c58 <__kernel_cos+0x180>)
 8013be0:	429e      	cmp	r6, r3
 8013be2:	bfcc      	ite	gt
 8013be4:	4d1e      	ldrgt	r5, [pc, #120]	; (8013c60 <__kernel_cos+0x188>)
 8013be6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8013bea:	2400      	movs	r4, #0
 8013bec:	4622      	mov	r2, r4
 8013bee:	462b      	mov	r3, r5
 8013bf0:	2000      	movs	r0, #0
 8013bf2:	f7ec fb61 	bl	80002b8 <__aeabi_dsub>
 8013bf6:	4622      	mov	r2, r4
 8013bf8:	4606      	mov	r6, r0
 8013bfa:	460f      	mov	r7, r1
 8013bfc:	462b      	mov	r3, r5
 8013bfe:	4650      	mov	r0, sl
 8013c00:	4659      	mov	r1, fp
 8013c02:	f7ec fb59 	bl	80002b8 <__aeabi_dsub>
 8013c06:	4642      	mov	r2, r8
 8013c08:	464b      	mov	r3, r9
 8013c0a:	f7ec fb55 	bl	80002b8 <__aeabi_dsub>
 8013c0e:	4602      	mov	r2, r0
 8013c10:	460b      	mov	r3, r1
 8013c12:	4630      	mov	r0, r6
 8013c14:	4639      	mov	r1, r7
 8013c16:	e7d9      	b.n	8013bcc <__kernel_cos+0xf4>
 8013c18:	2000      	movs	r0, #0
 8013c1a:	490f      	ldr	r1, [pc, #60]	; (8013c58 <__kernel_cos+0x180>)
 8013c1c:	e7d8      	b.n	8013bd0 <__kernel_cos+0xf8>
 8013c1e:	bf00      	nop
 8013c20:	be8838d4 	.word	0xbe8838d4
 8013c24:	bda8fae9 	.word	0xbda8fae9
 8013c28:	bdb4b1c4 	.word	0xbdb4b1c4
 8013c2c:	3e21ee9e 	.word	0x3e21ee9e
 8013c30:	809c52ad 	.word	0x809c52ad
 8013c34:	3e927e4f 	.word	0x3e927e4f
 8013c38:	19cb1590 	.word	0x19cb1590
 8013c3c:	3efa01a0 	.word	0x3efa01a0
 8013c40:	16c15177 	.word	0x16c15177
 8013c44:	3f56c16c 	.word	0x3f56c16c
 8013c48:	5555554c 	.word	0x5555554c
 8013c4c:	3fa55555 	.word	0x3fa55555
 8013c50:	3fe00000 	.word	0x3fe00000
 8013c54:	3fd33332 	.word	0x3fd33332
 8013c58:	3ff00000 	.word	0x3ff00000
 8013c5c:	3fe90000 	.word	0x3fe90000
 8013c60:	3fd20000 	.word	0x3fd20000
 8013c64:	00000000 	.word	0x00000000

08013c68 <__kernel_rem_pio2>:
 8013c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c6c:	ed2d 8b02 	vpush	{d8}
 8013c70:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013c74:	1ed4      	subs	r4, r2, #3
 8013c76:	9308      	str	r3, [sp, #32]
 8013c78:	9101      	str	r1, [sp, #4]
 8013c7a:	4bc5      	ldr	r3, [pc, #788]	; (8013f90 <__kernel_rem_pio2+0x328>)
 8013c7c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8013c7e:	9009      	str	r0, [sp, #36]	; 0x24
 8013c80:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013c84:	9304      	str	r3, [sp, #16]
 8013c86:	9b08      	ldr	r3, [sp, #32]
 8013c88:	3b01      	subs	r3, #1
 8013c8a:	9307      	str	r3, [sp, #28]
 8013c8c:	2318      	movs	r3, #24
 8013c8e:	fb94 f4f3 	sdiv	r4, r4, r3
 8013c92:	f06f 0317 	mvn.w	r3, #23
 8013c96:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8013c9a:	fb04 3303 	mla	r3, r4, r3, r3
 8013c9e:	eb03 0a02 	add.w	sl, r3, r2
 8013ca2:	9b04      	ldr	r3, [sp, #16]
 8013ca4:	9a07      	ldr	r2, [sp, #28]
 8013ca6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013f80 <__kernel_rem_pio2+0x318>
 8013caa:	eb03 0802 	add.w	r8, r3, r2
 8013cae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013cb0:	1aa7      	subs	r7, r4, r2
 8013cb2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013cb6:	ae22      	add	r6, sp, #136	; 0x88
 8013cb8:	2500      	movs	r5, #0
 8013cba:	4545      	cmp	r5, r8
 8013cbc:	dd13      	ble.n	8013ce6 <__kernel_rem_pio2+0x7e>
 8013cbe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8013f80 <__kernel_rem_pio2+0x318>
 8013cc2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013cc6:	2600      	movs	r6, #0
 8013cc8:	9b04      	ldr	r3, [sp, #16]
 8013cca:	429e      	cmp	r6, r3
 8013ccc:	dc32      	bgt.n	8013d34 <__kernel_rem_pio2+0xcc>
 8013cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cd0:	9302      	str	r3, [sp, #8]
 8013cd2:	9b08      	ldr	r3, [sp, #32]
 8013cd4:	199d      	adds	r5, r3, r6
 8013cd6:	ab22      	add	r3, sp, #136	; 0x88
 8013cd8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013cdc:	9306      	str	r3, [sp, #24]
 8013cde:	ec59 8b18 	vmov	r8, r9, d8
 8013ce2:	2700      	movs	r7, #0
 8013ce4:	e01f      	b.n	8013d26 <__kernel_rem_pio2+0xbe>
 8013ce6:	42ef      	cmn	r7, r5
 8013ce8:	d407      	bmi.n	8013cfa <__kernel_rem_pio2+0x92>
 8013cea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013cee:	f7ec fc31 	bl	8000554 <__aeabi_i2d>
 8013cf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013cf6:	3501      	adds	r5, #1
 8013cf8:	e7df      	b.n	8013cba <__kernel_rem_pio2+0x52>
 8013cfa:	ec51 0b18 	vmov	r0, r1, d8
 8013cfe:	e7f8      	b.n	8013cf2 <__kernel_rem_pio2+0x8a>
 8013d00:	9906      	ldr	r1, [sp, #24]
 8013d02:	9d02      	ldr	r5, [sp, #8]
 8013d04:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8013d08:	9106      	str	r1, [sp, #24]
 8013d0a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8013d0e:	9502      	str	r5, [sp, #8]
 8013d10:	f7ec fc8a 	bl	8000628 <__aeabi_dmul>
 8013d14:	4602      	mov	r2, r0
 8013d16:	460b      	mov	r3, r1
 8013d18:	4640      	mov	r0, r8
 8013d1a:	4649      	mov	r1, r9
 8013d1c:	f7ec face 	bl	80002bc <__adddf3>
 8013d20:	3701      	adds	r7, #1
 8013d22:	4680      	mov	r8, r0
 8013d24:	4689      	mov	r9, r1
 8013d26:	9b07      	ldr	r3, [sp, #28]
 8013d28:	429f      	cmp	r7, r3
 8013d2a:	dde9      	ble.n	8013d00 <__kernel_rem_pio2+0x98>
 8013d2c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8013d30:	3601      	adds	r6, #1
 8013d32:	e7c9      	b.n	8013cc8 <__kernel_rem_pio2+0x60>
 8013d34:	9b04      	ldr	r3, [sp, #16]
 8013d36:	aa0e      	add	r2, sp, #56	; 0x38
 8013d38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013d3c:	930c      	str	r3, [sp, #48]	; 0x30
 8013d3e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013d40:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013d44:	9c04      	ldr	r4, [sp, #16]
 8013d46:	930b      	str	r3, [sp, #44]	; 0x2c
 8013d48:	ab9a      	add	r3, sp, #616	; 0x268
 8013d4a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8013d4e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013d56:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8013d5a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8013d5e:	ab9a      	add	r3, sp, #616	; 0x268
 8013d60:	445b      	add	r3, fp
 8013d62:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8013d66:	2500      	movs	r5, #0
 8013d68:	1b63      	subs	r3, r4, r5
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	dc78      	bgt.n	8013e60 <__kernel_rem_pio2+0x1f8>
 8013d6e:	4650      	mov	r0, sl
 8013d70:	ec49 8b10 	vmov	d0, r8, r9
 8013d74:	f000 fde0 	bl	8014938 <scalbn>
 8013d78:	ec57 6b10 	vmov	r6, r7, d0
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013d82:	ee10 0a10 	vmov	r0, s0
 8013d86:	4639      	mov	r1, r7
 8013d88:	f7ec fc4e 	bl	8000628 <__aeabi_dmul>
 8013d8c:	ec41 0b10 	vmov	d0, r0, r1
 8013d90:	f7fe f826 	bl	8011de0 <floor>
 8013d94:	2200      	movs	r2, #0
 8013d96:	ec51 0b10 	vmov	r0, r1, d0
 8013d9a:	4b7e      	ldr	r3, [pc, #504]	; (8013f94 <__kernel_rem_pio2+0x32c>)
 8013d9c:	f7ec fc44 	bl	8000628 <__aeabi_dmul>
 8013da0:	4602      	mov	r2, r0
 8013da2:	460b      	mov	r3, r1
 8013da4:	4630      	mov	r0, r6
 8013da6:	4639      	mov	r1, r7
 8013da8:	f7ec fa86 	bl	80002b8 <__aeabi_dsub>
 8013dac:	460f      	mov	r7, r1
 8013dae:	4606      	mov	r6, r0
 8013db0:	f7ec feea 	bl	8000b88 <__aeabi_d2iz>
 8013db4:	9006      	str	r0, [sp, #24]
 8013db6:	f7ec fbcd 	bl	8000554 <__aeabi_i2d>
 8013dba:	4602      	mov	r2, r0
 8013dbc:	460b      	mov	r3, r1
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	4639      	mov	r1, r7
 8013dc2:	f7ec fa79 	bl	80002b8 <__aeabi_dsub>
 8013dc6:	f1ba 0f00 	cmp.w	sl, #0
 8013dca:	4606      	mov	r6, r0
 8013dcc:	460f      	mov	r7, r1
 8013dce:	dd6c      	ble.n	8013eaa <__kernel_rem_pio2+0x242>
 8013dd0:	1e62      	subs	r2, r4, #1
 8013dd2:	ab0e      	add	r3, sp, #56	; 0x38
 8013dd4:	f1ca 0118 	rsb	r1, sl, #24
 8013dd8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8013ddc:	9d06      	ldr	r5, [sp, #24]
 8013dde:	fa40 f301 	asr.w	r3, r0, r1
 8013de2:	441d      	add	r5, r3
 8013de4:	408b      	lsls	r3, r1
 8013de6:	1ac0      	subs	r0, r0, r3
 8013de8:	ab0e      	add	r3, sp, #56	; 0x38
 8013dea:	9506      	str	r5, [sp, #24]
 8013dec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013df0:	f1ca 0317 	rsb	r3, sl, #23
 8013df4:	fa40 f303 	asr.w	r3, r0, r3
 8013df8:	9302      	str	r3, [sp, #8]
 8013dfa:	9b02      	ldr	r3, [sp, #8]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	dd62      	ble.n	8013ec6 <__kernel_rem_pio2+0x25e>
 8013e00:	9b06      	ldr	r3, [sp, #24]
 8013e02:	2200      	movs	r2, #0
 8013e04:	3301      	adds	r3, #1
 8013e06:	9306      	str	r3, [sp, #24]
 8013e08:	4615      	mov	r5, r2
 8013e0a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8013e0e:	4294      	cmp	r4, r2
 8013e10:	f300 8095 	bgt.w	8013f3e <__kernel_rem_pio2+0x2d6>
 8013e14:	f1ba 0f00 	cmp.w	sl, #0
 8013e18:	dd07      	ble.n	8013e2a <__kernel_rem_pio2+0x1c2>
 8013e1a:	f1ba 0f01 	cmp.w	sl, #1
 8013e1e:	f000 80a2 	beq.w	8013f66 <__kernel_rem_pio2+0x2fe>
 8013e22:	f1ba 0f02 	cmp.w	sl, #2
 8013e26:	f000 80c1 	beq.w	8013fac <__kernel_rem_pio2+0x344>
 8013e2a:	9b02      	ldr	r3, [sp, #8]
 8013e2c:	2b02      	cmp	r3, #2
 8013e2e:	d14a      	bne.n	8013ec6 <__kernel_rem_pio2+0x25e>
 8013e30:	4632      	mov	r2, r6
 8013e32:	463b      	mov	r3, r7
 8013e34:	2000      	movs	r0, #0
 8013e36:	4958      	ldr	r1, [pc, #352]	; (8013f98 <__kernel_rem_pio2+0x330>)
 8013e38:	f7ec fa3e 	bl	80002b8 <__aeabi_dsub>
 8013e3c:	4606      	mov	r6, r0
 8013e3e:	460f      	mov	r7, r1
 8013e40:	2d00      	cmp	r5, #0
 8013e42:	d040      	beq.n	8013ec6 <__kernel_rem_pio2+0x25e>
 8013e44:	4650      	mov	r0, sl
 8013e46:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013f88 <__kernel_rem_pio2+0x320>
 8013e4a:	f000 fd75 	bl	8014938 <scalbn>
 8013e4e:	4630      	mov	r0, r6
 8013e50:	4639      	mov	r1, r7
 8013e52:	ec53 2b10 	vmov	r2, r3, d0
 8013e56:	f7ec fa2f 	bl	80002b8 <__aeabi_dsub>
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	460f      	mov	r7, r1
 8013e5e:	e032      	b.n	8013ec6 <__kernel_rem_pio2+0x25e>
 8013e60:	2200      	movs	r2, #0
 8013e62:	4b4e      	ldr	r3, [pc, #312]	; (8013f9c <__kernel_rem_pio2+0x334>)
 8013e64:	4640      	mov	r0, r8
 8013e66:	4649      	mov	r1, r9
 8013e68:	f7ec fbde 	bl	8000628 <__aeabi_dmul>
 8013e6c:	f7ec fe8c 	bl	8000b88 <__aeabi_d2iz>
 8013e70:	f7ec fb70 	bl	8000554 <__aeabi_i2d>
 8013e74:	2200      	movs	r2, #0
 8013e76:	4b4a      	ldr	r3, [pc, #296]	; (8013fa0 <__kernel_rem_pio2+0x338>)
 8013e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013e7c:	f7ec fbd4 	bl	8000628 <__aeabi_dmul>
 8013e80:	4602      	mov	r2, r0
 8013e82:	460b      	mov	r3, r1
 8013e84:	4640      	mov	r0, r8
 8013e86:	4649      	mov	r1, r9
 8013e88:	f7ec fa16 	bl	80002b8 <__aeabi_dsub>
 8013e8c:	f7ec fe7c 	bl	8000b88 <__aeabi_d2iz>
 8013e90:	ab0e      	add	r3, sp, #56	; 0x38
 8013e92:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8013e96:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8013e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013e9e:	f7ec fa0d 	bl	80002bc <__adddf3>
 8013ea2:	3501      	adds	r5, #1
 8013ea4:	4680      	mov	r8, r0
 8013ea6:	4689      	mov	r9, r1
 8013ea8:	e75e      	b.n	8013d68 <__kernel_rem_pio2+0x100>
 8013eaa:	d105      	bne.n	8013eb8 <__kernel_rem_pio2+0x250>
 8013eac:	1e63      	subs	r3, r4, #1
 8013eae:	aa0e      	add	r2, sp, #56	; 0x38
 8013eb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013eb4:	15c3      	asrs	r3, r0, #23
 8013eb6:	e79f      	b.n	8013df8 <__kernel_rem_pio2+0x190>
 8013eb8:	2200      	movs	r2, #0
 8013eba:	4b3a      	ldr	r3, [pc, #232]	; (8013fa4 <__kernel_rem_pio2+0x33c>)
 8013ebc:	f7ec fe3a 	bl	8000b34 <__aeabi_dcmpge>
 8013ec0:	2800      	cmp	r0, #0
 8013ec2:	d139      	bne.n	8013f38 <__kernel_rem_pio2+0x2d0>
 8013ec4:	9002      	str	r0, [sp, #8]
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	2300      	movs	r3, #0
 8013eca:	4630      	mov	r0, r6
 8013ecc:	4639      	mov	r1, r7
 8013ece:	f7ec fe13 	bl	8000af8 <__aeabi_dcmpeq>
 8013ed2:	2800      	cmp	r0, #0
 8013ed4:	f000 80c7 	beq.w	8014066 <__kernel_rem_pio2+0x3fe>
 8013ed8:	1e65      	subs	r5, r4, #1
 8013eda:	462b      	mov	r3, r5
 8013edc:	2200      	movs	r2, #0
 8013ede:	9904      	ldr	r1, [sp, #16]
 8013ee0:	428b      	cmp	r3, r1
 8013ee2:	da6a      	bge.n	8013fba <__kernel_rem_pio2+0x352>
 8013ee4:	2a00      	cmp	r2, #0
 8013ee6:	f000 8088 	beq.w	8013ffa <__kernel_rem_pio2+0x392>
 8013eea:	ab0e      	add	r3, sp, #56	; 0x38
 8013eec:	f1aa 0a18 	sub.w	sl, sl, #24
 8013ef0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	f000 80b4 	beq.w	8014062 <__kernel_rem_pio2+0x3fa>
 8013efa:	4650      	mov	r0, sl
 8013efc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8013f88 <__kernel_rem_pio2+0x320>
 8013f00:	f000 fd1a 	bl	8014938 <scalbn>
 8013f04:	00ec      	lsls	r4, r5, #3
 8013f06:	ab72      	add	r3, sp, #456	; 0x1c8
 8013f08:	191e      	adds	r6, r3, r4
 8013f0a:	ec59 8b10 	vmov	r8, r9, d0
 8013f0e:	f106 0a08 	add.w	sl, r6, #8
 8013f12:	462f      	mov	r7, r5
 8013f14:	2f00      	cmp	r7, #0
 8013f16:	f280 80df 	bge.w	80140d8 <__kernel_rem_pio2+0x470>
 8013f1a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8013f80 <__kernel_rem_pio2+0x318>
 8013f1e:	f04f 0a00 	mov.w	sl, #0
 8013f22:	eba5 030a 	sub.w	r3, r5, sl
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	f2c0 810a 	blt.w	8014140 <__kernel_rem_pio2+0x4d8>
 8013f2c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8013fa8 <__kernel_rem_pio2+0x340>
 8013f30:	ec59 8b18 	vmov	r8, r9, d8
 8013f34:	2700      	movs	r7, #0
 8013f36:	e0f5      	b.n	8014124 <__kernel_rem_pio2+0x4bc>
 8013f38:	2302      	movs	r3, #2
 8013f3a:	9302      	str	r3, [sp, #8]
 8013f3c:	e760      	b.n	8013e00 <__kernel_rem_pio2+0x198>
 8013f3e:	ab0e      	add	r3, sp, #56	; 0x38
 8013f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f44:	b94d      	cbnz	r5, 8013f5a <__kernel_rem_pio2+0x2f2>
 8013f46:	b12b      	cbz	r3, 8013f54 <__kernel_rem_pio2+0x2ec>
 8013f48:	a80e      	add	r0, sp, #56	; 0x38
 8013f4a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8013f4e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013f52:	2301      	movs	r3, #1
 8013f54:	3201      	adds	r2, #1
 8013f56:	461d      	mov	r5, r3
 8013f58:	e759      	b.n	8013e0e <__kernel_rem_pio2+0x1a6>
 8013f5a:	a80e      	add	r0, sp, #56	; 0x38
 8013f5c:	1acb      	subs	r3, r1, r3
 8013f5e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013f62:	462b      	mov	r3, r5
 8013f64:	e7f6      	b.n	8013f54 <__kernel_rem_pio2+0x2ec>
 8013f66:	1e62      	subs	r2, r4, #1
 8013f68:	ab0e      	add	r3, sp, #56	; 0x38
 8013f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f6e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013f72:	a90e      	add	r1, sp, #56	; 0x38
 8013f74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013f78:	e757      	b.n	8013e2a <__kernel_rem_pio2+0x1c2>
 8013f7a:	bf00      	nop
 8013f7c:	f3af 8000 	nop.w
	...
 8013f8c:	3ff00000 	.word	0x3ff00000
 8013f90:	08036a48 	.word	0x08036a48
 8013f94:	40200000 	.word	0x40200000
 8013f98:	3ff00000 	.word	0x3ff00000
 8013f9c:	3e700000 	.word	0x3e700000
 8013fa0:	41700000 	.word	0x41700000
 8013fa4:	3fe00000 	.word	0x3fe00000
 8013fa8:	08036a08 	.word	0x08036a08
 8013fac:	1e62      	subs	r2, r4, #1
 8013fae:	ab0e      	add	r3, sp, #56	; 0x38
 8013fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fb4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013fb8:	e7db      	b.n	8013f72 <__kernel_rem_pio2+0x30a>
 8013fba:	a90e      	add	r1, sp, #56	; 0x38
 8013fbc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013fc0:	3b01      	subs	r3, #1
 8013fc2:	430a      	orrs	r2, r1
 8013fc4:	e78b      	b.n	8013ede <__kernel_rem_pio2+0x276>
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8013fcc:	2900      	cmp	r1, #0
 8013fce:	d0fa      	beq.n	8013fc6 <__kernel_rem_pio2+0x35e>
 8013fd0:	9a08      	ldr	r2, [sp, #32]
 8013fd2:	4422      	add	r2, r4
 8013fd4:	00d2      	lsls	r2, r2, #3
 8013fd6:	a922      	add	r1, sp, #136	; 0x88
 8013fd8:	18e3      	adds	r3, r4, r3
 8013fda:	9206      	str	r2, [sp, #24]
 8013fdc:	440a      	add	r2, r1
 8013fde:	9302      	str	r3, [sp, #8]
 8013fe0:	f10b 0108 	add.w	r1, fp, #8
 8013fe4:	f102 0308 	add.w	r3, r2, #8
 8013fe8:	1c66      	adds	r6, r4, #1
 8013fea:	910a      	str	r1, [sp, #40]	; 0x28
 8013fec:	2500      	movs	r5, #0
 8013fee:	930d      	str	r3, [sp, #52]	; 0x34
 8013ff0:	9b02      	ldr	r3, [sp, #8]
 8013ff2:	42b3      	cmp	r3, r6
 8013ff4:	da04      	bge.n	8014000 <__kernel_rem_pio2+0x398>
 8013ff6:	461c      	mov	r4, r3
 8013ff8:	e6a6      	b.n	8013d48 <__kernel_rem_pio2+0xe0>
 8013ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	e7e3      	b.n	8013fc8 <__kernel_rem_pio2+0x360>
 8014000:	9b06      	ldr	r3, [sp, #24]
 8014002:	18ef      	adds	r7, r5, r3
 8014004:	ab22      	add	r3, sp, #136	; 0x88
 8014006:	441f      	add	r7, r3
 8014008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801400a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801400e:	f7ec faa1 	bl	8000554 <__aeabi_i2d>
 8014012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014014:	461c      	mov	r4, r3
 8014016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014018:	e9c7 0100 	strd	r0, r1, [r7]
 801401c:	eb03 0b05 	add.w	fp, r3, r5
 8014020:	2700      	movs	r7, #0
 8014022:	f04f 0800 	mov.w	r8, #0
 8014026:	f04f 0900 	mov.w	r9, #0
 801402a:	9b07      	ldr	r3, [sp, #28]
 801402c:	429f      	cmp	r7, r3
 801402e:	dd08      	ble.n	8014042 <__kernel_rem_pio2+0x3da>
 8014030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014032:	aa72      	add	r2, sp, #456	; 0x1c8
 8014034:	18eb      	adds	r3, r5, r3
 8014036:	4413      	add	r3, r2
 8014038:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801403c:	3601      	adds	r6, #1
 801403e:	3508      	adds	r5, #8
 8014040:	e7d6      	b.n	8013ff0 <__kernel_rem_pio2+0x388>
 8014042:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014046:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801404a:	f7ec faed 	bl	8000628 <__aeabi_dmul>
 801404e:	4602      	mov	r2, r0
 8014050:	460b      	mov	r3, r1
 8014052:	4640      	mov	r0, r8
 8014054:	4649      	mov	r1, r9
 8014056:	f7ec f931 	bl	80002bc <__adddf3>
 801405a:	3701      	adds	r7, #1
 801405c:	4680      	mov	r8, r0
 801405e:	4689      	mov	r9, r1
 8014060:	e7e3      	b.n	801402a <__kernel_rem_pio2+0x3c2>
 8014062:	3d01      	subs	r5, #1
 8014064:	e741      	b.n	8013eea <__kernel_rem_pio2+0x282>
 8014066:	f1ca 0000 	rsb	r0, sl, #0
 801406a:	ec47 6b10 	vmov	d0, r6, r7
 801406e:	f000 fc63 	bl	8014938 <scalbn>
 8014072:	ec57 6b10 	vmov	r6, r7, d0
 8014076:	2200      	movs	r2, #0
 8014078:	4b99      	ldr	r3, [pc, #612]	; (80142e0 <__kernel_rem_pio2+0x678>)
 801407a:	ee10 0a10 	vmov	r0, s0
 801407e:	4639      	mov	r1, r7
 8014080:	f7ec fd58 	bl	8000b34 <__aeabi_dcmpge>
 8014084:	b1f8      	cbz	r0, 80140c6 <__kernel_rem_pio2+0x45e>
 8014086:	2200      	movs	r2, #0
 8014088:	4b96      	ldr	r3, [pc, #600]	; (80142e4 <__kernel_rem_pio2+0x67c>)
 801408a:	4630      	mov	r0, r6
 801408c:	4639      	mov	r1, r7
 801408e:	f7ec facb 	bl	8000628 <__aeabi_dmul>
 8014092:	f7ec fd79 	bl	8000b88 <__aeabi_d2iz>
 8014096:	4680      	mov	r8, r0
 8014098:	f7ec fa5c 	bl	8000554 <__aeabi_i2d>
 801409c:	2200      	movs	r2, #0
 801409e:	4b90      	ldr	r3, [pc, #576]	; (80142e0 <__kernel_rem_pio2+0x678>)
 80140a0:	f7ec fac2 	bl	8000628 <__aeabi_dmul>
 80140a4:	460b      	mov	r3, r1
 80140a6:	4602      	mov	r2, r0
 80140a8:	4639      	mov	r1, r7
 80140aa:	4630      	mov	r0, r6
 80140ac:	f7ec f904 	bl	80002b8 <__aeabi_dsub>
 80140b0:	f7ec fd6a 	bl	8000b88 <__aeabi_d2iz>
 80140b4:	1c65      	adds	r5, r4, #1
 80140b6:	ab0e      	add	r3, sp, #56	; 0x38
 80140b8:	f10a 0a18 	add.w	sl, sl, #24
 80140bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80140c0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80140c4:	e719      	b.n	8013efa <__kernel_rem_pio2+0x292>
 80140c6:	4630      	mov	r0, r6
 80140c8:	4639      	mov	r1, r7
 80140ca:	f7ec fd5d 	bl	8000b88 <__aeabi_d2iz>
 80140ce:	ab0e      	add	r3, sp, #56	; 0x38
 80140d0:	4625      	mov	r5, r4
 80140d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80140d6:	e710      	b.n	8013efa <__kernel_rem_pio2+0x292>
 80140d8:	ab0e      	add	r3, sp, #56	; 0x38
 80140da:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80140de:	f7ec fa39 	bl	8000554 <__aeabi_i2d>
 80140e2:	4642      	mov	r2, r8
 80140e4:	464b      	mov	r3, r9
 80140e6:	f7ec fa9f 	bl	8000628 <__aeabi_dmul>
 80140ea:	2200      	movs	r2, #0
 80140ec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80140f0:	4b7c      	ldr	r3, [pc, #496]	; (80142e4 <__kernel_rem_pio2+0x67c>)
 80140f2:	4640      	mov	r0, r8
 80140f4:	4649      	mov	r1, r9
 80140f6:	f7ec fa97 	bl	8000628 <__aeabi_dmul>
 80140fa:	3f01      	subs	r7, #1
 80140fc:	4680      	mov	r8, r0
 80140fe:	4689      	mov	r9, r1
 8014100:	e708      	b.n	8013f14 <__kernel_rem_pio2+0x2ac>
 8014102:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801410a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801410e:	f7ec fa8b 	bl	8000628 <__aeabi_dmul>
 8014112:	4602      	mov	r2, r0
 8014114:	460b      	mov	r3, r1
 8014116:	4640      	mov	r0, r8
 8014118:	4649      	mov	r1, r9
 801411a:	f7ec f8cf 	bl	80002bc <__adddf3>
 801411e:	3701      	adds	r7, #1
 8014120:	4680      	mov	r8, r0
 8014122:	4689      	mov	r9, r1
 8014124:	9b04      	ldr	r3, [sp, #16]
 8014126:	429f      	cmp	r7, r3
 8014128:	dc01      	bgt.n	801412e <__kernel_rem_pio2+0x4c6>
 801412a:	45ba      	cmp	sl, r7
 801412c:	dae9      	bge.n	8014102 <__kernel_rem_pio2+0x49a>
 801412e:	ab4a      	add	r3, sp, #296	; 0x128
 8014130:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014134:	e9c3 8900 	strd	r8, r9, [r3]
 8014138:	f10a 0a01 	add.w	sl, sl, #1
 801413c:	3e08      	subs	r6, #8
 801413e:	e6f0      	b.n	8013f22 <__kernel_rem_pio2+0x2ba>
 8014140:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014142:	2b03      	cmp	r3, #3
 8014144:	d85b      	bhi.n	80141fe <__kernel_rem_pio2+0x596>
 8014146:	e8df f003 	tbb	[pc, r3]
 801414a:	264a      	.short	0x264a
 801414c:	0226      	.short	0x0226
 801414e:	ab9a      	add	r3, sp, #616	; 0x268
 8014150:	441c      	add	r4, r3
 8014152:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014156:	46a2      	mov	sl, r4
 8014158:	46ab      	mov	fp, r5
 801415a:	f1bb 0f00 	cmp.w	fp, #0
 801415e:	dc6c      	bgt.n	801423a <__kernel_rem_pio2+0x5d2>
 8014160:	46a2      	mov	sl, r4
 8014162:	46ab      	mov	fp, r5
 8014164:	f1bb 0f01 	cmp.w	fp, #1
 8014168:	f300 8086 	bgt.w	8014278 <__kernel_rem_pio2+0x610>
 801416c:	2000      	movs	r0, #0
 801416e:	2100      	movs	r1, #0
 8014170:	2d01      	cmp	r5, #1
 8014172:	f300 80a0 	bgt.w	80142b6 <__kernel_rem_pio2+0x64e>
 8014176:	9b02      	ldr	r3, [sp, #8]
 8014178:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801417c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014180:	2b00      	cmp	r3, #0
 8014182:	f040 809e 	bne.w	80142c2 <__kernel_rem_pio2+0x65a>
 8014186:	9b01      	ldr	r3, [sp, #4]
 8014188:	e9c3 7800 	strd	r7, r8, [r3]
 801418c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014190:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014194:	e033      	b.n	80141fe <__kernel_rem_pio2+0x596>
 8014196:	3408      	adds	r4, #8
 8014198:	ab4a      	add	r3, sp, #296	; 0x128
 801419a:	441c      	add	r4, r3
 801419c:	462e      	mov	r6, r5
 801419e:	2000      	movs	r0, #0
 80141a0:	2100      	movs	r1, #0
 80141a2:	2e00      	cmp	r6, #0
 80141a4:	da3a      	bge.n	801421c <__kernel_rem_pio2+0x5b4>
 80141a6:	9b02      	ldr	r3, [sp, #8]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d03d      	beq.n	8014228 <__kernel_rem_pio2+0x5c0>
 80141ac:	4602      	mov	r2, r0
 80141ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141b2:	9c01      	ldr	r4, [sp, #4]
 80141b4:	e9c4 2300 	strd	r2, r3, [r4]
 80141b8:	4602      	mov	r2, r0
 80141ba:	460b      	mov	r3, r1
 80141bc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80141c0:	f7ec f87a 	bl	80002b8 <__aeabi_dsub>
 80141c4:	ae4c      	add	r6, sp, #304	; 0x130
 80141c6:	2401      	movs	r4, #1
 80141c8:	42a5      	cmp	r5, r4
 80141ca:	da30      	bge.n	801422e <__kernel_rem_pio2+0x5c6>
 80141cc:	9b02      	ldr	r3, [sp, #8]
 80141ce:	b113      	cbz	r3, 80141d6 <__kernel_rem_pio2+0x56e>
 80141d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141d4:	4619      	mov	r1, r3
 80141d6:	9b01      	ldr	r3, [sp, #4]
 80141d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80141dc:	e00f      	b.n	80141fe <__kernel_rem_pio2+0x596>
 80141de:	ab9a      	add	r3, sp, #616	; 0x268
 80141e0:	441c      	add	r4, r3
 80141e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80141e6:	2000      	movs	r0, #0
 80141e8:	2100      	movs	r1, #0
 80141ea:	2d00      	cmp	r5, #0
 80141ec:	da10      	bge.n	8014210 <__kernel_rem_pio2+0x5a8>
 80141ee:	9b02      	ldr	r3, [sp, #8]
 80141f0:	b113      	cbz	r3, 80141f8 <__kernel_rem_pio2+0x590>
 80141f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80141f6:	4619      	mov	r1, r3
 80141f8:	9b01      	ldr	r3, [sp, #4]
 80141fa:	e9c3 0100 	strd	r0, r1, [r3]
 80141fe:	9b06      	ldr	r3, [sp, #24]
 8014200:	f003 0007 	and.w	r0, r3, #7
 8014204:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014208:	ecbd 8b02 	vpop	{d8}
 801420c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014210:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014214:	f7ec f852 	bl	80002bc <__adddf3>
 8014218:	3d01      	subs	r5, #1
 801421a:	e7e6      	b.n	80141ea <__kernel_rem_pio2+0x582>
 801421c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014220:	f7ec f84c 	bl	80002bc <__adddf3>
 8014224:	3e01      	subs	r6, #1
 8014226:	e7bc      	b.n	80141a2 <__kernel_rem_pio2+0x53a>
 8014228:	4602      	mov	r2, r0
 801422a:	460b      	mov	r3, r1
 801422c:	e7c1      	b.n	80141b2 <__kernel_rem_pio2+0x54a>
 801422e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014232:	f7ec f843 	bl	80002bc <__adddf3>
 8014236:	3401      	adds	r4, #1
 8014238:	e7c6      	b.n	80141c8 <__kernel_rem_pio2+0x560>
 801423a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801423e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014242:	4640      	mov	r0, r8
 8014244:	ec53 2b17 	vmov	r2, r3, d7
 8014248:	4649      	mov	r1, r9
 801424a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801424e:	f7ec f835 	bl	80002bc <__adddf3>
 8014252:	4602      	mov	r2, r0
 8014254:	460b      	mov	r3, r1
 8014256:	4606      	mov	r6, r0
 8014258:	460f      	mov	r7, r1
 801425a:	4640      	mov	r0, r8
 801425c:	4649      	mov	r1, r9
 801425e:	f7ec f82b 	bl	80002b8 <__aeabi_dsub>
 8014262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014266:	f7ec f829 	bl	80002bc <__adddf3>
 801426a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801426e:	e9ca 0100 	strd	r0, r1, [sl]
 8014272:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014276:	e770      	b.n	801415a <__kernel_rem_pio2+0x4f2>
 8014278:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801427c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014280:	4630      	mov	r0, r6
 8014282:	ec53 2b17 	vmov	r2, r3, d7
 8014286:	4639      	mov	r1, r7
 8014288:	ed8d 7b04 	vstr	d7, [sp, #16]
 801428c:	f7ec f816 	bl	80002bc <__adddf3>
 8014290:	4602      	mov	r2, r0
 8014292:	460b      	mov	r3, r1
 8014294:	4680      	mov	r8, r0
 8014296:	4689      	mov	r9, r1
 8014298:	4630      	mov	r0, r6
 801429a:	4639      	mov	r1, r7
 801429c:	f7ec f80c 	bl	80002b8 <__aeabi_dsub>
 80142a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80142a4:	f7ec f80a 	bl	80002bc <__adddf3>
 80142a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80142ac:	e9ca 0100 	strd	r0, r1, [sl]
 80142b0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80142b4:	e756      	b.n	8014164 <__kernel_rem_pio2+0x4fc>
 80142b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80142ba:	f7eb ffff 	bl	80002bc <__adddf3>
 80142be:	3d01      	subs	r5, #1
 80142c0:	e756      	b.n	8014170 <__kernel_rem_pio2+0x508>
 80142c2:	9b01      	ldr	r3, [sp, #4]
 80142c4:	9a01      	ldr	r2, [sp, #4]
 80142c6:	601f      	str	r7, [r3, #0]
 80142c8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80142cc:	605c      	str	r4, [r3, #4]
 80142ce:	609d      	str	r5, [r3, #8]
 80142d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80142d4:	60d3      	str	r3, [r2, #12]
 80142d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80142da:	6110      	str	r0, [r2, #16]
 80142dc:	6153      	str	r3, [r2, #20]
 80142de:	e78e      	b.n	80141fe <__kernel_rem_pio2+0x596>
 80142e0:	41700000 	.word	0x41700000
 80142e4:	3e700000 	.word	0x3e700000

080142e8 <__kernel_sin>:
 80142e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142ec:	ec55 4b10 	vmov	r4, r5, d0
 80142f0:	b085      	sub	sp, #20
 80142f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80142f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80142fa:	ed8d 1b00 	vstr	d1, [sp]
 80142fe:	9002      	str	r0, [sp, #8]
 8014300:	da06      	bge.n	8014310 <__kernel_sin+0x28>
 8014302:	ee10 0a10 	vmov	r0, s0
 8014306:	4629      	mov	r1, r5
 8014308:	f7ec fc3e 	bl	8000b88 <__aeabi_d2iz>
 801430c:	2800      	cmp	r0, #0
 801430e:	d051      	beq.n	80143b4 <__kernel_sin+0xcc>
 8014310:	4622      	mov	r2, r4
 8014312:	462b      	mov	r3, r5
 8014314:	4620      	mov	r0, r4
 8014316:	4629      	mov	r1, r5
 8014318:	f7ec f986 	bl	8000628 <__aeabi_dmul>
 801431c:	4682      	mov	sl, r0
 801431e:	468b      	mov	fp, r1
 8014320:	4602      	mov	r2, r0
 8014322:	460b      	mov	r3, r1
 8014324:	4620      	mov	r0, r4
 8014326:	4629      	mov	r1, r5
 8014328:	f7ec f97e 	bl	8000628 <__aeabi_dmul>
 801432c:	a341      	add	r3, pc, #260	; (adr r3, 8014434 <__kernel_sin+0x14c>)
 801432e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014332:	4680      	mov	r8, r0
 8014334:	4689      	mov	r9, r1
 8014336:	4650      	mov	r0, sl
 8014338:	4659      	mov	r1, fp
 801433a:	f7ec f975 	bl	8000628 <__aeabi_dmul>
 801433e:	a33f      	add	r3, pc, #252	; (adr r3, 801443c <__kernel_sin+0x154>)
 8014340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014344:	f7eb ffb8 	bl	80002b8 <__aeabi_dsub>
 8014348:	4652      	mov	r2, sl
 801434a:	465b      	mov	r3, fp
 801434c:	f7ec f96c 	bl	8000628 <__aeabi_dmul>
 8014350:	a33c      	add	r3, pc, #240	; (adr r3, 8014444 <__kernel_sin+0x15c>)
 8014352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014356:	f7eb ffb1 	bl	80002bc <__adddf3>
 801435a:	4652      	mov	r2, sl
 801435c:	465b      	mov	r3, fp
 801435e:	f7ec f963 	bl	8000628 <__aeabi_dmul>
 8014362:	a33a      	add	r3, pc, #232	; (adr r3, 801444c <__kernel_sin+0x164>)
 8014364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014368:	f7eb ffa6 	bl	80002b8 <__aeabi_dsub>
 801436c:	4652      	mov	r2, sl
 801436e:	465b      	mov	r3, fp
 8014370:	f7ec f95a 	bl	8000628 <__aeabi_dmul>
 8014374:	a337      	add	r3, pc, #220	; (adr r3, 8014454 <__kernel_sin+0x16c>)
 8014376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801437a:	f7eb ff9f 	bl	80002bc <__adddf3>
 801437e:	9b02      	ldr	r3, [sp, #8]
 8014380:	4606      	mov	r6, r0
 8014382:	460f      	mov	r7, r1
 8014384:	b9db      	cbnz	r3, 80143be <__kernel_sin+0xd6>
 8014386:	4602      	mov	r2, r0
 8014388:	460b      	mov	r3, r1
 801438a:	4650      	mov	r0, sl
 801438c:	4659      	mov	r1, fp
 801438e:	f7ec f94b 	bl	8000628 <__aeabi_dmul>
 8014392:	a325      	add	r3, pc, #148	; (adr r3, 8014428 <__kernel_sin+0x140>)
 8014394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014398:	f7eb ff8e 	bl	80002b8 <__aeabi_dsub>
 801439c:	4642      	mov	r2, r8
 801439e:	464b      	mov	r3, r9
 80143a0:	f7ec f942 	bl	8000628 <__aeabi_dmul>
 80143a4:	4602      	mov	r2, r0
 80143a6:	460b      	mov	r3, r1
 80143a8:	4620      	mov	r0, r4
 80143aa:	4629      	mov	r1, r5
 80143ac:	f7eb ff86 	bl	80002bc <__adddf3>
 80143b0:	4604      	mov	r4, r0
 80143b2:	460d      	mov	r5, r1
 80143b4:	ec45 4b10 	vmov	d0, r4, r5
 80143b8:	b005      	add	sp, #20
 80143ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143be:	2200      	movs	r2, #0
 80143c0:	4b1b      	ldr	r3, [pc, #108]	; (8014430 <__kernel_sin+0x148>)
 80143c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143c6:	f7ec f92f 	bl	8000628 <__aeabi_dmul>
 80143ca:	4632      	mov	r2, r6
 80143cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143d0:	463b      	mov	r3, r7
 80143d2:	4640      	mov	r0, r8
 80143d4:	4649      	mov	r1, r9
 80143d6:	f7ec f927 	bl	8000628 <__aeabi_dmul>
 80143da:	4602      	mov	r2, r0
 80143dc:	460b      	mov	r3, r1
 80143de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143e2:	f7eb ff69 	bl	80002b8 <__aeabi_dsub>
 80143e6:	4652      	mov	r2, sl
 80143e8:	465b      	mov	r3, fp
 80143ea:	f7ec f91d 	bl	8000628 <__aeabi_dmul>
 80143ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80143f2:	f7eb ff61 	bl	80002b8 <__aeabi_dsub>
 80143f6:	a30c      	add	r3, pc, #48	; (adr r3, 8014428 <__kernel_sin+0x140>)
 80143f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fc:	4606      	mov	r6, r0
 80143fe:	460f      	mov	r7, r1
 8014400:	4640      	mov	r0, r8
 8014402:	4649      	mov	r1, r9
 8014404:	f7ec f910 	bl	8000628 <__aeabi_dmul>
 8014408:	4602      	mov	r2, r0
 801440a:	460b      	mov	r3, r1
 801440c:	4630      	mov	r0, r6
 801440e:	4639      	mov	r1, r7
 8014410:	f7eb ff54 	bl	80002bc <__adddf3>
 8014414:	4602      	mov	r2, r0
 8014416:	460b      	mov	r3, r1
 8014418:	4620      	mov	r0, r4
 801441a:	4629      	mov	r1, r5
 801441c:	f7eb ff4c 	bl	80002b8 <__aeabi_dsub>
 8014420:	e7c6      	b.n	80143b0 <__kernel_sin+0xc8>
 8014422:	bf00      	nop
 8014424:	f3af 8000 	nop.w
 8014428:	55555549 	.word	0x55555549
 801442c:	3fc55555 	.word	0x3fc55555
 8014430:	3fe00000 	.word	0x3fe00000
 8014434:	5acfd57c 	.word	0x5acfd57c
 8014438:	3de5d93a 	.word	0x3de5d93a
 801443c:	8a2b9ceb 	.word	0x8a2b9ceb
 8014440:	3e5ae5e6 	.word	0x3e5ae5e6
 8014444:	57b1fe7d 	.word	0x57b1fe7d
 8014448:	3ec71de3 	.word	0x3ec71de3
 801444c:	19c161d5 	.word	0x19c161d5
 8014450:	3f2a01a0 	.word	0x3f2a01a0
 8014454:	1110f8a6 	.word	0x1110f8a6
 8014458:	3f811111 	.word	0x3f811111
 801445c:	00000000 	.word	0x00000000

08014460 <__kernel_tan>:
 8014460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014464:	ec5b ab10 	vmov	sl, fp, d0
 8014468:	4bbf      	ldr	r3, [pc, #764]	; (8014768 <__kernel_tan+0x308>)
 801446a:	b089      	sub	sp, #36	; 0x24
 801446c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8014470:	429f      	cmp	r7, r3
 8014472:	ec59 8b11 	vmov	r8, r9, d1
 8014476:	4606      	mov	r6, r0
 8014478:	f8cd b008 	str.w	fp, [sp, #8]
 801447c:	dc22      	bgt.n	80144c4 <__kernel_tan+0x64>
 801447e:	ee10 0a10 	vmov	r0, s0
 8014482:	4659      	mov	r1, fp
 8014484:	f7ec fb80 	bl	8000b88 <__aeabi_d2iz>
 8014488:	2800      	cmp	r0, #0
 801448a:	d145      	bne.n	8014518 <__kernel_tan+0xb8>
 801448c:	1c73      	adds	r3, r6, #1
 801448e:	4652      	mov	r2, sl
 8014490:	4313      	orrs	r3, r2
 8014492:	433b      	orrs	r3, r7
 8014494:	d110      	bne.n	80144b8 <__kernel_tan+0x58>
 8014496:	ec4b ab10 	vmov	d0, sl, fp
 801449a:	f000 f9ad 	bl	80147f8 <fabs>
 801449e:	49b3      	ldr	r1, [pc, #716]	; (801476c <__kernel_tan+0x30c>)
 80144a0:	ec53 2b10 	vmov	r2, r3, d0
 80144a4:	2000      	movs	r0, #0
 80144a6:	f7ec f9e9 	bl	800087c <__aeabi_ddiv>
 80144aa:	4682      	mov	sl, r0
 80144ac:	468b      	mov	fp, r1
 80144ae:	ec4b ab10 	vmov	d0, sl, fp
 80144b2:	b009      	add	sp, #36	; 0x24
 80144b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b8:	2e01      	cmp	r6, #1
 80144ba:	d0f8      	beq.n	80144ae <__kernel_tan+0x4e>
 80144bc:	465b      	mov	r3, fp
 80144be:	2000      	movs	r0, #0
 80144c0:	49ab      	ldr	r1, [pc, #684]	; (8014770 <__kernel_tan+0x310>)
 80144c2:	e7f0      	b.n	80144a6 <__kernel_tan+0x46>
 80144c4:	4bab      	ldr	r3, [pc, #684]	; (8014774 <__kernel_tan+0x314>)
 80144c6:	429f      	cmp	r7, r3
 80144c8:	dd26      	ble.n	8014518 <__kernel_tan+0xb8>
 80144ca:	9b02      	ldr	r3, [sp, #8]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	da09      	bge.n	80144e4 <__kernel_tan+0x84>
 80144d0:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80144d4:	469b      	mov	fp, r3
 80144d6:	ee10 aa10 	vmov	sl, s0
 80144da:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80144de:	ee11 8a10 	vmov	r8, s2
 80144e2:	4699      	mov	r9, r3
 80144e4:	4652      	mov	r2, sl
 80144e6:	465b      	mov	r3, fp
 80144e8:	a181      	add	r1, pc, #516	; (adr r1, 80146f0 <__kernel_tan+0x290>)
 80144ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80144ee:	f7eb fee3 	bl	80002b8 <__aeabi_dsub>
 80144f2:	4642      	mov	r2, r8
 80144f4:	464b      	mov	r3, r9
 80144f6:	4604      	mov	r4, r0
 80144f8:	460d      	mov	r5, r1
 80144fa:	a17f      	add	r1, pc, #508	; (adr r1, 80146f8 <__kernel_tan+0x298>)
 80144fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014500:	f7eb feda 	bl	80002b8 <__aeabi_dsub>
 8014504:	4622      	mov	r2, r4
 8014506:	462b      	mov	r3, r5
 8014508:	f7eb fed8 	bl	80002bc <__adddf3>
 801450c:	f04f 0800 	mov.w	r8, #0
 8014510:	4682      	mov	sl, r0
 8014512:	468b      	mov	fp, r1
 8014514:	f04f 0900 	mov.w	r9, #0
 8014518:	4652      	mov	r2, sl
 801451a:	465b      	mov	r3, fp
 801451c:	4650      	mov	r0, sl
 801451e:	4659      	mov	r1, fp
 8014520:	f7ec f882 	bl	8000628 <__aeabi_dmul>
 8014524:	4602      	mov	r2, r0
 8014526:	460b      	mov	r3, r1
 8014528:	e9cd 0100 	strd	r0, r1, [sp]
 801452c:	f7ec f87c 	bl	8000628 <__aeabi_dmul>
 8014530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014534:	4604      	mov	r4, r0
 8014536:	460d      	mov	r5, r1
 8014538:	4650      	mov	r0, sl
 801453a:	4659      	mov	r1, fp
 801453c:	f7ec f874 	bl	8000628 <__aeabi_dmul>
 8014540:	a36f      	add	r3, pc, #444	; (adr r3, 8014700 <__kernel_tan+0x2a0>)
 8014542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801454a:	4620      	mov	r0, r4
 801454c:	4629      	mov	r1, r5
 801454e:	f7ec f86b 	bl	8000628 <__aeabi_dmul>
 8014552:	a36d      	add	r3, pc, #436	; (adr r3, 8014708 <__kernel_tan+0x2a8>)
 8014554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014558:	f7eb feb0 	bl	80002bc <__adddf3>
 801455c:	4622      	mov	r2, r4
 801455e:	462b      	mov	r3, r5
 8014560:	f7ec f862 	bl	8000628 <__aeabi_dmul>
 8014564:	a36a      	add	r3, pc, #424	; (adr r3, 8014710 <__kernel_tan+0x2b0>)
 8014566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801456a:	f7eb fea7 	bl	80002bc <__adddf3>
 801456e:	4622      	mov	r2, r4
 8014570:	462b      	mov	r3, r5
 8014572:	f7ec f859 	bl	8000628 <__aeabi_dmul>
 8014576:	a368      	add	r3, pc, #416	; (adr r3, 8014718 <__kernel_tan+0x2b8>)
 8014578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457c:	f7eb fe9e 	bl	80002bc <__adddf3>
 8014580:	4622      	mov	r2, r4
 8014582:	462b      	mov	r3, r5
 8014584:	f7ec f850 	bl	8000628 <__aeabi_dmul>
 8014588:	a365      	add	r3, pc, #404	; (adr r3, 8014720 <__kernel_tan+0x2c0>)
 801458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458e:	f7eb fe95 	bl	80002bc <__adddf3>
 8014592:	4622      	mov	r2, r4
 8014594:	462b      	mov	r3, r5
 8014596:	f7ec f847 	bl	8000628 <__aeabi_dmul>
 801459a:	a363      	add	r3, pc, #396	; (adr r3, 8014728 <__kernel_tan+0x2c8>)
 801459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a0:	f7eb fe8c 	bl	80002bc <__adddf3>
 80145a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145a8:	f7ec f83e 	bl	8000628 <__aeabi_dmul>
 80145ac:	a360      	add	r3, pc, #384	; (adr r3, 8014730 <__kernel_tan+0x2d0>)
 80145ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80145b6:	4620      	mov	r0, r4
 80145b8:	4629      	mov	r1, r5
 80145ba:	f7ec f835 	bl	8000628 <__aeabi_dmul>
 80145be:	a35e      	add	r3, pc, #376	; (adr r3, 8014738 <__kernel_tan+0x2d8>)
 80145c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145c4:	f7eb fe7a 	bl	80002bc <__adddf3>
 80145c8:	4622      	mov	r2, r4
 80145ca:	462b      	mov	r3, r5
 80145cc:	f7ec f82c 	bl	8000628 <__aeabi_dmul>
 80145d0:	a35b      	add	r3, pc, #364	; (adr r3, 8014740 <__kernel_tan+0x2e0>)
 80145d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145d6:	f7eb fe71 	bl	80002bc <__adddf3>
 80145da:	4622      	mov	r2, r4
 80145dc:	462b      	mov	r3, r5
 80145de:	f7ec f823 	bl	8000628 <__aeabi_dmul>
 80145e2:	a359      	add	r3, pc, #356	; (adr r3, 8014748 <__kernel_tan+0x2e8>)
 80145e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145e8:	f7eb fe68 	bl	80002bc <__adddf3>
 80145ec:	4622      	mov	r2, r4
 80145ee:	462b      	mov	r3, r5
 80145f0:	f7ec f81a 	bl	8000628 <__aeabi_dmul>
 80145f4:	a356      	add	r3, pc, #344	; (adr r3, 8014750 <__kernel_tan+0x2f0>)
 80145f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145fa:	f7eb fe5f 	bl	80002bc <__adddf3>
 80145fe:	4622      	mov	r2, r4
 8014600:	462b      	mov	r3, r5
 8014602:	f7ec f811 	bl	8000628 <__aeabi_dmul>
 8014606:	a354      	add	r3, pc, #336	; (adr r3, 8014758 <__kernel_tan+0x2f8>)
 8014608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460c:	f7eb fe56 	bl	80002bc <__adddf3>
 8014610:	4602      	mov	r2, r0
 8014612:	460b      	mov	r3, r1
 8014614:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014618:	f7eb fe50 	bl	80002bc <__adddf3>
 801461c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014620:	f7ec f802 	bl	8000628 <__aeabi_dmul>
 8014624:	4642      	mov	r2, r8
 8014626:	464b      	mov	r3, r9
 8014628:	f7eb fe48 	bl	80002bc <__adddf3>
 801462c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014630:	f7eb fffa 	bl	8000628 <__aeabi_dmul>
 8014634:	4642      	mov	r2, r8
 8014636:	464b      	mov	r3, r9
 8014638:	f7eb fe40 	bl	80002bc <__adddf3>
 801463c:	a348      	add	r3, pc, #288	; (adr r3, 8014760 <__kernel_tan+0x300>)
 801463e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014642:	4604      	mov	r4, r0
 8014644:	460d      	mov	r5, r1
 8014646:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801464a:	f7eb ffed 	bl	8000628 <__aeabi_dmul>
 801464e:	4622      	mov	r2, r4
 8014650:	462b      	mov	r3, r5
 8014652:	f7eb fe33 	bl	80002bc <__adddf3>
 8014656:	e9cd 0100 	strd	r0, r1, [sp]
 801465a:	460b      	mov	r3, r1
 801465c:	4602      	mov	r2, r0
 801465e:	4659      	mov	r1, fp
 8014660:	4650      	mov	r0, sl
 8014662:	f7eb fe2b 	bl	80002bc <__adddf3>
 8014666:	4b43      	ldr	r3, [pc, #268]	; (8014774 <__kernel_tan+0x314>)
 8014668:	429f      	cmp	r7, r3
 801466a:	4604      	mov	r4, r0
 801466c:	460d      	mov	r5, r1
 801466e:	f340 8083 	ble.w	8014778 <__kernel_tan+0x318>
 8014672:	4630      	mov	r0, r6
 8014674:	f7eb ff6e 	bl	8000554 <__aeabi_i2d>
 8014678:	4622      	mov	r2, r4
 801467a:	4680      	mov	r8, r0
 801467c:	4689      	mov	r9, r1
 801467e:	462b      	mov	r3, r5
 8014680:	4620      	mov	r0, r4
 8014682:	4629      	mov	r1, r5
 8014684:	f7eb ffd0 	bl	8000628 <__aeabi_dmul>
 8014688:	4642      	mov	r2, r8
 801468a:	4606      	mov	r6, r0
 801468c:	460f      	mov	r7, r1
 801468e:	464b      	mov	r3, r9
 8014690:	4620      	mov	r0, r4
 8014692:	4629      	mov	r1, r5
 8014694:	f7eb fe12 	bl	80002bc <__adddf3>
 8014698:	4602      	mov	r2, r0
 801469a:	460b      	mov	r3, r1
 801469c:	4630      	mov	r0, r6
 801469e:	4639      	mov	r1, r7
 80146a0:	f7ec f8ec 	bl	800087c <__aeabi_ddiv>
 80146a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80146a8:	f7eb fe06 	bl	80002b8 <__aeabi_dsub>
 80146ac:	4602      	mov	r2, r0
 80146ae:	460b      	mov	r3, r1
 80146b0:	4650      	mov	r0, sl
 80146b2:	4659      	mov	r1, fp
 80146b4:	f7eb fe00 	bl	80002b8 <__aeabi_dsub>
 80146b8:	4602      	mov	r2, r0
 80146ba:	460b      	mov	r3, r1
 80146bc:	f7eb fdfe 	bl	80002bc <__adddf3>
 80146c0:	4602      	mov	r2, r0
 80146c2:	460b      	mov	r3, r1
 80146c4:	4640      	mov	r0, r8
 80146c6:	4649      	mov	r1, r9
 80146c8:	f7eb fdf6 	bl	80002b8 <__aeabi_dsub>
 80146cc:	9b02      	ldr	r3, [sp, #8]
 80146ce:	4604      	mov	r4, r0
 80146d0:	1798      	asrs	r0, r3, #30
 80146d2:	f000 0002 	and.w	r0, r0, #2
 80146d6:	f1c0 0001 	rsb	r0, r0, #1
 80146da:	460d      	mov	r5, r1
 80146dc:	f7eb ff3a 	bl	8000554 <__aeabi_i2d>
 80146e0:	4602      	mov	r2, r0
 80146e2:	460b      	mov	r3, r1
 80146e4:	4620      	mov	r0, r4
 80146e6:	4629      	mov	r1, r5
 80146e8:	f7eb ff9e 	bl	8000628 <__aeabi_dmul>
 80146ec:	e6dd      	b.n	80144aa <__kernel_tan+0x4a>
 80146ee:	bf00      	nop
 80146f0:	54442d18 	.word	0x54442d18
 80146f4:	3fe921fb 	.word	0x3fe921fb
 80146f8:	33145c07 	.word	0x33145c07
 80146fc:	3c81a626 	.word	0x3c81a626
 8014700:	74bf7ad4 	.word	0x74bf7ad4
 8014704:	3efb2a70 	.word	0x3efb2a70
 8014708:	32f0a7e9 	.word	0x32f0a7e9
 801470c:	3f12b80f 	.word	0x3f12b80f
 8014710:	1a8d1068 	.word	0x1a8d1068
 8014714:	3f3026f7 	.word	0x3f3026f7
 8014718:	fee08315 	.word	0xfee08315
 801471c:	3f57dbc8 	.word	0x3f57dbc8
 8014720:	e96e8493 	.word	0xe96e8493
 8014724:	3f8226e3 	.word	0x3f8226e3
 8014728:	1bb341fe 	.word	0x1bb341fe
 801472c:	3faba1ba 	.word	0x3faba1ba
 8014730:	db605373 	.word	0xdb605373
 8014734:	bef375cb 	.word	0xbef375cb
 8014738:	a03792a6 	.word	0xa03792a6
 801473c:	3f147e88 	.word	0x3f147e88
 8014740:	f2f26501 	.word	0xf2f26501
 8014744:	3f4344d8 	.word	0x3f4344d8
 8014748:	c9560328 	.word	0xc9560328
 801474c:	3f6d6d22 	.word	0x3f6d6d22
 8014750:	8406d637 	.word	0x8406d637
 8014754:	3f9664f4 	.word	0x3f9664f4
 8014758:	1110fe7a 	.word	0x1110fe7a
 801475c:	3fc11111 	.word	0x3fc11111
 8014760:	55555563 	.word	0x55555563
 8014764:	3fd55555 	.word	0x3fd55555
 8014768:	3e2fffff 	.word	0x3e2fffff
 801476c:	3ff00000 	.word	0x3ff00000
 8014770:	bff00000 	.word	0xbff00000
 8014774:	3fe59427 	.word	0x3fe59427
 8014778:	2e01      	cmp	r6, #1
 801477a:	d036      	beq.n	80147ea <__kernel_tan+0x38a>
 801477c:	460f      	mov	r7, r1
 801477e:	4602      	mov	r2, r0
 8014780:	460b      	mov	r3, r1
 8014782:	2000      	movs	r0, #0
 8014784:	491a      	ldr	r1, [pc, #104]	; (80147f0 <__kernel_tan+0x390>)
 8014786:	f7ec f879 	bl	800087c <__aeabi_ddiv>
 801478a:	2600      	movs	r6, #0
 801478c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014790:	4652      	mov	r2, sl
 8014792:	465b      	mov	r3, fp
 8014794:	4630      	mov	r0, r6
 8014796:	4639      	mov	r1, r7
 8014798:	f7eb fd8e 	bl	80002b8 <__aeabi_dsub>
 801479c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80147a0:	4602      	mov	r2, r0
 80147a2:	460b      	mov	r3, r1
 80147a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147a8:	f7eb fd86 	bl	80002b8 <__aeabi_dsub>
 80147ac:	4632      	mov	r2, r6
 80147ae:	462b      	mov	r3, r5
 80147b0:	f7eb ff3a 	bl	8000628 <__aeabi_dmul>
 80147b4:	4632      	mov	r2, r6
 80147b6:	4682      	mov	sl, r0
 80147b8:	468b      	mov	fp, r1
 80147ba:	462b      	mov	r3, r5
 80147bc:	4630      	mov	r0, r6
 80147be:	4639      	mov	r1, r7
 80147c0:	f7eb ff32 	bl	8000628 <__aeabi_dmul>
 80147c4:	2200      	movs	r2, #0
 80147c6:	4b0b      	ldr	r3, [pc, #44]	; (80147f4 <__kernel_tan+0x394>)
 80147c8:	f7eb fd78 	bl	80002bc <__adddf3>
 80147cc:	4602      	mov	r2, r0
 80147ce:	460b      	mov	r3, r1
 80147d0:	4650      	mov	r0, sl
 80147d2:	4659      	mov	r1, fp
 80147d4:	f7eb fd72 	bl	80002bc <__adddf3>
 80147d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80147dc:	f7eb ff24 	bl	8000628 <__aeabi_dmul>
 80147e0:	4632      	mov	r2, r6
 80147e2:	462b      	mov	r3, r5
 80147e4:	f7eb fd6a 	bl	80002bc <__adddf3>
 80147e8:	e65f      	b.n	80144aa <__kernel_tan+0x4a>
 80147ea:	4682      	mov	sl, r0
 80147ec:	468b      	mov	fp, r1
 80147ee:	e65e      	b.n	80144ae <__kernel_tan+0x4e>
 80147f0:	bff00000 	.word	0xbff00000
 80147f4:	3ff00000 	.word	0x3ff00000

080147f8 <fabs>:
 80147f8:	ec51 0b10 	vmov	r0, r1, d0
 80147fc:	ee10 2a10 	vmov	r2, s0
 8014800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014804:	ec43 2b10 	vmov	d0, r2, r3
 8014808:	4770      	bx	lr

0801480a <finite>:
 801480a:	ee10 3a90 	vmov	r3, s1
 801480e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014812:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014816:	0fc0      	lsrs	r0, r0, #31
 8014818:	4770      	bx	lr

0801481a <matherr>:
 801481a:	2000      	movs	r0, #0
 801481c:	4770      	bx	lr
	...

08014820 <nan>:
 8014820:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014828 <nan+0x8>
 8014824:	4770      	bx	lr
 8014826:	bf00      	nop
 8014828:	00000000 	.word	0x00000000
 801482c:	7ff80000 	.word	0x7ff80000

08014830 <rint>:
 8014830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014832:	ec51 0b10 	vmov	r0, r1, d0
 8014836:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801483a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801483e:	2e13      	cmp	r6, #19
 8014840:	460b      	mov	r3, r1
 8014842:	ee10 4a10 	vmov	r4, s0
 8014846:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801484a:	dc56      	bgt.n	80148fa <rint+0xca>
 801484c:	2e00      	cmp	r6, #0
 801484e:	da2b      	bge.n	80148a8 <rint+0x78>
 8014850:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8014854:	4302      	orrs	r2, r0
 8014856:	d023      	beq.n	80148a0 <rint+0x70>
 8014858:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801485c:	4302      	orrs	r2, r0
 801485e:	4254      	negs	r4, r2
 8014860:	4314      	orrs	r4, r2
 8014862:	0c4b      	lsrs	r3, r1, #17
 8014864:	0b24      	lsrs	r4, r4, #12
 8014866:	045b      	lsls	r3, r3, #17
 8014868:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801486c:	ea44 0103 	orr.w	r1, r4, r3
 8014870:	460b      	mov	r3, r1
 8014872:	492f      	ldr	r1, [pc, #188]	; (8014930 <rint+0x100>)
 8014874:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014878:	e9d1 6700 	ldrd	r6, r7, [r1]
 801487c:	4602      	mov	r2, r0
 801487e:	4639      	mov	r1, r7
 8014880:	4630      	mov	r0, r6
 8014882:	f7eb fd1b 	bl	80002bc <__adddf3>
 8014886:	e9cd 0100 	strd	r0, r1, [sp]
 801488a:	463b      	mov	r3, r7
 801488c:	4632      	mov	r2, r6
 801488e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014892:	f7eb fd11 	bl	80002b8 <__aeabi_dsub>
 8014896:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801489a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801489e:	4639      	mov	r1, r7
 80148a0:	ec41 0b10 	vmov	d0, r0, r1
 80148a4:	b003      	add	sp, #12
 80148a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148a8:	4a22      	ldr	r2, [pc, #136]	; (8014934 <rint+0x104>)
 80148aa:	4132      	asrs	r2, r6
 80148ac:	ea01 0702 	and.w	r7, r1, r2
 80148b0:	4307      	orrs	r7, r0
 80148b2:	d0f5      	beq.n	80148a0 <rint+0x70>
 80148b4:	0852      	lsrs	r2, r2, #1
 80148b6:	4011      	ands	r1, r2
 80148b8:	430c      	orrs	r4, r1
 80148ba:	d00b      	beq.n	80148d4 <rint+0xa4>
 80148bc:	ea23 0202 	bic.w	r2, r3, r2
 80148c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80148c4:	2e13      	cmp	r6, #19
 80148c6:	fa43 f306 	asr.w	r3, r3, r6
 80148ca:	bf0c      	ite	eq
 80148cc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80148d0:	2400      	movne	r4, #0
 80148d2:	4313      	orrs	r3, r2
 80148d4:	4916      	ldr	r1, [pc, #88]	; (8014930 <rint+0x100>)
 80148d6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80148da:	4622      	mov	r2, r4
 80148dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80148e0:	4620      	mov	r0, r4
 80148e2:	4629      	mov	r1, r5
 80148e4:	f7eb fcea 	bl	80002bc <__adddf3>
 80148e8:	e9cd 0100 	strd	r0, r1, [sp]
 80148ec:	4622      	mov	r2, r4
 80148ee:	462b      	mov	r3, r5
 80148f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148f4:	f7eb fce0 	bl	80002b8 <__aeabi_dsub>
 80148f8:	e7d2      	b.n	80148a0 <rint+0x70>
 80148fa:	2e33      	cmp	r6, #51	; 0x33
 80148fc:	dd07      	ble.n	801490e <rint+0xde>
 80148fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014902:	d1cd      	bne.n	80148a0 <rint+0x70>
 8014904:	ee10 2a10 	vmov	r2, s0
 8014908:	f7eb fcd8 	bl	80002bc <__adddf3>
 801490c:	e7c8      	b.n	80148a0 <rint+0x70>
 801490e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8014912:	f04f 32ff 	mov.w	r2, #4294967295
 8014916:	40f2      	lsrs	r2, r6
 8014918:	4210      	tst	r0, r2
 801491a:	d0c1      	beq.n	80148a0 <rint+0x70>
 801491c:	0852      	lsrs	r2, r2, #1
 801491e:	4210      	tst	r0, r2
 8014920:	bf1f      	itttt	ne
 8014922:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8014926:	ea20 0202 	bicne.w	r2, r0, r2
 801492a:	4134      	asrne	r4, r6
 801492c:	4314      	orrne	r4, r2
 801492e:	e7d1      	b.n	80148d4 <rint+0xa4>
 8014930:	08036a58 	.word	0x08036a58
 8014934:	000fffff 	.word	0x000fffff

08014938 <scalbn>:
 8014938:	b570      	push	{r4, r5, r6, lr}
 801493a:	ec55 4b10 	vmov	r4, r5, d0
 801493e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014942:	4606      	mov	r6, r0
 8014944:	462b      	mov	r3, r5
 8014946:	b9aa      	cbnz	r2, 8014974 <scalbn+0x3c>
 8014948:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801494c:	4323      	orrs	r3, r4
 801494e:	d03b      	beq.n	80149c8 <scalbn+0x90>
 8014950:	4b31      	ldr	r3, [pc, #196]	; (8014a18 <scalbn+0xe0>)
 8014952:	4629      	mov	r1, r5
 8014954:	2200      	movs	r2, #0
 8014956:	ee10 0a10 	vmov	r0, s0
 801495a:	f7eb fe65 	bl	8000628 <__aeabi_dmul>
 801495e:	4b2f      	ldr	r3, [pc, #188]	; (8014a1c <scalbn+0xe4>)
 8014960:	429e      	cmp	r6, r3
 8014962:	4604      	mov	r4, r0
 8014964:	460d      	mov	r5, r1
 8014966:	da12      	bge.n	801498e <scalbn+0x56>
 8014968:	a327      	add	r3, pc, #156	; (adr r3, 8014a08 <scalbn+0xd0>)
 801496a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801496e:	f7eb fe5b 	bl	8000628 <__aeabi_dmul>
 8014972:	e009      	b.n	8014988 <scalbn+0x50>
 8014974:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014978:	428a      	cmp	r2, r1
 801497a:	d10c      	bne.n	8014996 <scalbn+0x5e>
 801497c:	ee10 2a10 	vmov	r2, s0
 8014980:	4620      	mov	r0, r4
 8014982:	4629      	mov	r1, r5
 8014984:	f7eb fc9a 	bl	80002bc <__adddf3>
 8014988:	4604      	mov	r4, r0
 801498a:	460d      	mov	r5, r1
 801498c:	e01c      	b.n	80149c8 <scalbn+0x90>
 801498e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014992:	460b      	mov	r3, r1
 8014994:	3a36      	subs	r2, #54	; 0x36
 8014996:	4432      	add	r2, r6
 8014998:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801499c:	428a      	cmp	r2, r1
 801499e:	dd0b      	ble.n	80149b8 <scalbn+0x80>
 80149a0:	ec45 4b11 	vmov	d1, r4, r5
 80149a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014a10 <scalbn+0xd8>
 80149a8:	f000 f846 	bl	8014a38 <copysign>
 80149ac:	a318      	add	r3, pc, #96	; (adr r3, 8014a10 <scalbn+0xd8>)
 80149ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b2:	ec51 0b10 	vmov	r0, r1, d0
 80149b6:	e7da      	b.n	801496e <scalbn+0x36>
 80149b8:	2a00      	cmp	r2, #0
 80149ba:	dd08      	ble.n	80149ce <scalbn+0x96>
 80149bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80149c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80149c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80149c8:	ec45 4b10 	vmov	d0, r4, r5
 80149cc:	bd70      	pop	{r4, r5, r6, pc}
 80149ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80149d2:	da0d      	bge.n	80149f0 <scalbn+0xb8>
 80149d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80149d8:	429e      	cmp	r6, r3
 80149da:	ec45 4b11 	vmov	d1, r4, r5
 80149de:	dce1      	bgt.n	80149a4 <scalbn+0x6c>
 80149e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014a08 <scalbn+0xd0>
 80149e4:	f000 f828 	bl	8014a38 <copysign>
 80149e8:	a307      	add	r3, pc, #28	; (adr r3, 8014a08 <scalbn+0xd0>)
 80149ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ee:	e7e0      	b.n	80149b2 <scalbn+0x7a>
 80149f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80149f4:	3236      	adds	r2, #54	; 0x36
 80149f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80149fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80149fe:	4620      	mov	r0, r4
 8014a00:	4629      	mov	r1, r5
 8014a02:	2200      	movs	r2, #0
 8014a04:	4b06      	ldr	r3, [pc, #24]	; (8014a20 <scalbn+0xe8>)
 8014a06:	e7b2      	b.n	801496e <scalbn+0x36>
 8014a08:	c2f8f359 	.word	0xc2f8f359
 8014a0c:	01a56e1f 	.word	0x01a56e1f
 8014a10:	8800759c 	.word	0x8800759c
 8014a14:	7e37e43c 	.word	0x7e37e43c
 8014a18:	43500000 	.word	0x43500000
 8014a1c:	ffff3cb0 	.word	0xffff3cb0
 8014a20:	3c900000 	.word	0x3c900000

08014a24 <finitef>:
 8014a24:	ee10 3a10 	vmov	r3, s0
 8014a28:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8014a2c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014a30:	bfac      	ite	ge
 8014a32:	2000      	movge	r0, #0
 8014a34:	2001      	movlt	r0, #1
 8014a36:	4770      	bx	lr

08014a38 <copysign>:
 8014a38:	ec51 0b10 	vmov	r0, r1, d0
 8014a3c:	ee11 0a90 	vmov	r0, s3
 8014a40:	ee10 2a10 	vmov	r2, s0
 8014a44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014a48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014a4c:	ea41 0300 	orr.w	r3, r1, r0
 8014a50:	ec43 2b10 	vmov	d0, r2, r3
 8014a54:	4770      	bx	lr

08014a56 <abort>:
 8014a56:	b508      	push	{r3, lr}
 8014a58:	2006      	movs	r0, #6
 8014a5a:	f000 fd47 	bl	80154ec <raise>
 8014a5e:	2001      	movs	r0, #1
 8014a60:	f7f1 fdd8 	bl	8006614 <_exit>

08014a64 <__assert_func>:
 8014a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014a66:	461c      	mov	r4, r3
 8014a68:	4b09      	ldr	r3, [pc, #36]	; (8014a90 <__assert_func+0x2c>)
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	4605      	mov	r5, r0
 8014a6e:	68d8      	ldr	r0, [r3, #12]
 8014a70:	b152      	cbz	r2, 8014a88 <__assert_func+0x24>
 8014a72:	4b08      	ldr	r3, [pc, #32]	; (8014a94 <__assert_func+0x30>)
 8014a74:	9100      	str	r1, [sp, #0]
 8014a76:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8014a7a:	4907      	ldr	r1, [pc, #28]	; (8014a98 <__assert_func+0x34>)
 8014a7c:	462b      	mov	r3, r5
 8014a7e:	4622      	mov	r2, r4
 8014a80:	f000 f834 	bl	8014aec <fiprintf>
 8014a84:	f7ff ffe7 	bl	8014a56 <abort>
 8014a88:	4b04      	ldr	r3, [pc, #16]	; (8014a9c <__assert_func+0x38>)
 8014a8a:	461a      	mov	r2, r3
 8014a8c:	e7f2      	b.n	8014a74 <__assert_func+0x10>
 8014a8e:	bf00      	nop
 8014a90:	20000788 	.word	0x20000788
 8014a94:	08036a68 	.word	0x08036a68
 8014a98:	08036a75 	.word	0x08036a75
 8014a9c:	08036aa3 	.word	0x08036aa3

08014aa0 <atof>:
 8014aa0:	2100      	movs	r1, #0
 8014aa2:	f001 bb61 	b.w	8016168 <strtod>
	...

08014aa8 <calloc>:
 8014aa8:	4b02      	ldr	r3, [pc, #8]	; (8014ab4 <calloc+0xc>)
 8014aaa:	460a      	mov	r2, r1
 8014aac:	4601      	mov	r1, r0
 8014aae:	6818      	ldr	r0, [r3, #0]
 8014ab0:	f000 b8ea 	b.w	8014c88 <_calloc_r>
 8014ab4:	20000788 	.word	0x20000788

08014ab8 <__errno>:
 8014ab8:	4b01      	ldr	r3, [pc, #4]	; (8014ac0 <__errno+0x8>)
 8014aba:	6818      	ldr	r0, [r3, #0]
 8014abc:	4770      	bx	lr
 8014abe:	bf00      	nop
 8014ac0:	20000788 	.word	0x20000788

08014ac4 <exit>:
 8014ac4:	b508      	push	{r3, lr}
 8014ac6:	4b07      	ldr	r3, [pc, #28]	; (8014ae4 <exit+0x20>)
 8014ac8:	4604      	mov	r4, r0
 8014aca:	b113      	cbz	r3, 8014ad2 <exit+0xe>
 8014acc:	2100      	movs	r1, #0
 8014ace:	f001 fc3f 	bl	8016350 <__call_exitprocs>
 8014ad2:	4b05      	ldr	r3, [pc, #20]	; (8014ae8 <exit+0x24>)
 8014ad4:	6818      	ldr	r0, [r3, #0]
 8014ad6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8014ad8:	b103      	cbz	r3, 8014adc <exit+0x18>
 8014ada:	4798      	blx	r3
 8014adc:	4620      	mov	r0, r4
 8014ade:	f7f1 fd99 	bl	8006614 <_exit>
 8014ae2:	bf00      	nop
 8014ae4:	08016351 	.word	0x08016351
 8014ae8:	08036aa4 	.word	0x08036aa4

08014aec <fiprintf>:
 8014aec:	b40e      	push	{r1, r2, r3}
 8014aee:	b503      	push	{r0, r1, lr}
 8014af0:	4601      	mov	r1, r0
 8014af2:	ab03      	add	r3, sp, #12
 8014af4:	4805      	ldr	r0, [pc, #20]	; (8014b0c <fiprintf+0x20>)
 8014af6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014afa:	6800      	ldr	r0, [r0, #0]
 8014afc:	9301      	str	r3, [sp, #4]
 8014afe:	f000 f9a3 	bl	8014e48 <_vfiprintf_r>
 8014b02:	b002      	add	sp, #8
 8014b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b08:	b003      	add	sp, #12
 8014b0a:	4770      	bx	lr
 8014b0c:	20000788 	.word	0x20000788

08014b10 <_fwrite_r>:
 8014b10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b14:	9c08      	ldr	r4, [sp, #32]
 8014b16:	4689      	mov	r9, r1
 8014b18:	4617      	mov	r7, r2
 8014b1a:	fb02 f803 	mul.w	r8, r2, r3
 8014b1e:	4606      	mov	r6, r0
 8014b20:	b118      	cbz	r0, 8014b2a <_fwrite_r+0x1a>
 8014b22:	6983      	ldr	r3, [r0, #24]
 8014b24:	b90b      	cbnz	r3, 8014b2a <_fwrite_r+0x1a>
 8014b26:	f001 fd6d 	bl	8016604 <__sinit>
 8014b2a:	4b1d      	ldr	r3, [pc, #116]	; (8014ba0 <_fwrite_r+0x90>)
 8014b2c:	429c      	cmp	r4, r3
 8014b2e:	d11a      	bne.n	8014b66 <_fwrite_r+0x56>
 8014b30:	6874      	ldr	r4, [r6, #4]
 8014b32:	89a3      	ldrh	r3, [r4, #12]
 8014b34:	071b      	lsls	r3, r3, #28
 8014b36:	d520      	bpl.n	8014b7a <_fwrite_r+0x6a>
 8014b38:	6923      	ldr	r3, [r4, #16]
 8014b3a:	b1f3      	cbz	r3, 8014b7a <_fwrite_r+0x6a>
 8014b3c:	2500      	movs	r5, #0
 8014b3e:	4545      	cmp	r5, r8
 8014b40:	d029      	beq.n	8014b96 <_fwrite_r+0x86>
 8014b42:	68a3      	ldr	r3, [r4, #8]
 8014b44:	f819 1005 	ldrb.w	r1, [r9, r5]
 8014b48:	3b01      	subs	r3, #1
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	60a3      	str	r3, [r4, #8]
 8014b4e:	da04      	bge.n	8014b5a <_fwrite_r+0x4a>
 8014b50:	69a2      	ldr	r2, [r4, #24]
 8014b52:	4293      	cmp	r3, r2
 8014b54:	db19      	blt.n	8014b8a <_fwrite_r+0x7a>
 8014b56:	290a      	cmp	r1, #10
 8014b58:	d017      	beq.n	8014b8a <_fwrite_r+0x7a>
 8014b5a:	6823      	ldr	r3, [r4, #0]
 8014b5c:	1c5a      	adds	r2, r3, #1
 8014b5e:	6022      	str	r2, [r4, #0]
 8014b60:	7019      	strb	r1, [r3, #0]
 8014b62:	3501      	adds	r5, #1
 8014b64:	e7eb      	b.n	8014b3e <_fwrite_r+0x2e>
 8014b66:	4b0f      	ldr	r3, [pc, #60]	; (8014ba4 <_fwrite_r+0x94>)
 8014b68:	429c      	cmp	r4, r3
 8014b6a:	d101      	bne.n	8014b70 <_fwrite_r+0x60>
 8014b6c:	68b4      	ldr	r4, [r6, #8]
 8014b6e:	e7e0      	b.n	8014b32 <_fwrite_r+0x22>
 8014b70:	4b0d      	ldr	r3, [pc, #52]	; (8014ba8 <_fwrite_r+0x98>)
 8014b72:	429c      	cmp	r4, r3
 8014b74:	bf08      	it	eq
 8014b76:	68f4      	ldreq	r4, [r6, #12]
 8014b78:	e7db      	b.n	8014b32 <_fwrite_r+0x22>
 8014b7a:	4621      	mov	r1, r4
 8014b7c:	4630      	mov	r0, r6
 8014b7e:	f001 fb79 	bl	8016274 <__swsetup_r>
 8014b82:	2800      	cmp	r0, #0
 8014b84:	d0da      	beq.n	8014b3c <_fwrite_r+0x2c>
 8014b86:	2500      	movs	r5, #0
 8014b88:	e005      	b.n	8014b96 <_fwrite_r+0x86>
 8014b8a:	4622      	mov	r2, r4
 8014b8c:	4630      	mov	r0, r6
 8014b8e:	f001 fb1f 	bl	80161d0 <__swbuf_r>
 8014b92:	3001      	adds	r0, #1
 8014b94:	d1e5      	bne.n	8014b62 <_fwrite_r+0x52>
 8014b96:	fbb5 f0f7 	udiv	r0, r5, r7
 8014b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b9e:	bf00      	nop
 8014ba0:	08036b58 	.word	0x08036b58
 8014ba4:	08036b78 	.word	0x08036b78
 8014ba8:	08036b38 	.word	0x08036b38

08014bac <fwrite>:
 8014bac:	b507      	push	{r0, r1, r2, lr}
 8014bae:	9300      	str	r3, [sp, #0]
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	460a      	mov	r2, r1
 8014bb4:	4601      	mov	r1, r0
 8014bb6:	4803      	ldr	r0, [pc, #12]	; (8014bc4 <fwrite+0x18>)
 8014bb8:	6800      	ldr	r0, [r0, #0]
 8014bba:	f7ff ffa9 	bl	8014b10 <_fwrite_r>
 8014bbe:	b003      	add	sp, #12
 8014bc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014bc4:	20000788 	.word	0x20000788

08014bc8 <__libc_init_array>:
 8014bc8:	b570      	push	{r4, r5, r6, lr}
 8014bca:	4e0d      	ldr	r6, [pc, #52]	; (8014c00 <__libc_init_array+0x38>)
 8014bcc:	4c0d      	ldr	r4, [pc, #52]	; (8014c04 <__libc_init_array+0x3c>)
 8014bce:	1ba4      	subs	r4, r4, r6
 8014bd0:	10a4      	asrs	r4, r4, #2
 8014bd2:	2500      	movs	r5, #0
 8014bd4:	42a5      	cmp	r5, r4
 8014bd6:	d109      	bne.n	8014bec <__libc_init_array+0x24>
 8014bd8:	4e0b      	ldr	r6, [pc, #44]	; (8014c08 <__libc_init_array+0x40>)
 8014bda:	4c0c      	ldr	r4, [pc, #48]	; (8014c0c <__libc_init_array+0x44>)
 8014bdc:	f002 ff74 	bl	8017ac8 <_init>
 8014be0:	1ba4      	subs	r4, r4, r6
 8014be2:	10a4      	asrs	r4, r4, #2
 8014be4:	2500      	movs	r5, #0
 8014be6:	42a5      	cmp	r5, r4
 8014be8:	d105      	bne.n	8014bf6 <__libc_init_array+0x2e>
 8014bea:	bd70      	pop	{r4, r5, r6, pc}
 8014bec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014bf0:	4798      	blx	r3
 8014bf2:	3501      	adds	r5, #1
 8014bf4:	e7ee      	b.n	8014bd4 <__libc_init_array+0xc>
 8014bf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014bfa:	4798      	blx	r3
 8014bfc:	3501      	adds	r5, #1
 8014bfe:	e7f2      	b.n	8014be6 <__libc_init_array+0x1e>
 8014c00:	08036db0 	.word	0x08036db0
 8014c04:	08036db0 	.word	0x08036db0
 8014c08:	08036db0 	.word	0x08036db0
 8014c0c:	08036db8 	.word	0x08036db8

08014c10 <malloc>:
 8014c10:	4b02      	ldr	r3, [pc, #8]	; (8014c1c <malloc+0xc>)
 8014c12:	4601      	mov	r1, r0
 8014c14:	6818      	ldr	r0, [r3, #0]
 8014c16:	f000 b893 	b.w	8014d40 <_malloc_r>
 8014c1a:	bf00      	nop
 8014c1c:	20000788 	.word	0x20000788

08014c20 <free>:
 8014c20:	4b02      	ldr	r3, [pc, #8]	; (8014c2c <free+0xc>)
 8014c22:	4601      	mov	r1, r0
 8014c24:	6818      	ldr	r0, [r3, #0]
 8014c26:	f000 b83d 	b.w	8014ca4 <_free_r>
 8014c2a:	bf00      	nop
 8014c2c:	20000788 	.word	0x20000788

08014c30 <memcpy>:
 8014c30:	b510      	push	{r4, lr}
 8014c32:	1e43      	subs	r3, r0, #1
 8014c34:	440a      	add	r2, r1
 8014c36:	4291      	cmp	r1, r2
 8014c38:	d100      	bne.n	8014c3c <memcpy+0xc>
 8014c3a:	bd10      	pop	{r4, pc}
 8014c3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c44:	e7f7      	b.n	8014c36 <memcpy+0x6>

08014c46 <memmove>:
 8014c46:	4288      	cmp	r0, r1
 8014c48:	b510      	push	{r4, lr}
 8014c4a:	eb01 0302 	add.w	r3, r1, r2
 8014c4e:	d807      	bhi.n	8014c60 <memmove+0x1a>
 8014c50:	1e42      	subs	r2, r0, #1
 8014c52:	4299      	cmp	r1, r3
 8014c54:	d00a      	beq.n	8014c6c <memmove+0x26>
 8014c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c5a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014c5e:	e7f8      	b.n	8014c52 <memmove+0xc>
 8014c60:	4283      	cmp	r3, r0
 8014c62:	d9f5      	bls.n	8014c50 <memmove+0xa>
 8014c64:	1881      	adds	r1, r0, r2
 8014c66:	1ad2      	subs	r2, r2, r3
 8014c68:	42d3      	cmn	r3, r2
 8014c6a:	d100      	bne.n	8014c6e <memmove+0x28>
 8014c6c:	bd10      	pop	{r4, pc}
 8014c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c72:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014c76:	e7f7      	b.n	8014c68 <memmove+0x22>

08014c78 <memset>:
 8014c78:	4402      	add	r2, r0
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	4293      	cmp	r3, r2
 8014c7e:	d100      	bne.n	8014c82 <memset+0xa>
 8014c80:	4770      	bx	lr
 8014c82:	f803 1b01 	strb.w	r1, [r3], #1
 8014c86:	e7f9      	b.n	8014c7c <memset+0x4>

08014c88 <_calloc_r>:
 8014c88:	b538      	push	{r3, r4, r5, lr}
 8014c8a:	fb02 f401 	mul.w	r4, r2, r1
 8014c8e:	4621      	mov	r1, r4
 8014c90:	f000 f856 	bl	8014d40 <_malloc_r>
 8014c94:	4605      	mov	r5, r0
 8014c96:	b118      	cbz	r0, 8014ca0 <_calloc_r+0x18>
 8014c98:	4622      	mov	r2, r4
 8014c9a:	2100      	movs	r1, #0
 8014c9c:	f7ff ffec 	bl	8014c78 <memset>
 8014ca0:	4628      	mov	r0, r5
 8014ca2:	bd38      	pop	{r3, r4, r5, pc}

08014ca4 <_free_r>:
 8014ca4:	b538      	push	{r3, r4, r5, lr}
 8014ca6:	4605      	mov	r5, r0
 8014ca8:	2900      	cmp	r1, #0
 8014caa:	d045      	beq.n	8014d38 <_free_r+0x94>
 8014cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cb0:	1f0c      	subs	r4, r1, #4
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	bfb8      	it	lt
 8014cb6:	18e4      	addlt	r4, r4, r3
 8014cb8:	f002 f8cc 	bl	8016e54 <__malloc_lock>
 8014cbc:	4a1f      	ldr	r2, [pc, #124]	; (8014d3c <_free_r+0x98>)
 8014cbe:	6813      	ldr	r3, [r2, #0]
 8014cc0:	4610      	mov	r0, r2
 8014cc2:	b933      	cbnz	r3, 8014cd2 <_free_r+0x2e>
 8014cc4:	6063      	str	r3, [r4, #4]
 8014cc6:	6014      	str	r4, [r2, #0]
 8014cc8:	4628      	mov	r0, r5
 8014cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014cce:	f002 b8c2 	b.w	8016e56 <__malloc_unlock>
 8014cd2:	42a3      	cmp	r3, r4
 8014cd4:	d90c      	bls.n	8014cf0 <_free_r+0x4c>
 8014cd6:	6821      	ldr	r1, [r4, #0]
 8014cd8:	1862      	adds	r2, r4, r1
 8014cda:	4293      	cmp	r3, r2
 8014cdc:	bf04      	itt	eq
 8014cde:	681a      	ldreq	r2, [r3, #0]
 8014ce0:	685b      	ldreq	r3, [r3, #4]
 8014ce2:	6063      	str	r3, [r4, #4]
 8014ce4:	bf04      	itt	eq
 8014ce6:	1852      	addeq	r2, r2, r1
 8014ce8:	6022      	streq	r2, [r4, #0]
 8014cea:	6004      	str	r4, [r0, #0]
 8014cec:	e7ec      	b.n	8014cc8 <_free_r+0x24>
 8014cee:	4613      	mov	r3, r2
 8014cf0:	685a      	ldr	r2, [r3, #4]
 8014cf2:	b10a      	cbz	r2, 8014cf8 <_free_r+0x54>
 8014cf4:	42a2      	cmp	r2, r4
 8014cf6:	d9fa      	bls.n	8014cee <_free_r+0x4a>
 8014cf8:	6819      	ldr	r1, [r3, #0]
 8014cfa:	1858      	adds	r0, r3, r1
 8014cfc:	42a0      	cmp	r0, r4
 8014cfe:	d10b      	bne.n	8014d18 <_free_r+0x74>
 8014d00:	6820      	ldr	r0, [r4, #0]
 8014d02:	4401      	add	r1, r0
 8014d04:	1858      	adds	r0, r3, r1
 8014d06:	4282      	cmp	r2, r0
 8014d08:	6019      	str	r1, [r3, #0]
 8014d0a:	d1dd      	bne.n	8014cc8 <_free_r+0x24>
 8014d0c:	6810      	ldr	r0, [r2, #0]
 8014d0e:	6852      	ldr	r2, [r2, #4]
 8014d10:	605a      	str	r2, [r3, #4]
 8014d12:	4401      	add	r1, r0
 8014d14:	6019      	str	r1, [r3, #0]
 8014d16:	e7d7      	b.n	8014cc8 <_free_r+0x24>
 8014d18:	d902      	bls.n	8014d20 <_free_r+0x7c>
 8014d1a:	230c      	movs	r3, #12
 8014d1c:	602b      	str	r3, [r5, #0]
 8014d1e:	e7d3      	b.n	8014cc8 <_free_r+0x24>
 8014d20:	6820      	ldr	r0, [r4, #0]
 8014d22:	1821      	adds	r1, r4, r0
 8014d24:	428a      	cmp	r2, r1
 8014d26:	bf04      	itt	eq
 8014d28:	6811      	ldreq	r1, [r2, #0]
 8014d2a:	6852      	ldreq	r2, [r2, #4]
 8014d2c:	6062      	str	r2, [r4, #4]
 8014d2e:	bf04      	itt	eq
 8014d30:	1809      	addeq	r1, r1, r0
 8014d32:	6021      	streq	r1, [r4, #0]
 8014d34:	605c      	str	r4, [r3, #4]
 8014d36:	e7c7      	b.n	8014cc8 <_free_r+0x24>
 8014d38:	bd38      	pop	{r3, r4, r5, pc}
 8014d3a:	bf00      	nop
 8014d3c:	20000dc8 	.word	0x20000dc8

08014d40 <_malloc_r>:
 8014d40:	b570      	push	{r4, r5, r6, lr}
 8014d42:	1ccd      	adds	r5, r1, #3
 8014d44:	f025 0503 	bic.w	r5, r5, #3
 8014d48:	3508      	adds	r5, #8
 8014d4a:	2d0c      	cmp	r5, #12
 8014d4c:	bf38      	it	cc
 8014d4e:	250c      	movcc	r5, #12
 8014d50:	2d00      	cmp	r5, #0
 8014d52:	4606      	mov	r6, r0
 8014d54:	db01      	blt.n	8014d5a <_malloc_r+0x1a>
 8014d56:	42a9      	cmp	r1, r5
 8014d58:	d903      	bls.n	8014d62 <_malloc_r+0x22>
 8014d5a:	230c      	movs	r3, #12
 8014d5c:	6033      	str	r3, [r6, #0]
 8014d5e:	2000      	movs	r0, #0
 8014d60:	bd70      	pop	{r4, r5, r6, pc}
 8014d62:	f002 f877 	bl	8016e54 <__malloc_lock>
 8014d66:	4a21      	ldr	r2, [pc, #132]	; (8014dec <_malloc_r+0xac>)
 8014d68:	6814      	ldr	r4, [r2, #0]
 8014d6a:	4621      	mov	r1, r4
 8014d6c:	b991      	cbnz	r1, 8014d94 <_malloc_r+0x54>
 8014d6e:	4c20      	ldr	r4, [pc, #128]	; (8014df0 <_malloc_r+0xb0>)
 8014d70:	6823      	ldr	r3, [r4, #0]
 8014d72:	b91b      	cbnz	r3, 8014d7c <_malloc_r+0x3c>
 8014d74:	4630      	mov	r0, r6
 8014d76:	f000 fb81 	bl	801547c <_sbrk_r>
 8014d7a:	6020      	str	r0, [r4, #0]
 8014d7c:	4629      	mov	r1, r5
 8014d7e:	4630      	mov	r0, r6
 8014d80:	f000 fb7c 	bl	801547c <_sbrk_r>
 8014d84:	1c43      	adds	r3, r0, #1
 8014d86:	d124      	bne.n	8014dd2 <_malloc_r+0x92>
 8014d88:	230c      	movs	r3, #12
 8014d8a:	6033      	str	r3, [r6, #0]
 8014d8c:	4630      	mov	r0, r6
 8014d8e:	f002 f862 	bl	8016e56 <__malloc_unlock>
 8014d92:	e7e4      	b.n	8014d5e <_malloc_r+0x1e>
 8014d94:	680b      	ldr	r3, [r1, #0]
 8014d96:	1b5b      	subs	r3, r3, r5
 8014d98:	d418      	bmi.n	8014dcc <_malloc_r+0x8c>
 8014d9a:	2b0b      	cmp	r3, #11
 8014d9c:	d90f      	bls.n	8014dbe <_malloc_r+0x7e>
 8014d9e:	600b      	str	r3, [r1, #0]
 8014da0:	50cd      	str	r5, [r1, r3]
 8014da2:	18cc      	adds	r4, r1, r3
 8014da4:	4630      	mov	r0, r6
 8014da6:	f002 f856 	bl	8016e56 <__malloc_unlock>
 8014daa:	f104 000b 	add.w	r0, r4, #11
 8014dae:	1d23      	adds	r3, r4, #4
 8014db0:	f020 0007 	bic.w	r0, r0, #7
 8014db4:	1ac3      	subs	r3, r0, r3
 8014db6:	d0d3      	beq.n	8014d60 <_malloc_r+0x20>
 8014db8:	425a      	negs	r2, r3
 8014dba:	50e2      	str	r2, [r4, r3]
 8014dbc:	e7d0      	b.n	8014d60 <_malloc_r+0x20>
 8014dbe:	428c      	cmp	r4, r1
 8014dc0:	684b      	ldr	r3, [r1, #4]
 8014dc2:	bf16      	itet	ne
 8014dc4:	6063      	strne	r3, [r4, #4]
 8014dc6:	6013      	streq	r3, [r2, #0]
 8014dc8:	460c      	movne	r4, r1
 8014dca:	e7eb      	b.n	8014da4 <_malloc_r+0x64>
 8014dcc:	460c      	mov	r4, r1
 8014dce:	6849      	ldr	r1, [r1, #4]
 8014dd0:	e7cc      	b.n	8014d6c <_malloc_r+0x2c>
 8014dd2:	1cc4      	adds	r4, r0, #3
 8014dd4:	f024 0403 	bic.w	r4, r4, #3
 8014dd8:	42a0      	cmp	r0, r4
 8014dda:	d005      	beq.n	8014de8 <_malloc_r+0xa8>
 8014ddc:	1a21      	subs	r1, r4, r0
 8014dde:	4630      	mov	r0, r6
 8014de0:	f000 fb4c 	bl	801547c <_sbrk_r>
 8014de4:	3001      	adds	r0, #1
 8014de6:	d0cf      	beq.n	8014d88 <_malloc_r+0x48>
 8014de8:	6025      	str	r5, [r4, #0]
 8014dea:	e7db      	b.n	8014da4 <_malloc_r+0x64>
 8014dec:	20000dc8 	.word	0x20000dc8
 8014df0:	20000dcc 	.word	0x20000dcc

08014df4 <__sfputc_r>:
 8014df4:	6893      	ldr	r3, [r2, #8]
 8014df6:	3b01      	subs	r3, #1
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	b410      	push	{r4}
 8014dfc:	6093      	str	r3, [r2, #8]
 8014dfe:	da08      	bge.n	8014e12 <__sfputc_r+0x1e>
 8014e00:	6994      	ldr	r4, [r2, #24]
 8014e02:	42a3      	cmp	r3, r4
 8014e04:	db01      	blt.n	8014e0a <__sfputc_r+0x16>
 8014e06:	290a      	cmp	r1, #10
 8014e08:	d103      	bne.n	8014e12 <__sfputc_r+0x1e>
 8014e0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e0e:	f001 b9df 	b.w	80161d0 <__swbuf_r>
 8014e12:	6813      	ldr	r3, [r2, #0]
 8014e14:	1c58      	adds	r0, r3, #1
 8014e16:	6010      	str	r0, [r2, #0]
 8014e18:	7019      	strb	r1, [r3, #0]
 8014e1a:	4608      	mov	r0, r1
 8014e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014e20:	4770      	bx	lr

08014e22 <__sfputs_r>:
 8014e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e24:	4606      	mov	r6, r0
 8014e26:	460f      	mov	r7, r1
 8014e28:	4614      	mov	r4, r2
 8014e2a:	18d5      	adds	r5, r2, r3
 8014e2c:	42ac      	cmp	r4, r5
 8014e2e:	d101      	bne.n	8014e34 <__sfputs_r+0x12>
 8014e30:	2000      	movs	r0, #0
 8014e32:	e007      	b.n	8014e44 <__sfputs_r+0x22>
 8014e34:	463a      	mov	r2, r7
 8014e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e3a:	4630      	mov	r0, r6
 8014e3c:	f7ff ffda 	bl	8014df4 <__sfputc_r>
 8014e40:	1c43      	adds	r3, r0, #1
 8014e42:	d1f3      	bne.n	8014e2c <__sfputs_r+0xa>
 8014e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014e48 <_vfiprintf_r>:
 8014e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e4c:	460c      	mov	r4, r1
 8014e4e:	b09d      	sub	sp, #116	; 0x74
 8014e50:	4617      	mov	r7, r2
 8014e52:	461d      	mov	r5, r3
 8014e54:	4606      	mov	r6, r0
 8014e56:	b118      	cbz	r0, 8014e60 <_vfiprintf_r+0x18>
 8014e58:	6983      	ldr	r3, [r0, #24]
 8014e5a:	b90b      	cbnz	r3, 8014e60 <_vfiprintf_r+0x18>
 8014e5c:	f001 fbd2 	bl	8016604 <__sinit>
 8014e60:	4b7c      	ldr	r3, [pc, #496]	; (8015054 <_vfiprintf_r+0x20c>)
 8014e62:	429c      	cmp	r4, r3
 8014e64:	d158      	bne.n	8014f18 <_vfiprintf_r+0xd0>
 8014e66:	6874      	ldr	r4, [r6, #4]
 8014e68:	89a3      	ldrh	r3, [r4, #12]
 8014e6a:	0718      	lsls	r0, r3, #28
 8014e6c:	d55e      	bpl.n	8014f2c <_vfiprintf_r+0xe4>
 8014e6e:	6923      	ldr	r3, [r4, #16]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d05b      	beq.n	8014f2c <_vfiprintf_r+0xe4>
 8014e74:	2300      	movs	r3, #0
 8014e76:	9309      	str	r3, [sp, #36]	; 0x24
 8014e78:	2320      	movs	r3, #32
 8014e7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e7e:	2330      	movs	r3, #48	; 0x30
 8014e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e84:	9503      	str	r5, [sp, #12]
 8014e86:	f04f 0b01 	mov.w	fp, #1
 8014e8a:	46b8      	mov	r8, r7
 8014e8c:	4645      	mov	r5, r8
 8014e8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014e92:	b10b      	cbz	r3, 8014e98 <_vfiprintf_r+0x50>
 8014e94:	2b25      	cmp	r3, #37	; 0x25
 8014e96:	d154      	bne.n	8014f42 <_vfiprintf_r+0xfa>
 8014e98:	ebb8 0a07 	subs.w	sl, r8, r7
 8014e9c:	d00b      	beq.n	8014eb6 <_vfiprintf_r+0x6e>
 8014e9e:	4653      	mov	r3, sl
 8014ea0:	463a      	mov	r2, r7
 8014ea2:	4621      	mov	r1, r4
 8014ea4:	4630      	mov	r0, r6
 8014ea6:	f7ff ffbc 	bl	8014e22 <__sfputs_r>
 8014eaa:	3001      	adds	r0, #1
 8014eac:	f000 80c2 	beq.w	8015034 <_vfiprintf_r+0x1ec>
 8014eb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014eb2:	4453      	add	r3, sl
 8014eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8014eb6:	f898 3000 	ldrb.w	r3, [r8]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	f000 80ba 	beq.w	8015034 <_vfiprintf_r+0x1ec>
 8014ec0:	2300      	movs	r3, #0
 8014ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8014ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014eca:	9304      	str	r3, [sp, #16]
 8014ecc:	9307      	str	r3, [sp, #28]
 8014ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8014ed4:	46a8      	mov	r8, r5
 8014ed6:	2205      	movs	r2, #5
 8014ed8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014edc:	485e      	ldr	r0, [pc, #376]	; (8015058 <_vfiprintf_r+0x210>)
 8014ede:	f7eb f997 	bl	8000210 <memchr>
 8014ee2:	9b04      	ldr	r3, [sp, #16]
 8014ee4:	bb78      	cbnz	r0, 8014f46 <_vfiprintf_r+0xfe>
 8014ee6:	06d9      	lsls	r1, r3, #27
 8014ee8:	bf44      	itt	mi
 8014eea:	2220      	movmi	r2, #32
 8014eec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014ef0:	071a      	lsls	r2, r3, #28
 8014ef2:	bf44      	itt	mi
 8014ef4:	222b      	movmi	r2, #43	; 0x2b
 8014ef6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014efa:	782a      	ldrb	r2, [r5, #0]
 8014efc:	2a2a      	cmp	r2, #42	; 0x2a
 8014efe:	d02a      	beq.n	8014f56 <_vfiprintf_r+0x10e>
 8014f00:	9a07      	ldr	r2, [sp, #28]
 8014f02:	46a8      	mov	r8, r5
 8014f04:	2000      	movs	r0, #0
 8014f06:	250a      	movs	r5, #10
 8014f08:	4641      	mov	r1, r8
 8014f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f0e:	3b30      	subs	r3, #48	; 0x30
 8014f10:	2b09      	cmp	r3, #9
 8014f12:	d969      	bls.n	8014fe8 <_vfiprintf_r+0x1a0>
 8014f14:	b360      	cbz	r0, 8014f70 <_vfiprintf_r+0x128>
 8014f16:	e024      	b.n	8014f62 <_vfiprintf_r+0x11a>
 8014f18:	4b50      	ldr	r3, [pc, #320]	; (801505c <_vfiprintf_r+0x214>)
 8014f1a:	429c      	cmp	r4, r3
 8014f1c:	d101      	bne.n	8014f22 <_vfiprintf_r+0xda>
 8014f1e:	68b4      	ldr	r4, [r6, #8]
 8014f20:	e7a2      	b.n	8014e68 <_vfiprintf_r+0x20>
 8014f22:	4b4f      	ldr	r3, [pc, #316]	; (8015060 <_vfiprintf_r+0x218>)
 8014f24:	429c      	cmp	r4, r3
 8014f26:	bf08      	it	eq
 8014f28:	68f4      	ldreq	r4, [r6, #12]
 8014f2a:	e79d      	b.n	8014e68 <_vfiprintf_r+0x20>
 8014f2c:	4621      	mov	r1, r4
 8014f2e:	4630      	mov	r0, r6
 8014f30:	f001 f9a0 	bl	8016274 <__swsetup_r>
 8014f34:	2800      	cmp	r0, #0
 8014f36:	d09d      	beq.n	8014e74 <_vfiprintf_r+0x2c>
 8014f38:	f04f 30ff 	mov.w	r0, #4294967295
 8014f3c:	b01d      	add	sp, #116	; 0x74
 8014f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f42:	46a8      	mov	r8, r5
 8014f44:	e7a2      	b.n	8014e8c <_vfiprintf_r+0x44>
 8014f46:	4a44      	ldr	r2, [pc, #272]	; (8015058 <_vfiprintf_r+0x210>)
 8014f48:	1a80      	subs	r0, r0, r2
 8014f4a:	fa0b f000 	lsl.w	r0, fp, r0
 8014f4e:	4318      	orrs	r0, r3
 8014f50:	9004      	str	r0, [sp, #16]
 8014f52:	4645      	mov	r5, r8
 8014f54:	e7be      	b.n	8014ed4 <_vfiprintf_r+0x8c>
 8014f56:	9a03      	ldr	r2, [sp, #12]
 8014f58:	1d11      	adds	r1, r2, #4
 8014f5a:	6812      	ldr	r2, [r2, #0]
 8014f5c:	9103      	str	r1, [sp, #12]
 8014f5e:	2a00      	cmp	r2, #0
 8014f60:	db01      	blt.n	8014f66 <_vfiprintf_r+0x11e>
 8014f62:	9207      	str	r2, [sp, #28]
 8014f64:	e004      	b.n	8014f70 <_vfiprintf_r+0x128>
 8014f66:	4252      	negs	r2, r2
 8014f68:	f043 0302 	orr.w	r3, r3, #2
 8014f6c:	9207      	str	r2, [sp, #28]
 8014f6e:	9304      	str	r3, [sp, #16]
 8014f70:	f898 3000 	ldrb.w	r3, [r8]
 8014f74:	2b2e      	cmp	r3, #46	; 0x2e
 8014f76:	d10e      	bne.n	8014f96 <_vfiprintf_r+0x14e>
 8014f78:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8014f7e:	d138      	bne.n	8014ff2 <_vfiprintf_r+0x1aa>
 8014f80:	9b03      	ldr	r3, [sp, #12]
 8014f82:	1d1a      	adds	r2, r3, #4
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	9203      	str	r2, [sp, #12]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	bfb8      	it	lt
 8014f8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f90:	f108 0802 	add.w	r8, r8, #2
 8014f94:	9305      	str	r3, [sp, #20]
 8014f96:	4d33      	ldr	r5, [pc, #204]	; (8015064 <_vfiprintf_r+0x21c>)
 8014f98:	f898 1000 	ldrb.w	r1, [r8]
 8014f9c:	2203      	movs	r2, #3
 8014f9e:	4628      	mov	r0, r5
 8014fa0:	f7eb f936 	bl	8000210 <memchr>
 8014fa4:	b140      	cbz	r0, 8014fb8 <_vfiprintf_r+0x170>
 8014fa6:	2340      	movs	r3, #64	; 0x40
 8014fa8:	1b40      	subs	r0, r0, r5
 8014faa:	fa03 f000 	lsl.w	r0, r3, r0
 8014fae:	9b04      	ldr	r3, [sp, #16]
 8014fb0:	4303      	orrs	r3, r0
 8014fb2:	f108 0801 	add.w	r8, r8, #1
 8014fb6:	9304      	str	r3, [sp, #16]
 8014fb8:	f898 1000 	ldrb.w	r1, [r8]
 8014fbc:	482a      	ldr	r0, [pc, #168]	; (8015068 <_vfiprintf_r+0x220>)
 8014fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014fc2:	2206      	movs	r2, #6
 8014fc4:	f108 0701 	add.w	r7, r8, #1
 8014fc8:	f7eb f922 	bl	8000210 <memchr>
 8014fcc:	2800      	cmp	r0, #0
 8014fce:	d037      	beq.n	8015040 <_vfiprintf_r+0x1f8>
 8014fd0:	4b26      	ldr	r3, [pc, #152]	; (801506c <_vfiprintf_r+0x224>)
 8014fd2:	bb1b      	cbnz	r3, 801501c <_vfiprintf_r+0x1d4>
 8014fd4:	9b03      	ldr	r3, [sp, #12]
 8014fd6:	3307      	adds	r3, #7
 8014fd8:	f023 0307 	bic.w	r3, r3, #7
 8014fdc:	3308      	adds	r3, #8
 8014fde:	9303      	str	r3, [sp, #12]
 8014fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fe2:	444b      	add	r3, r9
 8014fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8014fe6:	e750      	b.n	8014e8a <_vfiprintf_r+0x42>
 8014fe8:	fb05 3202 	mla	r2, r5, r2, r3
 8014fec:	2001      	movs	r0, #1
 8014fee:	4688      	mov	r8, r1
 8014ff0:	e78a      	b.n	8014f08 <_vfiprintf_r+0xc0>
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	f108 0801 	add.w	r8, r8, #1
 8014ff8:	9305      	str	r3, [sp, #20]
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	250a      	movs	r5, #10
 8014ffe:	4640      	mov	r0, r8
 8015000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015004:	3a30      	subs	r2, #48	; 0x30
 8015006:	2a09      	cmp	r2, #9
 8015008:	d903      	bls.n	8015012 <_vfiprintf_r+0x1ca>
 801500a:	2b00      	cmp	r3, #0
 801500c:	d0c3      	beq.n	8014f96 <_vfiprintf_r+0x14e>
 801500e:	9105      	str	r1, [sp, #20]
 8015010:	e7c1      	b.n	8014f96 <_vfiprintf_r+0x14e>
 8015012:	fb05 2101 	mla	r1, r5, r1, r2
 8015016:	2301      	movs	r3, #1
 8015018:	4680      	mov	r8, r0
 801501a:	e7f0      	b.n	8014ffe <_vfiprintf_r+0x1b6>
 801501c:	ab03      	add	r3, sp, #12
 801501e:	9300      	str	r3, [sp, #0]
 8015020:	4622      	mov	r2, r4
 8015022:	4b13      	ldr	r3, [pc, #76]	; (8015070 <_vfiprintf_r+0x228>)
 8015024:	a904      	add	r1, sp, #16
 8015026:	4630      	mov	r0, r6
 8015028:	f3af 8000 	nop.w
 801502c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8015030:	4681      	mov	r9, r0
 8015032:	d1d5      	bne.n	8014fe0 <_vfiprintf_r+0x198>
 8015034:	89a3      	ldrh	r3, [r4, #12]
 8015036:	065b      	lsls	r3, r3, #25
 8015038:	f53f af7e 	bmi.w	8014f38 <_vfiprintf_r+0xf0>
 801503c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801503e:	e77d      	b.n	8014f3c <_vfiprintf_r+0xf4>
 8015040:	ab03      	add	r3, sp, #12
 8015042:	9300      	str	r3, [sp, #0]
 8015044:	4622      	mov	r2, r4
 8015046:	4b0a      	ldr	r3, [pc, #40]	; (8015070 <_vfiprintf_r+0x228>)
 8015048:	a904      	add	r1, sp, #16
 801504a:	4630      	mov	r0, r6
 801504c:	f000 f888 	bl	8015160 <_printf_i>
 8015050:	e7ec      	b.n	801502c <_vfiprintf_r+0x1e4>
 8015052:	bf00      	nop
 8015054:	08036b58 	.word	0x08036b58
 8015058:	08036aa8 	.word	0x08036aa8
 801505c:	08036b78 	.word	0x08036b78
 8015060:	08036b38 	.word	0x08036b38
 8015064:	08036aae 	.word	0x08036aae
 8015068:	08036ab2 	.word	0x08036ab2
 801506c:	00000000 	.word	0x00000000
 8015070:	08014e23 	.word	0x08014e23

08015074 <_printf_common>:
 8015074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015078:	4691      	mov	r9, r2
 801507a:	461f      	mov	r7, r3
 801507c:	688a      	ldr	r2, [r1, #8]
 801507e:	690b      	ldr	r3, [r1, #16]
 8015080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015084:	4293      	cmp	r3, r2
 8015086:	bfb8      	it	lt
 8015088:	4613      	movlt	r3, r2
 801508a:	f8c9 3000 	str.w	r3, [r9]
 801508e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015092:	4606      	mov	r6, r0
 8015094:	460c      	mov	r4, r1
 8015096:	b112      	cbz	r2, 801509e <_printf_common+0x2a>
 8015098:	3301      	adds	r3, #1
 801509a:	f8c9 3000 	str.w	r3, [r9]
 801509e:	6823      	ldr	r3, [r4, #0]
 80150a0:	0699      	lsls	r1, r3, #26
 80150a2:	bf42      	ittt	mi
 80150a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80150a8:	3302      	addmi	r3, #2
 80150aa:	f8c9 3000 	strmi.w	r3, [r9]
 80150ae:	6825      	ldr	r5, [r4, #0]
 80150b0:	f015 0506 	ands.w	r5, r5, #6
 80150b4:	d107      	bne.n	80150c6 <_printf_common+0x52>
 80150b6:	f104 0a19 	add.w	sl, r4, #25
 80150ba:	68e3      	ldr	r3, [r4, #12]
 80150bc:	f8d9 2000 	ldr.w	r2, [r9]
 80150c0:	1a9b      	subs	r3, r3, r2
 80150c2:	42ab      	cmp	r3, r5
 80150c4:	dc28      	bgt.n	8015118 <_printf_common+0xa4>
 80150c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80150ca:	6822      	ldr	r2, [r4, #0]
 80150cc:	3300      	adds	r3, #0
 80150ce:	bf18      	it	ne
 80150d0:	2301      	movne	r3, #1
 80150d2:	0692      	lsls	r2, r2, #26
 80150d4:	d42d      	bmi.n	8015132 <_printf_common+0xbe>
 80150d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80150da:	4639      	mov	r1, r7
 80150dc:	4630      	mov	r0, r6
 80150de:	47c0      	blx	r8
 80150e0:	3001      	adds	r0, #1
 80150e2:	d020      	beq.n	8015126 <_printf_common+0xb2>
 80150e4:	6823      	ldr	r3, [r4, #0]
 80150e6:	68e5      	ldr	r5, [r4, #12]
 80150e8:	f8d9 2000 	ldr.w	r2, [r9]
 80150ec:	f003 0306 	and.w	r3, r3, #6
 80150f0:	2b04      	cmp	r3, #4
 80150f2:	bf08      	it	eq
 80150f4:	1aad      	subeq	r5, r5, r2
 80150f6:	68a3      	ldr	r3, [r4, #8]
 80150f8:	6922      	ldr	r2, [r4, #16]
 80150fa:	bf0c      	ite	eq
 80150fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015100:	2500      	movne	r5, #0
 8015102:	4293      	cmp	r3, r2
 8015104:	bfc4      	itt	gt
 8015106:	1a9b      	subgt	r3, r3, r2
 8015108:	18ed      	addgt	r5, r5, r3
 801510a:	f04f 0900 	mov.w	r9, #0
 801510e:	341a      	adds	r4, #26
 8015110:	454d      	cmp	r5, r9
 8015112:	d11a      	bne.n	801514a <_printf_common+0xd6>
 8015114:	2000      	movs	r0, #0
 8015116:	e008      	b.n	801512a <_printf_common+0xb6>
 8015118:	2301      	movs	r3, #1
 801511a:	4652      	mov	r2, sl
 801511c:	4639      	mov	r1, r7
 801511e:	4630      	mov	r0, r6
 8015120:	47c0      	blx	r8
 8015122:	3001      	adds	r0, #1
 8015124:	d103      	bne.n	801512e <_printf_common+0xba>
 8015126:	f04f 30ff 	mov.w	r0, #4294967295
 801512a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801512e:	3501      	adds	r5, #1
 8015130:	e7c3      	b.n	80150ba <_printf_common+0x46>
 8015132:	18e1      	adds	r1, r4, r3
 8015134:	1c5a      	adds	r2, r3, #1
 8015136:	2030      	movs	r0, #48	; 0x30
 8015138:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801513c:	4422      	add	r2, r4
 801513e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015142:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015146:	3302      	adds	r3, #2
 8015148:	e7c5      	b.n	80150d6 <_printf_common+0x62>
 801514a:	2301      	movs	r3, #1
 801514c:	4622      	mov	r2, r4
 801514e:	4639      	mov	r1, r7
 8015150:	4630      	mov	r0, r6
 8015152:	47c0      	blx	r8
 8015154:	3001      	adds	r0, #1
 8015156:	d0e6      	beq.n	8015126 <_printf_common+0xb2>
 8015158:	f109 0901 	add.w	r9, r9, #1
 801515c:	e7d8      	b.n	8015110 <_printf_common+0x9c>
	...

08015160 <_printf_i>:
 8015160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015164:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015168:	460c      	mov	r4, r1
 801516a:	7e09      	ldrb	r1, [r1, #24]
 801516c:	b085      	sub	sp, #20
 801516e:	296e      	cmp	r1, #110	; 0x6e
 8015170:	4617      	mov	r7, r2
 8015172:	4606      	mov	r6, r0
 8015174:	4698      	mov	r8, r3
 8015176:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015178:	f000 80b3 	beq.w	80152e2 <_printf_i+0x182>
 801517c:	d822      	bhi.n	80151c4 <_printf_i+0x64>
 801517e:	2963      	cmp	r1, #99	; 0x63
 8015180:	d036      	beq.n	80151f0 <_printf_i+0x90>
 8015182:	d80a      	bhi.n	801519a <_printf_i+0x3a>
 8015184:	2900      	cmp	r1, #0
 8015186:	f000 80b9 	beq.w	80152fc <_printf_i+0x19c>
 801518a:	2958      	cmp	r1, #88	; 0x58
 801518c:	f000 8083 	beq.w	8015296 <_printf_i+0x136>
 8015190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015194:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015198:	e032      	b.n	8015200 <_printf_i+0xa0>
 801519a:	2964      	cmp	r1, #100	; 0x64
 801519c:	d001      	beq.n	80151a2 <_printf_i+0x42>
 801519e:	2969      	cmp	r1, #105	; 0x69
 80151a0:	d1f6      	bne.n	8015190 <_printf_i+0x30>
 80151a2:	6820      	ldr	r0, [r4, #0]
 80151a4:	6813      	ldr	r3, [r2, #0]
 80151a6:	0605      	lsls	r5, r0, #24
 80151a8:	f103 0104 	add.w	r1, r3, #4
 80151ac:	d52a      	bpl.n	8015204 <_printf_i+0xa4>
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	6011      	str	r1, [r2, #0]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	da03      	bge.n	80151be <_printf_i+0x5e>
 80151b6:	222d      	movs	r2, #45	; 0x2d
 80151b8:	425b      	negs	r3, r3
 80151ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80151be:	486f      	ldr	r0, [pc, #444]	; (801537c <_printf_i+0x21c>)
 80151c0:	220a      	movs	r2, #10
 80151c2:	e039      	b.n	8015238 <_printf_i+0xd8>
 80151c4:	2973      	cmp	r1, #115	; 0x73
 80151c6:	f000 809d 	beq.w	8015304 <_printf_i+0x1a4>
 80151ca:	d808      	bhi.n	80151de <_printf_i+0x7e>
 80151cc:	296f      	cmp	r1, #111	; 0x6f
 80151ce:	d020      	beq.n	8015212 <_printf_i+0xb2>
 80151d0:	2970      	cmp	r1, #112	; 0x70
 80151d2:	d1dd      	bne.n	8015190 <_printf_i+0x30>
 80151d4:	6823      	ldr	r3, [r4, #0]
 80151d6:	f043 0320 	orr.w	r3, r3, #32
 80151da:	6023      	str	r3, [r4, #0]
 80151dc:	e003      	b.n	80151e6 <_printf_i+0x86>
 80151de:	2975      	cmp	r1, #117	; 0x75
 80151e0:	d017      	beq.n	8015212 <_printf_i+0xb2>
 80151e2:	2978      	cmp	r1, #120	; 0x78
 80151e4:	d1d4      	bne.n	8015190 <_printf_i+0x30>
 80151e6:	2378      	movs	r3, #120	; 0x78
 80151e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80151ec:	4864      	ldr	r0, [pc, #400]	; (8015380 <_printf_i+0x220>)
 80151ee:	e055      	b.n	801529c <_printf_i+0x13c>
 80151f0:	6813      	ldr	r3, [r2, #0]
 80151f2:	1d19      	adds	r1, r3, #4
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	6011      	str	r1, [r2, #0]
 80151f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80151fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015200:	2301      	movs	r3, #1
 8015202:	e08c      	b.n	801531e <_printf_i+0x1be>
 8015204:	681b      	ldr	r3, [r3, #0]
 8015206:	6011      	str	r1, [r2, #0]
 8015208:	f010 0f40 	tst.w	r0, #64	; 0x40
 801520c:	bf18      	it	ne
 801520e:	b21b      	sxthne	r3, r3
 8015210:	e7cf      	b.n	80151b2 <_printf_i+0x52>
 8015212:	6813      	ldr	r3, [r2, #0]
 8015214:	6825      	ldr	r5, [r4, #0]
 8015216:	1d18      	adds	r0, r3, #4
 8015218:	6010      	str	r0, [r2, #0]
 801521a:	0628      	lsls	r0, r5, #24
 801521c:	d501      	bpl.n	8015222 <_printf_i+0xc2>
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	e002      	b.n	8015228 <_printf_i+0xc8>
 8015222:	0668      	lsls	r0, r5, #25
 8015224:	d5fb      	bpl.n	801521e <_printf_i+0xbe>
 8015226:	881b      	ldrh	r3, [r3, #0]
 8015228:	4854      	ldr	r0, [pc, #336]	; (801537c <_printf_i+0x21c>)
 801522a:	296f      	cmp	r1, #111	; 0x6f
 801522c:	bf14      	ite	ne
 801522e:	220a      	movne	r2, #10
 8015230:	2208      	moveq	r2, #8
 8015232:	2100      	movs	r1, #0
 8015234:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015238:	6865      	ldr	r5, [r4, #4]
 801523a:	60a5      	str	r5, [r4, #8]
 801523c:	2d00      	cmp	r5, #0
 801523e:	f2c0 8095 	blt.w	801536c <_printf_i+0x20c>
 8015242:	6821      	ldr	r1, [r4, #0]
 8015244:	f021 0104 	bic.w	r1, r1, #4
 8015248:	6021      	str	r1, [r4, #0]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d13d      	bne.n	80152ca <_printf_i+0x16a>
 801524e:	2d00      	cmp	r5, #0
 8015250:	f040 808e 	bne.w	8015370 <_printf_i+0x210>
 8015254:	4665      	mov	r5, ip
 8015256:	2a08      	cmp	r2, #8
 8015258:	d10b      	bne.n	8015272 <_printf_i+0x112>
 801525a:	6823      	ldr	r3, [r4, #0]
 801525c:	07db      	lsls	r3, r3, #31
 801525e:	d508      	bpl.n	8015272 <_printf_i+0x112>
 8015260:	6923      	ldr	r3, [r4, #16]
 8015262:	6862      	ldr	r2, [r4, #4]
 8015264:	429a      	cmp	r2, r3
 8015266:	bfde      	ittt	le
 8015268:	2330      	movle	r3, #48	; 0x30
 801526a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801526e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015272:	ebac 0305 	sub.w	r3, ip, r5
 8015276:	6123      	str	r3, [r4, #16]
 8015278:	f8cd 8000 	str.w	r8, [sp]
 801527c:	463b      	mov	r3, r7
 801527e:	aa03      	add	r2, sp, #12
 8015280:	4621      	mov	r1, r4
 8015282:	4630      	mov	r0, r6
 8015284:	f7ff fef6 	bl	8015074 <_printf_common>
 8015288:	3001      	adds	r0, #1
 801528a:	d14d      	bne.n	8015328 <_printf_i+0x1c8>
 801528c:	f04f 30ff 	mov.w	r0, #4294967295
 8015290:	b005      	add	sp, #20
 8015292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015296:	4839      	ldr	r0, [pc, #228]	; (801537c <_printf_i+0x21c>)
 8015298:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801529c:	6813      	ldr	r3, [r2, #0]
 801529e:	6821      	ldr	r1, [r4, #0]
 80152a0:	1d1d      	adds	r5, r3, #4
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	6015      	str	r5, [r2, #0]
 80152a6:	060a      	lsls	r2, r1, #24
 80152a8:	d50b      	bpl.n	80152c2 <_printf_i+0x162>
 80152aa:	07ca      	lsls	r2, r1, #31
 80152ac:	bf44      	itt	mi
 80152ae:	f041 0120 	orrmi.w	r1, r1, #32
 80152b2:	6021      	strmi	r1, [r4, #0]
 80152b4:	b91b      	cbnz	r3, 80152be <_printf_i+0x15e>
 80152b6:	6822      	ldr	r2, [r4, #0]
 80152b8:	f022 0220 	bic.w	r2, r2, #32
 80152bc:	6022      	str	r2, [r4, #0]
 80152be:	2210      	movs	r2, #16
 80152c0:	e7b7      	b.n	8015232 <_printf_i+0xd2>
 80152c2:	064d      	lsls	r5, r1, #25
 80152c4:	bf48      	it	mi
 80152c6:	b29b      	uxthmi	r3, r3
 80152c8:	e7ef      	b.n	80152aa <_printf_i+0x14a>
 80152ca:	4665      	mov	r5, ip
 80152cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80152d0:	fb02 3311 	mls	r3, r2, r1, r3
 80152d4:	5cc3      	ldrb	r3, [r0, r3]
 80152d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80152da:	460b      	mov	r3, r1
 80152dc:	2900      	cmp	r1, #0
 80152de:	d1f5      	bne.n	80152cc <_printf_i+0x16c>
 80152e0:	e7b9      	b.n	8015256 <_printf_i+0xf6>
 80152e2:	6813      	ldr	r3, [r2, #0]
 80152e4:	6825      	ldr	r5, [r4, #0]
 80152e6:	6961      	ldr	r1, [r4, #20]
 80152e8:	1d18      	adds	r0, r3, #4
 80152ea:	6010      	str	r0, [r2, #0]
 80152ec:	0628      	lsls	r0, r5, #24
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	d501      	bpl.n	80152f6 <_printf_i+0x196>
 80152f2:	6019      	str	r1, [r3, #0]
 80152f4:	e002      	b.n	80152fc <_printf_i+0x19c>
 80152f6:	066a      	lsls	r2, r5, #25
 80152f8:	d5fb      	bpl.n	80152f2 <_printf_i+0x192>
 80152fa:	8019      	strh	r1, [r3, #0]
 80152fc:	2300      	movs	r3, #0
 80152fe:	6123      	str	r3, [r4, #16]
 8015300:	4665      	mov	r5, ip
 8015302:	e7b9      	b.n	8015278 <_printf_i+0x118>
 8015304:	6813      	ldr	r3, [r2, #0]
 8015306:	1d19      	adds	r1, r3, #4
 8015308:	6011      	str	r1, [r2, #0]
 801530a:	681d      	ldr	r5, [r3, #0]
 801530c:	6862      	ldr	r2, [r4, #4]
 801530e:	2100      	movs	r1, #0
 8015310:	4628      	mov	r0, r5
 8015312:	f7ea ff7d 	bl	8000210 <memchr>
 8015316:	b108      	cbz	r0, 801531c <_printf_i+0x1bc>
 8015318:	1b40      	subs	r0, r0, r5
 801531a:	6060      	str	r0, [r4, #4]
 801531c:	6863      	ldr	r3, [r4, #4]
 801531e:	6123      	str	r3, [r4, #16]
 8015320:	2300      	movs	r3, #0
 8015322:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015326:	e7a7      	b.n	8015278 <_printf_i+0x118>
 8015328:	6923      	ldr	r3, [r4, #16]
 801532a:	462a      	mov	r2, r5
 801532c:	4639      	mov	r1, r7
 801532e:	4630      	mov	r0, r6
 8015330:	47c0      	blx	r8
 8015332:	3001      	adds	r0, #1
 8015334:	d0aa      	beq.n	801528c <_printf_i+0x12c>
 8015336:	6823      	ldr	r3, [r4, #0]
 8015338:	079b      	lsls	r3, r3, #30
 801533a:	d413      	bmi.n	8015364 <_printf_i+0x204>
 801533c:	68e0      	ldr	r0, [r4, #12]
 801533e:	9b03      	ldr	r3, [sp, #12]
 8015340:	4298      	cmp	r0, r3
 8015342:	bfb8      	it	lt
 8015344:	4618      	movlt	r0, r3
 8015346:	e7a3      	b.n	8015290 <_printf_i+0x130>
 8015348:	2301      	movs	r3, #1
 801534a:	464a      	mov	r2, r9
 801534c:	4639      	mov	r1, r7
 801534e:	4630      	mov	r0, r6
 8015350:	47c0      	blx	r8
 8015352:	3001      	adds	r0, #1
 8015354:	d09a      	beq.n	801528c <_printf_i+0x12c>
 8015356:	3501      	adds	r5, #1
 8015358:	68e3      	ldr	r3, [r4, #12]
 801535a:	9a03      	ldr	r2, [sp, #12]
 801535c:	1a9b      	subs	r3, r3, r2
 801535e:	42ab      	cmp	r3, r5
 8015360:	dcf2      	bgt.n	8015348 <_printf_i+0x1e8>
 8015362:	e7eb      	b.n	801533c <_printf_i+0x1dc>
 8015364:	2500      	movs	r5, #0
 8015366:	f104 0919 	add.w	r9, r4, #25
 801536a:	e7f5      	b.n	8015358 <_printf_i+0x1f8>
 801536c:	2b00      	cmp	r3, #0
 801536e:	d1ac      	bne.n	80152ca <_printf_i+0x16a>
 8015370:	7803      	ldrb	r3, [r0, #0]
 8015372:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015376:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801537a:	e76c      	b.n	8015256 <_printf_i+0xf6>
 801537c:	08036ab9 	.word	0x08036ab9
 8015380:	08036aca 	.word	0x08036aca

08015384 <iprintf>:
 8015384:	b40f      	push	{r0, r1, r2, r3}
 8015386:	4b0a      	ldr	r3, [pc, #40]	; (80153b0 <iprintf+0x2c>)
 8015388:	b513      	push	{r0, r1, r4, lr}
 801538a:	681c      	ldr	r4, [r3, #0]
 801538c:	b124      	cbz	r4, 8015398 <iprintf+0x14>
 801538e:	69a3      	ldr	r3, [r4, #24]
 8015390:	b913      	cbnz	r3, 8015398 <iprintf+0x14>
 8015392:	4620      	mov	r0, r4
 8015394:	f001 f936 	bl	8016604 <__sinit>
 8015398:	ab05      	add	r3, sp, #20
 801539a:	9a04      	ldr	r2, [sp, #16]
 801539c:	68a1      	ldr	r1, [r4, #8]
 801539e:	9301      	str	r3, [sp, #4]
 80153a0:	4620      	mov	r0, r4
 80153a2:	f7ff fd51 	bl	8014e48 <_vfiprintf_r>
 80153a6:	b002      	add	sp, #8
 80153a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153ac:	b004      	add	sp, #16
 80153ae:	4770      	bx	lr
 80153b0:	20000788 	.word	0x20000788

080153b4 <_puts_r>:
 80153b4:	b570      	push	{r4, r5, r6, lr}
 80153b6:	460e      	mov	r6, r1
 80153b8:	4605      	mov	r5, r0
 80153ba:	b118      	cbz	r0, 80153c4 <_puts_r+0x10>
 80153bc:	6983      	ldr	r3, [r0, #24]
 80153be:	b90b      	cbnz	r3, 80153c4 <_puts_r+0x10>
 80153c0:	f001 f920 	bl	8016604 <__sinit>
 80153c4:	69ab      	ldr	r3, [r5, #24]
 80153c6:	68ac      	ldr	r4, [r5, #8]
 80153c8:	b913      	cbnz	r3, 80153d0 <_puts_r+0x1c>
 80153ca:	4628      	mov	r0, r5
 80153cc:	f001 f91a 	bl	8016604 <__sinit>
 80153d0:	4b23      	ldr	r3, [pc, #140]	; (8015460 <_puts_r+0xac>)
 80153d2:	429c      	cmp	r4, r3
 80153d4:	d117      	bne.n	8015406 <_puts_r+0x52>
 80153d6:	686c      	ldr	r4, [r5, #4]
 80153d8:	89a3      	ldrh	r3, [r4, #12]
 80153da:	071b      	lsls	r3, r3, #28
 80153dc:	d51d      	bpl.n	801541a <_puts_r+0x66>
 80153de:	6923      	ldr	r3, [r4, #16]
 80153e0:	b1db      	cbz	r3, 801541a <_puts_r+0x66>
 80153e2:	3e01      	subs	r6, #1
 80153e4:	68a3      	ldr	r3, [r4, #8]
 80153e6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80153ea:	3b01      	subs	r3, #1
 80153ec:	60a3      	str	r3, [r4, #8]
 80153ee:	b9e9      	cbnz	r1, 801542c <_puts_r+0x78>
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	da2e      	bge.n	8015452 <_puts_r+0x9e>
 80153f4:	4622      	mov	r2, r4
 80153f6:	210a      	movs	r1, #10
 80153f8:	4628      	mov	r0, r5
 80153fa:	f000 fee9 	bl	80161d0 <__swbuf_r>
 80153fe:	3001      	adds	r0, #1
 8015400:	d011      	beq.n	8015426 <_puts_r+0x72>
 8015402:	200a      	movs	r0, #10
 8015404:	e011      	b.n	801542a <_puts_r+0x76>
 8015406:	4b17      	ldr	r3, [pc, #92]	; (8015464 <_puts_r+0xb0>)
 8015408:	429c      	cmp	r4, r3
 801540a:	d101      	bne.n	8015410 <_puts_r+0x5c>
 801540c:	68ac      	ldr	r4, [r5, #8]
 801540e:	e7e3      	b.n	80153d8 <_puts_r+0x24>
 8015410:	4b15      	ldr	r3, [pc, #84]	; (8015468 <_puts_r+0xb4>)
 8015412:	429c      	cmp	r4, r3
 8015414:	bf08      	it	eq
 8015416:	68ec      	ldreq	r4, [r5, #12]
 8015418:	e7de      	b.n	80153d8 <_puts_r+0x24>
 801541a:	4621      	mov	r1, r4
 801541c:	4628      	mov	r0, r5
 801541e:	f000 ff29 	bl	8016274 <__swsetup_r>
 8015422:	2800      	cmp	r0, #0
 8015424:	d0dd      	beq.n	80153e2 <_puts_r+0x2e>
 8015426:	f04f 30ff 	mov.w	r0, #4294967295
 801542a:	bd70      	pop	{r4, r5, r6, pc}
 801542c:	2b00      	cmp	r3, #0
 801542e:	da04      	bge.n	801543a <_puts_r+0x86>
 8015430:	69a2      	ldr	r2, [r4, #24]
 8015432:	429a      	cmp	r2, r3
 8015434:	dc06      	bgt.n	8015444 <_puts_r+0x90>
 8015436:	290a      	cmp	r1, #10
 8015438:	d004      	beq.n	8015444 <_puts_r+0x90>
 801543a:	6823      	ldr	r3, [r4, #0]
 801543c:	1c5a      	adds	r2, r3, #1
 801543e:	6022      	str	r2, [r4, #0]
 8015440:	7019      	strb	r1, [r3, #0]
 8015442:	e7cf      	b.n	80153e4 <_puts_r+0x30>
 8015444:	4622      	mov	r2, r4
 8015446:	4628      	mov	r0, r5
 8015448:	f000 fec2 	bl	80161d0 <__swbuf_r>
 801544c:	3001      	adds	r0, #1
 801544e:	d1c9      	bne.n	80153e4 <_puts_r+0x30>
 8015450:	e7e9      	b.n	8015426 <_puts_r+0x72>
 8015452:	6823      	ldr	r3, [r4, #0]
 8015454:	200a      	movs	r0, #10
 8015456:	1c5a      	adds	r2, r3, #1
 8015458:	6022      	str	r2, [r4, #0]
 801545a:	7018      	strb	r0, [r3, #0]
 801545c:	e7e5      	b.n	801542a <_puts_r+0x76>
 801545e:	bf00      	nop
 8015460:	08036b58 	.word	0x08036b58
 8015464:	08036b78 	.word	0x08036b78
 8015468:	08036b38 	.word	0x08036b38

0801546c <puts>:
 801546c:	4b02      	ldr	r3, [pc, #8]	; (8015478 <puts+0xc>)
 801546e:	4601      	mov	r1, r0
 8015470:	6818      	ldr	r0, [r3, #0]
 8015472:	f7ff bf9f 	b.w	80153b4 <_puts_r>
 8015476:	bf00      	nop
 8015478:	20000788 	.word	0x20000788

0801547c <_sbrk_r>:
 801547c:	b538      	push	{r3, r4, r5, lr}
 801547e:	4c06      	ldr	r4, [pc, #24]	; (8015498 <_sbrk_r+0x1c>)
 8015480:	2300      	movs	r3, #0
 8015482:	4605      	mov	r5, r0
 8015484:	4608      	mov	r0, r1
 8015486:	6023      	str	r3, [r4, #0]
 8015488:	f7f1 f93c 	bl	8006704 <_sbrk>
 801548c:	1c43      	adds	r3, r0, #1
 801548e:	d102      	bne.n	8015496 <_sbrk_r+0x1a>
 8015490:	6823      	ldr	r3, [r4, #0]
 8015492:	b103      	cbz	r3, 8015496 <_sbrk_r+0x1a>
 8015494:	602b      	str	r3, [r5, #0]
 8015496:	bd38      	pop	{r3, r4, r5, pc}
 8015498:	20000dd8 	.word	0x20000dd8

0801549c <_raise_r>:
 801549c:	291f      	cmp	r1, #31
 801549e:	b538      	push	{r3, r4, r5, lr}
 80154a0:	4604      	mov	r4, r0
 80154a2:	460d      	mov	r5, r1
 80154a4:	d904      	bls.n	80154b0 <_raise_r+0x14>
 80154a6:	2316      	movs	r3, #22
 80154a8:	6003      	str	r3, [r0, #0]
 80154aa:	f04f 30ff 	mov.w	r0, #4294967295
 80154ae:	bd38      	pop	{r3, r4, r5, pc}
 80154b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80154b2:	b112      	cbz	r2, 80154ba <_raise_r+0x1e>
 80154b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80154b8:	b94b      	cbnz	r3, 80154ce <_raise_r+0x32>
 80154ba:	4620      	mov	r0, r4
 80154bc:	f000 f830 	bl	8015520 <_getpid_r>
 80154c0:	462a      	mov	r2, r5
 80154c2:	4601      	mov	r1, r0
 80154c4:	4620      	mov	r0, r4
 80154c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154ca:	f000 b817 	b.w	80154fc <_kill_r>
 80154ce:	2b01      	cmp	r3, #1
 80154d0:	d00a      	beq.n	80154e8 <_raise_r+0x4c>
 80154d2:	1c59      	adds	r1, r3, #1
 80154d4:	d103      	bne.n	80154de <_raise_r+0x42>
 80154d6:	2316      	movs	r3, #22
 80154d8:	6003      	str	r3, [r0, #0]
 80154da:	2001      	movs	r0, #1
 80154dc:	e7e7      	b.n	80154ae <_raise_r+0x12>
 80154de:	2400      	movs	r4, #0
 80154e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80154e4:	4628      	mov	r0, r5
 80154e6:	4798      	blx	r3
 80154e8:	2000      	movs	r0, #0
 80154ea:	e7e0      	b.n	80154ae <_raise_r+0x12>

080154ec <raise>:
 80154ec:	4b02      	ldr	r3, [pc, #8]	; (80154f8 <raise+0xc>)
 80154ee:	4601      	mov	r1, r0
 80154f0:	6818      	ldr	r0, [r3, #0]
 80154f2:	f7ff bfd3 	b.w	801549c <_raise_r>
 80154f6:	bf00      	nop
 80154f8:	20000788 	.word	0x20000788

080154fc <_kill_r>:
 80154fc:	b538      	push	{r3, r4, r5, lr}
 80154fe:	4c07      	ldr	r4, [pc, #28]	; (801551c <_kill_r+0x20>)
 8015500:	2300      	movs	r3, #0
 8015502:	4605      	mov	r5, r0
 8015504:	4608      	mov	r0, r1
 8015506:	4611      	mov	r1, r2
 8015508:	6023      	str	r3, [r4, #0]
 801550a:	f7f1 f873 	bl	80065f4 <_kill>
 801550e:	1c43      	adds	r3, r0, #1
 8015510:	d102      	bne.n	8015518 <_kill_r+0x1c>
 8015512:	6823      	ldr	r3, [r4, #0]
 8015514:	b103      	cbz	r3, 8015518 <_kill_r+0x1c>
 8015516:	602b      	str	r3, [r5, #0]
 8015518:	bd38      	pop	{r3, r4, r5, pc}
 801551a:	bf00      	nop
 801551c:	20000dd8 	.word	0x20000dd8

08015520 <_getpid_r>:
 8015520:	f7f1 b860 	b.w	80065e4 <_getpid>

08015524 <strncmp>:
 8015524:	b510      	push	{r4, lr}
 8015526:	b16a      	cbz	r2, 8015544 <strncmp+0x20>
 8015528:	3901      	subs	r1, #1
 801552a:	1884      	adds	r4, r0, r2
 801552c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015530:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015534:	4293      	cmp	r3, r2
 8015536:	d103      	bne.n	8015540 <strncmp+0x1c>
 8015538:	42a0      	cmp	r0, r4
 801553a:	d001      	beq.n	8015540 <strncmp+0x1c>
 801553c:	2b00      	cmp	r3, #0
 801553e:	d1f5      	bne.n	801552c <strncmp+0x8>
 8015540:	1a98      	subs	r0, r3, r2
 8015542:	bd10      	pop	{r4, pc}
 8015544:	4610      	mov	r0, r2
 8015546:	e7fc      	b.n	8015542 <strncmp+0x1e>

08015548 <sulp>:
 8015548:	b570      	push	{r4, r5, r6, lr}
 801554a:	4604      	mov	r4, r0
 801554c:	460d      	mov	r5, r1
 801554e:	ec45 4b10 	vmov	d0, r4, r5
 8015552:	4616      	mov	r6, r2
 8015554:	f001 ff4c 	bl	80173f0 <__ulp>
 8015558:	ec51 0b10 	vmov	r0, r1, d0
 801555c:	b17e      	cbz	r6, 801557e <sulp+0x36>
 801555e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015562:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015566:	2b00      	cmp	r3, #0
 8015568:	dd09      	ble.n	801557e <sulp+0x36>
 801556a:	051b      	lsls	r3, r3, #20
 801556c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015570:	2400      	movs	r4, #0
 8015572:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015576:	4622      	mov	r2, r4
 8015578:	462b      	mov	r3, r5
 801557a:	f7eb f855 	bl	8000628 <__aeabi_dmul>
 801557e:	bd70      	pop	{r4, r5, r6, pc}

08015580 <_strtod_l>:
 8015580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015584:	461f      	mov	r7, r3
 8015586:	b0a1      	sub	sp, #132	; 0x84
 8015588:	2300      	movs	r3, #0
 801558a:	4681      	mov	r9, r0
 801558c:	4638      	mov	r0, r7
 801558e:	460e      	mov	r6, r1
 8015590:	9217      	str	r2, [sp, #92]	; 0x5c
 8015592:	931c      	str	r3, [sp, #112]	; 0x70
 8015594:	f001 fbe6 	bl	8016d64 <__localeconv_l>
 8015598:	4680      	mov	r8, r0
 801559a:	6800      	ldr	r0, [r0, #0]
 801559c:	f7ea fe2a 	bl	80001f4 <strlen>
 80155a0:	f04f 0a00 	mov.w	sl, #0
 80155a4:	4604      	mov	r4, r0
 80155a6:	f04f 0b00 	mov.w	fp, #0
 80155aa:	961b      	str	r6, [sp, #108]	; 0x6c
 80155ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80155ae:	781a      	ldrb	r2, [r3, #0]
 80155b0:	2a0d      	cmp	r2, #13
 80155b2:	d832      	bhi.n	801561a <_strtod_l+0x9a>
 80155b4:	2a09      	cmp	r2, #9
 80155b6:	d236      	bcs.n	8015626 <_strtod_l+0xa6>
 80155b8:	2a00      	cmp	r2, #0
 80155ba:	d03e      	beq.n	801563a <_strtod_l+0xba>
 80155bc:	2300      	movs	r3, #0
 80155be:	930d      	str	r3, [sp, #52]	; 0x34
 80155c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80155c2:	782b      	ldrb	r3, [r5, #0]
 80155c4:	2b30      	cmp	r3, #48	; 0x30
 80155c6:	f040 80ac 	bne.w	8015722 <_strtod_l+0x1a2>
 80155ca:	786b      	ldrb	r3, [r5, #1]
 80155cc:	2b58      	cmp	r3, #88	; 0x58
 80155ce:	d001      	beq.n	80155d4 <_strtod_l+0x54>
 80155d0:	2b78      	cmp	r3, #120	; 0x78
 80155d2:	d167      	bne.n	80156a4 <_strtod_l+0x124>
 80155d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80155d6:	9301      	str	r3, [sp, #4]
 80155d8:	ab1c      	add	r3, sp, #112	; 0x70
 80155da:	9300      	str	r3, [sp, #0]
 80155dc:	9702      	str	r7, [sp, #8]
 80155de:	ab1d      	add	r3, sp, #116	; 0x74
 80155e0:	4a88      	ldr	r2, [pc, #544]	; (8015804 <_strtod_l+0x284>)
 80155e2:	a91b      	add	r1, sp, #108	; 0x6c
 80155e4:	4648      	mov	r0, r9
 80155e6:	f001 f8e6 	bl	80167b6 <__gethex>
 80155ea:	f010 0407 	ands.w	r4, r0, #7
 80155ee:	4606      	mov	r6, r0
 80155f0:	d005      	beq.n	80155fe <_strtod_l+0x7e>
 80155f2:	2c06      	cmp	r4, #6
 80155f4:	d12b      	bne.n	801564e <_strtod_l+0xce>
 80155f6:	3501      	adds	r5, #1
 80155f8:	2300      	movs	r3, #0
 80155fa:	951b      	str	r5, [sp, #108]	; 0x6c
 80155fc:	930d      	str	r3, [sp, #52]	; 0x34
 80155fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015600:	2b00      	cmp	r3, #0
 8015602:	f040 859a 	bne.w	801613a <_strtod_l+0xbba>
 8015606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015608:	b1e3      	cbz	r3, 8015644 <_strtod_l+0xc4>
 801560a:	4652      	mov	r2, sl
 801560c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015610:	ec43 2b10 	vmov	d0, r2, r3
 8015614:	b021      	add	sp, #132	; 0x84
 8015616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801561a:	2a2b      	cmp	r2, #43	; 0x2b
 801561c:	d015      	beq.n	801564a <_strtod_l+0xca>
 801561e:	2a2d      	cmp	r2, #45	; 0x2d
 8015620:	d004      	beq.n	801562c <_strtod_l+0xac>
 8015622:	2a20      	cmp	r2, #32
 8015624:	d1ca      	bne.n	80155bc <_strtod_l+0x3c>
 8015626:	3301      	adds	r3, #1
 8015628:	931b      	str	r3, [sp, #108]	; 0x6c
 801562a:	e7bf      	b.n	80155ac <_strtod_l+0x2c>
 801562c:	2201      	movs	r2, #1
 801562e:	920d      	str	r2, [sp, #52]	; 0x34
 8015630:	1c5a      	adds	r2, r3, #1
 8015632:	921b      	str	r2, [sp, #108]	; 0x6c
 8015634:	785b      	ldrb	r3, [r3, #1]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d1c2      	bne.n	80155c0 <_strtod_l+0x40>
 801563a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801563c:	961b      	str	r6, [sp, #108]	; 0x6c
 801563e:	2b00      	cmp	r3, #0
 8015640:	f040 8579 	bne.w	8016136 <_strtod_l+0xbb6>
 8015644:	4652      	mov	r2, sl
 8015646:	465b      	mov	r3, fp
 8015648:	e7e2      	b.n	8015610 <_strtod_l+0x90>
 801564a:	2200      	movs	r2, #0
 801564c:	e7ef      	b.n	801562e <_strtod_l+0xae>
 801564e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015650:	b13a      	cbz	r2, 8015662 <_strtod_l+0xe2>
 8015652:	2135      	movs	r1, #53	; 0x35
 8015654:	a81e      	add	r0, sp, #120	; 0x78
 8015656:	f001 ffc3 	bl	80175e0 <__copybits>
 801565a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801565c:	4648      	mov	r0, r9
 801565e:	f001 fc2f 	bl	8016ec0 <_Bfree>
 8015662:	3c01      	subs	r4, #1
 8015664:	2c04      	cmp	r4, #4
 8015666:	d806      	bhi.n	8015676 <_strtod_l+0xf6>
 8015668:	e8df f004 	tbb	[pc, r4]
 801566c:	1714030a 	.word	0x1714030a
 8015670:	0a          	.byte	0x0a
 8015671:	00          	.byte	0x00
 8015672:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015676:	0730      	lsls	r0, r6, #28
 8015678:	d5c1      	bpl.n	80155fe <_strtod_l+0x7e>
 801567a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801567e:	e7be      	b.n	80155fe <_strtod_l+0x7e>
 8015680:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015684:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015686:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801568a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801568e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015692:	e7f0      	b.n	8015676 <_strtod_l+0xf6>
 8015694:	f8df b170 	ldr.w	fp, [pc, #368]	; 8015808 <_strtod_l+0x288>
 8015698:	e7ed      	b.n	8015676 <_strtod_l+0xf6>
 801569a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801569e:	f04f 3aff 	mov.w	sl, #4294967295
 80156a2:	e7e8      	b.n	8015676 <_strtod_l+0xf6>
 80156a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156a6:	1c5a      	adds	r2, r3, #1
 80156a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80156aa:	785b      	ldrb	r3, [r3, #1]
 80156ac:	2b30      	cmp	r3, #48	; 0x30
 80156ae:	d0f9      	beq.n	80156a4 <_strtod_l+0x124>
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d0a4      	beq.n	80155fe <_strtod_l+0x7e>
 80156b4:	2301      	movs	r3, #1
 80156b6:	2500      	movs	r5, #0
 80156b8:	9306      	str	r3, [sp, #24]
 80156ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80156bc:	9308      	str	r3, [sp, #32]
 80156be:	9507      	str	r5, [sp, #28]
 80156c0:	9505      	str	r5, [sp, #20]
 80156c2:	220a      	movs	r2, #10
 80156c4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80156c6:	7807      	ldrb	r7, [r0, #0]
 80156c8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80156cc:	b2d9      	uxtb	r1, r3
 80156ce:	2909      	cmp	r1, #9
 80156d0:	d929      	bls.n	8015726 <_strtod_l+0x1a6>
 80156d2:	4622      	mov	r2, r4
 80156d4:	f8d8 1000 	ldr.w	r1, [r8]
 80156d8:	f7ff ff24 	bl	8015524 <strncmp>
 80156dc:	2800      	cmp	r0, #0
 80156de:	d031      	beq.n	8015744 <_strtod_l+0x1c4>
 80156e0:	2000      	movs	r0, #0
 80156e2:	9c05      	ldr	r4, [sp, #20]
 80156e4:	9004      	str	r0, [sp, #16]
 80156e6:	463b      	mov	r3, r7
 80156e8:	4602      	mov	r2, r0
 80156ea:	2b65      	cmp	r3, #101	; 0x65
 80156ec:	d001      	beq.n	80156f2 <_strtod_l+0x172>
 80156ee:	2b45      	cmp	r3, #69	; 0x45
 80156f0:	d114      	bne.n	801571c <_strtod_l+0x19c>
 80156f2:	b924      	cbnz	r4, 80156fe <_strtod_l+0x17e>
 80156f4:	b910      	cbnz	r0, 80156fc <_strtod_l+0x17c>
 80156f6:	9b06      	ldr	r3, [sp, #24]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d09e      	beq.n	801563a <_strtod_l+0xba>
 80156fc:	2400      	movs	r4, #0
 80156fe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015700:	1c73      	adds	r3, r6, #1
 8015702:	931b      	str	r3, [sp, #108]	; 0x6c
 8015704:	7873      	ldrb	r3, [r6, #1]
 8015706:	2b2b      	cmp	r3, #43	; 0x2b
 8015708:	d078      	beq.n	80157fc <_strtod_l+0x27c>
 801570a:	2b2d      	cmp	r3, #45	; 0x2d
 801570c:	d070      	beq.n	80157f0 <_strtod_l+0x270>
 801570e:	f04f 0c00 	mov.w	ip, #0
 8015712:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015716:	2f09      	cmp	r7, #9
 8015718:	d97c      	bls.n	8015814 <_strtod_l+0x294>
 801571a:	961b      	str	r6, [sp, #108]	; 0x6c
 801571c:	f04f 0e00 	mov.w	lr, #0
 8015720:	e09a      	b.n	8015858 <_strtod_l+0x2d8>
 8015722:	2300      	movs	r3, #0
 8015724:	e7c7      	b.n	80156b6 <_strtod_l+0x136>
 8015726:	9905      	ldr	r1, [sp, #20]
 8015728:	2908      	cmp	r1, #8
 801572a:	bfdd      	ittte	le
 801572c:	9907      	ldrle	r1, [sp, #28]
 801572e:	fb02 3301 	mlale	r3, r2, r1, r3
 8015732:	9307      	strle	r3, [sp, #28]
 8015734:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015738:	9b05      	ldr	r3, [sp, #20]
 801573a:	3001      	adds	r0, #1
 801573c:	3301      	adds	r3, #1
 801573e:	9305      	str	r3, [sp, #20]
 8015740:	901b      	str	r0, [sp, #108]	; 0x6c
 8015742:	e7bf      	b.n	80156c4 <_strtod_l+0x144>
 8015744:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015746:	191a      	adds	r2, r3, r4
 8015748:	921b      	str	r2, [sp, #108]	; 0x6c
 801574a:	9a05      	ldr	r2, [sp, #20]
 801574c:	5d1b      	ldrb	r3, [r3, r4]
 801574e:	2a00      	cmp	r2, #0
 8015750:	d037      	beq.n	80157c2 <_strtod_l+0x242>
 8015752:	9c05      	ldr	r4, [sp, #20]
 8015754:	4602      	mov	r2, r0
 8015756:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801575a:	2909      	cmp	r1, #9
 801575c:	d913      	bls.n	8015786 <_strtod_l+0x206>
 801575e:	2101      	movs	r1, #1
 8015760:	9104      	str	r1, [sp, #16]
 8015762:	e7c2      	b.n	80156ea <_strtod_l+0x16a>
 8015764:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015766:	1c5a      	adds	r2, r3, #1
 8015768:	921b      	str	r2, [sp, #108]	; 0x6c
 801576a:	785b      	ldrb	r3, [r3, #1]
 801576c:	3001      	adds	r0, #1
 801576e:	2b30      	cmp	r3, #48	; 0x30
 8015770:	d0f8      	beq.n	8015764 <_strtod_l+0x1e4>
 8015772:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015776:	2a08      	cmp	r2, #8
 8015778:	f200 84e4 	bhi.w	8016144 <_strtod_l+0xbc4>
 801577c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801577e:	9208      	str	r2, [sp, #32]
 8015780:	4602      	mov	r2, r0
 8015782:	2000      	movs	r0, #0
 8015784:	4604      	mov	r4, r0
 8015786:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801578a:	f100 0101 	add.w	r1, r0, #1
 801578e:	d012      	beq.n	80157b6 <_strtod_l+0x236>
 8015790:	440a      	add	r2, r1
 8015792:	eb00 0c04 	add.w	ip, r0, r4
 8015796:	4621      	mov	r1, r4
 8015798:	270a      	movs	r7, #10
 801579a:	458c      	cmp	ip, r1
 801579c:	d113      	bne.n	80157c6 <_strtod_l+0x246>
 801579e:	1821      	adds	r1, r4, r0
 80157a0:	2908      	cmp	r1, #8
 80157a2:	f104 0401 	add.w	r4, r4, #1
 80157a6:	4404      	add	r4, r0
 80157a8:	dc19      	bgt.n	80157de <_strtod_l+0x25e>
 80157aa:	9b07      	ldr	r3, [sp, #28]
 80157ac:	210a      	movs	r1, #10
 80157ae:	fb01 e303 	mla	r3, r1, r3, lr
 80157b2:	9307      	str	r3, [sp, #28]
 80157b4:	2100      	movs	r1, #0
 80157b6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80157b8:	1c58      	adds	r0, r3, #1
 80157ba:	901b      	str	r0, [sp, #108]	; 0x6c
 80157bc:	785b      	ldrb	r3, [r3, #1]
 80157be:	4608      	mov	r0, r1
 80157c0:	e7c9      	b.n	8015756 <_strtod_l+0x1d6>
 80157c2:	9805      	ldr	r0, [sp, #20]
 80157c4:	e7d3      	b.n	801576e <_strtod_l+0x1ee>
 80157c6:	2908      	cmp	r1, #8
 80157c8:	f101 0101 	add.w	r1, r1, #1
 80157cc:	dc03      	bgt.n	80157d6 <_strtod_l+0x256>
 80157ce:	9b07      	ldr	r3, [sp, #28]
 80157d0:	437b      	muls	r3, r7
 80157d2:	9307      	str	r3, [sp, #28]
 80157d4:	e7e1      	b.n	801579a <_strtod_l+0x21a>
 80157d6:	2910      	cmp	r1, #16
 80157d8:	bfd8      	it	le
 80157da:	437d      	mulle	r5, r7
 80157dc:	e7dd      	b.n	801579a <_strtod_l+0x21a>
 80157de:	2c10      	cmp	r4, #16
 80157e0:	bfdc      	itt	le
 80157e2:	210a      	movle	r1, #10
 80157e4:	fb01 e505 	mlale	r5, r1, r5, lr
 80157e8:	e7e4      	b.n	80157b4 <_strtod_l+0x234>
 80157ea:	2301      	movs	r3, #1
 80157ec:	9304      	str	r3, [sp, #16]
 80157ee:	e781      	b.n	80156f4 <_strtod_l+0x174>
 80157f0:	f04f 0c01 	mov.w	ip, #1
 80157f4:	1cb3      	adds	r3, r6, #2
 80157f6:	931b      	str	r3, [sp, #108]	; 0x6c
 80157f8:	78b3      	ldrb	r3, [r6, #2]
 80157fa:	e78a      	b.n	8015712 <_strtod_l+0x192>
 80157fc:	f04f 0c00 	mov.w	ip, #0
 8015800:	e7f8      	b.n	80157f4 <_strtod_l+0x274>
 8015802:	bf00      	nop
 8015804:	08036ae8 	.word	0x08036ae8
 8015808:	7ff00000 	.word	0x7ff00000
 801580c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801580e:	1c5f      	adds	r7, r3, #1
 8015810:	971b      	str	r7, [sp, #108]	; 0x6c
 8015812:	785b      	ldrb	r3, [r3, #1]
 8015814:	2b30      	cmp	r3, #48	; 0x30
 8015816:	d0f9      	beq.n	801580c <_strtod_l+0x28c>
 8015818:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801581c:	2f08      	cmp	r7, #8
 801581e:	f63f af7d 	bhi.w	801571c <_strtod_l+0x19c>
 8015822:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015826:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015828:	930a      	str	r3, [sp, #40]	; 0x28
 801582a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801582c:	1c5f      	adds	r7, r3, #1
 801582e:	971b      	str	r7, [sp, #108]	; 0x6c
 8015830:	785b      	ldrb	r3, [r3, #1]
 8015832:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8015836:	f1b8 0f09 	cmp.w	r8, #9
 801583a:	d937      	bls.n	80158ac <_strtod_l+0x32c>
 801583c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801583e:	1a7f      	subs	r7, r7, r1
 8015840:	2f08      	cmp	r7, #8
 8015842:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8015846:	dc37      	bgt.n	80158b8 <_strtod_l+0x338>
 8015848:	45be      	cmp	lr, r7
 801584a:	bfa8      	it	ge
 801584c:	46be      	movge	lr, r7
 801584e:	f1bc 0f00 	cmp.w	ip, #0
 8015852:	d001      	beq.n	8015858 <_strtod_l+0x2d8>
 8015854:	f1ce 0e00 	rsb	lr, lr, #0
 8015858:	2c00      	cmp	r4, #0
 801585a:	d151      	bne.n	8015900 <_strtod_l+0x380>
 801585c:	2800      	cmp	r0, #0
 801585e:	f47f aece 	bne.w	80155fe <_strtod_l+0x7e>
 8015862:	9a06      	ldr	r2, [sp, #24]
 8015864:	2a00      	cmp	r2, #0
 8015866:	f47f aeca 	bne.w	80155fe <_strtod_l+0x7e>
 801586a:	9a04      	ldr	r2, [sp, #16]
 801586c:	2a00      	cmp	r2, #0
 801586e:	f47f aee4 	bne.w	801563a <_strtod_l+0xba>
 8015872:	2b4e      	cmp	r3, #78	; 0x4e
 8015874:	d027      	beq.n	80158c6 <_strtod_l+0x346>
 8015876:	dc21      	bgt.n	80158bc <_strtod_l+0x33c>
 8015878:	2b49      	cmp	r3, #73	; 0x49
 801587a:	f47f aede 	bne.w	801563a <_strtod_l+0xba>
 801587e:	49a0      	ldr	r1, [pc, #640]	; (8015b00 <_strtod_l+0x580>)
 8015880:	a81b      	add	r0, sp, #108	; 0x6c
 8015882:	f001 f9cb 	bl	8016c1c <__match>
 8015886:	2800      	cmp	r0, #0
 8015888:	f43f aed7 	beq.w	801563a <_strtod_l+0xba>
 801588c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801588e:	499d      	ldr	r1, [pc, #628]	; (8015b04 <_strtod_l+0x584>)
 8015890:	3b01      	subs	r3, #1
 8015892:	a81b      	add	r0, sp, #108	; 0x6c
 8015894:	931b      	str	r3, [sp, #108]	; 0x6c
 8015896:	f001 f9c1 	bl	8016c1c <__match>
 801589a:	b910      	cbnz	r0, 80158a2 <_strtod_l+0x322>
 801589c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801589e:	3301      	adds	r3, #1
 80158a0:	931b      	str	r3, [sp, #108]	; 0x6c
 80158a2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015b18 <_strtod_l+0x598>
 80158a6:	f04f 0a00 	mov.w	sl, #0
 80158aa:	e6a8      	b.n	80155fe <_strtod_l+0x7e>
 80158ac:	210a      	movs	r1, #10
 80158ae:	fb01 3e0e 	mla	lr, r1, lr, r3
 80158b2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80158b6:	e7b8      	b.n	801582a <_strtod_l+0x2aa>
 80158b8:	46be      	mov	lr, r7
 80158ba:	e7c8      	b.n	801584e <_strtod_l+0x2ce>
 80158bc:	2b69      	cmp	r3, #105	; 0x69
 80158be:	d0de      	beq.n	801587e <_strtod_l+0x2fe>
 80158c0:	2b6e      	cmp	r3, #110	; 0x6e
 80158c2:	f47f aeba 	bne.w	801563a <_strtod_l+0xba>
 80158c6:	4990      	ldr	r1, [pc, #576]	; (8015b08 <_strtod_l+0x588>)
 80158c8:	a81b      	add	r0, sp, #108	; 0x6c
 80158ca:	f001 f9a7 	bl	8016c1c <__match>
 80158ce:	2800      	cmp	r0, #0
 80158d0:	f43f aeb3 	beq.w	801563a <_strtod_l+0xba>
 80158d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158d6:	781b      	ldrb	r3, [r3, #0]
 80158d8:	2b28      	cmp	r3, #40	; 0x28
 80158da:	d10e      	bne.n	80158fa <_strtod_l+0x37a>
 80158dc:	aa1e      	add	r2, sp, #120	; 0x78
 80158de:	498b      	ldr	r1, [pc, #556]	; (8015b0c <_strtod_l+0x58c>)
 80158e0:	a81b      	add	r0, sp, #108	; 0x6c
 80158e2:	f001 f9af 	bl	8016c44 <__hexnan>
 80158e6:	2805      	cmp	r0, #5
 80158e8:	d107      	bne.n	80158fa <_strtod_l+0x37a>
 80158ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80158ec:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80158f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80158f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80158f8:	e681      	b.n	80155fe <_strtod_l+0x7e>
 80158fa:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015b20 <_strtod_l+0x5a0>
 80158fe:	e7d2      	b.n	80158a6 <_strtod_l+0x326>
 8015900:	ebae 0302 	sub.w	r3, lr, r2
 8015904:	9306      	str	r3, [sp, #24]
 8015906:	9b05      	ldr	r3, [sp, #20]
 8015908:	9807      	ldr	r0, [sp, #28]
 801590a:	2b00      	cmp	r3, #0
 801590c:	bf08      	it	eq
 801590e:	4623      	moveq	r3, r4
 8015910:	2c10      	cmp	r4, #16
 8015912:	9305      	str	r3, [sp, #20]
 8015914:	46a0      	mov	r8, r4
 8015916:	bfa8      	it	ge
 8015918:	f04f 0810 	movge.w	r8, #16
 801591c:	f7ea fe0a 	bl	8000534 <__aeabi_ui2d>
 8015920:	2c09      	cmp	r4, #9
 8015922:	4682      	mov	sl, r0
 8015924:	468b      	mov	fp, r1
 8015926:	dc13      	bgt.n	8015950 <_strtod_l+0x3d0>
 8015928:	9b06      	ldr	r3, [sp, #24]
 801592a:	2b00      	cmp	r3, #0
 801592c:	f43f ae67 	beq.w	80155fe <_strtod_l+0x7e>
 8015930:	9b06      	ldr	r3, [sp, #24]
 8015932:	dd7a      	ble.n	8015a2a <_strtod_l+0x4aa>
 8015934:	2b16      	cmp	r3, #22
 8015936:	dc61      	bgt.n	80159fc <_strtod_l+0x47c>
 8015938:	4a75      	ldr	r2, [pc, #468]	; (8015b10 <_strtod_l+0x590>)
 801593a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801593e:	e9de 0100 	ldrd	r0, r1, [lr]
 8015942:	4652      	mov	r2, sl
 8015944:	465b      	mov	r3, fp
 8015946:	f7ea fe6f 	bl	8000628 <__aeabi_dmul>
 801594a:	4682      	mov	sl, r0
 801594c:	468b      	mov	fp, r1
 801594e:	e656      	b.n	80155fe <_strtod_l+0x7e>
 8015950:	4b6f      	ldr	r3, [pc, #444]	; (8015b10 <_strtod_l+0x590>)
 8015952:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015956:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801595a:	f7ea fe65 	bl	8000628 <__aeabi_dmul>
 801595e:	4606      	mov	r6, r0
 8015960:	4628      	mov	r0, r5
 8015962:	460f      	mov	r7, r1
 8015964:	f7ea fde6 	bl	8000534 <__aeabi_ui2d>
 8015968:	4602      	mov	r2, r0
 801596a:	460b      	mov	r3, r1
 801596c:	4630      	mov	r0, r6
 801596e:	4639      	mov	r1, r7
 8015970:	f7ea fca4 	bl	80002bc <__adddf3>
 8015974:	2c0f      	cmp	r4, #15
 8015976:	4682      	mov	sl, r0
 8015978:	468b      	mov	fp, r1
 801597a:	ddd5      	ble.n	8015928 <_strtod_l+0x3a8>
 801597c:	9b06      	ldr	r3, [sp, #24]
 801597e:	eba4 0808 	sub.w	r8, r4, r8
 8015982:	4498      	add	r8, r3
 8015984:	f1b8 0f00 	cmp.w	r8, #0
 8015988:	f340 8096 	ble.w	8015ab8 <_strtod_l+0x538>
 801598c:	f018 030f 	ands.w	r3, r8, #15
 8015990:	d00a      	beq.n	80159a8 <_strtod_l+0x428>
 8015992:	495f      	ldr	r1, [pc, #380]	; (8015b10 <_strtod_l+0x590>)
 8015994:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015998:	4652      	mov	r2, sl
 801599a:	465b      	mov	r3, fp
 801599c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80159a0:	f7ea fe42 	bl	8000628 <__aeabi_dmul>
 80159a4:	4682      	mov	sl, r0
 80159a6:	468b      	mov	fp, r1
 80159a8:	f038 080f 	bics.w	r8, r8, #15
 80159ac:	d073      	beq.n	8015a96 <_strtod_l+0x516>
 80159ae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80159b2:	dd47      	ble.n	8015a44 <_strtod_l+0x4c4>
 80159b4:	2400      	movs	r4, #0
 80159b6:	46a0      	mov	r8, r4
 80159b8:	9407      	str	r4, [sp, #28]
 80159ba:	9405      	str	r4, [sp, #20]
 80159bc:	2322      	movs	r3, #34	; 0x22
 80159be:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015b18 <_strtod_l+0x598>
 80159c2:	f8c9 3000 	str.w	r3, [r9]
 80159c6:	f04f 0a00 	mov.w	sl, #0
 80159ca:	9b07      	ldr	r3, [sp, #28]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	f43f ae16 	beq.w	80155fe <_strtod_l+0x7e>
 80159d2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80159d4:	4648      	mov	r0, r9
 80159d6:	f001 fa73 	bl	8016ec0 <_Bfree>
 80159da:	9905      	ldr	r1, [sp, #20]
 80159dc:	4648      	mov	r0, r9
 80159de:	f001 fa6f 	bl	8016ec0 <_Bfree>
 80159e2:	4641      	mov	r1, r8
 80159e4:	4648      	mov	r0, r9
 80159e6:	f001 fa6b 	bl	8016ec0 <_Bfree>
 80159ea:	9907      	ldr	r1, [sp, #28]
 80159ec:	4648      	mov	r0, r9
 80159ee:	f001 fa67 	bl	8016ec0 <_Bfree>
 80159f2:	4621      	mov	r1, r4
 80159f4:	4648      	mov	r0, r9
 80159f6:	f001 fa63 	bl	8016ec0 <_Bfree>
 80159fa:	e600      	b.n	80155fe <_strtod_l+0x7e>
 80159fc:	9a06      	ldr	r2, [sp, #24]
 80159fe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8015a02:	4293      	cmp	r3, r2
 8015a04:	dbba      	blt.n	801597c <_strtod_l+0x3fc>
 8015a06:	4d42      	ldr	r5, [pc, #264]	; (8015b10 <_strtod_l+0x590>)
 8015a08:	f1c4 040f 	rsb	r4, r4, #15
 8015a0c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015a10:	4652      	mov	r2, sl
 8015a12:	465b      	mov	r3, fp
 8015a14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a18:	f7ea fe06 	bl	8000628 <__aeabi_dmul>
 8015a1c:	9b06      	ldr	r3, [sp, #24]
 8015a1e:	1b1c      	subs	r4, r3, r4
 8015a20:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015a24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015a28:	e78d      	b.n	8015946 <_strtod_l+0x3c6>
 8015a2a:	f113 0f16 	cmn.w	r3, #22
 8015a2e:	dba5      	blt.n	801597c <_strtod_l+0x3fc>
 8015a30:	4a37      	ldr	r2, [pc, #220]	; (8015b10 <_strtod_l+0x590>)
 8015a32:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015a36:	e9d2 2300 	ldrd	r2, r3, [r2]
 8015a3a:	4650      	mov	r0, sl
 8015a3c:	4659      	mov	r1, fp
 8015a3e:	f7ea ff1d 	bl	800087c <__aeabi_ddiv>
 8015a42:	e782      	b.n	801594a <_strtod_l+0x3ca>
 8015a44:	2300      	movs	r3, #0
 8015a46:	4e33      	ldr	r6, [pc, #204]	; (8015b14 <_strtod_l+0x594>)
 8015a48:	ea4f 1828 	mov.w	r8, r8, asr #4
 8015a4c:	4650      	mov	r0, sl
 8015a4e:	4659      	mov	r1, fp
 8015a50:	461d      	mov	r5, r3
 8015a52:	f1b8 0f01 	cmp.w	r8, #1
 8015a56:	dc21      	bgt.n	8015a9c <_strtod_l+0x51c>
 8015a58:	b10b      	cbz	r3, 8015a5e <_strtod_l+0x4de>
 8015a5a:	4682      	mov	sl, r0
 8015a5c:	468b      	mov	fp, r1
 8015a5e:	4b2d      	ldr	r3, [pc, #180]	; (8015b14 <_strtod_l+0x594>)
 8015a60:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015a64:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015a68:	4652      	mov	r2, sl
 8015a6a:	465b      	mov	r3, fp
 8015a6c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015a70:	f7ea fdda 	bl	8000628 <__aeabi_dmul>
 8015a74:	4b28      	ldr	r3, [pc, #160]	; (8015b18 <_strtod_l+0x598>)
 8015a76:	460a      	mov	r2, r1
 8015a78:	400b      	ands	r3, r1
 8015a7a:	4928      	ldr	r1, [pc, #160]	; (8015b1c <_strtod_l+0x59c>)
 8015a7c:	428b      	cmp	r3, r1
 8015a7e:	4682      	mov	sl, r0
 8015a80:	d898      	bhi.n	80159b4 <_strtod_l+0x434>
 8015a82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015a86:	428b      	cmp	r3, r1
 8015a88:	bf86      	itte	hi
 8015a8a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015b24 <_strtod_l+0x5a4>
 8015a8e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015a92:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015a96:	2300      	movs	r3, #0
 8015a98:	9304      	str	r3, [sp, #16]
 8015a9a:	e077      	b.n	8015b8c <_strtod_l+0x60c>
 8015a9c:	f018 0f01 	tst.w	r8, #1
 8015aa0:	d006      	beq.n	8015ab0 <_strtod_l+0x530>
 8015aa2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aaa:	f7ea fdbd 	bl	8000628 <__aeabi_dmul>
 8015aae:	2301      	movs	r3, #1
 8015ab0:	3501      	adds	r5, #1
 8015ab2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015ab6:	e7cc      	b.n	8015a52 <_strtod_l+0x4d2>
 8015ab8:	d0ed      	beq.n	8015a96 <_strtod_l+0x516>
 8015aba:	f1c8 0800 	rsb	r8, r8, #0
 8015abe:	f018 020f 	ands.w	r2, r8, #15
 8015ac2:	d00a      	beq.n	8015ada <_strtod_l+0x55a>
 8015ac4:	4b12      	ldr	r3, [pc, #72]	; (8015b10 <_strtod_l+0x590>)
 8015ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015aca:	4650      	mov	r0, sl
 8015acc:	4659      	mov	r1, fp
 8015ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad2:	f7ea fed3 	bl	800087c <__aeabi_ddiv>
 8015ad6:	4682      	mov	sl, r0
 8015ad8:	468b      	mov	fp, r1
 8015ada:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015ade:	d0da      	beq.n	8015a96 <_strtod_l+0x516>
 8015ae0:	f1b8 0f1f 	cmp.w	r8, #31
 8015ae4:	dd20      	ble.n	8015b28 <_strtod_l+0x5a8>
 8015ae6:	2400      	movs	r4, #0
 8015ae8:	46a0      	mov	r8, r4
 8015aea:	9407      	str	r4, [sp, #28]
 8015aec:	9405      	str	r4, [sp, #20]
 8015aee:	2322      	movs	r3, #34	; 0x22
 8015af0:	f04f 0a00 	mov.w	sl, #0
 8015af4:	f04f 0b00 	mov.w	fp, #0
 8015af8:	f8c9 3000 	str.w	r3, [r9]
 8015afc:	e765      	b.n	80159ca <_strtod_l+0x44a>
 8015afe:	bf00      	nop
 8015b00:	08036adb 	.word	0x08036adb
 8015b04:	08036ade 	.word	0x08036ade
 8015b08:	08036ae4 	.word	0x08036ae4
 8015b0c:	08036afc 	.word	0x08036afc
 8015b10:	08036bd0 	.word	0x08036bd0
 8015b14:	08036ba8 	.word	0x08036ba8
 8015b18:	7ff00000 	.word	0x7ff00000
 8015b1c:	7ca00000 	.word	0x7ca00000
 8015b20:	fff80000 	.word	0xfff80000
 8015b24:	7fefffff 	.word	0x7fefffff
 8015b28:	f018 0310 	ands.w	r3, r8, #16
 8015b2c:	bf18      	it	ne
 8015b2e:	236a      	movne	r3, #106	; 0x6a
 8015b30:	4da0      	ldr	r5, [pc, #640]	; (8015db4 <_strtod_l+0x834>)
 8015b32:	9304      	str	r3, [sp, #16]
 8015b34:	4650      	mov	r0, sl
 8015b36:	4659      	mov	r1, fp
 8015b38:	2300      	movs	r3, #0
 8015b3a:	f1b8 0f00 	cmp.w	r8, #0
 8015b3e:	f300 810a 	bgt.w	8015d56 <_strtod_l+0x7d6>
 8015b42:	b10b      	cbz	r3, 8015b48 <_strtod_l+0x5c8>
 8015b44:	4682      	mov	sl, r0
 8015b46:	468b      	mov	fp, r1
 8015b48:	9b04      	ldr	r3, [sp, #16]
 8015b4a:	b1bb      	cbz	r3, 8015b7c <_strtod_l+0x5fc>
 8015b4c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015b50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	4659      	mov	r1, fp
 8015b58:	dd10      	ble.n	8015b7c <_strtod_l+0x5fc>
 8015b5a:	2b1f      	cmp	r3, #31
 8015b5c:	f340 8107 	ble.w	8015d6e <_strtod_l+0x7ee>
 8015b60:	2b34      	cmp	r3, #52	; 0x34
 8015b62:	bfde      	ittt	le
 8015b64:	3b20      	suble	r3, #32
 8015b66:	f04f 32ff 	movle.w	r2, #4294967295
 8015b6a:	fa02 f303 	lslle.w	r3, r2, r3
 8015b6e:	f04f 0a00 	mov.w	sl, #0
 8015b72:	bfcc      	ite	gt
 8015b74:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015b78:	ea03 0b01 	andle.w	fp, r3, r1
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	2300      	movs	r3, #0
 8015b80:	4650      	mov	r0, sl
 8015b82:	4659      	mov	r1, fp
 8015b84:	f7ea ffb8 	bl	8000af8 <__aeabi_dcmpeq>
 8015b88:	2800      	cmp	r0, #0
 8015b8a:	d1ac      	bne.n	8015ae6 <_strtod_l+0x566>
 8015b8c:	9b07      	ldr	r3, [sp, #28]
 8015b8e:	9300      	str	r3, [sp, #0]
 8015b90:	9a05      	ldr	r2, [sp, #20]
 8015b92:	9908      	ldr	r1, [sp, #32]
 8015b94:	4623      	mov	r3, r4
 8015b96:	4648      	mov	r0, r9
 8015b98:	f001 f9e4 	bl	8016f64 <__s2b>
 8015b9c:	9007      	str	r0, [sp, #28]
 8015b9e:	2800      	cmp	r0, #0
 8015ba0:	f43f af08 	beq.w	80159b4 <_strtod_l+0x434>
 8015ba4:	9a06      	ldr	r2, [sp, #24]
 8015ba6:	9b06      	ldr	r3, [sp, #24]
 8015ba8:	2a00      	cmp	r2, #0
 8015baa:	f1c3 0300 	rsb	r3, r3, #0
 8015bae:	bfa8      	it	ge
 8015bb0:	2300      	movge	r3, #0
 8015bb2:	930e      	str	r3, [sp, #56]	; 0x38
 8015bb4:	2400      	movs	r4, #0
 8015bb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015bba:	9316      	str	r3, [sp, #88]	; 0x58
 8015bbc:	46a0      	mov	r8, r4
 8015bbe:	9b07      	ldr	r3, [sp, #28]
 8015bc0:	4648      	mov	r0, r9
 8015bc2:	6859      	ldr	r1, [r3, #4]
 8015bc4:	f001 f948 	bl	8016e58 <_Balloc>
 8015bc8:	9005      	str	r0, [sp, #20]
 8015bca:	2800      	cmp	r0, #0
 8015bcc:	f43f aef6 	beq.w	80159bc <_strtod_l+0x43c>
 8015bd0:	9b07      	ldr	r3, [sp, #28]
 8015bd2:	691a      	ldr	r2, [r3, #16]
 8015bd4:	3202      	adds	r2, #2
 8015bd6:	f103 010c 	add.w	r1, r3, #12
 8015bda:	0092      	lsls	r2, r2, #2
 8015bdc:	300c      	adds	r0, #12
 8015bde:	f7ff f827 	bl	8014c30 <memcpy>
 8015be2:	aa1e      	add	r2, sp, #120	; 0x78
 8015be4:	a91d      	add	r1, sp, #116	; 0x74
 8015be6:	ec4b ab10 	vmov	d0, sl, fp
 8015bea:	4648      	mov	r0, r9
 8015bec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8015bf0:	f001 fc74 	bl	80174dc <__d2b>
 8015bf4:	901c      	str	r0, [sp, #112]	; 0x70
 8015bf6:	2800      	cmp	r0, #0
 8015bf8:	f43f aee0 	beq.w	80159bc <_strtod_l+0x43c>
 8015bfc:	2101      	movs	r1, #1
 8015bfe:	4648      	mov	r0, r9
 8015c00:	f001 fa3c 	bl	801707c <__i2b>
 8015c04:	4680      	mov	r8, r0
 8015c06:	2800      	cmp	r0, #0
 8015c08:	f43f aed8 	beq.w	80159bc <_strtod_l+0x43c>
 8015c0c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8015c0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015c10:	2e00      	cmp	r6, #0
 8015c12:	bfab      	itete	ge
 8015c14:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015c16:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015c18:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8015c1a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8015c1c:	bfac      	ite	ge
 8015c1e:	18f7      	addge	r7, r6, r3
 8015c20:	1b9d      	sublt	r5, r3, r6
 8015c22:	9b04      	ldr	r3, [sp, #16]
 8015c24:	1af6      	subs	r6, r6, r3
 8015c26:	4416      	add	r6, r2
 8015c28:	4b63      	ldr	r3, [pc, #396]	; (8015db8 <_strtod_l+0x838>)
 8015c2a:	3e01      	subs	r6, #1
 8015c2c:	429e      	cmp	r6, r3
 8015c2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015c32:	f280 80af 	bge.w	8015d94 <_strtod_l+0x814>
 8015c36:	1b9b      	subs	r3, r3, r6
 8015c38:	2b1f      	cmp	r3, #31
 8015c3a:	eba2 0203 	sub.w	r2, r2, r3
 8015c3e:	f04f 0101 	mov.w	r1, #1
 8015c42:	f300 809b 	bgt.w	8015d7c <_strtod_l+0x7fc>
 8015c46:	fa01 f303 	lsl.w	r3, r1, r3
 8015c4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8015c50:	18be      	adds	r6, r7, r2
 8015c52:	9b04      	ldr	r3, [sp, #16]
 8015c54:	42b7      	cmp	r7, r6
 8015c56:	4415      	add	r5, r2
 8015c58:	441d      	add	r5, r3
 8015c5a:	463b      	mov	r3, r7
 8015c5c:	bfa8      	it	ge
 8015c5e:	4633      	movge	r3, r6
 8015c60:	42ab      	cmp	r3, r5
 8015c62:	bfa8      	it	ge
 8015c64:	462b      	movge	r3, r5
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	bfc2      	ittt	gt
 8015c6a:	1af6      	subgt	r6, r6, r3
 8015c6c:	1aed      	subgt	r5, r5, r3
 8015c6e:	1aff      	subgt	r7, r7, r3
 8015c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015c72:	b1bb      	cbz	r3, 8015ca4 <_strtod_l+0x724>
 8015c74:	4641      	mov	r1, r8
 8015c76:	461a      	mov	r2, r3
 8015c78:	4648      	mov	r0, r9
 8015c7a:	f001 fa9f 	bl	80171bc <__pow5mult>
 8015c7e:	4680      	mov	r8, r0
 8015c80:	2800      	cmp	r0, #0
 8015c82:	f43f ae9b 	beq.w	80159bc <_strtod_l+0x43c>
 8015c86:	4601      	mov	r1, r0
 8015c88:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015c8a:	4648      	mov	r0, r9
 8015c8c:	f001 f9ff 	bl	801708e <__multiply>
 8015c90:	900c      	str	r0, [sp, #48]	; 0x30
 8015c92:	2800      	cmp	r0, #0
 8015c94:	f43f ae92 	beq.w	80159bc <_strtod_l+0x43c>
 8015c98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015c9a:	4648      	mov	r0, r9
 8015c9c:	f001 f910 	bl	8016ec0 <_Bfree>
 8015ca0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ca2:	931c      	str	r3, [sp, #112]	; 0x70
 8015ca4:	2e00      	cmp	r6, #0
 8015ca6:	dc7a      	bgt.n	8015d9e <_strtod_l+0x81e>
 8015ca8:	9b06      	ldr	r3, [sp, #24]
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	dd08      	ble.n	8015cc0 <_strtod_l+0x740>
 8015cae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015cb0:	9905      	ldr	r1, [sp, #20]
 8015cb2:	4648      	mov	r0, r9
 8015cb4:	f001 fa82 	bl	80171bc <__pow5mult>
 8015cb8:	9005      	str	r0, [sp, #20]
 8015cba:	2800      	cmp	r0, #0
 8015cbc:	f43f ae7e 	beq.w	80159bc <_strtod_l+0x43c>
 8015cc0:	2d00      	cmp	r5, #0
 8015cc2:	dd08      	ble.n	8015cd6 <_strtod_l+0x756>
 8015cc4:	462a      	mov	r2, r5
 8015cc6:	9905      	ldr	r1, [sp, #20]
 8015cc8:	4648      	mov	r0, r9
 8015cca:	f001 fac5 	bl	8017258 <__lshift>
 8015cce:	9005      	str	r0, [sp, #20]
 8015cd0:	2800      	cmp	r0, #0
 8015cd2:	f43f ae73 	beq.w	80159bc <_strtod_l+0x43c>
 8015cd6:	2f00      	cmp	r7, #0
 8015cd8:	dd08      	ble.n	8015cec <_strtod_l+0x76c>
 8015cda:	4641      	mov	r1, r8
 8015cdc:	463a      	mov	r2, r7
 8015cde:	4648      	mov	r0, r9
 8015ce0:	f001 faba 	bl	8017258 <__lshift>
 8015ce4:	4680      	mov	r8, r0
 8015ce6:	2800      	cmp	r0, #0
 8015ce8:	f43f ae68 	beq.w	80159bc <_strtod_l+0x43c>
 8015cec:	9a05      	ldr	r2, [sp, #20]
 8015cee:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015cf0:	4648      	mov	r0, r9
 8015cf2:	f001 fb1f 	bl	8017334 <__mdiff>
 8015cf6:	4604      	mov	r4, r0
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	f43f ae5f 	beq.w	80159bc <_strtod_l+0x43c>
 8015cfe:	68c3      	ldr	r3, [r0, #12]
 8015d00:	930c      	str	r3, [sp, #48]	; 0x30
 8015d02:	2300      	movs	r3, #0
 8015d04:	60c3      	str	r3, [r0, #12]
 8015d06:	4641      	mov	r1, r8
 8015d08:	f001 fafa 	bl	8017300 <__mcmp>
 8015d0c:	2800      	cmp	r0, #0
 8015d0e:	da55      	bge.n	8015dbc <_strtod_l+0x83c>
 8015d10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d12:	b9e3      	cbnz	r3, 8015d4e <_strtod_l+0x7ce>
 8015d14:	f1ba 0f00 	cmp.w	sl, #0
 8015d18:	d119      	bne.n	8015d4e <_strtod_l+0x7ce>
 8015d1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015d1e:	b9b3      	cbnz	r3, 8015d4e <_strtod_l+0x7ce>
 8015d20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015d24:	0d1b      	lsrs	r3, r3, #20
 8015d26:	051b      	lsls	r3, r3, #20
 8015d28:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8015d2c:	d90f      	bls.n	8015d4e <_strtod_l+0x7ce>
 8015d2e:	6963      	ldr	r3, [r4, #20]
 8015d30:	b913      	cbnz	r3, 8015d38 <_strtod_l+0x7b8>
 8015d32:	6923      	ldr	r3, [r4, #16]
 8015d34:	2b01      	cmp	r3, #1
 8015d36:	dd0a      	ble.n	8015d4e <_strtod_l+0x7ce>
 8015d38:	4621      	mov	r1, r4
 8015d3a:	2201      	movs	r2, #1
 8015d3c:	4648      	mov	r0, r9
 8015d3e:	f001 fa8b 	bl	8017258 <__lshift>
 8015d42:	4641      	mov	r1, r8
 8015d44:	4604      	mov	r4, r0
 8015d46:	f001 fadb 	bl	8017300 <__mcmp>
 8015d4a:	2800      	cmp	r0, #0
 8015d4c:	dc67      	bgt.n	8015e1e <_strtod_l+0x89e>
 8015d4e:	9b04      	ldr	r3, [sp, #16]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d171      	bne.n	8015e38 <_strtod_l+0x8b8>
 8015d54:	e63d      	b.n	80159d2 <_strtod_l+0x452>
 8015d56:	f018 0f01 	tst.w	r8, #1
 8015d5a:	d004      	beq.n	8015d66 <_strtod_l+0x7e6>
 8015d5c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015d60:	f7ea fc62 	bl	8000628 <__aeabi_dmul>
 8015d64:	2301      	movs	r3, #1
 8015d66:	ea4f 0868 	mov.w	r8, r8, asr #1
 8015d6a:	3508      	adds	r5, #8
 8015d6c:	e6e5      	b.n	8015b3a <_strtod_l+0x5ba>
 8015d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8015d72:	fa02 f303 	lsl.w	r3, r2, r3
 8015d76:	ea03 0a0a 	and.w	sl, r3, sl
 8015d7a:	e6ff      	b.n	8015b7c <_strtod_l+0x5fc>
 8015d7c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015d80:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015d84:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015d88:	36e2      	adds	r6, #226	; 0xe2
 8015d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8015d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8015d90:	910f      	str	r1, [sp, #60]	; 0x3c
 8015d92:	e75d      	b.n	8015c50 <_strtod_l+0x6d0>
 8015d94:	2300      	movs	r3, #0
 8015d96:	930a      	str	r3, [sp, #40]	; 0x28
 8015d98:	2301      	movs	r3, #1
 8015d9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d9c:	e758      	b.n	8015c50 <_strtod_l+0x6d0>
 8015d9e:	4632      	mov	r2, r6
 8015da0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015da2:	4648      	mov	r0, r9
 8015da4:	f001 fa58 	bl	8017258 <__lshift>
 8015da8:	901c      	str	r0, [sp, #112]	; 0x70
 8015daa:	2800      	cmp	r0, #0
 8015dac:	f47f af7c 	bne.w	8015ca8 <_strtod_l+0x728>
 8015db0:	e604      	b.n	80159bc <_strtod_l+0x43c>
 8015db2:	bf00      	nop
 8015db4:	08036b10 	.word	0x08036b10
 8015db8:	fffffc02 	.word	0xfffffc02
 8015dbc:	465d      	mov	r5, fp
 8015dbe:	f040 8086 	bne.w	8015ece <_strtod_l+0x94e>
 8015dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015dc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015dc8:	b32a      	cbz	r2, 8015e16 <_strtod_l+0x896>
 8015dca:	4aaf      	ldr	r2, [pc, #700]	; (8016088 <_strtod_l+0xb08>)
 8015dcc:	4293      	cmp	r3, r2
 8015dce:	d153      	bne.n	8015e78 <_strtod_l+0x8f8>
 8015dd0:	9b04      	ldr	r3, [sp, #16]
 8015dd2:	4650      	mov	r0, sl
 8015dd4:	b1d3      	cbz	r3, 8015e0c <_strtod_l+0x88c>
 8015dd6:	4aad      	ldr	r2, [pc, #692]	; (801608c <_strtod_l+0xb0c>)
 8015dd8:	402a      	ands	r2, r5
 8015dda:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015dde:	f04f 31ff 	mov.w	r1, #4294967295
 8015de2:	d816      	bhi.n	8015e12 <_strtod_l+0x892>
 8015de4:	0d12      	lsrs	r2, r2, #20
 8015de6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015dea:	fa01 f303 	lsl.w	r3, r1, r3
 8015dee:	4298      	cmp	r0, r3
 8015df0:	d142      	bne.n	8015e78 <_strtod_l+0x8f8>
 8015df2:	4ba7      	ldr	r3, [pc, #668]	; (8016090 <_strtod_l+0xb10>)
 8015df4:	429d      	cmp	r5, r3
 8015df6:	d102      	bne.n	8015dfe <_strtod_l+0x87e>
 8015df8:	3001      	adds	r0, #1
 8015dfa:	f43f addf 	beq.w	80159bc <_strtod_l+0x43c>
 8015dfe:	4ba3      	ldr	r3, [pc, #652]	; (801608c <_strtod_l+0xb0c>)
 8015e00:	402b      	ands	r3, r5
 8015e02:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015e06:	f04f 0a00 	mov.w	sl, #0
 8015e0a:	e7a0      	b.n	8015d4e <_strtod_l+0x7ce>
 8015e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e10:	e7ed      	b.n	8015dee <_strtod_l+0x86e>
 8015e12:	460b      	mov	r3, r1
 8015e14:	e7eb      	b.n	8015dee <_strtod_l+0x86e>
 8015e16:	bb7b      	cbnz	r3, 8015e78 <_strtod_l+0x8f8>
 8015e18:	f1ba 0f00 	cmp.w	sl, #0
 8015e1c:	d12c      	bne.n	8015e78 <_strtod_l+0x8f8>
 8015e1e:	9904      	ldr	r1, [sp, #16]
 8015e20:	4a9a      	ldr	r2, [pc, #616]	; (801608c <_strtod_l+0xb0c>)
 8015e22:	465b      	mov	r3, fp
 8015e24:	b1f1      	cbz	r1, 8015e64 <_strtod_l+0x8e4>
 8015e26:	ea02 010b 	and.w	r1, r2, fp
 8015e2a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8015e2e:	dc19      	bgt.n	8015e64 <_strtod_l+0x8e4>
 8015e30:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015e34:	f77f ae5b 	ble.w	8015aee <_strtod_l+0x56e>
 8015e38:	4a96      	ldr	r2, [pc, #600]	; (8016094 <_strtod_l+0xb14>)
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015e40:	4650      	mov	r0, sl
 8015e42:	4659      	mov	r1, fp
 8015e44:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015e48:	f7ea fbee 	bl	8000628 <__aeabi_dmul>
 8015e4c:	4682      	mov	sl, r0
 8015e4e:	468b      	mov	fp, r1
 8015e50:	2900      	cmp	r1, #0
 8015e52:	f47f adbe 	bne.w	80159d2 <_strtod_l+0x452>
 8015e56:	2800      	cmp	r0, #0
 8015e58:	f47f adbb 	bne.w	80159d2 <_strtod_l+0x452>
 8015e5c:	2322      	movs	r3, #34	; 0x22
 8015e5e:	f8c9 3000 	str.w	r3, [r9]
 8015e62:	e5b6      	b.n	80159d2 <_strtod_l+0x452>
 8015e64:	4013      	ands	r3, r2
 8015e66:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015e6a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015e6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015e72:	f04f 3aff 	mov.w	sl, #4294967295
 8015e76:	e76a      	b.n	8015d4e <_strtod_l+0x7ce>
 8015e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e7a:	b193      	cbz	r3, 8015ea2 <_strtod_l+0x922>
 8015e7c:	422b      	tst	r3, r5
 8015e7e:	f43f af66 	beq.w	8015d4e <_strtod_l+0x7ce>
 8015e82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015e84:	9a04      	ldr	r2, [sp, #16]
 8015e86:	4650      	mov	r0, sl
 8015e88:	4659      	mov	r1, fp
 8015e8a:	b173      	cbz	r3, 8015eaa <_strtod_l+0x92a>
 8015e8c:	f7ff fb5c 	bl	8015548 <sulp>
 8015e90:	4602      	mov	r2, r0
 8015e92:	460b      	mov	r3, r1
 8015e94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015e98:	f7ea fa10 	bl	80002bc <__adddf3>
 8015e9c:	4682      	mov	sl, r0
 8015e9e:	468b      	mov	fp, r1
 8015ea0:	e755      	b.n	8015d4e <_strtod_l+0x7ce>
 8015ea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ea4:	ea13 0f0a 	tst.w	r3, sl
 8015ea8:	e7e9      	b.n	8015e7e <_strtod_l+0x8fe>
 8015eaa:	f7ff fb4d 	bl	8015548 <sulp>
 8015eae:	4602      	mov	r2, r0
 8015eb0:	460b      	mov	r3, r1
 8015eb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015eb6:	f7ea f9ff 	bl	80002b8 <__aeabi_dsub>
 8015eba:	2200      	movs	r2, #0
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	4682      	mov	sl, r0
 8015ec0:	468b      	mov	fp, r1
 8015ec2:	f7ea fe19 	bl	8000af8 <__aeabi_dcmpeq>
 8015ec6:	2800      	cmp	r0, #0
 8015ec8:	f47f ae11 	bne.w	8015aee <_strtod_l+0x56e>
 8015ecc:	e73f      	b.n	8015d4e <_strtod_l+0x7ce>
 8015ece:	4641      	mov	r1, r8
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	f001 fb52 	bl	801757a <__ratio>
 8015ed6:	ec57 6b10 	vmov	r6, r7, d0
 8015eda:	2200      	movs	r2, #0
 8015edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015ee0:	ee10 0a10 	vmov	r0, s0
 8015ee4:	4639      	mov	r1, r7
 8015ee6:	f7ea fe1b 	bl	8000b20 <__aeabi_dcmple>
 8015eea:	2800      	cmp	r0, #0
 8015eec:	d077      	beq.n	8015fde <_strtod_l+0xa5e>
 8015eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d04a      	beq.n	8015f8a <_strtod_l+0xa0a>
 8015ef4:	4b68      	ldr	r3, [pc, #416]	; (8016098 <_strtod_l+0xb18>)
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015efc:	4f66      	ldr	r7, [pc, #408]	; (8016098 <_strtod_l+0xb18>)
 8015efe:	2600      	movs	r6, #0
 8015f00:	4b62      	ldr	r3, [pc, #392]	; (801608c <_strtod_l+0xb0c>)
 8015f02:	402b      	ands	r3, r5
 8015f04:	930f      	str	r3, [sp, #60]	; 0x3c
 8015f06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015f08:	4b64      	ldr	r3, [pc, #400]	; (801609c <_strtod_l+0xb1c>)
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	f040 80ce 	bne.w	80160ac <_strtod_l+0xb2c>
 8015f10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015f14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015f18:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8015f1c:	ec4b ab10 	vmov	d0, sl, fp
 8015f20:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015f24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015f28:	f001 fa62 	bl	80173f0 <__ulp>
 8015f2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015f30:	ec53 2b10 	vmov	r2, r3, d0
 8015f34:	f7ea fb78 	bl	8000628 <__aeabi_dmul>
 8015f38:	4652      	mov	r2, sl
 8015f3a:	465b      	mov	r3, fp
 8015f3c:	f7ea f9be 	bl	80002bc <__adddf3>
 8015f40:	460b      	mov	r3, r1
 8015f42:	4952      	ldr	r1, [pc, #328]	; (801608c <_strtod_l+0xb0c>)
 8015f44:	4a56      	ldr	r2, [pc, #344]	; (80160a0 <_strtod_l+0xb20>)
 8015f46:	4019      	ands	r1, r3
 8015f48:	4291      	cmp	r1, r2
 8015f4a:	4682      	mov	sl, r0
 8015f4c:	d95b      	bls.n	8016006 <_strtod_l+0xa86>
 8015f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f50:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015f54:	4293      	cmp	r3, r2
 8015f56:	d103      	bne.n	8015f60 <_strtod_l+0x9e0>
 8015f58:	9b08      	ldr	r3, [sp, #32]
 8015f5a:	3301      	adds	r3, #1
 8015f5c:	f43f ad2e 	beq.w	80159bc <_strtod_l+0x43c>
 8015f60:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016090 <_strtod_l+0xb10>
 8015f64:	f04f 3aff 	mov.w	sl, #4294967295
 8015f68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015f6a:	4648      	mov	r0, r9
 8015f6c:	f000 ffa8 	bl	8016ec0 <_Bfree>
 8015f70:	9905      	ldr	r1, [sp, #20]
 8015f72:	4648      	mov	r0, r9
 8015f74:	f000 ffa4 	bl	8016ec0 <_Bfree>
 8015f78:	4641      	mov	r1, r8
 8015f7a:	4648      	mov	r0, r9
 8015f7c:	f000 ffa0 	bl	8016ec0 <_Bfree>
 8015f80:	4621      	mov	r1, r4
 8015f82:	4648      	mov	r0, r9
 8015f84:	f000 ff9c 	bl	8016ec0 <_Bfree>
 8015f88:	e619      	b.n	8015bbe <_strtod_l+0x63e>
 8015f8a:	f1ba 0f00 	cmp.w	sl, #0
 8015f8e:	d11a      	bne.n	8015fc6 <_strtod_l+0xa46>
 8015f90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f94:	b9eb      	cbnz	r3, 8015fd2 <_strtod_l+0xa52>
 8015f96:	2200      	movs	r2, #0
 8015f98:	4b3f      	ldr	r3, [pc, #252]	; (8016098 <_strtod_l+0xb18>)
 8015f9a:	4630      	mov	r0, r6
 8015f9c:	4639      	mov	r1, r7
 8015f9e:	f7ea fdb5 	bl	8000b0c <__aeabi_dcmplt>
 8015fa2:	b9c8      	cbnz	r0, 8015fd8 <_strtod_l+0xa58>
 8015fa4:	4630      	mov	r0, r6
 8015fa6:	4639      	mov	r1, r7
 8015fa8:	2200      	movs	r2, #0
 8015faa:	4b3e      	ldr	r3, [pc, #248]	; (80160a4 <_strtod_l+0xb24>)
 8015fac:	f7ea fb3c 	bl	8000628 <__aeabi_dmul>
 8015fb0:	4606      	mov	r6, r0
 8015fb2:	460f      	mov	r7, r1
 8015fb4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8015fb8:	9618      	str	r6, [sp, #96]	; 0x60
 8015fba:	9319      	str	r3, [sp, #100]	; 0x64
 8015fbc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8015fc0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8015fc4:	e79c      	b.n	8015f00 <_strtod_l+0x980>
 8015fc6:	f1ba 0f01 	cmp.w	sl, #1
 8015fca:	d102      	bne.n	8015fd2 <_strtod_l+0xa52>
 8015fcc:	2d00      	cmp	r5, #0
 8015fce:	f43f ad8e 	beq.w	8015aee <_strtod_l+0x56e>
 8015fd2:	2200      	movs	r2, #0
 8015fd4:	4b34      	ldr	r3, [pc, #208]	; (80160a8 <_strtod_l+0xb28>)
 8015fd6:	e78f      	b.n	8015ef8 <_strtod_l+0x978>
 8015fd8:	2600      	movs	r6, #0
 8015fda:	4f32      	ldr	r7, [pc, #200]	; (80160a4 <_strtod_l+0xb24>)
 8015fdc:	e7ea      	b.n	8015fb4 <_strtod_l+0xa34>
 8015fde:	4b31      	ldr	r3, [pc, #196]	; (80160a4 <_strtod_l+0xb24>)
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	4639      	mov	r1, r7
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	f7ea fb1f 	bl	8000628 <__aeabi_dmul>
 8015fea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015fec:	4606      	mov	r6, r0
 8015fee:	460f      	mov	r7, r1
 8015ff0:	b933      	cbnz	r3, 8016000 <_strtod_l+0xa80>
 8015ff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015ff6:	9010      	str	r0, [sp, #64]	; 0x40
 8015ff8:	9311      	str	r3, [sp, #68]	; 0x44
 8015ffa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015ffe:	e7df      	b.n	8015fc0 <_strtod_l+0xa40>
 8016000:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016004:	e7f9      	b.n	8015ffa <_strtod_l+0xa7a>
 8016006:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801600a:	9b04      	ldr	r3, [sp, #16]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d1ab      	bne.n	8015f68 <_strtod_l+0x9e8>
 8016010:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016014:	0d1b      	lsrs	r3, r3, #20
 8016016:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016018:	051b      	lsls	r3, r3, #20
 801601a:	429a      	cmp	r2, r3
 801601c:	465d      	mov	r5, fp
 801601e:	d1a3      	bne.n	8015f68 <_strtod_l+0x9e8>
 8016020:	4639      	mov	r1, r7
 8016022:	4630      	mov	r0, r6
 8016024:	f7ea fdb0 	bl	8000b88 <__aeabi_d2iz>
 8016028:	f7ea fa94 	bl	8000554 <__aeabi_i2d>
 801602c:	460b      	mov	r3, r1
 801602e:	4602      	mov	r2, r0
 8016030:	4639      	mov	r1, r7
 8016032:	4630      	mov	r0, r6
 8016034:	f7ea f940 	bl	80002b8 <__aeabi_dsub>
 8016038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801603a:	4606      	mov	r6, r0
 801603c:	460f      	mov	r7, r1
 801603e:	b933      	cbnz	r3, 801604e <_strtod_l+0xace>
 8016040:	f1ba 0f00 	cmp.w	sl, #0
 8016044:	d103      	bne.n	801604e <_strtod_l+0xace>
 8016046:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801604a:	2d00      	cmp	r5, #0
 801604c:	d06d      	beq.n	801612a <_strtod_l+0xbaa>
 801604e:	a30a      	add	r3, pc, #40	; (adr r3, 8016078 <_strtod_l+0xaf8>)
 8016050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016054:	4630      	mov	r0, r6
 8016056:	4639      	mov	r1, r7
 8016058:	f7ea fd58 	bl	8000b0c <__aeabi_dcmplt>
 801605c:	2800      	cmp	r0, #0
 801605e:	f47f acb8 	bne.w	80159d2 <_strtod_l+0x452>
 8016062:	a307      	add	r3, pc, #28	; (adr r3, 8016080 <_strtod_l+0xb00>)
 8016064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016068:	4630      	mov	r0, r6
 801606a:	4639      	mov	r1, r7
 801606c:	f7ea fd6c 	bl	8000b48 <__aeabi_dcmpgt>
 8016070:	2800      	cmp	r0, #0
 8016072:	f43f af79 	beq.w	8015f68 <_strtod_l+0x9e8>
 8016076:	e4ac      	b.n	80159d2 <_strtod_l+0x452>
 8016078:	94a03595 	.word	0x94a03595
 801607c:	3fdfffff 	.word	0x3fdfffff
 8016080:	35afe535 	.word	0x35afe535
 8016084:	3fe00000 	.word	0x3fe00000
 8016088:	000fffff 	.word	0x000fffff
 801608c:	7ff00000 	.word	0x7ff00000
 8016090:	7fefffff 	.word	0x7fefffff
 8016094:	39500000 	.word	0x39500000
 8016098:	3ff00000 	.word	0x3ff00000
 801609c:	7fe00000 	.word	0x7fe00000
 80160a0:	7c9fffff 	.word	0x7c9fffff
 80160a4:	3fe00000 	.word	0x3fe00000
 80160a8:	bff00000 	.word	0xbff00000
 80160ac:	9b04      	ldr	r3, [sp, #16]
 80160ae:	b333      	cbz	r3, 80160fe <_strtod_l+0xb7e>
 80160b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80160b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80160b6:	d822      	bhi.n	80160fe <_strtod_l+0xb7e>
 80160b8:	a327      	add	r3, pc, #156	; (adr r3, 8016158 <_strtod_l+0xbd8>)
 80160ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160be:	4630      	mov	r0, r6
 80160c0:	4639      	mov	r1, r7
 80160c2:	f7ea fd2d 	bl	8000b20 <__aeabi_dcmple>
 80160c6:	b1a0      	cbz	r0, 80160f2 <_strtod_l+0xb72>
 80160c8:	4639      	mov	r1, r7
 80160ca:	4630      	mov	r0, r6
 80160cc:	f7ea fd84 	bl	8000bd8 <__aeabi_d2uiz>
 80160d0:	2800      	cmp	r0, #0
 80160d2:	bf08      	it	eq
 80160d4:	2001      	moveq	r0, #1
 80160d6:	f7ea fa2d 	bl	8000534 <__aeabi_ui2d>
 80160da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80160dc:	4606      	mov	r6, r0
 80160de:	460f      	mov	r7, r1
 80160e0:	bb03      	cbnz	r3, 8016124 <_strtod_l+0xba4>
 80160e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80160e6:	9012      	str	r0, [sp, #72]	; 0x48
 80160e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80160ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80160ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80160f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80160f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80160f6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80160fa:	1a9b      	subs	r3, r3, r2
 80160fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80160fe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016102:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016106:	f001 f973 	bl	80173f0 <__ulp>
 801610a:	4650      	mov	r0, sl
 801610c:	ec53 2b10 	vmov	r2, r3, d0
 8016110:	4659      	mov	r1, fp
 8016112:	f7ea fa89 	bl	8000628 <__aeabi_dmul>
 8016116:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801611a:	f7ea f8cf 	bl	80002bc <__adddf3>
 801611e:	4682      	mov	sl, r0
 8016120:	468b      	mov	fp, r1
 8016122:	e772      	b.n	801600a <_strtod_l+0xa8a>
 8016124:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016128:	e7df      	b.n	80160ea <_strtod_l+0xb6a>
 801612a:	a30d      	add	r3, pc, #52	; (adr r3, 8016160 <_strtod_l+0xbe0>)
 801612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016130:	f7ea fcec 	bl	8000b0c <__aeabi_dcmplt>
 8016134:	e79c      	b.n	8016070 <_strtod_l+0xaf0>
 8016136:	2300      	movs	r3, #0
 8016138:	930d      	str	r3, [sp, #52]	; 0x34
 801613a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801613c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801613e:	6013      	str	r3, [r2, #0]
 8016140:	f7ff ba61 	b.w	8015606 <_strtod_l+0x86>
 8016144:	2b65      	cmp	r3, #101	; 0x65
 8016146:	f04f 0200 	mov.w	r2, #0
 801614a:	f43f ab4e 	beq.w	80157ea <_strtod_l+0x26a>
 801614e:	2101      	movs	r1, #1
 8016150:	4614      	mov	r4, r2
 8016152:	9104      	str	r1, [sp, #16]
 8016154:	f7ff bacb 	b.w	80156ee <_strtod_l+0x16e>
 8016158:	ffc00000 	.word	0xffc00000
 801615c:	41dfffff 	.word	0x41dfffff
 8016160:	94a03595 	.word	0x94a03595
 8016164:	3fcfffff 	.word	0x3fcfffff

08016168 <strtod>:
 8016168:	4b07      	ldr	r3, [pc, #28]	; (8016188 <strtod+0x20>)
 801616a:	4a08      	ldr	r2, [pc, #32]	; (801618c <strtod+0x24>)
 801616c:	b410      	push	{r4}
 801616e:	681c      	ldr	r4, [r3, #0]
 8016170:	6a23      	ldr	r3, [r4, #32]
 8016172:	2b00      	cmp	r3, #0
 8016174:	bf08      	it	eq
 8016176:	4613      	moveq	r3, r2
 8016178:	460a      	mov	r2, r1
 801617a:	4601      	mov	r1, r0
 801617c:	4620      	mov	r0, r4
 801617e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016182:	f7ff b9fd 	b.w	8015580 <_strtod_l>
 8016186:	bf00      	nop
 8016188:	20000788 	.word	0x20000788
 801618c:	200007ec 	.word	0x200007ec

08016190 <_vsiprintf_r>:
 8016190:	b500      	push	{lr}
 8016192:	b09b      	sub	sp, #108	; 0x6c
 8016194:	9100      	str	r1, [sp, #0]
 8016196:	9104      	str	r1, [sp, #16]
 8016198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801619c:	9105      	str	r1, [sp, #20]
 801619e:	9102      	str	r1, [sp, #8]
 80161a0:	4905      	ldr	r1, [pc, #20]	; (80161b8 <_vsiprintf_r+0x28>)
 80161a2:	9103      	str	r1, [sp, #12]
 80161a4:	4669      	mov	r1, sp
 80161a6:	f001 fad7 	bl	8017758 <_svfiprintf_r>
 80161aa:	9b00      	ldr	r3, [sp, #0]
 80161ac:	2200      	movs	r2, #0
 80161ae:	701a      	strb	r2, [r3, #0]
 80161b0:	b01b      	add	sp, #108	; 0x6c
 80161b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80161b6:	bf00      	nop
 80161b8:	ffff0208 	.word	0xffff0208

080161bc <vsiprintf>:
 80161bc:	4613      	mov	r3, r2
 80161be:	460a      	mov	r2, r1
 80161c0:	4601      	mov	r1, r0
 80161c2:	4802      	ldr	r0, [pc, #8]	; (80161cc <vsiprintf+0x10>)
 80161c4:	6800      	ldr	r0, [r0, #0]
 80161c6:	f7ff bfe3 	b.w	8016190 <_vsiprintf_r>
 80161ca:	bf00      	nop
 80161cc:	20000788 	.word	0x20000788

080161d0 <__swbuf_r>:
 80161d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161d2:	460e      	mov	r6, r1
 80161d4:	4614      	mov	r4, r2
 80161d6:	4605      	mov	r5, r0
 80161d8:	b118      	cbz	r0, 80161e2 <__swbuf_r+0x12>
 80161da:	6983      	ldr	r3, [r0, #24]
 80161dc:	b90b      	cbnz	r3, 80161e2 <__swbuf_r+0x12>
 80161de:	f000 fa11 	bl	8016604 <__sinit>
 80161e2:	4b21      	ldr	r3, [pc, #132]	; (8016268 <__swbuf_r+0x98>)
 80161e4:	429c      	cmp	r4, r3
 80161e6:	d12a      	bne.n	801623e <__swbuf_r+0x6e>
 80161e8:	686c      	ldr	r4, [r5, #4]
 80161ea:	69a3      	ldr	r3, [r4, #24]
 80161ec:	60a3      	str	r3, [r4, #8]
 80161ee:	89a3      	ldrh	r3, [r4, #12]
 80161f0:	071a      	lsls	r2, r3, #28
 80161f2:	d52e      	bpl.n	8016252 <__swbuf_r+0x82>
 80161f4:	6923      	ldr	r3, [r4, #16]
 80161f6:	b363      	cbz	r3, 8016252 <__swbuf_r+0x82>
 80161f8:	6923      	ldr	r3, [r4, #16]
 80161fa:	6820      	ldr	r0, [r4, #0]
 80161fc:	1ac0      	subs	r0, r0, r3
 80161fe:	6963      	ldr	r3, [r4, #20]
 8016200:	b2f6      	uxtb	r6, r6
 8016202:	4283      	cmp	r3, r0
 8016204:	4637      	mov	r7, r6
 8016206:	dc04      	bgt.n	8016212 <__swbuf_r+0x42>
 8016208:	4621      	mov	r1, r4
 801620a:	4628      	mov	r0, r5
 801620c:	f000 f990 	bl	8016530 <_fflush_r>
 8016210:	bb28      	cbnz	r0, 801625e <__swbuf_r+0x8e>
 8016212:	68a3      	ldr	r3, [r4, #8]
 8016214:	3b01      	subs	r3, #1
 8016216:	60a3      	str	r3, [r4, #8]
 8016218:	6823      	ldr	r3, [r4, #0]
 801621a:	1c5a      	adds	r2, r3, #1
 801621c:	6022      	str	r2, [r4, #0]
 801621e:	701e      	strb	r6, [r3, #0]
 8016220:	6963      	ldr	r3, [r4, #20]
 8016222:	3001      	adds	r0, #1
 8016224:	4283      	cmp	r3, r0
 8016226:	d004      	beq.n	8016232 <__swbuf_r+0x62>
 8016228:	89a3      	ldrh	r3, [r4, #12]
 801622a:	07db      	lsls	r3, r3, #31
 801622c:	d519      	bpl.n	8016262 <__swbuf_r+0x92>
 801622e:	2e0a      	cmp	r6, #10
 8016230:	d117      	bne.n	8016262 <__swbuf_r+0x92>
 8016232:	4621      	mov	r1, r4
 8016234:	4628      	mov	r0, r5
 8016236:	f000 f97b 	bl	8016530 <_fflush_r>
 801623a:	b190      	cbz	r0, 8016262 <__swbuf_r+0x92>
 801623c:	e00f      	b.n	801625e <__swbuf_r+0x8e>
 801623e:	4b0b      	ldr	r3, [pc, #44]	; (801626c <__swbuf_r+0x9c>)
 8016240:	429c      	cmp	r4, r3
 8016242:	d101      	bne.n	8016248 <__swbuf_r+0x78>
 8016244:	68ac      	ldr	r4, [r5, #8]
 8016246:	e7d0      	b.n	80161ea <__swbuf_r+0x1a>
 8016248:	4b09      	ldr	r3, [pc, #36]	; (8016270 <__swbuf_r+0xa0>)
 801624a:	429c      	cmp	r4, r3
 801624c:	bf08      	it	eq
 801624e:	68ec      	ldreq	r4, [r5, #12]
 8016250:	e7cb      	b.n	80161ea <__swbuf_r+0x1a>
 8016252:	4621      	mov	r1, r4
 8016254:	4628      	mov	r0, r5
 8016256:	f000 f80d 	bl	8016274 <__swsetup_r>
 801625a:	2800      	cmp	r0, #0
 801625c:	d0cc      	beq.n	80161f8 <__swbuf_r+0x28>
 801625e:	f04f 37ff 	mov.w	r7, #4294967295
 8016262:	4638      	mov	r0, r7
 8016264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016266:	bf00      	nop
 8016268:	08036b58 	.word	0x08036b58
 801626c:	08036b78 	.word	0x08036b78
 8016270:	08036b38 	.word	0x08036b38

08016274 <__swsetup_r>:
 8016274:	4b32      	ldr	r3, [pc, #200]	; (8016340 <__swsetup_r+0xcc>)
 8016276:	b570      	push	{r4, r5, r6, lr}
 8016278:	681d      	ldr	r5, [r3, #0]
 801627a:	4606      	mov	r6, r0
 801627c:	460c      	mov	r4, r1
 801627e:	b125      	cbz	r5, 801628a <__swsetup_r+0x16>
 8016280:	69ab      	ldr	r3, [r5, #24]
 8016282:	b913      	cbnz	r3, 801628a <__swsetup_r+0x16>
 8016284:	4628      	mov	r0, r5
 8016286:	f000 f9bd 	bl	8016604 <__sinit>
 801628a:	4b2e      	ldr	r3, [pc, #184]	; (8016344 <__swsetup_r+0xd0>)
 801628c:	429c      	cmp	r4, r3
 801628e:	d10f      	bne.n	80162b0 <__swsetup_r+0x3c>
 8016290:	686c      	ldr	r4, [r5, #4]
 8016292:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016296:	b29a      	uxth	r2, r3
 8016298:	0715      	lsls	r5, r2, #28
 801629a:	d42c      	bmi.n	80162f6 <__swsetup_r+0x82>
 801629c:	06d0      	lsls	r0, r2, #27
 801629e:	d411      	bmi.n	80162c4 <__swsetup_r+0x50>
 80162a0:	2209      	movs	r2, #9
 80162a2:	6032      	str	r2, [r6, #0]
 80162a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80162a8:	81a3      	strh	r3, [r4, #12]
 80162aa:	f04f 30ff 	mov.w	r0, #4294967295
 80162ae:	e03e      	b.n	801632e <__swsetup_r+0xba>
 80162b0:	4b25      	ldr	r3, [pc, #148]	; (8016348 <__swsetup_r+0xd4>)
 80162b2:	429c      	cmp	r4, r3
 80162b4:	d101      	bne.n	80162ba <__swsetup_r+0x46>
 80162b6:	68ac      	ldr	r4, [r5, #8]
 80162b8:	e7eb      	b.n	8016292 <__swsetup_r+0x1e>
 80162ba:	4b24      	ldr	r3, [pc, #144]	; (801634c <__swsetup_r+0xd8>)
 80162bc:	429c      	cmp	r4, r3
 80162be:	bf08      	it	eq
 80162c0:	68ec      	ldreq	r4, [r5, #12]
 80162c2:	e7e6      	b.n	8016292 <__swsetup_r+0x1e>
 80162c4:	0751      	lsls	r1, r2, #29
 80162c6:	d512      	bpl.n	80162ee <__swsetup_r+0x7a>
 80162c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80162ca:	b141      	cbz	r1, 80162de <__swsetup_r+0x6a>
 80162cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80162d0:	4299      	cmp	r1, r3
 80162d2:	d002      	beq.n	80162da <__swsetup_r+0x66>
 80162d4:	4630      	mov	r0, r6
 80162d6:	f7fe fce5 	bl	8014ca4 <_free_r>
 80162da:	2300      	movs	r3, #0
 80162dc:	6363      	str	r3, [r4, #52]	; 0x34
 80162de:	89a3      	ldrh	r3, [r4, #12]
 80162e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80162e4:	81a3      	strh	r3, [r4, #12]
 80162e6:	2300      	movs	r3, #0
 80162e8:	6063      	str	r3, [r4, #4]
 80162ea:	6923      	ldr	r3, [r4, #16]
 80162ec:	6023      	str	r3, [r4, #0]
 80162ee:	89a3      	ldrh	r3, [r4, #12]
 80162f0:	f043 0308 	orr.w	r3, r3, #8
 80162f4:	81a3      	strh	r3, [r4, #12]
 80162f6:	6923      	ldr	r3, [r4, #16]
 80162f8:	b94b      	cbnz	r3, 801630e <__swsetup_r+0x9a>
 80162fa:	89a3      	ldrh	r3, [r4, #12]
 80162fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016300:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016304:	d003      	beq.n	801630e <__swsetup_r+0x9a>
 8016306:	4621      	mov	r1, r4
 8016308:	4630      	mov	r0, r6
 801630a:	f000 fd51 	bl	8016db0 <__smakebuf_r>
 801630e:	89a2      	ldrh	r2, [r4, #12]
 8016310:	f012 0301 	ands.w	r3, r2, #1
 8016314:	d00c      	beq.n	8016330 <__swsetup_r+0xbc>
 8016316:	2300      	movs	r3, #0
 8016318:	60a3      	str	r3, [r4, #8]
 801631a:	6963      	ldr	r3, [r4, #20]
 801631c:	425b      	negs	r3, r3
 801631e:	61a3      	str	r3, [r4, #24]
 8016320:	6923      	ldr	r3, [r4, #16]
 8016322:	b953      	cbnz	r3, 801633a <__swsetup_r+0xc6>
 8016324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016328:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801632c:	d1ba      	bne.n	80162a4 <__swsetup_r+0x30>
 801632e:	bd70      	pop	{r4, r5, r6, pc}
 8016330:	0792      	lsls	r2, r2, #30
 8016332:	bf58      	it	pl
 8016334:	6963      	ldrpl	r3, [r4, #20]
 8016336:	60a3      	str	r3, [r4, #8]
 8016338:	e7f2      	b.n	8016320 <__swsetup_r+0xac>
 801633a:	2000      	movs	r0, #0
 801633c:	e7f7      	b.n	801632e <__swsetup_r+0xba>
 801633e:	bf00      	nop
 8016340:	20000788 	.word	0x20000788
 8016344:	08036b58 	.word	0x08036b58
 8016348:	08036b78 	.word	0x08036b78
 801634c:	08036b38 	.word	0x08036b38

08016350 <__call_exitprocs>:
 8016350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016354:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8016420 <__call_exitprocs+0xd0>
 8016358:	9001      	str	r0, [sp, #4]
 801635a:	460f      	mov	r7, r1
 801635c:	46c3      	mov	fp, r8
 801635e:	f8d8 4000 	ldr.w	r4, [r8]
 8016362:	465e      	mov	r6, fp
 8016364:	f04f 0a01 	mov.w	sl, #1
 8016368:	b914      	cbnz	r4, 8016370 <__call_exitprocs+0x20>
 801636a:	b003      	add	sp, #12
 801636c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016370:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
 8016374:	6865      	ldr	r5, [r4, #4]
 8016376:	3d01      	subs	r5, #1
 8016378:	2d00      	cmp	r5, #0
 801637a:	da15      	bge.n	80163a8 <__call_exitprocs+0x58>
 801637c:	4b27      	ldr	r3, [pc, #156]	; (801641c <__call_exitprocs+0xcc>)
 801637e:	2b00      	cmp	r3, #0
 8016380:	d0f3      	beq.n	801636a <__call_exitprocs+0x1a>
 8016382:	e9d4 2100 	ldrd	r2, r1, [r4]
 8016386:	2900      	cmp	r1, #0
 8016388:	d146      	bne.n	8016418 <__call_exitprocs+0xc8>
 801638a:	2a00      	cmp	r2, #0
 801638c:	d044      	beq.n	8016418 <__call_exitprocs+0xc8>
 801638e:	6032      	str	r2, [r6, #0]
 8016390:	f1b9 0f00 	cmp.w	r9, #0
 8016394:	d002      	beq.n	801639c <__call_exitprocs+0x4c>
 8016396:	4648      	mov	r0, r9
 8016398:	f7fe fc42 	bl	8014c20 <free>
 801639c:	4620      	mov	r0, r4
 801639e:	f7fe fc3f 	bl	8014c20 <free>
 80163a2:	6832      	ldr	r2, [r6, #0]
 80163a4:	4614      	mov	r4, r2
 80163a6:	e7df      	b.n	8016368 <__call_exitprocs+0x18>
 80163a8:	b147      	cbz	r7, 80163bc <__call_exitprocs+0x6c>
 80163aa:	f1b9 0f00 	cmp.w	r9, #0
 80163ae:	d0e2      	beq.n	8016376 <__call_exitprocs+0x26>
 80163b0:	eb09 0285 	add.w	r2, r9, r5, lsl #2
 80163b4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80163b8:	42ba      	cmp	r2, r7
 80163ba:	d1dc      	bne.n	8016376 <__call_exitprocs+0x26>
 80163bc:	6861      	ldr	r1, [r4, #4]
 80163be:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 80163c2:	3901      	subs	r1, #1
 80163c4:	42a9      	cmp	r1, r5
 80163c6:	6882      	ldr	r2, [r0, #8]
 80163c8:	bf0e      	itee	eq
 80163ca:	6065      	streq	r5, [r4, #4]
 80163cc:	2300      	movne	r3, #0
 80163ce:	6083      	strne	r3, [r0, #8]
 80163d0:	2a00      	cmp	r2, #0
 80163d2:	d0d0      	beq.n	8016376 <__call_exitprocs+0x26>
 80163d4:	6863      	ldr	r3, [r4, #4]
 80163d6:	9300      	str	r3, [sp, #0]
 80163d8:	f1b9 0f00 	cmp.w	r9, #0
 80163dc:	d006      	beq.n	80163ec <__call_exitprocs+0x9c>
 80163de:	f8d9 1100 	ldr.w	r1, [r9, #256]	; 0x100
 80163e2:	fa0a fc05 	lsl.w	ip, sl, r5
 80163e6:	ea1c 0f01 	tst.w	ip, r1
 80163ea:	d108      	bne.n	80163fe <__call_exitprocs+0xae>
 80163ec:	4790      	blx	r2
 80163ee:	6862      	ldr	r2, [r4, #4]
 80163f0:	9b00      	ldr	r3, [sp, #0]
 80163f2:	429a      	cmp	r2, r3
 80163f4:	d1b3      	bne.n	801635e <__call_exitprocs+0xe>
 80163f6:	6832      	ldr	r2, [r6, #0]
 80163f8:	42a2      	cmp	r2, r4
 80163fa:	d0bc      	beq.n	8016376 <__call_exitprocs+0x26>
 80163fc:	e7af      	b.n	801635e <__call_exitprocs+0xe>
 80163fe:	f8d9 0104 	ldr.w	r0, [r9, #260]	; 0x104
 8016402:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 8016406:	ea1c 0f00 	tst.w	ip, r0
 801640a:	d102      	bne.n	8016412 <__call_exitprocs+0xc2>
 801640c:	9801      	ldr	r0, [sp, #4]
 801640e:	4790      	blx	r2
 8016410:	e7ed      	b.n	80163ee <__call_exitprocs+0x9e>
 8016412:	4608      	mov	r0, r1
 8016414:	4790      	blx	r2
 8016416:	e7ea      	b.n	80163ee <__call_exitprocs+0x9e>
 8016418:	4626      	mov	r6, r4
 801641a:	e7c3      	b.n	80163a4 <__call_exitprocs+0x54>
 801641c:	08014c21 	.word	0x08014c21
 8016420:	20000dd0 	.word	0x20000dd0

08016424 <__sflush_r>:
 8016424:	898a      	ldrh	r2, [r1, #12]
 8016426:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801642a:	4605      	mov	r5, r0
 801642c:	0710      	lsls	r0, r2, #28
 801642e:	460c      	mov	r4, r1
 8016430:	d458      	bmi.n	80164e4 <__sflush_r+0xc0>
 8016432:	684b      	ldr	r3, [r1, #4]
 8016434:	2b00      	cmp	r3, #0
 8016436:	dc05      	bgt.n	8016444 <__sflush_r+0x20>
 8016438:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801643a:	2b00      	cmp	r3, #0
 801643c:	dc02      	bgt.n	8016444 <__sflush_r+0x20>
 801643e:	2000      	movs	r0, #0
 8016440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016444:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016446:	2e00      	cmp	r6, #0
 8016448:	d0f9      	beq.n	801643e <__sflush_r+0x1a>
 801644a:	2300      	movs	r3, #0
 801644c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016450:	682f      	ldr	r7, [r5, #0]
 8016452:	6a21      	ldr	r1, [r4, #32]
 8016454:	602b      	str	r3, [r5, #0]
 8016456:	d032      	beq.n	80164be <__sflush_r+0x9a>
 8016458:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801645a:	89a3      	ldrh	r3, [r4, #12]
 801645c:	075a      	lsls	r2, r3, #29
 801645e:	d505      	bpl.n	801646c <__sflush_r+0x48>
 8016460:	6863      	ldr	r3, [r4, #4]
 8016462:	1ac0      	subs	r0, r0, r3
 8016464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016466:	b10b      	cbz	r3, 801646c <__sflush_r+0x48>
 8016468:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801646a:	1ac0      	subs	r0, r0, r3
 801646c:	2300      	movs	r3, #0
 801646e:	4602      	mov	r2, r0
 8016470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016472:	6a21      	ldr	r1, [r4, #32]
 8016474:	4628      	mov	r0, r5
 8016476:	47b0      	blx	r6
 8016478:	1c43      	adds	r3, r0, #1
 801647a:	89a3      	ldrh	r3, [r4, #12]
 801647c:	d106      	bne.n	801648c <__sflush_r+0x68>
 801647e:	6829      	ldr	r1, [r5, #0]
 8016480:	291d      	cmp	r1, #29
 8016482:	d848      	bhi.n	8016516 <__sflush_r+0xf2>
 8016484:	4a29      	ldr	r2, [pc, #164]	; (801652c <__sflush_r+0x108>)
 8016486:	40ca      	lsrs	r2, r1
 8016488:	07d6      	lsls	r6, r2, #31
 801648a:	d544      	bpl.n	8016516 <__sflush_r+0xf2>
 801648c:	2200      	movs	r2, #0
 801648e:	6062      	str	r2, [r4, #4]
 8016490:	04d9      	lsls	r1, r3, #19
 8016492:	6922      	ldr	r2, [r4, #16]
 8016494:	6022      	str	r2, [r4, #0]
 8016496:	d504      	bpl.n	80164a2 <__sflush_r+0x7e>
 8016498:	1c42      	adds	r2, r0, #1
 801649a:	d101      	bne.n	80164a0 <__sflush_r+0x7c>
 801649c:	682b      	ldr	r3, [r5, #0]
 801649e:	b903      	cbnz	r3, 80164a2 <__sflush_r+0x7e>
 80164a0:	6560      	str	r0, [r4, #84]	; 0x54
 80164a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80164a4:	602f      	str	r7, [r5, #0]
 80164a6:	2900      	cmp	r1, #0
 80164a8:	d0c9      	beq.n	801643e <__sflush_r+0x1a>
 80164aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80164ae:	4299      	cmp	r1, r3
 80164b0:	d002      	beq.n	80164b8 <__sflush_r+0x94>
 80164b2:	4628      	mov	r0, r5
 80164b4:	f7fe fbf6 	bl	8014ca4 <_free_r>
 80164b8:	2000      	movs	r0, #0
 80164ba:	6360      	str	r0, [r4, #52]	; 0x34
 80164bc:	e7c0      	b.n	8016440 <__sflush_r+0x1c>
 80164be:	2301      	movs	r3, #1
 80164c0:	4628      	mov	r0, r5
 80164c2:	47b0      	blx	r6
 80164c4:	1c41      	adds	r1, r0, #1
 80164c6:	d1c8      	bne.n	801645a <__sflush_r+0x36>
 80164c8:	682b      	ldr	r3, [r5, #0]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d0c5      	beq.n	801645a <__sflush_r+0x36>
 80164ce:	2b1d      	cmp	r3, #29
 80164d0:	d001      	beq.n	80164d6 <__sflush_r+0xb2>
 80164d2:	2b16      	cmp	r3, #22
 80164d4:	d101      	bne.n	80164da <__sflush_r+0xb6>
 80164d6:	602f      	str	r7, [r5, #0]
 80164d8:	e7b1      	b.n	801643e <__sflush_r+0x1a>
 80164da:	89a3      	ldrh	r3, [r4, #12]
 80164dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164e0:	81a3      	strh	r3, [r4, #12]
 80164e2:	e7ad      	b.n	8016440 <__sflush_r+0x1c>
 80164e4:	690f      	ldr	r7, [r1, #16]
 80164e6:	2f00      	cmp	r7, #0
 80164e8:	d0a9      	beq.n	801643e <__sflush_r+0x1a>
 80164ea:	0793      	lsls	r3, r2, #30
 80164ec:	680e      	ldr	r6, [r1, #0]
 80164ee:	bf08      	it	eq
 80164f0:	694b      	ldreq	r3, [r1, #20]
 80164f2:	600f      	str	r7, [r1, #0]
 80164f4:	bf18      	it	ne
 80164f6:	2300      	movne	r3, #0
 80164f8:	eba6 0807 	sub.w	r8, r6, r7
 80164fc:	608b      	str	r3, [r1, #8]
 80164fe:	f1b8 0f00 	cmp.w	r8, #0
 8016502:	dd9c      	ble.n	801643e <__sflush_r+0x1a>
 8016504:	4643      	mov	r3, r8
 8016506:	463a      	mov	r2, r7
 8016508:	6a21      	ldr	r1, [r4, #32]
 801650a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801650c:	4628      	mov	r0, r5
 801650e:	47b0      	blx	r6
 8016510:	2800      	cmp	r0, #0
 8016512:	dc06      	bgt.n	8016522 <__sflush_r+0xfe>
 8016514:	89a3      	ldrh	r3, [r4, #12]
 8016516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801651a:	81a3      	strh	r3, [r4, #12]
 801651c:	f04f 30ff 	mov.w	r0, #4294967295
 8016520:	e78e      	b.n	8016440 <__sflush_r+0x1c>
 8016522:	4407      	add	r7, r0
 8016524:	eba8 0800 	sub.w	r8, r8, r0
 8016528:	e7e9      	b.n	80164fe <__sflush_r+0xda>
 801652a:	bf00      	nop
 801652c:	20400001 	.word	0x20400001

08016530 <_fflush_r>:
 8016530:	b538      	push	{r3, r4, r5, lr}
 8016532:	690b      	ldr	r3, [r1, #16]
 8016534:	4605      	mov	r5, r0
 8016536:	460c      	mov	r4, r1
 8016538:	b1db      	cbz	r3, 8016572 <_fflush_r+0x42>
 801653a:	b118      	cbz	r0, 8016544 <_fflush_r+0x14>
 801653c:	6983      	ldr	r3, [r0, #24]
 801653e:	b90b      	cbnz	r3, 8016544 <_fflush_r+0x14>
 8016540:	f000 f860 	bl	8016604 <__sinit>
 8016544:	4b0c      	ldr	r3, [pc, #48]	; (8016578 <_fflush_r+0x48>)
 8016546:	429c      	cmp	r4, r3
 8016548:	d109      	bne.n	801655e <_fflush_r+0x2e>
 801654a:	686c      	ldr	r4, [r5, #4]
 801654c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016550:	b17b      	cbz	r3, 8016572 <_fflush_r+0x42>
 8016552:	4621      	mov	r1, r4
 8016554:	4628      	mov	r0, r5
 8016556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801655a:	f7ff bf63 	b.w	8016424 <__sflush_r>
 801655e:	4b07      	ldr	r3, [pc, #28]	; (801657c <_fflush_r+0x4c>)
 8016560:	429c      	cmp	r4, r3
 8016562:	d101      	bne.n	8016568 <_fflush_r+0x38>
 8016564:	68ac      	ldr	r4, [r5, #8]
 8016566:	e7f1      	b.n	801654c <_fflush_r+0x1c>
 8016568:	4b05      	ldr	r3, [pc, #20]	; (8016580 <_fflush_r+0x50>)
 801656a:	429c      	cmp	r4, r3
 801656c:	bf08      	it	eq
 801656e:	68ec      	ldreq	r4, [r5, #12]
 8016570:	e7ec      	b.n	801654c <_fflush_r+0x1c>
 8016572:	2000      	movs	r0, #0
 8016574:	bd38      	pop	{r3, r4, r5, pc}
 8016576:	bf00      	nop
 8016578:	08036b58 	.word	0x08036b58
 801657c:	08036b78 	.word	0x08036b78
 8016580:	08036b38 	.word	0x08036b38

08016584 <std>:
 8016584:	2300      	movs	r3, #0
 8016586:	b510      	push	{r4, lr}
 8016588:	4604      	mov	r4, r0
 801658a:	e9c0 3300 	strd	r3, r3, [r0]
 801658e:	6083      	str	r3, [r0, #8]
 8016590:	8181      	strh	r1, [r0, #12]
 8016592:	6643      	str	r3, [r0, #100]	; 0x64
 8016594:	81c2      	strh	r2, [r0, #14]
 8016596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801659a:	6183      	str	r3, [r0, #24]
 801659c:	4619      	mov	r1, r3
 801659e:	2208      	movs	r2, #8
 80165a0:	305c      	adds	r0, #92	; 0x5c
 80165a2:	f7fe fb69 	bl	8014c78 <memset>
 80165a6:	4b05      	ldr	r3, [pc, #20]	; (80165bc <std+0x38>)
 80165a8:	6263      	str	r3, [r4, #36]	; 0x24
 80165aa:	4b05      	ldr	r3, [pc, #20]	; (80165c0 <std+0x3c>)
 80165ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80165ae:	4b05      	ldr	r3, [pc, #20]	; (80165c4 <std+0x40>)
 80165b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80165b2:	4b05      	ldr	r3, [pc, #20]	; (80165c8 <std+0x44>)
 80165b4:	6224      	str	r4, [r4, #32]
 80165b6:	6323      	str	r3, [r4, #48]	; 0x30
 80165b8:	bd10      	pop	{r4, pc}
 80165ba:	bf00      	nop
 80165bc:	08017949 	.word	0x08017949
 80165c0:	0801796b 	.word	0x0801796b
 80165c4:	080179a3 	.word	0x080179a3
 80165c8:	080179c7 	.word	0x080179c7

080165cc <_cleanup_r>:
 80165cc:	4901      	ldr	r1, [pc, #4]	; (80165d4 <_cleanup_r+0x8>)
 80165ce:	f000 b885 	b.w	80166dc <_fwalk_reent>
 80165d2:	bf00      	nop
 80165d4:	08016531 	.word	0x08016531

080165d8 <__sfmoreglue>:
 80165d8:	b570      	push	{r4, r5, r6, lr}
 80165da:	1e4a      	subs	r2, r1, #1
 80165dc:	2568      	movs	r5, #104	; 0x68
 80165de:	4355      	muls	r5, r2
 80165e0:	460e      	mov	r6, r1
 80165e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80165e6:	f7fe fbab 	bl	8014d40 <_malloc_r>
 80165ea:	4604      	mov	r4, r0
 80165ec:	b140      	cbz	r0, 8016600 <__sfmoreglue+0x28>
 80165ee:	2100      	movs	r1, #0
 80165f0:	e9c0 1600 	strd	r1, r6, [r0]
 80165f4:	300c      	adds	r0, #12
 80165f6:	60a0      	str	r0, [r4, #8]
 80165f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80165fc:	f7fe fb3c 	bl	8014c78 <memset>
 8016600:	4620      	mov	r0, r4
 8016602:	bd70      	pop	{r4, r5, r6, pc}

08016604 <__sinit>:
 8016604:	6983      	ldr	r3, [r0, #24]
 8016606:	b510      	push	{r4, lr}
 8016608:	4604      	mov	r4, r0
 801660a:	bb33      	cbnz	r3, 801665a <__sinit+0x56>
 801660c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016610:	6503      	str	r3, [r0, #80]	; 0x50
 8016612:	4b12      	ldr	r3, [pc, #72]	; (801665c <__sinit+0x58>)
 8016614:	4a12      	ldr	r2, [pc, #72]	; (8016660 <__sinit+0x5c>)
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	6282      	str	r2, [r0, #40]	; 0x28
 801661a:	4298      	cmp	r0, r3
 801661c:	bf04      	itt	eq
 801661e:	2301      	moveq	r3, #1
 8016620:	6183      	streq	r3, [r0, #24]
 8016622:	f000 f81f 	bl	8016664 <__sfp>
 8016626:	6060      	str	r0, [r4, #4]
 8016628:	4620      	mov	r0, r4
 801662a:	f000 f81b 	bl	8016664 <__sfp>
 801662e:	60a0      	str	r0, [r4, #8]
 8016630:	4620      	mov	r0, r4
 8016632:	f000 f817 	bl	8016664 <__sfp>
 8016636:	2200      	movs	r2, #0
 8016638:	60e0      	str	r0, [r4, #12]
 801663a:	2104      	movs	r1, #4
 801663c:	6860      	ldr	r0, [r4, #4]
 801663e:	f7ff ffa1 	bl	8016584 <std>
 8016642:	2201      	movs	r2, #1
 8016644:	2109      	movs	r1, #9
 8016646:	68a0      	ldr	r0, [r4, #8]
 8016648:	f7ff ff9c 	bl	8016584 <std>
 801664c:	2202      	movs	r2, #2
 801664e:	2112      	movs	r1, #18
 8016650:	68e0      	ldr	r0, [r4, #12]
 8016652:	f7ff ff97 	bl	8016584 <std>
 8016656:	2301      	movs	r3, #1
 8016658:	61a3      	str	r3, [r4, #24]
 801665a:	bd10      	pop	{r4, pc}
 801665c:	08036aa4 	.word	0x08036aa4
 8016660:	080165cd 	.word	0x080165cd

08016664 <__sfp>:
 8016664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016666:	4b1b      	ldr	r3, [pc, #108]	; (80166d4 <__sfp+0x70>)
 8016668:	681e      	ldr	r6, [r3, #0]
 801666a:	69b3      	ldr	r3, [r6, #24]
 801666c:	4607      	mov	r7, r0
 801666e:	b913      	cbnz	r3, 8016676 <__sfp+0x12>
 8016670:	4630      	mov	r0, r6
 8016672:	f7ff ffc7 	bl	8016604 <__sinit>
 8016676:	3648      	adds	r6, #72	; 0x48
 8016678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801667c:	3b01      	subs	r3, #1
 801667e:	d503      	bpl.n	8016688 <__sfp+0x24>
 8016680:	6833      	ldr	r3, [r6, #0]
 8016682:	b133      	cbz	r3, 8016692 <__sfp+0x2e>
 8016684:	6836      	ldr	r6, [r6, #0]
 8016686:	e7f7      	b.n	8016678 <__sfp+0x14>
 8016688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801668c:	b16d      	cbz	r5, 80166aa <__sfp+0x46>
 801668e:	3468      	adds	r4, #104	; 0x68
 8016690:	e7f4      	b.n	801667c <__sfp+0x18>
 8016692:	2104      	movs	r1, #4
 8016694:	4638      	mov	r0, r7
 8016696:	f7ff ff9f 	bl	80165d8 <__sfmoreglue>
 801669a:	6030      	str	r0, [r6, #0]
 801669c:	2800      	cmp	r0, #0
 801669e:	d1f1      	bne.n	8016684 <__sfp+0x20>
 80166a0:	230c      	movs	r3, #12
 80166a2:	603b      	str	r3, [r7, #0]
 80166a4:	4604      	mov	r4, r0
 80166a6:	4620      	mov	r0, r4
 80166a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166aa:	4b0b      	ldr	r3, [pc, #44]	; (80166d8 <__sfp+0x74>)
 80166ac:	6665      	str	r5, [r4, #100]	; 0x64
 80166ae:	e9c4 5500 	strd	r5, r5, [r4]
 80166b2:	60a5      	str	r5, [r4, #8]
 80166b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80166b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80166bc:	2208      	movs	r2, #8
 80166be:	4629      	mov	r1, r5
 80166c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80166c4:	f7fe fad8 	bl	8014c78 <memset>
 80166c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80166cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80166d0:	e7e9      	b.n	80166a6 <__sfp+0x42>
 80166d2:	bf00      	nop
 80166d4:	08036aa4 	.word	0x08036aa4
 80166d8:	ffff0001 	.word	0xffff0001

080166dc <_fwalk_reent>:
 80166dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80166e0:	4680      	mov	r8, r0
 80166e2:	4689      	mov	r9, r1
 80166e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80166e8:	2600      	movs	r6, #0
 80166ea:	b914      	cbnz	r4, 80166f2 <_fwalk_reent+0x16>
 80166ec:	4630      	mov	r0, r6
 80166ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80166f6:	3f01      	subs	r7, #1
 80166f8:	d501      	bpl.n	80166fe <_fwalk_reent+0x22>
 80166fa:	6824      	ldr	r4, [r4, #0]
 80166fc:	e7f5      	b.n	80166ea <_fwalk_reent+0xe>
 80166fe:	89ab      	ldrh	r3, [r5, #12]
 8016700:	2b01      	cmp	r3, #1
 8016702:	d907      	bls.n	8016714 <_fwalk_reent+0x38>
 8016704:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016708:	3301      	adds	r3, #1
 801670a:	d003      	beq.n	8016714 <_fwalk_reent+0x38>
 801670c:	4629      	mov	r1, r5
 801670e:	4640      	mov	r0, r8
 8016710:	47c8      	blx	r9
 8016712:	4306      	orrs	r6, r0
 8016714:	3568      	adds	r5, #104	; 0x68
 8016716:	e7ee      	b.n	80166f6 <_fwalk_reent+0x1a>

08016718 <rshift>:
 8016718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801671a:	6906      	ldr	r6, [r0, #16]
 801671c:	114b      	asrs	r3, r1, #5
 801671e:	429e      	cmp	r6, r3
 8016720:	f100 0414 	add.w	r4, r0, #20
 8016724:	dd30      	ble.n	8016788 <rshift+0x70>
 8016726:	f011 011f 	ands.w	r1, r1, #31
 801672a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801672e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8016732:	d108      	bne.n	8016746 <rshift+0x2e>
 8016734:	4621      	mov	r1, r4
 8016736:	42b2      	cmp	r2, r6
 8016738:	460b      	mov	r3, r1
 801673a:	d211      	bcs.n	8016760 <rshift+0x48>
 801673c:	f852 3b04 	ldr.w	r3, [r2], #4
 8016740:	f841 3b04 	str.w	r3, [r1], #4
 8016744:	e7f7      	b.n	8016736 <rshift+0x1e>
 8016746:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801674a:	f1c1 0c20 	rsb	ip, r1, #32
 801674e:	40cd      	lsrs	r5, r1
 8016750:	3204      	adds	r2, #4
 8016752:	4623      	mov	r3, r4
 8016754:	42b2      	cmp	r2, r6
 8016756:	4617      	mov	r7, r2
 8016758:	d30c      	bcc.n	8016774 <rshift+0x5c>
 801675a:	601d      	str	r5, [r3, #0]
 801675c:	b105      	cbz	r5, 8016760 <rshift+0x48>
 801675e:	3304      	adds	r3, #4
 8016760:	1b1a      	subs	r2, r3, r4
 8016762:	42a3      	cmp	r3, r4
 8016764:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016768:	bf08      	it	eq
 801676a:	2300      	moveq	r3, #0
 801676c:	6102      	str	r2, [r0, #16]
 801676e:	bf08      	it	eq
 8016770:	6143      	streq	r3, [r0, #20]
 8016772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016774:	683f      	ldr	r7, [r7, #0]
 8016776:	fa07 f70c 	lsl.w	r7, r7, ip
 801677a:	433d      	orrs	r5, r7
 801677c:	f843 5b04 	str.w	r5, [r3], #4
 8016780:	f852 5b04 	ldr.w	r5, [r2], #4
 8016784:	40cd      	lsrs	r5, r1
 8016786:	e7e5      	b.n	8016754 <rshift+0x3c>
 8016788:	4623      	mov	r3, r4
 801678a:	e7e9      	b.n	8016760 <rshift+0x48>

0801678c <__hexdig_fun>:
 801678c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016790:	2b09      	cmp	r3, #9
 8016792:	d802      	bhi.n	801679a <__hexdig_fun+0xe>
 8016794:	3820      	subs	r0, #32
 8016796:	b2c0      	uxtb	r0, r0
 8016798:	4770      	bx	lr
 801679a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801679e:	2b05      	cmp	r3, #5
 80167a0:	d801      	bhi.n	80167a6 <__hexdig_fun+0x1a>
 80167a2:	3847      	subs	r0, #71	; 0x47
 80167a4:	e7f7      	b.n	8016796 <__hexdig_fun+0xa>
 80167a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80167aa:	2b05      	cmp	r3, #5
 80167ac:	d801      	bhi.n	80167b2 <__hexdig_fun+0x26>
 80167ae:	3827      	subs	r0, #39	; 0x27
 80167b0:	e7f1      	b.n	8016796 <__hexdig_fun+0xa>
 80167b2:	2000      	movs	r0, #0
 80167b4:	4770      	bx	lr

080167b6 <__gethex>:
 80167b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167ba:	b08b      	sub	sp, #44	; 0x2c
 80167bc:	468a      	mov	sl, r1
 80167be:	9002      	str	r0, [sp, #8]
 80167c0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80167c2:	9306      	str	r3, [sp, #24]
 80167c4:	4690      	mov	r8, r2
 80167c6:	f000 facd 	bl	8016d64 <__localeconv_l>
 80167ca:	6803      	ldr	r3, [r0, #0]
 80167cc:	9303      	str	r3, [sp, #12]
 80167ce:	4618      	mov	r0, r3
 80167d0:	f7e9 fd10 	bl	80001f4 <strlen>
 80167d4:	9b03      	ldr	r3, [sp, #12]
 80167d6:	9001      	str	r0, [sp, #4]
 80167d8:	4403      	add	r3, r0
 80167da:	f04f 0b00 	mov.w	fp, #0
 80167de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80167e2:	9307      	str	r3, [sp, #28]
 80167e4:	f8da 3000 	ldr.w	r3, [sl]
 80167e8:	3302      	adds	r3, #2
 80167ea:	461f      	mov	r7, r3
 80167ec:	f813 0b01 	ldrb.w	r0, [r3], #1
 80167f0:	2830      	cmp	r0, #48	; 0x30
 80167f2:	d06c      	beq.n	80168ce <__gethex+0x118>
 80167f4:	f7ff ffca 	bl	801678c <__hexdig_fun>
 80167f8:	4604      	mov	r4, r0
 80167fa:	2800      	cmp	r0, #0
 80167fc:	d16a      	bne.n	80168d4 <__gethex+0x11e>
 80167fe:	9a01      	ldr	r2, [sp, #4]
 8016800:	9903      	ldr	r1, [sp, #12]
 8016802:	4638      	mov	r0, r7
 8016804:	f7fe fe8e 	bl	8015524 <strncmp>
 8016808:	2800      	cmp	r0, #0
 801680a:	d166      	bne.n	80168da <__gethex+0x124>
 801680c:	9b01      	ldr	r3, [sp, #4]
 801680e:	5cf8      	ldrb	r0, [r7, r3]
 8016810:	18fe      	adds	r6, r7, r3
 8016812:	f7ff ffbb 	bl	801678c <__hexdig_fun>
 8016816:	2800      	cmp	r0, #0
 8016818:	d062      	beq.n	80168e0 <__gethex+0x12a>
 801681a:	4633      	mov	r3, r6
 801681c:	7818      	ldrb	r0, [r3, #0]
 801681e:	2830      	cmp	r0, #48	; 0x30
 8016820:	461f      	mov	r7, r3
 8016822:	f103 0301 	add.w	r3, r3, #1
 8016826:	d0f9      	beq.n	801681c <__gethex+0x66>
 8016828:	f7ff ffb0 	bl	801678c <__hexdig_fun>
 801682c:	fab0 f580 	clz	r5, r0
 8016830:	096d      	lsrs	r5, r5, #5
 8016832:	4634      	mov	r4, r6
 8016834:	f04f 0b01 	mov.w	fp, #1
 8016838:	463a      	mov	r2, r7
 801683a:	4616      	mov	r6, r2
 801683c:	3201      	adds	r2, #1
 801683e:	7830      	ldrb	r0, [r6, #0]
 8016840:	f7ff ffa4 	bl	801678c <__hexdig_fun>
 8016844:	2800      	cmp	r0, #0
 8016846:	d1f8      	bne.n	801683a <__gethex+0x84>
 8016848:	9a01      	ldr	r2, [sp, #4]
 801684a:	9903      	ldr	r1, [sp, #12]
 801684c:	4630      	mov	r0, r6
 801684e:	f7fe fe69 	bl	8015524 <strncmp>
 8016852:	b950      	cbnz	r0, 801686a <__gethex+0xb4>
 8016854:	b954      	cbnz	r4, 801686c <__gethex+0xb6>
 8016856:	9b01      	ldr	r3, [sp, #4]
 8016858:	18f4      	adds	r4, r6, r3
 801685a:	4622      	mov	r2, r4
 801685c:	4616      	mov	r6, r2
 801685e:	3201      	adds	r2, #1
 8016860:	7830      	ldrb	r0, [r6, #0]
 8016862:	f7ff ff93 	bl	801678c <__hexdig_fun>
 8016866:	2800      	cmp	r0, #0
 8016868:	d1f8      	bne.n	801685c <__gethex+0xa6>
 801686a:	b10c      	cbz	r4, 8016870 <__gethex+0xba>
 801686c:	1ba4      	subs	r4, r4, r6
 801686e:	00a4      	lsls	r4, r4, #2
 8016870:	7833      	ldrb	r3, [r6, #0]
 8016872:	2b50      	cmp	r3, #80	; 0x50
 8016874:	d001      	beq.n	801687a <__gethex+0xc4>
 8016876:	2b70      	cmp	r3, #112	; 0x70
 8016878:	d140      	bne.n	80168fc <__gethex+0x146>
 801687a:	7873      	ldrb	r3, [r6, #1]
 801687c:	2b2b      	cmp	r3, #43	; 0x2b
 801687e:	d031      	beq.n	80168e4 <__gethex+0x12e>
 8016880:	2b2d      	cmp	r3, #45	; 0x2d
 8016882:	d033      	beq.n	80168ec <__gethex+0x136>
 8016884:	1c71      	adds	r1, r6, #1
 8016886:	f04f 0900 	mov.w	r9, #0
 801688a:	7808      	ldrb	r0, [r1, #0]
 801688c:	f7ff ff7e 	bl	801678c <__hexdig_fun>
 8016890:	1e43      	subs	r3, r0, #1
 8016892:	b2db      	uxtb	r3, r3
 8016894:	2b18      	cmp	r3, #24
 8016896:	d831      	bhi.n	80168fc <__gethex+0x146>
 8016898:	f1a0 0210 	sub.w	r2, r0, #16
 801689c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80168a0:	f7ff ff74 	bl	801678c <__hexdig_fun>
 80168a4:	1e43      	subs	r3, r0, #1
 80168a6:	b2db      	uxtb	r3, r3
 80168a8:	2b18      	cmp	r3, #24
 80168aa:	d922      	bls.n	80168f2 <__gethex+0x13c>
 80168ac:	f1b9 0f00 	cmp.w	r9, #0
 80168b0:	d000      	beq.n	80168b4 <__gethex+0xfe>
 80168b2:	4252      	negs	r2, r2
 80168b4:	4414      	add	r4, r2
 80168b6:	f8ca 1000 	str.w	r1, [sl]
 80168ba:	b30d      	cbz	r5, 8016900 <__gethex+0x14a>
 80168bc:	f1bb 0f00 	cmp.w	fp, #0
 80168c0:	bf0c      	ite	eq
 80168c2:	2706      	moveq	r7, #6
 80168c4:	2700      	movne	r7, #0
 80168c6:	4638      	mov	r0, r7
 80168c8:	b00b      	add	sp, #44	; 0x2c
 80168ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ce:	f10b 0b01 	add.w	fp, fp, #1
 80168d2:	e78a      	b.n	80167ea <__gethex+0x34>
 80168d4:	2500      	movs	r5, #0
 80168d6:	462c      	mov	r4, r5
 80168d8:	e7ae      	b.n	8016838 <__gethex+0x82>
 80168da:	463e      	mov	r6, r7
 80168dc:	2501      	movs	r5, #1
 80168de:	e7c7      	b.n	8016870 <__gethex+0xba>
 80168e0:	4604      	mov	r4, r0
 80168e2:	e7fb      	b.n	80168dc <__gethex+0x126>
 80168e4:	f04f 0900 	mov.w	r9, #0
 80168e8:	1cb1      	adds	r1, r6, #2
 80168ea:	e7ce      	b.n	801688a <__gethex+0xd4>
 80168ec:	f04f 0901 	mov.w	r9, #1
 80168f0:	e7fa      	b.n	80168e8 <__gethex+0x132>
 80168f2:	230a      	movs	r3, #10
 80168f4:	fb03 0202 	mla	r2, r3, r2, r0
 80168f8:	3a10      	subs	r2, #16
 80168fa:	e7cf      	b.n	801689c <__gethex+0xe6>
 80168fc:	4631      	mov	r1, r6
 80168fe:	e7da      	b.n	80168b6 <__gethex+0x100>
 8016900:	1bf3      	subs	r3, r6, r7
 8016902:	3b01      	subs	r3, #1
 8016904:	4629      	mov	r1, r5
 8016906:	2b07      	cmp	r3, #7
 8016908:	dc49      	bgt.n	801699e <__gethex+0x1e8>
 801690a:	9802      	ldr	r0, [sp, #8]
 801690c:	f000 faa4 	bl	8016e58 <_Balloc>
 8016910:	9b01      	ldr	r3, [sp, #4]
 8016912:	f100 0914 	add.w	r9, r0, #20
 8016916:	f04f 0b00 	mov.w	fp, #0
 801691a:	f1c3 0301 	rsb	r3, r3, #1
 801691e:	4605      	mov	r5, r0
 8016920:	f8cd 9010 	str.w	r9, [sp, #16]
 8016924:	46da      	mov	sl, fp
 8016926:	9308      	str	r3, [sp, #32]
 8016928:	42b7      	cmp	r7, r6
 801692a:	d33b      	bcc.n	80169a4 <__gethex+0x1ee>
 801692c:	9804      	ldr	r0, [sp, #16]
 801692e:	f840 ab04 	str.w	sl, [r0], #4
 8016932:	eba0 0009 	sub.w	r0, r0, r9
 8016936:	1080      	asrs	r0, r0, #2
 8016938:	6128      	str	r0, [r5, #16]
 801693a:	0147      	lsls	r7, r0, #5
 801693c:	4650      	mov	r0, sl
 801693e:	f000 fb4f 	bl	8016fe0 <__hi0bits>
 8016942:	f8d8 6000 	ldr.w	r6, [r8]
 8016946:	1a3f      	subs	r7, r7, r0
 8016948:	42b7      	cmp	r7, r6
 801694a:	dd64      	ble.n	8016a16 <__gethex+0x260>
 801694c:	1bbf      	subs	r7, r7, r6
 801694e:	4639      	mov	r1, r7
 8016950:	4628      	mov	r0, r5
 8016952:	f000 fe5f 	bl	8017614 <__any_on>
 8016956:	4682      	mov	sl, r0
 8016958:	b178      	cbz	r0, 801697a <__gethex+0x1c4>
 801695a:	1e7b      	subs	r3, r7, #1
 801695c:	1159      	asrs	r1, r3, #5
 801695e:	f003 021f 	and.w	r2, r3, #31
 8016962:	f04f 0a01 	mov.w	sl, #1
 8016966:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801696a:	fa0a f202 	lsl.w	r2, sl, r2
 801696e:	420a      	tst	r2, r1
 8016970:	d003      	beq.n	801697a <__gethex+0x1c4>
 8016972:	4553      	cmp	r3, sl
 8016974:	dc46      	bgt.n	8016a04 <__gethex+0x24e>
 8016976:	f04f 0a02 	mov.w	sl, #2
 801697a:	4639      	mov	r1, r7
 801697c:	4628      	mov	r0, r5
 801697e:	f7ff fecb 	bl	8016718 <rshift>
 8016982:	443c      	add	r4, r7
 8016984:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016988:	42a3      	cmp	r3, r4
 801698a:	da52      	bge.n	8016a32 <__gethex+0x27c>
 801698c:	4629      	mov	r1, r5
 801698e:	9802      	ldr	r0, [sp, #8]
 8016990:	f000 fa96 	bl	8016ec0 <_Bfree>
 8016994:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016996:	2300      	movs	r3, #0
 8016998:	6013      	str	r3, [r2, #0]
 801699a:	27a3      	movs	r7, #163	; 0xa3
 801699c:	e793      	b.n	80168c6 <__gethex+0x110>
 801699e:	3101      	adds	r1, #1
 80169a0:	105b      	asrs	r3, r3, #1
 80169a2:	e7b0      	b.n	8016906 <__gethex+0x150>
 80169a4:	1e73      	subs	r3, r6, #1
 80169a6:	9305      	str	r3, [sp, #20]
 80169a8:	9a07      	ldr	r2, [sp, #28]
 80169aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80169ae:	4293      	cmp	r3, r2
 80169b0:	d018      	beq.n	80169e4 <__gethex+0x22e>
 80169b2:	f1bb 0f20 	cmp.w	fp, #32
 80169b6:	d107      	bne.n	80169c8 <__gethex+0x212>
 80169b8:	9b04      	ldr	r3, [sp, #16]
 80169ba:	f8c3 a000 	str.w	sl, [r3]
 80169be:	3304      	adds	r3, #4
 80169c0:	f04f 0a00 	mov.w	sl, #0
 80169c4:	9304      	str	r3, [sp, #16]
 80169c6:	46d3      	mov	fp, sl
 80169c8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80169cc:	f7ff fede 	bl	801678c <__hexdig_fun>
 80169d0:	f000 000f 	and.w	r0, r0, #15
 80169d4:	fa00 f00b 	lsl.w	r0, r0, fp
 80169d8:	ea4a 0a00 	orr.w	sl, sl, r0
 80169dc:	f10b 0b04 	add.w	fp, fp, #4
 80169e0:	9b05      	ldr	r3, [sp, #20]
 80169e2:	e00d      	b.n	8016a00 <__gethex+0x24a>
 80169e4:	9b05      	ldr	r3, [sp, #20]
 80169e6:	9a08      	ldr	r2, [sp, #32]
 80169e8:	4413      	add	r3, r2
 80169ea:	42bb      	cmp	r3, r7
 80169ec:	d3e1      	bcc.n	80169b2 <__gethex+0x1fc>
 80169ee:	4618      	mov	r0, r3
 80169f0:	9a01      	ldr	r2, [sp, #4]
 80169f2:	9903      	ldr	r1, [sp, #12]
 80169f4:	9309      	str	r3, [sp, #36]	; 0x24
 80169f6:	f7fe fd95 	bl	8015524 <strncmp>
 80169fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80169fc:	2800      	cmp	r0, #0
 80169fe:	d1d8      	bne.n	80169b2 <__gethex+0x1fc>
 8016a00:	461e      	mov	r6, r3
 8016a02:	e791      	b.n	8016928 <__gethex+0x172>
 8016a04:	1eb9      	subs	r1, r7, #2
 8016a06:	4628      	mov	r0, r5
 8016a08:	f000 fe04 	bl	8017614 <__any_on>
 8016a0c:	2800      	cmp	r0, #0
 8016a0e:	d0b2      	beq.n	8016976 <__gethex+0x1c0>
 8016a10:	f04f 0a03 	mov.w	sl, #3
 8016a14:	e7b1      	b.n	801697a <__gethex+0x1c4>
 8016a16:	da09      	bge.n	8016a2c <__gethex+0x276>
 8016a18:	1bf7      	subs	r7, r6, r7
 8016a1a:	4629      	mov	r1, r5
 8016a1c:	463a      	mov	r2, r7
 8016a1e:	9802      	ldr	r0, [sp, #8]
 8016a20:	f000 fc1a 	bl	8017258 <__lshift>
 8016a24:	1be4      	subs	r4, r4, r7
 8016a26:	4605      	mov	r5, r0
 8016a28:	f100 0914 	add.w	r9, r0, #20
 8016a2c:	f04f 0a00 	mov.w	sl, #0
 8016a30:	e7a8      	b.n	8016984 <__gethex+0x1ce>
 8016a32:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8016a36:	42a0      	cmp	r0, r4
 8016a38:	dd6a      	ble.n	8016b10 <__gethex+0x35a>
 8016a3a:	1b04      	subs	r4, r0, r4
 8016a3c:	42a6      	cmp	r6, r4
 8016a3e:	dc2e      	bgt.n	8016a9e <__gethex+0x2e8>
 8016a40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016a44:	2b02      	cmp	r3, #2
 8016a46:	d022      	beq.n	8016a8e <__gethex+0x2d8>
 8016a48:	2b03      	cmp	r3, #3
 8016a4a:	d024      	beq.n	8016a96 <__gethex+0x2e0>
 8016a4c:	2b01      	cmp	r3, #1
 8016a4e:	d115      	bne.n	8016a7c <__gethex+0x2c6>
 8016a50:	42a6      	cmp	r6, r4
 8016a52:	d113      	bne.n	8016a7c <__gethex+0x2c6>
 8016a54:	2e01      	cmp	r6, #1
 8016a56:	dc0b      	bgt.n	8016a70 <__gethex+0x2ba>
 8016a58:	9a06      	ldr	r2, [sp, #24]
 8016a5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016a5e:	6013      	str	r3, [r2, #0]
 8016a60:	2301      	movs	r3, #1
 8016a62:	612b      	str	r3, [r5, #16]
 8016a64:	f8c9 3000 	str.w	r3, [r9]
 8016a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016a6a:	2762      	movs	r7, #98	; 0x62
 8016a6c:	601d      	str	r5, [r3, #0]
 8016a6e:	e72a      	b.n	80168c6 <__gethex+0x110>
 8016a70:	1e71      	subs	r1, r6, #1
 8016a72:	4628      	mov	r0, r5
 8016a74:	f000 fdce 	bl	8017614 <__any_on>
 8016a78:	2800      	cmp	r0, #0
 8016a7a:	d1ed      	bne.n	8016a58 <__gethex+0x2a2>
 8016a7c:	4629      	mov	r1, r5
 8016a7e:	9802      	ldr	r0, [sp, #8]
 8016a80:	f000 fa1e 	bl	8016ec0 <_Bfree>
 8016a84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016a86:	2300      	movs	r3, #0
 8016a88:	6013      	str	r3, [r2, #0]
 8016a8a:	2750      	movs	r7, #80	; 0x50
 8016a8c:	e71b      	b.n	80168c6 <__gethex+0x110>
 8016a8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d0e1      	beq.n	8016a58 <__gethex+0x2a2>
 8016a94:	e7f2      	b.n	8016a7c <__gethex+0x2c6>
 8016a96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d1dd      	bne.n	8016a58 <__gethex+0x2a2>
 8016a9c:	e7ee      	b.n	8016a7c <__gethex+0x2c6>
 8016a9e:	1e67      	subs	r7, r4, #1
 8016aa0:	f1ba 0f00 	cmp.w	sl, #0
 8016aa4:	d131      	bne.n	8016b0a <__gethex+0x354>
 8016aa6:	b127      	cbz	r7, 8016ab2 <__gethex+0x2fc>
 8016aa8:	4639      	mov	r1, r7
 8016aaa:	4628      	mov	r0, r5
 8016aac:	f000 fdb2 	bl	8017614 <__any_on>
 8016ab0:	4682      	mov	sl, r0
 8016ab2:	117a      	asrs	r2, r7, #5
 8016ab4:	2301      	movs	r3, #1
 8016ab6:	f007 071f 	and.w	r7, r7, #31
 8016aba:	fa03 f707 	lsl.w	r7, r3, r7
 8016abe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016ac2:	4621      	mov	r1, r4
 8016ac4:	421f      	tst	r7, r3
 8016ac6:	4628      	mov	r0, r5
 8016ac8:	bf18      	it	ne
 8016aca:	f04a 0a02 	orrne.w	sl, sl, #2
 8016ace:	1b36      	subs	r6, r6, r4
 8016ad0:	f7ff fe22 	bl	8016718 <rshift>
 8016ad4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016ad8:	2702      	movs	r7, #2
 8016ada:	f1ba 0f00 	cmp.w	sl, #0
 8016ade:	d048      	beq.n	8016b72 <__gethex+0x3bc>
 8016ae0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016ae4:	2b02      	cmp	r3, #2
 8016ae6:	d015      	beq.n	8016b14 <__gethex+0x35e>
 8016ae8:	2b03      	cmp	r3, #3
 8016aea:	d017      	beq.n	8016b1c <__gethex+0x366>
 8016aec:	2b01      	cmp	r3, #1
 8016aee:	d109      	bne.n	8016b04 <__gethex+0x34e>
 8016af0:	f01a 0f02 	tst.w	sl, #2
 8016af4:	d006      	beq.n	8016b04 <__gethex+0x34e>
 8016af6:	f8d9 3000 	ldr.w	r3, [r9]
 8016afa:	ea4a 0a03 	orr.w	sl, sl, r3
 8016afe:	f01a 0f01 	tst.w	sl, #1
 8016b02:	d10e      	bne.n	8016b22 <__gethex+0x36c>
 8016b04:	f047 0710 	orr.w	r7, r7, #16
 8016b08:	e033      	b.n	8016b72 <__gethex+0x3bc>
 8016b0a:	f04f 0a01 	mov.w	sl, #1
 8016b0e:	e7d0      	b.n	8016ab2 <__gethex+0x2fc>
 8016b10:	2701      	movs	r7, #1
 8016b12:	e7e2      	b.n	8016ada <__gethex+0x324>
 8016b14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016b16:	f1c3 0301 	rsb	r3, r3, #1
 8016b1a:	9315      	str	r3, [sp, #84]	; 0x54
 8016b1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d0f0      	beq.n	8016b04 <__gethex+0x34e>
 8016b22:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016b26:	f105 0314 	add.w	r3, r5, #20
 8016b2a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8016b2e:	eb03 010a 	add.w	r1, r3, sl
 8016b32:	f04f 0c00 	mov.w	ip, #0
 8016b36:	4618      	mov	r0, r3
 8016b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8016b3c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016b40:	d01c      	beq.n	8016b7c <__gethex+0x3c6>
 8016b42:	3201      	adds	r2, #1
 8016b44:	6002      	str	r2, [r0, #0]
 8016b46:	2f02      	cmp	r7, #2
 8016b48:	f105 0314 	add.w	r3, r5, #20
 8016b4c:	d138      	bne.n	8016bc0 <__gethex+0x40a>
 8016b4e:	f8d8 2000 	ldr.w	r2, [r8]
 8016b52:	3a01      	subs	r2, #1
 8016b54:	42b2      	cmp	r2, r6
 8016b56:	d10a      	bne.n	8016b6e <__gethex+0x3b8>
 8016b58:	1171      	asrs	r1, r6, #5
 8016b5a:	2201      	movs	r2, #1
 8016b5c:	f006 061f 	and.w	r6, r6, #31
 8016b60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016b64:	fa02 f606 	lsl.w	r6, r2, r6
 8016b68:	421e      	tst	r6, r3
 8016b6a:	bf18      	it	ne
 8016b6c:	4617      	movne	r7, r2
 8016b6e:	f047 0720 	orr.w	r7, r7, #32
 8016b72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016b74:	601d      	str	r5, [r3, #0]
 8016b76:	9b06      	ldr	r3, [sp, #24]
 8016b78:	601c      	str	r4, [r3, #0]
 8016b7a:	e6a4      	b.n	80168c6 <__gethex+0x110>
 8016b7c:	4299      	cmp	r1, r3
 8016b7e:	f843 cc04 	str.w	ip, [r3, #-4]
 8016b82:	d8d8      	bhi.n	8016b36 <__gethex+0x380>
 8016b84:	68ab      	ldr	r3, [r5, #8]
 8016b86:	4599      	cmp	r9, r3
 8016b88:	db12      	blt.n	8016bb0 <__gethex+0x3fa>
 8016b8a:	6869      	ldr	r1, [r5, #4]
 8016b8c:	9802      	ldr	r0, [sp, #8]
 8016b8e:	3101      	adds	r1, #1
 8016b90:	f000 f962 	bl	8016e58 <_Balloc>
 8016b94:	692a      	ldr	r2, [r5, #16]
 8016b96:	3202      	adds	r2, #2
 8016b98:	f105 010c 	add.w	r1, r5, #12
 8016b9c:	4683      	mov	fp, r0
 8016b9e:	0092      	lsls	r2, r2, #2
 8016ba0:	300c      	adds	r0, #12
 8016ba2:	f7fe f845 	bl	8014c30 <memcpy>
 8016ba6:	4629      	mov	r1, r5
 8016ba8:	9802      	ldr	r0, [sp, #8]
 8016baa:	f000 f989 	bl	8016ec0 <_Bfree>
 8016bae:	465d      	mov	r5, fp
 8016bb0:	692b      	ldr	r3, [r5, #16]
 8016bb2:	1c5a      	adds	r2, r3, #1
 8016bb4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016bb8:	612a      	str	r2, [r5, #16]
 8016bba:	2201      	movs	r2, #1
 8016bbc:	615a      	str	r2, [r3, #20]
 8016bbe:	e7c2      	b.n	8016b46 <__gethex+0x390>
 8016bc0:	692a      	ldr	r2, [r5, #16]
 8016bc2:	454a      	cmp	r2, r9
 8016bc4:	dd0b      	ble.n	8016bde <__gethex+0x428>
 8016bc6:	2101      	movs	r1, #1
 8016bc8:	4628      	mov	r0, r5
 8016bca:	f7ff fda5 	bl	8016718 <rshift>
 8016bce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016bd2:	3401      	adds	r4, #1
 8016bd4:	42a3      	cmp	r3, r4
 8016bd6:	f6ff aed9 	blt.w	801698c <__gethex+0x1d6>
 8016bda:	2701      	movs	r7, #1
 8016bdc:	e7c7      	b.n	8016b6e <__gethex+0x3b8>
 8016bde:	f016 061f 	ands.w	r6, r6, #31
 8016be2:	d0fa      	beq.n	8016bda <__gethex+0x424>
 8016be4:	449a      	add	sl, r3
 8016be6:	f1c6 0620 	rsb	r6, r6, #32
 8016bea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016bee:	f000 f9f7 	bl	8016fe0 <__hi0bits>
 8016bf2:	42b0      	cmp	r0, r6
 8016bf4:	dbe7      	blt.n	8016bc6 <__gethex+0x410>
 8016bf6:	e7f0      	b.n	8016bda <__gethex+0x424>

08016bf8 <L_shift>:
 8016bf8:	f1c2 0208 	rsb	r2, r2, #8
 8016bfc:	0092      	lsls	r2, r2, #2
 8016bfe:	b570      	push	{r4, r5, r6, lr}
 8016c00:	f1c2 0620 	rsb	r6, r2, #32
 8016c04:	6843      	ldr	r3, [r0, #4]
 8016c06:	6804      	ldr	r4, [r0, #0]
 8016c08:	fa03 f506 	lsl.w	r5, r3, r6
 8016c0c:	432c      	orrs	r4, r5
 8016c0e:	40d3      	lsrs	r3, r2
 8016c10:	6004      	str	r4, [r0, #0]
 8016c12:	f840 3f04 	str.w	r3, [r0, #4]!
 8016c16:	4288      	cmp	r0, r1
 8016c18:	d3f4      	bcc.n	8016c04 <L_shift+0xc>
 8016c1a:	bd70      	pop	{r4, r5, r6, pc}

08016c1c <__match>:
 8016c1c:	b530      	push	{r4, r5, lr}
 8016c1e:	6803      	ldr	r3, [r0, #0]
 8016c20:	3301      	adds	r3, #1
 8016c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c26:	b914      	cbnz	r4, 8016c2e <__match+0x12>
 8016c28:	6003      	str	r3, [r0, #0]
 8016c2a:	2001      	movs	r0, #1
 8016c2c:	bd30      	pop	{r4, r5, pc}
 8016c2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c32:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016c36:	2d19      	cmp	r5, #25
 8016c38:	bf98      	it	ls
 8016c3a:	3220      	addls	r2, #32
 8016c3c:	42a2      	cmp	r2, r4
 8016c3e:	d0f0      	beq.n	8016c22 <__match+0x6>
 8016c40:	2000      	movs	r0, #0
 8016c42:	e7f3      	b.n	8016c2c <__match+0x10>

08016c44 <__hexnan>:
 8016c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c48:	680b      	ldr	r3, [r1, #0]
 8016c4a:	6801      	ldr	r1, [r0, #0]
 8016c4c:	115f      	asrs	r7, r3, #5
 8016c4e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016c52:	f013 031f 	ands.w	r3, r3, #31
 8016c56:	b087      	sub	sp, #28
 8016c58:	bf18      	it	ne
 8016c5a:	3704      	addne	r7, #4
 8016c5c:	2500      	movs	r5, #0
 8016c5e:	1f3e      	subs	r6, r7, #4
 8016c60:	4682      	mov	sl, r0
 8016c62:	4690      	mov	r8, r2
 8016c64:	9301      	str	r3, [sp, #4]
 8016c66:	f847 5c04 	str.w	r5, [r7, #-4]
 8016c6a:	46b1      	mov	r9, r6
 8016c6c:	4634      	mov	r4, r6
 8016c6e:	9502      	str	r5, [sp, #8]
 8016c70:	46ab      	mov	fp, r5
 8016c72:	784a      	ldrb	r2, [r1, #1]
 8016c74:	1c4b      	adds	r3, r1, #1
 8016c76:	9303      	str	r3, [sp, #12]
 8016c78:	b342      	cbz	r2, 8016ccc <__hexnan+0x88>
 8016c7a:	4610      	mov	r0, r2
 8016c7c:	9105      	str	r1, [sp, #20]
 8016c7e:	9204      	str	r2, [sp, #16]
 8016c80:	f7ff fd84 	bl	801678c <__hexdig_fun>
 8016c84:	2800      	cmp	r0, #0
 8016c86:	d143      	bne.n	8016d10 <__hexnan+0xcc>
 8016c88:	9a04      	ldr	r2, [sp, #16]
 8016c8a:	9905      	ldr	r1, [sp, #20]
 8016c8c:	2a20      	cmp	r2, #32
 8016c8e:	d818      	bhi.n	8016cc2 <__hexnan+0x7e>
 8016c90:	9b02      	ldr	r3, [sp, #8]
 8016c92:	459b      	cmp	fp, r3
 8016c94:	dd13      	ble.n	8016cbe <__hexnan+0x7a>
 8016c96:	454c      	cmp	r4, r9
 8016c98:	d206      	bcs.n	8016ca8 <__hexnan+0x64>
 8016c9a:	2d07      	cmp	r5, #7
 8016c9c:	dc04      	bgt.n	8016ca8 <__hexnan+0x64>
 8016c9e:	462a      	mov	r2, r5
 8016ca0:	4649      	mov	r1, r9
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	f7ff ffa8 	bl	8016bf8 <L_shift>
 8016ca8:	4544      	cmp	r4, r8
 8016caa:	d944      	bls.n	8016d36 <__hexnan+0xf2>
 8016cac:	2300      	movs	r3, #0
 8016cae:	f1a4 0904 	sub.w	r9, r4, #4
 8016cb2:	f844 3c04 	str.w	r3, [r4, #-4]
 8016cb6:	f8cd b008 	str.w	fp, [sp, #8]
 8016cba:	464c      	mov	r4, r9
 8016cbc:	461d      	mov	r5, r3
 8016cbe:	9903      	ldr	r1, [sp, #12]
 8016cc0:	e7d7      	b.n	8016c72 <__hexnan+0x2e>
 8016cc2:	2a29      	cmp	r2, #41	; 0x29
 8016cc4:	d14a      	bne.n	8016d5c <__hexnan+0x118>
 8016cc6:	3102      	adds	r1, #2
 8016cc8:	f8ca 1000 	str.w	r1, [sl]
 8016ccc:	f1bb 0f00 	cmp.w	fp, #0
 8016cd0:	d044      	beq.n	8016d5c <__hexnan+0x118>
 8016cd2:	454c      	cmp	r4, r9
 8016cd4:	d206      	bcs.n	8016ce4 <__hexnan+0xa0>
 8016cd6:	2d07      	cmp	r5, #7
 8016cd8:	dc04      	bgt.n	8016ce4 <__hexnan+0xa0>
 8016cda:	462a      	mov	r2, r5
 8016cdc:	4649      	mov	r1, r9
 8016cde:	4620      	mov	r0, r4
 8016ce0:	f7ff ff8a 	bl	8016bf8 <L_shift>
 8016ce4:	4544      	cmp	r4, r8
 8016ce6:	d928      	bls.n	8016d3a <__hexnan+0xf6>
 8016ce8:	4643      	mov	r3, r8
 8016cea:	f854 2b04 	ldr.w	r2, [r4], #4
 8016cee:	f843 2b04 	str.w	r2, [r3], #4
 8016cf2:	42a6      	cmp	r6, r4
 8016cf4:	d2f9      	bcs.n	8016cea <__hexnan+0xa6>
 8016cf6:	2200      	movs	r2, #0
 8016cf8:	f843 2b04 	str.w	r2, [r3], #4
 8016cfc:	429e      	cmp	r6, r3
 8016cfe:	d2fb      	bcs.n	8016cf8 <__hexnan+0xb4>
 8016d00:	6833      	ldr	r3, [r6, #0]
 8016d02:	b91b      	cbnz	r3, 8016d0c <__hexnan+0xc8>
 8016d04:	4546      	cmp	r6, r8
 8016d06:	d127      	bne.n	8016d58 <__hexnan+0x114>
 8016d08:	2301      	movs	r3, #1
 8016d0a:	6033      	str	r3, [r6, #0]
 8016d0c:	2005      	movs	r0, #5
 8016d0e:	e026      	b.n	8016d5e <__hexnan+0x11a>
 8016d10:	3501      	adds	r5, #1
 8016d12:	2d08      	cmp	r5, #8
 8016d14:	f10b 0b01 	add.w	fp, fp, #1
 8016d18:	dd06      	ble.n	8016d28 <__hexnan+0xe4>
 8016d1a:	4544      	cmp	r4, r8
 8016d1c:	d9cf      	bls.n	8016cbe <__hexnan+0x7a>
 8016d1e:	2300      	movs	r3, #0
 8016d20:	f844 3c04 	str.w	r3, [r4, #-4]
 8016d24:	2501      	movs	r5, #1
 8016d26:	3c04      	subs	r4, #4
 8016d28:	6822      	ldr	r2, [r4, #0]
 8016d2a:	f000 000f 	and.w	r0, r0, #15
 8016d2e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016d32:	6020      	str	r0, [r4, #0]
 8016d34:	e7c3      	b.n	8016cbe <__hexnan+0x7a>
 8016d36:	2508      	movs	r5, #8
 8016d38:	e7c1      	b.n	8016cbe <__hexnan+0x7a>
 8016d3a:	9b01      	ldr	r3, [sp, #4]
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	d0df      	beq.n	8016d00 <__hexnan+0xbc>
 8016d40:	f04f 32ff 	mov.w	r2, #4294967295
 8016d44:	f1c3 0320 	rsb	r3, r3, #32
 8016d48:	fa22 f303 	lsr.w	r3, r2, r3
 8016d4c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016d50:	401a      	ands	r2, r3
 8016d52:	f847 2c04 	str.w	r2, [r7, #-4]
 8016d56:	e7d3      	b.n	8016d00 <__hexnan+0xbc>
 8016d58:	3e04      	subs	r6, #4
 8016d5a:	e7d1      	b.n	8016d00 <__hexnan+0xbc>
 8016d5c:	2004      	movs	r0, #4
 8016d5e:	b007      	add	sp, #28
 8016d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d64 <__localeconv_l>:
 8016d64:	30f0      	adds	r0, #240	; 0xf0
 8016d66:	4770      	bx	lr

08016d68 <__swhatbuf_r>:
 8016d68:	b570      	push	{r4, r5, r6, lr}
 8016d6a:	460e      	mov	r6, r1
 8016d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d70:	2900      	cmp	r1, #0
 8016d72:	b096      	sub	sp, #88	; 0x58
 8016d74:	4614      	mov	r4, r2
 8016d76:	461d      	mov	r5, r3
 8016d78:	da07      	bge.n	8016d8a <__swhatbuf_r+0x22>
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	602b      	str	r3, [r5, #0]
 8016d7e:	89b3      	ldrh	r3, [r6, #12]
 8016d80:	061a      	lsls	r2, r3, #24
 8016d82:	d410      	bmi.n	8016da6 <__swhatbuf_r+0x3e>
 8016d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016d88:	e00e      	b.n	8016da8 <__swhatbuf_r+0x40>
 8016d8a:	466a      	mov	r2, sp
 8016d8c:	f000 fe4e 	bl	8017a2c <_fstat_r>
 8016d90:	2800      	cmp	r0, #0
 8016d92:	dbf2      	blt.n	8016d7a <__swhatbuf_r+0x12>
 8016d94:	9a01      	ldr	r2, [sp, #4]
 8016d96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016d9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016d9e:	425a      	negs	r2, r3
 8016da0:	415a      	adcs	r2, r3
 8016da2:	602a      	str	r2, [r5, #0]
 8016da4:	e7ee      	b.n	8016d84 <__swhatbuf_r+0x1c>
 8016da6:	2340      	movs	r3, #64	; 0x40
 8016da8:	2000      	movs	r0, #0
 8016daa:	6023      	str	r3, [r4, #0]
 8016dac:	b016      	add	sp, #88	; 0x58
 8016dae:	bd70      	pop	{r4, r5, r6, pc}

08016db0 <__smakebuf_r>:
 8016db0:	898b      	ldrh	r3, [r1, #12]
 8016db2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016db4:	079d      	lsls	r5, r3, #30
 8016db6:	4606      	mov	r6, r0
 8016db8:	460c      	mov	r4, r1
 8016dba:	d507      	bpl.n	8016dcc <__smakebuf_r+0x1c>
 8016dbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016dc0:	6023      	str	r3, [r4, #0]
 8016dc2:	6123      	str	r3, [r4, #16]
 8016dc4:	2301      	movs	r3, #1
 8016dc6:	6163      	str	r3, [r4, #20]
 8016dc8:	b002      	add	sp, #8
 8016dca:	bd70      	pop	{r4, r5, r6, pc}
 8016dcc:	ab01      	add	r3, sp, #4
 8016dce:	466a      	mov	r2, sp
 8016dd0:	f7ff ffca 	bl	8016d68 <__swhatbuf_r>
 8016dd4:	9900      	ldr	r1, [sp, #0]
 8016dd6:	4605      	mov	r5, r0
 8016dd8:	4630      	mov	r0, r6
 8016dda:	f7fd ffb1 	bl	8014d40 <_malloc_r>
 8016dde:	b948      	cbnz	r0, 8016df4 <__smakebuf_r+0x44>
 8016de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016de4:	059a      	lsls	r2, r3, #22
 8016de6:	d4ef      	bmi.n	8016dc8 <__smakebuf_r+0x18>
 8016de8:	f023 0303 	bic.w	r3, r3, #3
 8016dec:	f043 0302 	orr.w	r3, r3, #2
 8016df0:	81a3      	strh	r3, [r4, #12]
 8016df2:	e7e3      	b.n	8016dbc <__smakebuf_r+0xc>
 8016df4:	4b0d      	ldr	r3, [pc, #52]	; (8016e2c <__smakebuf_r+0x7c>)
 8016df6:	62b3      	str	r3, [r6, #40]	; 0x28
 8016df8:	89a3      	ldrh	r3, [r4, #12]
 8016dfa:	6020      	str	r0, [r4, #0]
 8016dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e00:	81a3      	strh	r3, [r4, #12]
 8016e02:	9b00      	ldr	r3, [sp, #0]
 8016e04:	6163      	str	r3, [r4, #20]
 8016e06:	9b01      	ldr	r3, [sp, #4]
 8016e08:	6120      	str	r0, [r4, #16]
 8016e0a:	b15b      	cbz	r3, 8016e24 <__smakebuf_r+0x74>
 8016e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e10:	4630      	mov	r0, r6
 8016e12:	f000 fe1d 	bl	8017a50 <_isatty_r>
 8016e16:	b128      	cbz	r0, 8016e24 <__smakebuf_r+0x74>
 8016e18:	89a3      	ldrh	r3, [r4, #12]
 8016e1a:	f023 0303 	bic.w	r3, r3, #3
 8016e1e:	f043 0301 	orr.w	r3, r3, #1
 8016e22:	81a3      	strh	r3, [r4, #12]
 8016e24:	89a3      	ldrh	r3, [r4, #12]
 8016e26:	431d      	orrs	r5, r3
 8016e28:	81a5      	strh	r5, [r4, #12]
 8016e2a:	e7cd      	b.n	8016dc8 <__smakebuf_r+0x18>
 8016e2c:	080165cd 	.word	0x080165cd

08016e30 <__ascii_mbtowc>:
 8016e30:	b082      	sub	sp, #8
 8016e32:	b901      	cbnz	r1, 8016e36 <__ascii_mbtowc+0x6>
 8016e34:	a901      	add	r1, sp, #4
 8016e36:	b142      	cbz	r2, 8016e4a <__ascii_mbtowc+0x1a>
 8016e38:	b14b      	cbz	r3, 8016e4e <__ascii_mbtowc+0x1e>
 8016e3a:	7813      	ldrb	r3, [r2, #0]
 8016e3c:	600b      	str	r3, [r1, #0]
 8016e3e:	7812      	ldrb	r2, [r2, #0]
 8016e40:	1c10      	adds	r0, r2, #0
 8016e42:	bf18      	it	ne
 8016e44:	2001      	movne	r0, #1
 8016e46:	b002      	add	sp, #8
 8016e48:	4770      	bx	lr
 8016e4a:	4610      	mov	r0, r2
 8016e4c:	e7fb      	b.n	8016e46 <__ascii_mbtowc+0x16>
 8016e4e:	f06f 0001 	mvn.w	r0, #1
 8016e52:	e7f8      	b.n	8016e46 <__ascii_mbtowc+0x16>

08016e54 <__malloc_lock>:
 8016e54:	4770      	bx	lr

08016e56 <__malloc_unlock>:
 8016e56:	4770      	bx	lr

08016e58 <_Balloc>:
 8016e58:	b570      	push	{r4, r5, r6, lr}
 8016e5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016e5c:	4604      	mov	r4, r0
 8016e5e:	460e      	mov	r6, r1
 8016e60:	b93d      	cbnz	r5, 8016e72 <_Balloc+0x1a>
 8016e62:	2010      	movs	r0, #16
 8016e64:	f7fd fed4 	bl	8014c10 <malloc>
 8016e68:	6260      	str	r0, [r4, #36]	; 0x24
 8016e6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016e6e:	6005      	str	r5, [r0, #0]
 8016e70:	60c5      	str	r5, [r0, #12]
 8016e72:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016e74:	68eb      	ldr	r3, [r5, #12]
 8016e76:	b183      	cbz	r3, 8016e9a <_Balloc+0x42>
 8016e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e7a:	68db      	ldr	r3, [r3, #12]
 8016e7c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016e80:	b9b8      	cbnz	r0, 8016eb2 <_Balloc+0x5a>
 8016e82:	2101      	movs	r1, #1
 8016e84:	fa01 f506 	lsl.w	r5, r1, r6
 8016e88:	1d6a      	adds	r2, r5, #5
 8016e8a:	0092      	lsls	r2, r2, #2
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	f7fd fefb 	bl	8014c88 <_calloc_r>
 8016e92:	b160      	cbz	r0, 8016eae <_Balloc+0x56>
 8016e94:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016e98:	e00e      	b.n	8016eb8 <_Balloc+0x60>
 8016e9a:	2221      	movs	r2, #33	; 0x21
 8016e9c:	2104      	movs	r1, #4
 8016e9e:	4620      	mov	r0, r4
 8016ea0:	f7fd fef2 	bl	8014c88 <_calloc_r>
 8016ea4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ea6:	60e8      	str	r0, [r5, #12]
 8016ea8:	68db      	ldr	r3, [r3, #12]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d1e4      	bne.n	8016e78 <_Balloc+0x20>
 8016eae:	2000      	movs	r0, #0
 8016eb0:	bd70      	pop	{r4, r5, r6, pc}
 8016eb2:	6802      	ldr	r2, [r0, #0]
 8016eb4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016eb8:	2300      	movs	r3, #0
 8016eba:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016ebe:	e7f7      	b.n	8016eb0 <_Balloc+0x58>

08016ec0 <_Bfree>:
 8016ec0:	b570      	push	{r4, r5, r6, lr}
 8016ec2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016ec4:	4606      	mov	r6, r0
 8016ec6:	460d      	mov	r5, r1
 8016ec8:	b93c      	cbnz	r4, 8016eda <_Bfree+0x1a>
 8016eca:	2010      	movs	r0, #16
 8016ecc:	f7fd fea0 	bl	8014c10 <malloc>
 8016ed0:	6270      	str	r0, [r6, #36]	; 0x24
 8016ed2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016ed6:	6004      	str	r4, [r0, #0]
 8016ed8:	60c4      	str	r4, [r0, #12]
 8016eda:	b13d      	cbz	r5, 8016eec <_Bfree+0x2c>
 8016edc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016ede:	686a      	ldr	r2, [r5, #4]
 8016ee0:	68db      	ldr	r3, [r3, #12]
 8016ee2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016ee6:	6029      	str	r1, [r5, #0]
 8016ee8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016eec:	bd70      	pop	{r4, r5, r6, pc}

08016eee <__multadd>:
 8016eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef2:	690d      	ldr	r5, [r1, #16]
 8016ef4:	461f      	mov	r7, r3
 8016ef6:	4606      	mov	r6, r0
 8016ef8:	460c      	mov	r4, r1
 8016efa:	f101 0c14 	add.w	ip, r1, #20
 8016efe:	2300      	movs	r3, #0
 8016f00:	f8dc 0000 	ldr.w	r0, [ip]
 8016f04:	b281      	uxth	r1, r0
 8016f06:	fb02 7101 	mla	r1, r2, r1, r7
 8016f0a:	0c0f      	lsrs	r7, r1, #16
 8016f0c:	0c00      	lsrs	r0, r0, #16
 8016f0e:	fb02 7000 	mla	r0, r2, r0, r7
 8016f12:	b289      	uxth	r1, r1
 8016f14:	3301      	adds	r3, #1
 8016f16:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016f1a:	429d      	cmp	r5, r3
 8016f1c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016f20:	f84c 1b04 	str.w	r1, [ip], #4
 8016f24:	dcec      	bgt.n	8016f00 <__multadd+0x12>
 8016f26:	b1d7      	cbz	r7, 8016f5e <__multadd+0x70>
 8016f28:	68a3      	ldr	r3, [r4, #8]
 8016f2a:	42ab      	cmp	r3, r5
 8016f2c:	dc12      	bgt.n	8016f54 <__multadd+0x66>
 8016f2e:	6861      	ldr	r1, [r4, #4]
 8016f30:	4630      	mov	r0, r6
 8016f32:	3101      	adds	r1, #1
 8016f34:	f7ff ff90 	bl	8016e58 <_Balloc>
 8016f38:	6922      	ldr	r2, [r4, #16]
 8016f3a:	3202      	adds	r2, #2
 8016f3c:	f104 010c 	add.w	r1, r4, #12
 8016f40:	4680      	mov	r8, r0
 8016f42:	0092      	lsls	r2, r2, #2
 8016f44:	300c      	adds	r0, #12
 8016f46:	f7fd fe73 	bl	8014c30 <memcpy>
 8016f4a:	4621      	mov	r1, r4
 8016f4c:	4630      	mov	r0, r6
 8016f4e:	f7ff ffb7 	bl	8016ec0 <_Bfree>
 8016f52:	4644      	mov	r4, r8
 8016f54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016f58:	3501      	adds	r5, #1
 8016f5a:	615f      	str	r7, [r3, #20]
 8016f5c:	6125      	str	r5, [r4, #16]
 8016f5e:	4620      	mov	r0, r4
 8016f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f64 <__s2b>:
 8016f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016f68:	460c      	mov	r4, r1
 8016f6a:	4615      	mov	r5, r2
 8016f6c:	461f      	mov	r7, r3
 8016f6e:	2209      	movs	r2, #9
 8016f70:	3308      	adds	r3, #8
 8016f72:	4606      	mov	r6, r0
 8016f74:	fb93 f3f2 	sdiv	r3, r3, r2
 8016f78:	2100      	movs	r1, #0
 8016f7a:	2201      	movs	r2, #1
 8016f7c:	429a      	cmp	r2, r3
 8016f7e:	db20      	blt.n	8016fc2 <__s2b+0x5e>
 8016f80:	4630      	mov	r0, r6
 8016f82:	f7ff ff69 	bl	8016e58 <_Balloc>
 8016f86:	9b08      	ldr	r3, [sp, #32]
 8016f88:	6143      	str	r3, [r0, #20]
 8016f8a:	2d09      	cmp	r5, #9
 8016f8c:	f04f 0301 	mov.w	r3, #1
 8016f90:	6103      	str	r3, [r0, #16]
 8016f92:	dd19      	ble.n	8016fc8 <__s2b+0x64>
 8016f94:	f104 0809 	add.w	r8, r4, #9
 8016f98:	46c1      	mov	r9, r8
 8016f9a:	442c      	add	r4, r5
 8016f9c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016fa0:	4601      	mov	r1, r0
 8016fa2:	3b30      	subs	r3, #48	; 0x30
 8016fa4:	220a      	movs	r2, #10
 8016fa6:	4630      	mov	r0, r6
 8016fa8:	f7ff ffa1 	bl	8016eee <__multadd>
 8016fac:	45a1      	cmp	r9, r4
 8016fae:	d1f5      	bne.n	8016f9c <__s2b+0x38>
 8016fb0:	eb08 0405 	add.w	r4, r8, r5
 8016fb4:	3c08      	subs	r4, #8
 8016fb6:	1b2d      	subs	r5, r5, r4
 8016fb8:	1963      	adds	r3, r4, r5
 8016fba:	42bb      	cmp	r3, r7
 8016fbc:	db07      	blt.n	8016fce <__s2b+0x6a>
 8016fbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fc2:	0052      	lsls	r2, r2, #1
 8016fc4:	3101      	adds	r1, #1
 8016fc6:	e7d9      	b.n	8016f7c <__s2b+0x18>
 8016fc8:	340a      	adds	r4, #10
 8016fca:	2509      	movs	r5, #9
 8016fcc:	e7f3      	b.n	8016fb6 <__s2b+0x52>
 8016fce:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016fd2:	4601      	mov	r1, r0
 8016fd4:	3b30      	subs	r3, #48	; 0x30
 8016fd6:	220a      	movs	r2, #10
 8016fd8:	4630      	mov	r0, r6
 8016fda:	f7ff ff88 	bl	8016eee <__multadd>
 8016fde:	e7eb      	b.n	8016fb8 <__s2b+0x54>

08016fe0 <__hi0bits>:
 8016fe0:	0c02      	lsrs	r2, r0, #16
 8016fe2:	0412      	lsls	r2, r2, #16
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	b9b2      	cbnz	r2, 8017016 <__hi0bits+0x36>
 8016fe8:	0403      	lsls	r3, r0, #16
 8016fea:	2010      	movs	r0, #16
 8016fec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016ff0:	bf04      	itt	eq
 8016ff2:	021b      	lsleq	r3, r3, #8
 8016ff4:	3008      	addeq	r0, #8
 8016ff6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016ffa:	bf04      	itt	eq
 8016ffc:	011b      	lsleq	r3, r3, #4
 8016ffe:	3004      	addeq	r0, #4
 8017000:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8017004:	bf04      	itt	eq
 8017006:	009b      	lsleq	r3, r3, #2
 8017008:	3002      	addeq	r0, #2
 801700a:	2b00      	cmp	r3, #0
 801700c:	db06      	blt.n	801701c <__hi0bits+0x3c>
 801700e:	005b      	lsls	r3, r3, #1
 8017010:	d503      	bpl.n	801701a <__hi0bits+0x3a>
 8017012:	3001      	adds	r0, #1
 8017014:	4770      	bx	lr
 8017016:	2000      	movs	r0, #0
 8017018:	e7e8      	b.n	8016fec <__hi0bits+0xc>
 801701a:	2020      	movs	r0, #32
 801701c:	4770      	bx	lr

0801701e <__lo0bits>:
 801701e:	6803      	ldr	r3, [r0, #0]
 8017020:	f013 0207 	ands.w	r2, r3, #7
 8017024:	4601      	mov	r1, r0
 8017026:	d00b      	beq.n	8017040 <__lo0bits+0x22>
 8017028:	07da      	lsls	r2, r3, #31
 801702a:	d423      	bmi.n	8017074 <__lo0bits+0x56>
 801702c:	0798      	lsls	r0, r3, #30
 801702e:	bf49      	itett	mi
 8017030:	085b      	lsrmi	r3, r3, #1
 8017032:	089b      	lsrpl	r3, r3, #2
 8017034:	2001      	movmi	r0, #1
 8017036:	600b      	strmi	r3, [r1, #0]
 8017038:	bf5c      	itt	pl
 801703a:	600b      	strpl	r3, [r1, #0]
 801703c:	2002      	movpl	r0, #2
 801703e:	4770      	bx	lr
 8017040:	b298      	uxth	r0, r3
 8017042:	b9a8      	cbnz	r0, 8017070 <__lo0bits+0x52>
 8017044:	0c1b      	lsrs	r3, r3, #16
 8017046:	2010      	movs	r0, #16
 8017048:	f013 0fff 	tst.w	r3, #255	; 0xff
 801704c:	bf04      	itt	eq
 801704e:	0a1b      	lsreq	r3, r3, #8
 8017050:	3008      	addeq	r0, #8
 8017052:	071a      	lsls	r2, r3, #28
 8017054:	bf04      	itt	eq
 8017056:	091b      	lsreq	r3, r3, #4
 8017058:	3004      	addeq	r0, #4
 801705a:	079a      	lsls	r2, r3, #30
 801705c:	bf04      	itt	eq
 801705e:	089b      	lsreq	r3, r3, #2
 8017060:	3002      	addeq	r0, #2
 8017062:	07da      	lsls	r2, r3, #31
 8017064:	d402      	bmi.n	801706c <__lo0bits+0x4e>
 8017066:	085b      	lsrs	r3, r3, #1
 8017068:	d006      	beq.n	8017078 <__lo0bits+0x5a>
 801706a:	3001      	adds	r0, #1
 801706c:	600b      	str	r3, [r1, #0]
 801706e:	4770      	bx	lr
 8017070:	4610      	mov	r0, r2
 8017072:	e7e9      	b.n	8017048 <__lo0bits+0x2a>
 8017074:	2000      	movs	r0, #0
 8017076:	4770      	bx	lr
 8017078:	2020      	movs	r0, #32
 801707a:	4770      	bx	lr

0801707c <__i2b>:
 801707c:	b510      	push	{r4, lr}
 801707e:	460c      	mov	r4, r1
 8017080:	2101      	movs	r1, #1
 8017082:	f7ff fee9 	bl	8016e58 <_Balloc>
 8017086:	2201      	movs	r2, #1
 8017088:	6144      	str	r4, [r0, #20]
 801708a:	6102      	str	r2, [r0, #16]
 801708c:	bd10      	pop	{r4, pc}

0801708e <__multiply>:
 801708e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017092:	4614      	mov	r4, r2
 8017094:	690a      	ldr	r2, [r1, #16]
 8017096:	6923      	ldr	r3, [r4, #16]
 8017098:	429a      	cmp	r2, r3
 801709a:	bfb8      	it	lt
 801709c:	460b      	movlt	r3, r1
 801709e:	4688      	mov	r8, r1
 80170a0:	bfbc      	itt	lt
 80170a2:	46a0      	movlt	r8, r4
 80170a4:	461c      	movlt	r4, r3
 80170a6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80170aa:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80170ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80170b2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80170b6:	eb07 0609 	add.w	r6, r7, r9
 80170ba:	42b3      	cmp	r3, r6
 80170bc:	bfb8      	it	lt
 80170be:	3101      	addlt	r1, #1
 80170c0:	f7ff feca 	bl	8016e58 <_Balloc>
 80170c4:	f100 0514 	add.w	r5, r0, #20
 80170c8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80170cc:	462b      	mov	r3, r5
 80170ce:	2200      	movs	r2, #0
 80170d0:	4573      	cmp	r3, lr
 80170d2:	d316      	bcc.n	8017102 <__multiply+0x74>
 80170d4:	f104 0214 	add.w	r2, r4, #20
 80170d8:	f108 0114 	add.w	r1, r8, #20
 80170dc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80170e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80170e4:	9300      	str	r3, [sp, #0]
 80170e6:	9b00      	ldr	r3, [sp, #0]
 80170e8:	9201      	str	r2, [sp, #4]
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d80c      	bhi.n	8017108 <__multiply+0x7a>
 80170ee:	2e00      	cmp	r6, #0
 80170f0:	dd03      	ble.n	80170fa <__multiply+0x6c>
 80170f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d05d      	beq.n	80171b6 <__multiply+0x128>
 80170fa:	6106      	str	r6, [r0, #16]
 80170fc:	b003      	add	sp, #12
 80170fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017102:	f843 2b04 	str.w	r2, [r3], #4
 8017106:	e7e3      	b.n	80170d0 <__multiply+0x42>
 8017108:	f8b2 b000 	ldrh.w	fp, [r2]
 801710c:	f1bb 0f00 	cmp.w	fp, #0
 8017110:	d023      	beq.n	801715a <__multiply+0xcc>
 8017112:	4689      	mov	r9, r1
 8017114:	46ac      	mov	ip, r5
 8017116:	f04f 0800 	mov.w	r8, #0
 801711a:	f859 4b04 	ldr.w	r4, [r9], #4
 801711e:	f8dc a000 	ldr.w	sl, [ip]
 8017122:	b2a3      	uxth	r3, r4
 8017124:	fa1f fa8a 	uxth.w	sl, sl
 8017128:	fb0b a303 	mla	r3, fp, r3, sl
 801712c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017130:	f8dc 4000 	ldr.w	r4, [ip]
 8017134:	4443      	add	r3, r8
 8017136:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801713a:	fb0b 840a 	mla	r4, fp, sl, r8
 801713e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8017142:	46e2      	mov	sl, ip
 8017144:	b29b      	uxth	r3, r3
 8017146:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801714a:	454f      	cmp	r7, r9
 801714c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017150:	f84a 3b04 	str.w	r3, [sl], #4
 8017154:	d82b      	bhi.n	80171ae <__multiply+0x120>
 8017156:	f8cc 8004 	str.w	r8, [ip, #4]
 801715a:	9b01      	ldr	r3, [sp, #4]
 801715c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8017160:	3204      	adds	r2, #4
 8017162:	f1ba 0f00 	cmp.w	sl, #0
 8017166:	d020      	beq.n	80171aa <__multiply+0x11c>
 8017168:	682b      	ldr	r3, [r5, #0]
 801716a:	4689      	mov	r9, r1
 801716c:	46a8      	mov	r8, r5
 801716e:	f04f 0b00 	mov.w	fp, #0
 8017172:	f8b9 c000 	ldrh.w	ip, [r9]
 8017176:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801717a:	fb0a 440c 	mla	r4, sl, ip, r4
 801717e:	445c      	add	r4, fp
 8017180:	46c4      	mov	ip, r8
 8017182:	b29b      	uxth	r3, r3
 8017184:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017188:	f84c 3b04 	str.w	r3, [ip], #4
 801718c:	f859 3b04 	ldr.w	r3, [r9], #4
 8017190:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017194:	0c1b      	lsrs	r3, r3, #16
 8017196:	fb0a b303 	mla	r3, sl, r3, fp
 801719a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801719e:	454f      	cmp	r7, r9
 80171a0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80171a4:	d805      	bhi.n	80171b2 <__multiply+0x124>
 80171a6:	f8c8 3004 	str.w	r3, [r8, #4]
 80171aa:	3504      	adds	r5, #4
 80171ac:	e79b      	b.n	80170e6 <__multiply+0x58>
 80171ae:	46d4      	mov	ip, sl
 80171b0:	e7b3      	b.n	801711a <__multiply+0x8c>
 80171b2:	46e0      	mov	r8, ip
 80171b4:	e7dd      	b.n	8017172 <__multiply+0xe4>
 80171b6:	3e01      	subs	r6, #1
 80171b8:	e799      	b.n	80170ee <__multiply+0x60>
	...

080171bc <__pow5mult>:
 80171bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80171c0:	4615      	mov	r5, r2
 80171c2:	f012 0203 	ands.w	r2, r2, #3
 80171c6:	4606      	mov	r6, r0
 80171c8:	460f      	mov	r7, r1
 80171ca:	d007      	beq.n	80171dc <__pow5mult+0x20>
 80171cc:	3a01      	subs	r2, #1
 80171ce:	4c21      	ldr	r4, [pc, #132]	; (8017254 <__pow5mult+0x98>)
 80171d0:	2300      	movs	r3, #0
 80171d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80171d6:	f7ff fe8a 	bl	8016eee <__multadd>
 80171da:	4607      	mov	r7, r0
 80171dc:	10ad      	asrs	r5, r5, #2
 80171de:	d035      	beq.n	801724c <__pow5mult+0x90>
 80171e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80171e2:	b93c      	cbnz	r4, 80171f4 <__pow5mult+0x38>
 80171e4:	2010      	movs	r0, #16
 80171e6:	f7fd fd13 	bl	8014c10 <malloc>
 80171ea:	6270      	str	r0, [r6, #36]	; 0x24
 80171ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80171f0:	6004      	str	r4, [r0, #0]
 80171f2:	60c4      	str	r4, [r0, #12]
 80171f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80171f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80171fc:	b94c      	cbnz	r4, 8017212 <__pow5mult+0x56>
 80171fe:	f240 2171 	movw	r1, #625	; 0x271
 8017202:	4630      	mov	r0, r6
 8017204:	f7ff ff3a 	bl	801707c <__i2b>
 8017208:	2300      	movs	r3, #0
 801720a:	f8c8 0008 	str.w	r0, [r8, #8]
 801720e:	4604      	mov	r4, r0
 8017210:	6003      	str	r3, [r0, #0]
 8017212:	f04f 0800 	mov.w	r8, #0
 8017216:	07eb      	lsls	r3, r5, #31
 8017218:	d50a      	bpl.n	8017230 <__pow5mult+0x74>
 801721a:	4639      	mov	r1, r7
 801721c:	4622      	mov	r2, r4
 801721e:	4630      	mov	r0, r6
 8017220:	f7ff ff35 	bl	801708e <__multiply>
 8017224:	4639      	mov	r1, r7
 8017226:	4681      	mov	r9, r0
 8017228:	4630      	mov	r0, r6
 801722a:	f7ff fe49 	bl	8016ec0 <_Bfree>
 801722e:	464f      	mov	r7, r9
 8017230:	106d      	asrs	r5, r5, #1
 8017232:	d00b      	beq.n	801724c <__pow5mult+0x90>
 8017234:	6820      	ldr	r0, [r4, #0]
 8017236:	b938      	cbnz	r0, 8017248 <__pow5mult+0x8c>
 8017238:	4622      	mov	r2, r4
 801723a:	4621      	mov	r1, r4
 801723c:	4630      	mov	r0, r6
 801723e:	f7ff ff26 	bl	801708e <__multiply>
 8017242:	6020      	str	r0, [r4, #0]
 8017244:	f8c0 8000 	str.w	r8, [r0]
 8017248:	4604      	mov	r4, r0
 801724a:	e7e4      	b.n	8017216 <__pow5mult+0x5a>
 801724c:	4638      	mov	r0, r7
 801724e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017252:	bf00      	nop
 8017254:	08036c98 	.word	0x08036c98

08017258 <__lshift>:
 8017258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801725c:	460c      	mov	r4, r1
 801725e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017262:	6923      	ldr	r3, [r4, #16]
 8017264:	6849      	ldr	r1, [r1, #4]
 8017266:	eb0a 0903 	add.w	r9, sl, r3
 801726a:	68a3      	ldr	r3, [r4, #8]
 801726c:	4607      	mov	r7, r0
 801726e:	4616      	mov	r6, r2
 8017270:	f109 0501 	add.w	r5, r9, #1
 8017274:	42ab      	cmp	r3, r5
 8017276:	db32      	blt.n	80172de <__lshift+0x86>
 8017278:	4638      	mov	r0, r7
 801727a:	f7ff fded 	bl	8016e58 <_Balloc>
 801727e:	2300      	movs	r3, #0
 8017280:	4680      	mov	r8, r0
 8017282:	f100 0114 	add.w	r1, r0, #20
 8017286:	461a      	mov	r2, r3
 8017288:	4553      	cmp	r3, sl
 801728a:	db2b      	blt.n	80172e4 <__lshift+0x8c>
 801728c:	6920      	ldr	r0, [r4, #16]
 801728e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017292:	f104 0314 	add.w	r3, r4, #20
 8017296:	f016 021f 	ands.w	r2, r6, #31
 801729a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801729e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80172a2:	d025      	beq.n	80172f0 <__lshift+0x98>
 80172a4:	f1c2 0e20 	rsb	lr, r2, #32
 80172a8:	2000      	movs	r0, #0
 80172aa:	681e      	ldr	r6, [r3, #0]
 80172ac:	468a      	mov	sl, r1
 80172ae:	4096      	lsls	r6, r2
 80172b0:	4330      	orrs	r0, r6
 80172b2:	f84a 0b04 	str.w	r0, [sl], #4
 80172b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80172ba:	459c      	cmp	ip, r3
 80172bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80172c0:	d814      	bhi.n	80172ec <__lshift+0x94>
 80172c2:	6048      	str	r0, [r1, #4]
 80172c4:	b108      	cbz	r0, 80172ca <__lshift+0x72>
 80172c6:	f109 0502 	add.w	r5, r9, #2
 80172ca:	3d01      	subs	r5, #1
 80172cc:	4638      	mov	r0, r7
 80172ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80172d2:	4621      	mov	r1, r4
 80172d4:	f7ff fdf4 	bl	8016ec0 <_Bfree>
 80172d8:	4640      	mov	r0, r8
 80172da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172de:	3101      	adds	r1, #1
 80172e0:	005b      	lsls	r3, r3, #1
 80172e2:	e7c7      	b.n	8017274 <__lshift+0x1c>
 80172e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80172e8:	3301      	adds	r3, #1
 80172ea:	e7cd      	b.n	8017288 <__lshift+0x30>
 80172ec:	4651      	mov	r1, sl
 80172ee:	e7dc      	b.n	80172aa <__lshift+0x52>
 80172f0:	3904      	subs	r1, #4
 80172f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80172f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80172fa:	459c      	cmp	ip, r3
 80172fc:	d8f9      	bhi.n	80172f2 <__lshift+0x9a>
 80172fe:	e7e4      	b.n	80172ca <__lshift+0x72>

08017300 <__mcmp>:
 8017300:	6903      	ldr	r3, [r0, #16]
 8017302:	690a      	ldr	r2, [r1, #16]
 8017304:	1a9b      	subs	r3, r3, r2
 8017306:	b530      	push	{r4, r5, lr}
 8017308:	d10c      	bne.n	8017324 <__mcmp+0x24>
 801730a:	0092      	lsls	r2, r2, #2
 801730c:	3014      	adds	r0, #20
 801730e:	3114      	adds	r1, #20
 8017310:	1884      	adds	r4, r0, r2
 8017312:	4411      	add	r1, r2
 8017314:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8017318:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801731c:	4295      	cmp	r5, r2
 801731e:	d003      	beq.n	8017328 <__mcmp+0x28>
 8017320:	d305      	bcc.n	801732e <__mcmp+0x2e>
 8017322:	2301      	movs	r3, #1
 8017324:	4618      	mov	r0, r3
 8017326:	bd30      	pop	{r4, r5, pc}
 8017328:	42a0      	cmp	r0, r4
 801732a:	d3f3      	bcc.n	8017314 <__mcmp+0x14>
 801732c:	e7fa      	b.n	8017324 <__mcmp+0x24>
 801732e:	f04f 33ff 	mov.w	r3, #4294967295
 8017332:	e7f7      	b.n	8017324 <__mcmp+0x24>

08017334 <__mdiff>:
 8017334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017338:	460d      	mov	r5, r1
 801733a:	4607      	mov	r7, r0
 801733c:	4611      	mov	r1, r2
 801733e:	4628      	mov	r0, r5
 8017340:	4614      	mov	r4, r2
 8017342:	f7ff ffdd 	bl	8017300 <__mcmp>
 8017346:	1e06      	subs	r6, r0, #0
 8017348:	d108      	bne.n	801735c <__mdiff+0x28>
 801734a:	4631      	mov	r1, r6
 801734c:	4638      	mov	r0, r7
 801734e:	f7ff fd83 	bl	8016e58 <_Balloc>
 8017352:	2301      	movs	r3, #1
 8017354:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801735c:	bfa4      	itt	ge
 801735e:	4623      	movge	r3, r4
 8017360:	462c      	movge	r4, r5
 8017362:	4638      	mov	r0, r7
 8017364:	6861      	ldr	r1, [r4, #4]
 8017366:	bfa6      	itte	ge
 8017368:	461d      	movge	r5, r3
 801736a:	2600      	movge	r6, #0
 801736c:	2601      	movlt	r6, #1
 801736e:	f7ff fd73 	bl	8016e58 <_Balloc>
 8017372:	692b      	ldr	r3, [r5, #16]
 8017374:	60c6      	str	r6, [r0, #12]
 8017376:	6926      	ldr	r6, [r4, #16]
 8017378:	f105 0914 	add.w	r9, r5, #20
 801737c:	f104 0214 	add.w	r2, r4, #20
 8017380:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017384:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017388:	f100 0514 	add.w	r5, r0, #20
 801738c:	f04f 0e00 	mov.w	lr, #0
 8017390:	f852 ab04 	ldr.w	sl, [r2], #4
 8017394:	f859 4b04 	ldr.w	r4, [r9], #4
 8017398:	fa1e f18a 	uxtah	r1, lr, sl
 801739c:	b2a3      	uxth	r3, r4
 801739e:	1ac9      	subs	r1, r1, r3
 80173a0:	0c23      	lsrs	r3, r4, #16
 80173a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80173a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80173aa:	b289      	uxth	r1, r1
 80173ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80173b0:	45c8      	cmp	r8, r9
 80173b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80173b6:	4694      	mov	ip, r2
 80173b8:	f845 3b04 	str.w	r3, [r5], #4
 80173bc:	d8e8      	bhi.n	8017390 <__mdiff+0x5c>
 80173be:	45bc      	cmp	ip, r7
 80173c0:	d304      	bcc.n	80173cc <__mdiff+0x98>
 80173c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80173c6:	b183      	cbz	r3, 80173ea <__mdiff+0xb6>
 80173c8:	6106      	str	r6, [r0, #16]
 80173ca:	e7c5      	b.n	8017358 <__mdiff+0x24>
 80173cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80173d0:	fa1e f381 	uxtah	r3, lr, r1
 80173d4:	141a      	asrs	r2, r3, #16
 80173d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80173da:	b29b      	uxth	r3, r3
 80173dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80173e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80173e4:	f845 3b04 	str.w	r3, [r5], #4
 80173e8:	e7e9      	b.n	80173be <__mdiff+0x8a>
 80173ea:	3e01      	subs	r6, #1
 80173ec:	e7e9      	b.n	80173c2 <__mdiff+0x8e>
	...

080173f0 <__ulp>:
 80173f0:	4b12      	ldr	r3, [pc, #72]	; (801743c <__ulp+0x4c>)
 80173f2:	ee10 2a90 	vmov	r2, s1
 80173f6:	401a      	ands	r2, r3
 80173f8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	dd04      	ble.n	801740a <__ulp+0x1a>
 8017400:	2000      	movs	r0, #0
 8017402:	4619      	mov	r1, r3
 8017404:	ec41 0b10 	vmov	d0, r0, r1
 8017408:	4770      	bx	lr
 801740a:	425b      	negs	r3, r3
 801740c:	151b      	asrs	r3, r3, #20
 801740e:	2b13      	cmp	r3, #19
 8017410:	f04f 0000 	mov.w	r0, #0
 8017414:	f04f 0100 	mov.w	r1, #0
 8017418:	dc04      	bgt.n	8017424 <__ulp+0x34>
 801741a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801741e:	fa42 f103 	asr.w	r1, r2, r3
 8017422:	e7ef      	b.n	8017404 <__ulp+0x14>
 8017424:	3b14      	subs	r3, #20
 8017426:	2b1e      	cmp	r3, #30
 8017428:	f04f 0201 	mov.w	r2, #1
 801742c:	bfda      	itte	le
 801742e:	f1c3 031f 	rsble	r3, r3, #31
 8017432:	fa02 f303 	lslle.w	r3, r2, r3
 8017436:	4613      	movgt	r3, r2
 8017438:	4618      	mov	r0, r3
 801743a:	e7e3      	b.n	8017404 <__ulp+0x14>
 801743c:	7ff00000 	.word	0x7ff00000

08017440 <__b2d>:
 8017440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017442:	6905      	ldr	r5, [r0, #16]
 8017444:	f100 0714 	add.w	r7, r0, #20
 8017448:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801744c:	1f2e      	subs	r6, r5, #4
 801744e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8017452:	4620      	mov	r0, r4
 8017454:	f7ff fdc4 	bl	8016fe0 <__hi0bits>
 8017458:	f1c0 0320 	rsb	r3, r0, #32
 801745c:	280a      	cmp	r0, #10
 801745e:	600b      	str	r3, [r1, #0]
 8017460:	f8df c074 	ldr.w	ip, [pc, #116]	; 80174d8 <__b2d+0x98>
 8017464:	dc14      	bgt.n	8017490 <__b2d+0x50>
 8017466:	f1c0 0e0b 	rsb	lr, r0, #11
 801746a:	fa24 f10e 	lsr.w	r1, r4, lr
 801746e:	42b7      	cmp	r7, r6
 8017470:	ea41 030c 	orr.w	r3, r1, ip
 8017474:	bf34      	ite	cc
 8017476:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801747a:	2100      	movcs	r1, #0
 801747c:	3015      	adds	r0, #21
 801747e:	fa04 f000 	lsl.w	r0, r4, r0
 8017482:	fa21 f10e 	lsr.w	r1, r1, lr
 8017486:	ea40 0201 	orr.w	r2, r0, r1
 801748a:	ec43 2b10 	vmov	d0, r2, r3
 801748e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017490:	42b7      	cmp	r7, r6
 8017492:	bf3a      	itte	cc
 8017494:	f1a5 0608 	subcc.w	r6, r5, #8
 8017498:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801749c:	2100      	movcs	r1, #0
 801749e:	380b      	subs	r0, #11
 80174a0:	d015      	beq.n	80174ce <__b2d+0x8e>
 80174a2:	4084      	lsls	r4, r0
 80174a4:	f1c0 0520 	rsb	r5, r0, #32
 80174a8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80174ac:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80174b0:	42be      	cmp	r6, r7
 80174b2:	fa21 fc05 	lsr.w	ip, r1, r5
 80174b6:	ea44 030c 	orr.w	r3, r4, ip
 80174ba:	bf8c      	ite	hi
 80174bc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80174c0:	2400      	movls	r4, #0
 80174c2:	fa01 f000 	lsl.w	r0, r1, r0
 80174c6:	40ec      	lsrs	r4, r5
 80174c8:	ea40 0204 	orr.w	r2, r0, r4
 80174cc:	e7dd      	b.n	801748a <__b2d+0x4a>
 80174ce:	ea44 030c 	orr.w	r3, r4, ip
 80174d2:	460a      	mov	r2, r1
 80174d4:	e7d9      	b.n	801748a <__b2d+0x4a>
 80174d6:	bf00      	nop
 80174d8:	3ff00000 	.word	0x3ff00000

080174dc <__d2b>:
 80174dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80174e0:	460e      	mov	r6, r1
 80174e2:	2101      	movs	r1, #1
 80174e4:	ec59 8b10 	vmov	r8, r9, d0
 80174e8:	4615      	mov	r5, r2
 80174ea:	f7ff fcb5 	bl	8016e58 <_Balloc>
 80174ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80174f2:	4607      	mov	r7, r0
 80174f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80174f8:	bb34      	cbnz	r4, 8017548 <__d2b+0x6c>
 80174fa:	9301      	str	r3, [sp, #4]
 80174fc:	f1b8 0300 	subs.w	r3, r8, #0
 8017500:	d027      	beq.n	8017552 <__d2b+0x76>
 8017502:	a802      	add	r0, sp, #8
 8017504:	f840 3d08 	str.w	r3, [r0, #-8]!
 8017508:	f7ff fd89 	bl	801701e <__lo0bits>
 801750c:	9900      	ldr	r1, [sp, #0]
 801750e:	b1f0      	cbz	r0, 801754e <__d2b+0x72>
 8017510:	9a01      	ldr	r2, [sp, #4]
 8017512:	f1c0 0320 	rsb	r3, r0, #32
 8017516:	fa02 f303 	lsl.w	r3, r2, r3
 801751a:	430b      	orrs	r3, r1
 801751c:	40c2      	lsrs	r2, r0
 801751e:	617b      	str	r3, [r7, #20]
 8017520:	9201      	str	r2, [sp, #4]
 8017522:	9b01      	ldr	r3, [sp, #4]
 8017524:	61bb      	str	r3, [r7, #24]
 8017526:	2b00      	cmp	r3, #0
 8017528:	bf14      	ite	ne
 801752a:	2102      	movne	r1, #2
 801752c:	2101      	moveq	r1, #1
 801752e:	6139      	str	r1, [r7, #16]
 8017530:	b1c4      	cbz	r4, 8017564 <__d2b+0x88>
 8017532:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017536:	4404      	add	r4, r0
 8017538:	6034      	str	r4, [r6, #0]
 801753a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801753e:	6028      	str	r0, [r5, #0]
 8017540:	4638      	mov	r0, r7
 8017542:	b003      	add	sp, #12
 8017544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801754c:	e7d5      	b.n	80174fa <__d2b+0x1e>
 801754e:	6179      	str	r1, [r7, #20]
 8017550:	e7e7      	b.n	8017522 <__d2b+0x46>
 8017552:	a801      	add	r0, sp, #4
 8017554:	f7ff fd63 	bl	801701e <__lo0bits>
 8017558:	9b01      	ldr	r3, [sp, #4]
 801755a:	617b      	str	r3, [r7, #20]
 801755c:	2101      	movs	r1, #1
 801755e:	6139      	str	r1, [r7, #16]
 8017560:	3020      	adds	r0, #32
 8017562:	e7e5      	b.n	8017530 <__d2b+0x54>
 8017564:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017568:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801756c:	6030      	str	r0, [r6, #0]
 801756e:	6918      	ldr	r0, [r3, #16]
 8017570:	f7ff fd36 	bl	8016fe0 <__hi0bits>
 8017574:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017578:	e7e1      	b.n	801753e <__d2b+0x62>

0801757a <__ratio>:
 801757a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801757e:	4688      	mov	r8, r1
 8017580:	4669      	mov	r1, sp
 8017582:	4681      	mov	r9, r0
 8017584:	f7ff ff5c 	bl	8017440 <__b2d>
 8017588:	a901      	add	r1, sp, #4
 801758a:	4640      	mov	r0, r8
 801758c:	ec57 6b10 	vmov	r6, r7, d0
 8017590:	f7ff ff56 	bl	8017440 <__b2d>
 8017594:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017598:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801759c:	eba3 0c02 	sub.w	ip, r3, r2
 80175a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80175a4:	1a9b      	subs	r3, r3, r2
 80175a6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80175aa:	ec5b ab10 	vmov	sl, fp, d0
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	bfce      	itee	gt
 80175b2:	463a      	movgt	r2, r7
 80175b4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80175b8:	465a      	movle	r2, fp
 80175ba:	4659      	mov	r1, fp
 80175bc:	463d      	mov	r5, r7
 80175be:	bfd4      	ite	le
 80175c0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80175c4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80175c8:	4630      	mov	r0, r6
 80175ca:	ee10 2a10 	vmov	r2, s0
 80175ce:	460b      	mov	r3, r1
 80175d0:	4629      	mov	r1, r5
 80175d2:	f7e9 f953 	bl	800087c <__aeabi_ddiv>
 80175d6:	ec41 0b10 	vmov	d0, r0, r1
 80175da:	b003      	add	sp, #12
 80175dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080175e0 <__copybits>:
 80175e0:	3901      	subs	r1, #1
 80175e2:	b510      	push	{r4, lr}
 80175e4:	1149      	asrs	r1, r1, #5
 80175e6:	6914      	ldr	r4, [r2, #16]
 80175e8:	3101      	adds	r1, #1
 80175ea:	f102 0314 	add.w	r3, r2, #20
 80175ee:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80175f2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80175f6:	42a3      	cmp	r3, r4
 80175f8:	4602      	mov	r2, r0
 80175fa:	d303      	bcc.n	8017604 <__copybits+0x24>
 80175fc:	2300      	movs	r3, #0
 80175fe:	428a      	cmp	r2, r1
 8017600:	d305      	bcc.n	801760e <__copybits+0x2e>
 8017602:	bd10      	pop	{r4, pc}
 8017604:	f853 2b04 	ldr.w	r2, [r3], #4
 8017608:	f840 2b04 	str.w	r2, [r0], #4
 801760c:	e7f3      	b.n	80175f6 <__copybits+0x16>
 801760e:	f842 3b04 	str.w	r3, [r2], #4
 8017612:	e7f4      	b.n	80175fe <__copybits+0x1e>

08017614 <__any_on>:
 8017614:	f100 0214 	add.w	r2, r0, #20
 8017618:	6900      	ldr	r0, [r0, #16]
 801761a:	114b      	asrs	r3, r1, #5
 801761c:	4298      	cmp	r0, r3
 801761e:	b510      	push	{r4, lr}
 8017620:	db11      	blt.n	8017646 <__any_on+0x32>
 8017622:	dd0a      	ble.n	801763a <__any_on+0x26>
 8017624:	f011 011f 	ands.w	r1, r1, #31
 8017628:	d007      	beq.n	801763a <__any_on+0x26>
 801762a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801762e:	fa24 f001 	lsr.w	r0, r4, r1
 8017632:	fa00 f101 	lsl.w	r1, r0, r1
 8017636:	428c      	cmp	r4, r1
 8017638:	d10b      	bne.n	8017652 <__any_on+0x3e>
 801763a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801763e:	4293      	cmp	r3, r2
 8017640:	d803      	bhi.n	801764a <__any_on+0x36>
 8017642:	2000      	movs	r0, #0
 8017644:	bd10      	pop	{r4, pc}
 8017646:	4603      	mov	r3, r0
 8017648:	e7f7      	b.n	801763a <__any_on+0x26>
 801764a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801764e:	2900      	cmp	r1, #0
 8017650:	d0f5      	beq.n	801763e <__any_on+0x2a>
 8017652:	2001      	movs	r0, #1
 8017654:	e7f6      	b.n	8017644 <__any_on+0x30>

08017656 <_realloc_r>:
 8017656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017658:	4607      	mov	r7, r0
 801765a:	4614      	mov	r4, r2
 801765c:	460e      	mov	r6, r1
 801765e:	b921      	cbnz	r1, 801766a <_realloc_r+0x14>
 8017660:	4611      	mov	r1, r2
 8017662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017666:	f7fd bb6b 	b.w	8014d40 <_malloc_r>
 801766a:	b922      	cbnz	r2, 8017676 <_realloc_r+0x20>
 801766c:	f7fd fb1a 	bl	8014ca4 <_free_r>
 8017670:	4625      	mov	r5, r4
 8017672:	4628      	mov	r0, r5
 8017674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017676:	f000 fa0d 	bl	8017a94 <_malloc_usable_size_r>
 801767a:	42a0      	cmp	r0, r4
 801767c:	d20f      	bcs.n	801769e <_realloc_r+0x48>
 801767e:	4621      	mov	r1, r4
 8017680:	4638      	mov	r0, r7
 8017682:	f7fd fb5d 	bl	8014d40 <_malloc_r>
 8017686:	4605      	mov	r5, r0
 8017688:	2800      	cmp	r0, #0
 801768a:	d0f2      	beq.n	8017672 <_realloc_r+0x1c>
 801768c:	4631      	mov	r1, r6
 801768e:	4622      	mov	r2, r4
 8017690:	f7fd face 	bl	8014c30 <memcpy>
 8017694:	4631      	mov	r1, r6
 8017696:	4638      	mov	r0, r7
 8017698:	f7fd fb04 	bl	8014ca4 <_free_r>
 801769c:	e7e9      	b.n	8017672 <_realloc_r+0x1c>
 801769e:	4635      	mov	r5, r6
 80176a0:	e7e7      	b.n	8017672 <_realloc_r+0x1c>

080176a2 <__ssputs_r>:
 80176a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176a6:	688e      	ldr	r6, [r1, #8]
 80176a8:	429e      	cmp	r6, r3
 80176aa:	4682      	mov	sl, r0
 80176ac:	460c      	mov	r4, r1
 80176ae:	4690      	mov	r8, r2
 80176b0:	4699      	mov	r9, r3
 80176b2:	d837      	bhi.n	8017724 <__ssputs_r+0x82>
 80176b4:	898a      	ldrh	r2, [r1, #12]
 80176b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80176ba:	d031      	beq.n	8017720 <__ssputs_r+0x7e>
 80176bc:	6825      	ldr	r5, [r4, #0]
 80176be:	6909      	ldr	r1, [r1, #16]
 80176c0:	1a6f      	subs	r7, r5, r1
 80176c2:	6965      	ldr	r5, [r4, #20]
 80176c4:	2302      	movs	r3, #2
 80176c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176ca:	fb95 f5f3 	sdiv	r5, r5, r3
 80176ce:	f109 0301 	add.w	r3, r9, #1
 80176d2:	443b      	add	r3, r7
 80176d4:	429d      	cmp	r5, r3
 80176d6:	bf38      	it	cc
 80176d8:	461d      	movcc	r5, r3
 80176da:	0553      	lsls	r3, r2, #21
 80176dc:	d530      	bpl.n	8017740 <__ssputs_r+0x9e>
 80176de:	4629      	mov	r1, r5
 80176e0:	f7fd fb2e 	bl	8014d40 <_malloc_r>
 80176e4:	4606      	mov	r6, r0
 80176e6:	b950      	cbnz	r0, 80176fe <__ssputs_r+0x5c>
 80176e8:	230c      	movs	r3, #12
 80176ea:	f8ca 3000 	str.w	r3, [sl]
 80176ee:	89a3      	ldrh	r3, [r4, #12]
 80176f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176f4:	81a3      	strh	r3, [r4, #12]
 80176f6:	f04f 30ff 	mov.w	r0, #4294967295
 80176fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176fe:	463a      	mov	r2, r7
 8017700:	6921      	ldr	r1, [r4, #16]
 8017702:	f7fd fa95 	bl	8014c30 <memcpy>
 8017706:	89a3      	ldrh	r3, [r4, #12]
 8017708:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801770c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017710:	81a3      	strh	r3, [r4, #12]
 8017712:	6126      	str	r6, [r4, #16]
 8017714:	6165      	str	r5, [r4, #20]
 8017716:	443e      	add	r6, r7
 8017718:	1bed      	subs	r5, r5, r7
 801771a:	6026      	str	r6, [r4, #0]
 801771c:	60a5      	str	r5, [r4, #8]
 801771e:	464e      	mov	r6, r9
 8017720:	454e      	cmp	r6, r9
 8017722:	d900      	bls.n	8017726 <__ssputs_r+0x84>
 8017724:	464e      	mov	r6, r9
 8017726:	4632      	mov	r2, r6
 8017728:	4641      	mov	r1, r8
 801772a:	6820      	ldr	r0, [r4, #0]
 801772c:	f7fd fa8b 	bl	8014c46 <memmove>
 8017730:	68a3      	ldr	r3, [r4, #8]
 8017732:	1b9b      	subs	r3, r3, r6
 8017734:	60a3      	str	r3, [r4, #8]
 8017736:	6823      	ldr	r3, [r4, #0]
 8017738:	441e      	add	r6, r3
 801773a:	6026      	str	r6, [r4, #0]
 801773c:	2000      	movs	r0, #0
 801773e:	e7dc      	b.n	80176fa <__ssputs_r+0x58>
 8017740:	462a      	mov	r2, r5
 8017742:	f7ff ff88 	bl	8017656 <_realloc_r>
 8017746:	4606      	mov	r6, r0
 8017748:	2800      	cmp	r0, #0
 801774a:	d1e2      	bne.n	8017712 <__ssputs_r+0x70>
 801774c:	6921      	ldr	r1, [r4, #16]
 801774e:	4650      	mov	r0, sl
 8017750:	f7fd faa8 	bl	8014ca4 <_free_r>
 8017754:	e7c8      	b.n	80176e8 <__ssputs_r+0x46>
	...

08017758 <_svfiprintf_r>:
 8017758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801775c:	461d      	mov	r5, r3
 801775e:	898b      	ldrh	r3, [r1, #12]
 8017760:	061f      	lsls	r7, r3, #24
 8017762:	b09d      	sub	sp, #116	; 0x74
 8017764:	4680      	mov	r8, r0
 8017766:	460c      	mov	r4, r1
 8017768:	4616      	mov	r6, r2
 801776a:	d50f      	bpl.n	801778c <_svfiprintf_r+0x34>
 801776c:	690b      	ldr	r3, [r1, #16]
 801776e:	b96b      	cbnz	r3, 801778c <_svfiprintf_r+0x34>
 8017770:	2140      	movs	r1, #64	; 0x40
 8017772:	f7fd fae5 	bl	8014d40 <_malloc_r>
 8017776:	6020      	str	r0, [r4, #0]
 8017778:	6120      	str	r0, [r4, #16]
 801777a:	b928      	cbnz	r0, 8017788 <_svfiprintf_r+0x30>
 801777c:	230c      	movs	r3, #12
 801777e:	f8c8 3000 	str.w	r3, [r8]
 8017782:	f04f 30ff 	mov.w	r0, #4294967295
 8017786:	e0c8      	b.n	801791a <_svfiprintf_r+0x1c2>
 8017788:	2340      	movs	r3, #64	; 0x40
 801778a:	6163      	str	r3, [r4, #20]
 801778c:	2300      	movs	r3, #0
 801778e:	9309      	str	r3, [sp, #36]	; 0x24
 8017790:	2320      	movs	r3, #32
 8017792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017796:	2330      	movs	r3, #48	; 0x30
 8017798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801779c:	9503      	str	r5, [sp, #12]
 801779e:	f04f 0b01 	mov.w	fp, #1
 80177a2:	4637      	mov	r7, r6
 80177a4:	463d      	mov	r5, r7
 80177a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80177aa:	b10b      	cbz	r3, 80177b0 <_svfiprintf_r+0x58>
 80177ac:	2b25      	cmp	r3, #37	; 0x25
 80177ae:	d13e      	bne.n	801782e <_svfiprintf_r+0xd6>
 80177b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80177b4:	d00b      	beq.n	80177ce <_svfiprintf_r+0x76>
 80177b6:	4653      	mov	r3, sl
 80177b8:	4632      	mov	r2, r6
 80177ba:	4621      	mov	r1, r4
 80177bc:	4640      	mov	r0, r8
 80177be:	f7ff ff70 	bl	80176a2 <__ssputs_r>
 80177c2:	3001      	adds	r0, #1
 80177c4:	f000 80a4 	beq.w	8017910 <_svfiprintf_r+0x1b8>
 80177c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ca:	4453      	add	r3, sl
 80177cc:	9309      	str	r3, [sp, #36]	; 0x24
 80177ce:	783b      	ldrb	r3, [r7, #0]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	f000 809d 	beq.w	8017910 <_svfiprintf_r+0x1b8>
 80177d6:	2300      	movs	r3, #0
 80177d8:	f04f 32ff 	mov.w	r2, #4294967295
 80177dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177e0:	9304      	str	r3, [sp, #16]
 80177e2:	9307      	str	r3, [sp, #28]
 80177e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177e8:	931a      	str	r3, [sp, #104]	; 0x68
 80177ea:	462f      	mov	r7, r5
 80177ec:	2205      	movs	r2, #5
 80177ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80177f2:	4850      	ldr	r0, [pc, #320]	; (8017934 <_svfiprintf_r+0x1dc>)
 80177f4:	f7e8 fd0c 	bl	8000210 <memchr>
 80177f8:	9b04      	ldr	r3, [sp, #16]
 80177fa:	b9d0      	cbnz	r0, 8017832 <_svfiprintf_r+0xda>
 80177fc:	06d9      	lsls	r1, r3, #27
 80177fe:	bf44      	itt	mi
 8017800:	2220      	movmi	r2, #32
 8017802:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017806:	071a      	lsls	r2, r3, #28
 8017808:	bf44      	itt	mi
 801780a:	222b      	movmi	r2, #43	; 0x2b
 801780c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017810:	782a      	ldrb	r2, [r5, #0]
 8017812:	2a2a      	cmp	r2, #42	; 0x2a
 8017814:	d015      	beq.n	8017842 <_svfiprintf_r+0xea>
 8017816:	9a07      	ldr	r2, [sp, #28]
 8017818:	462f      	mov	r7, r5
 801781a:	2000      	movs	r0, #0
 801781c:	250a      	movs	r5, #10
 801781e:	4639      	mov	r1, r7
 8017820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017824:	3b30      	subs	r3, #48	; 0x30
 8017826:	2b09      	cmp	r3, #9
 8017828:	d94d      	bls.n	80178c6 <_svfiprintf_r+0x16e>
 801782a:	b1b8      	cbz	r0, 801785c <_svfiprintf_r+0x104>
 801782c:	e00f      	b.n	801784e <_svfiprintf_r+0xf6>
 801782e:	462f      	mov	r7, r5
 8017830:	e7b8      	b.n	80177a4 <_svfiprintf_r+0x4c>
 8017832:	4a40      	ldr	r2, [pc, #256]	; (8017934 <_svfiprintf_r+0x1dc>)
 8017834:	1a80      	subs	r0, r0, r2
 8017836:	fa0b f000 	lsl.w	r0, fp, r0
 801783a:	4318      	orrs	r0, r3
 801783c:	9004      	str	r0, [sp, #16]
 801783e:	463d      	mov	r5, r7
 8017840:	e7d3      	b.n	80177ea <_svfiprintf_r+0x92>
 8017842:	9a03      	ldr	r2, [sp, #12]
 8017844:	1d11      	adds	r1, r2, #4
 8017846:	6812      	ldr	r2, [r2, #0]
 8017848:	9103      	str	r1, [sp, #12]
 801784a:	2a00      	cmp	r2, #0
 801784c:	db01      	blt.n	8017852 <_svfiprintf_r+0xfa>
 801784e:	9207      	str	r2, [sp, #28]
 8017850:	e004      	b.n	801785c <_svfiprintf_r+0x104>
 8017852:	4252      	negs	r2, r2
 8017854:	f043 0302 	orr.w	r3, r3, #2
 8017858:	9207      	str	r2, [sp, #28]
 801785a:	9304      	str	r3, [sp, #16]
 801785c:	783b      	ldrb	r3, [r7, #0]
 801785e:	2b2e      	cmp	r3, #46	; 0x2e
 8017860:	d10c      	bne.n	801787c <_svfiprintf_r+0x124>
 8017862:	787b      	ldrb	r3, [r7, #1]
 8017864:	2b2a      	cmp	r3, #42	; 0x2a
 8017866:	d133      	bne.n	80178d0 <_svfiprintf_r+0x178>
 8017868:	9b03      	ldr	r3, [sp, #12]
 801786a:	1d1a      	adds	r2, r3, #4
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	9203      	str	r2, [sp, #12]
 8017870:	2b00      	cmp	r3, #0
 8017872:	bfb8      	it	lt
 8017874:	f04f 33ff 	movlt.w	r3, #4294967295
 8017878:	3702      	adds	r7, #2
 801787a:	9305      	str	r3, [sp, #20]
 801787c:	4d2e      	ldr	r5, [pc, #184]	; (8017938 <_svfiprintf_r+0x1e0>)
 801787e:	7839      	ldrb	r1, [r7, #0]
 8017880:	2203      	movs	r2, #3
 8017882:	4628      	mov	r0, r5
 8017884:	f7e8 fcc4 	bl	8000210 <memchr>
 8017888:	b138      	cbz	r0, 801789a <_svfiprintf_r+0x142>
 801788a:	2340      	movs	r3, #64	; 0x40
 801788c:	1b40      	subs	r0, r0, r5
 801788e:	fa03 f000 	lsl.w	r0, r3, r0
 8017892:	9b04      	ldr	r3, [sp, #16]
 8017894:	4303      	orrs	r3, r0
 8017896:	3701      	adds	r7, #1
 8017898:	9304      	str	r3, [sp, #16]
 801789a:	7839      	ldrb	r1, [r7, #0]
 801789c:	4827      	ldr	r0, [pc, #156]	; (801793c <_svfiprintf_r+0x1e4>)
 801789e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80178a2:	2206      	movs	r2, #6
 80178a4:	1c7e      	adds	r6, r7, #1
 80178a6:	f7e8 fcb3 	bl	8000210 <memchr>
 80178aa:	2800      	cmp	r0, #0
 80178ac:	d038      	beq.n	8017920 <_svfiprintf_r+0x1c8>
 80178ae:	4b24      	ldr	r3, [pc, #144]	; (8017940 <_svfiprintf_r+0x1e8>)
 80178b0:	bb13      	cbnz	r3, 80178f8 <_svfiprintf_r+0x1a0>
 80178b2:	9b03      	ldr	r3, [sp, #12]
 80178b4:	3307      	adds	r3, #7
 80178b6:	f023 0307 	bic.w	r3, r3, #7
 80178ba:	3308      	adds	r3, #8
 80178bc:	9303      	str	r3, [sp, #12]
 80178be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178c0:	444b      	add	r3, r9
 80178c2:	9309      	str	r3, [sp, #36]	; 0x24
 80178c4:	e76d      	b.n	80177a2 <_svfiprintf_r+0x4a>
 80178c6:	fb05 3202 	mla	r2, r5, r2, r3
 80178ca:	2001      	movs	r0, #1
 80178cc:	460f      	mov	r7, r1
 80178ce:	e7a6      	b.n	801781e <_svfiprintf_r+0xc6>
 80178d0:	2300      	movs	r3, #0
 80178d2:	3701      	adds	r7, #1
 80178d4:	9305      	str	r3, [sp, #20]
 80178d6:	4619      	mov	r1, r3
 80178d8:	250a      	movs	r5, #10
 80178da:	4638      	mov	r0, r7
 80178dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178e0:	3a30      	subs	r2, #48	; 0x30
 80178e2:	2a09      	cmp	r2, #9
 80178e4:	d903      	bls.n	80178ee <_svfiprintf_r+0x196>
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d0c8      	beq.n	801787c <_svfiprintf_r+0x124>
 80178ea:	9105      	str	r1, [sp, #20]
 80178ec:	e7c6      	b.n	801787c <_svfiprintf_r+0x124>
 80178ee:	fb05 2101 	mla	r1, r5, r1, r2
 80178f2:	2301      	movs	r3, #1
 80178f4:	4607      	mov	r7, r0
 80178f6:	e7f0      	b.n	80178da <_svfiprintf_r+0x182>
 80178f8:	ab03      	add	r3, sp, #12
 80178fa:	9300      	str	r3, [sp, #0]
 80178fc:	4622      	mov	r2, r4
 80178fe:	4b11      	ldr	r3, [pc, #68]	; (8017944 <_svfiprintf_r+0x1ec>)
 8017900:	a904      	add	r1, sp, #16
 8017902:	4640      	mov	r0, r8
 8017904:	f3af 8000 	nop.w
 8017908:	f1b0 3fff 	cmp.w	r0, #4294967295
 801790c:	4681      	mov	r9, r0
 801790e:	d1d6      	bne.n	80178be <_svfiprintf_r+0x166>
 8017910:	89a3      	ldrh	r3, [r4, #12]
 8017912:	065b      	lsls	r3, r3, #25
 8017914:	f53f af35 	bmi.w	8017782 <_svfiprintf_r+0x2a>
 8017918:	9809      	ldr	r0, [sp, #36]	; 0x24
 801791a:	b01d      	add	sp, #116	; 0x74
 801791c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017920:	ab03      	add	r3, sp, #12
 8017922:	9300      	str	r3, [sp, #0]
 8017924:	4622      	mov	r2, r4
 8017926:	4b07      	ldr	r3, [pc, #28]	; (8017944 <_svfiprintf_r+0x1ec>)
 8017928:	a904      	add	r1, sp, #16
 801792a:	4640      	mov	r0, r8
 801792c:	f7fd fc18 	bl	8015160 <_printf_i>
 8017930:	e7ea      	b.n	8017908 <_svfiprintf_r+0x1b0>
 8017932:	bf00      	nop
 8017934:	08036aa8 	.word	0x08036aa8
 8017938:	08036aae 	.word	0x08036aae
 801793c:	08036ab2 	.word	0x08036ab2
 8017940:	00000000 	.word	0x00000000
 8017944:	080176a3 	.word	0x080176a3

08017948 <__sread>:
 8017948:	b510      	push	{r4, lr}
 801794a:	460c      	mov	r4, r1
 801794c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017950:	f000 f8a8 	bl	8017aa4 <_read_r>
 8017954:	2800      	cmp	r0, #0
 8017956:	bfab      	itete	ge
 8017958:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801795a:	89a3      	ldrhlt	r3, [r4, #12]
 801795c:	181b      	addge	r3, r3, r0
 801795e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017962:	bfac      	ite	ge
 8017964:	6563      	strge	r3, [r4, #84]	; 0x54
 8017966:	81a3      	strhlt	r3, [r4, #12]
 8017968:	bd10      	pop	{r4, pc}

0801796a <__swrite>:
 801796a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801796e:	461f      	mov	r7, r3
 8017970:	898b      	ldrh	r3, [r1, #12]
 8017972:	05db      	lsls	r3, r3, #23
 8017974:	4605      	mov	r5, r0
 8017976:	460c      	mov	r4, r1
 8017978:	4616      	mov	r6, r2
 801797a:	d505      	bpl.n	8017988 <__swrite+0x1e>
 801797c:	2302      	movs	r3, #2
 801797e:	2200      	movs	r2, #0
 8017980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017984:	f000 f874 	bl	8017a70 <_lseek_r>
 8017988:	89a3      	ldrh	r3, [r4, #12]
 801798a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801798e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017992:	81a3      	strh	r3, [r4, #12]
 8017994:	4632      	mov	r2, r6
 8017996:	463b      	mov	r3, r7
 8017998:	4628      	mov	r0, r5
 801799a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801799e:	f000 b823 	b.w	80179e8 <_write_r>

080179a2 <__sseek>:
 80179a2:	b510      	push	{r4, lr}
 80179a4:	460c      	mov	r4, r1
 80179a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179aa:	f000 f861 	bl	8017a70 <_lseek_r>
 80179ae:	1c43      	adds	r3, r0, #1
 80179b0:	89a3      	ldrh	r3, [r4, #12]
 80179b2:	bf15      	itete	ne
 80179b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80179b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80179ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80179be:	81a3      	strheq	r3, [r4, #12]
 80179c0:	bf18      	it	ne
 80179c2:	81a3      	strhne	r3, [r4, #12]
 80179c4:	bd10      	pop	{r4, pc}

080179c6 <__sclose>:
 80179c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80179ca:	f000 b81f 	b.w	8017a0c <_close_r>

080179ce <__ascii_wctomb>:
 80179ce:	b149      	cbz	r1, 80179e4 <__ascii_wctomb+0x16>
 80179d0:	2aff      	cmp	r2, #255	; 0xff
 80179d2:	bf85      	ittet	hi
 80179d4:	238a      	movhi	r3, #138	; 0x8a
 80179d6:	6003      	strhi	r3, [r0, #0]
 80179d8:	700a      	strbls	r2, [r1, #0]
 80179da:	f04f 30ff 	movhi.w	r0, #4294967295
 80179de:	bf98      	it	ls
 80179e0:	2001      	movls	r0, #1
 80179e2:	4770      	bx	lr
 80179e4:	4608      	mov	r0, r1
 80179e6:	4770      	bx	lr

080179e8 <_write_r>:
 80179e8:	b538      	push	{r3, r4, r5, lr}
 80179ea:	4c07      	ldr	r4, [pc, #28]	; (8017a08 <_write_r+0x20>)
 80179ec:	4605      	mov	r5, r0
 80179ee:	4608      	mov	r0, r1
 80179f0:	4611      	mov	r1, r2
 80179f2:	2200      	movs	r2, #0
 80179f4:	6022      	str	r2, [r4, #0]
 80179f6:	461a      	mov	r2, r3
 80179f8:	f7ee fe33 	bl	8006662 <_write>
 80179fc:	1c43      	adds	r3, r0, #1
 80179fe:	d102      	bne.n	8017a06 <_write_r+0x1e>
 8017a00:	6823      	ldr	r3, [r4, #0]
 8017a02:	b103      	cbz	r3, 8017a06 <_write_r+0x1e>
 8017a04:	602b      	str	r3, [r5, #0]
 8017a06:	bd38      	pop	{r3, r4, r5, pc}
 8017a08:	20000dd8 	.word	0x20000dd8

08017a0c <_close_r>:
 8017a0c:	b538      	push	{r3, r4, r5, lr}
 8017a0e:	4c06      	ldr	r4, [pc, #24]	; (8017a28 <_close_r+0x1c>)
 8017a10:	2300      	movs	r3, #0
 8017a12:	4605      	mov	r5, r0
 8017a14:	4608      	mov	r0, r1
 8017a16:	6023      	str	r3, [r4, #0]
 8017a18:	f7ee fe3f 	bl	800669a <_close>
 8017a1c:	1c43      	adds	r3, r0, #1
 8017a1e:	d102      	bne.n	8017a26 <_close_r+0x1a>
 8017a20:	6823      	ldr	r3, [r4, #0]
 8017a22:	b103      	cbz	r3, 8017a26 <_close_r+0x1a>
 8017a24:	602b      	str	r3, [r5, #0]
 8017a26:	bd38      	pop	{r3, r4, r5, pc}
 8017a28:	20000dd8 	.word	0x20000dd8

08017a2c <_fstat_r>:
 8017a2c:	b538      	push	{r3, r4, r5, lr}
 8017a2e:	4c07      	ldr	r4, [pc, #28]	; (8017a4c <_fstat_r+0x20>)
 8017a30:	2300      	movs	r3, #0
 8017a32:	4605      	mov	r5, r0
 8017a34:	4608      	mov	r0, r1
 8017a36:	4611      	mov	r1, r2
 8017a38:	6023      	str	r3, [r4, #0]
 8017a3a:	f7ee fe3a 	bl	80066b2 <_fstat>
 8017a3e:	1c43      	adds	r3, r0, #1
 8017a40:	d102      	bne.n	8017a48 <_fstat_r+0x1c>
 8017a42:	6823      	ldr	r3, [r4, #0]
 8017a44:	b103      	cbz	r3, 8017a48 <_fstat_r+0x1c>
 8017a46:	602b      	str	r3, [r5, #0]
 8017a48:	bd38      	pop	{r3, r4, r5, pc}
 8017a4a:	bf00      	nop
 8017a4c:	20000dd8 	.word	0x20000dd8

08017a50 <_isatty_r>:
 8017a50:	b538      	push	{r3, r4, r5, lr}
 8017a52:	4c06      	ldr	r4, [pc, #24]	; (8017a6c <_isatty_r+0x1c>)
 8017a54:	2300      	movs	r3, #0
 8017a56:	4605      	mov	r5, r0
 8017a58:	4608      	mov	r0, r1
 8017a5a:	6023      	str	r3, [r4, #0]
 8017a5c:	f7ee fe39 	bl	80066d2 <_isatty>
 8017a60:	1c43      	adds	r3, r0, #1
 8017a62:	d102      	bne.n	8017a6a <_isatty_r+0x1a>
 8017a64:	6823      	ldr	r3, [r4, #0]
 8017a66:	b103      	cbz	r3, 8017a6a <_isatty_r+0x1a>
 8017a68:	602b      	str	r3, [r5, #0]
 8017a6a:	bd38      	pop	{r3, r4, r5, pc}
 8017a6c:	20000dd8 	.word	0x20000dd8

08017a70 <_lseek_r>:
 8017a70:	b538      	push	{r3, r4, r5, lr}
 8017a72:	4c07      	ldr	r4, [pc, #28]	; (8017a90 <_lseek_r+0x20>)
 8017a74:	4605      	mov	r5, r0
 8017a76:	4608      	mov	r0, r1
 8017a78:	4611      	mov	r1, r2
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	6022      	str	r2, [r4, #0]
 8017a7e:	461a      	mov	r2, r3
 8017a80:	f7ee fe32 	bl	80066e8 <_lseek>
 8017a84:	1c43      	adds	r3, r0, #1
 8017a86:	d102      	bne.n	8017a8e <_lseek_r+0x1e>
 8017a88:	6823      	ldr	r3, [r4, #0]
 8017a8a:	b103      	cbz	r3, 8017a8e <_lseek_r+0x1e>
 8017a8c:	602b      	str	r3, [r5, #0]
 8017a8e:	bd38      	pop	{r3, r4, r5, pc}
 8017a90:	20000dd8 	.word	0x20000dd8

08017a94 <_malloc_usable_size_r>:
 8017a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017a98:	1f18      	subs	r0, r3, #4
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	bfbc      	itt	lt
 8017a9e:	580b      	ldrlt	r3, [r1, r0]
 8017aa0:	18c0      	addlt	r0, r0, r3
 8017aa2:	4770      	bx	lr

08017aa4 <_read_r>:
 8017aa4:	b538      	push	{r3, r4, r5, lr}
 8017aa6:	4c07      	ldr	r4, [pc, #28]	; (8017ac4 <_read_r+0x20>)
 8017aa8:	4605      	mov	r5, r0
 8017aaa:	4608      	mov	r0, r1
 8017aac:	4611      	mov	r1, r2
 8017aae:	2200      	movs	r2, #0
 8017ab0:	6022      	str	r2, [r4, #0]
 8017ab2:	461a      	mov	r2, r3
 8017ab4:	f7ee fdb8 	bl	8006628 <_read>
 8017ab8:	1c43      	adds	r3, r0, #1
 8017aba:	d102      	bne.n	8017ac2 <_read_r+0x1e>
 8017abc:	6823      	ldr	r3, [r4, #0]
 8017abe:	b103      	cbz	r3, 8017ac2 <_read_r+0x1e>
 8017ac0:	602b      	str	r3, [r5, #0]
 8017ac2:	bd38      	pop	{r3, r4, r5, pc}
 8017ac4:	20000dd8 	.word	0x20000dd8

08017ac8 <_init>:
 8017ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aca:	bf00      	nop
 8017acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ace:	bc08      	pop	{r3}
 8017ad0:	469e      	mov	lr, r3
 8017ad2:	4770      	bx	lr

08017ad4 <_fini>:
 8017ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ad6:	bf00      	nop
 8017ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ada:	bc08      	pop	{r3}
 8017adc:	469e      	mov	lr, r3
 8017ade:	4770      	bx	lr
