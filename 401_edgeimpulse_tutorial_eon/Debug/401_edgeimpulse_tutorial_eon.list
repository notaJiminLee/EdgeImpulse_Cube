
401_edgeimpulse_tutorial_eon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bfc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00022a08  0801c160  0801c160  0002c160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803eb68  0803eb68  0005086c  2**0
                  CONTENTS
  4 .ARM          00000008  0803eb68  0803eb68  0004eb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803eb70  0803eb70  0005086c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803eb70  0803eb70  0004eb70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0803eb78  0803eb78  0004eb78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000086c  20000000  0803eb80  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000086c  0803f3ec  0005086c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009dc  0803f3ec  000509dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0005086c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00217b09  00000000  00000000  0005089c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00012af1  00000000  00000000  002683a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000085b8  00000000  00000000  0027ae98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000083e0  00000000  00000000  00283450  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000278f9  00000000  00000000  0028b830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0004aba9  00000000  00000000  002b3129  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00159bf4  00000000  00000000  002fdcd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  004578c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00027f58  00000000  00000000  00457944  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000086c 	.word	0x2000086c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801c148 	.word	0x0801c148

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000870 	.word	0x20000870
 80001dc:	0801c148 	.word	0x0801c148

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9ac 	b.w	8001028 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f840 	bl	8000d5c <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	4b0d      	ldr	r3, [pc, #52]	; (8000d54 <__aeabi_d2ulz+0x3c>)
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	2200      	movs	r2, #0
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <__aeabi_d2ulz+0x40>)
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	2200      	movs	r2, #0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4310      	orrs	r0, r2
 8000d4e:	4619      	mov	r1, r3
 8000d50:	bdd0      	pop	{r4, r6, r7, pc}
 8000d52:	bf00      	nop
 8000d54:	3df00000 	.word	0x3df00000
 8000d58:	41f00000 	.word	0x41f00000

08000d5c <__udivmoddi4>:
 8000d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d60:	9e08      	ldr	r6, [sp, #32]
 8000d62:	4604      	mov	r4, r0
 8000d64:	4688      	mov	r8, r1
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d14b      	bne.n	8000e02 <__udivmoddi4+0xa6>
 8000d6a:	428a      	cmp	r2, r1
 8000d6c:	4615      	mov	r5, r2
 8000d6e:	d967      	bls.n	8000e40 <__udivmoddi4+0xe4>
 8000d70:	fab2 f282 	clz	r2, r2
 8000d74:	b14a      	cbz	r2, 8000d8a <__udivmoddi4+0x2e>
 8000d76:	f1c2 0720 	rsb	r7, r2, #32
 8000d7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d82:	4095      	lsls	r5, r2
 8000d84:	ea47 0803 	orr.w	r8, r7, r3
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d94:	fa1f fc85 	uxth.w	ip, r5
 8000d98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000da0:	fb07 f10c 	mul.w	r1, r7, ip
 8000da4:	4299      	cmp	r1, r3
 8000da6:	d909      	bls.n	8000dbc <__udivmoddi4+0x60>
 8000da8:	18eb      	adds	r3, r5, r3
 8000daa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dae:	f080 811b 	bcs.w	8000fe8 <__udivmoddi4+0x28c>
 8000db2:	4299      	cmp	r1, r3
 8000db4:	f240 8118 	bls.w	8000fe8 <__udivmoddi4+0x28c>
 8000db8:	3f02      	subs	r7, #2
 8000dba:	442b      	add	r3, r5
 8000dbc:	1a5b      	subs	r3, r3, r1
 8000dbe:	b2a4      	uxth	r4, r4
 8000dc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d909      	bls.n	8000de8 <__udivmoddi4+0x8c>
 8000dd4:	192c      	adds	r4, r5, r4
 8000dd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dda:	f080 8107 	bcs.w	8000fec <__udivmoddi4+0x290>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	f240 8104 	bls.w	8000fec <__udivmoddi4+0x290>
 8000de4:	3802      	subs	r0, #2
 8000de6:	442c      	add	r4, r5
 8000de8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	2700      	movs	r7, #0
 8000df2:	b11e      	cbz	r6, 8000dfc <__udivmoddi4+0xa0>
 8000df4:	40d4      	lsrs	r4, r2
 8000df6:	2300      	movs	r3, #0
 8000df8:	e9c6 4300 	strd	r4, r3, [r6]
 8000dfc:	4639      	mov	r1, r7
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d909      	bls.n	8000e1a <__udivmoddi4+0xbe>
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	f000 80eb 	beq.w	8000fe2 <__udivmoddi4+0x286>
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000e12:	4638      	mov	r0, r7
 8000e14:	4639      	mov	r1, r7
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	fab3 f783 	clz	r7, r3
 8000e1e:	2f00      	cmp	r7, #0
 8000e20:	d147      	bne.n	8000eb2 <__udivmoddi4+0x156>
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xd0>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 80fa 	bhi.w	8001020 <__udivmoddi4+0x2c4>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4698      	mov	r8, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d0e0      	beq.n	8000dfc <__udivmoddi4+0xa0>
 8000e3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3e:	e7dd      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000e40:	b902      	cbnz	r2, 8000e44 <__udivmoddi4+0xe8>
 8000e42:	deff      	udf	#255	; 0xff
 8000e44:	fab2 f282 	clz	r2, r2
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f040 808f 	bne.w	8000f6c <__udivmoddi4+0x210>
 8000e4e:	1b49      	subs	r1, r1, r5
 8000e50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e54:	fa1f f885 	uxth.w	r8, r5
 8000e58:	2701      	movs	r7, #1
 8000e5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5e:	0c23      	lsrs	r3, r4, #16
 8000e60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e68:	fb08 f10c 	mul.w	r1, r8, ip
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0x124>
 8000e70:	18eb      	adds	r3, r5, r3
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x122>
 8000e78:	4299      	cmp	r1, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2bc>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1a59      	subs	r1, r3, r1
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x14c>
 8000e98:	192c      	adds	r4, r5, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x14a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80b6 	bhi.w	8001012 <__udivmoddi4+0x2b6>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e79f      	b.n	8000df2 <__udivmoddi4+0x96>
 8000eb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb6:	40bb      	lsls	r3, r7
 8000eb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ebc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ec0:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ecc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ed0:	4325      	orrs	r5, r4
 8000ed2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed6:	0c2c      	lsrs	r4, r5, #16
 8000ed8:	fb08 3319 	mls	r3, r8, r9, r3
 8000edc:	fa1f fa8e 	uxth.w	sl, lr
 8000ee0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee8:	429c      	cmp	r4, r3
 8000eea:	fa02 f207 	lsl.w	r2, r2, r7
 8000eee:	fa00 f107 	lsl.w	r1, r0, r7
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b0>
 8000ef4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000efc:	f080 8087 	bcs.w	800100e <__udivmoddi4+0x2b2>
 8000f00:	429c      	cmp	r4, r3
 8000f02:	f240 8084 	bls.w	800100e <__udivmoddi4+0x2b2>
 8000f06:	f1a9 0902 	sub.w	r9, r9, #2
 8000f0a:	4473      	add	r3, lr
 8000f0c:	1b1b      	subs	r3, r3, r4
 8000f0e:	b2ad      	uxth	r5, r5
 8000f10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f14:	fb08 3310 	mls	r3, r8, r0, r3
 8000f18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f20:	45a2      	cmp	sl, r4
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1da>
 8000f24:	eb1e 0404 	adds.w	r4, lr, r4
 8000f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f2c:	d26b      	bcs.n	8001006 <__udivmoddi4+0x2aa>
 8000f2e:	45a2      	cmp	sl, r4
 8000f30:	d969      	bls.n	8001006 <__udivmoddi4+0x2aa>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4474      	add	r4, lr
 8000f36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3e:	eba4 040a 	sub.w	r4, r4, sl
 8000f42:	454c      	cmp	r4, r9
 8000f44:	46c2      	mov	sl, r8
 8000f46:	464b      	mov	r3, r9
 8000f48:	d354      	bcc.n	8000ff4 <__udivmoddi4+0x298>
 8000f4a:	d051      	beq.n	8000ff0 <__udivmoddi4+0x294>
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	d069      	beq.n	8001024 <__udivmoddi4+0x2c8>
 8000f50:	ebb1 050a 	subs.w	r5, r1, sl
 8000f54:	eb64 0403 	sbc.w	r4, r4, r3
 8000f58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f5c:	40fd      	lsrs	r5, r7
 8000f5e:	40fc      	lsrs	r4, r7
 8000f60:	ea4c 0505 	orr.w	r5, ip, r5
 8000f64:	e9c6 5400 	strd	r5, r4, [r6]
 8000f68:	2700      	movs	r7, #0
 8000f6a:	e747      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000f6c:	f1c2 0320 	rsb	r3, r2, #32
 8000f70:	fa20 f703 	lsr.w	r7, r0, r3
 8000f74:	4095      	lsls	r5, r2
 8000f76:	fa01 f002 	lsl.w	r0, r1, r2
 8000f7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f82:	4338      	orrs	r0, r7
 8000f84:	0c01      	lsrs	r1, r0, #16
 8000f86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f8a:	fa1f f885 	uxth.w	r8, r5
 8000f8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f96:	fb07 f308 	mul.w	r3, r7, r8
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d907      	bls.n	8000fb2 <__udivmoddi4+0x256>
 8000fa2:	1869      	adds	r1, r5, r1
 8000fa4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa8:	d22f      	bcs.n	800100a <__udivmoddi4+0x2ae>
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d92d      	bls.n	800100a <__udivmoddi4+0x2ae>
 8000fae:	3f02      	subs	r7, #2
 8000fb0:	4429      	add	r1, r5
 8000fb2:	1acb      	subs	r3, r1, r3
 8000fb4:	b281      	uxth	r1, r0
 8000fb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc2:	fb00 f308 	mul.w	r3, r0, r8
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d907      	bls.n	8000fda <__udivmoddi4+0x27e>
 8000fca:	1869      	adds	r1, r5, r1
 8000fcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fd0:	d217      	bcs.n	8001002 <__udivmoddi4+0x2a6>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	d915      	bls.n	8001002 <__udivmoddi4+0x2a6>
 8000fd6:	3802      	subs	r0, #2
 8000fd8:	4429      	add	r1, r5
 8000fda:	1ac9      	subs	r1, r1, r3
 8000fdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fe0:	e73b      	b.n	8000e5a <__udivmoddi4+0xfe>
 8000fe2:	4637      	mov	r7, r6
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e709      	b.n	8000dfc <__udivmoddi4+0xa0>
 8000fe8:	4607      	mov	r7, r0
 8000fea:	e6e7      	b.n	8000dbc <__udivmoddi4+0x60>
 8000fec:	4618      	mov	r0, r3
 8000fee:	e6fb      	b.n	8000de8 <__udivmoddi4+0x8c>
 8000ff0:	4541      	cmp	r1, r8
 8000ff2:	d2ab      	bcs.n	8000f4c <__udivmoddi4+0x1f0>
 8000ff4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ffc:	3801      	subs	r0, #1
 8000ffe:	4613      	mov	r3, r2
 8001000:	e7a4      	b.n	8000f4c <__udivmoddi4+0x1f0>
 8001002:	4660      	mov	r0, ip
 8001004:	e7e9      	b.n	8000fda <__udivmoddi4+0x27e>
 8001006:	4618      	mov	r0, r3
 8001008:	e795      	b.n	8000f36 <__udivmoddi4+0x1da>
 800100a:	4667      	mov	r7, ip
 800100c:	e7d1      	b.n	8000fb2 <__udivmoddi4+0x256>
 800100e:	4681      	mov	r9, r0
 8001010:	e77c      	b.n	8000f0c <__udivmoddi4+0x1b0>
 8001012:	3802      	subs	r0, #2
 8001014:	442c      	add	r4, r5
 8001016:	e747      	b.n	8000ea8 <__udivmoddi4+0x14c>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	442b      	add	r3, r5
 800101e:	e72f      	b.n	8000e80 <__udivmoddi4+0x124>
 8001020:	4638      	mov	r0, r7
 8001022:	e708      	b.n	8000e36 <__udivmoddi4+0xda>
 8001024:	4637      	mov	r7, r6
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0xa0>

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZSt4__lgi>:

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	fab3 f383 	clz	r3, r3
 800103a:	f1c3 031f 	rsb	r3, r3, #31
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	6039      	str	r1, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	ed87 0a01 	vstr	s0, [r7, #4]
 800106c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001070:	eef0 7ae7 	vabs.f32	s15, s15
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <_ZNSt14numeric_limitsIsE3minEv>:
    struct numeric_limits<short>
    {
      static _GLIBCXX_USE_CONSTEXPR bool is_specialized = true;

      static _GLIBCXX_CONSTEXPR short
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
 8001088:	4b02      	ldr	r3, [pc, #8]	; (8001094 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800108a:	4618      	mov	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	ffff8000 	.word	0xffff8000

08001098 <_ZNSt14numeric_limitsIsE3maxEv>:

      static _GLIBCXX_CONSTEXPR short
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
 800109c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	6879      	ldr	r1, [r7, #4]
 800110a:	2203      	movs	r2, #3
 800110c:	4798      	blx	r3
    }
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf0c      	ite	eq
 8001128:	2301      	moveq	r3, #1
 800112a:	2300      	movne	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 800113a:	b580      	push	{r7, lr}
 800113c:	b084      	sub	sp, #16
 800113e:	af00      	add	r7, sp, #0
 8001140:	60f8      	str	r0, [r7, #12]
 8001142:	60b9      	str	r1, [r7, #8]
 8001144:	607a      	str	r2, [r7, #4]
 8001146:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2200      	movs	r2, #0
 8001158:	731a      	strb	r2, [r3, #12]
 800115a:	e00e      	b.n	800117a <_ZN2ei9ei_matrixC1EmmPf+0x40>
        }
        else {
            buffer = (float*)ei_calloc(n_rows * n_cols * sizeof(float), 1);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	fb02 f303 	mul.w	r3, r2, r3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	2101      	movs	r1, #1
 8001168:	4618      	mov	r0, r3
 800116a:	f00c f95f 	bl	800d42c <_Z9ei_callocjj>
 800116e:	4602      	mov	r2, r0
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2201      	movs	r2, #1
 8001178:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float), buffer);
            }
#endif
        }
    }
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <_ZN2ei9ei_matrixD1Ev+0x22>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7b1b      	ldrb	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d004      	beq.n	80011b2 <_ZN2ei9ei_matrixD1Ev+0x22>
            ei_free(buffer);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f00c f94b 	bl	800d448 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(float), buffer);
            }
#endif
        }
    }
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_ZN2ei12ei_matrix_i8C1EmmPa>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix_i8(
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <_ZN2ei12ei_matrix_i8C1EmmPa+0x22>
            buffer = a_buffer;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	2200      	movs	r2, #0
 80011da:	731a      	strb	r2, [r3, #12]
 80011dc:	e00d      	b.n	80011fa <_ZN2ei12ei_matrix_i8C1EmmPa+0x3e>
        }
        else {
            buffer = (int8_t*)ei_calloc(n_rows * n_cols * sizeof(int8_t), 1);
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	fb02 f303 	mul.w	r3, r2, r3
 80011e6:	2101      	movs	r1, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f00c f91f 	bl	800d42c <_Z9ei_callocjj>
 80011ee:	4602      	mov	r2, r0
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2201      	movs	r2, #1
 80011f8:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN2ei12ei_matrix_i8D1Ev>:

    ~ei_matrix_i8() {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d008      	beq.n	8001232 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7b1b      	ldrb	r3, [r3, #12]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d004      	beq.n	8001232 <_ZN2ei12ei_matrix_i8D1Ev+0x22>
            ei_free(buffer);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f00c f90b 	bl	800d448 <_Z7ei_freePv>
                ei_dsp_register_matrix_free(_originally_allocated_rows, _originally_allocated_cols,
                    sizeof(int8_t), buffer);
            }
#endif
        }
    }
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
 8001240:	e7fe      	b.n	8001240 <_ZSt25__throw_bad_function_callv+0x4>

08001242 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	ed87 0a01 	vstr	s0, [r7, #4]
 800124c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001250:	f015 fc82 	bl	8016b58 <expf>
 8001254:	eef0 7a40 	vmov.f32	s15, s0
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	ed87 0a01 	vstr	s0, [r7, #4]
 800126c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001270:	f015 fa82 	bl	8016778 <roundf>
 8001274:	eef0 7a40 	vmov.f32	s15, s0
 8001278:	eeb0 0a67 	vmov.f32	s0, s15
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6818      	ldr	r0, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4619      	mov	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	461a      	mov	r2, r3
 800129a:	f000 f817 	bl	80012cc <_ZN2ei5numpy9transposeEPfii>
 800129e:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	e00c      	b.n	80012c4 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 80012b6:	893a      	ldrh	r2, [r7, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 80012bc:	897a      	ldrh	r2, [r7, #10]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80012c2:	2300      	movs	r3, #0
    }
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_ZN2ei5numpy9transposeEPfii>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b08f      	sub	sp, #60	; 0x3c
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80012e0:	2300      	movs	r3, #0
 80012e2:	f7ff ff2a 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <_ZN2ei5numpy9transposeEPfii+0x24>
 80012ec:	4c23      	ldr	r4, [pc, #140]	; (800137c <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80012ee:	e03b      	b.n	8001368 <_ZN2ei5numpy9transposeEPfii+0x9c>
        if (!temp_matrix.buffer) {
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <_ZN2ei5numpy9transposeEPfii+0x2e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80012f6:	4c21      	ldr	r4, [pc, #132]	; (800137c <_ZN2ei5numpy9transposeEPfii+0xb0>)
 80012f8:	e036      	b.n	8001368 <_ZN2ei5numpy9transposeEPfii+0x9c>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001300:	da03      	bge.n	800130a <_ZN2ei5numpy9transposeEPfii+0x3e>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001308:	db01      	blt.n	800130e <_ZN2ei5numpy9transposeEPfii+0x42>
            return EIDSP_NARROWING;
 800130a:	4c1d      	ldr	r4, [pc, #116]	; (8001380 <_ZN2ei5numpy9transposeEPfii+0xb4>)
 800130c:	e02c      	b.n	8001368 <_ZN2ei5numpy9transposeEPfii+0x9c>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	b29b      	uxth	r3, r3
 8001312:	83bb      	strh	r3, [r7, #28]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	b29b      	uxth	r3, r3
 8001318:	83fb      	strh	r3, [r7, #30]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	b29b      	uxth	r3, r3
 8001322:	82bb      	strh	r3, [r7, #20]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	b29b      	uxth	r3, r3
 8001328:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 800132c:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 800132e:	f107 0214 	add.w	r2, r7, #20
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f007 fcf3 	bl	8008d24 <arm_mat_trans_f32>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 8001344:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <_ZN2ei5numpy9transposeEPfii+0x86>
            return status;
 800134c:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 8001350:	e00a      	b.n	8001368 <_ZN2ei5numpy9transposeEPfii+0x9c>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 8001352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	fb02 f303 	mul.w	r3, r2, r3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	461a      	mov	r2, r3
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f017 ffbb 	bl	80192dc <memcpy>

        return EIDSP_OK;
 8001366:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff0f 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8001372:	4623      	mov	r3, r4
    }
 8001374:	4618      	mov	r0, r3
 8001376:	373c      	adds	r7, #60	; 0x3c
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}
 800137c:	fffffc16 	.word	0xfffffc16
 8001380:	fffffc0c 	.word	0xfffffc0c

08001384 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>:
     * Scale a matrix in place
     * @param matrix
     * @param scale
     * @returns 0 if OK
     */
    static int scale(matrix_t *matrix, float scale) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	ed87 0a00 	vstr	s0, [r7]
        if (scale == 1.0f) return EIDSP_OK;
 8001390:	edd7 7a00 	vldr	s15, [r7]
 8001394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001398:	eef4 7a47 	vcmp.f32	s15, s14
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d101      	bne.n	80013a6 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x22>
 80013a2:	2300      	movs	r3, #0
 80013a4:	e033      	b.n	800140e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>

#if EIDSP_USE_CMSIS_DSP
        if (matrix->rows > EI_MAX_UINT16 || matrix->cols > EI_MAX_UINT16) {
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ae:	d204      	bcs.n	80013ba <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x36>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b8:	d301      	bcc.n	80013be <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x3a>
            return EIDSP_NARROWING;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x94>)
 80013bc:	e027      	b.n	800140e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
        }

        const arm_matrix_instance_f32 mi = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	82bb      	strh	r3, [r7, #20]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	82fb      	strh	r3, [r7, #22]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	61bb      	str	r3, [r7, #24]
        arm_matrix_instance_f32 mo = { static_cast<uint16_t>(matrix->rows), static_cast<uint16_t>(matrix->cols), matrix->buffer };
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	81bb      	strh	r3, [r7, #12]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	81fb      	strh	r3, [r7, #14]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	613b      	str	r3, [r7, #16]
        int status = arm_mat_scale_f32(&mi, scale, &mo);
 80013ea:	f107 020c 	add.w	r2, r7, #12
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4611      	mov	r1, r2
 80013f4:	ed97 0a00 	vldr	s0, [r7]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f007 fc5d 	bl	8008cb8 <arm_mat_scale_f32>
 80013fe:	4603      	mov	r3, r0
 8001400:	61fb      	str	r3, [r7, #28]
        if (status != ARM_MATH_SUCCESS) {
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x88>
            return status;
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	e000      	b.n	800140e <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf+0x8a>
#else
        for (size_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
            matrix->buffer[ix] *= scale;
        }
#endif
        return EIDSP_OK;
 800140c:	2300      	movs	r3, #0
    }
 800140e:	4618      	mov	r0, r3
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	fffffc0c 	.word	0xfffffc0c

0800141c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>:
     * Subtract from matrix in place
     * @param matrix
     * @param subtraction
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, float subtraction) {
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	ed87 0a00 	vstr	s0, [r7]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6892      	ldr	r2, [r2, #8]
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	429a      	cmp	r2, r3
 800143c:	d215      	bcs.n	800146a <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x4e>
            matrix->buffer[ix] -= subtraction;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	edd7 7a00 	vldr	s15, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3301      	adds	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e7e0      	b.n	800142c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf+0x10>
        }
        return EIDSP_OK;
 800146a:	2300      	movs	r3, #0
    }
 800146c:	4618      	mov	r0, r3
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>:
     * Add on a matrix in place, per row
     * @param matrix Input matrix (MxN)
     * @param add Scale matrix (Mx1)
     * @returns 0 if OK
     */
    static int subtract(matrix_t *matrix, matrix_t *subtract_matrix) {
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b088      	sub	sp, #32
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
        if (matrix->rows != subtract_matrix->rows) {
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	d001      	beq.n	8001492 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800148e:	4c27      	ldr	r4, [pc, #156]	; (800152c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 8001490:	e047      	b.n	8001522 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xaa>
        }

        if (subtract_matrix->cols != 1) {
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d001      	beq.n	800149e <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800149a:	4c24      	ldr	r4, [pc, #144]	; (800152c <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb4>)
 800149c:	e041      	b.n	8001522 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xaa>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	69fa      	ldr	r2, [r7, #28]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d239      	bcs.n	8001520 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xa8>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689d      	ldr	r5, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	69f9      	ldr	r1, [r7, #28]
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	4413      	add	r3, r2
 80014c2:	f107 000c 	add.w	r0, r7, #12
 80014c6:	462a      	mov	r2, r5
 80014c8:	2101      	movs	r1, #1
 80014ca:	f7ff fe36 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x62>
 80014d4:	4c16      	ldr	r4, [pc, #88]	; (8001530 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xb8>)
 80014d6:	2500      	movs	r5, #0
 80014d8:	e016      	b.n	8001508 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x90>
            int ret = subtract(&temp, subtract_matrix->buffer[row]);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff93 	bl	800141c <_ZN2ei5numpy8subtractEPNS_9ei_matrixEf>
 80014f6:	4603      	mov	r3, r0
 80014f8:	60bb      	str	r3, [r7, #8]
            if (ret != EIDSP_OK) {
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x8e>
                EIDSP_ERR(ret);
 8001500:	68bc      	ldr	r4, [r7, #8]
 8001502:	2500      	movs	r5, #0
 8001504:	e000      	b.n	8001508 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x90>
 8001506:	2501      	movs	r5, #1
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe3f 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8001512:	2d01      	cmp	r5, #1
 8001514:	d105      	bne.n	8001522 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0xaa>
            EI_DSP_MATRIX_B(temp, 1, matrix->cols, matrix->buffer + (row * matrix->cols));
 8001516:	bf00      	nop
        for (size_t row = 0; row < matrix->rows; row++) {
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	3301      	adds	r3, #1
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	e7c0      	b.n	80014a2 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_+0x2a>
            }
        }

        return EIDSP_OK;
 8001520:	2400      	movs	r4, #0
 8001522:	4623      	mov	r3, r4
    }
 8001524:	4618      	mov	r0, r3
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bdb0      	pop	{r4, r5, r7, pc}
 800152c:	fffffc14 	.word	0xfffffc14
 8001530:	fffffc16 	.word	0xfffffc16

08001534 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>:
     * Calculate the root mean square of a matrix, one per row
     * @param matrix Matrix of size (MxN)
     * @param output_matrix Matrix of size (Mx1)
     * @returns 0 if OK
     */
    static int rms(matrix_t *matrix, matrix_t *output_matrix) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
        if (matrix->rows != output_matrix->rows) {
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	429a      	cmp	r2, r3
 8001548:	d001      	beq.n	800154e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 800154c:	e028      	b.n	80015a0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        if (output_matrix->cols != 1) {
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d001      	beq.n	800155a <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x74>)
 8001558:	e022      	b.n	80015a0 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < matrix->rows; row++) {
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d21a      	bcs.n	800159e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float rms_result;
            arm_rms_f32(matrix->buffer + (row * matrix->cols), matrix->cols, &rms_result);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	68f9      	ldr	r1, [r7, #12]
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	18d0      	adds	r0, r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f107 0208 	add.w	r2, r7, #8
 8001582:	4619      	mov	r1, r3
 8001584:	f007 fc3e 	bl	8008e04 <arm_rms_f32>
            output_matrix->buffer[row] = rms_result;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	e7df      	b.n	800155e <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_+0x2a>
            }
            output_matrix->buffer[row] = sqrt(sum / static_cast<float>(matrix->cols));
#endif
        }

        return EIDSP_OK;
 800159e:	2300      	movs	r3, #0
    }
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	fffffc14 	.word	0xfffffc14

080015ac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>:
    /**
     * Calculate the mean over a matrix per row
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Mx1)
     */
    static int mean(matrix_t *input_matrix, matrix_t *output_matrix) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
        if (input_matrix->rows != output_matrix->rows) {
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d001      	beq.n	80015c6 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x1a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80015c4:	e028      	b.n	8001618 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }
        if (output_matrix->cols != 1) {
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d001      	beq.n	80015d2 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80015ce:	4b14      	ldr	r3, [pc, #80]	; (8001620 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x74>)
 80015d0:	e022      	b.n	8001618 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6c>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d21a      	bcs.n	8001616 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x6a>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	18d0      	adds	r0, r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f107 0208 	add.w	r2, r7, #8
 80015fa:	4619      	mov	r1, r3
 80015fc:	f007 fbd3 	bl	8008da6 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	3301      	adds	r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e7df      	b.n	80015d6 <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_+0x2a>

            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        return EIDSP_OK;
 8001616:	2300      	movs	r3, #0
    }
 8001618:	4618      	mov	r0, r3
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	fffffc14 	.word	0xfffffc14

08001624 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001626:	b099      	sub	sp, #100	; 0x64
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3301      	adds	r3, #1
 8001638:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <_ZN2ei5numpy4rfftEPKfjPfjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001642:	4c6e      	ldr	r4, [pc, #440]	; (80017fc <_ZN2ei5numpy4rfftEPKfjPfjj+0x1d8>)
 8001644:	e0d4      	b.n	80017f0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1cc>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800164a:	429a      	cmp	r2, r3
 800164c:	d901      	bls.n	8001652 <_ZN2ei5numpy4rfftEPKfjPfjj+0x2e>
            src_size = n_fft;
 800164e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001650:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001652:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001656:	2300      	movs	r3, #0
 8001658:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800165a:	2101      	movs	r1, #1
 800165c:	f7ff fd6d 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8001660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <_ZN2ei5numpy4rfftEPKfjPfjj+0x46>
 8001666:	4c66      	ldr	r4, [pc, #408]	; (8001800 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001668:	e0bd      	b.n	80017e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
        if (!fft_input.buffer) {
 800166a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <_ZN2ei5numpy4rfftEPKfjPfjj+0x50>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001670:	4c63      	ldr	r4, [pc, #396]	; (8001800 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001672:	e0b8      	b.n	80017e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001674:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	461a      	mov	r2, r3
 800167c:	68f9      	ldr	r1, [r7, #12]
 800167e:	f017 fe2d 	bl	80192dc <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	18d0      	adds	r0, r2, r3
 800168a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	461a      	mov	r2, r3
 8001694:	2100      	movs	r1, #0
 8001696:	f017 fe45 	bl	8019324 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 800169a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800169c:	2b20      	cmp	r3, #32
 800169e:	d026      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016a2:	2b40      	cmp	r3, #64	; 0x40
 80016a4:	d023      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016a8:	2b80      	cmp	r3, #128	; 0x80
 80016aa:	d020      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b2:	d01c      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ba:	d018      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80016bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016c2:	d014      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ca:	d010      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
 80016cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d2:	d00c      	beq.n	80016ee <_ZN2ei5numpy4rfftEPKfjPfjj+0xca>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80016d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80016d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	f000 f9e4 	bl	8001aa8 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 80016e0:	4603      	mov	r3, r0
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
            if (ret != EIDSP_OK) {
 80016e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d079      	beq.n	80017de <_ZN2ei5numpy4rfftEPKfjPfjj+0x1ba>
                EIDSP_ERR(ret);
 80016ea:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80016ec:	e07b      	b.n	80017e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 80016ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f00a f8bd 	bl	800b878 <arm_rfft_fast_init_f32>
 80016fe:	4603      	mov	r3, r0
 8001700:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
            if (status != ARM_MATH_SUCCESS) {
 8001704:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <_ZN2ei5numpy4rfftEPKfjPfjj+0xee>
                return status;
 800170c:	f997 4053 	ldrsb.w	r4, [r7, #83]	; 0x53
 8001710:	e068      	b.n	80017e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c0>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001712:	f107 0014 	add.w	r0, r7, #20
 8001716:	2300      	movs	r3, #0
 8001718:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800171a:	2101      	movs	r1, #1
 800171c:	f7ff fd0d 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <_ZN2ei5numpy4rfftEPKfjPfjj+0x108>
 8001726:	4c36      	ldr	r4, [pc, #216]	; (8001800 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001728:	2500      	movs	r5, #0
 800172a:	e050      	b.n	80017ce <_ZN2ei5numpy4rfftEPKfjPfjj+0x1aa>
            if (!fft_output.buffer) {
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d102      	bne.n	8001738 <_ZN2ei5numpy4rfftEPKfjPfjj+0x114>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001732:	4c33      	ldr	r4, [pc, #204]	; (8001800 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1dc>)
 8001734:	2500      	movs	r5, #0
 8001736:	e04a      	b.n	80017ce <_ZN2ei5numpy4rfftEPKfjPfjj+0x1aa>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001738:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001740:	2300      	movs	r3, #0
 8001742:	f009 ff39 	bl	800b5b8 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001752:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001756:	3b01      	subs	r3, #1
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	440b      	add	r3, r1
 800175e:	6852      	ldr	r2, [r2, #4]
 8001760:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001762:	2302      	movs	r3, #2
 8001764:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001766:	2301      	movs	r3, #1
 8001768:	65bb      	str	r3, [r7, #88]	; 0x58
 800176a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176c:	3b01      	subs	r3, #1
 800176e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001770:	429a      	cmp	r2, r3
 8001772:	d22b      	bcs.n	80017cc <_ZN2ei5numpy4rfftEPKfjPfjj+0x1a8>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	f107 0210 	add.w	r2, r7, #16
 8001780:	2102      	movs	r1, #2
 8001782:	4618      	mov	r0, r3
 8001784:	f007 fb3e 	bl	8008e04 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fef4 	bl	8000578 <__aeabi_f2d>
 8001790:	4605      	mov	r5, r0
 8001792:	460e      	mov	r6, r1
 8001794:	2002      	movs	r0, #2
 8001796:	f003 fb56 	bl	8004e46 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 800179a:	ec53 2b10 	vmov	r2, r3, d0
 800179e:	4628      	mov	r0, r5
 80017a0:	4631      	mov	r1, r6
 80017a2:	f7fe ff41 	bl	8000628 <__aeabi_dmul>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	18d5      	adds	r5, r2, r3
 80017b6:	f7ff fa2f 	bl	8000c18 <__aeabi_d2f>
 80017ba:	4603      	mov	r3, r0
 80017bc:	602b      	str	r3, [r5, #0]

                fft_output_buffer_ix += 2;
 80017be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017c0:	3302      	adds	r3, #2
 80017c2:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80017c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017c6:	3301      	adds	r3, #1
 80017c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80017ca:	e7ce      	b.n	800176a <_ZN2ei5numpy4rfftEPKfjPfjj+0x146>
 80017cc:	2501      	movs	r5, #1
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fcdc 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80017d8:	2d01      	cmp	r5, #1
 80017da:	d103      	bne.n	80017e4 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c0>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80017dc:	e000      	b.n	80017e0 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1bc>
            }
 80017de:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80017e0:	2400      	movs	r4, #0
 80017e2:	e000      	b.n	80017e6 <_ZN2ei5numpy4rfftEPKfjPfjj+0x1c2>
                return status;
 80017e4:	bf00      	nop
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 80017e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fcd0 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80017f0:	4623      	mov	r3, r4
    }
 80017f2:	4618      	mov	r0, r3
 80017f4:	3764      	adds	r7, #100	; 0x64
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	fffffc11 	.word	0xfffffc11
 8001800:	fffffc16 	.word	0xfffffc16

08001804 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b098      	sub	sp, #96	; 0x60
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001812:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001814:	085b      	lsrs	r3, r3, #1
 8001816:	3301      	adds	r3, #1
 8001818:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800181e:	429a      	cmp	r2, r3
 8001820:	d001      	beq.n	8001826 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001822:	4c72      	ldr	r4, [pc, #456]	; (80019ec <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1e8>)
 8001824:	e0dd      	b.n	80019e2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1de>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800182a:	429a      	cmp	r2, r3
 800182c:	d901      	bls.n	8001832 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x2e>
            src_size = n_fft;
 800182e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001830:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001832:	2300      	movs	r3, #0
 8001834:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001836:	68ba      	ldr	r2, [r7, #8]
 8001838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800183a:	429a      	cmp	r2, r3
 800183c:	d101      	bne.n	8001842 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x3e>
            fft_input_buffer = (float*)src;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001842:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001848:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800184a:	2101      	movs	r1, #1
 800184c:	f7ff fc75 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8001850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x56>
 8001856:	4c66      	ldr	r4, [pc, #408]	; (80019f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 8001858:	e0be      	b.n	80019d8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d4>
        if (!fft_input.buffer) {
 800185a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x60>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001860:	4c63      	ldr	r4, [pc, #396]	; (80019f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 8001862:	e0b9      	b.n	80019d8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d4>
        }

        if (!fft_input_buffer) {
 8001864:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001866:	2b00      	cmp	r3, #0
 8001868:	d112      	bne.n	8001890 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x8c>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 800186a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	461a      	mov	r2, r3
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	f017 fd32 	bl	80192dc <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	18d0      	adds	r0, r2, r3
 8001880:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	461a      	mov	r2, r3
 800188a:	2100      	movs	r1, #0
 800188c:	f017 fd4a 	bl	8019324 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001890:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001892:	2b20      	cmp	r3, #32
 8001894:	d026      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 8001896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001898:	2b40      	cmp	r3, #64	; 0x40
 800189a:	d023      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 800189c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800189e:	2b80      	cmp	r3, #128	; 0x80
 80018a0:	d020      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 80018a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018a8:	d01c      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 80018aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b0:	d018      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 80018b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018b8:	d014      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 80018ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018c0:	d010      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
 80018c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018c8:	d00c      	beq.n	80018e4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xe0>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 80018ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80018cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80018ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	f000 f95b 	bl	8001b8c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 80018d6:	4603      	mov	r3, r0
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
            if (ret != EIDSP_OK) {
 80018da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d077      	beq.n	80019d0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1cc>
                EIDSP_ERR(ret);
 80018e0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80018e2:	e079      	b.n	80019d8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d4>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 80018e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	f107 0320 	add.w	r3, r7, #32
 80018ec:	4611      	mov	r1, r2
 80018ee:	4618      	mov	r0, r3
 80018f0:	f009 ffc2 	bl	800b878 <arm_rfft_fast_init_f32>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (status != ARM_MATH_SUCCESS) {
 80018fa:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d002      	beq.n	8001908 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x104>
                return status;
 8001902:	f997 404f 	ldrsb.w	r4, [r7, #79]	; 0x4f
 8001906:	e066      	b.n	80019d6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d2>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001908:	f107 0010 	add.w	r0, r7, #16
 800190c:	2300      	movs	r3, #0
 800190e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001910:	2101      	movs	r1, #1
 8001912:	f7ff fc12 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d102      	bne.n	8001922 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x11e>
 800191c:	4c34      	ldr	r4, [pc, #208]	; (80019f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 800191e:	2500      	movs	r5, #0
 8001920:	e04e      	b.n	80019c0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1bc>
            if (!fft_output.buffer) {
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x12a>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001928:	4c31      	ldr	r4, [pc, #196]	; (80019f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>)
 800192a:	2500      	movs	r5, #0
 800192c:	e048      	b.n	80019c0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1bc>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 800192e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	f107 0020 	add.w	r0, r7, #32
 8001936:	2300      	movs	r3, #0
 8001938:	f009 fe3e 	bl	800b5b8 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001950:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001954:	3b01      	subs	r3, #1
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	440b      	add	r3, r1
 800195c:	6852      	ldr	r2, [r2, #4]
 800195e:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8001960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001962:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001966:	3b01      	subs	r3, #1
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	f04f 0200 	mov.w	r2, #0
 8001972:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8001974:	2302      	movs	r3, #2
 8001976:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001978:	2301      	movs	r3, #1
 800197a:	657b      	str	r3, [r7, #84]	; 0x54
 800197c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800197e:	3b01      	subs	r3, #1
 8001980:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001982:	429a      	cmp	r2, r3
 8001984:	d21b      	bcs.n	80019be <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ba>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	441a      	add	r2, r3
 800198e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	440b      	add	r3, r1
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800199e:	3301      	adds	r3, #1
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	441a      	add	r2, r3
 80019a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	6879      	ldr	r1, [r7, #4]
 80019aa:	440b      	add	r3, r1
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80019b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019b2:	3302      	adds	r3, #2
 80019b4:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	3301      	adds	r3, #1
 80019ba:	657b      	str	r3, [r7, #84]	; 0x54
 80019bc:	e7de      	b.n	800197c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x178>
 80019be:	2501      	movs	r5, #1
 80019c0:	f107 0310 	add.w	r3, r7, #16
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fbe3 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80019ca:	2d01      	cmp	r5, #1
 80019cc:	d103      	bne.n	80019d6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d2>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80019ce:	e000      	b.n	80019d2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ce>
            }
 80019d0:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80019d2:	2400      	movs	r4, #0
 80019d4:	e000      	b.n	80019d8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1d4>
                return status;
 80019d6:	bf00      	nop
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 80019d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fbd7 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80019e2:	4623      	mov	r3, r4
    }
 80019e4:	4618      	mov	r0, r3
 80019e6:	3760      	adds	r7, #96	; 0x60
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	fffffc11 	.word	0xfffffc11
 80019f0:	fffffc16 	.word	0xfffffc16

080019f4 <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80019fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d002      	beq.n	8001a12 <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <_ZN2ei5numpy8linspaceEffmPf+0x22>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <_ZN2ei5numpy8linspaceEffmPf+0xb0>)
 8001a14:	e03f      	b.n	8001a96 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        if (number == 1) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d104      	bne.n	8001a26 <_ZN2ei5numpy8linspaceEffmPf+0x32>
            out[0] = start;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e037      	b.n	8001a96 <_ZN2ei5numpy8linspaceEffmPf+0xa2>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8001a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	ee07 3a90 	vmov	s15, r3
 8001a3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a42:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d216      	bcs.n	8001a82 <_ZN2ei5numpy8linspaceEffmPf+0x8e>
            out[ix] = start + ix * step;
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a76:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e7e3      	b.n	8001a4a <_ZN2ei5numpy8linspaceEffmPf+0x56>
        }

        // last entry always stop
        out[number - 1] = stop;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 8001a94:	2300      	movs	r3, #0
    }
 8001a96:	4618      	mov	r0, r3
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	fffffc10 	.word	0xfffffc10

08001aa8 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

        return EIDSP_OK;
    }

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af02      	add	r7, sp, #8
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
 8001ab4:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	4618      	mov	r0, r3
 8001abc:	f00b fcaa 	bl	800d414 <_Z9ei_mallocj>
 8001ac0:	61b8      	str	r0, [r7, #24]
        if (!fft_output) {
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <_ZN2ei5numpy13software_rfftEPfS1_jj+0x24>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8001aca:	e059      	b.n	8001b80 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	f00b f8d1 	bl	800cc80 <kiss_fftr_alloc>
 8001ade:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d104      	bne.n	8001af0 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x48>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8001ae6:	69b8      	ldr	r0, [r7, #24]
 8001ae8:	f00b fcae 	bl	800d448 <_Z7ei_freePv>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001aec:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xe0>)
 8001aee:	e047      	b.n	8001b80 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xd8>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	6978      	ldr	r0, [r7, #20]
 8001af6:	f00b f9ed 	bl	800ced4 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
 8001afe:	69fa      	ldr	r2, [r7, #28]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d235      	bcs.n	8001b72 <_ZN2ei5numpy13software_rfftEPfS1_jj+0xca>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	2002      	movs	r0, #2
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	f003 f9ad 	bl	8004e76 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b1c:	ec55 4b10 	vmov	r4, r5, d0
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4413      	add	r3, r2
 8001b28:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b2c:	2002      	movs	r0, #2
 8001b2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b32:	f003 f9a0 	bl	8004e76 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b36:	ec53 2b10 	vmov	r2, r3, d0
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	f7fe fbbd 	bl	80002bc <__adddf3>
 8001b42:	4603      	mov	r3, r0
 8001b44:	460c      	mov	r4, r1
 8001b46:	ec44 3b17 	vmov	d7, r3, r4
 8001b4a:	eeb0 0a47 	vmov.f32	s0, s14
 8001b4e:	eef0 0a67 	vmov.f32	s1, s15
 8001b52:	f014 ffa7 	bl	8016aa4 <sqrt>
 8001b56:	ec51 0b10 	vmov	r0, r1, d0
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	18d4      	adds	r4, r2, r3
 8001b62:	f7ff f859 	bl	8000c18 <__aeabi_d2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	e7c5      	b.n	8001afe <_ZN2ei5numpy13software_rfftEPfS1_jj+0x56>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f00b fc68 	bl	800d448 <_Z7ei_freePv>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8001b78:	69b8      	ldr	r0, [r7, #24]
 8001b7a:	f00b fc65 	bl	800d448 <_Z7ei_freePv>

        return EIDSP_OK;
 8001b7e:	2300      	movs	r3, #0
    }
 8001b80:	4618      	mov	r0, r3
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bdb0      	pop	{r4, r5, r7, pc}
 8001b88:	fffffc16 	.word	0xfffffc16

08001b8c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f107 0310 	add.w	r3, r7, #16
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	f00b f86a 	bl	800cc80 <kiss_fftr_alloc>
 8001bac:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x2c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x48>)
 8001bb6:	e008      	b.n	8001bca <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x3e>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length, cfg);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	68f9      	ldr	r1, [r7, #12]
 8001bbc:	6978      	ldr	r0, [r7, #20]
 8001bbe:	f00b f989 	bl	800ced4 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f00b fc40 	bl	800d448 <_Z7ei_freePv>

        return EIDSP_OK;
 8001bc8:	2300      	movs	r3, #0
    }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	fffffc16 	.word	0xfffffc16

08001bd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8001bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bdc:	b095      	sub	sp, #84	; 0x54
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6178      	str	r0, [r7, #20]
 8001be2:	ed87 0a04 	vstr	s0, [r7, #16]
 8001be6:	edc7 0a03 	vstr	s1, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
 8001bee:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	0fda      	lsrs	r2, r3, #31
 8001bf4:	4413      	add	r3, r2
 8001bf6:	105b      	asrs	r3, r3, #1
 8001bf8:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f7fe fcbc 	bl	8000578 <__aeabi_f2d>
 8001c00:	a3f5      	add	r3, pc, #980	; (adr r3, 8001fd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fd0f 	bl	8000628 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4690      	mov	r8, r2
 8001c10:	4699      	mov	r9, r3
 8001c12:	6938      	ldr	r0, [r7, #16]
 8001c14:	f7fe fcb0 	bl	8000578 <__aeabi_f2d>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4640      	mov	r0, r8
 8001c1e:	4649      	mov	r1, r9
 8001c20:	f7fe fe2c 	bl	800087c <__aeabi_ddiv>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	ec43 2b17 	vmov	d7, r2, r3
 8001c2c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c30:	eef0 0a67 	vmov.f32	s1, s15
 8001c34:	f014 fd70 	bl	8016718 <tan>
 8001c38:	ec53 2b10 	vmov	r2, r3, d0
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe ffea 	bl	8000c18 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8001c48:	2002      	movs	r0, #2
 8001c4a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8001c4e:	f003 f912 	bl	8004e76 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c52:	ec53 2b10 	vmov	r2, r3, d0
 8001c56:	4610      	mov	r0, r2
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f7fe ffdd 	bl	8000c18 <__aeabi_d2f>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 8001c62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c64:	2104      	movs	r1, #4
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00b fbe0 	bl	800d42c <_Z9ei_callocjj>
 8001c6c:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c70:	2104      	movs	r1, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f00b fbda 	bl	800d42c <_Z9ei_callocjj>
 8001c78:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00b fbd4 	bl	800d42c <_Z9ei_callocjj>
 8001c84:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c88:	2104      	movs	r1, #4
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f00b fbce 	bl	800d42c <_Z9ei_callocjj>
 8001c90:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c94:	2104      	movs	r1, #4
 8001c96:	4618      	mov	r0, r3
 8001c98:	f00b fbc8 	bl	800d42c <_Z9ei_callocjj>
 8001c9c:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 8001c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00b fbc2 	bl	800d42c <_Z9ei_callocjj>
 8001ca8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for(int ix = 0; ix < n_steps; ix++) {
 8001caa:	2300      	movs	r3, #0
 8001cac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	f280 80e5 	bge.w	8001e82 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 8001cb8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001cba:	f7fe fc4b 	bl	8000554 <__aeabi_i2d>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	f7fe fafb 	bl	80002bc <__adddf3>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	4bc3      	ldr	r3, [pc, #780]	; (8001fe0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8001cd4:	f7fe faf2 	bl	80002bc <__adddf3>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	a3bd      	add	r3, pc, #756	; (adr r3, 8001fd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x400>)
 8001ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce6:	f7fe fc9f 	bl	8000628 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4690      	mov	r8, r2
 8001cf0:	4699      	mov	r9, r3
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7fe fc2e 	bl	8000554 <__aeabi_i2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	f7fe fade 	bl	80002bc <__adddf3>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4640      	mov	r0, r8
 8001d06:	4649      	mov	r1, r9
 8001d08:	f7fe fdb8 	bl	800087c <__aeabi_ddiv>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	ec43 2b17 	vmov	d7, r2, r3
 8001d14:	eeb0 0a47 	vmov.f32	s0, s14
 8001d18:	eef0 0a67 	vmov.f32	s1, s15
 8001d1c:	f014 fcb4 	bl	8016688 <sin>
 8001d20:	ec53 2b10 	vmov	r2, r3, d0
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ff76 	bl	8000c18 <__aeabi_d2f>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8001d30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001d32:	f7fe fc21 	bl	8000578 <__aeabi_f2d>
 8001d36:	4680      	mov	r8, r0
 8001d38:	4689      	mov	r9, r1
 8001d3a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d3c:	f7fe fc1c 	bl	8000578 <__aeabi_f2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	f7fe faba 	bl	80002bc <__adddf3>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4692      	mov	sl, r2
 8001d4e:	469b      	mov	fp, r3
 8001d50:	69f8      	ldr	r0, [r7, #28]
 8001d52:	f7fe fc11 	bl	8000578 <__aeabi_f2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4650      	mov	r0, sl
 8001d5c:	4659      	mov	r1, fp
 8001d5e:	f7fe fc63 	bl	8000628 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4640      	mov	r0, r8
 8001d68:	4649      	mov	r1, r9
 8001d6a:	f7fe faa7 	bl	80002bc <__adddf3>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4610      	mov	r0, r2
 8001d74:	4619      	mov	r1, r3
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	4b99      	ldr	r3, [pc, #612]	; (8001fe0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8001d7c:	f7fe fa9e 	bl	80002bc <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7fe ff46 	bl	8000c18 <__aeabi_d2f>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]
            A[ix] = a2 / sampling_freq;
 8001d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d96:	4413      	add	r3, r2
 8001d98:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8001d9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001da4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 8001da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001dac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db4:	ee17 0a90 	vmov	r0, s15
 8001db8:	f7fe fbde 	bl	8000578 <__aeabi_f2d>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	f7fe fa7c 	bl	80002bc <__adddf3>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4690      	mov	r8, r2
 8001dca:	4699      	mov	r9, r3
 8001dcc:	6938      	ldr	r0, [r7, #16]
 8001dce:	f7fe fbd3 	bl	8000578 <__aeabi_f2d>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	4640      	mov	r0, r8
 8001dd8:	4649      	mov	r1, r9
 8001dda:	f7fe fd4f 	bl	800087c <__aeabi_ddiv>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dec:	18d6      	adds	r6, r2, r3
 8001dee:	f7fe ff13 	bl	8000c18 <__aeabi_d2f>
 8001df2:	4603      	mov	r3, r0
 8001df4:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8001df6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001df8:	f7fe fbbe 	bl	8000578 <__aeabi_f2d>
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	4689      	mov	r9, r1
 8001e00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e02:	f7fe fbb9 	bl	8000578 <__aeabi_f2d>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	f7fe fa57 	bl	80002bc <__adddf3>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4692      	mov	sl, r2
 8001e14:	469b      	mov	fp, r3
 8001e16:	69f8      	ldr	r0, [r7, #28]
 8001e18:	f7fe fbae 	bl	8000578 <__aeabi_f2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4650      	mov	r0, sl
 8001e22:	4659      	mov	r1, fp
 8001e24:	f7fe fc00 	bl	8000628 <__aeabi_dmul>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4640      	mov	r0, r8
 8001e2e:	4649      	mov	r1, r9
 8001e30:	f7fe fa42 	bl	80002b8 <__aeabi_dsub>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	4b67      	ldr	r3, [pc, #412]	; (8001fe0 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x408>)
 8001e42:	f7fe fa3b 	bl	80002bc <__adddf3>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4614      	mov	r4, r2
 8001e4c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e50:	6938      	ldr	r0, [r7, #16]
 8001e52:	f7fe fb91 	bl	8000578 <__aeabi_f2d>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	f7fe fd0d 	bl	800087c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e70:	18d6      	adds	r6, r2, r3
 8001e72:	f7fe fed1 	bl	8000c18 <__aeabi_d2f>
 8001e76:	4603      	mov	r3, r0
 8001e78:	6033      	str	r3, [r6, #0]
        for(int ix = 0; ix < n_steps; ix++) {
 8001e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e80:	e715      	b.n	8001cae <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 8001e82:	2300      	movs	r3, #0
 8001e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	f080 80aa 	bcs.w	8001fe4 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 8001e90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	441a      	add	r2, r3
 8001e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	440b      	add	r3, r1
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eac:	429a      	cmp	r2, r3
 8001eae:	f280 808e 	bge.w	8001fce <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 8001eb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001eb8:	4413      	add	r3, r2
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec4:	4413      	add	r3, r2
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed4:	4413      	add	r3, r2
 8001ed6:	edd3 6a00 	vldr	s13, [r3]
 8001eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	6a3a      	ldr	r2, [r7, #32]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	edd3 7a00 	vldr	s15, [r3]
 8001ee6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f00:	4413      	add	r3, r2
 8001f02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f06:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] + (2.0 * w1[i]) + w2[i]);
 8001f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f10:	4413      	add	r3, r2
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fb2f 	bl	8000578 <__aeabi_f2d>
 8001f1a:	4604      	mov	r4, r0
 8001f1c:	460d      	mov	r5, r1
 8001f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f24:	4413      	add	r3, r2
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe fb25 	bl	8000578 <__aeabi_f2d>
 8001f2e:	4680      	mov	r8, r0
 8001f30:	4689      	mov	r9, r1
 8001f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f38:	4413      	add	r3, r2
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fb1b 	bl	8000578 <__aeabi_f2d>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	f7fe f9b9 	bl	80002bc <__adddf3>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4649      	mov	r1, r9
 8001f52:	f7fe f9b3 	bl	80002bc <__adddf3>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4690      	mov	r8, r2
 8001f5c:	4699      	mov	r9, r3
 8001f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	6a3a      	ldr	r2, [r7, #32]
 8001f64:	4413      	add	r3, r2
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7fe fb05 	bl	8000578 <__aeabi_f2d>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	4640      	mov	r0, r8
 8001f74:	4649      	mov	r1, r9
 8001f76:	f7fe f9a1 	bl	80002bc <__adddf3>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4620      	mov	r0, r4
 8001f80:	4629      	mov	r1, r5
 8001f82:	f7fe fb51 	bl	8000628 <__aeabi_dmul>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	18d4      	adds	r4, r2, r3
 8001f96:	f7fe fe3f 	bl	8000c18 <__aeabi_d2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 8001f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa4:	441a      	add	r2, r3
 8001fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	6a39      	ldr	r1, [r7, #32]
 8001fac:	440b      	add	r3, r1
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 8001fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001fb8:	441a      	add	r2, r3
 8001fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc0:	440b      	add	r3, r1
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8001fc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fc8:	3301      	adds	r3, #1
 8001fca:	647b      	str	r3, [r7, #68]	; 0x44
 8001fcc:	e76c      	b.n	8001ea8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 8001fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fd4:	e757      	b.n	8001e86 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj+0x2ae>
 8001fd6:	bf00      	nop
 8001fd8:	54442d18 	.word	0x54442d18
 8001fdc:	400921fb 	.word	0x400921fb
 8001fe0:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8001fe4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001fe6:	f00b fa2f 	bl	800d448 <_Z7ei_freePv>
        ei_free(d1);
 8001fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fec:	f00b fa2c 	bl	800d448 <_Z7ei_freePv>
        ei_free(d2);
 8001ff0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001ff2:	f00b fa29 	bl	800d448 <_Z7ei_freePv>
        ei_free(w0);
 8001ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001ff8:	f00b fa26 	bl	800d448 <_Z7ei_freePv>
        ei_free(w1);
 8001ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ffe:	f00b fa23 	bl	800d448 <_Z7ei_freePv>
        ei_free(w2);
 8002002:	6a38      	ldr	r0, [r7, #32]
 8002004:	f00b fa20 	bl	800d448 <_Z7ei_freePv>
    }
 8002008:	bf00      	nop
 800200a:	3754      	adds	r7, #84	; 0x54
 800200c:	46bd      	mov	sp, r7
 800200e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002012:	bf00      	nop
 8002014:	0000      	movs	r0, r0
	...

08002018 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>:
        float sampling_freq,
        float cutoff_freq,
        const float *src,
        float *dest,
        size_t size)
    {
 8002018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800201c:	b095      	sub	sp, #84	; 0x54
 800201e:	af00      	add	r7, sp, #0
 8002020:	6178      	str	r0, [r7, #20]
 8002022:	ed87 0a04 	vstr	s0, [r7, #16]
 8002026:	edc7 0a03 	vstr	s1, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
 800202e:	603b      	str	r3, [r7, #0]
        int n_steps = filter_order / 2;
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	0fda      	lsrs	r2, r3, #31
 8002034:	4413      	add	r3, r2
 8002036:	105b      	asrs	r3, r3, #1
 8002038:	643b      	str	r3, [r7, #64]	; 0x40
        float a = tan(M_PI * cutoff_freq / sampling_freq);
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f7fe fa9c 	bl	8000578 <__aeabi_f2d>
 8002040:	a3f5      	add	r3, pc, #980	; (adr r3, 8002418 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe faef 	bl	8000628 <__aeabi_dmul>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4690      	mov	r8, r2
 8002050:	4699      	mov	r9, r3
 8002052:	6938      	ldr	r0, [r7, #16]
 8002054:	f7fe fa90 	bl	8000578 <__aeabi_f2d>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4640      	mov	r0, r8
 800205e:	4649      	mov	r1, r9
 8002060:	f7fe fc0c 	bl	800087c <__aeabi_ddiv>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	ec43 2b17 	vmov	d7, r2, r3
 800206c:	eeb0 0a47 	vmov.f32	s0, s14
 8002070:	eef0 0a67 	vmov.f32	s1, s15
 8002074:	f014 fb50 	bl	8016718 <tan>
 8002078:	ec53 2b10 	vmov	r2, r3, d0
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fdca 	bl	8000c18 <__aeabi_d2f>
 8002084:	4603      	mov	r3, r0
 8002086:	63fb      	str	r3, [r7, #60]	; 0x3c
        float a2 = pow(a, 2);
 8002088:	2002      	movs	r0, #2
 800208a:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800208e:	f002 fef2 	bl	8004e76 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002092:	ec53 2b10 	vmov	r2, r3, d0
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fdbd 	bl	8000c18 <__aeabi_d2f>
 800209e:	4603      	mov	r3, r0
 80020a0:	63bb      	str	r3, [r7, #56]	; 0x38
        float *A = (float*)ei_calloc(n_steps, sizeof(float));
 80020a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020a4:	2104      	movs	r1, #4
 80020a6:	4618      	mov	r0, r3
 80020a8:	f00b f9c0 	bl	800d42c <_Z9ei_callocjj>
 80020ac:	6378      	str	r0, [r7, #52]	; 0x34
        float *d1 = (float*)ei_calloc(n_steps, sizeof(float));
 80020ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020b0:	2104      	movs	r1, #4
 80020b2:	4618      	mov	r0, r3
 80020b4:	f00b f9ba 	bl	800d42c <_Z9ei_callocjj>
 80020b8:	6338      	str	r0, [r7, #48]	; 0x30
        float *d2 = (float*)ei_calloc(n_steps, sizeof(float));
 80020ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020bc:	2104      	movs	r1, #4
 80020be:	4618      	mov	r0, r3
 80020c0:	f00b f9b4 	bl	800d42c <_Z9ei_callocjj>
 80020c4:	62f8      	str	r0, [r7, #44]	; 0x2c
        float *w0 = (float*)ei_calloc(n_steps, sizeof(float));
 80020c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020c8:	2104      	movs	r1, #4
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00b f9ae 	bl	800d42c <_Z9ei_callocjj>
 80020d0:	62b8      	str	r0, [r7, #40]	; 0x28
        float *w1 = (float*)ei_calloc(n_steps, sizeof(float));
 80020d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020d4:	2104      	movs	r1, #4
 80020d6:	4618      	mov	r0, r3
 80020d8:	f00b f9a8 	bl	800d42c <_Z9ei_callocjj>
 80020dc:	6278      	str	r0, [r7, #36]	; 0x24
        float *w2 = (float*)ei_calloc(n_steps, sizeof(float));
 80020de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e0:	2104      	movs	r1, #4
 80020e2:	4618      	mov	r0, r3
 80020e4:	f00b f9a2 	bl	800d42c <_Z9ei_callocjj>
 80020e8:	6238      	str	r0, [r7, #32]

        // Calculate the filter parameters
        for (int ix = 0; ix < n_steps; ix++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80020f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f2:	429a      	cmp	r2, r3
 80020f4:	f280 80e5 	bge.w	80022c2 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2aa>
            float r = sin(M_PI * ((2.0 * ix) + 1.0) / (2.0 * filter_order));
 80020f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80020fa:	f7fe fa2b 	bl	8000554 <__aeabi_i2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	f7fe f8db 	bl	80002bc <__adddf3>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4610      	mov	r0, r2
 800210c:	4619      	mov	r1, r3
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4bc3      	ldr	r3, [pc, #780]	; (8002420 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002114:	f7fe f8d2 	bl	80002bc <__adddf3>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	a3bd      	add	r3, pc, #756	; (adr r3, 8002418 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x400>)
 8002122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002126:	f7fe fa7f 	bl	8000628 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4690      	mov	r8, r2
 8002130:	4699      	mov	r9, r3
 8002132:	6978      	ldr	r0, [r7, #20]
 8002134:	f7fe fa0e 	bl	8000554 <__aeabi_i2d>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	f7fe f8be 	bl	80002bc <__adddf3>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4640      	mov	r0, r8
 8002146:	4649      	mov	r1, r9
 8002148:	f7fe fb98 	bl	800087c <__aeabi_ddiv>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	ec43 2b17 	vmov	d7, r2, r3
 8002154:	eeb0 0a47 	vmov.f32	s0, s14
 8002158:	eef0 0a67 	vmov.f32	s1, s15
 800215c:	f014 fa94 	bl	8016688 <sin>
 8002160:	ec53 2b10 	vmov	r2, r3, d0
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fd56 	bl	8000c18 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	61fb      	str	r3, [r7, #28]
            sampling_freq = a2 + (2.0 * a * r) + 1.0;
 8002170:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002172:	f7fe fa01 	bl	8000578 <__aeabi_f2d>
 8002176:	4680      	mov	r8, r0
 8002178:	4689      	mov	r9, r1
 800217a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800217c:	f7fe f9fc 	bl	8000578 <__aeabi_f2d>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	f7fe f89a 	bl	80002bc <__adddf3>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4692      	mov	sl, r2
 800218e:	469b      	mov	fp, r3
 8002190:	69f8      	ldr	r0, [r7, #28]
 8002192:	f7fe f9f1 	bl	8000578 <__aeabi_f2d>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4650      	mov	r0, sl
 800219c:	4659      	mov	r1, fp
 800219e:	f7fe fa43 	bl	8000628 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4640      	mov	r0, r8
 80021a8:	4649      	mov	r1, r9
 80021aa:	f7fe f887 	bl	80002bc <__adddf3>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b99      	ldr	r3, [pc, #612]	; (8002420 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 80021bc:	f7fe f87e 	bl	80002bc <__adddf3>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7fe fd26 	bl	8000c18 <__aeabi_d2f>
 80021cc:	4603      	mov	r3, r0
 80021ce:	613b      	str	r3, [r7, #16]
            A[ix] = 1.0f / sampling_freq;
 80021d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021d6:	4413      	add	r3, r2
 80021d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80021e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e4:	edc3 7a00 	vstr	s15, [r3]
            d1[ix] = 2.0 * (1 - a2) / sampling_freq;
 80021e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021ec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80021f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021f4:	ee17 0a90 	vmov	r0, s15
 80021f8:	f7fe f9be 	bl	8000578 <__aeabi_f2d>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	f7fe f85c 	bl	80002bc <__adddf3>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4690      	mov	r8, r2
 800220a:	4699      	mov	r9, r3
 800220c:	6938      	ldr	r0, [r7, #16]
 800220e:	f7fe f9b3 	bl	8000578 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4640      	mov	r0, r8
 8002218:	4649      	mov	r1, r9
 800221a:	f7fe fb2f 	bl	800087c <__aeabi_ddiv>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222c:	18d6      	adds	r6, r2, r3
 800222e:	f7fe fcf3 	bl	8000c18 <__aeabi_d2f>
 8002232:	4603      	mov	r3, r0
 8002234:	6033      	str	r3, [r6, #0]
            d2[ix] = -(a2 - (2.0 * a * r) + 1.0) / sampling_freq;
 8002236:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002238:	f7fe f99e 	bl	8000578 <__aeabi_f2d>
 800223c:	4680      	mov	r8, r0
 800223e:	4689      	mov	r9, r1
 8002240:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002242:	f7fe f999 	bl	8000578 <__aeabi_f2d>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	f7fe f837 	bl	80002bc <__adddf3>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4692      	mov	sl, r2
 8002254:	469b      	mov	fp, r3
 8002256:	69f8      	ldr	r0, [r7, #28]
 8002258:	f7fe f98e 	bl	8000578 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4650      	mov	r0, sl
 8002262:	4659      	mov	r1, fp
 8002264:	f7fe f9e0 	bl	8000628 <__aeabi_dmul>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4640      	mov	r0, r8
 800226e:	4649      	mov	r1, r9
 8002270:	f7fe f822 	bl	80002b8 <__aeabi_dsub>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	4b67      	ldr	r3, [pc, #412]	; (8002420 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x408>)
 8002282:	f7fe f81b 	bl	80002bc <__adddf3>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4614      	mov	r4, r2
 800228c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002290:	6938      	ldr	r0, [r7, #16]
 8002292:	f7fe f971 	bl	8000578 <__aeabi_f2d>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fe faed 	bl	800087c <__aeabi_ddiv>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b0:	18d6      	adds	r6, r2, r3
 80022b2:	f7fe fcb1 	bl	8000c18 <__aeabi_d2f>
 80022b6:	4603      	mov	r3, r0
 80022b8:	6033      	str	r3, [r6, #0]
        for (int ix = 0; ix < n_steps; ix++) {
 80022ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022bc:	3301      	adds	r3, #1
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022c0:	e715      	b.n	80020ee <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0xd6>
        }

        // Apply the filter
        for (size_t sx = 0; sx < size; sx++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80022c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	f080 80aa 	bcs.w	8002424 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x40c>
            dest[sx] = src[sx];
 80022d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	441a      	add	r2, r3
 80022d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	440b      	add	r3, r1
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	601a      	str	r2, [r3, #0]

            for (int i = 0; i < n_steps; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	647b      	str	r3, [r7, #68]	; 0x44
 80022e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80022ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ec:	429a      	cmp	r2, r3
 80022ee:	f280 808e 	bge.w	800240e <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x3f6>
                w0[i] = d1[i] * w1[i] + d2[i] * w2[i] + dest[sx];
 80022f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022f8:	4413      	add	r3, r2
 80022fa:	ed93 7a00 	vldr	s14, [r3]
 80022fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	4413      	add	r3, r2
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800230e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002314:	4413      	add	r3, r2
 8002316:	edd3 6a00 	vldr	s13, [r3]
 800231a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	6a3a      	ldr	r2, [r7, #32]
 8002320:	4413      	add	r3, r2
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002340:	4413      	add	r3, r2
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	edc3 7a00 	vstr	s15, [r3]
                dest[sx] = A[i] * (w0[i] - (2.0 * w1[i]) + w2[i]);
 800234a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002350:	4413      	add	r3, r2
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f90f 	bl	8000578 <__aeabi_f2d>
 800235a:	4604      	mov	r4, r0
 800235c:	460d      	mov	r5, r1
 800235e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002364:	4413      	add	r3, r2
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f905 	bl	8000578 <__aeabi_f2d>
 800236e:	4680      	mov	r8, r0
 8002370:	4689      	mov	r9, r1
 8002372:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002378:	4413      	add	r3, r2
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	f7fd ff99 	bl	80002bc <__adddf3>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4640      	mov	r0, r8
 8002390:	4649      	mov	r1, r9
 8002392:	f7fd ff91 	bl	80002b8 <__aeabi_dsub>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4690      	mov	r8, r2
 800239c:	4699      	mov	r9, r3
 800239e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	6a3a      	ldr	r2, [r7, #32]
 80023a4:	4413      	add	r3, r2
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8e5 	bl	8000578 <__aeabi_f2d>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4640      	mov	r0, r8
 80023b4:	4649      	mov	r1, r9
 80023b6:	f7fd ff81 	bl	80002bc <__adddf3>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe f931 	bl	8000628 <__aeabi_dmul>
 80023c6:	4603      	mov	r3, r0
 80023c8:	460c      	mov	r4, r1
 80023ca:	4618      	mov	r0, r3
 80023cc:	4621      	mov	r1, r4
 80023ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	18d4      	adds	r4, r2, r3
 80023d6:	f7fe fc1f 	bl	8000c18 <__aeabi_d2f>
 80023da:	4603      	mov	r3, r0
 80023dc:	6023      	str	r3, [r4, #0]
                w2[i] = w1[i];
 80023de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e4:	441a      	add	r2, r3
 80023e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	6a39      	ldr	r1, [r7, #32]
 80023ec:	440b      	add	r3, r1
 80023ee:	6812      	ldr	r2, [r2, #0]
 80023f0:	601a      	str	r2, [r3, #0]
                w1[i] = w0[i];
 80023f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f8:	441a      	add	r2, r3
 80023fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002400:	440b      	add	r3, r1
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < n_steps; i++) {
 8002406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002408:	3301      	adds	r3, #1
 800240a:	647b      	str	r3, [r7, #68]	; 0x44
 800240c:	e76c      	b.n	80022e8 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2d0>
        for (size_t sx = 0; sx < size; sx++) {
 800240e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002410:	3301      	adds	r3, #1
 8002412:	64bb      	str	r3, [r7, #72]	; 0x48
 8002414:	e757      	b.n	80022c6 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj+0x2ae>
 8002416:	bf00      	nop
 8002418:	54442d18 	.word	0x54442d18
 800241c:	400921fb 	.word	0x400921fb
 8002420:	3ff00000 	.word	0x3ff00000
            }
        }

        ei_free(A);
 8002424:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002426:	f00b f80f 	bl	800d448 <_Z7ei_freePv>
        ei_free(d1);
 800242a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800242c:	f00b f80c 	bl	800d448 <_Z7ei_freePv>
        ei_free(d2);
 8002430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002432:	f00b f809 	bl	800d448 <_Z7ei_freePv>
        ei_free(w0);
 8002436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002438:	f00b f806 	bl	800d448 <_Z7ei_freePv>
        ei_free(w1);
 800243c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800243e:	f00b f803 	bl	800d448 <_Z7ei_freePv>
        ei_free(w2);
 8002442:	6a38      	ldr	r0, [r7, #32]
 8002444:	f00b f800 	bl	800d448 <_Z7ei_freePv>
    }
 8002448:	bf00      	nop
 800244a:	3754      	adds	r7, #84	; 0x54
 800244c:	46bd      	mov	sp, r7
 800244e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002452:	bf00      	nop

08002454 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_lowpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002460:	edc7 0a01 	vstr	s1, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8002468:	2300      	movs	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	429a      	cmp	r2, r3
 8002474:	d21f      	bcs.n	80024b6 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_lowpass(
 8002476:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	6979      	ldr	r1, [r7, #20]
 8002482:	fb01 f303 	mul.w	r3, r1, r3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	6979      	ldr	r1, [r7, #20]
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	009b      	lsls	r3, r3, #2
            filters::butterworth_lowpass(
 800249a:	441a      	add	r2, r3
                matrix->cols);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_lowpass(
 80024a0:	4621      	mov	r1, r4
 80024a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80024a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80024aa:	f7ff fb95 	bl	8001bd8 <_ZN2ei8spectral7filtersL19butterworth_lowpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	3301      	adds	r3, #1
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	e7da      	b.n	800246c <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 80024b6:	2300      	movs	r3, #0
    }
 80024b8:	4618      	mov	r0, r3
 80024ba:	371c      	adds	r7, #28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd90      	pop	{r4, r7, pc}

080024c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>:
    static int butterworth_highpass_filter(
        matrix_t *matrix,
        float sampling_frequency,
        float filter_cutoff,
        uint8_t filter_order)
    {
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80024cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d21f      	bcs.n	8002522 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x62>
            filters::butterworth_highpass(
 80024e2:	78f8      	ldrb	r0, [r7, #3]
                filter_order,
                sampling_frequency,
                filter_cutoff,
                matrix->buffer + (row * matrix->cols),
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	6979      	ldr	r1, [r7, #20]
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	18d4      	adds	r4, r2, r3
                matrix->buffer + (row * matrix->cols),
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	6979      	ldr	r1, [r7, #20]
 8002500:	fb01 f303 	mul.w	r3, r1, r3
 8002504:	009b      	lsls	r3, r3, #2
            filters::butterworth_highpass(
 8002506:	441a      	add	r2, r3
                matrix->cols);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
            filters::butterworth_highpass(
 800250c:	4621      	mov	r1, r4
 800250e:	edd7 0a01 	vldr	s1, [r7, #4]
 8002512:	ed97 0a02 	vldr	s0, [r7, #8]
 8002516:	f7ff fd7f 	bl	8002018 <_ZN2ei8spectral7filtersL20butterworth_highpassEiffPKfPfj>
        for (size_t row = 0; row < matrix->rows; row++) {
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	3301      	adds	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	e7da      	b.n	80024d8 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh+0x18>
        }

        return EIDSP_OK;
 8002522:	2300      	movs	r3, #0
    }
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	bd90      	pop	{r4, r7, pc}

0800252c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>:
    static int find_peak_indexes(
        matrix_t *input_matrix,
        matrix_t *output_matrix,
        float threshold,
        uint16_t *peaks_found)
    {
 800252c:	b480      	push	{r7}
 800252e:	b091      	sub	sp, #68	; 0x44
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	ed87 0a01 	vstr	s0, [r7, #4]
 800253a:	603a      	str	r2, [r7, #0]
        if (input_matrix->rows != 1) {
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d001      	beq.n	8002548 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002544:	4b60      	ldr	r3, [pc, #384]	; (80026c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002546:	e0b9      	b.n	80026bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        if (output_matrix->cols != 1) {
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d001      	beq.n	8002554 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x28>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002550:	4b5d      	ldr	r3, [pc, #372]	; (80026c8 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x19c>)
 8002552:	e0b3      	b.n	80026bc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x190>
        }

        uint16_t out_ix = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	87fb      	strh	r3, [r7, #62]	; 0x3e
        size_t in_size = input_matrix->cols;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
        float *in = input_matrix->buffer;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	623b      	str	r3, [r7, #32]
        size_t out_size = output_matrix->rows;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	61fb      	str	r3, [r7, #28]
        float *out = output_matrix->buffer;
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	61bb      	str	r3, [r7, #24]

        // for normalized threshold calculation
        float min = FLT_MAX, max = 0.0f;
 8002570:	4b56      	ldr	r3, [pc, #344]	; (80026cc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x1a0>)
 8002572:	63bb      	str	r3, [r7, #56]	; 0x38
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 800257a:	2300      	movs	r3, #0
 800257c:	633b      	str	r3, [r7, #48]	; 0x30
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	3b01      	subs	r3, #1
 8002582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002584:	429a      	cmp	r2, r3
 8002586:	d229      	bcs.n	80025dc <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xb0>
            if (in[ix] < min) {
 8002588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	6a3a      	ldr	r2, [r7, #32]
 800258e:	4413      	add	r3, r2
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002598:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	dd05      	ble.n	80025ae <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x82>
                min = in[ix];
 80025a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	6a3a      	ldr	r2, [r7, #32]
 80025a8:	4413      	add	r3, r2
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	63bb      	str	r3, [r7, #56]	; 0x38
            }
            if (in[ix] > max) {
 80025ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	6a3a      	ldr	r2, [r7, #32]
 80025b4:	4413      	add	r3, r2
 80025b6:	edd3 7a00 	vldr	s15, [r3]
 80025ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80025be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d505      	bpl.n	80025d4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xa8>
                max = in[ix];
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	6a3a      	ldr	r2, [r7, #32]
 80025ce:	4413      	add	r3, r2
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
        for (size_t ix = 0; ix < in_size - 1; ix++) {
 80025d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d6:	3301      	adds	r3, #1
 80025d8:	633b      	str	r3, [r7, #48]	; 0x30
 80025da:	e7d0      	b.n	800257e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x52>
            }
        }


        float prev = in[0];
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c

        // so....
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80025e2:	2301      	movs	r3, #1
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3b01      	subs	r3, #1
 80025ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d261      	bcs.n	80026b4 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x188>
            // first make sure it's actually a peak...
            if (in[ix] > prev && in[ix] > in[ix+1]) {
 80025f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	6a3a      	ldr	r2, [r7, #32]
 80025f6:	4413      	add	r3, r2
 80025f8:	edd3 7a00 	vldr	s15, [r3]
 80025fc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8002600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002608:	d549      	bpl.n	800269e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	6a3a      	ldr	r2, [r7, #32]
 8002610:	4413      	add	r3, r2
 8002612:	ed93 7a00 	vldr	s14, [r3]
 8002616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002618:	3301      	adds	r3, #1
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	6a3a      	ldr	r2, [r7, #32]
 800261e:	4413      	add	r3, r2
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800262c:	dd37      	ble.n	800269e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                // then make sure the threshold is met (on both?)
                float height = (in[ix] - prev) + (in[ix] - in[ix + 1]);
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	6a3a      	ldr	r2, [r7, #32]
 8002634:	4413      	add	r3, r2
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800263e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	6a3a      	ldr	r2, [r7, #32]
 8002648:	4413      	add	r3, r2
 800264a:	edd3 6a00 	vldr	s13, [r3]
 800264e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002650:	3301      	adds	r3, #1
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	6a3a      	ldr	r2, [r7, #32]
 8002656:	4413      	add	r3, r2
 8002658:	edd3 7a00 	vldr	s15, [r3]
 800265c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002664:	edc7 7a05 	vstr	s15, [r7, #20]
                // printf("%d inx: %f height: %f threshold: %f\r\n", ix, in[ix], height, threshold);
                if (height > threshold) {
 8002668:	ed97 7a05 	vldr	s14, [r7, #20]
 800266c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002678:	dd11      	ble.n	800269e <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x172>
                    out[out_ix] = ix;
 800267a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4413      	add	r3, r2
 8002682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002684:	ee07 2a90 	vmov	s15, r2
 8002688:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268c:	edc3 7a00 	vstr	s15, [r3]
                    out_ix++;
 8002690:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002692:	3301      	adds	r3, #1
 8002694:	87fb      	strh	r3, [r7, #62]	; 0x3e
                    if (out_ix == out_size) break;
 8002696:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	429a      	cmp	r2, r3
 800269c:	d009      	beq.n	80026b2 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0x186>
                }
            }

            prev = in[ix];
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	6a3a      	ldr	r2, [r7, #32]
 80026a4:	4413      	add	r3, r2
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (size_t ix = 1; ix < in_size - 1; ix++) {
 80026aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ac:	3301      	adds	r3, #1
 80026ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b0:	e799      	b.n	80025e6 <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt+0xba>
                    if (out_ix == out_size) break;
 80026b2:	bf00      	nop
        }

        *peaks_found = out_ix;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80026b8:	801a      	strh	r2, [r3, #0]

        return EIDSP_OK;
 80026ba:	2300      	movs	r3, #0
    }
 80026bc:	4618      	mov	r0, r3
 80026be:	3744      	adds	r7, #68	; 0x44
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	fffffc14 	.word	0xfffffc14
 80026cc:	7f7fffff 	.word	0x7f7fffff

080026d0 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>:
                d.amplitude = 0.0f;
            }
            peaks.push_back(d);
        }
        sort(peaks.begin(), peaks.end(),
            [](const freq_peak_t & a, const freq_peak_t & b) -> bool
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
        {
            return a.amplitude > b.amplitude;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	ed93 7a01 	vldr	s14, [r3, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80026e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	bfcc      	ite	gt
 80026f2:	2301      	movgt	r3, #1
 80026f4:	2300      	movle	r3, #0
 80026f6:	b2db      	uxtb	r3, r3
        });
 80026f8:	4618      	mov	r0, r3
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>:
    {
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	ed2d 8b02 	vpush	{d8}
 800270a:	b09e      	sub	sp, #120	; 0x78
 800270c:	af00      	add	r7, sp, #0
 800270e:	6178      	str	r0, [r7, #20]
 8002710:	6139      	str	r1, [r7, #16]
 8002712:	ed87 0a03 	vstr	s0, [r7, #12]
 8002716:	edc7 0a02 	vstr	s1, [r7, #8]
 800271a:	4613      	mov	r3, r2
 800271c:	80fb      	strh	r3, [r7, #6]
        if (fft_matrix->rows != 1) {
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d001      	beq.n	800272a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002726:	4c93      	ldr	r4, [pc, #588]	; (8002974 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x270>)
 8002728:	e11c      	b.n	8002964 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        if (output_matrix->cols != 2) {
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b02      	cmp	r3, #2
 8002730:	d001      	beq.n	8002736 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002732:	4c90      	ldr	r4, [pc, #576]	; (8002974 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x270>)
 8002734:	e116      	b.n	8002964 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x260>
        int N = static_cast<int>(fft_length);
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	66bb      	str	r3, [r7, #104]	; 0x68
        float T = 1.0f / sampling_freq;
 800273a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800273e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002746:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8002752:	2300      	movs	r3, #0
 8002754:	2101      	movs	r1, #1
 8002756:	f7fe fcf0 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 800275a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x60>
 8002760:	4c85      	ldr	r4, [pc, #532]	; (8002978 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x274>)
 8002762:	e0fa      	b.n	800295a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        ret = numpy::linspace(0.0f, 1.0f / (2.0f * T), floor(N / 2), freq_space.buffer);
 8002764:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002768:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800276c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002770:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8002774:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002776:	0fda      	lsrs	r2, r3, #31
 8002778:	4413      	add	r3, r2
 800277a:	105b      	asrs	r3, r3, #1
 800277c:	4618      	mov	r0, r3
 800277e:	f002 fbc9 	bl	8004f14 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8002782:	ec54 3b10 	vmov	r3, r4, d0
 8002786:	4618      	mov	r0, r3
 8002788:	4621      	mov	r1, r4
 800278a:	f7fe fa25 	bl	8000bd8 <__aeabi_d2uiz>
 800278e:	4602      	mov	r2, r0
 8002790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002792:	4619      	mov	r1, r3
 8002794:	4610      	mov	r0, r2
 8002796:	eef0 0a48 	vmov.f32	s1, s16
 800279a:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800297c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>
 800279e:	f7ff f929 	bl	80019f4 <_ZN2ei5numpy8linspaceEffmPf>
 80027a2:	4603      	mov	r3, r0
 80027a4:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 80027a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xac>
            EIDSP_ERR(ret);
 80027ac:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80027ae:	e0d4      	b.n	800295a <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x256>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4619      	mov	r1, r3
 80027be:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80027c2:	2300      	movs	r3, #0
 80027c4:	2201      	movs	r2, #1
 80027c6:	f7fe fcb8 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80027ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xd0>
 80027d0:	4c69      	ldr	r4, [pc, #420]	; (8002978 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x274>)
 80027d2:	e0bd      	b.n	8002950 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x24c>
        ret = find_peak_indexes(fft_matrix, &peaks_matrix, 0.0f, &peak_count);
 80027d4:	f107 023a 	add.w	r2, r7, #58	; 0x3a
 80027d8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027dc:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800297c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x278>
 80027e0:	4619      	mov	r1, r3
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff fea2 	bl	800252c <_ZN2ei8spectral10processingL17find_peak_indexesEPNS_9ei_matrixES3_fPt>
 80027e8:	4603      	mov	r3, r0
 80027ea:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (ret != EIDSP_OK) {
 80027ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0xf2>
            EIDSP_ERR(ret);
 80027f2:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80027f4:	e0ac      	b.n	8002950 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x24c>
        std::vector<freq_peak_t> peaks;
 80027f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027fa:	4618      	mov	r0, r3
 80027fc:	f002 fb9c 	bl	8004f38 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8002800:	2300      	movs	r3, #0
 8002802:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002806:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800280a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800280c:	4293      	cmp	r3, r2
 800280e:	da3d      	bge.n	800288c <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x188>
            d.freq = freq_space.buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8002810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002812:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002814:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002824:	ee17 3a90 	vmov	r3, s15
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
            d.amplitude = fft_matrix->buffer[static_cast<uint32_t>(peaks_matrix.buffer[ix])];
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002836:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002846:	ee17 3a90 	vmov	r3, s15
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	62bb      	str	r3, [r7, #40]	; 0x28
            if (d.amplitude < threshold) {
 8002852:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002856:	ed97 7a02 	vldr	s14, [r7, #8]
 800285a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002862:	dd05      	ble.n	8002870 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x16c>
                d.freq = 0.0f;
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
                d.amplitude = 0.0f;
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
            peaks.push_back(d);
 8002870:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002874:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fb84 	bl	8004f88 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (uint8_t ix = 0; ix < peak_count; ix++) {
 8002880:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8002884:	3301      	adds	r3, #1
 8002886:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800288a:	e7bc      	b.n	8002806 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x102>
        sort(peaks.begin(), peaks.end(),
 800288c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002890:	4618      	mov	r0, r3
 8002892:	f002 fb9f 	bl	8004fd4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>
 8002896:	4604      	mov	r4, r0
 8002898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800289c:	4618      	mov	r0, r3
 800289e:	f002 fba9 	bl	8004ff4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>
 80028a2:	4603      	mov	r3, r0
 80028a4:	462a      	mov	r2, r5
 80028a6:	4619      	mov	r1, r3
 80028a8:	4620      	mov	r0, r4
 80028aa:	f002 fbdf 	bl	800506c <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESC_fftEUlRKS5_SE_E_EvT_SG_T0_>

        // fill with zeros at the end (if needed)
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80028ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b2:	4618      	mov	r0, r3
 80028b4:	f002 fbec 	bl	8005090 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 80028b8:	6738      	str	r0, [r7, #112]	; 0x70
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d211      	bcs.n	80028e8 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e4>
            freq_peak_t d;
            d.freq = 0;
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
            d.amplitude = 0;
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
            peaks.push_back(d);
 80028d0:	f107 021c 	add.w	r2, r7, #28
 80028d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f002 fb54 	bl	8004f88 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>
        for (size_t ix = peaks.size(); ix < output_matrix->rows; ix++) {
 80028e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028e2:	3301      	adds	r3, #1
 80028e4:	673b      	str	r3, [r7, #112]	; 0x70
 80028e6:	e7e8      	b.n	80028ba <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1b6>
        }

        for (size_t row = 0; row < output_matrix->rows; row++) {
 80028e8:	2300      	movs	r3, #0
 80028ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d226      	bcs.n	8002944 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x240>
            // col 0 is freq, col 1 is ampl
            output_matrix->buffer[row * output_matrix->cols + 0] = peaks[row].freq;
 80028f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028fa:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80028fc:	4618      	mov	r0, r3
 80028fe:	f002 fbd8 	bl	80050b2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800290c:	fb01 f303 	mul.w	r3, r1, r3
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	6802      	ldr	r2, [r0, #0]
 8002916:	601a      	str	r2, [r3, #0]
            output_matrix->buffer[row * output_matrix->cols + 1] = peaks[row].amplitude;
 8002918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800291c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800291e:	4618      	mov	r0, r3
 8002920:	f002 fbc7 	bl	80050b2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800292e:	fb01 f303 	mul.w	r3, r1, r3
 8002932:	3301      	adds	r3, #1
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	6842      	ldr	r2, [r0, #4]
 800293a:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < output_matrix->rows; row++) {
 800293c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800293e:	3301      	adds	r3, #1
 8002940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002942:	e7d3      	b.n	80028ec <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft+0x1e8>
        }

        return EIDSP_OK;
 8002944:	2400      	movs	r4, #0
        std::vector<freq_peak_t> peaks;
 8002946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294a:	4618      	mov	r0, r3
 800294c:	f002 fb01 	bl	8004f52 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>
        EI_DSP_MATRIX(peaks_matrix, output_matrix->rows * 10, 1);
 8002950:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe fc1b 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(freq_space, 1, fft_matrix->cols);
 800295a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800295e:	4618      	mov	r0, r3
 8002960:	f7fe fc16 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8002964:	4623      	mov	r3, r4
    }
 8002966:	4618      	mov	r0, r3
 8002968:	3778      	adds	r7, #120	; 0x78
 800296a:	46bd      	mov	sp, r7
 800296c:	ecbd 8b02 	vpop	{d8}
 8002970:	bdb0      	pop	{r4, r5, r7, pc}
 8002972:	bf00      	nop
 8002974:	fffffc14 	.word	0xfffffc14
 8002978:	fffffc16 	.word	0xfffffc16
 800297c:	00000000 	.word	0x00000000

08002980 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>:
        matrix_t *fft_matrix,
        matrix_t *freq_matrix,
        matrix_t *edges_matrix,
        matrix_t *output_matrix,
        float sampling_freq
    ) {
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b093      	sub	sp, #76	; 0x4c
 8002984:	af00      	add	r7, sp, #0
 8002986:	6178      	str	r0, [r7, #20]
 8002988:	6139      	str	r1, [r7, #16]
 800298a:	60fa      	str	r2, [r7, #12]
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	ed87 0a01 	vstr	s0, [r7, #4]
        if (fft_matrix->rows != 1 || freq_matrix->rows != 1) {
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d103      	bne.n	80029a2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x22>
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d001      	beq.n	80029a6 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x26>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80029a2:	4c7b      	ldr	r4, [pc, #492]	; (8002b90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80029a4:	e0ef      	b.n	8002b86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (edges_matrix->cols != 1) {
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d001      	beq.n	80029b2 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80029ae:	4c78      	ldr	r4, [pc, #480]	; (8002b90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80029b0:	e0e9      	b.n	8002b86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (output_matrix->rows != edges_matrix->rows - 1 || output_matrix->cols != edges_matrix->cols) {
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	429a      	cmp	r2, r3
 80029be:	d105      	bne.n	80029cc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x4c>
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d001      	beq.n	80029d0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x50>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80029cc:	4c70      	ldr	r4, [pc, #448]	; (8002b90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80029ce:	e0da      	b.n	8002b86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        if (fft_matrix->cols != freq_matrix->cols) {
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x60>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80029dc:	4c6c      	ldr	r4, [pc, #432]	; (8002b90 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x210>)
 80029de:	e0d2      	b.n	8002b86 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x206>
        }

        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80029ea:	2300      	movs	r3, #0
 80029ec:	2101      	movs	r1, #1
 80029ee:	f7fe fba4 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x7c>
 80029f8:	4c66      	ldr	r4, [pc, #408]	; (8002b94 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 80029fa:	e0bf      	b.n	8002b7c <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1fc>
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	1e5a      	subs	r2, r3, #1
 8002a02:	f107 0018 	add.w	r0, r7, #24
 8002a06:	2300      	movs	r3, #0
 8002a08:	2101      	movs	r1, #1
 8002a0a:	f7fe fb96 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x98>
 8002a14:	4c5f      	ldr	r4, [pc, #380]	; (8002b94 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x214>)
 8002a16:	e0ac      	b.n	8002b72 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f2>

        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8002a18:	2300      	movs	r3, #0
 8002a1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002a1e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d264      	bcs.n	8002af4 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x174>
            float t = freq_matrix->buffer[ix];
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	63fb      	str	r3, [r7, #60]	; 0x3c
            float v = fft_matrix->buffer[ix];
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	63bb      	str	r3, [r7, #56]	; 0x38

            // does this fit between any edges?
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002a50:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d244      	bcs.n	8002ae8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
                if (t >= edges_matrix->buffer[ex] && t < edges_matrix->buffer[ex + 1]) {
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	edd3 7a00 	vldr	s15, [r3]
 8002a6e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	db2f      	blt.n	8002adc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002a84:	3301      	adds	r3, #1
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d51f      	bpl.n	8002adc <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x15c>
                    buckets.buffer[ex] += v;
 8002a9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	ed93 7a00 	vldr	s14, [r3]
 8002aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abc:	edc3 7a00 	vstr	s15, [r3]
                    bucket_count.buffer[ex]++;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ad2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad6:	edc3 7a00 	vstr	s15, [r3]
                    break;
 8002ada:	e005      	b.n	8002ae8 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x168>
            for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002adc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ae6:	e7b3      	b.n	8002a50 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0xd0>
        for (uint16_t ix = 0; ix < freq_matrix->cols; ix++) {
 8002ae8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002aec:	3301      	adds	r3, #1
 8002aee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002af2:	e794      	b.n	8002a1e <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x9e>
                }
            }
        }

        // average out and push to vector
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002af4:	2300      	movs	r3, #0
 8002af6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002afa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d233      	bcs.n	8002b70 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1f0>
            if (bucket_count.buffer[ex] == 0.0f) {
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	d109      	bne.n	8002b34 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1b4>
                output_matrix->buffer[ex] = 0.0f;
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f04f 0200 	mov.w	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e017      	b.n	8002b64 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x1e4>
            }
            else {
                output_matrix->buffer[ex] = buckets.buffer[ex] / bucket_count.buffer[ex];
 8002b34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	edd3 6a00 	vldr	s13, [r3]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	ed93 7a00 	vldr	s14, [r3]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b60:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ex = 0; ex < edges_matrix->rows - 1; ex++) {
 8002b64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002b68:	3301      	adds	r3, #1
 8002b6a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002b6e:	e7c4      	b.n	8002afa <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f+0x17a>
            }
        }

        return EIDSP_OK;
 8002b70:	2400      	movs	r4, #0
        EI_DSP_MATRIX(bucket_count, 1, edges_matrix->rows - 1);
 8002b72:	f107 0318 	add.w	r3, r7, #24
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe fb0a 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(buckets, 1, edges_matrix->rows - 1);
 8002b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fb05 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8002b86:	4623      	mov	r3, r4
    }
 8002b88:	4618      	mov	r0, r3
 8002b8a:	374c      	adds	r7, #76	; 0x4c
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd90      	pop	{r4, r7, pc}
 8002b90:	fffffc14 	.word	0xfffffc14
 8002b94:	fffffc16 	.word	0xfffffc16

08002b98 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>:
     * @param sampling_freq The sampling frequency
     * @param n_fft Number of FFT buckets
     * @returns 0 if OK
     */
    int periodogram(matrix_t *input_matrix, matrix_t *out_fft_matrix, matrix_t *out_freq_matrix, float sampling_freq, uint16_t n_fft)
    {
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	ed2d 8b02 	vpush	{d8}
 8002b9e:	b09b      	sub	sp, #108	; 0x6c
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	6178      	str	r0, [r7, #20]
 8002ba4:	6139      	str	r1, [r7, #16]
 8002ba6:	60fa      	str	r2, [r7, #12]
 8002ba8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bac:	80fb      	strh	r3, [r7, #6]
        if (input_matrix->rows != 1) {
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002bb6:	4c82      	ldr	r4, [pc, #520]	; (8002dc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8002bb8:	e197      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (out_fft_matrix->rows != 1 || out_fft_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d107      	bne.n	8002bd2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3a>
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	88fa      	ldrh	r2, [r7, #6]
 8002bc8:	0852      	lsrs	r2, r2, #1
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	3201      	adds	r2, #1
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d001      	beq.n	8002bd6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x3e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002bd2:	4c7b      	ldr	r4, [pc, #492]	; (8002dc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8002bd4:	e189      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (out_freq_matrix->rows != 1 || out_freq_matrix->cols != static_cast<uint32_t>(n_fft / 2 + 1)) {
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d107      	bne.n	8002bee <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x56>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	0852      	lsrs	r2, r2, #1
 8002be6:	b292      	uxth	r2, r2
 8002be8:	3201      	adds	r2, #1
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d001      	beq.n	8002bf2 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x5a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002bee:	4c74      	ldr	r4, [pc, #464]	; (8002dc0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x228>)
 8002bf0:	e17b      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (input_matrix->buffer == NULL) {
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x66>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002bfa:	4c72      	ldr	r4, [pc, #456]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002bfc:	e175      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (out_fft_matrix->buffer == NULL) {
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x72>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002c06:	4c6f      	ldr	r4, [pc, #444]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002c08:	e16f      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        if (out_freq_matrix->buffer == NULL) {
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x7e>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002c12:	4c6c      	ldr	r4, [pc, #432]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002c14:	e169      	b.n	8002eea <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x352>
        }

        // map over the input buffer, so we can manipulate the number of columns
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	6859      	ldr	r1, [r3, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002c26:	f7fe fa88 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x9c>
 8002c30:	4c64      	ldr	r4, [pc, #400]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002c32:	e155      	b.n	8002ee0 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x348>

        uint16_t nperseg = n_fft;
 8002c34:	88fb      	ldrh	r3, [r7, #6]
 8002c36:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

        if (n_fft > input_matrix->cols) {
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d904      	bls.n	8002c4e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xb6>
            nperseg = input_matrix->cols;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002c4c:	e006      	b.n	8002c5c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
        }
        // make the column align to nperseg in this case
        else if (n_fft < input_matrix->cols) {
 8002c4e:	88fa      	ldrh	r2, [r7, #6]
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d201      	bcs.n	8002c5c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xc4>
            welch_matrix.cols = n_fft;
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8002c5c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8002c60:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8002c64:	2300      	movs	r3, #0
 8002c66:	2101      	movs	r1, #1
 8002c68:	f7fe fa67 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xde>
 8002c72:	4c54      	ldr	r4, [pc, #336]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002c74:	e12f      	b.n	8002ed6 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x33e>
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002c7c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8002c80:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d20d      	bcs.n	8002ca4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x10c>
            triage_segments.buffer[ix] = 1.0f;
 8002c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c96:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < nperseg; ix++) {
 8002c98:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8002ca2:	e7eb      	b.n	8002c7c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0xe4>
        }

        float scale = 1.0f / (sampling_freq * nperseg);
 8002ca4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002ca8:	ee07 3a90 	vmov	s15, r3
 8002cac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002cca:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	085b      	lsrs	r3, r3, #1
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	da26      	bge.n	8002d28 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x190>
            out_freq_matrix->buffer[ix] = static_cast<float>(ix) * (1.0f / (n_fft * (1.0f / sampling_freq)));
 8002cda:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	ee07 3a90 	vmov	s15, r3
 8002cec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002cf0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002cf4:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cf8:	eec5 7a86 	vdiv.f32	s15, s11, s12
 8002cfc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d00:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002d04:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d18:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002d1c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002d20:	3301      	adds	r3, #1
 8002d22:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8002d26:	e7d0      	b.n	8002cca <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x132>
        }

        int ret;

        // now we need to detrend... which is done constant so just subtract the mean
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8002d28:	f107 001c 	add.w	r0, r7, #28
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2101      	movs	r1, #1
 8002d32:	f7fe fa02 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1a8>
 8002d3c:	4c21      	ldr	r4, [pc, #132]	; (8002dc4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x22c>)
 8002d3e:	e0c5      	b.n	8002ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        ret = numpy::mean(&welch_matrix, &mean_matrix);
 8002d40:	f107 021c 	add.w	r2, r7, #28
 8002d44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fc2e 	bl	80015ac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8002d50:	4603      	mov	r3, r0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (ret != EIDSP_OK) {
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1c6>
            EIDSP_ERR(ret);
 8002d5a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002d5c:	e0b6      	b.n	8002ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        }

        ret = numpy::subtract(&welch_matrix, &mean_matrix);
 8002d5e:	f107 021c 	add.w	r2, r7, #28
 8002d62:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fe fb85 	bl	8001478 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (ret != EIDSP_OK) {
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x1e4>
            EIDSP_ERR(ret);
 8002d78:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002d7a:	e0a7      	b.n	8002ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
        }

        fft_complex_t *fft_output = (fft_complex_t*)ei_dsp_calloc((n_fft / 2 + 1) * sizeof(fft_complex_t), 1);
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	2101      	movs	r1, #1
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f00a fb4f 	bl	800d42c <_Z9ei_callocjj>
 8002d8e:	6538      	str	r0, [r7, #80]	; 0x50
        ret = numpy::rfft(welch_matrix.buffer, welch_matrix.cols, fft_output, n_fft / 2 + 1, n_fft);
 8002d90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	88fb      	ldrh	r3, [r7, #6]
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	4613      	mov	r3, r2
 8002da4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002da6:	f7fe fd2d 	bl	8001804 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 8002daa:	4603      	mov	r3, r0
 8002dac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (ret != EIDSP_OK) {
 8002dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d009      	beq.n	8002dc8 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x230>
            ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8002db4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002db6:	f00a fb47 	bl	800d448 <_Z7ei_freePv>
            EIDSP_ERR(ret);
 8002dba:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8002dbc:	e086      	b.n	8002ecc <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x334>
 8002dbe:	bf00      	nop
 8002dc0:	fffffc14 	.word	0xfffffc14
 8002dc4:	fffffc16 	.word	0xfffffc16
        }

        // conjugate and then multiply with itself and scale
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002dce:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	085b      	lsrs	r3, r3, #1
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	da72      	bge.n	8002ec4 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x32c>
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8002dde:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002de6:	4413      	add	r3, r2
 8002de8:	ed93 7a00 	vldr	s14, [r3]
 8002dec:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002df4:	4413      	add	r3, r2
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	ee27 8a27 	vmul.f32	s16, s14, s15
                (abs(fft_output[ix].i * fft_output[ix].i));
 8002dfe:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e06:	4413      	add	r3, r2
 8002e08:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e0c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e14:	4413      	add	r3, r2
 8002e16:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e22:	f7fe f91e 	bl	8001062 <_ZSt3absf>
 8002e26:	eef0 7a40 	vmov.f32	s15, s0
            fft_output[ix].r = (fft_output[ix].r * fft_output[ix].r) +
 8002e2a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e32:	4413      	add	r3, r2
 8002e34:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002e38:	edc3 7a00 	vstr	s15, [r3]
            fft_output[ix].i = 0.0f;
 8002e3c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e44:	4413      	add	r3, r2
 8002e46:	f04f 0200 	mov.w	r2, #0
 8002e4a:	605a      	str	r2, [r3, #4]

            fft_output[ix].r *= scale;
 8002e4c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e54:	4413      	add	r3, r2
 8002e56:	ed93 7a00 	vldr	s14, [r3]
 8002e5a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e62:	4413      	add	r3, r2
 8002e64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6c:	edc3 7a00 	vstr	s15, [r3]

            if (ix != n_fft / 2) {
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d00f      	beq.n	8002e9e <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x306>
                fft_output[ix].r *= 2;
 8002e7e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e86:	4413      	add	r3, r2
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e94:	4413      	add	r3, r2
 8002e96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e9a:	edc3 7a00 	vstr	s15, [r3]
            }

            // then multiply by itself...
            out_fft_matrix->buffer[ix] = fft_output[ix].r;
 8002e9e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002ea6:	441a      	add	r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	6819      	ldr	r1, [r3, #0]
 8002eac:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < n_fft / 2 + 1; ix++) {
 8002eb8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8002ec2:	e784      	b.n	8002dce <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft+0x236>
        }

        ei_dsp_free(fft_output, (n_fft / 2 + 1) * sizeof(fft_complex_t));
 8002ec4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002ec6:	f00a fabf 	bl	800d448 <_Z7ei_freePv>

        return EIDSP_OK;
 8002eca:	2400      	movs	r4, #0
        EI_DSP_MATRIX(mean_matrix, 1, 1);
 8002ecc:	f107 031c 	add.w	r3, r7, #28
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7fe f95d 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(triage_segments, 1, nperseg);
 8002ed6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7fe f958 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX_B(welch_matrix, input_matrix->rows, input_matrix->cols, input_matrix->buffer);
 8002ee0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe f953 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8002eea:	4623      	mov	r3, r4
    }
 8002eec:	4618      	mov	r0, r3
 8002eee:	3764      	adds	r7, #100	; 0x64
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	ecbd 8b02 	vpop	{d8}
 8002ef6:	bd90      	pop	{r4, r7, pc}

08002ef8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>:
     * @param fft_peaks Number of FFT peaks to find
     * @param fft_peaks_threshold Minimum threshold
     * @param edges_matrix Spectral power edges
     * @returns 0 if OK
     */
    static int spectral_analysis(
 8002ef8:	b5b0      	push	{r4, r5, r7, lr}
 8002efa:	b0b4      	sub	sp, #208	; 0xd0
 8002efc:	af02      	add	r7, sp, #8
 8002efe:	6178      	str	r0, [r7, #20]
 8002f00:	6139      	str	r1, [r7, #16]
 8002f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f06:	4611      	mov	r1, r2
 8002f08:	edc7 0a01 	vstr	s1, [r7, #4]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	ed87 1a00 	vstr	s2, [r7]
 8002f12:	460b      	mov	r3, r1
 8002f14:	72fb      	strb	r3, [r7, #11]
 8002f16:	4613      	mov	r3, r2
 8002f18:	72bb      	strb	r3, [r7, #10]
        uint16_t fft_length,
        uint8_t fft_peaks,
        float fft_peaks_threshold,
        matrix_t *edges_matrix_in
    ) {
        if (out_features->rows != input_matrix->rows) {
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d001      	beq.n	8002f2a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x32>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f26:	4cc2      	ldr	r4, [pc, #776]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002f28:	e258      	b.n	80033dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4e4>
        }

        if (out_features->cols != calculate_spectral_buffer_size(true, fft_peaks, edges_matrix_in->rows)) {
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	689d      	ldr	r5, [r3, #8]
 8002f2e:	f897 10dc 	ldrb.w	r1, [r7, #220]	; 0xdc
 8002f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f000 fa54 	bl	80033e8 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 8002f40:	4603      	mov	r3, r0
 8002f42:	429d      	cmp	r5, r3
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x5c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f50:	4cb7      	ldr	r4, [pc, #732]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002f52:	e243      	b.n	80033dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4e4>
        }

        if (edges_matrix_in->cols != 1) {
 8002f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d001      	beq.n	8002f62 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x6a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002f5e:	4cb4      	ldr	r4, [pc, #720]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002f60:	e23c      	b.n	80033dc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4e4>
        }

        int ret;

        size_t axes = input_matrix->rows;
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

        // calculate the mean
        EI_DSP_MATRIX(mean_matrix, axes, 1);
 8002f6a:	f107 009c 	add.w	r0, r7, #156	; 0x9c
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2201      	movs	r2, #1
 8002f72:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8002f76:	f7fe f8e0 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8002f7a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x8e>
 8002f82:	4cac      	ldr	r4, [pc, #688]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 8002f84:	e225      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
        ret = numpy::mean(input_matrix, &mean_matrix);
 8002f86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6938      	ldr	r0, [r7, #16]
 8002f8e:	f7fe fb0d 	bl	80015ac <_ZN2ei5numpy4meanEPNS_9ei_matrixES2_>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if (ret != EIDSP_OK) {
 8002f98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xac>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002fa0:	4ca3      	ldr	r4, [pc, #652]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002fa2:	e216      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
        }

        // scale by the mean
        ret = numpy::subtract(input_matrix, &mean_matrix);
 8002fa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6938      	ldr	r0, [r7, #16]
 8002fac:	f7fe fa64 	bl	8001478 <_ZN2ei5numpy8subtractEPNS_9ei_matrixES2_>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if (ret != EIDSP_OK) {
 8002fb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xca>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002fbe:	4c9c      	ldr	r4, [pc, #624]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002fc0:	e207      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
        }

        // apply filter
        if (filter_type == filter_lowpass) {
 8002fc2:	7afb      	ldrb	r3, [r7, #11]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d111      	bne.n	8002fec <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0xf4>
            ret = spectral::processing::butterworth_lowpass_filter(
 8002fc8:	7abb      	ldrb	r3, [r7, #10]
 8002fca:	4619      	mov	r1, r3
 8002fcc:	edd7 0a01 	vldr	s1, [r7, #4]
 8002fd0:	ed97 0a03 	vldr	s0, [r7, #12]
 8002fd4:	6938      	ldr	r0, [r7, #16]
 8002fd6:	f7ff fa3d 	bl	8002454 <_ZN2ei8spectral10processingL26butterworth_lowpass_filterEPNS_9ei_matrixEffh>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 8002fe0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d016      	beq.n	8003016 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x11e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8002fe8:	4c91      	ldr	r4, [pc, #580]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8002fea:	e1f2      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
            }
        }
        else if (filter_type == filter_highpass) {
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d111      	bne.n	8003016 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x11e>
            ret = spectral::processing::butterworth_highpass_filter(
 8002ff2:	7abb      	ldrb	r3, [r7, #10]
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	edd7 0a01 	vldr	s1, [r7, #4]
 8002ffa:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ffe:	6938      	ldr	r0, [r7, #16]
 8003000:	f7ff fa5e 	bl	80024c0 <_ZN2ei8spectral10processingL27butterworth_highpass_filterEPNS_9ei_matrixEffh>
 8003004:	4603      	mov	r3, r0
 8003006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                input_matrix, sampling_freq, filter_cutoff, filter_order);
            if (ret != EIDSP_OK) {
 800300a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x11e>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003012:	4c87      	ldr	r4, [pc, #540]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8003014:	e1dd      	b.n	80033d2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4da>
            }
        }

        // calculate RMS
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 8003016:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 800301a:	2300      	movs	r3, #0
 800301c:	2201      	movs	r2, #1
 800301e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003022:	f7fe f88a 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8003026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x13a>
 800302e:	4c81      	ldr	r4, [pc, #516]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 8003030:	e1ca      	b.n	80033c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4d0>
        ret = numpy::rms(input_matrix, &rms_matrix);
 8003032:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003036:	4619      	mov	r1, r3
 8003038:	6938      	ldr	r0, [r7, #16]
 800303a:	f7fe fa7b 	bl	8001534 <_ZN2ei5numpy3rmsEPNS_9ei_matrixES2_>
 800303e:	4603      	mov	r3, r0
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        if (ret != EIDSP_OK) {
 8003044:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x158>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800304c:	4c78      	ldr	r4, [pc, #480]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 800304e:	e1bb      	b.n	80033c8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4d0>
        }

        // find peaks in FFT
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 8003050:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	461a      	mov	r2, r3
 8003058:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 800305c:	2300      	movs	r3, #0
 800305e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8003062:	f7fe f86a 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8003066:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x178>
 800306c:	4c71      	ldr	r4, [pc, #452]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 800306e:	e1a6      	b.n	80033be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c6>

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8003070:	2300      	movs	r3, #0
 8003072:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800307e:	429a      	cmp	r2, r3
 8003080:	f080 819c 	bcs.w	80033bc <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c4>
            // per axis code

            // get a slice of the current axis
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	689d      	ldr	r5, [r3, #8]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80030a0:	462a      	mov	r2, r5
 80030a2:	2101      	movs	r1, #1
 80030a4:	f7fe f849 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80030a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1bc>
 80030ae:	4c61      	ldr	r4, [pc, #388]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 80030b0:	2500      	movs	r5, #0
 80030b2:	e175      	b.n	80033a0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4a8>

            // calculate FFT
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 80030b4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80030b8:	085b      	lsrs	r3, r3, #1
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	461a      	mov	r2, r3
 80030c0:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80030c4:	2300      	movs	r3, #0
 80030c6:	2101      	movs	r1, #1
 80030c8:	f7fe f837 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80030cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d102      	bne.n	80030d8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x1e0>
 80030d2:	4c58      	ldr	r4, [pc, #352]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 80030d4:	2500      	movs	r5, #0
 80030d6:	e158      	b.n	800338a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x492>
            ret = numpy::rfft(axis_matrix.buffer, axis_matrix.cols, fft_matrix.buffer, fft_matrix.cols, fft_length);
 80030d8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80030da:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80030dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80030de:	6e7d      	ldr	r5, [r7, #100]	; 0x64
 80030e0:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	462b      	mov	r3, r5
 80030e8:	f7fe fa9c 	bl	8001624 <_ZN2ei5numpy4rfftEPKfjPfjj>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
            if (ret != EIDSP_OK) {
 80030f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d002      	beq.n	8003100 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x208>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80030fa:	4c4d      	ldr	r4, [pc, #308]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 80030fc:	2500      	movs	r5, #0
 80030fe:	e144      	b.n	800338a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x492>
            }

            // multiply by 2/N
            numpy::scale(&fft_matrix, (2.0f / static_cast<float>(fft_length)));
 8003100:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003104:	ee07 3a90 	vmov	s15, r3
 8003108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003110:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003114:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003118:	eeb0 0a66 	vmov.f32	s0, s13
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe f931 	bl	8001384 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>

            // we're now using the FFT matrix to calculate peaks etc.
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003122:	f897 10dc 	ldrb.w	r1, [r7, #220]	; 0xdc
 8003126:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800312a:	2300      	movs	r3, #0
 800312c:	2202      	movs	r2, #2
 800312e:	f7fe f804 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8003132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x246>
 8003138:	4c3e      	ldr	r4, [pc, #248]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 800313a:	2500      	movs	r5, #0
 800313c:	e11a      	b.n	8003374 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47c>
            ret = spectral::processing::find_fft_peaks(&fft_matrix, &peaks_matrix,
 800313e:	f8b7 20d8 	ldrh.w	r2, [r7, #216]	; 0xd8
 8003142:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8003146:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800314a:	edd7 0a00 	vldr	s1, [r7]
 800314e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fad6 	bl	8002704 <_ZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fft>
 8003158:	4603      	mov	r3, r0
 800315a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                sampling_freq, fft_peaks_threshold, fft_length);
            if (ret != EIDSP_OK) {
 800315e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x274>
                EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003166:	4c32      	ldr	r4, [pc, #200]	; (8003230 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x338>)
 8003168:	2500      	movs	r5, #0
 800316a:	e103      	b.n	8003374 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47c>
            }

            // calculate periodogram for spectral power buckets
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 800316c:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	b29b      	uxth	r3, r3
 8003174:	3301      	adds	r3, #1
 8003176:	461a      	mov	r2, r3
 8003178:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800317c:	2300      	movs	r3, #0
 800317e:	2101      	movs	r1, #1
 8003180:	f7fd ffdb 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 8003184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x298>
 800318a:	4c2a      	ldr	r4, [pc, #168]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 800318c:	2500      	movs	r5, #0
 800318e:	e0e6      	b.n	800335e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 8003190:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	b29b      	uxth	r3, r3
 8003198:	3301      	adds	r3, #1
 800319a:	461a      	mov	r2, r3
 800319c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80031a0:	2300      	movs	r3, #0
 80031a2:	2101      	movs	r1, #1
 80031a4:	f7fd ffc9 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80031a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2bc>
 80031ae:	4c21      	ldr	r4, [pc, #132]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 80031b0:	2500      	movs	r5, #0
 80031b2:	e0c9      	b.n	8003348 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
            ret = spectral::processing::periodogram(&axis_matrix,
 80031b4:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	; 0xd8
 80031b8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80031bc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80031c0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80031c4:	ed97 0a03 	vldr	s0, [r7, #12]
 80031c8:	f7ff fce6 	bl	8002b98 <_ZN2ei8spectral10processing11periodogramEPNS_9ei_matrixES3_S3_ft>
 80031cc:	4603      	mov	r3, r0
 80031ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                &period_fft_matrix, &period_freq_matrix, sampling_freq, fft_length);
            if (ret != EIDSP_OK) {
 80031d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x2ea>
                EIDSP_ERR(ret);
 80031da:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 80031de:	2500      	movs	r5, #0
 80031e0:	e0b2      	b.n	8003348 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
            }

            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 80031e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	1e59      	subs	r1, r3, #1
 80031ea:	f107 001c 	add.w	r0, r7, #28
 80031ee:	2300      	movs	r3, #0
 80031f0:	2201      	movs	r2, #1
 80031f2:	f7fd ffa2 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d102      	bne.n	8003202 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x30a>
 80031fc:	4c0d      	ldr	r4, [pc, #52]	; (8003234 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x33c>)
 80031fe:	2500      	movs	r5, #0
 8003200:	e097      	b.n	8003332 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43a>
            ret = spectral::processing::spectral_power_edges(
 8003202:	f107 031c 	add.w	r3, r7, #28
 8003206:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800320a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800320e:	ed97 0a03 	vldr	s0, [r7, #12]
 8003212:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003216:	f7ff fbb3 	bl	8002980 <_ZN2ei8spectral10processing20spectral_power_edgesEPNS_9ei_matrixES3_S3_S3_f>
 800321a:	4603      	mov	r3, r0
 800321c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                &period_fft_matrix,
                &period_freq_matrix,
                edges_matrix_in,
                &edges_matrix_out,
                sampling_freq);
            if (ret != EIDSP_OK) {
 8003220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x340>
                EIDSP_ERR(ret);
 8003228:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800322c:	2500      	movs	r5, #0
 800322e:	e080      	b.n	8003332 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x43a>
 8003230:	fffffc14 	.word	0xfffffc14
 8003234:	fffffc16 	.word	0xfffffc16
            }

            float *features_row = out_features->buffer + (row * out_features->cols);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

            size_t fx = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

            features_row[fx++] = rms_matrix.buffer[row];
 8003256:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800325a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8003272:	440b      	add	r3, r1
 8003274:	6812      	ldr	r2, [r2, #0]
 8003276:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800327e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003280:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003284:	429a      	cmp	r2, r3
 8003286:	d22c      	bcs.n	80032e2 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3ea>
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 0];
 8003288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800328a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8003290:	fb01 f303 	mul.w	r3, r1, r3
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	441a      	add	r2, r3
 8003298:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800329c:	1c59      	adds	r1, r3, #1
 800329e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80032a8:	440b      	add	r3, r1
 80032aa:	6812      	ldr	r2, [r2, #0]
 80032ac:	601a      	str	r2, [r3, #0]
                features_row[fx++] = peaks_matrix.buffer[peak_row * peaks_matrix.cols + 1];
 80032ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	441a      	add	r2, r3
 80032c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032c4:	1c59      	adds	r1, r3, #1
 80032c6:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80032d0:	440b      	add	r3, r1
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	601a      	str	r2, [r3, #0]
            for (size_t peak_row = 0; peak_row < peaks_matrix.rows; peak_row++) {
 80032d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032da:	3301      	adds	r3, #1
 80032dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032e0:	e7cd      	b.n	800327e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x386>
            }
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 80032e2:	2300      	movs	r3, #0
 80032e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d21e      	bcs.n	8003330 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x438>
                features_row[fx++] = edges_matrix_out.buffer[edge_row * edges_matrix_out.cols] / 10.0f;
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	ed93 7a00 	vldr	s14, [r3]
 8003306:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003316:	4413      	add	r3, r2
 8003318:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800331c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003320:	edc3 7a00 	vstr	s15, [r3]
            for (size_t edge_row = 0; edge_row < edges_matrix_out.rows; edge_row++) {
 8003324:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003328:	3301      	adds	r3, #1
 800332a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800332e:	e7db      	b.n	80032e8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x3f0>
 8003330:	2501      	movs	r5, #1
 8003332:	f107 031c 	add.w	r3, r7, #28
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd ff2a 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 800333c:	2d01      	cmp	r5, #1
 800333e:	d001      	beq.n	8003344 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x44c>
 8003340:	2500      	movs	r5, #0
 8003342:	e001      	b.n	8003348 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x450>
            EI_DSP_MATRIX(edges_matrix_out, edges_matrix_in->rows - 1, 1);
 8003344:	bf00      	nop
 8003346:	2501      	movs	r5, #1
 8003348:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd ff1f 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003352:	2d01      	cmp	r5, #1
 8003354:	d001      	beq.n	800335a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x462>
 8003356:	2500      	movs	r5, #0
 8003358:	e001      	b.n	800335e <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x466>
            EI_DSP_MATRIX(period_freq_matrix, 1, fft_length / 2 + 1);
 800335a:	bf00      	nop
 800335c:	2501      	movs	r5, #1
 800335e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd ff14 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003368:	2d01      	cmp	r5, #1
 800336a:	d001      	beq.n	8003370 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x478>
 800336c:	2500      	movs	r5, #0
 800336e:	e001      	b.n	8003374 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x47c>
            EI_DSP_MATRIX(period_fft_matrix, 1, fft_length / 2 + 1);
 8003370:	bf00      	nop
 8003372:	2501      	movs	r5, #1
 8003374:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd ff09 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 800337e:	2d01      	cmp	r5, #1
 8003380:	d001      	beq.n	8003386 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x48e>
 8003382:	2500      	movs	r5, #0
 8003384:	e001      	b.n	800338a <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x492>
            EI_DSP_MATRIX(peaks_matrix, fft_peaks, 2);
 8003386:	bf00      	nop
 8003388:	2501      	movs	r5, #1
 800338a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd fefe 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003394:	2d01      	cmp	r5, #1
 8003396:	d001      	beq.n	800339c <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4a4>
 8003398:	2500      	movs	r5, #0
 800339a:	e001      	b.n	80033a0 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4a8>
            EI_DSP_MATRIX(fft_matrix, 1, fft_length / 2 + 1);
 800339c:	bf00      	nop
 800339e:	2501      	movs	r5, #1
 80033a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd fef3 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80033aa:	2d01      	cmp	r5, #1
 80033ac:	d107      	bne.n	80033be <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x4c6>
            EI_DSP_MATRIX_B(axis_matrix, 1, input_matrix->cols, input_matrix->buffer + (row * input_matrix->cols));
 80033ae:	bf00      	nop
        for (size_t row = 0; row < input_matrix->rows; row++) {
 80033b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033b4:	3301      	adds	r3, #1
 80033b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ba:	e65c      	b.n	8003076 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_+0x17e>
            }
        }

        return EIDSP_OK;
 80033bc:	2400      	movs	r4, #0
        EI_DSP_MATRIX(peaks_matrix, axes, fft_peaks * 2);
 80033be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd fee4 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(rms_matrix, axes, 1);
 80033c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fedf 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, axes, 1);
 80033d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fd feda 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80033dc:	4623      	mov	r3, r4
    }
 80033de:	4618      	mov	r0, r3
 80033e0:	37c8      	adds	r7, #200	; 0xc8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bdb0      	pop	{r4, r5, r7, pc}
 80033e6:	bf00      	nop

080033e8 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>:
     * Calculate the buffer size for Spectral Analysis
     * @param rms: Whether to calculate the RMS as part of the features
     * @param peaks_count: Number of FFT peaks
     * @param spectral_edges_count: Number of spectral edges
     */
    static size_t calculate_spectral_buffer_size(
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	73fb      	strb	r3, [r7, #15]
        bool rms, size_t peaks_count, size_t spectral_edges_count)
    {
        size_t count = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
        if (rms) count++;
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x1e>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3301      	adds	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
        count += (peaks_count * 2);
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4413      	add	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
        if (spectral_edges_count > 0) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d004      	beq.n	8003420 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj+0x38>
            count += (spectral_edges_count - 1);
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	4413      	add	r3, r2
 800341c:	3b01      	subs	r3, #1
 800341e:	617b      	str	r3, [r7, #20]
        }
        return count;
 8003420:	697b      	ldr	r3, [r7, #20]
    }
 8003422:	4618      	mov	r0, r3
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
	...

08003430 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
float ei_dsp_image_buffer[EI_DSP_IMAGE_BUFFER_STATIC_SIZE];
#endif

__attribute__((unused)) int extract_spectral_analysis_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8003430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003432:	b0c1      	sub	sp, #260	; 0x104
 8003434:	af04      	add	r7, sp, #16
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_spectral_analysis_t config = *((ei_dsp_config_spectral_analysis_t*)config_ptr);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8003446:	461d      	mov	r5, r3
 8003448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800344a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800344c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800344e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003450:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003454:	e884 0003 	stmia.w	r4, {r0, r1}

    int ret;

    const float sampling_freq = frequency;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    // input matrix from the raw signal
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003466:	fbb3 f1f2 	udiv	r1, r3, r2
 800346a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800346e:	461a      	mov	r2, r3
 8003470:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 8003474:	2300      	movs	r3, #0
 8003476:	f7fd fe60 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
    if (!input_matrix.buffer) {
 800347a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x56>
        EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003482:	4c99      	ldr	r4, [pc, #612]	; (80036e8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2b8>)
 8003484:	e125      	b.n	80036d2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a2>
    }

    signal->get_data(0, signal->total_length, input_matrix.buffer);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003490:	2100      	movs	r1, #0
 8003492:	f001 fd11 	bl	8004eb8 <_ZNKSt8functionIFijjPfEEclEjjS0_>

    // scale the signal
    ret = numpy::scale(&input_matrix, config.scale_axes);
 8003496:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800349a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800349e:	eeb0 0a67 	vmov.f32	s0, s15
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd ff6e 	bl	8001384 <_ZN2ei5numpy5scaleEPNS_9ei_matrixEf>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (ret != EIDSP_OK) {
 80034ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x98>
        ei_printf("ERR: Failed to scale signal (%d)\n", ret);
 80034b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034ba:	4619      	mov	r1, r3
 80034bc:	488b      	ldr	r0, [pc, #556]	; (80036ec <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2bc>)
 80034be:	f001 fb0f 	bl	8004ae0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80034c2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80034c6:	e104      	b.n	80036d2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a2>
    }

    // transpose the matrix so we have one row per axis (nifty!)
    ret = numpy::transpose(&input_matrix);
 80034c8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fd fed8 	bl	8001282 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (ret != EIDSP_OK) {
 80034d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc2>
        ei_printf("ERR: Failed to transpose matrix (%d)\n", ret);
 80034e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034e4:	4619      	mov	r1, r3
 80034e6:	4882      	ldr	r0, [pc, #520]	; (80036f0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c0>)
 80034e8:	f001 fafa 	bl	8004ae0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80034ec:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80034f0:	e0ef      	b.n	80036d2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2a2>
    }

    // the spectral edges that we want to calculate
    matrix_t edges_matrix_in(64, 1);
 80034f2:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80034f6:	2300      	movs	r3, #0
 80034f8:	2201      	movs	r2, #1
 80034fa:	2140      	movs	r1, #64	; 0x40
 80034fc:	f7fd fe1d 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
    size_t edge_matrix_ix = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    char spectral_str[128] = { 0 };
 8003506:	f107 0310 	add.w	r3, r7, #16
 800350a:	2280      	movs	r2, #128	; 0x80
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f015 ff08 	bl	8019324 <memset>
    if (strlen(config.spectral_power_edges) > sizeof(spectral_str) - 1) {
 8003514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003518:	4618      	mov	r0, r3
 800351a:	f7fc fe6b 	bl	80001f4 <strlen>
 800351e:	4603      	mov	r3, r0
 8003520:	2b7f      	cmp	r3, #127	; 0x7f
 8003522:	d901      	bls.n	8003528 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xf8>
        EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 8003524:	4c73      	ldr	r4, [pc, #460]	; (80036f4 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c4>)
 8003526:	e0cf      	b.n	80036c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x298>
    }
    memcpy(spectral_str, config.spectral_power_edges, strlen(config.spectral_power_edges));
 8003528:	f8d7 40d8 	ldr.w	r4, [r7, #216]	; 0xd8
 800352c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003530:	4618      	mov	r0, r3
 8003532:	f7fc fe5f 	bl	80001f4 <strlen>
 8003536:	4602      	mov	r2, r0
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	4621      	mov	r1, r4
 800353e:	4618      	mov	r0, r3
 8003540:	f015 fecc 	bl	80192dc <memcpy>

    // convert spectral_power_edges (string) into float array
    char *spectral_ptr = spectral_str;
 8003544:	f107 0310 	add.w	r3, r7, #16
 8003548:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    while (spectral_ptr != NULL) {
 800354c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003550:	2b00      	cmp	r3, #0
 8003552:	d034      	beq.n	80035be <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x18e>
        edges_matrix_in.buffer[edge_matrix_ix++] = atof(spectral_ptr);
 8003554:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003558:	f015 fdf8 	bl	801914c <atof>
 800355c:	ec56 5b10 	vmov	r5, r6, d0
 8003560:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003564:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003568:	1c59      	adds	r1, r3, #1
 800356a:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	18d4      	adds	r4, r2, r3
 8003572:	4628      	mov	r0, r5
 8003574:	4631      	mov	r1, r6
 8003576:	f7fd fb4f 	bl	8000c18 <__aeabi_d2f>
 800357a:	4603      	mov	r3, r0
 800357c:	6023      	str	r3, [r4, #0]

        // find next (spectral) delimiter (or '\0' character)
        while((*spectral_ptr != ',')) {
 800357e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b2c      	cmp	r3, #44	; 0x2c
 8003586:	d00b      	beq.n	80035a0 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x170>
            spectral_ptr++;
 8003588:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800358c:	3301      	adds	r3, #1
 800358e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
            if (*spectral_ptr == '\0') break;
 8003592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d000      	beq.n	800359e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16e>
        while((*spectral_ptr != ',')) {
 800359c:	e7ef      	b.n	800357e <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x14e>
            if (*spectral_ptr == '\0') break;
 800359e:	bf00      	nop
        }

        if (*spectral_ptr == '\0') {
 80035a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d103      	bne.n	80035b2 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x182>
            spectral_ptr = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035b0:	e7cc      	b.n	800354c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
        }
        else  {
            spectral_ptr++;
 80035b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035b6:	3301      	adds	r3, #1
 80035b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    while (spectral_ptr != NULL) {
 80035bc:	e7c6      	b.n	800354c <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x11c>
        }
    }
    edges_matrix_in.rows = edge_matrix_ix;
 80035be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    // calculate how much room we need for the output matrix
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
        true, config.spectral_peaks_count, edges_matrix_in.rows
 80035c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
    size_t output_matrix_cols = spectral::feature::calculate_spectral_buffer_size(
 80035ca:	4619      	mov	r1, r3
        true, config.spectral_peaks_count, edges_matrix_in.rows
 80035cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    );
 80035d0:	461a      	mov	r2, r3
 80035d2:	2001      	movs	r0, #1
 80035d4:	f7ff ff08 	bl	80033e8 <_ZN2ei8spectral7feature30calculate_spectral_buffer_sizeEbjj>
 80035d8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    // ei_printf("output_matrix_size %hux%zu\n", input_matrix.rows, output_matrix_cols);
    if (output_matrix->cols * output_matrix->rows != static_cast<uint32_t>(output_matrix_cols * config.axes)) {
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	6852      	ldr	r2, [r2, #4]
 80035e4:	fb02 f203 	mul.w	r2, r2, r3
 80035e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035ec:	4619      	mov	r1, r3
 80035ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f2:	fb03 f301 	mul.w	r3, r3, r1
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d001      	beq.n	80035fe <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ce>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035fa:	4c3f      	ldr	r4, [pc, #252]	; (80036f8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2c8>)
 80035fc:	e064      	b.n	80036c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x298>
    }

    output_matrix->cols = output_matrix_cols;
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003604:	609a      	str	r2, [r3, #8]
    output_matrix->rows = config.axes;
 8003606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800360a:	461a      	mov	r2, r3
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	605a      	str	r2, [r3, #4]

    spectral::filter_t filter_type;
    if (strcmp(config.filter_type, "low") == 0) {
 8003610:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003614:	4939      	ldr	r1, [pc, #228]	; (80036fc <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2cc>)
 8003616:	4618      	mov	r0, r3
 8003618:	f7fc fde2 	bl	80001e0 <strcmp>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fa>
        filter_type = spectral::filter_lowpass;
 8003622:	2301      	movs	r3, #1
 8003624:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003628:	e00f      	b.n	800364a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x21a>
    }
    else if (strcmp(config.filter_type, "high") == 0) {
 800362a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800362e:	4934      	ldr	r1, [pc, #208]	; (8003700 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d0>)
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc fdd5 	bl	80001e0 <strcmp>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d103      	bne.n	8003644 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x214>
        filter_type = spectral::filter_highpass;
 800363c:	2302      	movs	r3, #2
 800363e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8003642:	e002      	b.n	800364a <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x21a>
    }
    else {
        filter_type = spectral::filter_none;
 8003644:	2300      	movs	r3, #0
 8003646:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    }

    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 800364a:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
        sampling_freq, filter_type, config.filter_cutoff, config.filter_order,
 800364e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 8003652:	b2dd      	uxtb	r5, r3
        config.fft_length, config.spectral_peaks_count, config.spectral_peaks_threshold, &edges_matrix_in);
 8003654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 8003658:	b29b      	uxth	r3, r3
        config.fft_length, config.spectral_peaks_count, config.spectral_peaks_threshold, &edges_matrix_in);
 800365a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
    ret = spectral::feature::spectral_analysis(output_matrix, &input_matrix,
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8003664:	f897 40e7 	ldrb.w	r4, [r7, #231]	; 0xe7
 8003668:	f107 00a0 	add.w	r0, r7, #160	; 0xa0
 800366c:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8003670:	9102      	str	r1, [sp, #8]
 8003672:	9201      	str	r2, [sp, #4]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	eeb0 1a47 	vmov.f32	s2, s14
 800367a:	462b      	mov	r3, r5
 800367c:	eef0 0a67 	vmov.f32	s1, s15
 8003680:	4622      	mov	r2, r4
 8003682:	ed97 0a38 	vldr	s0, [r7, #224]	; 0xe0
 8003686:	4601      	mov	r1, r0
 8003688:	68b8      	ldr	r0, [r7, #8]
 800368a:	f7ff fc35 	bl	8002ef8 <_ZN2ei8spectral7feature17spectral_analysisEPNS_9ei_matrixES3_fNS0_8filter_tEfhthfS3_>
 800368e:	4603      	mov	r3, r0
 8003690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (ret != EIDSP_OK) {
 8003694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x27e>
        ei_printf("ERR: Failed to calculate spectral features (%d)\n", ret);
 800369c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036a0:	4619      	mov	r1, r3
 80036a2:	4818      	ldr	r0, [pc, #96]	; (8003704 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x2d4>)
 80036a4:	f001 fa1c 	bl	8004ae0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 80036a8:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80036ac:	e00c      	b.n	80036c8 <_ZN12_GLOBAL__N_134extract_spectral_analysis_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x298>
    }

    // flatten again
    output_matrix->cols = config.axes * output_matrix_cols;
 80036ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036b2:	461a      	mov	r2, r3
 80036b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036b8:	fb03 f202 	mul.w	r2, r3, r2
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2201      	movs	r2, #1
 80036c4:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80036c6:	2400      	movs	r4, #0
    matrix_t edges_matrix_in(64, 1);
 80036c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fd fd5f 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
    matrix_t input_matrix(signal->total_length / config.axes, config.axes);
 80036d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fd5a 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80036dc:	4623      	mov	r3, r4
}
 80036de:	4618      	mov	r0, r3
 80036e0:	37f4      	adds	r7, #244	; 0xf4
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036e6:	bf00      	nop
 80036e8:	fffffc16 	.word	0xfffffc16
 80036ec:	0801c19c 	.word	0x0801c19c
 80036f0:	0801c1c0 	.word	0x0801c1c0
 80036f4:	fffffc10 	.word	0xfffffc10
 80036f8:	fffffc14 	.word	0xfffffc14
 80036fc:	0801c180 	.word	0x0801c180
 8003700:	0801c1e8 	.word	0x0801c1e8
 8003704:	0801c1f0 	.word	0x0801c1f0

08003708 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fd fced 	bl	80010f2 <_ZNSt14_Function_baseD1Ev>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4618      	mov	r0, r3
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 8003722:	b580      	push	{r7, lr}
 8003724:	b082      	sub	sp, #8
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fcd0 	bl	80050d2 <_ZNSt8functionIFijjPfEEC1Ev>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4618      	mov	r0, r3
 8003736:	3708      	adds	r7, #8
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <_ZN2ei11ei_signal_tD1Ev>:
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff ffde 	bl	8003708 <_ZNSt8functionIFijjPfEED1Ev>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4618      	mov	r0, r3
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf>:
    output_matrix->rows = 1;

    return EIDSP_OK;
}

__attribute__((unused)) int extract_image_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr, const float frequency) {
 8003758:	b5b0      	push	{r4, r5, r7, lr}
 800375a:	b098      	sub	sp, #96	; 0x60
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800376e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003770:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	4972      	ldr	r1, [pc, #456]	; (8003940 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1e8>)
 8003778:	4618      	mov	r0, r3
 800377a:	f7fc fd31 	bl	80001e0 <strcmp>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d101      	bne.n	8003788 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x30>
 8003784:	2301      	movs	r3, #1
 8003786:	e000      	b.n	800378a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x32>
 8003788:	2303      	movs	r3, #3
 800378a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	6892      	ldr	r2, [r2, #8]
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x62>
        ei_printf("out_matrix = %hu items\n", output_matrix->rows, output_matrix->cols);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	461a      	mov	r2, r3
 80037a8:	4866      	ldr	r0, [pc, #408]	; (8003944 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1ec>)
 80037aa:	f001 f999 	bl	8004ae0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hu items\n", static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 80037ae:	2100      	movs	r1, #0
 80037b0:	4865      	ldr	r0, [pc, #404]	; (8003948 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f0>)
 80037b2:	f001 f995 	bl	8004ae0 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80037b6:	4c65      	ldr	r4, [pc, #404]	; (800394c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f4>)
 80037b8:	e0bd      	b.n	8003936 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1de>
    }

    size_t output_ix = 0;
 80037ba:	2300      	movs	r3, #0
 80037bc:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80037be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037c2:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80037ca:	2300      	movs	r3, #0
 80037cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80037d4:	429a      	cmp	r2, r3
 80037d6:	f080 80ad 	bcs.w	8003934 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1dc>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e0:	d803      	bhi.n	80037ea <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x92>
 80037e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	e001      	b.n	80037ee <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x96>
 80037ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ee:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 80037f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f2:	461a      	mov	r2, r3
 80037f4:	f107 0014 	add.w	r0, r7, #20
 80037f8:	2300      	movs	r3, #0
 80037fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80037fc:	f7fd fc9d 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d102      	bne.n	800380c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xb4>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003806:	4c52      	ldr	r4, [pc, #328]	; (8003950 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1f8>)
 8003808:	2500      	movs	r5, #0
 800380a:	e086      	b.n	800391a <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1c2>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003812:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003814:	f001 fb50 	bl	8004eb8 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8003818:	2300      	movs	r3, #0
 800381a:	657b      	str	r3, [r7, #84]	; 0x54
 800381c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800381e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003820:	429a      	cmp	r2, r3
 8003822:	d275      	bcs.n	8003910 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b8>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	4413      	add	r3, r2
 800382c:	edd3 7a00 	vldr	s15, [r3]
 8003830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003834:	ee17 3a90 	vmov	r3, s15
 8003838:	647b      	str	r3, [r7, #68]	; 0x44

            // rgb to 0..1
            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 800383a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	b2db      	uxtb	r3, r3
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003848:	eddf 6a42 	vldr	s13, [pc, #264]	; 8003954 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
 800384c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003850:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8003854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003856:	0a1b      	lsrs	r3, r3, #8
 8003858:	b2db      	uxtb	r3, r3
 800385a:	ee07 3a90 	vmov	s15, r3
 800385e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003862:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8003954 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
 8003866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800386a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 800386e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003870:	b2db      	uxtb	r3, r3
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800387a:	eddf 6a36 	vldr	s13, [pc, #216]	; 8003954 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1fc>
 800387e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003882:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8003886:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800388a:	2b03      	cmp	r3, #3
 800388c:	d11b      	bne.n	80038c6 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x16e>
                output_matrix->buffer[output_ix++] = r;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003894:	1c59      	adds	r1, r3, #1
 8003896:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800389e:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = g;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	65f9      	str	r1, [r7, #92]	; 0x5c
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038b0:	601a      	str	r2, [r3, #0]
                output_matrix->buffer[output_ix++] = b;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038b8:	1c59      	adds	r1, r3, #1
 80038ba:	65f9      	str	r1, [r7, #92]	; 0x5c
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	e020      	b.n	8003908 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1b0>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 80038c6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80038ca:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003958 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x200>
 80038ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038d2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80038d6:	eddf 6a21 	vldr	s13, [pc, #132]	; 800395c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x204>
 80038da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038e2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80038e6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8003960 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x208>
 80038ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = v;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038fc:	1c59      	adds	r1, r3, #1
 80038fe:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003906:	601a      	str	r2, [r3, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8003908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390a:	3301      	adds	r3, #1
 800390c:	657b      	str	r3, [r7, #84]	; 0x54
 800390e:	e785      	b.n	800381c <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0xc4>
            }
        }

        bytes_left -= elements_to_read;
 8003910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
 8003918:	2501      	movs	r5, #1
 800391a:	f107 0314 	add.w	r3, r7, #20
 800391e:	4618      	mov	r0, r3
 8003920:	f7fd fc36 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003924:	2d01      	cmp	r5, #1
 8003926:	d106      	bne.n	8003936 <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x1de>
        matrix_t input_matrix(elements_to_read, config.axes);
 8003928:	bf00      	nop
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 800392a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800392c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003930:	65bb      	str	r3, [r7, #88]	; 0x58
 8003932:	e74c      	b.n	80037ce <_ZN12_GLOBAL__N_122extract_image_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPvf+0x76>
    }

    return EIDSP_OK;
 8003934:	2400      	movs	r4, #0
 8003936:	4623      	mov	r3, r4
}
 8003938:	4618      	mov	r0, r3
 800393a:	3760      	adds	r7, #96	; 0x60
 800393c:	46bd      	mov	sp, r7
 800393e:	bdb0      	pop	{r4, r5, r7, pc}
 8003940:	0801c2c0 	.word	0x0801c2c0
 8003944:	0801c2cc 	.word	0x0801c2cc
 8003948:	0801c2e4 	.word	0x0801c2e4
 800394c:	fffffc14 	.word	0xfffffc14
 8003950:	fffffc16 	.word	0xfffffc16
 8003954:	437f0000 	.word	0x437f0000
 8003958:	3e991687 	.word	0x3e991687
 800395c:	3f1645a2 	.word	0x3f1645a2
 8003960:	3de978d5 	.word	0x3de978d5
 8003964:	00000000 	.word	0x00000000

08003968 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>:

#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1

__attribute__((unused)) int extract_image_features_quantized(signal_t *signal, matrix_i8_t *output_matrix, void *config_ptr, const float frequency) {
 8003968:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800396c:	b098      	sub	sp, #96	; 0x60
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607a      	str	r2, [r7, #4]
 8003976:	ed87 0a00 	vstr	s0, [r7]
    ei_dsp_config_image_t config = *((ei_dsp_config_image_t*)config_ptr);
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003980:	ca07      	ldmia	r2, {r0, r1, r2}
 8003982:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    int16_t channel_count = strcmp(config.channels, "Grayscale") == 0 ? 1 : 3;
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	49b7      	ldr	r1, [pc, #732]	; (8003c68 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x300>)
 800398a:	4618      	mov	r0, r3
 800398c:	f7fc fc28 	bl	80001e0 <strcmp>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x32>
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x34>
 800399a:	2303      	movs	r3, #3
 800399c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

    if (output_matrix->rows * output_matrix->cols != static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count)) {
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	fb02 f303 	mul.w	r3, r2, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x64>
        ei_printf("out_matrix = %hu items\n", output_matrix->rows, output_matrix->cols);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	6859      	ldr	r1, [r3, #4]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	461a      	mov	r2, r3
 80039ba:	48ac      	ldr	r0, [pc, #688]	; (8003c6c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x304>)
 80039bc:	f001 f890 	bl	8004ae0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hu items\n", static_cast<uint32_t>(EI_CLASSIFIER_INPUT_WIDTH * EI_CLASSIFIER_INPUT_HEIGHT * channel_count));
 80039c0:	2100      	movs	r1, #0
 80039c2:	48ab      	ldr	r0, [pc, #684]	; (8003c70 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x308>)
 80039c4:	f001 f88c 	bl	8004ae0 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80039c8:	4caa      	ldr	r4, [pc, #680]	; (8003c74 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x30c>)
 80039ca:	e142      	b.n	8003c52 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2ea>
    }

    size_t output_ix = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	65fb      	str	r3, [r7, #92]	; 0x5c

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
    const size_t page_size = EI_DSP_IMAGE_BUFFER_STATIC_SIZE;
#else
    const size_t page_size = 1024;
 80039d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039d4:	64fb      	str	r3, [r7, #76]	; 0x4c
#endif

    // buffered read from the signal
    size_t bytes_left = signal->total_length;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 80039dc:	2300      	movs	r3, #0
 80039de:	65bb      	str	r3, [r7, #88]	; 0x58
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039e6:	429a      	cmp	r2, r3
 80039e8:	f080 8132 	bcs.w	8003c50 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2e8>
        size_t elements_to_read = bytes_left > page_size ? page_size : bytes_left;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f2:	d803      	bhi.n	80039fc <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x94>
 80039f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	e001      	b.n	8003a00 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x98>
 80039fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a00:	64bb      	str	r3, [r7, #72]	; 0x48

#if defined(EI_DSP_IMAGE_BUFFER_STATIC_SIZE)
        matrix_t input_matrix(elements_to_read, config.axes, ei_dsp_image_buffer);
#else
        matrix_t input_matrix(elements_to_read, config.axes);
 8003a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a04:	461a      	mov	r2, r3
 8003a06:	f107 0014 	add.w	r0, r7, #20
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003a0e:	f7fd fb94 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
#endif
        if (!input_matrix.buffer) {
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d102      	bne.n	8003a1e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xb6>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003a18:	4c97      	ldr	r4, [pc, #604]	; (8003c78 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x310>)
 8003a1a:	2500      	movs	r5, #0
 8003a1c:	e10b      	b.n	8003c36 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2ce>
        }
        signal->get_data(ix, elements_to_read, input_matrix.buffer);
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a26:	f001 fa47 	bl	8004eb8 <_ZNKSt8functionIFijjPfEEclEjjS0_>

        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003a2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a32:	429a      	cmp	r2, r3
 8003a34:	f080 80fa 	bcs.w	8003c2c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2c4>
            uint32_t pixel = static_cast<uint32_t>(input_matrix.buffer[jx]);
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	edd3 7a00 	vldr	s15, [r3]
 8003a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a48:	ee17 3a90 	vmov	r3, s15
 8003a4c:	647b      	str	r3, [r7, #68]	; 0x44

            float r = static_cast<float>(pixel >> 16 & 0xff) / 255.0f;
 8003a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a50:	0c1b      	lsrs	r3, r3, #16
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	ee07 3a90 	vmov	s15, r3
 8003a58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a5c:	eddf 6a87 	vldr	s13, [pc, #540]	; 8003c7c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x314>
 8003a60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a64:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            float g = static_cast<float>(pixel >> 8 & 0xff) / 255.0f;
 8003a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6a:	0a1b      	lsrs	r3, r3, #8
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a76:	eddf 6a81 	vldr	s13, [pc, #516]	; 8003c7c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x314>
 8003a7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a7e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            float b = static_cast<float>(pixel & 0xff) / 255.0f;
 8003a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a8e:	eddf 6a7b 	vldr	s13, [pc, #492]	; 8003c7c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x314>
 8003a92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a96:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

            if (channel_count == 3) {
 8003a9a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d17e      	bne.n	8003ba0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x238>
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(r / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003aa2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003aa4:	f7fc fd68 	bl	8000578 <__aeabi_f2d>
 8003aa8:	a36d      	add	r3, pc, #436	; (adr r3, 8003c60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2f8>)
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f7fc fee5 	bl	800087c <__aeabi_ddiv>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	ec43 2b17 	vmov	d7, r2, r3
 8003aba:	eeb0 0a47 	vmov.f32	s0, s14
 8003abe:	eef0 0a67 	vmov.f32	s1, s15
 8003ac2:	f012 fd97 	bl	80165f4 <round>
 8003ac6:	ec51 0b10 	vmov	r0, r1, d0
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	4b6c      	ldr	r3, [pc, #432]	; (8003c80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x318>)
 8003ad0:	f7fc fbf2 	bl	80002b8 <__aeabi_dsub>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4690      	mov	r8, r2
 8003ada:	4699      	mov	r9, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003ae6:	18d5      	adds	r5, r2, r3
 8003ae8:	4640      	mov	r0, r8
 8003aea:	4649      	mov	r1, r9
 8003aec:	f7fd f84c 	bl	8000b88 <__aeabi_d2iz>
 8003af0:	4603      	mov	r3, r0
 8003af2:	b25b      	sxtb	r3, r3
 8003af4:	702b      	strb	r3, [r5, #0]
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(g / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003af6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003af8:	f7fc fd3e 	bl	8000578 <__aeabi_f2d>
 8003afc:	a358      	add	r3, pc, #352	; (adr r3, 8003c60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2f8>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc febb 	bl	800087c <__aeabi_ddiv>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	ec43 2b17 	vmov	d7, r2, r3
 8003b0e:	eeb0 0a47 	vmov.f32	s0, s14
 8003b12:	eef0 0a67 	vmov.f32	s1, s15
 8003b16:	f012 fd6d 	bl	80165f4 <round>
 8003b1a:	ec51 0b10 	vmov	r0, r1, d0
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	4b57      	ldr	r3, [pc, #348]	; (8003c80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x318>)
 8003b24:	f7fc fbc8 	bl	80002b8 <__aeabi_dsub>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4690      	mov	r8, r2
 8003b2e:	4699      	mov	r9, r3
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b36:	1c59      	adds	r1, r3, #1
 8003b38:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003b3a:	18d5      	adds	r5, r2, r3
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	4649      	mov	r1, r9
 8003b40:	f7fd f822 	bl	8000b88 <__aeabi_d2iz>
 8003b44:	4603      	mov	r3, r0
 8003b46:	b25b      	sxtb	r3, r3
 8003b48:	702b      	strb	r3, [r5, #0]
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(b / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003b4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b4c:	f7fc fd14 	bl	8000578 <__aeabi_f2d>
 8003b50:	a343      	add	r3, pc, #268	; (adr r3, 8003c60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2f8>)
 8003b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b56:	f7fc fe91 	bl	800087c <__aeabi_ddiv>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	ec43 2b17 	vmov	d7, r2, r3
 8003b62:	eeb0 0a47 	vmov.f32	s0, s14
 8003b66:	eef0 0a67 	vmov.f32	s1, s15
 8003b6a:	f012 fd43 	bl	80165f4 <round>
 8003b6e:	ec51 0b10 	vmov	r0, r1, d0
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	4b42      	ldr	r3, [pc, #264]	; (8003c80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x318>)
 8003b78:	f7fc fb9e 	bl	80002b8 <__aeabi_dsub>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4690      	mov	r8, r2
 8003b82:	4699      	mov	r9, r3
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b8a:	1c59      	adds	r1, r3, #1
 8003b8c:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003b8e:	18d5      	adds	r5, r2, r3
 8003b90:	4640      	mov	r0, r8
 8003b92:	4649      	mov	r1, r9
 8003b94:	f7fc fff8 	bl	8000b88 <__aeabi_d2iz>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	b25b      	sxtb	r3, r3
 8003b9c:	702b      	strb	r3, [r5, #0]
 8003b9e:	e041      	b.n	8003c24 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2bc>
            }
            else {
                // ITU-R 601-2 luma transform
                // see: https://pillow.readthedocs.io/en/stable/reference/Image.html#PIL.Image.Image.convert
                float v = (0.299f * r) + (0.587f * g) + (0.114f * b);
 8003ba0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003ba4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003c84 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x31c>
 8003ba8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003bb0:	eddf 6a35 	vldr	s13, [pc, #212]	; 8003c88 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x320>
 8003bb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bbc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003bc0:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003c8c <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x324>
 8003bc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bcc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
                output_matrix->buffer[output_ix++] = static_cast<int8_t>(round(v / EI_CLASSIFIER_TFLITE_INPUT_SCALE) + EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8003bd0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003bd2:	f7fc fcd1 	bl	8000578 <__aeabi_f2d>
 8003bd6:	a322      	add	r3, pc, #136	; (adr r3, 8003c60 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2f8>)
 8003bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bdc:	f7fc fe4e 	bl	800087c <__aeabi_ddiv>
 8003be0:	4602      	mov	r2, r0
 8003be2:	460b      	mov	r3, r1
 8003be4:	ec43 2b17 	vmov	d7, r2, r3
 8003be8:	eeb0 0a47 	vmov.f32	s0, s14
 8003bec:	eef0 0a67 	vmov.f32	s1, s15
 8003bf0:	f012 fd00 	bl	80165f4 <round>
 8003bf4:	ec51 0b10 	vmov	r0, r1, d0
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x318>)
 8003bfe:	f7fc fb5b 	bl	80002b8 <__aeabi_dsub>
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4690      	mov	r8, r2
 8003c08:	4699      	mov	r9, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c10:	1c59      	adds	r1, r3, #1
 8003c12:	65f9      	str	r1, [r7, #92]	; 0x5c
 8003c14:	18d5      	adds	r5, r2, r3
 8003c16:	4640      	mov	r0, r8
 8003c18:	4649      	mov	r1, r9
 8003c1a:	f7fc ffb5 	bl	8000b88 <__aeabi_d2iz>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	b25b      	sxtb	r3, r3
 8003c22:	702b      	strb	r3, [r5, #0]
        for (size_t jx = 0; jx < elements_to_read; jx++) {
 8003c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c26:	3301      	adds	r3, #1
 8003c28:	657b      	str	r3, [r7, #84]	; 0x54
 8003c2a:	e700      	b.n	8003a2e <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0xc6>
            }
        }

        bytes_left -= elements_to_read;
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
 8003c34:	2501      	movs	r5, #1
 8003c36:	f107 0314 	add.w	r3, r7, #20
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd faa8 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8003c40:	2d01      	cmp	r5, #1
 8003c42:	d106      	bne.n	8003c52 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x2ea>
        matrix_t input_matrix(elements_to_read, config.axes);
 8003c44:	bf00      	nop
    for (size_t ix = 0; ix < signal->total_length; ix += page_size) {
 8003c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c4e:	e6c7      	b.n	80039e0 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf+0x78>
    }

    return EIDSP_OK;
 8003c50:	2400      	movs	r4, #0
 8003c52:	4623      	mov	r3, r4
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3760      	adds	r7, #96	; 0x60
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c5e:	bf00      	nop
 8003c60:	a0000000 	.word	0xa0000000
 8003c64:	3fbd90e6 	.word	0x3fbd90e6
 8003c68:	0801c2c0 	.word	0x0801c2c0
 8003c6c:	0801c2cc 	.word	0x0801c2cc
 8003c70:	0801c2e4 	.word	0x0801c2e4
 8003c74:	fffffc14 	.word	0xfffffc14
 8003c78:	fffffc16 	.word	0xfffffc16
 8003c7c:	437f0000 	.word	0x437f0000
 8003c80:	40600000 	.word	0x40600000
 8003c84:	3e991687 	.word	0x3e991687
 8003c88:	3f1645a2 	.word	0x3f1645a2
 8003c8c:	3de978d5 	.word	0x3de978d5

08003c90 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>:

using namespace ei;

class SignalWithAxes {
public:
    SignalWithAxes(signal_t *original_signal, uint8_t *axes, size_t axes_count):
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
 8003c9c:	603b      	str	r3, [r7, #0]
        _original_signal(original_signal), _axes(axes), _axes_count(axes_count)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	330c      	adds	r3, #12
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff fd34 	bl	8003722 <_ZN2ei11ei_signal_tC1Ev>
    {

    }
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>:

        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
#ifdef __MBED__
        wrapped_signal.get_data = mbed::callback(this, &SignalWithAxes::get_data);
#else
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6818      	ldr	r0, [r3, #0]
            return this->get_data(offset, length, out_ptr);
        };
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68b9      	ldr	r1, [r7, #8]
 8003cdc:	f000 f832 	bl	8003d44 <_ZN14SignalWithAxes8get_dataEjjPf>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <_ZN14SignalWithAxes10get_signalEv>:
    signal_t * get_signal() {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
        if (this->_axes_count == EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d102      	bne.n	8003d02 <_ZN14SignalWithAxes10get_signalEv+0x16>
            return this->_original_signal;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	e019      	b.n	8003d36 <_ZN14SignalWithAxes10get_signalEv+0x4a>
        wrapped_signal.total_length = _original_signal->total_length / EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME * _axes_count;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	4a0d      	ldr	r2, [pc, #52]	; (8003d40 <_ZN14SignalWithAxes10get_signalEv+0x54>)
 8003d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0e:	085b      	lsrs	r3, r3, #1
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	fb02 f203 	mul.w	r2, r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	61da      	str	r2, [r3, #28]
        };
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f103 020c 	add.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
        wrapped_signal.get_data = [this](size_t offset, size_t length, float *out_ptr) {
 8003d26:	f107 030c 	add.w	r3, r7, #12
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f001 fa13 	bl	8005158 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeENSt9result_ofIFRSB_jjS0_EE4typeEEE5valueERS2_E4typeEOS9_>
#endif
        return &wrapped_signal;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	330c      	adds	r3, #12
    }
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	aaaaaaab 	.word	0xaaaaaaab

08003d44 <_ZN14SignalWithAxes8get_dataEjjPf>:

    int get_data(size_t offset, size_t length, float *out_ptr) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	; 0x28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
        size_t length_on_original_signal = length / _axes_count * EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]

        size_t out_ptr_ix = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24

        for (size_t ix = 0; ix < length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8003d68:	2300      	movs	r3, #0
 8003d6a:	623b      	str	r3, [r7, #32]
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d228      	bcs.n	8003dc6 <_ZN14SignalWithAxes8get_dataEjjPf+0x82>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8003d74:	2300      	movs	r3, #0
 8003d76:	61fb      	str	r3, [r7, #28]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d21d      	bcs.n	8003dbe <_ZN14SignalWithAxes8get_dataEjjPf+0x7a>
                int r = _original_signal->get_data(ix + _axes[axis_ix], 1, &out_ptr[out_ptr_ix++]);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4618      	mov	r0, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4413      	add	r3, r2
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	18d1      	adds	r1, r2, r3
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	627a      	str	r2, [r7, #36]	; 0x24
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	4413      	add	r3, r2
 8003da4:	2201      	movs	r2, #1
 8003da6:	f001 f887 	bl	8004eb8 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8003daa:	6178      	str	r0, [r7, #20]
                if (r != 0) {
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <_ZN14SignalWithAxes8get_dataEjjPf+0x72>
                    return r;
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	e008      	b.n	8003dc8 <_ZN14SignalWithAxes8get_dataEjjPf+0x84>
            for (size_t axis_ix = 0; axis_ix < this->_axes_count; axis_ix++) {
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3301      	adds	r3, #1
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	e7dc      	b.n	8003d78 <_ZN14SignalWithAxes8get_dataEjjPf+0x34>
        for (size_t ix = 0; ix < length_on_original_signal; ix += EI_CLASSIFIER_RAW_SAMPLES_PER_FRAME) {
 8003dbe:	6a3b      	ldr	r3, [r7, #32]
 8003dc0:	3303      	adds	r3, #3
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	e7d2      	b.n	8003d6c <_ZN14SignalWithAxes8get_dataEjjPf+0x28>
                }
            }
        }

        return 0;
 8003dc6:	2300      	movs	r3, #0
    }
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3728      	adds	r7, #40	; 0x28
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	4a04      	ldr	r2, [pc, #16]	; (8003dec <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	080204b0 	.word	0x080204b0

08003df0 <_ZN6tflite13ErrorReporterD0Ev>:
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ffe9 	bl	8003dd0 <_ZN6tflite13ErrorReporterD1Ev>
 8003dfe:	2104      	movs	r1, #4
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f012 fac2 	bl	801638a <_ZdlPvj>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
  int endiantest = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 8003e1a:	1d3b      	adds	r3, r7, #4
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d005      	beq.n	8003e2e <_ZN11flatbuffers11EndianCheckEv+0x1e>
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 8003e24:	4a05      	ldr	r2, [pc, #20]	; (8003e3c <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 8003e26:	2149      	movs	r1, #73	; 0x49
 8003e28:	4805      	ldr	r0, [pc, #20]	; (8003e40 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 8003e2a:	f015 f96b 	bl	8019104 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 8003e2e:	bf00      	nop
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	0801c318 	.word	0x0801c318
 8003e3c:	080205a8 	.word	0x080205a8
 8003e40:	0801c35c 	.word	0x0801c35c

08003e44 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 8003e4c:	687c      	ldr	r4, [r7, #4]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 f9db 	bl	800520c <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8003e56:	4603      	mov	r3, r0
 8003e58:	425b      	negs	r3, r3
 8003e5a:	4423      	add	r3, r4
  }
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd90      	pop	{r4, r7, pc}

08003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f7ff ffe7 	bl	8003e44 <_ZNK11flatbuffers5Table9GetVTableEv>
 8003e76:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f001 f9ab 	bl	80051d4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003e82:	887a      	ldrh	r2, [r7, #2]
 8003e84:	897b      	ldrh	r3, [r7, #10]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d207      	bcs.n	8003e9a <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 8003e8a:	887b      	ldrh	r3, [r7, #2]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 f99f 	bl	80051d4 <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8003e96:	4603      	mov	r3, r0
 8003e98:	e000      	b.n	8003e9c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 8003e9a:	2300      	movs	r3, #0
  }
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <_ZNK6tflite5Model7versionEv>:
    VT_DESCRIPTION = 10,
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16
  };
  uint32_t version() const {
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	2104      	movs	r1, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f001 f9b8 	bl	8005228 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8003eb8:	4603      	mov	r3, r0
  }
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f001 f9ca 	bl	8005264 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8003ed0:	4603      	mov	r3, r0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3708      	adds	r7, #8
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <_ZN6tflite10OpResolverD1Ev>:
  virtual const TfLiteRegistration* FindOp(tflite::BuiltinOperator op,
                                           int version) const = 0;
  /// Finds the op registration of a custom operator by op name.
  virtual const TfLiteRegistration* FindOp(const char* op,
                                           int version) const = 0;
  virtual ~OpResolver() {}
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	4a04      	ldr	r2, [pc, #16]	; (8003ef8 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4618      	mov	r0, r3
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	08020498 	.word	0x08020498

08003efc <_ZN6tflite10OpResolverD0Ev>:
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ffe9 	bl	8003edc <_ZN6tflite10OpResolverD1Ev>
 8003f0a:	2104      	movs	r1, #4
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f012 fa3c 	bl	801638a <_ZdlPvj>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	460b      	mov	r3, r1
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	3310      	adds	r3, #16
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	7afa      	ldrb	r2, [r7, #11]
 8003f34:	4611      	mov	r1, r2
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	4798      	blx	r3
 8003f3a:	4603      	mov	r3, r0
  }
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	3314      	adds	r3, #20
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	4798      	blx	r3
 8003f5e:	4603      	mov	r3, r0
  }
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	4a05      	ldr	r2, [pc, #20]	; (8003f88 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff ffaf 	bl	8003edc <_ZN6tflite10OpResolverD1Ev>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	08020474 	.word	0x08020474

08003f8c <_ZN6tflite15MicroOpResolverD0Ev>:
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ffe7 	bl	8003f68 <_ZN6tflite15MicroOpResolverD1Ev>
 8003f9a:	2104      	movs	r1, #4
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f012 f9f4 	bl	801638a <_ZdlPvj>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3708      	adds	r7, #8
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	4a05      	ldr	r2, [pc, #20]	; (8003fcc <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff ff07 	bl	8003dd0 <_ZN6tflite13ErrorReporterD1Ev>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	0803e51c 	.word	0x0803e51c

08003fd0 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ffe7 	bl	8003fac <_ZN6tflite18MicroErrorReporterD1Ev>
 8003fde:	2104      	movs	r1, #4
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f012 f9d2 	bl	801638a <_ZdlPvj>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
__attribute__((unused)) void * ei_aligned_malloc(size_t align, size_t size)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	1e5a      	subs	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d005      	beq.n	8004016 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x26>
 800400a:	4b16      	ldr	r3, [pc, #88]	; (8004064 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x74>)
 800400c:	4a16      	ldr	r2, [pc, #88]	; (8004068 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x78>)
 800400e:	213c      	movs	r1, #60	; 0x3c
 8004010:	4816      	ldr	r0, [pc, #88]	; (800406c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x7c>)
 8004012:	f015 f877 	bl	8019104 <__assert_func>

	if(align && size)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d01e      	beq.n	800405a <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d01b      	beq.n	800405a <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	3301      	adds	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
		void * p = ei_malloc(size + hdr_size);
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f009 f9f0 	bl	800d414 <_Z9ei_mallocj>
 8004034:	60f8      	str	r0, [r7, #12]

		if(p)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00e      	beq.n	800405a <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6a>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4413      	add	r3, r2
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	425b      	negs	r3, r3
 8004048:	4013      	ands	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad2      	subs	r2, r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	3b02      	subs	r3, #2
 8004056:	b292      	uxth	r2, r2
 8004058:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800405a:	697b      	ldr	r3, [r7, #20]
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	0801c40c 	.word	0x0801c40c
 8004068:	080204bc 	.word	0x080204bc
 800406c:	0801c428 	.word	0x0801c428

08004070 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
__attribute__((unused)) void ei_aligned_free(void * ptr)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
	assert(ptr);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d105      	bne.n	800408a <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 800407e:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8004080:	4a0b      	ldr	r2, [pc, #44]	; (80040b0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8004082:	215f      	movs	r1, #95	; 0x5f
 8004084:	480b      	ldr	r0, [pc, #44]	; (80040b4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 8004086:	f015 f83d 	bl	8019104 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 8004090:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	89fb      	ldrh	r3, [r7, #14]
 8004096:	425b      	negs	r3, r3
 8004098:	4413      	add	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]
	ei_free(p);
 800409c:	68b8      	ldr	r0, [r7, #8]
 800409e:	f009 f9d3 	bl	800d448 <_Z7ei_freePv>
}
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	0801c4ac 	.word	0x0801c4ac
 80040b0:	080204f4 	.word	0x080204f4
 80040b4:	0801c428 	.word	0x0801c428

080040b8 <_ZN14SignalWithAxesD1Ev>:
class SignalWithAxes {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	330c      	adds	r3, #12
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fb39 	bl	800373c <_ZN2ei11ei_signal_tD1Ev>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4618      	mov	r0, r3
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>:
#else

/**
 * Fill the result structure from a quantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_i8(ei_impulse_result_t *result, int8_t *data, float zero_point, float scale, bool debug) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6178      	str	r0, [r7, #20]
 80040dc:	6139      	str	r1, [r7, #16]
 80040de:	ed87 0a03 	vstr	s0, [r7, #12]
 80040e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d837      	bhi.n	8004164 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x90>
        float value = static_cast<float>(data[ix] - zero_point) * scale;
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f993 3000 	ldrsb.w	r3, [r3]
 80040fe:	ee07 3a90 	vmov	s15, r3
 8004102:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004106:	edd7 7a03 	vldr	s15, [r7, #12]
 800410a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800410e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004116:	edc7 7a06 	vstr	s15, [r7, #24]

        if (debug) {
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00e      	beq.n	800413e <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x6a>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8004120:	4a12      	ldr	r2, [pc, #72]	; (800416c <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004128:	4619      	mov	r1, r3
 800412a:	4811      	ldr	r0, [pc, #68]	; (8004170 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x9c>)
 800412c:	f000 fcd8 	bl	8004ae0 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 8004130:	ed97 0a06 	vldr	s0, [r7, #24]
 8004134:	f009 f854 	bl	800d1e0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 8004138:	480e      	ldr	r0, [pc, #56]	; (8004174 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0xa0>)
 800413a:	f000 fcd1 	bl	8004ae0 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 800413e:	4a0b      	ldr	r2, [pc, #44]	; (800416c <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x98>)
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	4413      	add	r3, r2
 8004156:	3304      	adds	r3, #4
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 800415c:	69fb      	ldr	r3, [r7, #28]
 800415e:	3301      	adds	r3, #1
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	e7c4      	b.n	80040ee <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb+0x1a>
    }
}
 8004164:	bf00      	nop
 8004166:	3720      	adds	r7, #32
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000000 	.word	0x20000000
 8004170:	0801c58c 	.word	0x0801c58c
 8004174:	0801c56c 	.word	0x0801c56c

08004178 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>:

/**
 * Fill the result structure from an unquantized output tensor
 */
__attribute__((unused)) static void fill_result_struct_f32(ei_impulse_result_t *result, float *data, bool debug) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	4613      	mov	r3, r2
 8004184:	71fb      	strb	r3, [r7, #7]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d82a      	bhi.n	80041e6 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x6e>
        float value = data[ix];
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	4413      	add	r3, r2
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	613b      	str	r3, [r7, #16]

        if (debug) {
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00e      	beq.n	80041c0 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x48>
            ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 80041a2:	4a13      	ldr	r2, [pc, #76]	; (80041f0 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041aa:	4619      	mov	r1, r3
 80041ac:	4811      	ldr	r0, [pc, #68]	; (80041f4 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x7c>)
 80041ae:	f000 fc97 	bl	8004ae0 <_Z9ei_printfPKcz>
            ei_printf_float(value);
 80041b2:	ed97 0a04 	vldr	s0, [r7, #16]
 80041b6:	f009 f813 	bl	800d1e0 <_Z15ei_printf_floatf>
            ei_printf("\n");
 80041ba:	480f      	ldr	r0, [pc, #60]	; (80041f8 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x80>)
 80041bc:	f000 fc90 	bl	8004ae0 <_Z9ei_printfPKcz>
        }
        result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x78>)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
        result->classification[ix].value = value;
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	601a      	str	r2, [r3, #0]
    for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	3301      	adds	r3, #1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	e7d1      	b.n	800418a <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb+0x12>
    }
}
 80041e6:	bf00      	nop
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	20000000 	.word	0x20000000
 80041f4:	0801c58c 	.word	0x0801c58c
 80041f8:	0801c56c 	.word	0x0801c56c

080041fc <__tcf_2>:
    }
#endif

#if (EI_CLASSIFIER_COMPILED != 1)
#ifdef EI_TFLITE_RESOLVER
    EI_TFLITE_RESOLVER
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <__tcf_2+0xc>)
 8004202:	f002 feb5 	bl	8006f70 <_ZN6tflite22MicroMutableOpResolverILj2EED1Ev>
 8004206:	bd80      	pop	{r7, pc}
 8004208:	2000088c 	.word	0x2000088c

0800420c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh>:
    uint8_t** micro_tensor_arena) {
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b08d      	sub	sp, #52	; 0x34
 8004210:	af04      	add	r7, sp, #16
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
    uint8_t *tensor_arena = (uint8_t*)ei_aligned_malloc(16, EI_CLASSIFIER_TFLITE_ARENA_SIZE);
 800421a:	f640 6159 	movw	r1, #3673	; 0xe59
 800421e:	2010      	movs	r0, #16
 8004220:	f7ff fee6 	bl	8003ff0 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj>
 8004224:	61f8      	str	r0, [r7, #28]
    if (tensor_arena == NULL) {
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d107      	bne.n	800423c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x30>
        ei_printf("Failed to allocate TFLite arena (%d bytes)\n", EI_CLASSIFIER_TFLITE_ARENA_SIZE);
 800422c:	f640 6159 	movw	r1, #3673	; 0xe59
 8004230:	4875      	ldr	r0, [pc, #468]	; (8004408 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x1fc>)
 8004232:	f000 fc55 	bl	8004ae0 <_Z9ei_printfPKcz>
        return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8004236:	f06f 0305 	mvn.w	r3, #5
 800423a:	e0e1      	b.n	8004400 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x1f4>
    *micro_tensor_arena = tensor_arena;
 800423c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	601a      	str	r2, [r3, #0]
    *ctx_start_ms = ei_read_timer_ms();
 8004242:	f008 ffc1 	bl	800d1c8 <_Z16ei_read_timer_msv>
 8004246:	4603      	mov	r3, r0
 8004248:	460c      	mov	r4, r1
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	e9c2 3400 	strd	r3, r4, [r2]
    if (tflite_first_run) {
 8004250:	4b6e      	ldr	r3, [pc, #440]	; (800440c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x200>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d025      	beq.n	80042a4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x98>
        model = tflite::GetModel(trained_tflite);
 8004258:	486d      	ldr	r0, [pc, #436]	; (8004410 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x204>)
 800425a:	f7ff fe32 	bl	8003ec2 <_ZN6tflite8GetModelEPKv>
 800425e:	4602      	mov	r2, r0
 8004260:	4b6c      	ldr	r3, [pc, #432]	; (8004414 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x208>)
 8004262:	601a      	str	r2, [r3, #0]
        if (model->version() != TFLITE_SCHEMA_VERSION) {
 8004264:	4b6b      	ldr	r3, [pc, #428]	; (8004414 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x208>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff fe1b 	bl	8003ea4 <_ZNK6tflite5Model7versionEv>
 800426e:	4603      	mov	r3, r0
 8004270:	2b03      	cmp	r3, #3
 8004272:	bf14      	ite	ne
 8004274:	2301      	movne	r3, #1
 8004276:	2300      	moveq	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d012      	beq.n	80042a4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x98>
            error_reporter->Report(
 800427e:	4b66      	ldr	r3, [pc, #408]	; (8004418 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x20c>)
 8004280:	681c      	ldr	r4, [r3, #0]
 8004282:	4b64      	ldr	r3, [pc, #400]	; (8004414 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x208>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fe0c 	bl	8003ea4 <_ZNK6tflite5Model7versionEv>
 800428c:	4602      	mov	r2, r0
 800428e:	2303      	movs	r3, #3
 8004290:	4962      	ldr	r1, [pc, #392]	; (800441c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x210>)
 8004292:	4620      	mov	r0, r4
 8004294:	f009 f96a 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            ei_aligned_free(tensor_arena);
 8004298:	69f8      	ldr	r0, [r7, #28]
 800429a:	f7ff fee9 	bl	8004070 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>
            return EI_IMPULSE_TFLITE_ERROR;
 800429e:	f06f 0302 	mvn.w	r3, #2
 80042a2:	e0ad      	b.n	8004400 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x1f4>
    EI_TFLITE_RESOLVER
 80042a4:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x214>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d109      	bne.n	80042c4 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0xb8>
 80042b0:	2100      	movs	r1, #0
 80042b2:	485c      	ldr	r0, [pc, #368]	; (8004424 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x218>)
 80042b4:	f001 f804 	bl	80052c0 <_ZN6tflite22MicroMutableOpResolverILj2EEC1EPNS_13ErrorReporterE>
 80042b8:	4b59      	ldr	r3, [pc, #356]	; (8004420 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x214>)
 80042ba:	2201      	movs	r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	485a      	ldr	r0, [pc, #360]	; (8004428 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x21c>)
 80042c0:	f014 ff3e 	bl	8019140 <atexit>
 80042c4:	4857      	ldr	r0, [pc, #348]	; (8004424 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x218>)
 80042c6:	f001 f817 	bl	80052f8 <_ZN6tflite22MicroMutableOpResolverILj2EE17AddFullyConnectedEv>
 80042ca:	4856      	ldr	r0, [pc, #344]	; (8004424 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x218>)
 80042cc:	f001 f828 	bl	8005320 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddSoftmaxEv>
    *output_labels = trained_model_output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION
#else
    // Build an interpreter to run the model with.
    tflite::MicroInterpreter *interpreter = new tflite::MicroInterpreter(
        model, resolver, tensor_arena, EI_CLASSIFIER_TFLITE_ARENA_SIZE, error_reporter);
 80042d0:	2078      	movs	r0, #120	; 0x78
 80042d2:	f012 f85c 	bl	801638e <_Znwj>
 80042d6:	4603      	mov	r3, r0
 80042d8:	461c      	mov	r4, r3
 80042da:	4b4e      	ldr	r3, [pc, #312]	; (8004414 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x208>)
 80042dc:	6819      	ldr	r1, [r3, #0]
 80042de:	4b4e      	ldr	r3, [pc, #312]	; (8004418 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x20c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	9202      	str	r2, [sp, #8]
 80042e6:	9301      	str	r3, [sp, #4]
 80042e8:	f640 6359 	movw	r3, #3673	; 0xe59
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	4a4c      	ldr	r2, [pc, #304]	; (8004424 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x218>)
 80042f2:	4620      	mov	r0, r4
 80042f4:	f00d fb65 	bl	80119c2 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
 80042f8:	61bc      	str	r4, [r7, #24]

    *micro_interpreter = interpreter;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	601a      	str	r2, [r3, #0]

    // Allocate memory from the tensor_arena for the model's tensors.
    TfLiteStatus allocate_status = interpreter->AllocateTensors();
 8004300:	69b8      	ldr	r0, [r7, #24]
 8004302:	f00d fc25 	bl	8011b50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8004306:	4603      	mov	r3, r0
 8004308:	75fb      	strb	r3, [r7, #23]
    if (allocate_status != kTfLiteOk) {
 800430a:	7dfb      	ldrb	r3, [r7, #23]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00b      	beq.n	8004328 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x11c>
        error_reporter->Report("AllocateTensors() failed");
 8004310:	4b41      	ldr	r3, [pc, #260]	; (8004418 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x20c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4945      	ldr	r1, [pc, #276]	; (800442c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x220>)
 8004316:	4618      	mov	r0, r3
 8004318:	f009 f928 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        ei_aligned_free(tensor_arena);
 800431c:	69f8      	ldr	r0, [r7, #28]
 800431e:	f7ff fea7 	bl	8004070 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>
        return EI_IMPULSE_TFLITE_ERROR;
 8004322:	f06f 0302 	mvn.w	r3, #2
 8004326:	e06b      	b.n	8004400 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x1f4>
    }

    // Obtain pointers to the model's input and output tensors.
    *input = interpreter->input(0);
 8004328:	2100      	movs	r1, #0
 800432a:	69b8      	ldr	r0, [r7, #24]
 800432c:	f00d fdc0 	bl	8011eb0 <_ZN6tflite16MicroInterpreter5inputEj>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	601a      	str	r2, [r3, #0]
    *output = interpreter->output(0);
 8004336:	2100      	movs	r1, #0
 8004338:	69b8      	ldr	r0, [r7, #24]
 800433a:	f00d fde3 	bl	8011f04 <_ZN6tflite16MicroInterpreter6outputEj>
 800433e:	4602      	mov	r2, r0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	601a      	str	r2, [r3, #0]
    *output_labels = interpreter->output(EI_CLASSIFIER_TFLITE_OUTPUT_LABELS_TENSOR);
#endif // EI_CLASSIFIER_OBJECT_DETECTION
#endif

    // Assert that our quantization parameters match the model
    if (tflite_first_run) {
 8004344:	4b31      	ldr	r3, [pc, #196]	; (800440c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x200>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d058      	beq.n	80043fe <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x1f2>
        assert((*input)->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b09      	cmp	r3, #9
 8004354:	d006      	beq.n	8004364 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x158>
 8004356:	4b36      	ldr	r3, [pc, #216]	; (8004430 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x224>)
 8004358:	4a36      	ldr	r2, [pc, #216]	; (8004434 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x228>)
 800435a:	f44f 7106 	mov.w	r1, #536	; 0x218
 800435e:	4836      	ldr	r0, [pc, #216]	; (8004438 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x22c>)
 8004360:	f014 fed0 	bl	8019104 <__assert_func>
        assert((*output)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	2b09      	cmp	r3, #9
 800436c:	d006      	beq.n	800437c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x170>
 800436e:	4b33      	ldr	r3, [pc, #204]	; (800443c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x230>)
 8004370:	4a30      	ldr	r2, [pc, #192]	; (8004434 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x228>)
 8004372:	f240 2119 	movw	r1, #537	; 0x219
 8004376:	4830      	ldr	r0, [pc, #192]	; (8004438 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x22c>)
 8004378:	f014 fec4 	bl	8019104 <__assert_func>
        assert((*output_scores)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
        assert((*output_labels)->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
#endif
#if defined(EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) || defined(EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED)
        if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
            assert((*input)->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	edd3 7a03 	vldr	s15, [r3, #12]
 8004384:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004440 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x234>
 8004388:	eef4 7a47 	vcmp.f32	s15, s14
 800438c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004390:	d006      	beq.n	80043a0 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x194>
 8004392:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x238>)
 8004394:	4a27      	ldr	r2, [pc, #156]	; (8004434 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x228>)
 8004396:	f44f 7108 	mov.w	r1, #544	; 0x220
 800439a:	4827      	ldr	r0, [pc, #156]	; (8004438 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x22c>)
 800439c:	f014 feb2 	bl	8019104 <__assert_func>
            assert((*input)->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80043aa:	d006      	beq.n	80043ba <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x1ae>
 80043ac:	4b26      	ldr	r3, [pc, #152]	; (8004448 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x23c>)
 80043ae:	4a21      	ldr	r2, [pc, #132]	; (8004434 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x228>)
 80043b0:	f240 2121 	movw	r1, #545	; 0x221
 80043b4:	4820      	ldr	r0, [pc, #128]	; (8004438 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x22c>)
 80043b6:	f014 fea5 	bl	8019104 <__assert_func>
        }
        if (EI_CLASSIFIER_TFLITE_OUTPUT_QUANTIZED) {
            assert((*output)->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	edd3 7a03 	vldr	s15, [r3, #12]
 80043c2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800444c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x240>
 80043c6:	eef4 7a47 	vcmp.f32	s15, s14
 80043ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ce:	d006      	beq.n	80043de <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x1d2>
 80043d0:	4b1f      	ldr	r3, [pc, #124]	; (8004450 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x244>)
 80043d2:	4a18      	ldr	r2, [pc, #96]	; (8004434 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x228>)
 80043d4:	f44f 7109 	mov.w	r1, #548	; 0x224
 80043d8:	4817      	ldr	r0, [pc, #92]	; (8004438 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x22c>)
 80043da:	f014 fe93 	bl	8019104 <__assert_func>
            assert((*output)->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80043e8:	d006      	beq.n	80043f8 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x1ec>
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x248>)
 80043ec:	4a11      	ldr	r2, [pc, #68]	; (8004434 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x228>)
 80043ee:	f240 2125 	movw	r1, #549	; 0x225
 80043f2:	4811      	ldr	r0, [pc, #68]	; (8004438 <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x22c>)
 80043f4:	f014 fe86 	bl	8019104 <__assert_func>
        }
#endif
        tflite_first_run = false;
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh+0x200>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
    }
    return EI_IMPULSE_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3724      	adds	r7, #36	; 0x24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd90      	pop	{r4, r7, pc}
 8004408:	0801c594 	.word	0x0801c594
 800440c:	20000058 	.word	0x20000058
 8004410:	0801f5a0 	.word	0x0801f5a0
 8004414:	20000888 	.word	0x20000888
 8004418:	20000054 	.word	0x20000054
 800441c:	0801c5c0 	.word	0x0801c5c0
 8004420:	200008e8 	.word	0x200008e8
 8004424:	2000088c 	.word	0x2000088c
 8004428:	080041fd 	.word	0x080041fd
 800442c:	0801c608 	.word	0x0801c608
 8004430:	0801c624 	.word	0x0801c624
 8004434:	08020520 	.word	0x08020520
 8004438:	0801c65c 	.word	0x0801c65c
 800443c:	0801c6e0 	.word	0x0801c6e0
 8004440:	3dec8735 	.word	0x3dec8735
 8004444:	0801c718 	.word	0x0801c718
 8004448:	0801c754 	.word	0x0801c754
 800444c:	3b800000 	.word	0x3b800000
 8004450:	0801c798 	.word	0x0801c798
 8004454:	0801c7d8 	.word	0x0801c7d8

08004458 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb>:
#if (EI_CLASSIFIER_COMPILED != 1)
    tflite::MicroInterpreter* interpreter,
#endif
    uint8_t* tensor_arena,
    ei_impulse_result_t *result,
    bool debug) {
 8004458:	b590      	push	{r4, r7, lr}
 800445a:	b08b      	sub	sp, #44	; 0x2c
 800445c:	af00      	add	r7, sp, #0
 800445e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_invoke();
#else
    // Run inference, and report any error
    TfLiteStatus invoke_status = interpreter->Invoke();
 8004466:	6838      	ldr	r0, [r7, #0]
 8004468:	f00d fc8e 	bl	8011d88 <_ZN6tflite16MicroInterpreter6InvokeEv>
 800446c:	4603      	mov	r3, r0
 800446e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (invoke_status != kTfLiteOk) {
 8004472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0x3e>
        error_reporter->Report("Invoke failed (%d)\n", invoke_status);
 800447a:	4b35      	ldr	r3, [pc, #212]	; (8004550 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0xf8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004482:	4934      	ldr	r1, [pc, #208]	; (8004554 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0xfc>)
 8004484:	4618      	mov	r0, r3
 8004486:	f009 f871 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        ei_aligned_free(tensor_arena);
 800448a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800448c:	f7ff fdf0 	bl	8004070 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>
        return EI_IMPULSE_TFLITE_ERROR;
 8004490:	f06f 0302 	mvn.w	r3, #2
 8004494:	e057      	b.n	8004546 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0xee>
    }
    delete interpreter;
 8004496:	683c      	ldr	r4, [r7, #0]
 8004498:	2c00      	cmp	r4, #0
 800449a:	d006      	beq.n	80044aa <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0x52>
 800449c:	4620      	mov	r0, r4
 800449e:	f00d facd 	bl	8011a3c <_ZN6tflite16MicroInterpreterD1Ev>
 80044a2:	2178      	movs	r1, #120	; 0x78
 80044a4:	4620      	mov	r0, r4
 80044a6:	f011 ff70 	bl	801638a <_ZdlPvj>
#endif

    uint64_t ctx_end_ms = ei_read_timer_ms();
 80044aa:	f008 fe8d 	bl	800d1c8 <_Z16ei_read_timer_msv>
 80044ae:	e9c7 0106 	strd	r0, r1, [r7, #24]

    result->timing.classification = ctx_end_ms - ctx_start_ms;
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	461a      	mov	r2, r3
 80044ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044bc:	62da      	str	r2, [r3, #44]	; 0x2c

    // Read the predicted y value from the model's output tensor
    if (debug) {
 80044be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0x7a>
        ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 80044c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	4619      	mov	r1, r3
 80044cc:	4822      	ldr	r0, [pc, #136]	; (8004558 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0x100>)
 80044ce:	f000 fb07 	bl	8004ae0 <_Z9ei_printfPKcz>
    }
#if EI_CLASSIFIER_OBJECT_DETECTION == 1
    fill_result_struct_f32(result, tflite::post_process_boxes, tflite::post_process_scores, tflite::post_process_classes, debug);
    // fill_result_struct_f32(result, output->data.f, scores_tensor->data.f, labels_tensor->data.f, debug);
#else
    bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	2b09      	cmp	r3, #9
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	75fb      	strb	r3, [r7, #23]
    if (int8_output) {
 80044e0:	7dfb      	ldrb	r3, [r7, #23]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d015      	beq.n	8004512 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0xba>
        fill_result_struct_i8(result, output->data.int8, output->params.zero_point, output->params.scale, debug);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6859      	ldr	r1, [r3, #4]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80044fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004500:	461a      	mov	r2, r3
 8004502:	eef0 0a47 	vmov.f32	s1, s14
 8004506:	eeb0 0a67 	vmov.f32	s0, s15
 800450a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800450c:	f7ff fde2 	bl	80040d4 <_ZN12_GLOBAL__N_1L21fill_result_struct_i8EP19ei_impulse_result_tPaffb>
 8004510:	e007      	b.n	8004522 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0xca>
    }
    else {
        fill_result_struct_f32(result, output->data.f, debug);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800451a:	4619      	mov	r1, r3
 800451c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800451e:	f7ff fe2b 	bl	8004178 <_ZN12_GLOBAL__N_1L22fill_result_struct_f32EP19ei_impulse_result_tPfb>
#endif

#if (EI_CLASSIFIER_COMPILED == 1)
    trained_model_reset(ei_aligned_free);
#else
    ei_aligned_free(tensor_arena);
 8004522:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004524:	f7ff fda4 	bl	8004070 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>
#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004528:	f008 fe46 	bl	800d1b8 <_Z29ei_run_impulse_check_canceledv>
 800452c:	4603      	mov	r3, r0
 800452e:	f113 0f02 	cmn.w	r3, #2
 8004532:	bf0c      	ite	eq
 8004534:	2301      	moveq	r3, #1
 8004536:	2300      	movne	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0xec>
        return EI_IMPULSE_CANCELED;
 800453e:	f06f 0301 	mvn.w	r3, #1
 8004542:	e000      	b.n	8004546 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb+0xee>
    }

    return EI_IMPULSE_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	372c      	adds	r7, #44	; 0x2c
 800454a:	46bd      	mov	sp, r7
 800454c:	bd90      	pop	{r4, r7, pc}
 800454e:	bf00      	nop
 8004550:	20000054 	.word	0x20000054
 8004554:	0801c820 	.word	0x0801c820
 8004558:	0801c834 	.word	0x0801c834

0800455c <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800455c:	b5b0      	push	{r4, r5, r7, lr}
 800455e:	b090      	sub	sp, #64	; 0x40
 8004560:	af04      	add	r7, sp, #16
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	4613      	mov	r3, r2
 8004568:	71fb      	strb	r3, [r7, #7]
        EI_IMPULSE_ERROR init_res = inference_tflite_setup(&ctx_start_ms, &input, &output,
    #if EI_CLASSIFIER_OBJECT_DETECTION
            &output_labels,
            &output_scores,
    #endif
            &interpreter, &tensor_arena);
 800456a:	f107 0410 	add.w	r4, r7, #16
 800456e:	f107 0218 	add.w	r2, r7, #24
 8004572:	f107 011c 	add.w	r1, r7, #28
 8004576:	f107 0020 	add.w	r0, r7, #32
 800457a:	f107 0314 	add.w	r3, r7, #20
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	4623      	mov	r3, r4
 8004582:	f7ff fe43 	bl	800420c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#endif
        if (init_res != EI_IMPULSE_OK) {
 800458c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <run_inference+0x3e>
            return init_res;
 8004594:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004598:	e073      	b.n	8004682 <run_inference+0x126>
            else {
                input->data.f[ix] = fmatrix->buffer[ix];
            }
        }
#else
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b09      	cmp	r3, #9
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 80045aa:	2300      	movs	r3, #0
 80045ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	6892      	ldr	r2, [r2, #8]
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045bc:	429a      	cmp	r2, r3
 80045be:	d239      	bcs.n	8004634 <run_inference+0xd8>
            // Quantize the input if it is int8
            if (int8_input) {
 80045c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d025      	beq.n	8004614 <run_inference+0xb8>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	ed93 7a00 	vldr	s14, [r3]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80045dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045e0:	eeb0 0a66 	vmov.f32	s0, s13
 80045e4:	f7fc fe3d 	bl	8001262 <_ZSt5roundf>
 80045e8:	eeb0 7a40 	vmov.f32	s14, s0
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	ee07 3a90 	vmov	s15, r3
 80045f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	4413      	add	r3, r2
 8004604:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004608:	edc7 7a00 	vstr	s15, [r7]
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	b252      	sxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	e00b      	b.n	800462c <run_inference+0xd0>
                // printf("float %ld : %d\r\n", ix, input->data.int8[ix]);
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	441a      	add	r2, r3
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	6859      	ldr	r1, [r3, #4]
 8004622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 800462c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800462e:	3301      	adds	r3, #1
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004632:	e7bc      	b.n	80045ae <run_inference+0x52>
            output_labels,
            output_scores,
    #endif
            tensor_arena, result, debug);
#else
        EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_ms, output,
 8004634:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004638:	69bc      	ldr	r4, [r7, #24]
 800463a:	693d      	ldr	r5, [r7, #16]
 800463c:	697b      	ldr	r3, [r7, #20]
    #if EI_CLASSIFIER_OBJECT_DETECTION
            output_labels,
            output_scores,
    #endif
            interpreter, tensor_arena, result, debug);
 800463e:	79fa      	ldrb	r2, [r7, #7]
 8004640:	9202      	str	r2, [sp, #8]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	9201      	str	r2, [sp, #4]
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	462b      	mov	r3, r5
 800464a:	4622      	mov	r2, r4
 800464c:	f7ff ff04 	bl	8004458 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb>
 8004650:	4603      	mov	r3, r0
 8004652:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
#endif

        if (run_res != EI_IMPULSE_OK) {
 8004656:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <run_inference+0x108>
            return run_res;
 800465e:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8004662:	e00e      	b.n	8004682 <run_inference+0x126>
        result->anomaly = anomaly;
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004664:	f008 fda8 	bl	800d1b8 <_Z29ei_run_impulse_check_canceledv>
 8004668:	4603      	mov	r3, r0
 800466a:	f113 0f02 	cmn.w	r3, #2
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <run_inference+0x124>
        return EI_IMPULSE_CANCELED;
 800467a:	f06f 0301 	mvn.w	r3, #1
 800467e:	e000      	b.n	8004682 <run_inference+0x126>
    }

    return EI_IMPULSE_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3730      	adds	r7, #48	; 0x30
 8004686:	46bd      	mov	sp, r7
 8004688:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800468c <run_classifier>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 800468c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468e:	b0a1      	sub	sp, #132	; 0x84
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	4613      	mov	r3, r2
 8004698:	71fb      	strb	r3, [r7, #7]
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED == 1 && EI_CLASSIFIER_INFERENCING_ENGINE == EI_CLASSIFIER_TFLITE
    // Shortcut for quantized image models
    if (can_run_classifier_image_quantized() == EI_IMPULSE_OK) {
 800469a:	f000 f8ef 	bl	800487c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d008      	beq.n	80046c0 <run_classifier+0x34>
        return run_classifier_image_quantized(signal, result, debug);
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	461a      	mov	r2, r3
 80046b2:	68b9      	ldr	r1, [r7, #8]
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f8f7 	bl	80048a8 <run_classifier_image_quantized>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461e      	mov	r6, r3
 80046be:	e0c8      	b.n	8004852 <run_classifier+0x1c6>
    //     }
    // }
    // printf("\n");
    // }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80046c0:	2234      	movs	r2, #52	; 0x34
 80046c2:	2100      	movs	r1, #0
 80046c4:	68b8      	ldr	r0, [r7, #8]
 80046c6:	f014 fe2d 	bl	8019324 <memset>

    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 80046ca:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80046ce:	2300      	movs	r3, #0
 80046d0:	2221      	movs	r2, #33	; 0x21
 80046d2:	2101      	movs	r1, #1
 80046d4:	f7fc fd31 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>

    uint64_t dsp_start_ms = ei_read_timer_ms();
 80046d8:	f008 fd76 	bl	800d1c8 <_Z16ei_read_timer_msv>
 80046dc:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    size_t out_features_index = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	67fb      	str	r3, [r7, #124]	; 0x7c

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80046e4:	2300      	movs	r3, #0
 80046e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80046e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d16e      	bne.n	80047cc <run_classifier+0x140>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 80046ee:	495b      	ldr	r1, [pc, #364]	; (800485c <run_classifier+0x1d0>)
 80046f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004700:	461d      	mov	r5, r3
 8004702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004706:	682b      	ldr	r3, [r5, #0]
 8004708:	6023      	str	r3, [r4, #0]

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 800470a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800470c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800470e:	4413      	add	r3, r2
 8004710:	2b21      	cmp	r3, #33	; 0x21
 8004712:	d905      	bls.n	8004720 <run_classifier+0x94>
            ei_printf("ERR: Would write outside feature buffer\n");
 8004714:	4852      	ldr	r0, [pc, #328]	; (8004860 <run_classifier+0x1d4>)
 8004716:	f000 f9e3 	bl	8004ae0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800471a:	f06f 0604 	mvn.w	r6, #4
 800471e:	e092      	b.n	8004846 <run_classifier+0x1ba>
        }

        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 8004720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004722:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004724:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800472e:	460a      	mov	r2, r1
 8004730:	2101      	movs	r1, #1
 8004732:	f7fc fd02 	bl	800113a <_ZN2ei9ei_matrixC1EmmPf>
            ei_printf("ERR: EIDSP_SIGNAL_C_FN_POINTER can only be used when all axes are selected for DSP blocks\n");
            return EI_IMPULSE_DSP_ERROR;
        }
        int ret = block.extract_fn(signal, &fm, block.config, EI_CLASSIFIER_FREQUENCY);
#else
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 8004736:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800473a:	f107 0010 	add.w	r0, r7, #16
 800473e:	68f9      	ldr	r1, [r7, #12]
 8004740:	f7ff faa6 	bl	8003c90 <_ZN14SignalWithAxesC1EPN2ei11ei_signal_tEPhj>
        int ret = block.extract_fn(swa.get_signal(), &fm, block.config, EI_CLASSIFIER_FREQUENCY);
 8004744:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8004746:	f107 0310 	add.w	r3, r7, #16
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff face 	bl	8003cec <_ZN14SignalWithAxes10get_signalEv>
 8004750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004752:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004756:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8004864 <run_classifier+0x1d8>
 800475a:	4619      	mov	r1, r3
 800475c:	47a0      	blx	r4
 800475e:	6678      	str	r0, [r7, #100]	; 0x64
#endif

        if (ret != EIDSP_OK) {
 8004760:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <run_classifier+0xea>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8004766:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004768:	483f      	ldr	r0, [pc, #252]	; (8004868 <run_classifier+0x1dc>)
 800476a:	f000 f9b9 	bl	8004ae0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 800476e:	f06f 0604 	mvn.w	r6, #4
 8004772:	2400      	movs	r4, #0
 8004774:	e013      	b.n	800479e <run_classifier+0x112>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004776:	f008 fd1f 	bl	800d1b8 <_Z29ei_run_impulse_check_canceledv>
 800477a:	4603      	mov	r3, r0
 800477c:	f113 0f02 	cmn.w	r3, #2
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <run_classifier+0x108>
            return EI_IMPULSE_CANCELED;
 800478c:	f06f 0601 	mvn.w	r6, #1
 8004790:	2400      	movs	r4, #0
 8004792:	e004      	b.n	800479e <run_classifier+0x112>
        }

        out_features_index += block.n_output_features;
 8004794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004796:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004798:	4413      	add	r3, r2
 800479a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800479c:	2401      	movs	r4, #1
 800479e:	f107 0310 	add.w	r3, r7, #16
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fc88 	bl	80040b8 <_ZN14SignalWithAxesD1Ev>
 80047a8:	2c01      	cmp	r4, #1
 80047aa:	d001      	beq.n	80047b0 <run_classifier+0x124>
 80047ac:	2400      	movs	r4, #0
 80047ae:	e001      	b.n	80047b4 <run_classifier+0x128>
        SignalWithAxes swa(signal, block.axes, block.axes_size);
 80047b0:	bf00      	nop
 80047b2:	2401      	movs	r4, #1
 80047b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7fc fce9 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 80047be:	2c01      	cmp	r4, #1
 80047c0:	d141      	bne.n	8004846 <run_classifier+0x1ba>
        ei::matrix_t fm(1, block.n_output_features, features_matrix.buffer + out_features_index);
 80047c2:	bf00      	nop
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80047c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047c6:	3301      	adds	r3, #1
 80047c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ca:	e78d      	b.n	80046e8 <run_classifier+0x5c>
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 80047cc:	f008 fcfc 	bl	800d1c8 <_Z16ei_read_timer_msv>
 80047d0:	4603      	mov	r3, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	461a      	mov	r2, r3
 80047d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	461a      	mov	r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	629a      	str	r2, [r3, #40]	; 0x28

    if (debug) {
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d01f      	beq.n	8004826 <run_classifier+0x19a>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	4619      	mov	r1, r3
 80047ec:	481f      	ldr	r0, [pc, #124]	; (800486c <run_classifier+0x1e0>)
 80047ee:	f000 f977 	bl	8004ae0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80047f2:	2300      	movs	r3, #0
 80047f4:	677b      	str	r3, [r7, #116]	; 0x74
 80047f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d210      	bcs.n	8004820 <run_classifier+0x194>
            ei_printf_float(features_matrix.buffer[ix]);
 80047fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	edd3 7a00 	vldr	s15, [r3]
 800480a:	eeb0 0a67 	vmov.f32	s0, s15
 800480e:	f008 fce7 	bl	800d1e0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8004812:	4817      	ldr	r0, [pc, #92]	; (8004870 <run_classifier+0x1e4>)
 8004814:	f000 f964 	bl	8004ae0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 8004818:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800481a:	3301      	adds	r3, #1
 800481c:	677b      	str	r3, [r7, #116]	; 0x74
 800481e:	e7ea      	b.n	80047f6 <run_classifier+0x16a>
        }
        ei_printf("\n");
 8004820:	4814      	ldr	r0, [pc, #80]	; (8004874 <run_classifier+0x1e8>)
 8004822:	f000 f95d 	bl	8004ae0 <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <run_classifier+0x1a6>
        ei_printf("Running neural network...\n");
 800482c:	4812      	ldr	r0, [pc, #72]	; (8004878 <run_classifier+0x1ec>)
 800482e:	f000 f957 	bl	8004ae0 <_Z9ei_printfPKcz>
    }
#endif

    return run_inference(&features_matrix, result, debug);
 8004832:	79fa      	ldrb	r2, [r7, #7]
 8004834:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fe8e 	bl	800455c <run_inference>
 8004840:	4603      	mov	r3, r0
 8004842:	461e      	mov	r6, r3
 8004844:	e000      	b.n	8004848 <run_classifier+0x1bc>
            return EI_IMPULSE_DSP_ERROR;
 8004846:	bf00      	nop
    ei::matrix_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004848:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800484c:	4618      	mov	r0, r3
 800484e:	f7fc fc9f 	bl	8001190 <_ZN2ei9ei_matrixD1Ev>
 8004852:	4633      	mov	r3, r6
}
 8004854:	4618      	mov	r0, r3
 8004856:	3784      	adds	r7, #132	; 0x84
 8004858:	46bd      	mov	sp, r7
 800485a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800485c:	2000003c 	.word	0x2000003c
 8004860:	0801c4b0 	.word	0x0801c4b0
 8004864:	427a0000 	.word	0x427a0000
 8004868:	0801c528 	.word	0x0801c528
 800486c:	0801c854 	.word	0x0801c854
 8004870:	0801c568 	.word	0x0801c568
 8004874:	0801c56c 	.word	0x0801c56c
 8004878:	0801c570 	.word	0x0801c570

0800487c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>:
}

/**
 * Check if the current impulse could be used by 'run_classifier_image_quantized'
 */
__attribute__((unused)) static EI_IMPULSE_ERROR can_run_classifier_image_quantized() {
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
#if EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED != 1
    return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
#endif

    // And if we have one DSP block which operates on images...
    if (ei_dsp_blocks_size != 1 || ei_dsp_blocks[0].extract_fn != extract_image_features) {
 8004880:	4b06      	ldr	r3, [pc, #24]	; (800489c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x20>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a06      	ldr	r2, [pc, #24]	; (80048a0 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x24>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d002      	beq.n	8004890 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x14>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 800488a:	f06f 0308 	mvn.w	r3, #8
 800488e:	e000      	b.n	8004892 <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv+0x16>
    }

    return EI_IMPULSE_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	2000003c 	.word	0x2000003c
 80048a0:	08003759 	.word	0x08003759
 80048a4:	00000000 	.word	0x00000000

080048a8 <run_classifier_image_quantized>:
 */
extern "C" EI_IMPULSE_ERROR run_classifier_image_quantized(
    signal_t *signal,
    ei_impulse_result_t *result,
    bool debug = false)
{
 80048a8:	b5b0      	push	{r4, r5, r7, lr}
 80048aa:	b098      	sub	sp, #96	; 0x60
 80048ac:	af04      	add	r7, sp, #16
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	71fb      	strb	r3, [r7, #7]
    EI_IMPULSE_ERROR verify_res = can_run_classifier_image_quantized();
 80048b6:	f7ff ffe1 	bl	800487c <_ZN12_GLOBAL__N_1L34can_run_classifier_image_quantizedEv>
 80048ba:	4603      	mov	r3, r0
 80048bc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (verify_res != EI_IMPULSE_OK) {
 80048c0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <run_classifier_image_quantized+0x26>
        return verify_res;
 80048c8:	f997 404b 	ldrsb.w	r4, [r7, #75]	; 0x4b
 80048cc:	e0b2      	b.n	8004a34 <run_classifier_image_quantized+0x18c>
    }

    memset(result, 0, sizeof(ei_impulse_result_t));
 80048ce:	2234      	movs	r2, #52	; 0x34
 80048d0:	2100      	movs	r1, #0
 80048d2:	68b8      	ldr	r0, [r7, #8]
 80048d4:	f014 fd26 	bl	8019324 <memset>
    #if EI_CLASSIFIER_OBJECT_DETECTION
        &output_labels,
        &output_scores,
    #endif
        &interpreter,
        &tensor_arena);
 80048d8:	f107 0420 	add.w	r4, r7, #32
 80048dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048e0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80048e4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80048e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	4623      	mov	r3, r4
 80048f0:	f7ff fc8c 	bl	800420c <_ZN12_GLOBAL__N_1L22inference_tflite_setupEPyPP12TfLiteTensorS3_PPN6tflite16MicroInterpreterEPPh>
 80048f4:	4603      	mov	r3, r0
 80048f6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
    if (init_res != EI_IMPULSE_OK) {
 80048fa:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <run_classifier_image_quantized+0x60>
        return init_res;
 8004902:	f997 404a 	ldrsb.w	r4, [r7, #74]	; 0x4a
 8004906:	e095      	b.n	8004a34 <run_classifier_image_quantized+0x18c>
    }

    if (input->type != TfLiteType::kTfLiteInt8) {
 8004908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b09      	cmp	r3, #9
 800490e:	d002      	beq.n	8004916 <run_classifier_image_quantized+0x6e>
        return EI_IMPULSE_ONLY_SUPPORTED_FOR_IMAGES;
 8004910:	f06f 0408 	mvn.w	r4, #8
 8004914:	e08e      	b.n	8004a34 <run_classifier_image_quantized+0x18c>
    }

    uint64_t dsp_start_ms = ei_read_timer_ms();
 8004916:	f008 fc57 	bl	800d1c8 <_Z16ei_read_timer_msv>
 800491a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

    // features matrix maps around the input tensor to not allocate any memory
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	f107 0010 	add.w	r0, r7, #16
 8004926:	2221      	movs	r2, #33	; 0x21
 8004928:	2101      	movs	r1, #1
 800492a:	f7fc fc47 	bl	80011bc <_ZN2ei12ei_matrix_i8C1EmmPa>

    // run DSP process and quantize automatically
    int ret = extract_image_features_quantized(signal, &features_matrix, ei_dsp_blocks[0].config, EI_CLASSIFIER_FREQUENCY);
 800492e:	4b46      	ldr	r3, [pc, #280]	; (8004a48 <run_classifier_image_quantized+0x1a0>)
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8004a4c <run_classifier_image_quantized+0x1a4>
 800493a:	4619      	mov	r1, r3
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f7ff f813 	bl	8003968 <_ZN12_GLOBAL__N_132extract_image_features_quantizedEPN2ei11ei_signal_tEPNS0_12ei_matrix_i8EPvf>
 8004942:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (ret != EIDSP_OK) {
 8004944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <run_classifier_image_quantized+0xb0>
        ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 800494a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800494c:	4840      	ldr	r0, [pc, #256]	; (8004a50 <run_classifier_image_quantized+0x1a8>)
 800494e:	f000 f8c7 	bl	8004ae0 <_Z9ei_printfPKcz>
        return EI_IMPULSE_DSP_ERROR;
 8004952:	f06f 0404 	mvn.w	r4, #4
 8004956:	e068      	b.n	8004a2a <run_classifier_image_quantized+0x182>
    }

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004958:	f008 fc2e 	bl	800d1b8 <_Z29ei_run_impulse_check_canceledv>
 800495c:	4603      	mov	r3, r0
 800495e:	f113 0f02 	cmn.w	r3, #2
 8004962:	bf0c      	ite	eq
 8004964:	2301      	moveq	r3, #1
 8004966:	2300      	movne	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <run_classifier_image_quantized+0xcc>
        return EI_IMPULSE_CANCELED;
 800496e:	f06f 0401 	mvn.w	r4, #1
 8004972:	e05a      	b.n	8004a2a <run_classifier_image_quantized+0x182>
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 8004974:	f008 fc28 	bl	800d1c8 <_Z16ei_read_timer_msv>
 8004978:	4603      	mov	r3, r0
 800497a:	460c      	mov	r4, r1
 800497c:	461a      	mov	r2, r3
 800497e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	461a      	mov	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	629a      	str	r2, [r3, #40]	; 0x28

    if (debug) {
 8004988:	79fb      	ldrb	r3, [r7, #7]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d02e      	beq.n	80049ec <run_classifier_image_quantized+0x144>
        ei_printf("Features (%d ms.): ", result->timing.dsp);
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004992:	4619      	mov	r1, r3
 8004994:	482f      	ldr	r0, [pc, #188]	; (8004a54 <run_classifier_image_quantized+0x1ac>)
 8004996:	f000 f8a3 	bl	8004ae0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 800499a:	2300      	movs	r3, #0
 800499c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d21f      	bcs.n	80049e6 <run_classifier_image_quantized+0x13e>
            ei_printf_float((features_matrix.buffer[ix] - EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT) * EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049aa:	4413      	add	r3, r2
 80049ac:	f993 3000 	ldrsb.w	r3, [r3]
 80049b0:	3380      	adds	r3, #128	; 0x80
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fb fdce 	bl	8000554 <__aeabi_i2d>
 80049b8:	a321      	add	r3, pc, #132	; (adr r3, 8004a40 <run_classifier_image_quantized+0x198>)
 80049ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049be:	f7fb fe33 	bl	8000628 <__aeabi_dmul>
 80049c2:	4603      	mov	r3, r0
 80049c4:	460c      	mov	r4, r1
 80049c6:	4618      	mov	r0, r3
 80049c8:	4621      	mov	r1, r4
 80049ca:	f7fc f925 	bl	8000c18 <__aeabi_d2f>
 80049ce:	4603      	mov	r3, r0
 80049d0:	ee00 3a10 	vmov	s0, r3
 80049d4:	f008 fc04 	bl	800d1e0 <_Z15ei_printf_floatf>
            ei_printf(" ");
 80049d8:	481f      	ldr	r0, [pc, #124]	; (8004a58 <run_classifier_image_quantized+0x1b0>)
 80049da:	f000 f881 	bl	8004ae0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < features_matrix.cols; ix++) {
 80049de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e0:	3301      	adds	r3, #1
 80049e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049e4:	e7db      	b.n	800499e <run_classifier_image_quantized+0xf6>
        }
        ei_printf("\n");
 80049e6:	481d      	ldr	r0, [pc, #116]	; (8004a5c <run_classifier_image_quantized+0x1b4>)
 80049e8:	f000 f87a 	bl	8004ae0 <_Z9ei_printfPKcz>
    }

    ctx_start_ms = ei_read_timer_ms();
 80049ec:	f008 fbec 	bl	800d1c8 <_Z16ei_read_timer_msv>
 80049f0:	4603      	mov	r3, r0
 80049f2:	460c      	mov	r4, r1
 80049f4:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        output_labels,
        output_scores,
    #endif
        tensor_arena, result, debug);
#else
    EI_IMPULSE_ERROR run_res = inference_tflite_run(ctx_start_ms, output,
 80049f8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80049fc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80049fe:	6a3d      	ldr	r5, [r7, #32]
 8004a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    #if EI_CLASSIFIER_OBJECT_DETECTION
        output_labels,
        output_scores,
    #endif
        interpreter, tensor_arena, result, debug);
 8004a02:	79fa      	ldrb	r2, [r7, #7]
 8004a04:	9202      	str	r2, [sp, #8]
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	9201      	str	r2, [sp, #4]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	462b      	mov	r3, r5
 8004a0e:	4622      	mov	r2, r4
 8004a10:	f7ff fd22 	bl	8004458 <_ZN12_GLOBAL__N_1L20inference_tflite_runEyP12TfLiteTensorPN6tflite16MicroInterpreterEPhP19ei_impulse_result_tb>
 8004a14:	4603      	mov	r3, r0
 8004a16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif

    if (run_res != EI_IMPULSE_OK) {
 8004a1a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <run_classifier_image_quantized+0x180>
        return run_res;
 8004a22:	f997 403b 	ldrsb.w	r4, [r7, #59]	; 0x3b
 8004a26:	e000      	b.n	8004a2a <run_classifier_image_quantized+0x182>
    }

    return EI_IMPULSE_OK;
 8004a28:	2400      	movs	r4, #0
    ei::matrix_i8_t features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE, input->data.int8);
 8004a2a:	f107 0310 	add.w	r3, r7, #16
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7fc fbee 	bl	8001210 <_ZN2ei12ei_matrix_i8D1Ev>
 8004a34:	4623      	mov	r3, r4
#endif // EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_TFLITE
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3750      	adds	r7, #80	; 0x50
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	a0000000 	.word	0xa0000000
 8004a44:	3fbd90e6 	.word	0x3fbd90e6
 8004a48:	2000003c 	.word	0x2000003c
 8004a4c:	427a0000 	.word	0x427a0000
 8004a50:	0801c528 	.word	0x0801c528
 8004a54:	0801c854 	.word	0x0801c854
 8004a58:	0801c568 	.word	0x0801c568
 8004a5c:	0801c56c 	.word	0x0801c56c

08004a60 <_Z16get_feature_datajjPf>:
// paste the raw features here
static float features[] = {
		-5.0000, -5.5500, 2.3700, -5.0000, -5.5500, 2.3700, -3.2300, -5.3400, 2.0800, -1.7100, -4.6300, 0.8400, -1.1800, -4.6200, 0.0600, -1.3400, -5.3900, 0.4600, -1.2500, -6.2500, 1.4800, -1.4600, -5.8500, 1.3100, -1.4600, -5.8500, 1.3100, 0.9600, -5.8100, -0.2300, 2.0200, -4.6200, -1.3600, 1.7900, -5.0700, -1.0600, 1.8300, -5.2100, -0.6000, 3.1000, -4.5300, -0.8600, 3.2400, -3.9500, -1.5000, 3.2400, -3.9500, -1.5000, 4.0700, -3.9200, -1.3300, 5.4500, -3.8700, -1.3100, 7.2500, -3.1300, -2.2200, 7.4400, -2.5700, -3.0700, 7.0100, -2.6900, -2.8200, 7.3700, -3.0400, -3.0400, 7.3700, -3.0400, -3.0400, 9.8600, -2.5400, -4.1700, 12.4200, -2.4900, -5.7200, 12.8000, -2.8200, -6.6200, 13.5000, -3.8200, -7.0100, 14.5000, -4.6300, -7.9200, 15.3400, -5.2100, -8.0200, 15.3400, -5.2100, -8.0200, 15.2500, -6.5000, -7.1700, 14.9500, -7.0600, -6.9800, 16.3900, -7.2100, -7.4200, 17.4900, -7.1800, -7.2600, 16.4400, -7.4500, -5.8100, 15.2600, -7.4400, -5.3800, 15.2600, -7.4400, -5.3800, 14.8100, -6.6400, -6.0900, 14.5100, -6.2300, -5.1300, 13.3400, -6.1300, -4.2100, 12.6000, -5.7300, -4.4700, 11.2900, -4.9800, -4.8000, 9.6700, -4.6800, -4.3500, 9.6700, -4.6800, -4.3500, 8.1700, -4.8800, -3.4700, 8.2300, -4.3500, -4.2200, 7.9200, -3.7000, -4.1200, 7.9900, -2.8500, -3.3100, 7.2900, -3.0300, -1.9800, 6.0800, -3.2600, -1.1900, 6.0800, -3.2600, -1.1900, 4.7400, -3.1700, -0.5900, 3.8600, -2.8500, -0.0400, 2.2400, -2.9400, 1.0300, 1.0500, -3.3600, 1.2300, -0.8300, -3.0700, 1.3600, -0.8300, -3.0700, 1.3600, -1.7600, -3.1000, 2.0800, -1.7500, -2.9600, 2.2300, -3.3100, -2.7200, 1.7100, -4.9600, -2.4600, 1.7400, -5.7600, -2.5400, 2.9400, -6.2400, -2.1700, 2.6300, -6.2400, -2.1700, 2.6300, -6.7200, -1.7900, 2.1500, -7.8200, -1.2500, 1.9500, -8.6900, -1.4100, 2.3000, -10.7100, -2.1000, 3.6000, -11.4100, -2.2500, 3.4700, -12.8200, -1.8700, 2.4100, -12.8200, -1.8700, 2.4100, -16.0200, -2.9100, 3.4200, -19.0100, -4.7700, 5.0000, -19.9500, -5.8200, 4.6900, -19.9800, -5.6800, 3.2200, -19.9800, -5.6100, 2.7100, -19.9800, -6.1900, 3.5400, -19.9800, -6.1900, 3.5400, -19.9800, -6.9500, 4.2000, -19.8200, -6.6400, 4.0100, -18.0700, -6.1700, 3.6200, -16.2000, -6.0200, 3.9900, -14.6200, -5.9600, 4.7200, -13.1900, -5.6900, 5.0300, -13.1900, -5.6900, 5.0300, -11.9600, -5.1000, 4.2600, -11.1800, -5.0100, 3.3600, -10.8800, -4.8400, 3.4400, -10.1300, -4.7000, 3.1500, -9.2200, -4.5700, 2.9600, -7.4100, -4.5000, 3.0500, -7.4100, -4.5000, 3.0500, -6.1900, -4.9300, 3.5300, -4.9900, -4.8500, 3.7500, -3.8200, -4.3900, 2.3600, -2.0500, -4.3100, 1.7200, -1.2500, -5.0600, 2.2000, -1.0900, -5.1900, 2.3500, -1.0900, -5.1900, 2.3500, -0.3800, -4.8500, 1.6500, 0.9600, -4.4500, 1.0900, 1.8700, -4.0700, 0.7400, 2.6300, -3.4500, -0.3400, 3.4800, -2.7000, -0.6900, 4.1900, -2.6100, -1.2700, 4.1900, -2.6100, -1.2700, 4.7200, -2.8200, -1.4500, 4.8000, -2.9700, -1.5700, 5.5200, -2.1000, -2.5400, 6.4800, -2.0200, -3.4000, 7.4000, -2.4400, -3.2700, 7.9500, -2.2700, -3.6100, 7.9500, -2.2700, -3.6100, 7.9400, -1.9600, -4.3200, 7.8100, -2.3200, -4.5100, 9.3000, -2.7800, -4.8100, 12.6200, -2.4600, -5.7800, 13.9700, -2.6100, -5.8300, 13.9700, -2.6100, -5.0400, 13.6000, -4.0500, -5.0400, 13.1900, -5.3500, -4.9700, 13.2000, -5.9600, -4.8700, 14.1900, -6.6000, -4.6300, 15.3400, -7.0800, -4.5700, 15.2800, -6.9500, -4.7900
};

int get_feature_data(size_t offset, size_t length, float *out_ptr) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
    memcpy(out_ptr, features + offset, length * sizeof(float));
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4a06      	ldr	r2, [pc, #24]	; (8004a8c <_Z16get_feature_datajjPf+0x2c>)
 8004a72:	1899      	adds	r1, r3, r2
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f014 fc2e 	bl	80192dc <memcpy>
    return 0;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	2000005c 	.word	0x2000005c

08004a90 <_Z6vprintPKcSt9__va_list>:
/* USER CODE BEGIN 0 */
#include <stdarg.h>
#include "edge-impulse-sdk/classifier/ei_run_classifier.h"

void vprint(const char *fmt, va_list argp)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b0b4      	sub	sp, #208	; 0xd0
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string, fmt, argp)) // build string
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f015 fe66 	bl	801a774 <vsiprintf>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	bfcc      	ite	gt
 8004aae:	2301      	movgt	r3, #1
 8004ab0:	2300      	movle	r3, #0
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00d      	beq.n	8004ad4 <_Z6vprintPKcSt9__va_list+0x44>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
 8004ab8:	f107 0308 	add.w	r3, r7, #8
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fb fb99 	bl	80001f4 <strlen>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	f107 0108 	add.w	r1, r7, #8
 8004aca:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004ace:	4803      	ldr	r0, [pc, #12]	; (8004adc <_Z6vprintPKcSt9__va_list+0x4c>)
 8004ad0:	f003 fc93 	bl	80083fa <HAL_UART_Transmit>
    }
}
 8004ad4:	bf00      	nop
 8004ad6:	37d0      	adds	r7, #208	; 0xd0
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	200008f4 	.word	0x200008f4

08004ae0 <_Z9ei_printfPKcz>:

void ei_printf(const char *format, ...) {
 8004ae0:	b40f      	push	{r0, r1, r2, r3}
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
    va_list myargs;
    va_start(myargs, format);
 8004ae8:	f107 0314 	add.w	r3, r7, #20
 8004aec:	607b      	str	r3, [r7, #4]
    vprint(format, myargs);
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	6938      	ldr	r0, [r7, #16]
 8004af2:	f7ff ffcd 	bl	8004a90 <_Z6vprintPKcSt9__va_list>
    va_end(myargs);
}
 8004af6:	bf00      	nop
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b00:	b004      	add	sp, #16
 8004b02:	4770      	bx	lr

08004b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b096      	sub	sp, #88	; 0x58
 8004b08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b0a:	f002 fc95 	bl	8007438 <HAL_Init>

  /* USER CODE BEGIN Init */
  signal_t signal;
 8004b0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fe fe05 	bl	8003722 <_ZN2ei11ei_signal_tC1Ev>
  signal.total_length = sizeof(features) / sizeof(features[0]);
 8004b18:	f240 1377 	movw	r3, #375	; 0x177
 8004b1c:	64bb      	str	r3, [r7, #72]	; 0x48
  signal.get_data = &get_feature_data;
 8004b1e:	4b2a      	ldr	r3, [pc, #168]	; (8004bc8 <main+0xc4>)
 8004b20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b22:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004b26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b2a:	4611      	mov	r1, r2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f000 fae8 	bl	8005102 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeENSt9result_ofIFRSA_jjS0_EE4typeEEE5valueERS2_E4typeEOS8_>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b32:	f000 f855 	bl	8004be0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b36:	f000 f90f 	bl	8004d58 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8004b3a:	f000 f8df 	bl	8004cfc <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 8004b3e:	f000 f8c5 	bl	8004ccc <_ZL11MX_CRC_Initv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		ei_impulse_result_t result = { 0 };
 8004b42:	1d3b      	adds	r3, r7, #4
 8004b44:	2234      	movs	r2, #52	; 0x34
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f014 fbeb 	bl	8019324 <memset>
		EI_IMPULSE_ERROR res = run_classifier(&signal, &result, true);
 8004b4e:	1d39      	adds	r1, r7, #4
 8004b50:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b54:	2201      	movs	r2, #1
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff fd98 	bl	800468c <run_classifier>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		ei_printf("run_classifier returned: %d\r\n", res);
 8004b62:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004b66:	4619      	mov	r1, r3
 8004b68:	4818      	ldr	r0, [pc, #96]	; (8004bcc <main+0xc8>)
 8004b6a:	f7ff ffb9 	bl	8004ae0 <_Z9ei_printfPKcz>

		ei_printf("Predictions (DSP: %d ms., Classification: %d ms., Anomaly: %d ms.): \r\n",
 8004b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	4816      	ldr	r0, [pc, #88]	; (8004bd0 <main+0xcc>)
 8004b76:	f7ff ffb3 	bl	8004ae0 <_Z9ei_printfPKcz>
			result.timing.dsp, result.timing.classification, result.timing.anomaly);

		// print the predictions
		ei_printf("[");
 8004b7a:	4816      	ldr	r0, [pc, #88]	; (8004bd4 <main+0xd0>)
 8004b7c:	f7ff ffb0 	bl	8004ae0 <_Z9ei_printfPKcz>
		for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004b80:	2300      	movs	r3, #0
 8004b82:	657b      	str	r3, [r7, #84]	; 0x54
 8004b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d815      	bhi.n	8004bb6 <main+0xb2>
			ei_printf_float(result.classification[ix].value);
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8c:	00db      	lsls	r3, r3, #3
 8004b8e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004b92:	4413      	add	r3, r2
 8004b94:	3b50      	subs	r3, #80	; 0x50
 8004b96:	edd3 7a00 	vldr	s15, [r3]
 8004b9a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b9e:	f008 fb1f 	bl	800d1e0 <_Z15ei_printf_floatf>
	#if EI_CLASSIFIER_HAS_ANOMALY == 1
			ei_printf(", ");
	#else
			if (ix != EI_CLASSIFIER_LABEL_COUNT - 1) {
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d002      	beq.n	8004bae <main+0xaa>
				ei_printf(", ");
 8004ba8:	480b      	ldr	r0, [pc, #44]	; (8004bd8 <main+0xd4>)
 8004baa:	f7ff ff99 	bl	8004ae0 <_Z9ei_printfPKcz>
		for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8004bb4:	e7e6      	b.n	8004b84 <main+0x80>
	#endif
		}
	#if EI_CLASSIFIER_HAS_ANOMALY == 1
		ei_printf_float(result.anomaly);
	#endif
		ei_printf("]\r\n\n\n");
 8004bb6:	4809      	ldr	r0, [pc, #36]	; (8004bdc <main+0xd8>)
 8004bb8:	f7ff ff92 	bl	8004ae0 <_Z9ei_printfPKcz>

	  HAL_Delay(5000);
 8004bbc:	f241 3088 	movw	r0, #5000	; 0x1388
 8004bc0:	f002 fcac 	bl	800751c <HAL_Delay>
    /* USER CODE BEGIN 3 */
  }
 8004bc4:	e7bd      	b.n	8004b42 <main+0x3e>
 8004bc6:	bf00      	nop
 8004bc8:	08004a61 	.word	0x08004a61
 8004bcc:	0801c8b0 	.word	0x0801c8b0
 8004bd0:	0801c8d0 	.word	0x0801c8d0
 8004bd4:	0801c918 	.word	0x0801c918
 8004bd8:	0801c91c 	.word	0x0801c91c
 8004bdc:	0801c920 	.word	0x0801c920

08004be0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b094      	sub	sp, #80	; 0x50
 8004be4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004be6:	f107 0320 	add.w	r3, r7, #32
 8004bea:	2230      	movs	r2, #48	; 0x30
 8004bec:	2100      	movs	r1, #0
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f014 fb98 	bl	8019324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bf4:	f107 030c 	add.w	r3, r7, #12
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	609a      	str	r2, [r3, #8]
 8004c00:	60da      	str	r2, [r3, #12]
 8004c02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c04:	2300      	movs	r3, #0
 8004c06:	60bb      	str	r3, [r7, #8]
 8004c08:	4b2e      	ldr	r3, [pc, #184]	; (8004cc4 <_Z18SystemClock_Configv+0xe4>)
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	4a2d      	ldr	r2, [pc, #180]	; (8004cc4 <_Z18SystemClock_Configv+0xe4>)
 8004c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c12:	6413      	str	r3, [r2, #64]	; 0x40
 8004c14:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <_Z18SystemClock_Configv+0xe4>)
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c20:	2300      	movs	r3, #0
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	4b28      	ldr	r3, [pc, #160]	; (8004cc8 <_Z18SystemClock_Configv+0xe8>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c2c:	4a26      	ldr	r2, [pc, #152]	; (8004cc8 <_Z18SystemClock_Configv+0xe8>)
 8004c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	4b24      	ldr	r3, [pc, #144]	; (8004cc8 <_Z18SystemClock_Configv+0xe8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004c3c:	607b      	str	r3, [r7, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c40:	2302      	movs	r3, #2
 8004c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c44:	2301      	movs	r3, #1
 8004c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c48:	2310      	movs	r3, #16
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c50:	2300      	movs	r3, #0
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8004c54:	2310      	movs	r3, #16
 8004c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004c58:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004c5e:	2304      	movs	r3, #4
 8004c60:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004c62:	2307      	movs	r3, #7
 8004c64:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c66:	f107 0320 	add.w	r3, r7, #32
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f002 ff16 	bl	8007a9c <HAL_RCC_OscConfig>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bf14      	ite	ne
 8004c76:	2301      	movne	r3, #1
 8004c78:	2300      	moveq	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d001      	beq.n	8004c84 <_Z18SystemClock_Configv+0xa4>
  {
    Error_Handler();
 8004c80:	f000 f8da 	bl	8004e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c84:	230f      	movs	r3, #15
 8004c86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c96:	2300      	movs	r3, #0
 8004c98:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c9a:	f107 030c 	add.w	r3, r7, #12
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f003 f96b 	bl	8007f7c <HAL_RCC_ClockConfig>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	bf14      	ite	ne
 8004cac:	2301      	movne	r3, #1
 8004cae:	2300      	moveq	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 8004cb6:	f000 f8bf 	bl	8004e38 <Error_Handler>
  }
}
 8004cba:	bf00      	nop
 8004cbc:	3750      	adds	r7, #80	; 0x50
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40007000 	.word	0x40007000

08004ccc <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004cd0:	4b08      	ldr	r3, [pc, #32]	; (8004cf4 <_ZL11MX_CRC_Initv+0x28>)
 8004cd2:	4a09      	ldr	r2, [pc, #36]	; (8004cf8 <_ZL11MX_CRC_Initv+0x2c>)
 8004cd4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004cd6:	4807      	ldr	r0, [pc, #28]	; (8004cf4 <_ZL11MX_CRC_Initv+0x28>)
 8004cd8:	f002 fd27 	bl	800772a <HAL_CRC_Init>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bf14      	ite	ne
 8004ce2:	2301      	movne	r3, #1
 8004ce4:	2300      	moveq	r3, #0
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d001      	beq.n	8004cf0 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8004cec:	f000 f8a4 	bl	8004e38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004cf0:	bf00      	nop
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	200008ec 	.word	0x200008ec
 8004cf8:	40023000 	.word	0x40023000

08004cfc <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d00:	4b13      	ldr	r3, [pc, #76]	; (8004d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004d02:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <_ZL19MX_USART2_UART_Initv+0x58>)
 8004d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004d06:	4b12      	ldr	r3, [pc, #72]	; (8004d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d0e:	4b10      	ldr	r3, [pc, #64]	; (8004d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d14:	4b0e      	ldr	r3, [pc, #56]	; (8004d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	; (8004d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004d22:	220c      	movs	r2, #12
 8004d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d26:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d2c:	4b08      	ldr	r3, [pc, #32]	; (8004d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d32:	4807      	ldr	r0, [pc, #28]	; (8004d50 <_ZL19MX_USART2_UART_Initv+0x54>)
 8004d34:	f003 fb14 	bl	8008360 <HAL_UART_Init>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bf14      	ite	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	2300      	moveq	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d001      	beq.n	8004d4c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8004d48:	f000 f876 	bl	8004e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004d4c:	bf00      	nop
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	200008f4 	.word	0x200008f4
 8004d54:	40004400 	.word	0x40004400

08004d58 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08a      	sub	sp, #40	; 0x28
 8004d5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	2200      	movs	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
 8004d68:	609a      	str	r2, [r3, #8]
 8004d6a:	60da      	str	r2, [r3, #12]
 8004d6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	4b2d      	ldr	r3, [pc, #180]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d76:	4a2c      	ldr	r2, [pc, #176]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004d78:	f043 0304 	orr.w	r3, r3, #4
 8004d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d7e:	4b2a      	ldr	r3, [pc, #168]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	4b26      	ldr	r3, [pc, #152]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	4a25      	ldr	r2, [pc, #148]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d98:	6313      	str	r3, [r2, #48]	; 0x30
 8004d9a:	4b23      	ldr	r3, [pc, #140]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	4b1f      	ldr	r3, [pc, #124]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	4a1e      	ldr	r2, [pc, #120]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6313      	str	r3, [r2, #48]	; 0x30
 8004db6:	4b1c      	ldr	r3, [pc, #112]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	60bb      	str	r3, [r7, #8]
 8004dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	4b18      	ldr	r3, [pc, #96]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	4a17      	ldr	r2, [pc, #92]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004dcc:	f043 0302 	orr.w	r3, r3, #2
 8004dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd2:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <_ZL12MX_GPIO_Initv+0xd0>)
 8004dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	607b      	str	r3, [r7, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004dde:	2200      	movs	r2, #0
 8004de0:	2120      	movs	r1, #32
 8004de2:	4812      	ldr	r0, [pc, #72]	; (8004e2c <_ZL12MX_GPIO_Initv+0xd4>)
 8004de4:	f002 fe40 	bl	8007a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <_ZL12MX_GPIO_Initv+0xd8>)
 8004df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df2:	2300      	movs	r3, #0
 8004df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004df6:	f107 0314 	add.w	r3, r7, #20
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	480d      	ldr	r0, [pc, #52]	; (8004e34 <_ZL12MX_GPIO_Initv+0xdc>)
 8004dfe:	f002 fcb1 	bl	8007764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004e02:	2320      	movs	r3, #32
 8004e04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e06:	2301      	movs	r3, #1
 8004e08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004e12:	f107 0314 	add.w	r3, r7, #20
 8004e16:	4619      	mov	r1, r3
 8004e18:	4804      	ldr	r0, [pc, #16]	; (8004e2c <_ZL12MX_GPIO_Initv+0xd4>)
 8004e1a:	f002 fca3 	bl	8007764 <HAL_GPIO_Init>

}
 8004e1e:	bf00      	nop
 8004e20:	3728      	adds	r7, #40	; 0x28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40020000 	.word	0x40020000
 8004e30:	10210000 	.word	0x10210000
 8004e34:	40020800 	.word	0x40020800

08004e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 8004e46:	b590      	push	{r4, r7, lr}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fb fb80 	bl	8000554 <__aeabi_i2d>
 8004e54:	4603      	mov	r3, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	ec44 3b10 	vmov	d0, r3, r4
 8004e5c:	f011 fe22 	bl	8016aa4 <sqrt>
 8004e60:	eeb0 7a40 	vmov.f32	s14, s0
 8004e64:	eef0 7a60 	vmov.f32	s15, s1
 8004e68:	eeb0 0a47 	vmov.f32	s0, s14
 8004e6c:	eef0 0a67 	vmov.f32	s1, s15
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd90      	pop	{r4, r7, pc}

08004e76 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8004e76:	b5b0      	push	{r4, r5, r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	ed87 0a01 	vstr	s0, [r7, #4]
 8004e80:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f7fb fb78 	bl	8000578 <__aeabi_f2d>
 8004e88:	4604      	mov	r4, r0
 8004e8a:	460d      	mov	r5, r1
 8004e8c:	6838      	ldr	r0, [r7, #0]
 8004e8e:	f7fb fb61 	bl	8000554 <__aeabi_i2d>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	ec43 2b11 	vmov	d1, r2, r3
 8004e9a:	ec45 4b10 	vmov	d0, r4, r5
 8004e9e:	f011 fc91 	bl	80167c4 <pow>
 8004ea2:	eeb0 7a40 	vmov.f32	s14, s0
 8004ea6:	eef0 7a60 	vmov.f32	s15, s1
    }
 8004eaa:	eeb0 0a47 	vmov.f32	s0, s14
 8004eae:	eef0 0a67 	vmov.f32	s1, s15
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bdb0      	pop	{r4, r5, r7, pc}

08004eb8 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8004eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	60f8      	str	r0, [r7, #12]
 8004ec2:	60b9      	str	r1, [r7, #8]
 8004ec4:	607a      	str	r2, [r7, #4]
 8004ec6:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fc f924 	bl	8001118 <_ZNKSt14_Function_base8_M_emptyEv>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8004ed6:	f7fc f9b1 	bl	800123c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	68dc      	ldr	r4, [r3, #12]
 8004ede:	68fd      	ldr	r5, [r7, #12]
 8004ee0:	f107 0308 	add.w	r3, r7, #8
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fa50 	bl	800538a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004eea:	4606      	mov	r6, r0
 8004eec:	1d3b      	adds	r3, r7, #4
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fa4b 	bl	800538a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	463b      	mov	r3, r7
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fa51 	bl	80053a0 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4642      	mov	r2, r8
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47a0      	blx	r4
 8004f08:	4603      	mov	r3, r0
    }
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004f14 <_ZSt5floorIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    floor(_Tp __x)
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
    { return __builtin_floor(__x); }
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fb fb19 	bl	8000554 <__aeabi_i2d>
 8004f22:	4603      	mov	r3, r0
 8004f24:	460c      	mov	r4, r1
 8004f26:	ec44 3b17 	vmov	d7, r3, r4
 8004f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8004f2e:	eef0 0a67 	vmov.f32	s1, s15
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd90      	pop	{r4, r7, pc}

08004f38 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fa43 	bl	80053ce <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8004f52:	b5b0      	push	{r4, r5, r7, lr}
 8004f54:	b082      	sub	sp, #8
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681c      	ldr	r4, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fa59 	bl	800541c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8004f6a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4629      	mov	r1, r5
 8004f70:	4620      	mov	r0, r4
 8004f72:	f000 fa5e 	bl	8005432 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fa35 	bl	80053e8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bdb0      	pop	{r4, r5, r7, pc}

08004f88 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d00d      	beq.n	8004fba <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x32>
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	683a      	ldr	r2, [r7, #0]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f000 fa5c 	bl	8005464 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f103 0208 	add.w	r2, r3, #8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	605a      	str	r2, [r3, #4]
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8004fb8:	e008      	b.n	8004fcc <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE9push_backERKS3_+0x44>
	  _M_realloc_insert(end(), __x);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f81a 	bl	8004ff4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa60 	bl	800548c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	f107 030c 	add.w	r3, r7, #12
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fadd 	bl	80055a4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	1d1a      	adds	r2, r3, #4
 8005000:	f107 030c 	add.w	r3, r7, #12
 8005004:	4611      	mov	r1, r2
 8005006:	4618      	mov	r0, r3
 8005008:	f000 facc 	bl	80055a4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4618      	mov	r0, r3
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>:
    struct _Iter_comp_iter
    {
      _Compare _M_comp;

      explicit _GLIBCXX14_CONSTEXPR
      _Iter_comp_iter(_Compare __comp)
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	7039      	strb	r1, [r7, #0]
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8005036:	463b      	mov	r3, r7
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff ffec 	bl	8005016 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>:
    };

  template<typename _Compare>
    _GLIBCXX14_CONSTEXPR
    inline _Iter_comp_iter<_Compare>
    __iter_comp_iter(_Compare __comp)
 8005048:	b5b0      	push	{r4, r5, r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	7138      	strb	r0, [r7, #4]
    { return _Iter_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 8005050:	1d3b      	adds	r3, r7, #4
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff ffdf 	bl	8005016 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
 8005058:	f107 030c 	add.w	r3, r7, #12
 800505c:	4629      	mov	r1, r5
 800505e:	4618      	mov	r0, r3
 8005060:	f7ff ffe4 	bl	800502c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1ESA_>
 8005064:	4620      	mov	r0, r4
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bdb0      	pop	{r4, r5, r7, pc}

0800506c <_ZSt4sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEZNS4_L14find_fft_peaksEPNS2_9ei_matrixESC_fftEUlRKS5_SE_E_EvT_SG_T0_>:
   *  The relative ordering of equivalent elements is not preserved, use
   *  @p stable_sort() if this is needed.
  */
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	713a      	strb	r2, [r7, #4]
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ffe5 	bl	8005048 <_ZN9__gnu_cxx5__ops16__iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_15_Iter_comp_iterIT_EESC_>
 800507e:	4622      	mov	r2, r4
 8005080:	68b9      	ldr	r1, [r7, #8]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fa9e 	bl	80055c4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bd90      	pop	{r4, r7, pc}

08005090 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	461a      	mov	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	10db      	asrs	r3, r3, #3
 80050a6:	4618      	mov	r0, r3
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
      }
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b082      	sub	sp, #8
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fb fffa 	bl	80010d6 <_ZNSt14_Function_baseC1Ev>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4618      	mov	r0, r3
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeENSt9result_ofIFRSA_jjS0_EE4typeEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8005102:	b580      	push	{r7, lr}
 8005104:	b086      	sub	sp, #24
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800510c:	6838      	ldr	r0, [r7, #0]
 800510e:	f7ff ffed 	bl	80050ec <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005112:	4603      	mov	r3, r0
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	f107 0308 	add.w	r3, r7, #8
 800511a:	4611      	mov	r1, r2
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fa89 	bl	8005634 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8005122:	f107 0308 	add.w	r3, r7, #8
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	f000 f90d 	bl	8005348 <_ZNSt8functionIFijjPfEE4swapERS2_>
 800512e:	f107 0308 	add.w	r3, r7, #8
 8005132:	4618      	mov	r0, r3
 8005134:	f7fe fae8 	bl	8003708 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8005138:	687b      	ldr	r3, [r7, #4]
	}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4618      	mov	r0, r3
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <_ZNSt8functionIFijjPfEEaSIZN14SignalWithAxes10get_signalEvEUljjS0_E_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeENSt9result_ofIFRSB_jjS0_EE4typeEEE5valueERS2_E4typeEOS9_>:
	operator=(_Functor&& __f)
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8005162:	6838      	ldr	r0, [r7, #0]
 8005164:	f7ff ffed 	bl	8005142 <_ZSt7forwardIZN14SignalWithAxes10get_signalEvEUljjPfE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8005168:	4602      	mov	r2, r0
 800516a:	f107 0308 	add.w	r3, r7, #8
 800516e:	6811      	ldr	r1, [r2, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fa95 	bl	80056a0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>
 8005176:	f107 0308 	add.w	r3, r7, #8
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 f8e3 	bl	8005348 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005182:	f107 0308 	add.w	r3, r7, #8
 8005186:	4618      	mov	r0, r3
 8005188:	f7fe fabe 	bl	8003708 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800518c:	687b      	ldr	r3, [r7, #4]
	}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 800519e:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d201      	bcs.n	80051c6 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	e000      	b.n	80051c8 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80051c6:	687b      	ldr	r3, [r7, #4]
    }
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	881b      	ldrh	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fa92 	bl	800570a <_ZN11flatbuffers12EndianScalarItEET_S1_>
 80051e6:	4603      	mov	r3, r0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff ffca 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005202:	4603      	mov	r3, r0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fa6b 	bl	80056f4 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800521e:	4603      	mov	r3, r0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	460b      	mov	r3, r1
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8005236:	897b      	ldrh	r3, [r7, #10]
 8005238:	4619      	mov	r1, r3
 800523a:	68f8      	ldr	r0, [r7, #12]
 800523c:	f7fe fe12 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005240:	4603      	mov	r3, r0
 8005242:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005244:	8afb      	ldrh	r3, [r7, #22]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	8afb      	ldrh	r3, [r7, #22]
 800524e:	4413      	add	r3, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f7ff ffcd 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8005256:	4603      	mov	r3, r0
 8005258:	e000      	b.n	800525c <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 800525a:	687b      	ldr	r3, [r7, #4]
  }
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 fa58 	bl	8005722 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8005272:	4603      	mov	r3, r0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	4a04      	ldr	r2, [pc, #16]	; (8005298 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	08020498 	.word	0x08020498

0800529c <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff ffe8 	bl	800527c <_ZN6tflite10OpResolverC1Ev>
 80052ac:	4a03      	ldr	r2, [pc, #12]	; (80052bc <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	08020474 	.word	0x08020474

080052c0 <_ZN6tflite22MicroMutableOpResolverILj2EEC1EPNS_13ErrorReporterE>:
namespace tflite {

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7ff ffe5 	bl	800529c <_ZN6tflite15MicroOpResolverC1Ev>
 80052d2:	4a08      	ldr	r2, [pc, #32]	; (80052f4 <_ZN6tflite22MicroMutableOpResolverILj2EEC1EPNS_13ErrorReporterE+0x34>)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	645a      	str	r2, [r3, #68]	; 0x44
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	655a      	str	r2, [r3, #84]	; 0x54
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	659a      	str	r2, [r3, #88]	; 0x58
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	08020450 	.word	0x08020450

080052f8 <_ZN6tflite22MicroMutableOpResolverILj2EE17AddFullyConnectedEv>:
    // function.
    return AddBuiltin(BuiltinOperator_FLOOR,
                      *tflite::ops::micro::Register_FLOOR(), ParseOpData);
  }

  TfLiteStatus AddFullyConnected() {
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED,
                      *tflite::ops::micro::Register_FULLY_CONNECTED(),
 8005300:	f00e fd06 	bl	8013d10 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 8005304:	4602      	mov	r2, r0
                      ParseFullyConnected);
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <_ZN6tflite22MicroMutableOpResolverILj2EE17AddFullyConnectedEv+0x24>)
 8005308:	2109      	movs	r1, #9
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa1c 	bl	8005748 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8005310:	4603      	mov	r3, r0
  }
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	0800d8e9 	.word	0x0800d8e9

08005320 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddSoftmaxEv>:
    // function.
    return AddBuiltin(BuiltinOperator_SIN, *tflite::ops::micro::Register_SIN(),
                      ParseOpData);
  }

  TfLiteStatus AddSoftmax() {
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_SOFTMAX,
                      *tflite::ops::micro::Register_SOFTMAX(), ParseSoftmax);
 8005328:	f00f fe2e 	bl	8014f88 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
 800532c:	4602      	mov	r2, r0
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddSoftmaxEv+0x24>)
 8005330:	2119      	movs	r1, #25
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa08 	bl	8005748 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8005338:	4603      	mov	r3, r0
  }
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	0800da29 	.word	0x0800da29

08005348 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fa80 	bl	800585e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f103 0208 	add.w	r2, r3, #8
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 faa9 	bl	80058c2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f103 020c 	add.w	r2, r3, #12
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	4619      	mov	r1, r3
 800537c:	4610      	mov	r0, r2
 800537e:	f000 faca 	bl	8005916 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4618      	mov	r0, r3
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fadd 	bl	800597e <_ZNSaIN2ei8spectral10processing11freq_peak_tEED1Ev>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EEC1Ev>:
      _Vector_base()
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fabb 	bl	8005954 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implC1Ev>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80053f8:	461a      	mov	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	10db      	asrs	r3, r3, #3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8005402:	461a      	mov	r2, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fac6 	bl	8005996 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>
		      - this->_M_impl._M_start); }
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff ffd2 	bl	80053b6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implD1Ev>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4618      	mov	r0, r3
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800543e:	68b9      	ldr	r1, [r7, #8]
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f000 fabb 	bl	80059bc <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tEEvT_S5_>
    }
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4618      	mov	r0, r3
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ffec 	bl	800544e <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 8005476:	4603      	mov	r3, r0
 8005478:	461a      	mov	r2, r3
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 faaa 	bl	80059d6 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_>
 8005482:	bf00      	nop
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 800548c:	b5b0      	push	{r4, r5, r7, lr}
 800548e:	b08a      	sub	sp, #40	; 0x28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8005498:	4a41      	ldr	r2, [pc, #260]	; (80055a0 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 800549a:	2101      	movs	r1, #1
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fab5 	bl	8005a0c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc>
 80054a2:	6278      	str	r0, [r7, #36]	; 0x24
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      const size_type __elems_before = __position - begin();
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f7ff fd95 	bl	8004fd4 <_ZNSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE5beginEv>
 80054aa:	4603      	mov	r3, r0
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	f107 0214 	add.w	r2, r7, #20
 80054b2:	f107 0308 	add.w	r3, r7, #8
 80054b6:	4611      	mov	r1, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f000 faef 	bl	8005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80054be:	4603      	mov	r3, r0
 80054c0:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fafe 	bl	8005ac8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj>
 80054cc:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80054d2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 80054d8:	69fa      	ldr	r2, [r7, #28]
 80054da:	18d5      	adds	r5, r2, r3
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7ff ffb6 	bl	800544e <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	4629      	mov	r1, r5
 80054e8:	4620      	mov	r0, r4
 80054ea:	f7ff ffbb 	bl	8005464 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE9constructIS3_JRKS3_EEEvRS4_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (this->_M_impl._M_start, __position.base(),
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681c      	ldr	r4, [r3, #0]
 80054f6:	f107 0308 	add.w	r3, r7, #8
 80054fa:	4618      	mov	r0, r3
 80054fc:	f000 faf8 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005500:	4603      	mov	r3, r0
 8005502:	681d      	ldr	r5, [r3, #0]
	     __new_start, _M_get_Tp_allocator());
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff ff88 	bl	800541c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 800550c:	4603      	mov	r3, r0
	  __new_finish
 800550e:	69fa      	ldr	r2, [r7, #28]
 8005510:	4629      	mov	r1, r5
 8005512:	4620      	mov	r0, r4
 8005514:	f000 faf7 	bl	8005b06 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 8005518:	61b8      	str	r0, [r7, #24]

	  ++__new_finish;
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	3308      	adds	r3, #8
 800551e:	61bb      	str	r3, [r7, #24]

	  __new_finish
	    = std::__uninitialized_move_if_noexcept_a
	    (__position.base(), this->_M_impl._M_finish,
 8005520:	f107 0308 	add.w	r3, r7, #8
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fae3 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800552a:	4603      	mov	r3, r0
 800552c:	681c      	ldr	r4, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	685d      	ldr	r5, [r3, #4]
	     __new_finish, _M_get_Tp_allocator());
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff ff71 	bl	800541c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 800553a:	4603      	mov	r3, r0
	  __new_finish
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	4629      	mov	r1, r5
 8005540:	4620      	mov	r0, r4
 8005542:	f000 fae0 	bl	8005b06 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>
 8005546:	61b8      	str	r0, [r7, #24]
	  else
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681c      	ldr	r4, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685d      	ldr	r5, [r3, #4]
		    _M_get_Tp_allocator());
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4618      	mov	r0, r3
 8005554:	f7ff ff62 	bl	800541c <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8005558:	4603      	mov	r3, r0
      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800555a:	461a      	mov	r2, r3
 800555c:	4629      	mov	r1, r5
 800555e:	4620      	mov	r0, r4
 8005560:	f7ff ff67 	bl	8005432 <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tES3_EvT_S5_RSaIT0_E>
      _M_deallocate(this->_M_impl._M_start,
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6819      	ldr	r1, [r3, #0]
		    this->_M_impl._M_end_of_storage
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689b      	ldr	r3, [r3, #8]
		    - this->_M_impl._M_start);
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	10db      	asrs	r3, r3, #3
      _M_deallocate(this->_M_impl._M_start,
 8005578:	461a      	mov	r2, r3
 800557a:	f000 fa0c 	bl	8005996 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>
      this->_M_impl._M_start = __new_start;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	00db      	lsls	r3, r3, #3
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	609a      	str	r2, [r3, #8]
    }
 8005596:	bf00      	nop
 8005598:	3728      	adds	r7, #40	; 0x28
 800559a:	46bd      	mov	sp, r7
 800559c:	bdb0      	pop	{r4, r5, r7, pc}
 800559e:	bf00      	nop
 80055a0:	0801c95c 	.word	0x0801c95c

080055a4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4618      	mov	r0, r3
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	713a      	strb	r2, [r7, #4]
      if (__first != __last)
 80055d0:	f107 0208 	add.w	r2, r7, #8
 80055d4:	f107 030c 	add.w	r3, r7, #12
 80055d8:	4611      	mov	r1, r2
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 faac 	bl	8005b38 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d017      	beq.n	8005616 <_ZSt6__sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x52>
				std::__lg(__last - __first) * 2,
 80055e6:	f107 020c 	add.w	r2, r7, #12
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	4611      	mov	r1, r2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fa53 	bl	8005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 80055f6:	4603      	mov	r3, r0
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7fb fd17 	bl	800102c <_ZSt4__lgi>
 80055fe:	4603      	mov	r3, r0
	  std::__introsort_loop(__first, __last,
 8005600:	005a      	lsls	r2, r3, #1
 8005602:	793b      	ldrb	r3, [r7, #4]
 8005604:	68b9      	ldr	r1, [r7, #8]
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 faae 	bl	8005b68 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
	  std::__final_insertion_sort(__first, __last, __comp);
 800560c:	793a      	ldrb	r2, [r7, #4]
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f000 fae0 	bl	8005bd6 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4618      	mov	r0, r3
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4618      	mov	r0, r3
 8005642:	f7fb fd48 	bl	80010d6 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fafc 	bl	8005c46 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00f      	beq.n	8005674 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8005654:	687c      	ldr	r4, [r7, #4]
 8005656:	463b      	mov	r3, r7
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ffe0 	bl	800561e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800565e:	4603      	mov	r3, r0
 8005660:	4619      	mov	r1, r3
 8005662:	4620      	mov	r0, r4
 8005664:	f000 faff 	bl	8005c66 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a05      	ldr	r2, [pc, #20]	; (8005680 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 800566c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a04      	ldr	r2, [pc, #16]	; (8005684 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8005672:	609a      	str	r2, [r3, #8]
      }
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4618      	mov	r0, r3
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	bd90      	pop	{r4, r7, pc}
 800567e:	bf00      	nop
 8005680:	08005c8b 	.word	0x08005c8b
 8005684:	08005cd3 	.word	0x08005cd3

08005688 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80056a0:	b590      	push	{r4, r7, lr}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fb fd12 	bl	80010d6 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80056b2:	463b      	mov	r3, r7
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fb34 	bl	8005d22 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00f      	beq.n	80056e0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80056c0:	687c      	ldr	r4, [r7, #4]
 80056c2:	463b      	mov	r3, r7
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff ffdf 	bl	8005688 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4619      	mov	r1, r3
 80056ce:	4620      	mov	r0, r4
 80056d0:	f000 fb32 	bl	8005d38 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a05      	ldr	r2, [pc, #20]	; (80056ec <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x4c>)
 80056d8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a04      	ldr	r2, [pc, #16]	; (80056f0 <_ZNSt8functionIFijjPfEEC1IZN14SignalWithAxes10get_signalEvEUljjS0_E_vvEET_+0x50>)
 80056de:	609a      	str	r2, [r3, #8]
      }
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4618      	mov	r0, r3
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd90      	pop	{r4, r7, pc}
 80056ea:	bf00      	nop
 80056ec:	08005d5d 	.word	0x08005d5d
 80056f0:	08005da5 	.word	0x08005da5

080056f4 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
    return t;
 80056fc:	687b      	ldr	r3, [r7, #4]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	4603      	mov	r3, r0
 8005712:	80fb      	strh	r3, [r7, #6]
    return t;
 8005714:	88fb      	ldrh	r3, [r7, #6]
}
 8005716:	4618      	mov	r0, r3
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  EndianCheck();
 800572a:	f7fe fb71 	bl	8003e10 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fd2f 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005738:	4602      	mov	r2, r0
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4413      	add	r3, r2
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 8005748:	b5b0      	push	{r4, r5, r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	460b      	mov	r3, r1
 8005756:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 8005758:	7afb      	ldrb	r3, [r7, #11]
 800575a:	2b20      	cmp	r3, #32
 800575c:	d10b      	bne.n	8005776 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005762:	2b00      	cmp	r3, #0
 8005764:	d005      	beq.n	8005772 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	4934      	ldr	r1, [pc, #208]	; (800583c <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 800576c:	4618      	mov	r0, r3
 800576e:	f007 fefd 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 8005772:	2301      	movs	r3, #1
 8005774:	e05d      	b.n	8005832 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3310      	adds	r3, #16
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	7afa      	ldrb	r2, [r7, #11]
 8005780:	4611      	mov	r1, r2
 8005782:	68f8      	ldr	r0, [r7, #12]
 8005784:	4798      	blx	r3
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	7afa      	ldrb	r2, [r7, #11]
 80057a4:	4926      	ldr	r1, [pc, #152]	; (8005840 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 80057a6:	4618      	mov	r0, r3
 80057a8:	f007 fee0 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e040      	b.n	8005832 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d90c      	bls.n	80057d2 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d006      	beq.n	80057ce <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80057c4:	7afa      	ldrb	r2, [r7, #11]
 80057c6:	2302      	movs	r3, #2
 80057c8:	491e      	ldr	r1, [pc, #120]	; (8005844 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 80057ca:	f007 fecf 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e02f      	b.n	8005832 <_ZN6tflite22MicroMutableOpResolverILj2EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	015b      	lsls	r3, r3, #5
 80057da:	4413      	add	r3, r2
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	1d1c      	adds	r4, r3, #4
 80057e0:	4615      	mov	r5, r2
 80057e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80057ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	7afa      	ldrb	r2, [r7, #11]
 80057f4:	68f9      	ldr	r1, [r7, #12]
 80057f6:	015b      	lsls	r3, r3, #5
 80057f8:	440b      	add	r3, r1
 80057fa:	3318      	adds	r3, #24
 80057fc:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	1c5a      	adds	r2, r3, #1
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	645a      	str	r2, [r3, #68]	; 0x44

    builtin_codes_[num_buitin_ops_] = op;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	7afa      	ldrb	r2, [r7, #11]
 8005812:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    builtin_parsers_[num_buitin_ops_] = parser;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	3312      	adds	r3, #18
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	655a      	str	r2, [r3, #84]	; 0x54

    return kTfLiteOk;
 8005830:	2300      	movs	r3, #0
  }
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bdb0      	pop	{r4, r5, r7, pc}
 800583a:	bf00      	nop
 800583c:	0801c9c4 	.word	0x0801c9c4
 8005840:	0801ca0c 	.word	0x0801ca0c
 8005844:	0801ca5c 	.word	0x0801ca5c

08005848 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	370c      	adds	r7, #12
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr

0800585e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ffed 	bl	8005848 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800586e:	4602      	mov	r2, r0
 8005870:	f107 0308 	add.w	r3, r7, #8
 8005874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005878:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800587c:	6838      	ldr	r0, [r7, #0]
 800587e:	f7ff ffe3 	bl	8005848 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	e892 0003 	ldmia.w	r2, {r0, r1}
 800588a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800588e:	f107 0308 	add.w	r3, r7, #8
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff ffd8 	bl	8005848 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005898:	4602      	mov	r2, r0
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058a0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
 80058ca:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff ffed 	bl	80058ac <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80058d2:	4603      	mov	r3, r0
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80058d8:	6838      	ldr	r0, [r7, #0]
 80058da:	f7ff ffe7 	bl	80058ac <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80058de:	4603      	mov	r3, r0
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80058e6:	f107 030c 	add.w	r3, r7, #12
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7ff ffde 	bl	80058ac <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80058f0:	4603      	mov	r3, r0
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	601a      	str	r2, [r3, #0]
    }
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4618      	mov	r0, r3
 800590c:	370c      	adds	r7, #12
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr

08005916 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff ffed 	bl	8005900 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005926:	4603      	mov	r3, r0
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800592c:	6838      	ldr	r0, [r7, #0]
 800592e:	f7ff ffe7 	bl	8005900 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005932:	4603      	mov	r3, r0
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800593a:	f107 030c 	add.w	r3, r7, #12
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff ffde 	bl	8005900 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005944:	4603      	mov	r3, r0
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	601a      	str	r2, [r3, #0]
    }
 800594c:	bf00      	nop
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 fa73 	bl	8005e48 <_ZNSaIN2ei8spectral10processing11freq_peak_tEEC1Ev>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	609a      	str	r2, [r3, #8]
	{ }
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <_ZNSaIN2ei8spectral10processing11freq_peak_tEED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa6a 	bl	8005e60 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEED1Ev>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
	if (__p)
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE13_M_deallocateEPS3_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	68b9      	ldr	r1, [r7, #8]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fa61 	bl	8005e76 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE10deallocateERS4_PS3_j>
      }
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_ZSt8_DestroyIPN2ei8spectral10processing11freq_peak_tEEvT_S5_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fa63 	bl	8005e94 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2ei8spectral10processing11freq_peak_tEEEvT_S7_>
    }
 80059ce:	bf00      	nop
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_>:
      { return size_t(-1) / sizeof(_Tp); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80059d6:	b590      	push	{r4, r7, lr}
 80059d8:	b085      	sub	sp, #20
 80059da:	af00      	add	r7, sp, #0
 80059dc:	60f8      	str	r0, [r7, #12]
 80059de:	60b9      	str	r1, [r7, #8]
 80059e0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fd33 	bl	800544e <_ZSt7forwardIRKN2ei8spectral10processing11freq_peak_tEEOT_RNSt16remove_referenceIS6_E4typeE>
 80059e8:	4604      	mov	r4, r0
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4619      	mov	r1, r3
 80059ee:	2008      	movs	r0, #8
 80059f0:	f7fb fb2b 	bl	800104a <_ZnwjPv>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d004      	beq.n	8005a04 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE9constructIS4_JRKS4_EEEvPT_DpOT0_+0x2e>
 80059fa:	4622      	mov	r2, r4
 80059fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a00:	e883 0003 	stmia.w	r3, {r0, r1}
 8005a04:	bf00      	nop
 8005a06:	3714      	adds	r7, #20
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd90      	pop	{r4, r7, pc}

08005a0c <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8005a0c:	b590      	push	{r4, r7, lr}
 8005a0e:	b087      	sub	sp, #28
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 fa46 	bl	8005eaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 8005a1e:	4604      	mov	r4, r0
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff fb35 	bl	8005090 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 8005a26:	4603      	mov	r3, r0
 8005a28:	1ae2      	subs	r2, r4, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	bf34      	ite	cc
 8005a30:	2301      	movcc	r3, #1
 8005a32:	2300      	movcs	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x36>
	  __throw_length_error(__N(__s));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f010 fcd5 	bl	80163ec <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + std::max(size(), __n);
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7ff fb24 	bl	8005090 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 8005a48:	4604      	mov	r4, r0
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	f7ff fb20 	bl	8005090 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 8005a50:	4603      	mov	r3, r0
 8005a52:	613b      	str	r3, [r7, #16]
 8005a54:	f107 0208 	add.w	r2, r7, #8
 8005a58:	f107 0310 	add.w	r3, r7, #16
 8005a5c:	4611      	mov	r1, r2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fba4 	bl	80051ac <_ZSt3maxIjERKT_S2_S2_>
 8005a64:	4603      	mov	r3, r0
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4423      	add	r3, r4
 8005a6a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f7ff fb0f 	bl	8005090 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE4sizeEv>
 8005a72:	4602      	mov	r2, r0
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d306      	bcc.n	8005a88 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x7c>
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 fa15 	bl	8005eaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 8005a80:	4602      	mov	r2, r0
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d904      	bls.n	8005a92 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x86>
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fa0e 	bl	8005eaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	e000      	b.n	8005a94 <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE12_M_check_lenEjPKc+0x88>
 8005a92:	697b      	ldr	r3, [r7, #20]
      }
 8005a94:	4618      	mov	r0, r3
 8005a96:	371c      	adds	r7, #28
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd90      	pop	{r4, r7, pc}

08005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f822 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005aac:	4603      	mov	r3, r0
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461c      	mov	r4, r3
 8005ab2:	6838      	ldr	r0, [r7, #0]
 8005ab4:	f000 f81c 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	1ae3      	subs	r3, r4, r3
 8005abe:	10db      	asrs	r3, r3, #3
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd90      	pop	{r4, r7, pc}

08005ac8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d006      	beq.n	8005ae6 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj+0x1e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6839      	ldr	r1, [r7, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f000 f9f5 	bl	8005ecc <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8allocateERS4_j>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	e000      	b.n	8005ae8 <_ZNSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE11_M_allocateEj+0x20>
 8005ae6:	2300      	movs	r3, #0
      }
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4618      	mov	r0, r3
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <_ZSt34__uninitialized_move_if_noexcept_aIPN2ei8spectral10processing11freq_peak_tES4_SaIS3_EET0_T_S7_S6_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8005b06:	b590      	push	{r4, r7, lr}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f9e8 	bl	8005eea <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	68b8      	ldr	r0, [r7, #8]
 8005b1e:	f000 f9e4 	bl	8005eea <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>
 8005b22:	4601      	mov	r1, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f000 f9ed 	bl	8005f08 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_S4_ET0_T_S8_S7_RSaIT1_E>
 8005b2e:	4603      	mov	r3, r0
    }
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd90      	pop	{r4, r7, pc}

08005b38 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005b38:	b590      	push	{r4, r7, lr}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff ffd4 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	681c      	ldr	r4, [r3, #0]
 8005b4c:	6838      	ldr	r0, [r7, #0]
 8005b4e:	f7ff ffcf 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8005b52:	4603      	mov	r3, r0
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	429c      	cmp	r4, r3
 8005b58:	bf14      	ite	ne
 8005b5a:	2301      	movne	r3, #1
 8005b5c:	2300      	moveq	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	4618      	mov	r0, r3
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd90      	pop	{r4, r7, pc}

08005b68 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	703b      	strb	r3, [r7, #0]
      while (__last - __first > int(_S_threshold))
 8005b76:	f107 020c 	add.w	r2, r7, #12
 8005b7a:	f107 0308 	add.w	r3, r7, #8
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7ff ff8b 	bl	8005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b10      	cmp	r3, #16
 8005b8a:	bfcc      	ite	gt
 8005b8c:	2301      	movgt	r3, #1
 8005b8e:	2300      	movle	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d01c      	beq.n	8005bd0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x68>
	  if (__depth_limit == 0)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d106      	bne.n	8005baa <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x42>
	      std::__partial_sort(__first, __last, __last, __comp);
 8005b9c:	783b      	ldrb	r3, [r7, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f9c1 	bl	8005f2a <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>
 8005ba8:	e012      	b.n	8005bd0 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0x68>
	  --__depth_limit;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	607b      	str	r3, [r7, #4]
	  _RandomAccessIterator __cut =
 8005bb0:	783a      	ldrb	r2, [r7, #0]
 8005bb2:	68b9      	ldr	r1, [r7, #8]
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f9cf 	bl	8005f58 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_T0_>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	617b      	str	r3, [r7, #20]
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8005bbe:	783b      	ldrb	r3, [r7, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	68b9      	ldr	r1, [r7, #8]
 8005bc4:	6978      	ldr	r0, [r7, #20]
 8005bc6:	f7ff ffcf 	bl	8005b68 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_>
	  __last = __cut;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	60bb      	str	r3, [r7, #8]
      while (__last - __first > int(_S_threshold))
 8005bce:	e7d2      	b.n	8005b76 <_ZSt16__introsort_loopIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiNS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_T1_+0xe>
    }
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __final_insertion_sort(_RandomAccessIterator __first,
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	713a      	strb	r2, [r7, #4]
      if (__last - __first > int(_S_threshold))
 8005be2:	f107 020c 	add.w	r2, r7, #12
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	4611      	mov	r1, r2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff ff55 	bl	8005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	bfcc      	ite	gt
 8005bf8:	2301      	movgt	r3, #1
 8005bfa:	2300      	movle	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d018      	beq.n	8005c34 <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8005c02:	f107 030c 	add.w	r3, r7, #12
 8005c06:	2110      	movs	r1, #16
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f000 f9e7 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	793a      	ldrb	r2, [r7, #4]
 8005c12:	4619      	mov	r1, r3
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fa04 	bl	8006022 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
	  std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
 8005c1a:	f107 030c 	add.w	r3, r7, #12
 8005c1e:	2110      	movs	r1, #16
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 f9db 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005c26:	4603      	mov	r3, r0
 8005c28:	793a      	ldrb	r2, [r7, #4]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f000 fa64 	bl	80060fa <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8005c32:	e004      	b.n	8005c3e <_ZSt22__final_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x68>
	std::__insertion_sort(__first, __last, __comp);
 8005c34:	793a      	ldrb	r2, [r7, #4]
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f9f2 	bl	8006022 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>
    }
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8005c66:	b590      	push	{r4, r7, lr}
 8005c68:	b085      	sub	sp, #20
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8005c70:	6838      	ldr	r0, [r7, #0]
 8005c72:	f7ff fcd4 	bl	800561e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8005c76:	4603      	mov	r3, r0
 8005c78:	4622      	mov	r2, r4
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fa60 	bl	8006142 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8005c82:	bf00      	nop
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd90      	pop	{r4, r7, pc}

08005c8a <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	607a      	str	r2, [r7, #4]
 8005c96:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fa6d 	bl	8006178 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005ca2:	68b8      	ldr	r0, [r7, #8]
 8005ca4:	f7ff fb71 	bl	800538a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005ca8:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005caa:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f7ff fb6c 	bl	800538a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005cb2:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005cb4:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005cb6:	6838      	ldr	r0, [r7, #0]
 8005cb8:	f7ff fb72 	bl	80053a0 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005cbc:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005cbe:	681b      	ldr	r3, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47a0      	blx	r4
 8005cc8:	4603      	mov	r3, r0
      }
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005cd2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8005cd2:	b5b0      	push	{r4, r5, r7, lr}
 8005cd4:	b086      	sub	sp, #24
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	4613      	mov	r3, r2
 8005cde:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d00d      	beq.n	8005d02 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x30>
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d011      	beq.n	8005d0e <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x3c>
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d114      	bne.n	8005d18 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fa53 	bl	800619a <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	68b8      	ldr	r0, [r7, #8]
 8005cf8:	f000 fa3e 	bl	8006178 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	6023      	str	r3, [r4, #0]
	      break;
 8005d00:	e00a      	b.n	8005d18 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 8005d02:	462a      	mov	r2, r5
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 fa53 	bl	80061b2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8005d0c:	e004      	b.n	8005d18 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 8005d0e:	4621      	mov	r1, r4
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fa69 	bl	80061e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8005d16:	bf00      	nop
	  return false;
 8005d18:	2300      	movs	r3, #0
	}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bdb0      	pop	{r4, r5, r7, pc}

08005d22 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
	  { return true; }
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8005d38:	b590      	push	{r4, r7, lr}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8005d42:	6838      	ldr	r0, [r7, #0]
 8005d44:	f7ff fca0 	bl	8005688 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4622      	mov	r2, r4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fa56 	bl	8006200 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8005d54:	bf00      	nop
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd90      	pop	{r4, r7, pc}

08005d5c <_ZNSt17_Function_handlerIFijjPfEZN14SignalWithAxes10get_signalEvEUljjS0_E_E9_M_invokeERKSt9_Any_dataOjS8_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 fa63 	bl	8006236 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8005d70:	4606      	mov	r6, r0
	    std::forward<_ArgTypes>(__args)...);
 8005d72:	68b8      	ldr	r0, [r7, #8]
 8005d74:	f7ff fb09 	bl	800538a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005d78:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005d7a:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fb04 	bl	800538a <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005d82:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005d84:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005d86:	6838      	ldr	r0, [r7, #0]
 8005d88:	f7ff fb0a 	bl	80053a0 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005d8c:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005d8e:	681b      	ldr	r3, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005d90:	462a      	mov	r2, r5
 8005d92:	4621      	mov	r1, r4
 8005d94:	4630      	mov	r0, r6
 8005d96:	f7fd ff95 	bl	8003cc4 <_ZZN14SignalWithAxes10get_signalEvENKUljjPfE_clEjjS0_>
 8005d9a:	4603      	mov	r3, r0
      }
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005da4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8005da4:	b5b0      	push	{r4, r5, r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	4613      	mov	r3, r2
 8005db0:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8005db2:	79fb      	ldrb	r3, [r7, #7]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d00d      	beq.n	8005dd4 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x30>
 8005db8:	2b03      	cmp	r3, #3
 8005dba:	d011      	beq.n	8005de0 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x3c>
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d114      	bne.n	8005dea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f000 fa49 	bl	8006258 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
 8005dc6:	4604      	mov	r4, r0
 8005dc8:	68b8      	ldr	r0, [r7, #8]
 8005dca:	f000 fa34 	bl	8006236 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	6023      	str	r3, [r4, #0]
	      break;
 8005dd2:	e00a      	b.n	8005dea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_clone(__dest, __source, _Local_storage());
 8005dd4:	462a      	mov	r2, r5
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f000 fa49 	bl	8006270 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8005dde:	e004      	b.n	8005dea <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x46>
	      _M_destroy(__dest, _Local_storage());
 8005de0:	4621      	mov	r1, r4
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 fa5f 	bl	80062a6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8005de8:	bf00      	nop
	  return false;
 8005dea:	2300      	movs	r3, #0
	}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bdb0      	pop	{r4, r5, r7, pc}

08005df4 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d101      	bne.n	8005e0a <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x16>
 8005e06:	2300      	movs	r3, #0
 8005e08:	e018      	b.n	8005e3c <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d210      	bcs.n	8005e3a <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x46>
      const TfLiteRegistration& registration = registrations_[i];
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	015b      	lsls	r3, r3, #5
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	4413      	add	r3, r2
 8005e20:	3304      	adds	r3, #4
 8005e22:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	695a      	ldr	r2, [r3, #20]
 8005e28:	78fb      	ldrb	r3, [r7, #3]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d101      	bne.n	8005e32 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x3e>
        return &registration;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	e004      	b.n	8005e3c <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	3301      	adds	r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	e7e9      	b.n	8005e0e <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8005e3a:	2300      	movs	r3, #0
  }
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <_ZNSaIN2ei8spectral10processing11freq_peak_tEEC1Ev>:
      allocator() throw() { }
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fa34 	bl	80062be <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEEC1Ev>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE10deallocateERS4_PS3_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fa24 	bl	80062d4 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE10deallocateEPS4_j>
 8005e8c:	bf00      	nop
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN2ei8spectral10processing11freq_peak_tEEEvT_S7_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <_ZNKSt6vectorIN2ei8spectral10processing11freq_peak_tESaIS3_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fa26 	bl	8006306 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fa16 	bl	80062ee <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8max_sizeERKS4_>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8allocateERS4_j>:
      allocate(allocator_type& __a, size_type __n)
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fa1e 	bl	800631c <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <_ZSt32__make_move_if_noexcept_iteratorIN2ei8spectral10processing11freq_peak_tESt13move_iteratorIPS3_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8005ef2:	f107 030c 	add.w	r3, r7, #12
 8005ef6:	6879      	ldr	r1, [r7, #4]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 fa2d 	bl	8006358 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4618      	mov	r0, r3
 8005f02:	3710      	adds	r7, #16
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_S4_ET0_T_S8_S7_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fa2b 	bl	8006376 <_ZSt18uninitialized_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>
 8005f20:	4603      	mov	r3, r0
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <_ZSt14__partial_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>:
    __partial_sort(_RandomAccessIterator __first,
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
 8005f36:	703b      	strb	r3, [r7, #0]
      std::__heap_select(__first, __middle, __last, __comp);
 8005f38:	783b      	ldrb	r3, [r7, #0]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	68f8      	ldr	r0, [r7, #12]
 8005f40:	f000 fa2b 	bl	800639a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>
      std::__sort_heap(__first, __middle, __comp);
 8005f44:	463b      	mov	r3, r7
 8005f46:	461a      	mov	r2, r3
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 fa57 	bl	80063fe <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>
    }
 8005f50:	bf00      	nop
 8005f52:	3710      	adds	r7, #16
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <_ZSt27__unguarded_partition_pivotIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_T0_>:
    __unguarded_partition_pivot(_RandomAccessIterator __first,
 8005f58:	b590      	push	{r4, r7, lr}
 8005f5a:	b089      	sub	sp, #36	; 0x24
 8005f5c:	af02      	add	r7, sp, #8
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	713a      	strb	r2, [r7, #4]
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8005f64:	f107 020c 	add.w	r2, r7, #12
 8005f68:	f107 0308 	add.w	r3, r7, #8
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7ff fd94 	bl	8005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8005f74:	4603      	mov	r3, r0
 8005f76:	0fda      	lsrs	r2, r3, #31
 8005f78:	4413      	add	r3, r2
 8005f7a:	105b      	asrs	r3, r3, #1
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	4611      	mov	r1, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 f829 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	617b      	str	r3, [r7, #20]
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8005f8e:	f107 030c 	add.w	r3, r7, #12
 8005f92:	2101      	movs	r1, #1
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f821 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	f107 0308 	add.w	r3, r7, #8
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fa51 	bl	800644a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmiEi>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	793b      	ldrb	r3, [r7, #4]
 8005fac:	f88d 3000 	strb.w	r3, [sp]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 fa7c 	bl	80064b4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_>
      return std::__unguarded_partition(__first + 1, __last, __first, __comp);
 8005fbc:	f107 030c 	add.w	r3, r7, #12
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 f80a 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8005fc8:	793b      	ldrb	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	68b9      	ldr	r1, [r7, #8]
 8005fce:	f000 fac6 	bl	800655e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_>
 8005fd2:	4603      	mov	r3, r0
    }
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd90      	pop	{r4, r7, pc}

08005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4413      	add	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	f107 020c 	add.w	r2, r7, #12
 8005ff6:	f107 0308 	add.w	r3, r7, #8
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fad1 	bl	80055a4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4618      	mov	r0, r3
 8006006:	3710      	adds	r7, #16
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __insertion_sort(_RandomAccessIterator __first,
 8006022:	b5b0      	push	{r4, r5, r7, lr}
 8006024:	b088      	sub	sp, #32
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	713a      	strb	r2, [r7, #4]
      if (__first == __last) return;
 800602e:	f107 0208 	add.w	r2, r7, #8
 8006032:	f107 030c 	add.w	r3, r7, #12
 8006036:	4611      	mov	r1, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f000 fad8 	bl	80065ee <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d156      	bne.n	80060f2 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xd0>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8006044:	f107 030c 	add.w	r3, r7, #12
 8006048:	2101      	movs	r1, #1
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff ffc6 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006050:	4603      	mov	r3, r0
 8006052:	61fb      	str	r3, [r7, #28]
 8006054:	f107 0208 	add.w	r2, r7, #8
 8006058:	f107 031c 	add.w	r3, r7, #28
 800605c:	4611      	mov	r1, r2
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fd6a 	bl	8005b38 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d044      	beq.n	80060f4 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xd2>
	  if (__comp(__i, __first))
 800606a:	1d3b      	adds	r3, r7, #4
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	69f9      	ldr	r1, [r7, #28]
 8006070:	4618      	mov	r0, r3
 8006072:	f000 fa03 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d02d      	beq.n	80060d8 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xb6>
		__val = _GLIBCXX_MOVE(*__i);
 800607c:	f107 031c 	add.w	r3, r7, #28
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fadd 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006086:	4603      	mov	r3, r0
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff ffbf 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800608e:	4602      	mov	r2, r0
 8006090:	f107 0314 	add.w	r3, r7, #20
 8006094:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006098:	e883 0003 	stmia.w	r3, {r0, r1}
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 800609c:	f107 031c 	add.w	r3, r7, #28
 80060a0:	2101      	movs	r1, #1
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff ff9a 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 80060a8:	4603      	mov	r3, r0
 80060aa:	461a      	mov	r2, r3
 80060ac:	69f9      	ldr	r1, [r7, #28]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fad2 	bl	8006658 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET0_T_SC_SB_>
	      *__first = _GLIBCXX_MOVE(__val);
 80060b4:	f107 0314 	add.w	r3, r7, #20
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ffa7 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80060be:	4604      	mov	r4, r0
 80060c0:	f107 030c 	add.w	r3, r7, #12
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 fabb 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80060ca:	4603      	mov	r3, r0
 80060cc:	4622      	mov	r2, r4
 80060ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80060d6:	e006      	b.n	80060e6 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0xc4>
	    std::__unguarded_linear_insert(__i,
 80060d8:	7938      	ldrb	r0, [r7, #4]
 80060da:	f000 fae0 	bl	800669e <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 80060de:	4629      	mov	r1, r5
 80060e0:	69f8      	ldr	r0, [r7, #28]
 80060e2:	f000 faef 	bl	80066c4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80060e6:	f107 031c 	add.w	r3, r7, #28
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fa97 	bl	800661e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 80060f0:	e7b0      	b.n	8006054 <_ZSt16__insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x32>
      if (__first == __last) return;
 80060f2:	bf00      	nop
    }
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bdb0      	pop	{r4, r5, r7, pc}

080060fa <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_>:
    __unguarded_insertion_sort(_RandomAccessIterator __first,
 80060fa:	b590      	push	{r4, r7, lr}
 80060fc:	b087      	sub	sp, #28
 80060fe:	af00      	add	r7, sp, #0
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	713a      	strb	r2, [r7, #4]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	f107 0208 	add.w	r2, r7, #8
 800610e:	f107 0314 	add.w	r3, r7, #20
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff fd0f 	bl	8005b38 <_ZN9__gnu_cxxneIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00c      	beq.n	800613a <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x40>
	std::__unguarded_linear_insert(__i,
 8006120:	7938      	ldrb	r0, [r7, #4]
 8006122:	f000 fabc 	bl	800669e <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>
 8006126:	4621      	mov	r1, r4
 8006128:	6978      	ldr	r0, [r7, #20]
 800612a:	f000 facb 	bl	80066c4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800612e:	f107 0314 	add.w	r3, r7, #20
 8006132:	4618      	mov	r0, r3
 8006134:	f000 fa73 	bl	800661e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 8006138:	e7e7      	b.n	800610a <_ZSt26__unguarded_insertion_sortIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_T0_+0x10>
    }
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	bd90      	pop	{r4, r7, pc}

08006142 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006142:	b590      	push	{r4, r7, lr}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800614e:	68b8      	ldr	r0, [r7, #8]
 8006150:	f7ff fa65 	bl	800561e <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006154:	4603      	mov	r3, r0
 8006156:	681c      	ldr	r4, [r3, #0]
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f7fa ffa6 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 800615e:	4603      	mov	r3, r0
 8006160:	4619      	mov	r1, r3
 8006162:	2004      	movs	r0, #4
 8006164:	f7fa ff71 	bl	800104a <_ZnwjPv>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d000      	beq.n	8006170 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE+0x2e>
 800616e:	601c      	str	r4, [r3, #0]
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	bd90      	pop	{r4, r7, pc}

08006178 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 faf4 	bl	800676e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006186:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 8006188:	4618      	mov	r0, r3
 800618a:	f000 fafc 	bl	8006786 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 800618e:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 8006190:	68fb      	ldr	r3, [r7, #12]
	}
 8006192:	4618      	mov	r0, r3
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}

0800619a <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800619a:	b580      	push	{r7, lr}
 800619c:	b082      	sub	sp, #8
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fa ff81 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 80061a8:	4603      	mov	r3, r0
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80061b2:	b590      	push	{r4, r7, lr}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80061be:	68b8      	ldr	r0, [r7, #8]
 80061c0:	f000 fad5 	bl	800676e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 80061c4:	4603      	mov	r3, r0
 80061c6:	681c      	ldr	r4, [r3, #0]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f7fa ff6e 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 80061ce:	4603      	mov	r3, r0
 80061d0:	4619      	mov	r1, r3
 80061d2:	2004      	movs	r0, #4
 80061d4:	f7fa ff39 	bl	800104a <_ZnwjPv>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d000      	beq.n	80061e0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE+0x2e>
 80061de:	601c      	str	r4, [r3, #0]
	}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd90      	pop	{r4, r7, pc}

080061e8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fad2 	bl	800679c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 80061f8:	bf00      	nop
 80061fa:	3708      	adds	r7, #8
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006200:	b590      	push	{r4, r7, lr}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800620c:	68b8      	ldr	r0, [r7, #8]
 800620e:	f7ff fa3b 	bl	8005688 <_ZSt4moveIRZN14SignalWithAxes10get_signalEvEUljjPfE_EONSt16remove_referenceIT_E4typeEOS5_>
 8006212:	4604      	mov	r4, r0
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f7fa ff48 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 800621a:	4603      	mov	r3, r0
 800621c:	4619      	mov	r1, r3
 800621e:	2004      	movs	r0, #4
 8006220:	f7fa ff13 	bl	800104a <_ZnwjPv>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE+0x2e>
 800622a:	6822      	ldr	r2, [r4, #0]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	bd90      	pop	{r4, r7, pc}

08006236 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fab8 	bl	80067b4 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8006244:	4603      	mov	r3, r0
	  const _Functor* __ptr =
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fac0 	bl	80067cc <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>
 800624c:	60f8      	str	r0, [r7, #12]
	  return const_cast<_Functor*>(__ptr);
 800624e:	68fb      	ldr	r3, [r7, #12]
	}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_ZNSt9_Any_data9_M_accessIPZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7fa ff22 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 8006266:	4603      	mov	r3, r0
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006270:	b590      	push	{r4, r7, lr}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800627c:	68b8      	ldr	r0, [r7, #8]
 800627e:	f000 fa99 	bl	80067b4 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>
 8006282:	4604      	mov	r4, r0
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7fa ff10 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 800628a:	4603      	mov	r3, r0
 800628c:	4619      	mov	r1, r3
 800628e:	2004      	movs	r0, #4
 8006290:	f7fa fedb 	bl	800104a <_ZnwjPv>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE+0x2e>
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	601a      	str	r2, [r3, #0]
	}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd90      	pop	{r4, r7, pc}

080062a6 <_ZNSt14_Function_base13_Base_managerIZN14SignalWithAxes10get_signalEvEUljjPfE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b082      	sub	sp, #8
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fa96 	bl	80067e2 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>
	}
 80062b6:	bf00      	nop
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}

080062be <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4618      	mov	r0, r3
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE10deallocateEPS4_j>:
      deallocate(pointer __p, size_type)
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80062e0:	68b8      	ldr	r0, [r7, #8]
 80062e2:	f010 f86d 	bl	80163c0 <_ZdlPv>
      }
 80062e6:	bf00      	nop
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <_ZNSt16allocator_traitsISaIN2ei8spectral10processing11freq_peak_tEEE8max_sizeERKS4_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa7f 	bl	80067fa <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>
 80062fc:	4603      	mov	r3, r0
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <_ZNKSt12_Vector_baseIN2ei8spectral10processing11freq_peak_tESaIS3_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4618      	mov	r0, r3
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 fa66 	bl	80067fa <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>
 800632e:	4602      	mov	r2, r0
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4293      	cmp	r3, r2
 8006334:	bf8c      	ite	hi
 8006336:	2301      	movhi	r3, #1
 8006338:	2300      	movls	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <_ZN9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006340:	f010 f851 	bl	80163e6 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	00db      	lsls	r3, r3, #3
 8006348:	4618      	mov	r0, r3
 800634a:	f010 f820 	bl	801638e <_Znwj>
 800634e:	4603      	mov	r3, r0
      }
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <_ZNSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEEC1ES4_>:
      move_iterator(iterator_type __i)
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	601a      	str	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4618      	mov	r0, r3
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <_ZSt18uninitialized_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006376:	b580      	push	{r7, lr}
 8006378:	b086      	sub	sp, #24
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 fa41 	bl	8006812 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES7_EET0_T_SA_S9_>
 8006390:	4603      	mov	r3, r0
    }
 8006392:	4618      	mov	r0, r3
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}

0800639a <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_>:
    __heap_select(_RandomAccessIterator __first,
 800639a:	b580      	push	{r7, lr}
 800639c:	b086      	sub	sp, #24
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	703b      	strb	r3, [r7, #0]
      std::__make_heap(__first, __middle, __comp);
 80063a8:	463b      	mov	r3, r7
 80063aa:	461a      	mov	r2, r3
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 fa3f 	bl	8006832 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	617b      	str	r3, [r7, #20]
 80063b8:	1d3a      	adds	r2, r7, #4
 80063ba:	f107 0314 	add.w	r3, r7, #20
 80063be:	4611      	mov	r1, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	f000 fa95 	bl	80068f0 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d014      	beq.n	80063f6 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x5c>
	if (__comp(__i, __first))
 80063cc:	463b      	mov	r3, r7
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	6979      	ldr	r1, [r7, #20]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f000 f852 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d005      	beq.n	80063ea <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x50>
	  std::__pop_heap(__first, __middle, __i, __comp);
 80063de:	463b      	mov	r3, r7
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	68b9      	ldr	r1, [r7, #8]
 80063e4:	68f8      	ldr	r0, [r7, #12]
 80063e6:	f000 fa9b 	bl	8006920 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 80063ea:	f107 0314 	add.w	r3, r7, #20
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f915 	bl	800661e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
 80063f4:	e7e0      	b.n	80063b8 <_ZSt13__heap_selectIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_T0_+0x1e>
    }
 80063f6:	bf00      	nop
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>:
      std::__make_heap(__first, __last, __cmp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
		_Compare& __comp)
    {
      while (__last - __first > 1)
 800640a:	f107 020c 	add.w	r2, r7, #12
 800640e:	f107 0308 	add.w	r3, r7, #8
 8006412:	4611      	mov	r1, r2
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fb41 	bl	8005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800641a:	4603      	mov	r3, r0
 800641c:	2b01      	cmp	r3, #1
 800641e:	bfcc      	ite	gt
 8006420:	2301      	movgt	r3, #1
 8006422:	2300      	movle	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00b      	beq.n	8006442 <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0x44>
	{
	  --__last;
 800642a:	f107 0308 	add.w	r3, r7, #8
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fac2 	bl	80069b8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  std::__pop_heap(__first, __last, __last, __comp);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	68b9      	ldr	r1, [r7, #8]
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fa70 	bl	8006920 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>
      while (__last - __first > 1)
 8006440:	e7e3      	b.n	800640a <_ZSt11__sort_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xc>
	}
    }
 8006442:	bf00      	nop
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800644a:	b580      	push	{r7, lr}
 800644c:	b084      	sub	sp, #16
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	00db      	lsls	r3, r3, #3
 800645c:	425b      	negs	r3, r3
 800645e:	4413      	add	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	f107 020c 	add.w	r2, r7, #12
 8006466:	f107 0308 	add.w	r3, r7, #8
 800646a:	4611      	mov	r1, r2
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff f899 	bl	80055a4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>:
        operator()(_Iterator1 __it1, _Iterator2 __it2)
 800647c:	b5b0      	push	{r4, r5, r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
        { return bool(_M_comp(*__it1, *__it2)); }
 8006488:	68fc      	ldr	r4, [r7, #12]
 800648a:	f107 0308 	add.w	r3, r7, #8
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f8d6 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006494:	4605      	mov	r5, r0
 8006496:	1d3b      	adds	r3, r7, #4
 8006498:	4618      	mov	r0, r3
 800649a:	f000 f8d1 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800649e:	4603      	mov	r3, r0
 80064a0:	461a      	mov	r2, r3
 80064a2:	4629      	mov	r1, r5
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7fc f913 	bl	80026d0 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 80064aa:	4603      	mov	r3, r0
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bdb0      	pop	{r4, r5, r7, pc}

080064b4 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_>:
    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
      if (__comp(__a, __b))
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	f107 0018 	add.w	r0, r7, #24
 80064ca:	f7ff ffd7 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d020      	beq.n	8006516 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x62>
	  if (__comp(__b, __c))
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	f107 0018 	add.w	r0, r7, #24
 80064dc:	f7ff ffce 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x3c>
	    std::iter_swap(__result, __b);
 80064e6:	6879      	ldr	r1, [r7, #4]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fa76 	bl	80069da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 80064ee:	e032      	b.n	8006556 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	  else if (__comp(__a, __c))
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	f107 0018 	add.w	r0, r7, #24
 80064f8:	f7ff ffc0 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x58>
	    std::iter_swap(__result, __c);
 8006502:	6839      	ldr	r1, [r7, #0]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fa68 	bl	80069da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 800650a:	e024      	b.n	8006556 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	    std::iter_swap(__result, __a);
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 fa63 	bl	80069da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8006514:	e01f      	b.n	8006556 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
      else if (__comp(__a, __c))
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	f107 0018 	add.w	r0, r7, #24
 800651e:	f7ff ffad 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d004      	beq.n	8006532 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x7e>
	std::iter_swap(__result, __a);
 8006528:	68b9      	ldr	r1, [r7, #8]
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fa55 	bl	80069da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8006530:	e011      	b.n	8006556 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
      else if (__comp(__b, __c))
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	6879      	ldr	r1, [r7, #4]
 8006536:	f107 0018 	add.w	r0, r7, #24
 800653a:	f7ff ff9f 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d004      	beq.n	800654e <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0x9a>
	std::iter_swap(__result, __c);
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 fa47 	bl	80069da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 800654c:	e003      	b.n	8006556 <_ZSt22__move_median_to_firstIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_SJ_T0_+0xa2>
	std::iter_swap(__result, __b);
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f000 fa42 	bl	80069da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
    }
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_>:
    __unguarded_partition(_RandomAccessIterator __first,
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	607a      	str	r2, [r7, #4]
 800656a:	703b      	strb	r3, [r7, #0]
	  while (__comp(__first, __pivot))
 800656c:	463b      	mov	r3, r7
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	68f9      	ldr	r1, [r7, #12]
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff ff82 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d005      	beq.n	800658a <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x2c>
	    ++__first;
 800657e:	f107 030c 	add.w	r3, r7, #12
 8006582:	4618      	mov	r0, r3
 8006584:	f000 f84b 	bl	800661e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
	  while (__comp(__first, __pivot))
 8006588:	e7f0      	b.n	800656c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0xe>
	  --__last;
 800658a:	f107 0308 	add.w	r3, r7, #8
 800658e:	4618      	mov	r0, r3
 8006590:	f000 fa12 	bl	80069b8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  while (__comp(__pivot, __last))
 8006594:	463b      	mov	r3, r7
 8006596:	68ba      	ldr	r2, [r7, #8]
 8006598:	6879      	ldr	r1, [r7, #4]
 800659a:	4618      	mov	r0, r3
 800659c:	f7ff ff6e 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x54>
	    --__last;
 80065a6:	f107 0308 	add.w	r3, r7, #8
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fa04 	bl	80069b8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
	  while (__comp(__pivot, __last))
 80065b0:	e7f0      	b.n	8006594 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x36>
	  if (!(__first < __last))
 80065b2:	f107 0208 	add.w	r2, r7, #8
 80065b6:	f107 030c 	add.w	r3, r7, #12
 80065ba:	4611      	mov	r1, r2
 80065bc:	4618      	mov	r0, r3
 80065be:	f000 f997 	bl	80068f0 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f083 0301 	eor.w	r3, r3, #1
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x74>
	    return __first;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	e009      	b.n	80065e6 <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0x88>
	  std::iter_swap(__first, __last);
 80065d2:	68b9      	ldr	r1, [r7, #8]
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 fa00 	bl	80069da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>
	  ++__first;
 80065da:	f107 030c 	add.w	r3, r7, #12
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f81d 	bl	800661e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>
      while (true)
 80065e4:	e7c2      	b.n	800656c <_ZSt21__unguarded_partitionIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEET_SJ_SJ_SJ_T0_+0xe>
    }
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <_ZN9__gnu_cxxeqIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80065ee:	b590      	push	{r4, r7, lr}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fa79 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 80065fe:	4603      	mov	r3, r0
 8006600:	681c      	ldr	r4, [r3, #0]
 8006602:	6838      	ldr	r0, [r7, #0]
 8006604:	f7ff fa74 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8006608:	4603      	mov	r3, r0
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	429c      	cmp	r4, r3
 800660e:	bf0c      	ite	eq
 8006610:	2301      	moveq	r3, #1
 8006612:	2300      	movne	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	4618      	mov	r0, r3
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	bd90      	pop	{r4, r7, pc}

0800661e <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
	++_M_current;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f103 0208 	add.w	r2, r3, #8
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	601a      	str	r2, [r3, #0]
	return *this;
 8006632:	687b      	ldr	r3, [r7, #4]
      }
 8006634:	4618      	mov	r0, r3
 8006636:	370c      	adds	r7, #12
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <_ZSt13move_backwardIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET0_T_SC_SB_>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
      return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 f9cf 	bl	8006a08 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>
 800666a:	4604      	mov	r4, r0
 800666c:	68b8      	ldr	r0, [r7, #8]
 800666e:	f000 f9cb 	bl	8006a08 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>
 8006672:	4603      	mov	r3, r0
						__result);
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	4619      	mov	r1, r3
 8006678:	4620      	mov	r0, r4
 800667a:	f000 f9d0 	bl	8006a1e <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET1_T0_SC_SB_>
 800667e:	4603      	mov	r3, r0
    }
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	bd90      	pop	{r4, r7, pc}

08006688 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>:
    move(_Tp&& __t) noexcept
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4618      	mov	r0, r3
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <_ZN9__gnu_cxx5__ops15__val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EENS0_14_Val_comp_iterIT_EENS0_15_Iter_comp_iterISC_EE>:
    __val_comp_iter(_Compare __comp)
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }

  template<typename _Compare>
    inline _Val_comp_iter<_Compare>
    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)
 800669e:	b590      	push	{r4, r7, lr}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	7138      	strb	r0, [r7, #4]
    { return _Val_comp_iter<_Compare>(_GLIBCXX_MOVE(__comp)); }
 80066a6:	1d3b      	adds	r3, r7, #4
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff ffed 	bl	8006688 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 80066ae:	4602      	mov	r2, r0
 80066b0:	f107 030c 	add.w	r3, r7, #12
 80066b4:	4611      	mov	r1, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f9d7 	bl	8006a6a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
 80066bc:	4620      	mov	r0, r4
 80066be:	3714      	adds	r7, #20
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd90      	pop	{r4, r7, pc}

080066c4 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_>:
    __unguarded_linear_insert(_RandomAccessIterator __last,
 80066c4:	b590      	push	{r4, r7, lr}
 80066c6:	b087      	sub	sp, #28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	7039      	strb	r1, [r7, #0]
	__val = _GLIBCXX_MOVE(*__last);
 80066ce:	1d3b      	adds	r3, r7, #4
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff ffb5 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80066d6:	4603      	mov	r3, r0
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff fc97 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80066de:	4602      	mov	r2, r0
 80066e0:	f107 0310 	add.w	r3, r7, #16
 80066e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066e8:	e883 0003 	stmia.w	r3, {r0, r1}
      _RandomAccessIterator __next = __last;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	60fb      	str	r3, [r7, #12]
      --__next;
 80066f0:	f107 030c 	add.w	r3, r7, #12
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 f95f 	bl	80069b8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
      while (__comp(__val, __next))
 80066fa:	f107 0110 	add.w	r1, r7, #16
 80066fe:	463b      	mov	r3, r7
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4618      	mov	r0, r3
 8006704:	f000 f9bf 	bl	8006a86 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEEEEbRT_T0_>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d01b      	beq.n	8006746 <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_+0x82>
	  *__last = _GLIBCXX_MOVE(*__next);
 800670e:	f107 030c 	add.w	r3, r7, #12
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff ff94 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006718:	4603      	mov	r3, r0
 800671a:	4618      	mov	r0, r3
 800671c:	f7ff fc76 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006720:	4604      	mov	r4, r0
 8006722:	1d3b      	adds	r3, r7, #4
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff ff8b 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800672a:	4603      	mov	r3, r0
 800672c:	4622      	mov	r2, r4
 800672e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006732:	e883 0003 	stmia.w	r3, {r0, r1}
	  __last = __next;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	607b      	str	r3, [r7, #4]
	  --__next;
 800673a:	f107 030c 	add.w	r3, r7, #12
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f93a 	bl	80069b8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>
      while (__comp(__val, __next))
 8006744:	e7d9      	b.n	80066fa <_ZSt25__unguarded_linear_insertIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops14_Val_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_+0x36>
      *__last = _GLIBCXX_MOVE(__val);
 8006746:	f107 0310 	add.w	r3, r7, #16
 800674a:	4618      	mov	r0, r3
 800674c:	f7ff fc5e 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006750:	4604      	mov	r4, r0
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	4618      	mov	r0, r3
 8006756:	f7ff ff73 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 800675a:	4603      	mov	r3, r0
 800675c:	4622      	mov	r2, r4
 800675e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006762:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	bd90      	pop	{r4, r7, pc}

0800676e <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800676e:	b580      	push	{r7, lr}
 8006770:	b082      	sub	sp, #8
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fa fca2 	bl	80010c0 <_ZNKSt9_Any_data9_M_accessEv>
 800677c:	4603      	mov	r3, r0
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fa fc80 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 80067aa:	4603      	mov	r3, r0
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <_ZNKSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERKT_v>:
      _M_access() const
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7fa fc7f 	bl	80010c0 <_ZNKSt9_Any_data9_M_accessEv>
 80067c2:	4603      	mov	r3, r0
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <_ZSt11__addressofIKZN14SignalWithAxes10get_signalEvEUljjPfE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4618      	mov	r0, r3
 80067d8:	370c      	adds	r7, #12
 80067da:	46bd      	mov	sp, r7
 80067dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e0:	4770      	bx	lr

080067e2 <_ZNSt9_Any_data9_M_accessIZN14SignalWithAxes10get_signalEvEUljjPfE_EERT_v>:
      _M_access()
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fa fc5d 	bl	80010aa <_ZNSt9_Any_data9_M_accessEv>
 80067f0:	4603      	mov	r3, r0
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <_ZNK9__gnu_cxx13new_allocatorIN2ei8spectral10processing11freq_peak_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8006802:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006806:	4618      	mov	r0, r3
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES7_EET0_T_SA_S9_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006812:	b580      	push	{r7, lr}
 8006814:	b084      	sub	sp, #16
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	60b9      	str	r1, [r7, #8]
 800681c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	68f8      	ldr	r0, [r7, #12]
 8006824:	f000 f945 	bl	8006ab2 <_ZSt4copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>
 8006828:	4603      	mov	r3, r0
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_>:
    __make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006832:	b580      	push	{r7, lr}
 8006834:	b08a      	sub	sp, #40	; 0x28
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	607a      	str	r2, [r7, #4]
      if (__last - __first < 2)
 800683e:	f107 020c 	add.w	r2, r7, #12
 8006842:	f107 0308 	add.w	r3, r7, #8
 8006846:	4611      	mov	r1, r2
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff f927 	bl	8005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800684e:	4603      	mov	r3, r0
 8006850:	2b01      	cmp	r3, #1
 8006852:	bfd4      	ite	le
 8006854:	2301      	movle	r3, #1
 8006856:	2300      	movgt	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d142      	bne.n	80068e4 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb2>
      const _DistanceType __len = __last - __first;
 800685e:	f107 020c 	add.w	r2, r7, #12
 8006862:	f107 0308 	add.w	r3, r7, #8
 8006866:	4611      	mov	r1, r2
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff f917 	bl	8005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 800686e:	6238      	str	r0, [r7, #32]
      _DistanceType __parent = (__len - 2) / 2;
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	3b02      	subs	r3, #2
 8006874:	0fda      	lsrs	r2, r3, #31
 8006876:	4413      	add	r3, r2
 8006878:	105b      	asrs	r3, r3, #1
 800687a:	627b      	str	r3, [r7, #36]	; 0x24
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
 800687c:	f107 030c 	add.w	r3, r7, #12
 8006880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fbaa 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006888:	4603      	mov	r3, r0
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	f107 031c 	add.w	r3, r7, #28
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff fed5 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006896:	4603      	mov	r3, r0
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff fbb7 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800689e:	4602      	mov	r2, r0
 80068a0:	f107 0314 	add.w	r3, r7, #20
 80068a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068a8:	e883 0003 	stmia.w	r3, {r0, r1}
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80068ac:	f107 0314 	add.w	r3, r7, #20
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff fbab 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 80068b6:	4603      	mov	r3, r0
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	ed93 7a00 	vldr	s14, [r3]
 80068be:	edd3 7a01 	vldr	s15, [r3, #4]
 80068c2:	7813      	ldrb	r3, [r2, #0]
 80068c4:	eeb0 0a47 	vmov.f32	s0, s14
 80068c8:	eef0 0a67 	vmov.f32	s1, s15
 80068cc:	6a3a      	ldr	r2, [r7, #32]
 80068ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f906 	bl	8006ae2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>
	  if (__parent == 0)
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d005      	beq.n	80068e8 <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb6>
	  __parent--;
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	3b01      	subs	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
      while (true)
 80068e2:	e7cb      	b.n	800687c <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0x4a>
	return;
 80068e4:	bf00      	nop
 80068e6:	e000      	b.n	80068ea <_ZSt11__make_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_RT0_+0xb8>
	    return;
 80068e8:	bf00      	nop
    }
 80068ea:	3728      	adds	r7, #40	; 0x28
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <_ZN9__gnu_cxxltIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEEbRKNS_17__normal_iteratorIT_T0_EESE_>:
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() < __rhs.base(); }
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff f8f8 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8006900:	4603      	mov	r3, r0
 8006902:	681c      	ldr	r4, [r3, #0]
 8006904:	6838      	ldr	r0, [r7, #0]
 8006906:	f7ff f8f3 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 800690a:	4603      	mov	r3, r0
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	429c      	cmp	r4, r3
 8006910:	bf34      	ite	cc
 8006912:	2301      	movcc	r3, #1
 8006914:	2300      	movcs	r3, #0
 8006916:	b2db      	uxtb	r3, r3
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	bd90      	pop	{r4, r7, pc}

08006920 <_ZSt10__pop_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEENS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_SJ_SJ_RT0_>:
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8006920:	b590      	push	{r4, r7, lr}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 800692e:	1d3b      	adds	r3, r7, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7ff fe85 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006936:	4603      	mov	r3, r0
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff fb67 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800693e:	4602      	mov	r2, r0
 8006940:	f107 0310 	add.w	r3, r7, #16
 8006944:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006948:	e883 0003 	stmia.w	r3, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 800694c:	f107 030c 	add.w	r3, r7, #12
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff fe75 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006956:	4603      	mov	r3, r0
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff fb57 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 800695e:	4604      	mov	r4, r0
 8006960:	1d3b      	adds	r3, r7, #4
 8006962:	4618      	mov	r0, r3
 8006964:	f7ff fe6c 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006968:	4603      	mov	r3, r0
 800696a:	4622      	mov	r2, r4
 800696c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006970:	e883 0003 	stmia.w	r3, {r0, r1}
			 _DistanceType(__last - __first),
 8006974:	f107 020c 	add.w	r2, r7, #12
 8006978:	f107 0308 	add.w	r3, r7, #8
 800697c:	4611      	mov	r1, r2
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff f88c 	bl	8005a9c <_ZN9__gnu_cxxmiIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSC_SF_>
 8006984:	4604      	mov	r4, r0
			 _GLIBCXX_MOVE(__value), __comp);
 8006986:	f107 0310 	add.w	r3, r7, #16
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff fb3e 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006990:	4603      	mov	r3, r0
      std::__adjust_heap(__first, _DistanceType(0),
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	ed93 7a00 	vldr	s14, [r3]
 8006998:	edd3 7a01 	vldr	s15, [r3, #4]
 800699c:	7813      	ldrb	r3, [r2, #0]
 800699e:	eeb0 0a47 	vmov.f32	s0, s14
 80069a2:	eef0 0a67 	vmov.f32	s1, s15
 80069a6:	4622      	mov	r2, r4
 80069a8:	2100      	movs	r1, #0
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 f899 	bl	8006ae2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>
    }
 80069b0:	bf00      	nop
 80069b2:	371c      	adds	r7, #28
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd90      	pop	{r4, r7, pc}

080069b8 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	--_M_current;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f1a3 0208 	sub.w	r2, r3, #8
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	601a      	str	r2, [r3, #0]
	return *this;
 80069cc:	687b      	ldr	r3, [r7, #4]
      }
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <_ZSt9iter_swapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_EvT_T0_>:
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 80069da:	b590      	push	{r4, r7, lr}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
 80069e2:	6039      	str	r1, [r7, #0]
      swap(*__a, *__b);
 80069e4:	1d3b      	adds	r3, r7, #4
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff fe2a 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80069ec:	4604      	mov	r4, r0
 80069ee:	463b      	mov	r3, r7
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fe25 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 80069f6:	4603      	mov	r3, r0
 80069f8:	4619      	mov	r1, r3
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 f934 	bl	8006c68 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>
    }
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd90      	pop	{r4, r7, pc}

08006a08 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEET_SB_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <_ZSt23__copy_move_backward_a2ILb1EN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEESA_ET1_T0_SC_SB_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8006a1e:	b5b0      	push	{r4, r5, r7, lr}
 8006a20:	b086      	sub	sp, #24
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 f943 	bl	8006cb6 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8006a30:	4604      	mov	r4, r0
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	f000 f93f 	bl	8006cb6 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8006a38:	4605      	mov	r5, r0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f93b 	bl	8006cb6 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461a      	mov	r2, r3
 8006a44:	4629      	mov	r1, r5
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 f943 	bl	8006cd2 <_ZSt22__copy_move_backward_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	617b      	str	r3, [r7, #20]
		   std::__niter_base(__result)));
 8006a50:	f107 0214 	add.w	r2, r7, #20
 8006a54:	f107 0310 	add.w	r3, r7, #16
 8006a58:	4611      	mov	r1, r2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fda2 	bl	80055a4 <_ZN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEC1ERKS5_>
 8006a60:	693b      	ldr	r3, [r7, #16]
    }
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bdb0      	pop	{r4, r5, r7, pc}

08006a6a <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe facd 	bl	8005016 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3708      	adds	r7, #8
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <_ZN9__gnu_cxx5__ops14_Val_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclIS7_NS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEEEEbRT_T0_>:
	operator()(_Value& __val, _Iterator __it)
 8006a86:	b590      	push	{r4, r7, lr}
 8006a88:	b085      	sub	sp, #20
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	60f8      	str	r0, [r7, #12]
 8006a8e:	60b9      	str	r1, [r7, #8]
 8006a90:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(__val, *__it)); }
 8006a92:	68fc      	ldr	r4, [r7, #12]
 8006a94:	1d3b      	adds	r3, r7, #4
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fdd2 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	68b9      	ldr	r1, [r7, #8]
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7fb fe14 	bl	80026d0 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd90      	pop	{r4, r7, pc}

08006ab2 <_ZSt4copyISt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEES5_ET0_T_S8_S7_>:
    copy(_II __first, _II __last, _OI __result)
 8006ab2:	b590      	push	{r4, r7, lr}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8006abe:	68f8      	ldr	r0, [r7, #12]
 8006ac0:	f000 f919 	bl	8006cf6 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	68b8      	ldr	r0, [r7, #8]
 8006ac8:	f000 f915 	bl	8006cf6 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006acc:	4603      	mov	r3, r0
	       __result));
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 f920 	bl	8006d18 <_ZSt14__copy_move_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8006ad8:	4603      	mov	r3, r0
    }
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd90      	pop	{r4, r7, pc}

08006ae2 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8006ae2:	b590      	push	{r4, r7, lr}
 8006ae4:	b08f      	sub	sp, #60	; 0x3c
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6178      	str	r0, [r7, #20]
 8006aea:	6139      	str	r1, [r7, #16]
 8006aec:	60fa      	str	r2, [r7, #12]
 8006aee:	eeb0 7a40 	vmov.f32	s14, s0
 8006af2:	eef0 7a60 	vmov.f32	s15, s1
 8006af6:	703b      	strb	r3, [r7, #0]
 8006af8:	ed87 7a01 	vstr	s14, [r7, #4]
 8006afc:	edc7 7a02 	vstr	s15, [r7, #8]
      const _Distance __topIndex = __holeIndex;
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	633b      	str	r3, [r7, #48]	; 0x30
      _Distance __secondChild = __holeIndex;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	637b      	str	r3, [r7, #52]	; 0x34
      while (__secondChild < (__len - 1) / 2)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	0fda      	lsrs	r2, r3, #31
 8006b0e:	4413      	add	r3, r2
 8006b10:	105b      	asrs	r3, r3, #1
 8006b12:	461a      	mov	r2, r3
 8006b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b16:	4293      	cmp	r3, r2
 8006b18:	da46      	bge.n	8006ba8 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0xc6>
	  __secondChild = 2 * (__secondChild + 1);
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	005b      	lsls	r3, r3, #1
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
	  if (__comp(__first + __secondChild,
 8006b22:	f107 0314 	add.w	r3, r7, #20
 8006b26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fa57 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006b2e:	4604      	mov	r4, r0
 8006b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b32:	1e5a      	subs	r2, r3, #1
 8006b34:	f107 0314 	add.w	r3, r7, #20
 8006b38:	4611      	mov	r1, r2
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f7ff fa4e 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006b40:	4602      	mov	r2, r0
 8006b42:	463b      	mov	r3, r7
 8006b44:	4621      	mov	r1, r4
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff fc98 	bl	800647c <_ZN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEESI_EEbT_T0_>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x76>
	    __secondChild--;
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	3b01      	subs	r3, #1
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8006b58:	f107 0314 	add.w	r3, r7, #20
 8006b5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff fa3c 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006b64:	4603      	mov	r3, r0
 8006b66:	623b      	str	r3, [r7, #32]
 8006b68:	f107 0320 	add.w	r3, r7, #32
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7ff fd67 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006b72:	4603      	mov	r3, r0
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff fa49 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006b7a:	4604      	mov	r4, r0
 8006b7c:	f107 0314 	add.w	r3, r7, #20
 8006b80:	6939      	ldr	r1, [r7, #16]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff fa2a 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b90:	4618      	mov	r0, r3
 8006b92:	f7ff fd55 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006b96:	4603      	mov	r3, r0
 8006b98:	4622      	mov	r2, r4
 8006b9a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b9e:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild;
 8006ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ba4:	613b      	str	r3, [r7, #16]
      while (__secondChild < (__len - 1) / 2)
 8006ba6:	e7af      	b.n	8006b08 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x26>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d136      	bne.n	8006c20 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x13e>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	3b02      	subs	r3, #2
 8006bb6:	0fda      	lsrs	r2, r3, #31
 8006bb8:	4413      	add	r3, r2
 8006bba:	105b      	asrs	r3, r3, #1
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d12d      	bne.n	8006c20 <_ZSt13__adjust_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops15_Iter_comp_iterIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_T2_+0x13e>
	  __secondChild = 2 * (__secondChild + 1);
 8006bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	005b      	lsls	r3, r3, #1
 8006bca:	637b      	str	r3, [r7, #52]	; 0x34
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8006bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bce:	1e5a      	subs	r2, r3, #1
 8006bd0:	f107 0314 	add.w	r3, r7, #20
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f7ff fa00 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8006be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff fd2b 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006bea:	4603      	mov	r3, r0
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fa0d 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	f107 0314 	add.w	r3, r7, #20
 8006bf8:	6939      	ldr	r1, [r7, #16]
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff f9ee 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006c00:	4603      	mov	r3, r0
 8006c02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fd19 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	4622      	mov	r2, r4
 8006c12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c16:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __secondChild - 1;
 8006c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	613b      	str	r3, [r7, #16]
	__cmp(_GLIBCXX_MOVE(__comp));
 8006c20:	463b      	mov	r3, r7
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fd30 	bl	8006688 <_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterIZN2ei8spectral10processingL14find_fft_peaksEPNS3_9ei_matrixES7_fftEUlRKNS5_11freq_peak_tESA_E_EEEONSt16remove_referenceIT_E4typeEOSF_>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	f107 031c 	add.w	r3, r7, #28
 8006c2e:	4611      	mov	r1, r2
 8006c30:	4618      	mov	r0, r3
 8006c32:	f000 f88d 	bl	8006d50 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>
		       _GLIBCXX_MOVE(__value), __cmp);
 8006c36:	1d3b      	adds	r3, r7, #4
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff f9e7 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006c3e:	4603      	mov	r3, r0
      std::__push_heap(__first, __holeIndex, __topIndex,
 8006c40:	f107 021c 	add.w	r2, r7, #28
 8006c44:	ed93 7a00 	vldr	s14, [r3]
 8006c48:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	eeb0 0a47 	vmov.f32	s0, s14
 8006c52:	eef0 0a67 	vmov.f32	s1, s15
 8006c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c58:	6939      	ldr	r1, [r7, #16]
 8006c5a:	6978      	ldr	r0, [r7, #20]
 8006c5c:	f000 f886 	bl	8006d6c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_>
    }
 8006c60:	bf00      	nop
 8006c62:	373c      	adds	r7, #60	; 0x3c
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd90      	pop	{r4, r7, pc}

08006c68 <_ZSt4swapIN2ei8spectral10processing11freq_peak_tEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS8_ESt18is_move_assignableIS8_EEE5valueEvE4typeERS8_SI_>:
    swap(_Tp& __a, _Tp& __b)
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff f9ca 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	f107 0308 	add.w	r3, r7, #8
 8006c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c82:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8006c86:	6838      	ldr	r0, [r7, #0]
 8006c88:	f7ff f9c0 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006c94:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8006c98:	f107 0308 	add.w	r3, r7, #8
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff f9b5 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006caa:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006cae:	bf00      	nop
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tESt6vectorIS3_SaIS3_EEET_N9__gnu_cxx17__normal_iteratorIS8_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8006cbe:	1d3b      	adds	r3, r7, #4
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe ff15 	bl	8005af0 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEE4baseEv>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <_ZSt22__copy_move_backward_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b086      	sub	sp, #24
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueType1)
 8006cde:	2301      	movs	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
								 __result);
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f000 f8b7 	bl	8006e5a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8006cec:	4603      	mov	r3, r0
    }
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	4618      	mov	r0, r3
 8006d02:	f000 f8cc 	bl	8006e9e <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>
 8006d06:	4603      	mov	r3, r0
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f8d4 	bl	8006eb6 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	4618      	mov	r0, r3
 8006d12:	3708      	adds	r7, #8
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <_ZSt14__copy_move_a2ILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006d18:	b5b0      	push	{r4, r5, r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f8d1 	bl	8006ecc <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006d2a:	4604      	mov	r4, r0
 8006d2c:	68b8      	ldr	r0, [r7, #8]
 8006d2e:	f000 f8cd 	bl	8006ecc <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006d32:	4605      	mov	r5, r0
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f8c9 	bl	8006ecc <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>
 8006d3a:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 f8ce 	bl	8006ee2 <_ZSt13__copy_move_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>
 8006d46:	4603      	mov	r3, r0
    }
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3710      	adds	r7, #16
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bdb0      	pop	{r4, r5, r7, pc}

08006d50 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EC1EONS0_15_Iter_comp_iterISA_EE>:
      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
	: _M_comp(std::move(__comp._M_comp))
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fe f95a 	bl	8005016 <_ZSt4moveIRZN2ei8spectral10processingL14find_fft_peaksEPNS0_9ei_matrixES4_fftEUlRKNS2_11freq_peak_tES7_E_EONSt16remove_referenceIT_E4typeEOSB_>
      { }
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_>:
    __push_heap(_RandomAccessIterator __first,
 8006d6c:	b590      	push	{r4, r7, lr}
 8006d6e:	b08b      	sub	sp, #44	; 0x2c
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6178      	str	r0, [r7, #20]
 8006d74:	6139      	str	r1, [r7, #16]
 8006d76:	60fa      	str	r2, [r7, #12]
 8006d78:	eeb0 7a40 	vmov.f32	s14, s0
 8006d7c:	eef0 7a60 	vmov.f32	s15, s1
 8006d80:	603b      	str	r3, [r7, #0]
 8006d82:	ed87 7a01 	vstr	s14, [r7, #4]
 8006d86:	edc7 7a02 	vstr	s15, [r7, #8]
      _Distance __parent = (__holeIndex - 1) / 2;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	0fda      	lsrs	r2, r3, #31
 8006d90:	4413      	add	r3, r2
 8006d92:	105b      	asrs	r3, r3, #1
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	dd10      	ble.n	8006dc0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x54>
 8006d9e:	f107 0314 	add.w	r3, r7, #20
 8006da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff f919 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006daa:	4601      	mov	r1, r0
 8006dac:	1d3b      	adds	r3, r7, #4
 8006dae:	461a      	mov	r2, r3
 8006db0:	6838      	ldr	r0, [r7, #0]
 8006db2:	f000 f8a8 	bl	8006f06 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEES7_EEbT_RT0_>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d001      	beq.n	8006dc0 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x54>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e000      	b.n	8006dc2 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x56>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d02d      	beq.n	8006e22 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0xb6>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8006dc6:	f107 0314 	add.w	r3, r7, #20
 8006dca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff f905 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	61bb      	str	r3, [r7, #24]
 8006dd6:	f107 0318 	add.w	r3, r7, #24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff fc30 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006de0:	4603      	mov	r3, r0
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7ff f912 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006de8:	4604      	mov	r4, r0
 8006dea:	f107 0314 	add.w	r3, r7, #20
 8006dee:	6939      	ldr	r1, [r7, #16]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff f8f3 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006df6:	4603      	mov	r3, r0
 8006df8:	61fb      	str	r3, [r7, #28]
 8006dfa:	f107 031c 	add.w	r3, r7, #28
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff fc1e 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006e04:	4603      	mov	r3, r0
 8006e06:	4622      	mov	r2, r4
 8006e08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e0c:	e883 0003 	stmia.w	r3, {r0, r1}
	  __holeIndex = __parent;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	613b      	str	r3, [r7, #16]
	  __parent = (__holeIndex - 1) / 2;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	0fda      	lsrs	r2, r3, #31
 8006e1a:	4413      	add	r3, r2
 8006e1c:	105b      	asrs	r3, r3, #1
 8006e1e:	627b      	str	r3, [r7, #36]	; 0x24
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8006e20:	e7b9      	b.n	8006d96 <_ZSt11__push_heapIN9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS5_SaIS5_EEEEiS5_NS0_5__ops14_Iter_comp_valIZNS4_L14find_fft_peaksEPNS2_9ei_matrixESE_fftEUlRKS5_SG_E_EEEvT_T0_SK_T1_RT2_+0x2a>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8006e22:	1d3b      	adds	r3, r7, #4
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff f8f1 	bl	800600c <_ZSt4moveIRN2ei8spectral10processing11freq_peak_tEEONSt16remove_referenceIT_E4typeEOS6_>
 8006e2a:	4604      	mov	r4, r0
 8006e2c:	f107 0314 	add.w	r3, r7, #20
 8006e30:	6939      	ldr	r1, [r7, #16]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff f8d2 	bl	8005fdc <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEplEi>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	623b      	str	r3, [r7, #32]
 8006e3c:	f107 0320 	add.w	r3, r7, #32
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff fbfd 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006e46:	4603      	mov	r3, r0
 8006e48:	4622      	mov	r2, r4
 8006e4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e4e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8006e52:	bf00      	nop
 8006e54:	372c      	adds	r7, #44	; 0x2c
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd90      	pop	{r4, r7, pc}

08006e5a <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b086      	sub	sp, #24
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	60f8      	str	r0, [r7, #12]
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	10db      	asrs	r3, r3, #3
 8006e6e:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00a      	beq.n	8006e8c <_ZNSt20__copy_move_backwardILb1ELb1ESt26random_access_iterator_tagE13__copy_move_bIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	00db      	lsls	r3, r3, #3
 8006e7a:	425b      	negs	r3, r3
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	18d0      	adds	r0, r2, r3
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	461a      	mov	r2, r3
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	f012 fa33 	bl	80192f2 <memmove>
	  return __result - _Num;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	00db      	lsls	r3, r3, #3
 8006e90:	425b      	negs	r3, r3
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	4413      	add	r3, r2
	}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3718      	adds	r7, #24
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <_ZNKSt13move_iteratorIPN2ei8spectral10processing11freq_peak_tEE4baseEv>:
      base() const
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <_ZSt12__miter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __miter_base(_Iterator __it)
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <_ZSt12__niter_baseIPN2ei8spectral10processing11freq_peak_tEET_S5_>:
    __niter_base(_Iterator __it)
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	370c      	adds	r7, #12
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <_ZSt13__copy_move_aILb1EPN2ei8spectral10processing11freq_peak_tES4_ET1_T0_S6_S5_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b086      	sub	sp, #24
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivial(_ValueTypeI)
 8006eee:	2301      	movs	r3, #1
 8006ef0:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f81c 	bl	8006f34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>
 8006efc:	4603      	mov	r3, r0
    }
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}

08006f06 <_ZN9__gnu_cxx5__ops14_Iter_comp_valIZN2ei8spectral10processingL14find_fft_peaksEPNS2_9ei_matrixES6_fftEUlRKNS4_11freq_peak_tES9_E_EclINS_17__normal_iteratorIPS7_St6vectorIS7_SaIS7_EEEES7_EEbT_RT0_>:
	operator()(_Iterator __it, _Value& __val)
 8006f06:	b590      	push	{r4, r7, lr}
 8006f08:	b085      	sub	sp, #20
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	60f8      	str	r0, [r7, #12]
 8006f0e:	60b9      	str	r1, [r7, #8]
 8006f10:	607a      	str	r2, [r7, #4]
	{ return bool(_M_comp(*__it, __val)); }
 8006f12:	68fc      	ldr	r4, [r7, #12]
 8006f14:	f107 0308 	add.w	r3, r7, #8
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff fb91 	bl	8006640 <_ZNK9__gnu_cxx17__normal_iteratorIPN2ei8spectral10processing11freq_peak_tESt6vectorIS4_SaIS4_EEEdeEv>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	4619      	mov	r1, r3
 8006f24:	4620      	mov	r0, r4
 8006f26:	f7fb fbd3 	bl	80026d0 <_ZZN2ei8spectral10processingL14find_fft_peaksEPNS_9ei_matrixES3_fftENKUlRKNS1_11freq_peak_tES6_E_clES6_S6_>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd90      	pop	{r4, r7, pc}

08006f34 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	10db      	asrs	r3, r3, #3
 8006f48:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d006      	beq.n	8006f5e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN2ei8spectral10processing11freq_peak_tEEEPT_PKS7_SA_S8_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	461a      	mov	r2, r3
 8006f56:	68f9      	ldr	r1, [r7, #12]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f012 f9ca 	bl	80192f2 <memmove>
	  return __result + _Num;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	4413      	add	r3, r2
	}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <_ZN6tflite22MicroMutableOpResolverILj2EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	4a05      	ldr	r2, [pc, #20]	; (8006f90 <_ZN6tflite22MicroMutableOpResolverILj2EED1Ev+0x20>)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fc fff1 	bl	8003f68 <_ZN6tflite15MicroOpResolverD1Ev>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	08020450 	.word	0x08020450

08006f94 <_ZN6tflite22MicroMutableOpResolverILj2EED0Ev>:
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7ff ffe7 	bl	8006f70 <_ZN6tflite22MicroMutableOpResolverILj2EED1Ev>
 8006fa2:	215c      	movs	r1, #92	; 0x5c
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f00f f9f0 	bl	801638a <_ZdlPvj>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <_Z41__static_initialization_and_destruction_0ii>:
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	6039      	str	r1, [r7, #0]
static tflite::MicroErrorReporter micro_error_reporter;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d107      	bne.n	8006fd4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d102      	bne.n	8006fd4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006fce:	4803      	ldr	r0, [pc, #12]	; (8006fdc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8006fd0:	f7fc ffec 	bl	8003fac <_ZN6tflite18MicroErrorReporterD1Ev>
 8006fd4:	bf00      	nop
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20000050 	.word	0x20000050

08006fe0 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d218      	bcs.n	800702a <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	015b      	lsls	r3, r3, #5
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	4413      	add	r3, r2
 8007000:	3304      	adds	r3, #4
 8007002:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	2b20      	cmp	r3, #32
 800700a:	d10a      	bne.n	8007022 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0x42>
          (strcmp(registration.custom_name, op) == 0)) {
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f7f9 f8e4 	bl	80001e0 <strcmp>
 8007018:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0x42>
        return &registration;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	e004      	b.n	800702c <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3301      	adds	r3, #1
 8007026:	60fb      	str	r3, [r7, #12]
 8007028:	e7e1      	b.n	8006fee <_ZNK6tflite22MicroMutableOpResolverILj2EE6FindOpEPKc+0xe>
    return nullptr;
 800702a:	2300      	movs	r3, #0
  }
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007044:	2b02      	cmp	r3, #2
 8007046:	d901      	bls.n	800704c <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 8007048:	f012 f855 	bl	80190f6 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800704c:	2300      	movs	r3, #0
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	429a      	cmp	r2, r3
 8007058:	d212      	bcs.n	8007080 <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	4413      	add	r3, r2
 8007060:	3348      	adds	r3, #72	; 0x48
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	78fa      	ldrb	r2, [r7, #3]
 8007066:	429a      	cmp	r2, r3
 8007068:	d106      	bne.n	8007078 <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0x44>
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	3312      	adds	r3, #18
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	e004      	b.n	8007082 <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	3301      	adds	r3, #1
 800707c:	60fb      	str	r3, [r7, #12]
 800707e:	e7e7      	b.n	8007050 <_ZNK6tflite22MicroMutableOpResolverILj2EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8007080:	2300      	movs	r3, #0
  }
 8007082:	4618      	mov	r0, r3
 8007084:	3710      	adds	r7, #16
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <_GLOBAL__sub_I_ei_classifier_inferencing_categories>:
 800708a:	b580      	push	{r7, lr}
 800708c:	af00      	add	r7, sp, #0
 800708e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007092:	2001      	movs	r0, #1
 8007094:	f7ff ff8e 	bl	8006fb4 <_Z41__static_initialization_and_destruction_0ii>
 8007098:	bd80      	pop	{r7, pc}

0800709a <_GLOBAL__sub_D_ei_classifier_inferencing_categories>:
 800709a:	b580      	push	{r7, lr}
 800709c:	af00      	add	r7, sp, #0
 800709e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80070a2:	2000      	movs	r0, #0
 80070a4:	f7ff ff86 	bl	8006fb4 <_Z41__static_initialization_and_destruction_0ii>
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070b2:	2300      	movs	r3, #0
 80070b4:	607b      	str	r3, [r7, #4]
 80070b6:	4b10      	ldr	r3, [pc, #64]	; (80070f8 <HAL_MspInit+0x4c>)
 80070b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ba:	4a0f      	ldr	r2, [pc, #60]	; (80070f8 <HAL_MspInit+0x4c>)
 80070bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070c0:	6453      	str	r3, [r2, #68]	; 0x44
 80070c2:	4b0d      	ldr	r3, [pc, #52]	; (80070f8 <HAL_MspInit+0x4c>)
 80070c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070ca:	607b      	str	r3, [r7, #4]
 80070cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80070ce:	2300      	movs	r3, #0
 80070d0:	603b      	str	r3, [r7, #0]
 80070d2:	4b09      	ldr	r3, [pc, #36]	; (80070f8 <HAL_MspInit+0x4c>)
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	4a08      	ldr	r2, [pc, #32]	; (80070f8 <HAL_MspInit+0x4c>)
 80070d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070dc:	6413      	str	r3, [r2, #64]	; 0x40
 80070de:	4b06      	ldr	r3, [pc, #24]	; (80070f8 <HAL_MspInit+0x4c>)
 80070e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070e6:	603b      	str	r3, [r7, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80070ea:	2007      	movs	r0, #7
 80070ec:	f000 faea 	bl	80076c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40023800 	.word	0x40023800

080070fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <HAL_CRC_MspInit+0x3c>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d10d      	bne.n	800712a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	4b0a      	ldr	r3, [pc, #40]	; (800713c <HAL_CRC_MspInit+0x40>)
 8007114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007116:	4a09      	ldr	r2, [pc, #36]	; (800713c <HAL_CRC_MspInit+0x40>)
 8007118:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800711c:	6313      	str	r3, [r2, #48]	; 0x30
 800711e:	4b07      	ldr	r3, [pc, #28]	; (800713c <HAL_CRC_MspInit+0x40>)
 8007120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007122:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800712a:	bf00      	nop
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40023000 	.word	0x40023000
 800713c:	40023800 	.word	0x40023800

08007140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08a      	sub	sp, #40	; 0x28
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007148:	f107 0314 	add.w	r3, r7, #20
 800714c:	2200      	movs	r2, #0
 800714e:	601a      	str	r2, [r3, #0]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	609a      	str	r2, [r3, #8]
 8007154:	60da      	str	r2, [r3, #12]
 8007156:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a19      	ldr	r2, [pc, #100]	; (80071c4 <HAL_UART_MspInit+0x84>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d12b      	bne.n	80071ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007162:	2300      	movs	r3, #0
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	4b18      	ldr	r3, [pc, #96]	; (80071c8 <HAL_UART_MspInit+0x88>)
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	4a17      	ldr	r2, [pc, #92]	; (80071c8 <HAL_UART_MspInit+0x88>)
 800716c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007170:	6413      	str	r3, [r2, #64]	; 0x40
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <HAL_UART_MspInit+0x88>)
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800717a:	613b      	str	r3, [r7, #16]
 800717c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	4b11      	ldr	r3, [pc, #68]	; (80071c8 <HAL_UART_MspInit+0x88>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	4a10      	ldr	r2, [pc, #64]	; (80071c8 <HAL_UART_MspInit+0x88>)
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	6313      	str	r3, [r2, #48]	; 0x30
 800718e:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <HAL_UART_MspInit+0x88>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	f003 0301 	and.w	r3, r3, #1
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800719a:	230c      	movs	r3, #12
 800719c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800719e:	2302      	movs	r3, #2
 80071a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071a6:	2300      	movs	r3, #0
 80071a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80071aa:	2307      	movs	r3, #7
 80071ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ae:	f107 0314 	add.w	r3, r7, #20
 80071b2:	4619      	mov	r1, r3
 80071b4:	4805      	ldr	r0, [pc, #20]	; (80071cc <HAL_UART_MspInit+0x8c>)
 80071b6:	f000 fad5 	bl	8007764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80071ba:	bf00      	nop
 80071bc:	3728      	adds	r7, #40	; 0x28
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40004400 	.word	0x40004400
 80071c8:	40023800 	.word	0x40023800
 80071cc:	40020000 	.word	0x40020000

080071d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80071d4:	bf00      	nop
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80071de:	b480      	push	{r7}
 80071e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80071e2:	e7fe      	b.n	80071e2 <HardFault_Handler+0x4>

080071e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80071e4:	b480      	push	{r7}
 80071e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80071e8:	e7fe      	b.n	80071e8 <MemManage_Handler+0x4>

080071ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80071ea:	b480      	push	{r7}
 80071ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80071ee:	e7fe      	b.n	80071ee <BusFault_Handler+0x4>

080071f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80071f0:	b480      	push	{r7}
 80071f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80071f4:	e7fe      	b.n	80071f4 <UsageFault_Handler+0x4>

080071f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80071f6:	b480      	push	{r7}
 80071f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80071fa:	bf00      	nop
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007204:	b480      	push	{r7}
 8007206:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007208:	bf00      	nop
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007212:	b480      	push	{r7}
 8007214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007216:	bf00      	nop
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007224:	f000 f95a 	bl	80074dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007228:	bf00      	nop
 800722a:	bd80      	pop	{r7, pc}

0800722c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800722c:	b480      	push	{r7}
 800722e:	af00      	add	r7, sp, #0
	return 1;
 8007230:	2301      	movs	r3, #1
}
 8007232:	4618      	mov	r0, r3
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <_kill>:

int _kill(int pid, int sig)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007246:	f011 ff8d 	bl	8019164 <__errno>
 800724a:	4602      	mov	r2, r0
 800724c:	2316      	movs	r3, #22
 800724e:	6013      	str	r3, [r2, #0]
	return -1;
 8007250:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <_exit>:

void _exit (int status)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007264:	f04f 31ff 	mov.w	r1, #4294967295
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7ff ffe7 	bl	800723c <_kill>
	while (1) {}		/* Make sure we hang here */
 800726e:	e7fe      	b.n	800726e <_exit+0x12>

08007270 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800727c:	2300      	movs	r3, #0
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	e00a      	b.n	8007298 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007282:	f3af 8000 	nop.w
 8007286:	4601      	mov	r1, r0
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	60ba      	str	r2, [r7, #8]
 800728e:	b2ca      	uxtb	r2, r1
 8007290:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	3301      	adds	r3, #1
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	429a      	cmp	r2, r3
 800729e:	dbf0      	blt.n	8007282 <_read+0x12>
	}

return len;
 80072a0:	687b      	ldr	r3, [r7, #4]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}

080072aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b086      	sub	sp, #24
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072b6:	2300      	movs	r3, #0
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	e009      	b.n	80072d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	60ba      	str	r2, [r7, #8]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	3301      	adds	r3, #1
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	dbf1      	blt.n	80072bc <_write+0x12>
	}
	return len;
 80072d8:	687b      	ldr	r3, [r7, #4]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <_close>:

int _close(int file)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
	return -1;
 80072ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800730a:	605a      	str	r2, [r3, #4]
	return 0;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	370c      	adds	r7, #12
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <_isatty>:

int _isatty(int file)
{
 800731a:	b480      	push	{r7}
 800731c:	b083      	sub	sp, #12
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
	return 1;
 8007322:	2301      	movs	r3, #1
}
 8007324:	4618      	mov	r0, r3
 8007326:	370c      	adds	r7, #12
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007330:	b480      	push	{r7}
 8007332:	b085      	sub	sp, #20
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
	return 0;
 800733c:	2300      	movs	r3, #0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
	...

0800734c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007354:	4a14      	ldr	r2, [pc, #80]	; (80073a8 <_sbrk+0x5c>)
 8007356:	4b15      	ldr	r3, [pc, #84]	; (80073ac <_sbrk+0x60>)
 8007358:	1ad3      	subs	r3, r2, r3
 800735a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007360:	4b13      	ldr	r3, [pc, #76]	; (80073b0 <_sbrk+0x64>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007368:	4b11      	ldr	r3, [pc, #68]	; (80073b0 <_sbrk+0x64>)
 800736a:	4a12      	ldr	r2, [pc, #72]	; (80073b4 <_sbrk+0x68>)
 800736c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800736e:	4b10      	ldr	r3, [pc, #64]	; (80073b0 <_sbrk+0x64>)
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4413      	add	r3, r2
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	429a      	cmp	r2, r3
 800737a:	d207      	bcs.n	800738c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800737c:	f011 fef2 	bl	8019164 <__errno>
 8007380:	4602      	mov	r2, r0
 8007382:	230c      	movs	r3, #12
 8007384:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007386:	f04f 33ff 	mov.w	r3, #4294967295
 800738a:	e009      	b.n	80073a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800738c:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <_sbrk+0x64>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007392:	4b07      	ldr	r3, [pc, #28]	; (80073b0 <_sbrk+0x64>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4413      	add	r3, r2
 800739a:	4a05      	ldr	r2, [pc, #20]	; (80073b0 <_sbrk+0x64>)
 800739c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800739e:	68fb      	ldr	r3, [r7, #12]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20018000 	.word	0x20018000
 80073ac:	00000400 	.word	0x00000400
 80073b0:	20000934 	.word	0x20000934
 80073b4:	200009e0 	.word	0x200009e0

080073b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073bc:	4b08      	ldr	r3, [pc, #32]	; (80073e0 <SystemInit+0x28>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	4a07      	ldr	r2, [pc, #28]	; (80073e0 <SystemInit+0x28>)
 80073c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80073cc:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <SystemInit+0x28>)
 80073ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80073d2:	609a      	str	r2, [r3, #8]
#endif
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	e000ed00 	.word	0xe000ed00

080073e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80073e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800741c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80073e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80073ea:	e003      	b.n	80073f4 <LoopCopyDataInit>

080073ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80073ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80073f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80073f2:	3104      	adds	r1, #4

080073f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80073f4:	480b      	ldr	r0, [pc, #44]	; (8007424 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80073f6:	4b0c      	ldr	r3, [pc, #48]	; (8007428 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80073f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80073fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80073fc:	d3f6      	bcc.n	80073ec <CopyDataInit>
  ldr  r2, =_sbss
 80073fe:	4a0b      	ldr	r2, [pc, #44]	; (800742c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007400:	e002      	b.n	8007408 <LoopFillZerobss>

08007402 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007402:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007404:	f842 3b04 	str.w	r3, [r2], #4

08007408 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007408:	4b09      	ldr	r3, [pc, #36]	; (8007430 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800740a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800740c:	d3f9      	bcc.n	8007402 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800740e:	f7ff ffd3 	bl	80073b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007412:	f011 ff2f 	bl	8019274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007416:	f7fd fb75 	bl	8004b04 <main>
  bx  lr    
 800741a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800741c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8007420:	0803eb80 	.word	0x0803eb80
  ldr  r0, =_sdata
 8007424:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007428:	2000086c 	.word	0x2000086c
  ldr  r2, =_sbss
 800742c:	2000086c 	.word	0x2000086c
  ldr  r3, = _ebss
 8007430:	200009dc 	.word	0x200009dc

08007434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007434:	e7fe      	b.n	8007434 <ADC_IRQHandler>
	...

08007438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800743c:	4b0e      	ldr	r3, [pc, #56]	; (8007478 <HAL_Init+0x40>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a0d      	ldr	r2, [pc, #52]	; (8007478 <HAL_Init+0x40>)
 8007442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007448:	4b0b      	ldr	r3, [pc, #44]	; (8007478 <HAL_Init+0x40>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a0a      	ldr	r2, [pc, #40]	; (8007478 <HAL_Init+0x40>)
 800744e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007454:	4b08      	ldr	r3, [pc, #32]	; (8007478 <HAL_Init+0x40>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a07      	ldr	r2, [pc, #28]	; (8007478 <HAL_Init+0x40>)
 800745a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007460:	2003      	movs	r0, #3
 8007462:	f000 f92f 	bl	80076c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007466:	2000      	movs	r0, #0
 8007468:	f000 f808 	bl	800747c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800746c:	f7ff fe1e 	bl	80070ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007470:	2300      	movs	r3, #0
}
 8007472:	4618      	mov	r0, r3
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	40023c00 	.word	0x40023c00

0800747c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007484:	4b12      	ldr	r3, [pc, #72]	; (80074d0 <HAL_InitTick+0x54>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	4b12      	ldr	r3, [pc, #72]	; (80074d4 <HAL_InitTick+0x58>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	4619      	mov	r1, r3
 800748e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007492:	fbb3 f3f1 	udiv	r3, r3, r1
 8007496:	fbb2 f3f3 	udiv	r3, r2, r3
 800749a:	4618      	mov	r0, r3
 800749c:	f000 f939 	bl	8007712 <HAL_SYSTICK_Config>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e00e      	b.n	80074c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b0f      	cmp	r3, #15
 80074ae:	d80a      	bhi.n	80074c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074b0:	2200      	movs	r2, #0
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	f000 f90f 	bl	80076da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80074bc:	4a06      	ldr	r2, [pc, #24]	; (80074d8 <HAL_InitTick+0x5c>)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	e000      	b.n	80074c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000638 	.word	0x20000638
 80074d4:	20000640 	.word	0x20000640
 80074d8:	2000063c 	.word	0x2000063c

080074dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80074e0:	4b06      	ldr	r3, [pc, #24]	; (80074fc <HAL_IncTick+0x20>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	4b06      	ldr	r3, [pc, #24]	; (8007500 <HAL_IncTick+0x24>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4413      	add	r3, r2
 80074ec:	4a04      	ldr	r2, [pc, #16]	; (8007500 <HAL_IncTick+0x24>)
 80074ee:	6013      	str	r3, [r2, #0]
}
 80074f0:	bf00      	nop
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	20000640 	.word	0x20000640
 8007500:	200009d4 	.word	0x200009d4

08007504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  return uwTick;
 8007508:	4b03      	ldr	r3, [pc, #12]	; (8007518 <HAL_GetTick+0x14>)
 800750a:	681b      	ldr	r3, [r3, #0]
}
 800750c:	4618      	mov	r0, r3
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	200009d4 	.word	0x200009d4

0800751c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007524:	f7ff ffee 	bl	8007504 <HAL_GetTick>
 8007528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d005      	beq.n	8007542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007536:	4b09      	ldr	r3, [pc, #36]	; (800755c <HAL_Delay+0x40>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	461a      	mov	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007542:	bf00      	nop
 8007544:	f7ff ffde 	bl	8007504 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	429a      	cmp	r2, r3
 8007552:	d8f7      	bhi.n	8007544 <HAL_Delay+0x28>
  {
  }
}
 8007554:	bf00      	nop
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	20000640 	.word	0x20000640

08007560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f003 0307 	and.w	r3, r3, #7
 800756e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007570:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800757c:	4013      	ands	r3, r2
 800757e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800758c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007592:	4a04      	ldr	r2, [pc, #16]	; (80075a4 <__NVIC_SetPriorityGrouping+0x44>)
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	60d3      	str	r3, [r2, #12]
}
 8007598:	bf00      	nop
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr
 80075a4:	e000ed00 	.word	0xe000ed00

080075a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80075ac:	4b04      	ldr	r3, [pc, #16]	; (80075c0 <__NVIC_GetPriorityGrouping+0x18>)
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	0a1b      	lsrs	r3, r3, #8
 80075b2:	f003 0307 	and.w	r3, r3, #7
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr
 80075c0:	e000ed00 	.word	0xe000ed00

080075c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	6039      	str	r1, [r7, #0]
 80075ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	db0a      	blt.n	80075ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	490c      	ldr	r1, [pc, #48]	; (8007610 <__NVIC_SetPriority+0x4c>)
 80075de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e2:	0112      	lsls	r2, r2, #4
 80075e4:	b2d2      	uxtb	r2, r2
 80075e6:	440b      	add	r3, r1
 80075e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80075ec:	e00a      	b.n	8007604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	4908      	ldr	r1, [pc, #32]	; (8007614 <__NVIC_SetPriority+0x50>)
 80075f4:	79fb      	ldrb	r3, [r7, #7]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	3b04      	subs	r3, #4
 80075fc:	0112      	lsls	r2, r2, #4
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	440b      	add	r3, r1
 8007602:	761a      	strb	r2, [r3, #24]
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	e000e100 	.word	0xe000e100
 8007614:	e000ed00 	.word	0xe000ed00

08007618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007618:	b480      	push	{r7}
 800761a:	b089      	sub	sp, #36	; 0x24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f003 0307 	and.w	r3, r3, #7
 800762a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	f1c3 0307 	rsb	r3, r3, #7
 8007632:	2b04      	cmp	r3, #4
 8007634:	bf28      	it	cs
 8007636:	2304      	movcs	r3, #4
 8007638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	3304      	adds	r3, #4
 800763e:	2b06      	cmp	r3, #6
 8007640:	d902      	bls.n	8007648 <NVIC_EncodePriority+0x30>
 8007642:	69fb      	ldr	r3, [r7, #28]
 8007644:	3b03      	subs	r3, #3
 8007646:	e000      	b.n	800764a <NVIC_EncodePriority+0x32>
 8007648:	2300      	movs	r3, #0
 800764a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800764c:	f04f 32ff 	mov.w	r2, #4294967295
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	fa02 f303 	lsl.w	r3, r2, r3
 8007656:	43da      	mvns	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	401a      	ands	r2, r3
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007660:	f04f 31ff 	mov.w	r1, #4294967295
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	fa01 f303 	lsl.w	r3, r1, r3
 800766a:	43d9      	mvns	r1, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007670:	4313      	orrs	r3, r2
         );
}
 8007672:	4618      	mov	r0, r3
 8007674:	3724      	adds	r7, #36	; 0x24
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
	...

08007680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3b01      	subs	r3, #1
 800768c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007690:	d301      	bcc.n	8007696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007692:	2301      	movs	r3, #1
 8007694:	e00f      	b.n	80076b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007696:	4a0a      	ldr	r2, [pc, #40]	; (80076c0 <SysTick_Config+0x40>)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	3b01      	subs	r3, #1
 800769c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800769e:	210f      	movs	r1, #15
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295
 80076a4:	f7ff ff8e 	bl	80075c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80076a8:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <SysTick_Config+0x40>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80076ae:	4b04      	ldr	r3, [pc, #16]	; (80076c0 <SysTick_Config+0x40>)
 80076b0:	2207      	movs	r2, #7
 80076b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	e000e010 	.word	0xe000e010

080076c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f7ff ff47 	bl	8007560 <__NVIC_SetPriorityGrouping>
}
 80076d2:	bf00      	nop
 80076d4:	3708      	adds	r7, #8
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80076da:	b580      	push	{r7, lr}
 80076dc:	b086      	sub	sp, #24
 80076de:	af00      	add	r7, sp, #0
 80076e0:	4603      	mov	r3, r0
 80076e2:	60b9      	str	r1, [r7, #8]
 80076e4:	607a      	str	r2, [r7, #4]
 80076e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80076ec:	f7ff ff5c 	bl	80075a8 <__NVIC_GetPriorityGrouping>
 80076f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	68b9      	ldr	r1, [r7, #8]
 80076f6:	6978      	ldr	r0, [r7, #20]
 80076f8:	f7ff ff8e 	bl	8007618 <NVIC_EncodePriority>
 80076fc:	4602      	mov	r2, r0
 80076fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007702:	4611      	mov	r1, r2
 8007704:	4618      	mov	r0, r3
 8007706:	f7ff ff5d 	bl	80075c4 <__NVIC_SetPriority>
}
 800770a:	bf00      	nop
 800770c:	3718      	adds	r7, #24
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}

08007712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007712:	b580      	push	{r7, lr}
 8007714:	b082      	sub	sp, #8
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff ffb0 	bl	8007680 <SysTick_Config>
 8007720:	4603      	mov	r3, r0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b082      	sub	sp, #8
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d101      	bne.n	800773c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	e00e      	b.n	800775a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	795b      	ldrb	r3, [r3, #5]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d105      	bne.n	8007752 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fcd5 	bl	80070fc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007764:	b480      	push	{r7}
 8007766:	b089      	sub	sp, #36	; 0x24
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007772:	2300      	movs	r3, #0
 8007774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007776:	2300      	movs	r3, #0
 8007778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	e159      	b.n	8007a34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007780:	2201      	movs	r2, #1
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	fa02 f303 	lsl.w	r3, r2, r3
 8007788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	4013      	ands	r3, r2
 8007792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	429a      	cmp	r2, r3
 800779a:	f040 8148 	bne.w	8007a2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d00b      	beq.n	80077be <HAL_GPIO_Init+0x5a>
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d007      	beq.n	80077be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80077b2:	2b11      	cmp	r3, #17
 80077b4:	d003      	beq.n	80077be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	2b12      	cmp	r3, #18
 80077bc:	d130      	bne.n	8007820 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	2203      	movs	r2, #3
 80077ca:	fa02 f303 	lsl.w	r3, r2, r3
 80077ce:	43db      	mvns	r3, r3
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	4013      	ands	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	68da      	ldr	r2, [r3, #12]
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	005b      	lsls	r3, r3, #1
 80077de:	fa02 f303 	lsl.w	r3, r2, r3
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80077f4:	2201      	movs	r2, #1
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	43db      	mvns	r3, r3
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	4013      	ands	r3, r2
 8007802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	685b      	ldr	r3, [r3, #4]
 8007808:	091b      	lsrs	r3, r3, #4
 800780a:	f003 0201 	and.w	r2, r3, #1
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	69ba      	ldr	r2, [r7, #24]
 8007816:	4313      	orrs	r3, r2
 8007818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	69ba      	ldr	r2, [r7, #24]
 800781e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	2203      	movs	r2, #3
 800782c:	fa02 f303 	lsl.w	r3, r2, r3
 8007830:	43db      	mvns	r3, r3
 8007832:	69ba      	ldr	r2, [r7, #24]
 8007834:	4013      	ands	r3, r2
 8007836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	005b      	lsls	r3, r3, #1
 8007840:	fa02 f303 	lsl.w	r3, r2, r3
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	4313      	orrs	r3, r2
 8007848:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b02      	cmp	r3, #2
 8007856:	d003      	beq.n	8007860 <HAL_GPIO_Init+0xfc>
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	2b12      	cmp	r3, #18
 800785e:	d123      	bne.n	80078a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007860:	69fb      	ldr	r3, [r7, #28]
 8007862:	08da      	lsrs	r2, r3, #3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	3208      	adds	r2, #8
 8007868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	f003 0307 	and.w	r3, r3, #7
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	220f      	movs	r2, #15
 8007878:	fa02 f303 	lsl.w	r3, r2, r3
 800787c:	43db      	mvns	r3, r3
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	4013      	ands	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	691a      	ldr	r2, [r3, #16]
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	fa02 f303 	lsl.w	r3, r2, r3
 8007894:	69ba      	ldr	r2, [r7, #24]
 8007896:	4313      	orrs	r3, r2
 8007898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	08da      	lsrs	r2, r3, #3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3208      	adds	r2, #8
 80078a2:	69b9      	ldr	r1, [r7, #24]
 80078a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	005b      	lsls	r3, r3, #1
 80078b2:	2203      	movs	r2, #3
 80078b4:	fa02 f303 	lsl.w	r3, r2, r3
 80078b8:	43db      	mvns	r3, r3
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	4013      	ands	r3, r2
 80078be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	f003 0203 	and.w	r2, r3, #3
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	69ba      	ldr	r2, [r7, #24]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	69ba      	ldr	r2, [r7, #24]
 80078da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 80a2 	beq.w	8007a2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	4b56      	ldr	r3, [pc, #344]	; (8007a48 <HAL_GPIO_Init+0x2e4>)
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	4a55      	ldr	r2, [pc, #340]	; (8007a48 <HAL_GPIO_Init+0x2e4>)
 80078f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078f8:	6453      	str	r3, [r2, #68]	; 0x44
 80078fa:	4b53      	ldr	r3, [pc, #332]	; (8007a48 <HAL_GPIO_Init+0x2e4>)
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007906:	4a51      	ldr	r2, [pc, #324]	; (8007a4c <HAL_GPIO_Init+0x2e8>)
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	089b      	lsrs	r3, r3, #2
 800790c:	3302      	adds	r3, #2
 800790e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	220f      	movs	r2, #15
 800791e:	fa02 f303 	lsl.w	r3, r2, r3
 8007922:	43db      	mvns	r3, r3
 8007924:	69ba      	ldr	r2, [r7, #24]
 8007926:	4013      	ands	r3, r2
 8007928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a48      	ldr	r2, [pc, #288]	; (8007a50 <HAL_GPIO_Init+0x2ec>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d019      	beq.n	8007966 <HAL_GPIO_Init+0x202>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a47      	ldr	r2, [pc, #284]	; (8007a54 <HAL_GPIO_Init+0x2f0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d013      	beq.n	8007962 <HAL_GPIO_Init+0x1fe>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a46      	ldr	r2, [pc, #280]	; (8007a58 <HAL_GPIO_Init+0x2f4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d00d      	beq.n	800795e <HAL_GPIO_Init+0x1fa>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a45      	ldr	r2, [pc, #276]	; (8007a5c <HAL_GPIO_Init+0x2f8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d007      	beq.n	800795a <HAL_GPIO_Init+0x1f6>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a44      	ldr	r2, [pc, #272]	; (8007a60 <HAL_GPIO_Init+0x2fc>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d101      	bne.n	8007956 <HAL_GPIO_Init+0x1f2>
 8007952:	2304      	movs	r3, #4
 8007954:	e008      	b.n	8007968 <HAL_GPIO_Init+0x204>
 8007956:	2307      	movs	r3, #7
 8007958:	e006      	b.n	8007968 <HAL_GPIO_Init+0x204>
 800795a:	2303      	movs	r3, #3
 800795c:	e004      	b.n	8007968 <HAL_GPIO_Init+0x204>
 800795e:	2302      	movs	r3, #2
 8007960:	e002      	b.n	8007968 <HAL_GPIO_Init+0x204>
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <HAL_GPIO_Init+0x204>
 8007966:	2300      	movs	r3, #0
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	f002 0203 	and.w	r2, r2, #3
 800796e:	0092      	lsls	r2, r2, #2
 8007970:	4093      	lsls	r3, r2
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	4313      	orrs	r3, r2
 8007976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007978:	4934      	ldr	r1, [pc, #208]	; (8007a4c <HAL_GPIO_Init+0x2e8>)
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	089b      	lsrs	r3, r3, #2
 800797e:	3302      	adds	r3, #2
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007986:	4b37      	ldr	r3, [pc, #220]	; (8007a64 <HAL_GPIO_Init+0x300>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	43db      	mvns	r3, r3
 8007990:	69ba      	ldr	r2, [r7, #24]
 8007992:	4013      	ands	r3, r2
 8007994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80079aa:	4a2e      	ldr	r2, [pc, #184]	; (8007a64 <HAL_GPIO_Init+0x300>)
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80079b0:	4b2c      	ldr	r3, [pc, #176]	; (8007a64 <HAL_GPIO_Init+0x300>)
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	43db      	mvns	r3, r3
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	4013      	ands	r3, r2
 80079be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d003      	beq.n	80079d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80079d4:	4a23      	ldr	r2, [pc, #140]	; (8007a64 <HAL_GPIO_Init+0x300>)
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079da:	4b22      	ldr	r3, [pc, #136]	; (8007a64 <HAL_GPIO_Init+0x300>)
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	43db      	mvns	r3, r3
 80079e4:	69ba      	ldr	r2, [r7, #24]
 80079e6:	4013      	ands	r3, r2
 80079e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079fe:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <HAL_GPIO_Init+0x300>)
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007a04:	4b17      	ldr	r3, [pc, #92]	; (8007a64 <HAL_GPIO_Init+0x300>)
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	4013      	ands	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a28:	4a0e      	ldr	r2, [pc, #56]	; (8007a64 <HAL_GPIO_Init+0x300>)
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	3301      	adds	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	2b0f      	cmp	r3, #15
 8007a38:	f67f aea2 	bls.w	8007780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	3724      	adds	r7, #36	; 0x24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	40023800 	.word	0x40023800
 8007a4c:	40013800 	.word	0x40013800
 8007a50:	40020000 	.word	0x40020000
 8007a54:	40020400 	.word	0x40020400
 8007a58:	40020800 	.word	0x40020800
 8007a5c:	40020c00 	.word	0x40020c00
 8007a60:	40021000 	.word	0x40021000
 8007a64:	40013c00 	.word	0x40013c00

08007a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	460b      	mov	r3, r1
 8007a72:	807b      	strh	r3, [r7, #2]
 8007a74:	4613      	mov	r3, r2
 8007a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007a78:	787b      	ldrb	r3, [r7, #1]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a7e:	887a      	ldrh	r2, [r7, #2]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007a84:	e003      	b.n	8007a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007a86:	887b      	ldrh	r3, [r7, #2]
 8007a88:	041a      	lsls	r2, r3, #16
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	619a      	str	r2, [r3, #24]
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
	...

08007a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d101      	bne.n	8007aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e25b      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d075      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007aba:	4ba3      	ldr	r3, [pc, #652]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 030c 	and.w	r3, r3, #12
 8007ac2:	2b04      	cmp	r3, #4
 8007ac4:	d00c      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ac6:	4ba0      	ldr	r3, [pc, #640]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d112      	bne.n	8007af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ad2:	4b9d      	ldr	r3, [pc, #628]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ade:	d10b      	bne.n	8007af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae0:	4b99      	ldr	r3, [pc, #612]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d05b      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x108>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d157      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	e236      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b00:	d106      	bne.n	8007b10 <HAL_RCC_OscConfig+0x74>
 8007b02:	4b91      	ldr	r3, [pc, #580]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a90      	ldr	r2, [pc, #576]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	e01d      	b.n	8007b4c <HAL_RCC_OscConfig+0xb0>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b18:	d10c      	bne.n	8007b34 <HAL_RCC_OscConfig+0x98>
 8007b1a:	4b8b      	ldr	r3, [pc, #556]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a8a      	ldr	r2, [pc, #552]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	4b88      	ldr	r3, [pc, #544]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a87      	ldr	r2, [pc, #540]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	e00b      	b.n	8007b4c <HAL_RCC_OscConfig+0xb0>
 8007b34:	4b84      	ldr	r3, [pc, #528]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a83      	ldr	r2, [pc, #524]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	4b81      	ldr	r3, [pc, #516]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a80      	ldr	r2, [pc, #512]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d013      	beq.n	8007b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b54:	f7ff fcd6 	bl	8007504 <HAL_GetTick>
 8007b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b5c:	f7ff fcd2 	bl	8007504 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b64      	cmp	r3, #100	; 0x64
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e1fb      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b6e:	4b76      	ldr	r3, [pc, #472]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f0      	beq.n	8007b5c <HAL_RCC_OscConfig+0xc0>
 8007b7a:	e014      	b.n	8007ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b7c:	f7ff fcc2 	bl	8007504 <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b84:	f7ff fcbe 	bl	8007504 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b64      	cmp	r3, #100	; 0x64
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e1e7      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b96:	4b6c      	ldr	r3, [pc, #432]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f0      	bne.n	8007b84 <HAL_RCC_OscConfig+0xe8>
 8007ba2:	e000      	b.n	8007ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d063      	beq.n	8007c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bb2:	4b65      	ldr	r3, [pc, #404]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 030c 	and.w	r3, r3, #12
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00b      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bbe:	4b62      	ldr	r3, [pc, #392]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d11c      	bne.n	8007c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bca:	4b5f      	ldr	r3, [pc, #380]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d116      	bne.n	8007c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bd6:	4b5c      	ldr	r3, [pc, #368]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <HAL_RCC_OscConfig+0x152>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d001      	beq.n	8007bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e1bb      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bee:	4b56      	ldr	r3, [pc, #344]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	4952      	ldr	r1, [pc, #328]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c02:	e03a      	b.n	8007c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d020      	beq.n	8007c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c0c:	4b4f      	ldr	r3, [pc, #316]	; (8007d4c <HAL_RCC_OscConfig+0x2b0>)
 8007c0e:	2201      	movs	r2, #1
 8007c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c12:	f7ff fc77 	bl	8007504 <HAL_GetTick>
 8007c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c18:	e008      	b.n	8007c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c1a:	f7ff fc73 	bl	8007504 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e19c      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c2c:	4b46      	ldr	r3, [pc, #280]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0f0      	beq.n	8007c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c38:	4b43      	ldr	r3, [pc, #268]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	4940      	ldr	r1, [pc, #256]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	600b      	str	r3, [r1, #0]
 8007c4c:	e015      	b.n	8007c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c4e:	4b3f      	ldr	r3, [pc, #252]	; (8007d4c <HAL_RCC_OscConfig+0x2b0>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c54:	f7ff fc56 	bl	8007504 <HAL_GetTick>
 8007c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007c5c:	f7ff fc52 	bl	8007504 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e17b      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c6e:	4b36      	ldr	r3, [pc, #216]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d1f0      	bne.n	8007c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d030      	beq.n	8007ce8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d016      	beq.n	8007cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c8e:	4b30      	ldr	r3, [pc, #192]	; (8007d50 <HAL_RCC_OscConfig+0x2b4>)
 8007c90:	2201      	movs	r2, #1
 8007c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c94:	f7ff fc36 	bl	8007504 <HAL_GetTick>
 8007c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c9a:	e008      	b.n	8007cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c9c:	f7ff fc32 	bl	8007504 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e15b      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cae:	4b26      	ldr	r3, [pc, #152]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f0      	beq.n	8007c9c <HAL_RCC_OscConfig+0x200>
 8007cba:	e015      	b.n	8007ce8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cbc:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <HAL_RCC_OscConfig+0x2b4>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cc2:	f7ff fc1f 	bl	8007504 <HAL_GetTick>
 8007cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cc8:	e008      	b.n	8007cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007cca:	f7ff fc1b 	bl	8007504 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d901      	bls.n	8007cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e144      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f0      	bne.n	8007cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 80a0 	beq.w	8007e36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d10f      	bne.n	8007d26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d06:	2300      	movs	r3, #0
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	4a0e      	ldr	r2, [pc, #56]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d14:	6413      	str	r3, [r2, #64]	; 0x40
 8007d16:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <HAL_RCC_OscConfig+0x2ac>)
 8007d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1e:	60bb      	str	r3, [r7, #8]
 8007d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d22:	2301      	movs	r3, #1
 8007d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d26:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <HAL_RCC_OscConfig+0x2b8>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d121      	bne.n	8007d76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d32:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <HAL_RCC_OscConfig+0x2b8>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a07      	ldr	r2, [pc, #28]	; (8007d54 <HAL_RCC_OscConfig+0x2b8>)
 8007d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d3e:	f7ff fbe1 	bl	8007504 <HAL_GetTick>
 8007d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d44:	e011      	b.n	8007d6a <HAL_RCC_OscConfig+0x2ce>
 8007d46:	bf00      	nop
 8007d48:	40023800 	.word	0x40023800
 8007d4c:	42470000 	.word	0x42470000
 8007d50:	42470e80 	.word	0x42470e80
 8007d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d58:	f7ff fbd4 	bl	8007504 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e0fd      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d6a:	4b81      	ldr	r3, [pc, #516]	; (8007f70 <HAL_RCC_OscConfig+0x4d4>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d0f0      	beq.n	8007d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689b      	ldr	r3, [r3, #8]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d106      	bne.n	8007d8c <HAL_RCC_OscConfig+0x2f0>
 8007d7e:	4b7d      	ldr	r3, [pc, #500]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d82:	4a7c      	ldr	r2, [pc, #496]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007d84:	f043 0301 	orr.w	r3, r3, #1
 8007d88:	6713      	str	r3, [r2, #112]	; 0x70
 8007d8a:	e01c      	b.n	8007dc6 <HAL_RCC_OscConfig+0x32a>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	2b05      	cmp	r3, #5
 8007d92:	d10c      	bne.n	8007dae <HAL_RCC_OscConfig+0x312>
 8007d94:	4b77      	ldr	r3, [pc, #476]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d98:	4a76      	ldr	r2, [pc, #472]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007d9a:	f043 0304 	orr.w	r3, r3, #4
 8007d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007da0:	4b74      	ldr	r3, [pc, #464]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da4:	4a73      	ldr	r2, [pc, #460]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007da6:	f043 0301 	orr.w	r3, r3, #1
 8007daa:	6713      	str	r3, [r2, #112]	; 0x70
 8007dac:	e00b      	b.n	8007dc6 <HAL_RCC_OscConfig+0x32a>
 8007dae:	4b71      	ldr	r3, [pc, #452]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db2:	4a70      	ldr	r2, [pc, #448]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007db4:	f023 0301 	bic.w	r3, r3, #1
 8007db8:	6713      	str	r3, [r2, #112]	; 0x70
 8007dba:	4b6e      	ldr	r3, [pc, #440]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbe:	4a6d      	ldr	r2, [pc, #436]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007dc0:	f023 0304 	bic.w	r3, r3, #4
 8007dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d015      	beq.n	8007dfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dce:	f7ff fb99 	bl	8007504 <HAL_GetTick>
 8007dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dd4:	e00a      	b.n	8007dec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dd6:	f7ff fb95 	bl	8007504 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e0bc      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dec:	4b61      	ldr	r3, [pc, #388]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0ee      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x33a>
 8007df8:	e014      	b.n	8007e24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dfa:	f7ff fb83 	bl	8007504 <HAL_GetTick>
 8007dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e00:	e00a      	b.n	8007e18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e02:	f7ff fb7f 	bl	8007504 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e0a6      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e18:	4b56      	ldr	r3, [pc, #344]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1c:	f003 0302 	and.w	r3, r3, #2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1ee      	bne.n	8007e02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d105      	bne.n	8007e36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e2a:	4b52      	ldr	r3, [pc, #328]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	4a51      	ldr	r2, [pc, #324]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f000 8092 	beq.w	8007f64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e40:	4b4c      	ldr	r3, [pc, #304]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	f003 030c 	and.w	r3, r3, #12
 8007e48:	2b08      	cmp	r3, #8
 8007e4a:	d05c      	beq.n	8007f06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d141      	bne.n	8007ed8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e54:	4b48      	ldr	r3, [pc, #288]	; (8007f78 <HAL_RCC_OscConfig+0x4dc>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e5a:	f7ff fb53 	bl	8007504 <HAL_GetTick>
 8007e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e60:	e008      	b.n	8007e74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e62:	f7ff fb4f 	bl	8007504 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e078      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e74:	4b3f      	ldr	r3, [pc, #252]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1f0      	bne.n	8007e62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	69da      	ldr	r2, [r3, #28]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	019b      	lsls	r3, r3, #6
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	041b      	lsls	r3, r3, #16
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	061b      	lsls	r3, r3, #24
 8007ea4:	4933      	ldr	r1, [pc, #204]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007eaa:	4b33      	ldr	r3, [pc, #204]	; (8007f78 <HAL_RCC_OscConfig+0x4dc>)
 8007eac:	2201      	movs	r2, #1
 8007eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eb0:	f7ff fb28 	bl	8007504 <HAL_GetTick>
 8007eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eb6:	e008      	b.n	8007eca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eb8:	f7ff fb24 	bl	8007504 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e04d      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eca:	4b2a      	ldr	r3, [pc, #168]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x41c>
 8007ed6:	e045      	b.n	8007f64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ed8:	4b27      	ldr	r3, [pc, #156]	; (8007f78 <HAL_RCC_OscConfig+0x4dc>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ede:	f7ff fb11 	bl	8007504 <HAL_GetTick>
 8007ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ee4:	e008      	b.n	8007ef8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ee6:	f7ff fb0d 	bl	8007504 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d901      	bls.n	8007ef8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e036      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ef8:	4b1e      	ldr	r3, [pc, #120]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1f0      	bne.n	8007ee6 <HAL_RCC_OscConfig+0x44a>
 8007f04:	e02e      	b.n	8007f64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	699b      	ldr	r3, [r3, #24]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d101      	bne.n	8007f12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e029      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f12:	4b18      	ldr	r3, [pc, #96]	; (8007f74 <HAL_RCC_OscConfig+0x4d8>)
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d11c      	bne.n	8007f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d115      	bne.n	8007f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f34:	68fa      	ldr	r2, [r7, #12]
 8007f36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d10d      	bne.n	8007f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d106      	bne.n	8007f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d001      	beq.n	8007f64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e000      	b.n	8007f66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3718      	adds	r7, #24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	40007000 	.word	0x40007000
 8007f74:	40023800 	.word	0x40023800
 8007f78:	42470060 	.word	0x42470060

08007f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b084      	sub	sp, #16
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e0cc      	b.n	800812a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f90:	4b68      	ldr	r3, [pc, #416]	; (8008134 <HAL_RCC_ClockConfig+0x1b8>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d90c      	bls.n	8007fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f9e:	4b65      	ldr	r3, [pc, #404]	; (8008134 <HAL_RCC_ClockConfig+0x1b8>)
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	b2d2      	uxtb	r2, r2
 8007fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fa6:	4b63      	ldr	r3, [pc, #396]	; (8008134 <HAL_RCC_ClockConfig+0x1b8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 030f 	and.w	r3, r3, #15
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d001      	beq.n	8007fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e0b8      	b.n	800812a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0302 	and.w	r3, r3, #2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d020      	beq.n	8008006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d005      	beq.n	8007fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fd0:	4b59      	ldr	r3, [pc, #356]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	4a58      	ldr	r2, [pc, #352]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f003 0308 	and.w	r3, r3, #8
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fe8:	4b53      	ldr	r3, [pc, #332]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4a52      	ldr	r2, [pc, #328]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 8007fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ff4:	4b50      	ldr	r3, [pc, #320]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	494d      	ldr	r1, [pc, #308]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 8008002:	4313      	orrs	r3, r2
 8008004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d044      	beq.n	800809c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	2b01      	cmp	r3, #1
 8008018:	d107      	bne.n	800802a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800801a:	4b47      	ldr	r3, [pc, #284]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d119      	bne.n	800805a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e07f      	b.n	800812a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	2b02      	cmp	r3, #2
 8008030:	d003      	beq.n	800803a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008036:	2b03      	cmp	r3, #3
 8008038:	d107      	bne.n	800804a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800803a:	4b3f      	ldr	r3, [pc, #252]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e06f      	b.n	800812a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800804a:	4b3b      	ldr	r3, [pc, #236]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e067      	b.n	800812a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800805a:	4b37      	ldr	r3, [pc, #220]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f023 0203 	bic.w	r2, r3, #3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	4934      	ldr	r1, [pc, #208]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 8008068:	4313      	orrs	r3, r2
 800806a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800806c:	f7ff fa4a 	bl	8007504 <HAL_GetTick>
 8008070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008072:	e00a      	b.n	800808a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008074:	f7ff fa46 	bl	8007504 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008082:	4293      	cmp	r3, r2
 8008084:	d901      	bls.n	800808a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e04f      	b.n	800812a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800808a:	4b2b      	ldr	r3, [pc, #172]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 020c 	and.w	r2, r3, #12
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	429a      	cmp	r2, r3
 800809a:	d1eb      	bne.n	8008074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800809c:	4b25      	ldr	r3, [pc, #148]	; (8008134 <HAL_RCC_ClockConfig+0x1b8>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 030f 	and.w	r3, r3, #15
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d20c      	bcs.n	80080c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080aa:	4b22      	ldr	r3, [pc, #136]	; (8008134 <HAL_RCC_ClockConfig+0x1b8>)
 80080ac:	683a      	ldr	r2, [r7, #0]
 80080ae:	b2d2      	uxtb	r2, r2
 80080b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080b2:	4b20      	ldr	r3, [pc, #128]	; (8008134 <HAL_RCC_ClockConfig+0x1b8>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 030f 	and.w	r3, r3, #15
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d001      	beq.n	80080c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e032      	b.n	800812a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d008      	beq.n	80080e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080d0:	4b19      	ldr	r3, [pc, #100]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	4916      	ldr	r1, [pc, #88]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080ee:	4b12      	ldr	r3, [pc, #72]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	00db      	lsls	r3, r3, #3
 80080fc:	490e      	ldr	r1, [pc, #56]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008102:	f000 f821 	bl	8008148 <HAL_RCC_GetSysClockFreq>
 8008106:	4601      	mov	r1, r0
 8008108:	4b0b      	ldr	r3, [pc, #44]	; (8008138 <HAL_RCC_ClockConfig+0x1bc>)
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	091b      	lsrs	r3, r3, #4
 800810e:	f003 030f 	and.w	r3, r3, #15
 8008112:	4a0a      	ldr	r2, [pc, #40]	; (800813c <HAL_RCC_ClockConfig+0x1c0>)
 8008114:	5cd3      	ldrb	r3, [r2, r3]
 8008116:	fa21 f303 	lsr.w	r3, r1, r3
 800811a:	4a09      	ldr	r2, [pc, #36]	; (8008140 <HAL_RCC_ClockConfig+0x1c4>)
 800811c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <HAL_RCC_ClockConfig+0x1c8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4618      	mov	r0, r3
 8008124:	f7ff f9aa 	bl	800747c <HAL_InitTick>

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	40023c00 	.word	0x40023c00
 8008138:	40023800 	.word	0x40023800
 800813c:	080205c8 	.word	0x080205c8
 8008140:	20000638 	.word	0x20000638
 8008144:	2000063c 	.word	0x2000063c

08008148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	607b      	str	r3, [r7, #4]
 8008152:	2300      	movs	r3, #0
 8008154:	60fb      	str	r3, [r7, #12]
 8008156:	2300      	movs	r3, #0
 8008158:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800815e:	4b63      	ldr	r3, [pc, #396]	; (80082ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 030c 	and.w	r3, r3, #12
 8008166:	2b04      	cmp	r3, #4
 8008168:	d007      	beq.n	800817a <HAL_RCC_GetSysClockFreq+0x32>
 800816a:	2b08      	cmp	r3, #8
 800816c:	d008      	beq.n	8008180 <HAL_RCC_GetSysClockFreq+0x38>
 800816e:	2b00      	cmp	r3, #0
 8008170:	f040 80b4 	bne.w	80082dc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008174:	4b5e      	ldr	r3, [pc, #376]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008176:	60bb      	str	r3, [r7, #8]
       break;
 8008178:	e0b3      	b.n	80082e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800817a:	4b5e      	ldr	r3, [pc, #376]	; (80082f4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800817c:	60bb      	str	r3, [r7, #8]
      break;
 800817e:	e0b0      	b.n	80082e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008180:	4b5a      	ldr	r3, [pc, #360]	; (80082ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008188:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800818a:	4b58      	ldr	r3, [pc, #352]	; (80082ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d04a      	beq.n	800822c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008196:	4b55      	ldr	r3, [pc, #340]	; (80082ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	099b      	lsrs	r3, r3, #6
 800819c:	f04f 0400 	mov.w	r4, #0
 80081a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80081a4:	f04f 0200 	mov.w	r2, #0
 80081a8:	ea03 0501 	and.w	r5, r3, r1
 80081ac:	ea04 0602 	and.w	r6, r4, r2
 80081b0:	4629      	mov	r1, r5
 80081b2:	4632      	mov	r2, r6
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	f04f 0400 	mov.w	r4, #0
 80081bc:	0154      	lsls	r4, r2, #5
 80081be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80081c2:	014b      	lsls	r3, r1, #5
 80081c4:	4619      	mov	r1, r3
 80081c6:	4622      	mov	r2, r4
 80081c8:	1b49      	subs	r1, r1, r5
 80081ca:	eb62 0206 	sbc.w	r2, r2, r6
 80081ce:	f04f 0300 	mov.w	r3, #0
 80081d2:	f04f 0400 	mov.w	r4, #0
 80081d6:	0194      	lsls	r4, r2, #6
 80081d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80081dc:	018b      	lsls	r3, r1, #6
 80081de:	1a5b      	subs	r3, r3, r1
 80081e0:	eb64 0402 	sbc.w	r4, r4, r2
 80081e4:	f04f 0100 	mov.w	r1, #0
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	00e2      	lsls	r2, r4, #3
 80081ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80081f2:	00d9      	lsls	r1, r3, #3
 80081f4:	460b      	mov	r3, r1
 80081f6:	4614      	mov	r4, r2
 80081f8:	195b      	adds	r3, r3, r5
 80081fa:	eb44 0406 	adc.w	r4, r4, r6
 80081fe:	f04f 0100 	mov.w	r1, #0
 8008202:	f04f 0200 	mov.w	r2, #0
 8008206:	0262      	lsls	r2, r4, #9
 8008208:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800820c:	0259      	lsls	r1, r3, #9
 800820e:	460b      	mov	r3, r1
 8008210:	4614      	mov	r4, r2
 8008212:	4618      	mov	r0, r3
 8008214:	4621      	mov	r1, r4
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f04f 0400 	mov.w	r4, #0
 800821c:	461a      	mov	r2, r3
 800821e:	4623      	mov	r3, r4
 8008220:	f7f8 fd4a 	bl	8000cb8 <__aeabi_uldivmod>
 8008224:	4603      	mov	r3, r0
 8008226:	460c      	mov	r4, r1
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	e049      	b.n	80082c0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800822c:	4b2f      	ldr	r3, [pc, #188]	; (80082ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800822e:	685b      	ldr	r3, [r3, #4]
 8008230:	099b      	lsrs	r3, r3, #6
 8008232:	f04f 0400 	mov.w	r4, #0
 8008236:	f240 11ff 	movw	r1, #511	; 0x1ff
 800823a:	f04f 0200 	mov.w	r2, #0
 800823e:	ea03 0501 	and.w	r5, r3, r1
 8008242:	ea04 0602 	and.w	r6, r4, r2
 8008246:	4629      	mov	r1, r5
 8008248:	4632      	mov	r2, r6
 800824a:	f04f 0300 	mov.w	r3, #0
 800824e:	f04f 0400 	mov.w	r4, #0
 8008252:	0154      	lsls	r4, r2, #5
 8008254:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008258:	014b      	lsls	r3, r1, #5
 800825a:	4619      	mov	r1, r3
 800825c:	4622      	mov	r2, r4
 800825e:	1b49      	subs	r1, r1, r5
 8008260:	eb62 0206 	sbc.w	r2, r2, r6
 8008264:	f04f 0300 	mov.w	r3, #0
 8008268:	f04f 0400 	mov.w	r4, #0
 800826c:	0194      	lsls	r4, r2, #6
 800826e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008272:	018b      	lsls	r3, r1, #6
 8008274:	1a5b      	subs	r3, r3, r1
 8008276:	eb64 0402 	sbc.w	r4, r4, r2
 800827a:	f04f 0100 	mov.w	r1, #0
 800827e:	f04f 0200 	mov.w	r2, #0
 8008282:	00e2      	lsls	r2, r4, #3
 8008284:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008288:	00d9      	lsls	r1, r3, #3
 800828a:	460b      	mov	r3, r1
 800828c:	4614      	mov	r4, r2
 800828e:	195b      	adds	r3, r3, r5
 8008290:	eb44 0406 	adc.w	r4, r4, r6
 8008294:	f04f 0100 	mov.w	r1, #0
 8008298:	f04f 0200 	mov.w	r2, #0
 800829c:	02a2      	lsls	r2, r4, #10
 800829e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80082a2:	0299      	lsls	r1, r3, #10
 80082a4:	460b      	mov	r3, r1
 80082a6:	4614      	mov	r4, r2
 80082a8:	4618      	mov	r0, r3
 80082aa:	4621      	mov	r1, r4
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f04f 0400 	mov.w	r4, #0
 80082b2:	461a      	mov	r2, r3
 80082b4:	4623      	mov	r3, r4
 80082b6:	f7f8 fcff 	bl	8000cb8 <__aeabi_uldivmod>
 80082ba:	4603      	mov	r3, r0
 80082bc:	460c      	mov	r4, r1
 80082be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082c0:	4b0a      	ldr	r3, [pc, #40]	; (80082ec <HAL_RCC_GetSysClockFreq+0x1a4>)
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	0c1b      	lsrs	r3, r3, #16
 80082c6:	f003 0303 	and.w	r3, r3, #3
 80082ca:	3301      	adds	r3, #1
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d8:	60bb      	str	r3, [r7, #8]
      break;
 80082da:	e002      	b.n	80082e2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082dc:	4b04      	ldr	r3, [pc, #16]	; (80082f0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80082de:	60bb      	str	r3, [r7, #8]
      break;
 80082e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082e2:	68bb      	ldr	r3, [r7, #8]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082ec:	40023800 	.word	0x40023800
 80082f0:	00f42400 	.word	0x00f42400
 80082f4:	007a1200 	.word	0x007a1200

080082f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082f8:	b480      	push	{r7}
 80082fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082fc:	4b03      	ldr	r3, [pc, #12]	; (800830c <HAL_RCC_GetHCLKFreq+0x14>)
 80082fe:	681b      	ldr	r3, [r3, #0]
}
 8008300:	4618      	mov	r0, r3
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	20000638 	.word	0x20000638

08008310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008314:	f7ff fff0 	bl	80082f8 <HAL_RCC_GetHCLKFreq>
 8008318:	4601      	mov	r1, r0
 800831a:	4b05      	ldr	r3, [pc, #20]	; (8008330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	0a9b      	lsrs	r3, r3, #10
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	4a03      	ldr	r2, [pc, #12]	; (8008334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008326:	5cd3      	ldrb	r3, [r2, r3]
 8008328:	fa21 f303 	lsr.w	r3, r1, r3
}
 800832c:	4618      	mov	r0, r3
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40023800 	.word	0x40023800
 8008334:	080205d8 	.word	0x080205d8

08008338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800833c:	f7ff ffdc 	bl	80082f8 <HAL_RCC_GetHCLKFreq>
 8008340:	4601      	mov	r1, r0
 8008342:	4b05      	ldr	r3, [pc, #20]	; (8008358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	0b5b      	lsrs	r3, r3, #13
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	4a03      	ldr	r2, [pc, #12]	; (800835c <HAL_RCC_GetPCLK2Freq+0x24>)
 800834e:	5cd3      	ldrb	r3, [r2, r3]
 8008350:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008354:	4618      	mov	r0, r3
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40023800 	.word	0x40023800
 800835c:	080205d8 	.word	0x080205d8

08008360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d101      	bne.n	8008372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	e03f      	b.n	80083f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d106      	bne.n	800838c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7fe feda 	bl	8007140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2224      	movs	r2, #36	; 0x24
 8008390:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68da      	ldr	r2, [r3, #12]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80083a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 f90b 	bl	80085c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	691a      	ldr	r2, [r3, #16]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	695a      	ldr	r2, [r3, #20]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68da      	ldr	r2, [r3, #12]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80083d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b088      	sub	sp, #32
 80083fe:	af02      	add	r7, sp, #8
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	603b      	str	r3, [r7, #0]
 8008406:	4613      	mov	r3, r2
 8008408:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b20      	cmp	r3, #32
 8008418:	f040 8083 	bne.w	8008522 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <HAL_UART_Transmit+0x2e>
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	e07b      	b.n	8008524 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008432:	2b01      	cmp	r3, #1
 8008434:	d101      	bne.n	800843a <HAL_UART_Transmit+0x40>
 8008436:	2302      	movs	r3, #2
 8008438:	e074      	b.n	8008524 <HAL_UART_Transmit+0x12a>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2201      	movs	r2, #1
 800843e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2221      	movs	r2, #33	; 0x21
 800844c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008450:	f7ff f858 	bl	8007504 <HAL_GetTick>
 8008454:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	88fa      	ldrh	r2, [r7, #6]
 800845a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	88fa      	ldrh	r2, [r7, #6]
 8008460:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800846a:	e042      	b.n	80084f2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008482:	d122      	bne.n	80084ca <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2200      	movs	r2, #0
 800848c:	2180      	movs	r1, #128	; 0x80
 800848e:	68f8      	ldr	r0, [r7, #12]
 8008490:	f000 f84c 	bl	800852c <UART_WaitOnFlagUntilTimeout>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800849a:	2303      	movs	r3, #3
 800849c:	e042      	b.n	8008524 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	881b      	ldrh	r3, [r3, #0]
 80084a6:	461a      	mov	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084b0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d103      	bne.n	80084c2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	3302      	adds	r3, #2
 80084be:	60bb      	str	r3, [r7, #8]
 80084c0:	e017      	b.n	80084f2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	3301      	adds	r3, #1
 80084c6:	60bb      	str	r3, [r7, #8]
 80084c8:	e013      	b.n	80084f2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2200      	movs	r2, #0
 80084d2:	2180      	movs	r1, #128	; 0x80
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f000 f829 	bl	800852c <UART_WaitOnFlagUntilTimeout>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e01f      	b.n	8008524 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	60ba      	str	r2, [r7, #8]
 80084ea:	781a      	ldrb	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1b7      	bne.n	800846c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2200      	movs	r2, #0
 8008504:	2140      	movs	r1, #64	; 0x40
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f810 	bl	800852c <UART_WaitOnFlagUntilTimeout>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e006      	b.n	8008524 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2220      	movs	r2, #32
 800851a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	e000      	b.n	8008524 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008522:	2302      	movs	r3, #2
  }
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	4613      	mov	r3, r2
 800853a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800853c:	e02c      	b.n	8008598 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008544:	d028      	beq.n	8008598 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <UART_WaitOnFlagUntilTimeout+0x30>
 800854c:	f7fe ffda 	bl	8007504 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	429a      	cmp	r2, r3
 800855a:	d21d      	bcs.n	8008598 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68da      	ldr	r2, [r3, #12]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800856a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695a      	ldr	r2, [r3, #20]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0201 	bic.w	r2, r2, #1
 800857a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2220      	movs	r2, #32
 8008588:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e00f      	b.n	80085b8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	4013      	ands	r3, r2
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	bf0c      	ite	eq
 80085a8:	2301      	moveq	r3, #1
 80085aa:	2300      	movne	r3, #0
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	461a      	mov	r2, r3
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d0c3      	beq.n	800853e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085b6:	2300      	movs	r3, #0
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	3710      	adds	r7, #16
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	68da      	ldr	r2, [r3, #12]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	430a      	orrs	r2, r1
 80085de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	691b      	ldr	r3, [r3, #16]
 80085e8:	431a      	orrs	r2, r3
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	695b      	ldr	r3, [r3, #20]
 80085ee:	431a      	orrs	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	4313      	orrs	r3, r2
 80085f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008602:	f023 030c 	bic.w	r3, r3, #12
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	6812      	ldr	r2, [r2, #0]
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	430b      	orrs	r3, r1
 800860e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800862e:	f040 818b 	bne.w	8008948 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4ac1      	ldr	r2, [pc, #772]	; (800893c <UART_SetConfig+0x37c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d005      	beq.n	8008648 <UART_SetConfig+0x88>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4abf      	ldr	r2, [pc, #764]	; (8008940 <UART_SetConfig+0x380>)
 8008642:	4293      	cmp	r3, r2
 8008644:	f040 80bd 	bne.w	80087c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008648:	f7ff fe76 	bl	8008338 <HAL_RCC_GetPCLK2Freq>
 800864c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	461d      	mov	r5, r3
 8008652:	f04f 0600 	mov.w	r6, #0
 8008656:	46a8      	mov	r8, r5
 8008658:	46b1      	mov	r9, r6
 800865a:	eb18 0308 	adds.w	r3, r8, r8
 800865e:	eb49 0409 	adc.w	r4, r9, r9
 8008662:	4698      	mov	r8, r3
 8008664:	46a1      	mov	r9, r4
 8008666:	eb18 0805 	adds.w	r8, r8, r5
 800866a:	eb49 0906 	adc.w	r9, r9, r6
 800866e:	f04f 0100 	mov.w	r1, #0
 8008672:	f04f 0200 	mov.w	r2, #0
 8008676:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800867a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800867e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008682:	4688      	mov	r8, r1
 8008684:	4691      	mov	r9, r2
 8008686:	eb18 0005 	adds.w	r0, r8, r5
 800868a:	eb49 0106 	adc.w	r1, r9, r6
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	461d      	mov	r5, r3
 8008694:	f04f 0600 	mov.w	r6, #0
 8008698:	196b      	adds	r3, r5, r5
 800869a:	eb46 0406 	adc.w	r4, r6, r6
 800869e:	461a      	mov	r2, r3
 80086a0:	4623      	mov	r3, r4
 80086a2:	f7f8 fb09 	bl	8000cb8 <__aeabi_uldivmod>
 80086a6:	4603      	mov	r3, r0
 80086a8:	460c      	mov	r4, r1
 80086aa:	461a      	mov	r2, r3
 80086ac:	4ba5      	ldr	r3, [pc, #660]	; (8008944 <UART_SetConfig+0x384>)
 80086ae:	fba3 2302 	umull	r2, r3, r3, r2
 80086b2:	095b      	lsrs	r3, r3, #5
 80086b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	461d      	mov	r5, r3
 80086bc:	f04f 0600 	mov.w	r6, #0
 80086c0:	46a9      	mov	r9, r5
 80086c2:	46b2      	mov	sl, r6
 80086c4:	eb19 0309 	adds.w	r3, r9, r9
 80086c8:	eb4a 040a 	adc.w	r4, sl, sl
 80086cc:	4699      	mov	r9, r3
 80086ce:	46a2      	mov	sl, r4
 80086d0:	eb19 0905 	adds.w	r9, r9, r5
 80086d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80086d8:	f04f 0100 	mov.w	r1, #0
 80086dc:	f04f 0200 	mov.w	r2, #0
 80086e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086ec:	4689      	mov	r9, r1
 80086ee:	4692      	mov	sl, r2
 80086f0:	eb19 0005 	adds.w	r0, r9, r5
 80086f4:	eb4a 0106 	adc.w	r1, sl, r6
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	461d      	mov	r5, r3
 80086fe:	f04f 0600 	mov.w	r6, #0
 8008702:	196b      	adds	r3, r5, r5
 8008704:	eb46 0406 	adc.w	r4, r6, r6
 8008708:	461a      	mov	r2, r3
 800870a:	4623      	mov	r3, r4
 800870c:	f7f8 fad4 	bl	8000cb8 <__aeabi_uldivmod>
 8008710:	4603      	mov	r3, r0
 8008712:	460c      	mov	r4, r1
 8008714:	461a      	mov	r2, r3
 8008716:	4b8b      	ldr	r3, [pc, #556]	; (8008944 <UART_SetConfig+0x384>)
 8008718:	fba3 1302 	umull	r1, r3, r3, r2
 800871c:	095b      	lsrs	r3, r3, #5
 800871e:	2164      	movs	r1, #100	; 0x64
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	3332      	adds	r3, #50	; 0x32
 800872a:	4a86      	ldr	r2, [pc, #536]	; (8008944 <UART_SetConfig+0x384>)
 800872c:	fba2 2303 	umull	r2, r3, r2, r3
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	005b      	lsls	r3, r3, #1
 8008734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008738:	4498      	add	r8, r3
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	461d      	mov	r5, r3
 800873e:	f04f 0600 	mov.w	r6, #0
 8008742:	46a9      	mov	r9, r5
 8008744:	46b2      	mov	sl, r6
 8008746:	eb19 0309 	adds.w	r3, r9, r9
 800874a:	eb4a 040a 	adc.w	r4, sl, sl
 800874e:	4699      	mov	r9, r3
 8008750:	46a2      	mov	sl, r4
 8008752:	eb19 0905 	adds.w	r9, r9, r5
 8008756:	eb4a 0a06 	adc.w	sl, sl, r6
 800875a:	f04f 0100 	mov.w	r1, #0
 800875e:	f04f 0200 	mov.w	r2, #0
 8008762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008766:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800876a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800876e:	4689      	mov	r9, r1
 8008770:	4692      	mov	sl, r2
 8008772:	eb19 0005 	adds.w	r0, r9, r5
 8008776:	eb4a 0106 	adc.w	r1, sl, r6
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	461d      	mov	r5, r3
 8008780:	f04f 0600 	mov.w	r6, #0
 8008784:	196b      	adds	r3, r5, r5
 8008786:	eb46 0406 	adc.w	r4, r6, r6
 800878a:	461a      	mov	r2, r3
 800878c:	4623      	mov	r3, r4
 800878e:	f7f8 fa93 	bl	8000cb8 <__aeabi_uldivmod>
 8008792:	4603      	mov	r3, r0
 8008794:	460c      	mov	r4, r1
 8008796:	461a      	mov	r2, r3
 8008798:	4b6a      	ldr	r3, [pc, #424]	; (8008944 <UART_SetConfig+0x384>)
 800879a:	fba3 1302 	umull	r1, r3, r3, r2
 800879e:	095b      	lsrs	r3, r3, #5
 80087a0:	2164      	movs	r1, #100	; 0x64
 80087a2:	fb01 f303 	mul.w	r3, r1, r3
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	00db      	lsls	r3, r3, #3
 80087aa:	3332      	adds	r3, #50	; 0x32
 80087ac:	4a65      	ldr	r2, [pc, #404]	; (8008944 <UART_SetConfig+0x384>)
 80087ae:	fba2 2303 	umull	r2, r3, r2, r3
 80087b2:	095b      	lsrs	r3, r3, #5
 80087b4:	f003 0207 	and.w	r2, r3, #7
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4442      	add	r2, r8
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	e26f      	b.n	8008ca2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80087c2:	f7ff fda5 	bl	8008310 <HAL_RCC_GetPCLK1Freq>
 80087c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	461d      	mov	r5, r3
 80087cc:	f04f 0600 	mov.w	r6, #0
 80087d0:	46a8      	mov	r8, r5
 80087d2:	46b1      	mov	r9, r6
 80087d4:	eb18 0308 	adds.w	r3, r8, r8
 80087d8:	eb49 0409 	adc.w	r4, r9, r9
 80087dc:	4698      	mov	r8, r3
 80087de:	46a1      	mov	r9, r4
 80087e0:	eb18 0805 	adds.w	r8, r8, r5
 80087e4:	eb49 0906 	adc.w	r9, r9, r6
 80087e8:	f04f 0100 	mov.w	r1, #0
 80087ec:	f04f 0200 	mov.w	r2, #0
 80087f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80087f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80087f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80087fc:	4688      	mov	r8, r1
 80087fe:	4691      	mov	r9, r2
 8008800:	eb18 0005 	adds.w	r0, r8, r5
 8008804:	eb49 0106 	adc.w	r1, r9, r6
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	461d      	mov	r5, r3
 800880e:	f04f 0600 	mov.w	r6, #0
 8008812:	196b      	adds	r3, r5, r5
 8008814:	eb46 0406 	adc.w	r4, r6, r6
 8008818:	461a      	mov	r2, r3
 800881a:	4623      	mov	r3, r4
 800881c:	f7f8 fa4c 	bl	8000cb8 <__aeabi_uldivmod>
 8008820:	4603      	mov	r3, r0
 8008822:	460c      	mov	r4, r1
 8008824:	461a      	mov	r2, r3
 8008826:	4b47      	ldr	r3, [pc, #284]	; (8008944 <UART_SetConfig+0x384>)
 8008828:	fba3 2302 	umull	r2, r3, r3, r2
 800882c:	095b      	lsrs	r3, r3, #5
 800882e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	461d      	mov	r5, r3
 8008836:	f04f 0600 	mov.w	r6, #0
 800883a:	46a9      	mov	r9, r5
 800883c:	46b2      	mov	sl, r6
 800883e:	eb19 0309 	adds.w	r3, r9, r9
 8008842:	eb4a 040a 	adc.w	r4, sl, sl
 8008846:	4699      	mov	r9, r3
 8008848:	46a2      	mov	sl, r4
 800884a:	eb19 0905 	adds.w	r9, r9, r5
 800884e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008852:	f04f 0100 	mov.w	r1, #0
 8008856:	f04f 0200 	mov.w	r2, #0
 800885a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800885e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008862:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008866:	4689      	mov	r9, r1
 8008868:	4692      	mov	sl, r2
 800886a:	eb19 0005 	adds.w	r0, r9, r5
 800886e:	eb4a 0106 	adc.w	r1, sl, r6
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	461d      	mov	r5, r3
 8008878:	f04f 0600 	mov.w	r6, #0
 800887c:	196b      	adds	r3, r5, r5
 800887e:	eb46 0406 	adc.w	r4, r6, r6
 8008882:	461a      	mov	r2, r3
 8008884:	4623      	mov	r3, r4
 8008886:	f7f8 fa17 	bl	8000cb8 <__aeabi_uldivmod>
 800888a:	4603      	mov	r3, r0
 800888c:	460c      	mov	r4, r1
 800888e:	461a      	mov	r2, r3
 8008890:	4b2c      	ldr	r3, [pc, #176]	; (8008944 <UART_SetConfig+0x384>)
 8008892:	fba3 1302 	umull	r1, r3, r3, r2
 8008896:	095b      	lsrs	r3, r3, #5
 8008898:	2164      	movs	r1, #100	; 0x64
 800889a:	fb01 f303 	mul.w	r3, r1, r3
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	3332      	adds	r3, #50	; 0x32
 80088a4:	4a27      	ldr	r2, [pc, #156]	; (8008944 <UART_SetConfig+0x384>)
 80088a6:	fba2 2303 	umull	r2, r3, r2, r3
 80088aa:	095b      	lsrs	r3, r3, #5
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80088b2:	4498      	add	r8, r3
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	461d      	mov	r5, r3
 80088b8:	f04f 0600 	mov.w	r6, #0
 80088bc:	46a9      	mov	r9, r5
 80088be:	46b2      	mov	sl, r6
 80088c0:	eb19 0309 	adds.w	r3, r9, r9
 80088c4:	eb4a 040a 	adc.w	r4, sl, sl
 80088c8:	4699      	mov	r9, r3
 80088ca:	46a2      	mov	sl, r4
 80088cc:	eb19 0905 	adds.w	r9, r9, r5
 80088d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80088d4:	f04f 0100 	mov.w	r1, #0
 80088d8:	f04f 0200 	mov.w	r2, #0
 80088dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80088e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80088e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80088e8:	4689      	mov	r9, r1
 80088ea:	4692      	mov	sl, r2
 80088ec:	eb19 0005 	adds.w	r0, r9, r5
 80088f0:	eb4a 0106 	adc.w	r1, sl, r6
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	461d      	mov	r5, r3
 80088fa:	f04f 0600 	mov.w	r6, #0
 80088fe:	196b      	adds	r3, r5, r5
 8008900:	eb46 0406 	adc.w	r4, r6, r6
 8008904:	461a      	mov	r2, r3
 8008906:	4623      	mov	r3, r4
 8008908:	f7f8 f9d6 	bl	8000cb8 <__aeabi_uldivmod>
 800890c:	4603      	mov	r3, r0
 800890e:	460c      	mov	r4, r1
 8008910:	461a      	mov	r2, r3
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <UART_SetConfig+0x384>)
 8008914:	fba3 1302 	umull	r1, r3, r3, r2
 8008918:	095b      	lsrs	r3, r3, #5
 800891a:	2164      	movs	r1, #100	; 0x64
 800891c:	fb01 f303 	mul.w	r3, r1, r3
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	00db      	lsls	r3, r3, #3
 8008924:	3332      	adds	r3, #50	; 0x32
 8008926:	4a07      	ldr	r2, [pc, #28]	; (8008944 <UART_SetConfig+0x384>)
 8008928:	fba2 2303 	umull	r2, r3, r2, r3
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	f003 0207 	and.w	r2, r3, #7
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4442      	add	r2, r8
 8008938:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800893a:	e1b2      	b.n	8008ca2 <UART_SetConfig+0x6e2>
 800893c:	40011000 	.word	0x40011000
 8008940:	40011400 	.word	0x40011400
 8008944:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4ad7      	ldr	r2, [pc, #860]	; (8008cac <UART_SetConfig+0x6ec>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d005      	beq.n	800895e <UART_SetConfig+0x39e>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4ad6      	ldr	r2, [pc, #856]	; (8008cb0 <UART_SetConfig+0x6f0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	f040 80d1 	bne.w	8008b00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800895e:	f7ff fceb 	bl	8008338 <HAL_RCC_GetPCLK2Freq>
 8008962:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	469a      	mov	sl, r3
 8008968:	f04f 0b00 	mov.w	fp, #0
 800896c:	46d0      	mov	r8, sl
 800896e:	46d9      	mov	r9, fp
 8008970:	eb18 0308 	adds.w	r3, r8, r8
 8008974:	eb49 0409 	adc.w	r4, r9, r9
 8008978:	4698      	mov	r8, r3
 800897a:	46a1      	mov	r9, r4
 800897c:	eb18 080a 	adds.w	r8, r8, sl
 8008980:	eb49 090b 	adc.w	r9, r9, fp
 8008984:	f04f 0100 	mov.w	r1, #0
 8008988:	f04f 0200 	mov.w	r2, #0
 800898c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008990:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008994:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008998:	4688      	mov	r8, r1
 800899a:	4691      	mov	r9, r2
 800899c:	eb1a 0508 	adds.w	r5, sl, r8
 80089a0:	eb4b 0609 	adc.w	r6, fp, r9
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	4619      	mov	r1, r3
 80089aa:	f04f 0200 	mov.w	r2, #0
 80089ae:	f04f 0300 	mov.w	r3, #0
 80089b2:	f04f 0400 	mov.w	r4, #0
 80089b6:	0094      	lsls	r4, r2, #2
 80089b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80089bc:	008b      	lsls	r3, r1, #2
 80089be:	461a      	mov	r2, r3
 80089c0:	4623      	mov	r3, r4
 80089c2:	4628      	mov	r0, r5
 80089c4:	4631      	mov	r1, r6
 80089c6:	f7f8 f977 	bl	8000cb8 <__aeabi_uldivmod>
 80089ca:	4603      	mov	r3, r0
 80089cc:	460c      	mov	r4, r1
 80089ce:	461a      	mov	r2, r3
 80089d0:	4bb8      	ldr	r3, [pc, #736]	; (8008cb4 <UART_SetConfig+0x6f4>)
 80089d2:	fba3 2302 	umull	r2, r3, r3, r2
 80089d6:	095b      	lsrs	r3, r3, #5
 80089d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	469b      	mov	fp, r3
 80089e0:	f04f 0c00 	mov.w	ip, #0
 80089e4:	46d9      	mov	r9, fp
 80089e6:	46e2      	mov	sl, ip
 80089e8:	eb19 0309 	adds.w	r3, r9, r9
 80089ec:	eb4a 040a 	adc.w	r4, sl, sl
 80089f0:	4699      	mov	r9, r3
 80089f2:	46a2      	mov	sl, r4
 80089f4:	eb19 090b 	adds.w	r9, r9, fp
 80089f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80089fc:	f04f 0100 	mov.w	r1, #0
 8008a00:	f04f 0200 	mov.w	r2, #0
 8008a04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a10:	4689      	mov	r9, r1
 8008a12:	4692      	mov	sl, r2
 8008a14:	eb1b 0509 	adds.w	r5, fp, r9
 8008a18:	eb4c 060a 	adc.w	r6, ip, sl
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	4619      	mov	r1, r3
 8008a22:	f04f 0200 	mov.w	r2, #0
 8008a26:	f04f 0300 	mov.w	r3, #0
 8008a2a:	f04f 0400 	mov.w	r4, #0
 8008a2e:	0094      	lsls	r4, r2, #2
 8008a30:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a34:	008b      	lsls	r3, r1, #2
 8008a36:	461a      	mov	r2, r3
 8008a38:	4623      	mov	r3, r4
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	4631      	mov	r1, r6
 8008a3e:	f7f8 f93b 	bl	8000cb8 <__aeabi_uldivmod>
 8008a42:	4603      	mov	r3, r0
 8008a44:	460c      	mov	r4, r1
 8008a46:	461a      	mov	r2, r3
 8008a48:	4b9a      	ldr	r3, [pc, #616]	; (8008cb4 <UART_SetConfig+0x6f4>)
 8008a4a:	fba3 1302 	umull	r1, r3, r3, r2
 8008a4e:	095b      	lsrs	r3, r3, #5
 8008a50:	2164      	movs	r1, #100	; 0x64
 8008a52:	fb01 f303 	mul.w	r3, r1, r3
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	011b      	lsls	r3, r3, #4
 8008a5a:	3332      	adds	r3, #50	; 0x32
 8008a5c:	4a95      	ldr	r2, [pc, #596]	; (8008cb4 <UART_SetConfig+0x6f4>)
 8008a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a62:	095b      	lsrs	r3, r3, #5
 8008a64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a68:	4498      	add	r8, r3
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	469b      	mov	fp, r3
 8008a6e:	f04f 0c00 	mov.w	ip, #0
 8008a72:	46d9      	mov	r9, fp
 8008a74:	46e2      	mov	sl, ip
 8008a76:	eb19 0309 	adds.w	r3, r9, r9
 8008a7a:	eb4a 040a 	adc.w	r4, sl, sl
 8008a7e:	4699      	mov	r9, r3
 8008a80:	46a2      	mov	sl, r4
 8008a82:	eb19 090b 	adds.w	r9, r9, fp
 8008a86:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008a8a:	f04f 0100 	mov.w	r1, #0
 8008a8e:	f04f 0200 	mov.w	r2, #0
 8008a92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008a96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008a9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008a9e:	4689      	mov	r9, r1
 8008aa0:	4692      	mov	sl, r2
 8008aa2:	eb1b 0509 	adds.w	r5, fp, r9
 8008aa6:	eb4c 060a 	adc.w	r6, ip, sl
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	f04f 0200 	mov.w	r2, #0
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	f04f 0400 	mov.w	r4, #0
 8008abc:	0094      	lsls	r4, r2, #2
 8008abe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ac2:	008b      	lsls	r3, r1, #2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	4623      	mov	r3, r4
 8008ac8:	4628      	mov	r0, r5
 8008aca:	4631      	mov	r1, r6
 8008acc:	f7f8 f8f4 	bl	8000cb8 <__aeabi_uldivmod>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	4b77      	ldr	r3, [pc, #476]	; (8008cb4 <UART_SetConfig+0x6f4>)
 8008ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8008adc:	095b      	lsrs	r3, r3, #5
 8008ade:	2164      	movs	r1, #100	; 0x64
 8008ae0:	fb01 f303 	mul.w	r3, r1, r3
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	3332      	adds	r3, #50	; 0x32
 8008aea:	4a72      	ldr	r2, [pc, #456]	; (8008cb4 <UART_SetConfig+0x6f4>)
 8008aec:	fba2 2303 	umull	r2, r3, r2, r3
 8008af0:	095b      	lsrs	r3, r3, #5
 8008af2:	f003 020f 	and.w	r2, r3, #15
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4442      	add	r2, r8
 8008afc:	609a      	str	r2, [r3, #8]
 8008afe:	e0d0      	b.n	8008ca2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b00:	f7ff fc06 	bl	8008310 <HAL_RCC_GetPCLK1Freq>
 8008b04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	469a      	mov	sl, r3
 8008b0a:	f04f 0b00 	mov.w	fp, #0
 8008b0e:	46d0      	mov	r8, sl
 8008b10:	46d9      	mov	r9, fp
 8008b12:	eb18 0308 	adds.w	r3, r8, r8
 8008b16:	eb49 0409 	adc.w	r4, r9, r9
 8008b1a:	4698      	mov	r8, r3
 8008b1c:	46a1      	mov	r9, r4
 8008b1e:	eb18 080a 	adds.w	r8, r8, sl
 8008b22:	eb49 090b 	adc.w	r9, r9, fp
 8008b26:	f04f 0100 	mov.w	r1, #0
 8008b2a:	f04f 0200 	mov.w	r2, #0
 8008b2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008b32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008b36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008b3a:	4688      	mov	r8, r1
 8008b3c:	4691      	mov	r9, r2
 8008b3e:	eb1a 0508 	adds.w	r5, sl, r8
 8008b42:	eb4b 0609 	adc.w	r6, fp, r9
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	f04f 0200 	mov.w	r2, #0
 8008b50:	f04f 0300 	mov.w	r3, #0
 8008b54:	f04f 0400 	mov.w	r4, #0
 8008b58:	0094      	lsls	r4, r2, #2
 8008b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b5e:	008b      	lsls	r3, r1, #2
 8008b60:	461a      	mov	r2, r3
 8008b62:	4623      	mov	r3, r4
 8008b64:	4628      	mov	r0, r5
 8008b66:	4631      	mov	r1, r6
 8008b68:	f7f8 f8a6 	bl	8000cb8 <__aeabi_uldivmod>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	461a      	mov	r2, r3
 8008b72:	4b50      	ldr	r3, [pc, #320]	; (8008cb4 <UART_SetConfig+0x6f4>)
 8008b74:	fba3 2302 	umull	r2, r3, r3, r2
 8008b78:	095b      	lsrs	r3, r3, #5
 8008b7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	469b      	mov	fp, r3
 8008b82:	f04f 0c00 	mov.w	ip, #0
 8008b86:	46d9      	mov	r9, fp
 8008b88:	46e2      	mov	sl, ip
 8008b8a:	eb19 0309 	adds.w	r3, r9, r9
 8008b8e:	eb4a 040a 	adc.w	r4, sl, sl
 8008b92:	4699      	mov	r9, r3
 8008b94:	46a2      	mov	sl, r4
 8008b96:	eb19 090b 	adds.w	r9, r9, fp
 8008b9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b9e:	f04f 0100 	mov.w	r1, #0
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008baa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008bae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008bb2:	4689      	mov	r9, r1
 8008bb4:	4692      	mov	sl, r2
 8008bb6:	eb1b 0509 	adds.w	r5, fp, r9
 8008bba:	eb4c 060a 	adc.w	r6, ip, sl
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	f04f 0200 	mov.w	r2, #0
 8008bc8:	f04f 0300 	mov.w	r3, #0
 8008bcc:	f04f 0400 	mov.w	r4, #0
 8008bd0:	0094      	lsls	r4, r2, #2
 8008bd2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008bd6:	008b      	lsls	r3, r1, #2
 8008bd8:	461a      	mov	r2, r3
 8008bda:	4623      	mov	r3, r4
 8008bdc:	4628      	mov	r0, r5
 8008bde:	4631      	mov	r1, r6
 8008be0:	f7f8 f86a 	bl	8000cb8 <__aeabi_uldivmod>
 8008be4:	4603      	mov	r3, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	461a      	mov	r2, r3
 8008bea:	4b32      	ldr	r3, [pc, #200]	; (8008cb4 <UART_SetConfig+0x6f4>)
 8008bec:	fba3 1302 	umull	r1, r3, r3, r2
 8008bf0:	095b      	lsrs	r3, r3, #5
 8008bf2:	2164      	movs	r1, #100	; 0x64
 8008bf4:	fb01 f303 	mul.w	r3, r1, r3
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	011b      	lsls	r3, r3, #4
 8008bfc:	3332      	adds	r3, #50	; 0x32
 8008bfe:	4a2d      	ldr	r2, [pc, #180]	; (8008cb4 <UART_SetConfig+0x6f4>)
 8008c00:	fba2 2303 	umull	r2, r3, r2, r3
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c0a:	4498      	add	r8, r3
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	469b      	mov	fp, r3
 8008c10:	f04f 0c00 	mov.w	ip, #0
 8008c14:	46d9      	mov	r9, fp
 8008c16:	46e2      	mov	sl, ip
 8008c18:	eb19 0309 	adds.w	r3, r9, r9
 8008c1c:	eb4a 040a 	adc.w	r4, sl, sl
 8008c20:	4699      	mov	r9, r3
 8008c22:	46a2      	mov	sl, r4
 8008c24:	eb19 090b 	adds.w	r9, r9, fp
 8008c28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c2c:	f04f 0100 	mov.w	r1, #0
 8008c30:	f04f 0200 	mov.w	r2, #0
 8008c34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c40:	4689      	mov	r9, r1
 8008c42:	4692      	mov	sl, r2
 8008c44:	eb1b 0509 	adds.w	r5, fp, r9
 8008c48:	eb4c 060a 	adc.w	r6, ip, sl
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	4619      	mov	r1, r3
 8008c52:	f04f 0200 	mov.w	r2, #0
 8008c56:	f04f 0300 	mov.w	r3, #0
 8008c5a:	f04f 0400 	mov.w	r4, #0
 8008c5e:	0094      	lsls	r4, r2, #2
 8008c60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c64:	008b      	lsls	r3, r1, #2
 8008c66:	461a      	mov	r2, r3
 8008c68:	4623      	mov	r3, r4
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	f7f8 f823 	bl	8000cb8 <__aeabi_uldivmod>
 8008c72:	4603      	mov	r3, r0
 8008c74:	460c      	mov	r4, r1
 8008c76:	461a      	mov	r2, r3
 8008c78:	4b0e      	ldr	r3, [pc, #56]	; (8008cb4 <UART_SetConfig+0x6f4>)
 8008c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c7e:	095b      	lsrs	r3, r3, #5
 8008c80:	2164      	movs	r1, #100	; 0x64
 8008c82:	fb01 f303 	mul.w	r3, r1, r3
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	011b      	lsls	r3, r3, #4
 8008c8a:	3332      	adds	r3, #50	; 0x32
 8008c8c:	4a09      	ldr	r2, [pc, #36]	; (8008cb4 <UART_SetConfig+0x6f4>)
 8008c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	f003 020f 	and.w	r2, r3, #15
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4442      	add	r2, r8
 8008c9e:	609a      	str	r2, [r3, #8]
}
 8008ca0:	e7ff      	b.n	8008ca2 <UART_SetConfig+0x6e2>
 8008ca2:	bf00      	nop
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cac:	40011000 	.word	0x40011000
 8008cb0:	40011400 	.word	0x40011400
 8008cb4:	51eb851f 	.word	0x51eb851f

08008cb8 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b08b      	sub	sp, #44	; 0x2c
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8008cc4:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	885b      	ldrh	r3, [r3, #2]
 8008cdc:	fb03 f302 	mul.w	r3, r3, r2
 8008ce0:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8008ce6:	e010      	b.n	8008d0a <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cea:	1d1a      	adds	r2, r3, #4
 8008cec:	627a      	str	r2, [r7, #36]	; 0x24
 8008cee:	ed93 7a00 	vldr	s14, [r3]
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	1d1a      	adds	r2, r3, #4
 8008cf6:	623a      	str	r2, [r7, #32]
 8008cf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8008cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d00:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	3b01      	subs	r3, #1
 8008d08:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1eb      	bne.n	8008ce8 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8008d10:	2300      	movs	r3, #0
 8008d12:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 8008d14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	372c      	adds	r7, #44	; 0x2c
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b08b      	sub	sp, #44	; 0x2c
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	685b      	ldr	r3, [r3, #4]
 8008d32:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	881b      	ldrh	r3, [r3, #0]
 8008d3e:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	885b      	ldrh	r3, [r3, #2]
 8008d44:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8008d46:	89fb      	ldrh	r3, [r7, #14]
 8008d48:	61bb      	str	r3, [r7, #24]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	4413      	add	r3, r2
 8008d56:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8008d58:	89bb      	ldrh	r3, [r7, #12]
 8008d5a:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8008d5c:	e00d      	b.n	8008d7a <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	1d1a      	adds	r2, r3, #4
 8008d62:	627a      	str	r2, [r7, #36]	; 0x24
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8008d6a:	89fb      	ldrh	r3, [r7, #14]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	6a3a      	ldr	r2, [r7, #32]
 8008d70:	4413      	add	r3, r2
 8008d72:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1ee      	bne.n	8008d5e <arm_mat_trans_f32+0x3a>
      }

      i++;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	3301      	adds	r3, #1
 8008d84:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1dd      	bne.n	8008d4e <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8008d92:	2300      	movs	r3, #0
 8008d94:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8008d96:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	372c      	adds	r7, #44	; 0x2c
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b087      	sub	sp, #28
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	60f8      	str	r0, [r7, #12]
 8008dae:	60b9      	str	r1, [r7, #8]
 8008db0:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8008db2:	f04f 0300 	mov.w	r3, #0
 8008db6:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8008dbc:	e00d      	b.n	8008dda <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	1d1a      	adds	r2, r3, #4
 8008dc2:	60fa      	str	r2, [r7, #12]
 8008dc4:	edd3 7a00 	vldr	s15, [r3]
 8008dc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8008dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008dd0:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1ee      	bne.n	8008dbe <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	ee07 3a90 	vmov	s15, r3
 8008de6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dea:	edd7 6a04 	vldr	s13, [r7, #16]
 8008dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	edc3 7a00 	vstr	s15, [r3]
}
 8008df8:	bf00      	nop
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b08a      	sub	sp, #40	; 0x28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8008e1a:	e013      	b.n	8008e44 <arm_rms_f32+0x40>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	1d1a      	adds	r2, r3, #4
 8008e20:	60fa      	str	r2, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8008e26:	ed97 7a07 	vldr	s14, [r7, #28]
 8008e2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008e2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e32:	ed97 7a08 	vldr	s14, [r7, #32]
 8008e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008e3a:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	3b01      	subs	r3, #1
 8008e42:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e8      	bne.n	8008e1c <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	ee07 3a90 	vmov	s15, r3
 8008e50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e54:	edd7 6a08 	vldr	s13, [r7, #32]
 8008e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5c:	edc7 7a06 	vstr	s15, [r7, #24]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8008e64:	edd7 7a06 	vldr	s15, [r7, #24]
 8008e68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e70:	db09      	blt.n	8008e86 <arm_rms_f32+0x82>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8008e72:	ed97 0a06 	vldr	s0, [r7, #24]
 8008e76:	f00d ff5f 	bl	8016d38 <sqrtf>
 8008e7a:	eef0 7a40 	vmov.f32	s15, s0
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	edc3 7a00 	vstr	s15, [r3]
 8008e84:	e003      	b.n	8008e8e <arm_rms_f32+0x8a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	f04f 0200 	mov.w	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
}
 8008e8e:	bf00      	nop
 8008e90:	3728      	adds	r7, #40	; 0x28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b089      	sub	sp, #36	; 0x24
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	607a      	str	r2, [r7, #4]
 8008ea2:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	61fb      	str	r3, [r7, #28]
 8008ea8:	e043      	b.n	8008f32 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	005b      	lsls	r3, r3, #1
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	089b      	lsrs	r3, r3, #2
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	005b      	lsls	r3, r3, #1
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	089b      	lsrs	r3, r3, #2
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	441a      	add	r2, r3
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	68f9      	ldr	r1, [r7, #12]
 8008ee6:	440b      	add	r3, r1
 8008ee8:	6812      	ldr	r2, [r2, #0]
 8008eea:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	3301      	adds	r3, #1
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	3301      	adds	r3, #1
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	441a      	add	r2, r3
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	3301      	adds	r3, #1
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	68f9      	ldr	r1, [r7, #12]
 8008f18:	440b      	add	r3, r1
 8008f1a:	6812      	ldr	r2, [r2, #0]
 8008f1c:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	3301      	adds	r3, #1
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	601a      	str	r2, [r3, #0]

    i += 2;
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	3302      	adds	r3, #2
 8008f30:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 8008f32:	897b      	ldrh	r3, [r7, #10]
 8008f34:	69fa      	ldr	r2, [r7, #28]
 8008f36:	429a      	cmp	r2, r3
 8008f38:	d3b7      	bcc.n	8008eaa <arm_bitreversal_32+0x14>
  }
}
 8008f3a:	bf00      	nop
 8008f3c:	3724      	adds	r7, #36	; 0x24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr

08008f46 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b0a0      	sub	sp, #128	; 0x80
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8008f56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	683a      	ldr	r2, [r7, #0]
 8008f5c:	4413      	add	r3, r2
 8008f5e:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 8008f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f6c:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 8008f6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8008f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 8008f7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008f84:	4413      	add	r3, r2
 8008f86:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8008f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f8a:	089b      	lsrs	r3, r3, #2
 8008f8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f8e:	e1b6      	b.n	80092fe <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 8008fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 8008fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 8008fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8008fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 8008fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8008fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8008fcc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 8008fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8008fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8008fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 8008fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8008fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 8008ff0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8008ff4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	1d1a      	adds	r2, r3, #4
 8008ffc:	603a      	str	r2, [r7, #0]
 8008ffe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009002:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8009006:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800900a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	1d1a      	adds	r2, r3, #4
 8009012:	603a      	str	r2, [r7, #0]
 8009014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009018:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800901c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009020:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	1d1a      	adds	r2, r3, #4
 8009028:	603a      	str	r2, [r7, #0]
 800902a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800902e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 8009032:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8009036:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	1d1a      	adds	r2, r3, #4
 800903e:	603a      	str	r2, [r7, #0]
 8009040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009044:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8009048:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800904c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009050:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009054:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 8009058:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800905c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009064:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 8009068:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800906c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009074:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8009078:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800907c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009084:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 8009088:	ed97 7a06 	vldr	s14, [r7, #24]
 800908c:	edd7 7a02 	vldr	s15, [r7, #8]
 8009090:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009092:	1d1a      	adds	r2, r3, #4
 8009094:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009096:	ee77 7a27 	vadd.f32	s15, s14, s15
 800909a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800909e:	ed97 7a07 	vldr	s14, [r7, #28]
 80090a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80090a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090a8:	1d1a      	adds	r2, r3, #4
 80090aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090b0:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80090b4:	ed97 7a08 	vldr	s14, [r7, #32]
 80090b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80090bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090be:	1d1a      	adds	r2, r3, #4
 80090c0:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090c6:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80090ca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80090ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80090d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80090d4:	1d1a      	adds	r2, r3, #4
 80090d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80090d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80090dc:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80090e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80090e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80090e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090ec:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80090f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80090f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80090f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80090fc:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 8009100:	ed97 7a04 	vldr	s14, [r7, #16]
 8009104:	edd7 7a08 	vldr	s15, [r7, #32]
 8009108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800910c:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 8009110:	ed97 7a05 	vldr	s14, [r7, #20]
 8009114:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800911c:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 8009120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009122:	1d1a      	adds	r2, r3, #4
 8009124:	673a      	str	r2, [r7, #112]	; 0x70
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800912a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800912c:	1d1a      	adds	r2, r3, #4
 800912e:	673a      	str	r2, [r7, #112]	; 0x70
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8009134:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009138:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800913c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009140:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 8009144:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009148:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800914c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009150:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 8009154:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009158:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800915c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009160:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 8009164:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009168:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800916c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009170:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8009174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009176:	1d1a      	adds	r2, r3, #4
 8009178:	677a      	str	r2, [r7, #116]	; 0x74
 800917a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800917e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8009182:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009186:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800918a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800918c:	1d1a      	adds	r2, r3, #4
 800918e:	677a      	str	r2, [r7, #116]	; 0x74
 8009190:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009194:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009198:	ee77 7a67 	vsub.f32	s15, s14, s15
 800919c:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80091a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80091a4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80091a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80091b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80091b4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80091b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091bc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 80091c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80091c4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80091c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091cc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 80091d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80091d4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80091d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80091e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	67ba      	str	r2, [r7, #120]	; 0x78
 80091e6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80091ea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80091ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80091f2:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80091f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091f8:	1d1a      	adds	r2, r3, #4
 80091fa:	67ba      	str	r2, [r7, #120]	; 0x78
 80091fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009200:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009208:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800920c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800920e:	1d1a      	adds	r2, r3, #4
 8009210:	673a      	str	r2, [r7, #112]	; 0x70
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8009216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009218:	1d1a      	adds	r2, r3, #4
 800921a:	673a      	str	r2, [r7, #112]	; 0x70
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 8009220:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009224:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800922c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 8009230:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009234:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800923c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 8009240:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009244:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800924c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 8009250:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009254:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 8009260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009262:	1d1a      	adds	r2, r3, #4
 8009264:	677a      	str	r2, [r7, #116]	; 0x74
 8009266:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800926a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800926e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009272:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8009276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009278:	1d1a      	adds	r2, r3, #4
 800927a:	677a      	str	r2, [r7, #116]	; 0x74
 800927c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009280:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8009284:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009288:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 800928c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009290:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009298:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 800929c:	edd7 7a05 	vldr	s15, [r7, #20]
 80092a0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092a8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80092ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80092b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80092b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092b8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 80092bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80092c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80092c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 80092cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ce:	1d1a      	adds	r2, r3, #4
 80092d0:	67ba      	str	r2, [r7, #120]	; 0x78
 80092d2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80092d6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80092da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092de:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80092e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092e4:	1d1a      	adds	r2, r3, #4
 80092e6:	67ba      	str	r2, [r7, #120]	; 0x78
 80092e8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80092ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80092f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092f4:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80092f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092fa:	3b01      	subs	r3, #1
 80092fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009300:	2b00      	cmp	r3, #0
 8009302:	f47f ae45 	bne.w	8008f90 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8009306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009308:	b299      	uxth	r1, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	2302      	movs	r3, #2
 8009310:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009312:	f000 ff9f 	bl	800a254 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8009316:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009318:	b299      	uxth	r1, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	2302      	movs	r3, #2
 8009320:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8009322:	f000 ff97 	bl	800a254 <arm_radix8_butterfly_f32>
}
 8009326:	bf00      	nop
 8009328:	3780      	adds	r7, #128	; 0x80
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}

0800932e <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b0ac      	sub	sp, #176	; 0xb0
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	085b      	lsrs	r3, r3, #1
 800933e:	b29b      	uxth	r3, r3
 8009340:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8009344:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	4413      	add	r3, r2
 800934e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 8009352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800935c:	4413      	add	r3, r2
 800935e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8009362:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009366:	009b      	lsls	r3, r3, #2
 8009368:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800936c:	4413      	add	r3, r2
 800936e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8009376:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800937a:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800937c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009380:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8009382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009386:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8009388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800938c:	3b04      	subs	r3, #4
 800938e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8009392:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009396:	3b04      	subs	r3, #4
 8009398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800939c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093a0:	3b04      	subs	r3, #4
 80093a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80093a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80093b0:	4413      	add	r3, r2
 80093b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80093be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80093c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80093c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 80093ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80093d2:	085b      	lsrs	r3, r3, #1
 80093d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80093d8:	2302      	movs	r3, #2
 80093da:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 80093dc:	2304      	movs	r3, #4
 80093de:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 80093e0:	2306      	movs	r3, #6
 80093e2:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	ed93 7a00 	vldr	s14, [r3]
 80093ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093ee:	edd3 7a00 	vldr	s15, [r3]
 80093f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093f6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	ed93 7a00 	vldr	s14, [r3]
 8009400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009404:	edd3 7a00 	vldr	s15, [r3]
 8009408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800940c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	3304      	adds	r3, #4
 8009414:	ed93 7a00 	vldr	s14, [r3]
 8009418:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800941c:	3304      	adds	r3, #4
 800941e:	edd3 7a00 	vldr	s15, [r3]
 8009422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009426:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	3304      	adds	r3, #4
 800942e:	ed93 7a00 	vldr	s14, [r3]
 8009432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009436:	3304      	adds	r3, #4
 8009438:	edd3 7a00 	vldr	s15, [r3]
 800943c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009440:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009444:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009448:	3304      	adds	r3, #4
 800944a:	ed93 7a00 	vldr	s14, [r3]
 800944e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009452:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800945a:	3304      	adds	r3, #4
 800945c:	edd3 7a00 	vldr	s15, [r3]
 8009460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009464:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009468:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800946c:	edd3 7a00 	vldr	s15, [r3]
 8009470:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800947c:	edd3 7a00 	vldr	s15, [r3]
 8009480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009484:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009488:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800948c:	edd3 7a00 	vldr	s15, [r3]
 8009490:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009494:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009498:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800949c:	edd3 7a00 	vldr	s15, [r3]
 80094a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094a4:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80094a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094ac:	3304      	adds	r3, #4
 80094ae:	edd3 7a00 	vldr	s15, [r3]
 80094b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80094b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80094ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094be:	3304      	adds	r3, #4
 80094c0:	edd3 7a00 	vldr	s15, [r3]
 80094c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80094c8:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80094cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094d0:	3304      	adds	r3, #4
 80094d2:	edd3 7a00 	vldr	s15, [r3]
 80094d6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80094da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80094de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80094e2:	3304      	adds	r3, #4
 80094e4:	edd3 7a00 	vldr	s15, [r3]
 80094e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094ec:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80094f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094f4:	ed93 7a00 	vldr	s14, [r3]
 80094f8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80094fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009500:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009504:	edd3 7a00 	vldr	s15, [r3]
 8009508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800950c:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009514:	ed93 7a00 	vldr	s14, [r3]
 8009518:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800951c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009524:	edd3 7a00 	vldr	s15, [r3]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	1d1a      	adds	r2, r3, #4
 800952c:	603a      	str	r2, [r7, #0]
 800952e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009532:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800953a:	3304      	adds	r3, #4
 800953c:	ed93 7a00 	vldr	s14, [r3]
 8009540:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009544:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009548:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800954c:	3304      	adds	r3, #4
 800954e:	edd3 7a00 	vldr	s15, [r3]
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	1d1a      	adds	r2, r3, #4
 8009556:	603a      	str	r2, [r7, #0]
 8009558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800955c:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8009560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009564:	1d1a      	adds	r2, r3, #4
 8009566:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800956a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800956c:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800956e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009572:	1d1a      	adds	r2, r3, #4
 8009574:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800957a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800957c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009580:	1d1a      	adds	r2, r3, #4
 8009582:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800958a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800958e:	1d1a      	adds	r2, r3, #4
 8009590:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009594:	6a3a      	ldr	r2, [r7, #32]
 8009596:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8009598:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800959c:	1d1a      	adds	r2, r3, #4
 800959e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 80095a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80095aa:	1d1a      	adds	r2, r3, #4
 80095ac:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 80095b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80095bc:	4413      	add	r3, r2
 80095be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 80095c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80095ca:	4413      	add	r3, r2
 80095cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 80095d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80095d8:	4413      	add	r3, r2
 80095da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 80095de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80095e2:	3b02      	subs	r3, #2
 80095e4:	085b      	lsrs	r3, r3, #1
 80095e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095ea:	e31a      	b.n	8009c22 <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	ed93 7a00 	vldr	s14, [r3]
 80095f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095f6:	edd3 7a00 	vldr	s15, [r3]
 80095fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80095fe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	ed93 7a00 	vldr	s14, [r3]
 8009608:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800960c:	edd3 7a00 	vldr	s15, [r3]
 8009610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009614:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	3304      	adds	r3, #4
 800961c:	ed93 7a00 	vldr	s14, [r3]
 8009620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009624:	3304      	adds	r3, #4
 8009626:	edd3 7a00 	vldr	s15, [r3]
 800962a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800962e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	3304      	adds	r3, #4
 8009636:	ed93 7a00 	vldr	s14, [r3]
 800963a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800963e:	3304      	adds	r3, #4
 8009640:	edd3 7a00 	vldr	s15, [r3]
 8009644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009648:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800964c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009650:	3304      	adds	r3, #4
 8009652:	ed93 7a00 	vldr	s14, [r3]
 8009656:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800965a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800965e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009662:	3304      	adds	r3, #4
 8009664:	edd3 7a00 	vldr	s15, [r3]
 8009668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800966c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009670:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009674:	edd3 7a00 	vldr	s15, [r3]
 8009678:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800967c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009680:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009684:	edd3 7a00 	vldr	s15, [r3]
 8009688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800968c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009690:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009694:	edd3 7a00 	vldr	s15, [r3]
 8009698:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800969c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096a4:	edd3 7a00 	vldr	s15, [r3]
 80096a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096ac:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 80096b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096b4:	3304      	adds	r3, #4
 80096b6:	edd3 7a00 	vldr	s15, [r3]
 80096ba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80096be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096c6:	3304      	adds	r3, #4
 80096c8:	edd3 7a00 	vldr	s15, [r3]
 80096cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096d0:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 80096d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096d8:	3304      	adds	r3, #4
 80096da:	edd3 7a00 	vldr	s15, [r3]
 80096de:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80096e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80096ea:	3304      	adds	r3, #4
 80096ec:	edd3 7a00 	vldr	s15, [r3]
 80096f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80096f4:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 80096f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096fc:	ed93 7a00 	vldr	s14, [r3]
 8009700:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009704:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800970c:	edd3 7a00 	vldr	s15, [r3]
 8009710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009714:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800971c:	ed93 7a00 	vldr	s14, [r3]
 8009720:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009724:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800972c:	edd3 7a00 	vldr	s15, [r3]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	1d1a      	adds	r2, r3, #4
 8009734:	603a      	str	r2, [r7, #0]
 8009736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800973a:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800973e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009742:	3304      	adds	r3, #4
 8009744:	ed93 7a00 	vldr	s14, [r3]
 8009748:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800974c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009750:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009754:	3304      	adds	r3, #4
 8009756:	edd3 7a00 	vldr	s15, [r3]
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	1d1a      	adds	r2, r3, #4
 800975e:	603a      	str	r2, [r7, #0]
 8009760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009764:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8009768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800976c:	3b04      	subs	r3, #4
 800976e:	ed93 7a00 	vldr	s14, [r3]
 8009772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009776:	3b04      	subs	r3, #4
 8009778:	edd3 7a00 	vldr	s15, [r3]
 800977c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009780:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8009784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009788:	3b04      	subs	r3, #4
 800978a:	ed93 7a00 	vldr	s14, [r3]
 800978e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009792:	3b04      	subs	r3, #4
 8009794:	edd3 7a00 	vldr	s15, [r3]
 8009798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800979c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 80097a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097a4:	ed93 7a00 	vldr	s14, [r3]
 80097a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097ac:	edd3 7a00 	vldr	s15, [r3]
 80097b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097b4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 80097b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097bc:	ed93 7a00 	vldr	s14, [r3]
 80097c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097c4:	edd3 7a00 	vldr	s15, [r3]
 80097c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80097cc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 80097d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097d4:	ed93 7a00 	vldr	s14, [r3]
 80097d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097dc:	edd3 7a00 	vldr	s15, [r3]
 80097e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097e4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80097e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097ec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 80097f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097f4:	ed93 7a00 	vldr	s14, [r3]
 80097f8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097fc:	edd3 7a00 	vldr	s15, [r3]
 8009800:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009808:	3b04      	subs	r3, #4
 800980a:	edd3 7a00 	vldr	s15, [r3]
 800980e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009816:	3b04      	subs	r3, #4
 8009818:	edd3 7a00 	vldr	s15, [r3]
 800981c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009820:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8009824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009828:	3b04      	subs	r3, #4
 800982a:	edd3 7a00 	vldr	s15, [r3]
 800982e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009832:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800983a:	3b04      	subs	r3, #4
 800983c:	edd3 7a00 	vldr	s15, [r3]
 8009840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009844:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8009848:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800984c:	edd3 7a00 	vldr	s15, [r3]
 8009850:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009854:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009858:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800985c:	edd3 7a00 	vldr	s15, [r3]
 8009860:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009864:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8009868:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800986c:	ed93 7a00 	vldr	s14, [r3]
 8009870:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009874:	edd3 7a00 	vldr	s15, [r3]
 8009878:	ee37 7a67 	vsub.f32	s14, s14, s15
 800987c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009884:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8009888:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800988c:	3b04      	subs	r3, #4
 800988e:	ed93 7a00 	vldr	s14, [r3]
 8009892:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009896:	3b04      	subs	r3, #4
 8009898:	edd3 7a00 	vldr	s15, [r3]
 800989c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80098a0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80098a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098a8:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 80098ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098b0:	ed93 7a00 	vldr	s14, [r3]
 80098b4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80098b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098c0:	edd3 7a00 	vldr	s15, [r3]
 80098c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098c8:	1f1a      	subs	r2, r3, #4
 80098ca:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098d2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 80098d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098da:	3b04      	subs	r3, #4
 80098dc:	ed93 7a00 	vldr	s14, [r3]
 80098e0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80098e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098ec:	3b04      	subs	r3, #4
 80098ee:	edd3 7a00 	vldr	s15, [r3]
 80098f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098f6:	1f1a      	subs	r2, r3, #4
 80098f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80098fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009900:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8009904:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009908:	1d1a      	adds	r2, r3, #4
 800990a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8009912:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009916:	1d1a      	adds	r2, r3, #4
 8009918:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8009920:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009924:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8009930:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009934:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800993c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8009940:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009944:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8009950:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009954:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8009960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009964:	1d1a      	adds	r2, r3, #4
 8009966:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800996a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800996e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009972:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009976:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800997a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800997e:	1d1a      	adds	r2, r3, #4
 8009980:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009984:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009988:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800998c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009990:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8009994:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8009998:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800999c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 80099a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80099a8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80099ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099b0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 80099b4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80099b8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80099bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 80099c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80099c8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80099cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 80099d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099d8:	1f1a      	subs	r2, r3, #4
 80099da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099de:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80099e2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80099e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099ea:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 80099ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099f2:	1f1a      	subs	r2, r3, #4
 80099f4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099f8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80099fc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a04:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8009a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 8009a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8009a18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009a20:	4413      	add	r3, r2
 8009a22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8009a26:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a2a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a32:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8009a36:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a3a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a42:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8009a46:	edd7 7a08 	vldr	s15, [r7, #32]
 8009a4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a52:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 8009a56:	edd7 7a07 	vldr	s15, [r7, #28]
 8009a5a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a62:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 8009a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a6a:	1d1a      	adds	r2, r3, #4
 8009a6c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a70:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009a74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009a7c:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8009a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a84:	1d1a      	adds	r2, r3, #4
 8009a86:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009a8a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009a8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009a92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a96:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8009a9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009a9e:	eef1 7a67 	vneg.f32	s15, s15
 8009aa2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aaa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 8009aae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ab2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8009abe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009ac2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aca:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8009ace:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009ad2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ada:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8009ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ae2:	1f1a      	subs	r2, r3, #4
 8009ae4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009ae8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009aec:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009af4:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8009af8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009afc:	1f1a      	subs	r2, r3, #4
 8009afe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009b02:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009b06:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8009b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b0e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8009b12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8009b1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 8009b22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 8009b30:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b34:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 8009b40:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b44:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b4c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 8009b50:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b54:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 8009b60:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b64:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b6c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 8009b70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b74:	1d1a      	adds	r2, r3, #4
 8009b76:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009b7a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009b7e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b86:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8009b8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b8e:	1d1a      	adds	r2, r3, #4
 8009b90:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009b94:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009b98:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ba0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8009ba4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009ba8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bb0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 8009bb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009bb8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 8009bc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009bc8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009bcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bd0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 8009bd4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009bd8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009bdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009be0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 8009be4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009be8:	1f1a      	subs	r2, r3, #4
 8009bea:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009bee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009bf2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bfa:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8009bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009c02:	1f1a      	subs	r2, r3, #4
 8009c04:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8009c08:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009c0c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c14:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8009c18:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f47f ace0 	bne.w	80095ec <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	ed93 7a00 	vldr	s14, [r3]
 8009c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c36:	edd3 7a00 	vldr	s15, [r3]
 8009c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c3e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	ed93 7a00 	vldr	s14, [r3]
 8009c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c4c:	edd3 7a00 	vldr	s15, [r3]
 8009c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c54:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	ed93 7a00 	vldr	s14, [r3]
 8009c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c64:	3304      	adds	r3, #4
 8009c66:	edd3 7a00 	vldr	s15, [r3]
 8009c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c6e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	3304      	adds	r3, #4
 8009c76:	ed93 7a00 	vldr	s14, [r3]
 8009c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c7e:	3304      	adds	r3, #4
 8009c80:	edd3 7a00 	vldr	s15, [r3]
 8009c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009c88:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8009c8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009c90:	3304      	adds	r3, #4
 8009c92:	ed93 7a00 	vldr	s14, [r3]
 8009c96:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8009c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	edd3 7a00 	vldr	s15, [r3]
 8009ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8009cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cb4:	edd3 7a00 	vldr	s15, [r3]
 8009cb8:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8009cbc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009cc4:	edd3 7a00 	vldr	s15, [r3]
 8009cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ccc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8009cd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cd4:	edd3 7a00 	vldr	s15, [r3]
 8009cd8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8009cdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ce4:	edd3 7a00 	vldr	s15, [r3]
 8009ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009cec:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8009cf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	edd3 7a00 	vldr	s15, [r3]
 8009cfa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8009cfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d06:	3304      	adds	r3, #4
 8009d08:	edd3 7a00 	vldr	s15, [r3]
 8009d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d10:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8009d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d18:	3304      	adds	r3, #4
 8009d1a:	edd3 7a00 	vldr	s15, [r3]
 8009d1e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8009d22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d2a:	3304      	adds	r3, #4
 8009d2c:	edd3 7a00 	vldr	s15, [r3]
 8009d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d34:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8009d38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d3c:	ed93 7a00 	vldr	s14, [r3]
 8009d40:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8009d44:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d4c:	edd3 7a00 	vldr	s15, [r3]
 8009d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009d54:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8009d58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d5c:	ed93 7a00 	vldr	s14, [r3]
 8009d60:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8009d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d6c:	edd3 7a00 	vldr	s15, [r3]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	1d1a      	adds	r2, r3, #4
 8009d74:	603a      	str	r2, [r7, #0]
 8009d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009d7a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8009d7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d82:	3304      	adds	r3, #4
 8009d84:	ed93 7a00 	vldr	s14, [r3]
 8009d88:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8009d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009d94:	3304      	adds	r3, #4
 8009d96:	edd3 7a00 	vldr	s15, [r3]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	1d1a      	adds	r2, r3, #4
 8009d9e:	603a      	str	r2, [r7, #0]
 8009da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009da4:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8009da8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8009db0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8009db8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009dbc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dc4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8009dc8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009dcc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dd4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8009dd8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009ddc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009de4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8009de8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009dec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009df4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8009df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009dfc:	1d1a      	adds	r2, r3, #4
 8009dfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009e02:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009e06:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e0e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8009e12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009e16:	1d1a      	adds	r2, r3, #4
 8009e18:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8009e1c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009e20:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009e24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009e28:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8009e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8009e34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8009e3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e40:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e48:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8009e4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e58:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8009e5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009e60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e68:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8009e6c:	edd7 7a07 	vldr	s15, [r7, #28]
 8009e70:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8009e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e80:	1d1a      	adds	r2, r3, #4
 8009e82:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009e86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009e8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e92:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8009e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009e9a:	1d1a      	adds	r2, r3, #4
 8009e9c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009ea0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009ea4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009eac:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8009eb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8009eb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8009ec0:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ec4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ecc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8009ed0:	edd7 7a04 	vldr	s15, [r7, #16]
 8009ed4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009edc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8009ee0:	edd7 7a04 	vldr	s15, [r7, #16]
 8009ee4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8009ee8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8009ef0:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ef4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8009ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009efc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8009f00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f04:	1d1a      	adds	r2, r3, #4
 8009f06:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009f0a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8009f0e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8009f12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f16:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8009f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009f1e:	1d1a      	adds	r2, r3, #4
 8009f20:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8009f24:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8009f28:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009f2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f30:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8009f34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f38:	b299      	uxth	r1, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	2304      	movs	r3, #4
 8009f40:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8009f42:	f000 f987 	bl	800a254 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8009f46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f4a:	b299      	uxth	r1, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685a      	ldr	r2, [r3, #4]
 8009f50:	2304      	movs	r3, #4
 8009f52:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8009f54:	f000 f97e 	bl	800a254 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 8009f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f5c:	b299      	uxth	r1, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685a      	ldr	r2, [r3, #4]
 8009f62:	2304      	movs	r3, #4
 8009f64:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8009f66:	f000 f975 	bl	800a254 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8009f6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f6e:	b299      	uxth	r1, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	2304      	movs	r3, #4
 8009f76:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8009f78:	f000 f96c 	bl	800a254 <arm_radix8_butterfly_f32>
}
 8009f7c:	bf00      	nop
 8009f7e:	37b0      	adds	r7, #176	; 0xb0
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b088      	sub	sp, #32
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	60f8      	str	r0, [r7, #12]
 8009f8c:	60b9      	str	r1, [r7, #8]
 8009f8e:	4611      	mov	r1, r2
 8009f90:	461a      	mov	r2, r3
 8009f92:	460b      	mov	r3, r1
 8009f94:	71fb      	strb	r3, [r7, #7]
 8009f96:	4613      	mov	r3, r2
 8009f98:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8009fa0:	79fb      	ldrb	r3, [r7, #7]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d117      	bne.n	8009fd6 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	3304      	adds	r3, #4
 8009faa:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8009fac:	2300      	movs	r3, #0
 8009fae:	61fb      	str	r3, [r7, #28]
 8009fb0:	e00d      	b.n	8009fce <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	edd3 7a00 	vldr	s15, [r3]
 8009fb8:	eef1 7a67 	vneg.f32	s15, s15
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	3308      	adds	r3, #8
 8009fc6:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	61fb      	str	r3, [r7, #28]
 8009fce:	69fa      	ldr	r2, [r7, #28]
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d3ed      	bcc.n	8009fb2 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fdc:	d024      	beq.n	800a028 <arm_cfft_f32+0xa4>
 8009fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fe2:	d80b      	bhi.n	8009ffc <arm_cfft_f32+0x78>
 8009fe4:	2b20      	cmp	r3, #32
 8009fe6:	d01f      	beq.n	800a028 <arm_cfft_f32+0xa4>
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	d802      	bhi.n	8009ff2 <arm_cfft_f32+0x6e>
 8009fec:	2b10      	cmp	r3, #16
 8009fee:	d016      	beq.n	800a01e <arm_cfft_f32+0x9a>
 8009ff0:	e028      	b.n	800a044 <arm_cfft_f32+0xc0>
 8009ff2:	2b40      	cmp	r3, #64	; 0x40
 8009ff4:	d01d      	beq.n	800a032 <arm_cfft_f32+0xae>
 8009ff6:	2b80      	cmp	r3, #128	; 0x80
 8009ff8:	d011      	beq.n	800a01e <arm_cfft_f32+0x9a>
 8009ffa:	e023      	b.n	800a044 <arm_cfft_f32+0xc0>
 8009ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a000:	d00d      	beq.n	800a01e <arm_cfft_f32+0x9a>
 800a002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a006:	d803      	bhi.n	800a010 <arm_cfft_f32+0x8c>
 800a008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a00c:	d011      	beq.n	800a032 <arm_cfft_f32+0xae>
 800a00e:	e019      	b.n	800a044 <arm_cfft_f32+0xc0>
 800a010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a014:	d008      	beq.n	800a028 <arm_cfft_f32+0xa4>
 800a016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a01a:	d00a      	beq.n	800a032 <arm_cfft_f32+0xae>
 800a01c:	e012      	b.n	800a044 <arm_cfft_f32+0xc0>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800a01e:	68b9      	ldr	r1, [r7, #8]
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f7fe ff90 	bl	8008f46 <arm_cfft_radix8by2_f32>
    break;
 800a026:	e00d      	b.n	800a044 <arm_cfft_f32+0xc0>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f7ff f97f 	bl	800932e <arm_cfft_radix8by4_f32>
    break;
 800a030:	e008      	b.n	800a044 <arm_cfft_f32+0xc0>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	b299      	uxth	r1, r3
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	2301      	movs	r3, #1
 800a03c:	68b8      	ldr	r0, [r7, #8]
 800a03e:	f000 f909 	bl	800a254 <arm_radix8_butterfly_f32>
    break;
 800a042:	bf00      	nop
  }

  if ( bitReverseFlag )
 800a044:	79bb      	ldrb	r3, [r7, #6]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d007      	beq.n	800a05a <arm_cfft_f32+0xd6>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	8999      	ldrh	r1, [r3, #12]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	689b      	ldr	r3, [r3, #8]
 800a052:	461a      	mov	r2, r3
 800a054:	68b8      	ldr	r0, [r7, #8]
 800a056:	f7fe ff1e 	bl	8008e96 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d130      	bne.n	800a0c2 <arm_cfft_f32+0x13e>
  {
    invL = 1.0f / (float32_t)L;
 800a060:	697b      	ldr	r3, [r7, #20]
 800a062:	ee07 3a90 	vmov	s15, r3
 800a066:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a06a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a06e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a072:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800a07a:	2300      	movs	r3, #0
 800a07c:	61fb      	str	r3, [r7, #28]
 800a07e:	e01c      	b.n	800a0ba <arm_cfft_f32+0x136>
    {
      *pSrc++ *=   invL ;
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	1d1a      	adds	r2, r3, #4
 800a084:	61ba      	str	r2, [r7, #24]
 800a086:	ed93 7a00 	vldr	s14, [r3]
 800a08a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a092:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	edd3 7a00 	vldr	s15, [r3]
 800a09c:	eeb1 7a67 	vneg.f32	s14, s15
 800a0a0:	edd7 7a04 	vldr	s15, [r7, #16]
 800a0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a8:	69bb      	ldr	r3, [r7, #24]
 800a0aa:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	61fb      	str	r3, [r7, #28]
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d3de      	bcc.n	800a080 <arm_cfft_f32+0xfc>
    }
  }
}
 800a0c2:	bf00      	nop
 800a0c4:	3720      	adds	r7, #32
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
	...

0800a0cc <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b085      	sub	sp, #20
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	887a      	ldrh	r2, [r7, #2]
 800a0e0:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	881b      	ldrh	r3, [r3, #0]
 800a0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0f0:	d052      	beq.n	800a198 <arm_cfft_init_f32+0xcc>
 800a0f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0f6:	dc0b      	bgt.n	800a110 <arm_cfft_init_f32+0x44>
 800a0f8:	2b20      	cmp	r3, #32
 800a0fa:	d074      	beq.n	800a1e6 <arm_cfft_init_f32+0x11a>
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	dc02      	bgt.n	800a106 <arm_cfft_init_f32+0x3a>
 800a100:	2b10      	cmp	r3, #16
 800a102:	d07d      	beq.n	800a200 <arm_cfft_init_f32+0x134>
 800a104:	e089      	b.n	800a21a <arm_cfft_init_f32+0x14e>
 800a106:	2b40      	cmp	r3, #64	; 0x40
 800a108:	d060      	beq.n	800a1cc <arm_cfft_init_f32+0x100>
 800a10a:	2b80      	cmp	r3, #128	; 0x80
 800a10c:	d051      	beq.n	800a1b2 <arm_cfft_init_f32+0xe6>
 800a10e:	e084      	b.n	800a21a <arm_cfft_init_f32+0x14e>
 800a110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a114:	d026      	beq.n	800a164 <arm_cfft_init_f32+0x98>
 800a116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a11a:	dc03      	bgt.n	800a124 <arm_cfft_init_f32+0x58>
 800a11c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a120:	d02d      	beq.n	800a17e <arm_cfft_init_f32+0xb2>
 800a122:	e07a      	b.n	800a21a <arm_cfft_init_f32+0x14e>
 800a124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a128:	d00f      	beq.n	800a14a <arm_cfft_init_f32+0x7e>
 800a12a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a12e:	d174      	bne.n	800a21a <arm_cfft_init_f32+0x14e>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 800a130:	4b3f      	ldr	r3, [pc, #252]	; (800a230 <arm_cfft_init_f32+0x164>)
 800a132:	899a      	ldrh	r2, [r3, #12]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	819a      	strh	r2, [r3, #12]
 800a138:	4b3d      	ldr	r3, [pc, #244]	; (800a230 <arm_cfft_init_f32+0x164>)
 800a13a:	689a      	ldr	r2, [r3, #8]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	609a      	str	r2, [r3, #8]
 800a140:	4b3b      	ldr	r3, [pc, #236]	; (800a230 <arm_cfft_init_f32+0x164>)
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	605a      	str	r2, [r3, #4]
            break;
 800a148:	e06a      	b.n	800a220 <arm_cfft_init_f32+0x154>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800a14a:	4b3a      	ldr	r3, [pc, #232]	; (800a234 <arm_cfft_init_f32+0x168>)
 800a14c:	899a      	ldrh	r2, [r3, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	819a      	strh	r2, [r3, #12]
 800a152:	4b38      	ldr	r3, [pc, #224]	; (800a234 <arm_cfft_init_f32+0x168>)
 800a154:	689a      	ldr	r2, [r3, #8]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	609a      	str	r2, [r3, #8]
 800a15a:	4b36      	ldr	r3, [pc, #216]	; (800a234 <arm_cfft_init_f32+0x168>)
 800a15c:	685a      	ldr	r2, [r3, #4]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	605a      	str	r2, [r3, #4]

            break;
 800a162:	e05d      	b.n	800a220 <arm_cfft_init_f32+0x154>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 800a164:	4b34      	ldr	r3, [pc, #208]	; (800a238 <arm_cfft_init_f32+0x16c>)
 800a166:	899a      	ldrh	r2, [r3, #12]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	819a      	strh	r2, [r3, #12]
 800a16c:	4b32      	ldr	r3, [pc, #200]	; (800a238 <arm_cfft_init_f32+0x16c>)
 800a16e:	689a      	ldr	r2, [r3, #8]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	609a      	str	r2, [r3, #8]
 800a174:	4b30      	ldr	r3, [pc, #192]	; (800a238 <arm_cfft_init_f32+0x16c>)
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	605a      	str	r2, [r3, #4]

            break;
 800a17c:	e050      	b.n	800a220 <arm_cfft_init_f32+0x154>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800a17e:	4b2f      	ldr	r3, [pc, #188]	; (800a23c <arm_cfft_init_f32+0x170>)
 800a180:	899a      	ldrh	r2, [r3, #12]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	819a      	strh	r2, [r3, #12]
 800a186:	4b2d      	ldr	r3, [pc, #180]	; (800a23c <arm_cfft_init_f32+0x170>)
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	609a      	str	r2, [r3, #8]
 800a18e:	4b2b      	ldr	r3, [pc, #172]	; (800a23c <arm_cfft_init_f32+0x170>)
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	605a      	str	r2, [r3, #4]
            break;
 800a196:	e043      	b.n	800a220 <arm_cfft_init_f32+0x154>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 800a198:	4b29      	ldr	r3, [pc, #164]	; (800a240 <arm_cfft_init_f32+0x174>)
 800a19a:	899a      	ldrh	r2, [r3, #12]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	819a      	strh	r2, [r3, #12]
 800a1a0:	4b27      	ldr	r3, [pc, #156]	; (800a240 <arm_cfft_init_f32+0x174>)
 800a1a2:	689a      	ldr	r2, [r3, #8]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	609a      	str	r2, [r3, #8]
 800a1a8:	4b25      	ldr	r3, [pc, #148]	; (800a240 <arm_cfft_init_f32+0x174>)
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	605a      	str	r2, [r3, #4]
            break;
 800a1b0:	e036      	b.n	800a220 <arm_cfft_init_f32+0x154>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800a1b2:	4b24      	ldr	r3, [pc, #144]	; (800a244 <arm_cfft_init_f32+0x178>)
 800a1b4:	899a      	ldrh	r2, [r3, #12]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	819a      	strh	r2, [r3, #12]
 800a1ba:	4b22      	ldr	r3, [pc, #136]	; (800a244 <arm_cfft_init_f32+0x178>)
 800a1bc:	689a      	ldr	r2, [r3, #8]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	609a      	str	r2, [r3, #8]
 800a1c2:	4b20      	ldr	r3, [pc, #128]	; (800a244 <arm_cfft_init_f32+0x178>)
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	605a      	str	r2, [r3, #4]
            break;
 800a1ca:	e029      	b.n	800a220 <arm_cfft_init_f32+0x154>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 800a1cc:	4b1e      	ldr	r3, [pc, #120]	; (800a248 <arm_cfft_init_f32+0x17c>)
 800a1ce:	899a      	ldrh	r2, [r3, #12]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	819a      	strh	r2, [r3, #12]
 800a1d4:	4b1c      	ldr	r3, [pc, #112]	; (800a248 <arm_cfft_init_f32+0x17c>)
 800a1d6:	689a      	ldr	r2, [r3, #8]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	609a      	str	r2, [r3, #8]
 800a1dc:	4b1a      	ldr	r3, [pc, #104]	; (800a248 <arm_cfft_init_f32+0x17c>)
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	605a      	str	r2, [r3, #4]
            break;
 800a1e4:	e01c      	b.n	800a220 <arm_cfft_init_f32+0x154>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 800a1e6:	4b19      	ldr	r3, [pc, #100]	; (800a24c <arm_cfft_init_f32+0x180>)
 800a1e8:	899a      	ldrh	r2, [r3, #12]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	819a      	strh	r2, [r3, #12]
 800a1ee:	4b17      	ldr	r3, [pc, #92]	; (800a24c <arm_cfft_init_f32+0x180>)
 800a1f0:	689a      	ldr	r2, [r3, #8]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	609a      	str	r2, [r3, #8]
 800a1f6:	4b15      	ldr	r3, [pc, #84]	; (800a24c <arm_cfft_init_f32+0x180>)
 800a1f8:	685a      	ldr	r2, [r3, #4]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	605a      	str	r2, [r3, #4]
            break;
 800a1fe:	e00f      	b.n	800a220 <arm_cfft_init_f32+0x154>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 800a200:	4b13      	ldr	r3, [pc, #76]	; (800a250 <arm_cfft_init_f32+0x184>)
 800a202:	899a      	ldrh	r2, [r3, #12]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	819a      	strh	r2, [r3, #12]
 800a208:	4b11      	ldr	r3, [pc, #68]	; (800a250 <arm_cfft_init_f32+0x184>)
 800a20a:	689a      	ldr	r2, [r3, #8]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	609a      	str	r2, [r3, #8]
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <arm_cfft_init_f32+0x184>)
 800a212:	685a      	ldr	r2, [r3, #4]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	605a      	str	r2, [r3, #4]
            break;
 800a218:	e002      	b.n	800a220 <arm_cfft_init_f32+0x154>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 800a21a:	23ff      	movs	r3, #255	; 0xff
 800a21c:	73fb      	strb	r3, [r7, #15]
            break;
 800a21e:	bf00      	nop
        }


        return (status);
 800a220:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3714      	adds	r7, #20
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	0803da38 	.word	0x0803da38
 800a234:	0803da28 	.word	0x0803da28
 800a238:	0803da18 	.word	0x0803da18
 800a23c:	0803da08 	.word	0x0803da08
 800a240:	0803d9f8 	.word	0x0803d9f8
 800a244:	0803d9e8 	.word	0x0803d9e8
 800a248:	0803d9d8 	.word	0x0803d9d8
 800a24c:	0803d9c8 	.word	0x0803d9c8
 800a250:	0803d9b8 	.word	0x0803d9b8

0800a254 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 800a254:	b480      	push	{r7}
 800a256:	b0bd      	sub	sp, #244	; 0xf4
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	607a      	str	r2, [r7, #4]
 800a25e:	461a      	mov	r2, r3
 800a260:	460b      	mov	r3, r1
 800a262:	817b      	strh	r3, [r7, #10]
 800a264:	4613      	mov	r3, r2
 800a266:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800a268:	4b09      	ldr	r3, [pc, #36]	; (800a290 <arm_radix8_butterfly_f32+0x3c>)
 800a26a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800a26e:	897b      	ldrh	r3, [r7, #10]
 800a270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 800a274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a278:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800a27c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a280:	08db      	lsrs	r3, r3, #3
 800a282:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a28c:	e002      	b.n	800a294 <arm_radix8_butterfly_f32+0x40>
 800a28e:	bf00      	nop
 800a290:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800a294:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29c:	4413      	add	r3, r2
 800a29e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800a2a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a2a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800a2b0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2b8:	4413      	add	r3, r2
 800a2ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800a2be:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800a2cc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800a2da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a2de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800a2e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a2f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	68fa      	ldr	r2, [r7, #12]
 800a2fe:	4413      	add	r3, r2
 800a300:	ed93 7a00 	vldr	s14, [r3]
 800a304:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a308:	00db      	lsls	r3, r3, #3
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	4413      	add	r3, r2
 800a30e:	edd3 7a00 	vldr	s15, [r3]
 800a312:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a316:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800a31a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a31e:	00db      	lsls	r3, r3, #3
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	4413      	add	r3, r2
 800a324:	ed93 7a00 	vldr	s14, [r3]
 800a328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a32c:	00db      	lsls	r3, r3, #3
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	4413      	add	r3, r2
 800a332:	edd3 7a00 	vldr	s15, [r3]
 800a336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a33a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800a33e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	ed93 7a00 	vldr	s14, [r3]
 800a34c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	68fa      	ldr	r2, [r7, #12]
 800a354:	4413      	add	r3, r2
 800a356:	edd3 7a00 	vldr	s15, [r3]
 800a35a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a35e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800a362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4413      	add	r3, r2
 800a36c:	ed93 7a00 	vldr	s14, [r3]
 800a370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a374:	00db      	lsls	r3, r3, #3
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	4413      	add	r3, r2
 800a37a:	edd3 7a00 	vldr	s15, [r3]
 800a37e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a382:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800a386:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a38a:	00db      	lsls	r3, r3, #3
 800a38c:	68fa      	ldr	r2, [r7, #12]
 800a38e:	4413      	add	r3, r2
 800a390:	ed93 7a00 	vldr	s14, [r3]
 800a394:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a398:	00db      	lsls	r3, r3, #3
 800a39a:	68fa      	ldr	r2, [r7, #12]
 800a39c:	4413      	add	r3, r2
 800a39e:	edd3 7a00 	vldr	s15, [r3]
 800a3a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3a6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800a3aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	ed93 7a00 	vldr	s14, [r3]
 800a3b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a3bc:	00db      	lsls	r3, r3, #3
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	edd3 7a00 	vldr	s15, [r3]
 800a3c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3ca:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800a3ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	ed93 7a00 	vldr	s14, [r3]
 800a3dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a3e0:	00db      	lsls	r3, r3, #3
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	edd3 7a00 	vldr	s15, [r3]
 800a3ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3ee:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800a3f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a3f6:	00db      	lsls	r3, r3, #3
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	ed93 7a00 	vldr	s14, [r3]
 800a400:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a404:	00db      	lsls	r3, r3, #3
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	4413      	add	r3, r2
 800a40a:	edd3 7a00 	vldr	s15, [r3]
 800a40e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a412:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800a416:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a41a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a41e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a422:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800a426:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a42a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a42e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a432:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800a436:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a43a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a442:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800a446:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a44a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a44e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a452:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800a456:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	4413      	add	r3, r2
 800a460:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a464:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a46c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800a470:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4413      	add	r3, r2
 800a47a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a47e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a482:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a486:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800a48a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	3304      	adds	r3, #4
 800a492:	68fa      	ldr	r2, [r7, #12]
 800a494:	4413      	add	r3, r2
 800a496:	ed93 7a00 	vldr	s14, [r3]
 800a49a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a49e:	00db      	lsls	r3, r3, #3
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	edd3 7a00 	vldr	s15, [r3]
 800a4aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4ae:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800a4b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a4b6:	00db      	lsls	r3, r3, #3
 800a4b8:	3304      	adds	r3, #4
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	4413      	add	r3, r2
 800a4be:	ed93 7a00 	vldr	s14, [r3]
 800a4c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a4c6:	00db      	lsls	r3, r3, #3
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	edd3 7a00 	vldr	s15, [r3]
 800a4d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a4d6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800a4da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a4de:	00db      	lsls	r3, r3, #3
 800a4e0:	3304      	adds	r3, #4
 800a4e2:	68fa      	ldr	r2, [r7, #12]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	ed93 7a00 	vldr	s14, [r3]
 800a4ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a4ee:	00db      	lsls	r3, r3, #3
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	68fa      	ldr	r2, [r7, #12]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	edd3 7a00 	vldr	s15, [r3]
 800a4fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4fe:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800a502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a506:	00db      	lsls	r3, r3, #3
 800a508:	3304      	adds	r3, #4
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	4413      	add	r3, r2
 800a50e:	ed93 7a00 	vldr	s14, [r3]
 800a512:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	3304      	adds	r3, #4
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	4413      	add	r3, r2
 800a51e:	edd3 7a00 	vldr	s15, [r3]
 800a522:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a526:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800a52a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	3304      	adds	r3, #4
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4413      	add	r3, r2
 800a536:	ed93 7a00 	vldr	s14, [r3]
 800a53a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a53e:	00db      	lsls	r3, r3, #3
 800a540:	3304      	adds	r3, #4
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	4413      	add	r3, r2
 800a546:	edd3 7a00 	vldr	s15, [r3]
 800a54a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a54e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800a552:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	3304      	adds	r3, #4
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4413      	add	r3, r2
 800a55e:	ed93 7a00 	vldr	s14, [r3]
 800a562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a566:	00db      	lsls	r3, r3, #3
 800a568:	3304      	adds	r3, #4
 800a56a:	68fa      	ldr	r2, [r7, #12]
 800a56c:	4413      	add	r3, r2
 800a56e:	edd3 7a00 	vldr	s15, [r3]
 800a572:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a576:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800a57a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	3304      	adds	r3, #4
 800a582:	68fa      	ldr	r2, [r7, #12]
 800a584:	4413      	add	r3, r2
 800a586:	ed93 7a00 	vldr	s14, [r3]
 800a58a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	3304      	adds	r3, #4
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	4413      	add	r3, r2
 800a596:	edd3 7a00 	vldr	s15, [r3]
 800a59a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a59e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800a5a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a5a6:	00db      	lsls	r3, r3, #3
 800a5a8:	3304      	adds	r3, #4
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	ed93 7a00 	vldr	s14, [r3]
 800a5b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	3304      	adds	r3, #4
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4413      	add	r3, r2
 800a5be:	edd3 7a00 	vldr	s15, [r3]
 800a5c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5c6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800a5ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a5ce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a5d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5d6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800a5da:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a5de:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a5e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5e6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800a5ea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a5ee:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a5f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5f6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800a5fa:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800a5fe:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800a602:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a606:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800a60a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a60e:	00db      	lsls	r3, r3, #3
 800a610:	3304      	adds	r3, #4
 800a612:	68fa      	ldr	r2, [r7, #12]
 800a614:	4413      	add	r3, r2
 800a616:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a61a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a61e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a622:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800a626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a62a:	00db      	lsls	r3, r3, #3
 800a62c:	3304      	adds	r3, #4
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	4413      	add	r3, r2
 800a632:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800a636:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a63a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a63e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800a642:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a646:	00db      	lsls	r3, r3, #3
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	4413      	add	r3, r2
 800a64c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a650:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a654:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a658:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800a65c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a660:	00db      	lsls	r3, r3, #3
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4413      	add	r3, r2
 800a666:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a66a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800a66e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a672:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800a676:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a67a:	00db      	lsls	r3, r3, #3
 800a67c:	3304      	adds	r3, #4
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	4413      	add	r3, r2
 800a682:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a686:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a68a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a68e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800a692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a696:	00db      	lsls	r3, r3, #3
 800a698:	3304      	adds	r3, #4
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	4413      	add	r3, r2
 800a69e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a6a2:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800a6a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6aa:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800a6ae:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a6b2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a6b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6ba:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a6be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6c2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800a6c6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800a6ca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a6ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6d2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6da:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800a6de:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a6e2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a6e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6ea:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6f2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800a6f6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800a6fa:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a6fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a702:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800a706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a70a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800a70e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a712:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a71a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800a71e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a722:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800a726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a72a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800a72e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a732:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a73a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800a73e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800a742:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800a746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a74a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800a74e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a752:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a75a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800a75e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a762:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800a766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a76a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800a76e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a772:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a77a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800a77e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800a782:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800a786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a78a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800a78e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a792:	00db      	lsls	r3, r3, #3
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a79c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a7a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7a4:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800a7a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a7ac:	00db      	lsls	r3, r3, #3
 800a7ae:	68fa      	ldr	r2, [r7, #12]
 800a7b0:	4413      	add	r3, r2
 800a7b2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800a7b6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800a7ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7be:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800a7c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a7d0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a7d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7d8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800a7dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7e0:	00db      	lsls	r3, r3, #3
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800a7ea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800a7ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7f2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800a7f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7fa:	00db      	lsls	r3, r3, #3
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	68fa      	ldr	r2, [r7, #12]
 800a800:	4413      	add	r3, r2
 800a802:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a806:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a80a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a80e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800a812:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a816:	00db      	lsls	r3, r3, #3
 800a818:	3304      	adds	r3, #4
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	4413      	add	r3, r2
 800a81e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800a822:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800a826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a82a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800a82e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	3304      	adds	r3, #4
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	4413      	add	r3, r2
 800a83a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a83e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a842:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a846:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800a84a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a84e:	00db      	lsls	r3, r3, #3
 800a850:	3304      	adds	r3, #4
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	4413      	add	r3, r2
 800a856:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800a85a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800a85e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a862:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800a866:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a86a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a86e:	4413      	add	r3, r2
 800a870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 800a874:	897b      	ldrh	r3, [r7, #10]
 800a876:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a87a:	429a      	cmp	r2, r3
 800a87c:	f4ff ad0a 	bcc.w	800a294 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800a880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a884:	2b07      	cmp	r3, #7
 800a886:	f240 84e3 	bls.w	800b250 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800a890:	2301      	movs	r3, #1
 800a892:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800a896:	893b      	ldrh	r3, [r7, #8]
 800a898:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a89c:	4413      	add	r3, r2
 800a89e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800a8a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800a8a6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800a8aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8ac:	4413      	add	r3, r2
 800a8ae:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800a8b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a8b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8b4:	4413      	add	r3, r2
 800a8b6:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800a8b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a8ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8bc:	4413      	add	r3, r2
 800a8be:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800a8c0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a8c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8c4:	4413      	add	r3, r2
 800a8c6:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800a8c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a8ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8cc:	4413      	add	r3, r2
 800a8ce:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800a8d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a8d4:	4413      	add	r3, r2
 800a8d6:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 800a8d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a8dc:	00db      	lsls	r3, r3, #3
 800a8de:	687a      	ldr	r2, [r7, #4]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800a8e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8e8:	00db      	lsls	r3, r3, #3
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	4413      	add	r3, r2
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800a8f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8f4:	00db      	lsls	r3, r3, #3
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800a8fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a900:	00db      	lsls	r3, r3, #3
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	4413      	add	r3, r2
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800a90a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a90c:	00db      	lsls	r3, r3, #3
 800a90e:	687a      	ldr	r2, [r7, #4]
 800a910:	4413      	add	r3, r2
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800a916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a918:	00db      	lsls	r3, r3, #3
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	4413      	add	r3, r2
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800a922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a924:	00db      	lsls	r3, r3, #3
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	4413      	add	r3, r2
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800a92e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a932:	00db      	lsls	r3, r3, #3
 800a934:	3304      	adds	r3, #4
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	4413      	add	r3, r2
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800a93e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a940:	00db      	lsls	r3, r3, #3
 800a942:	3304      	adds	r3, #4
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	4413      	add	r3, r2
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800a94c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	3304      	adds	r3, #4
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	4413      	add	r3, r2
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800a95a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a95c:	00db      	lsls	r3, r3, #3
 800a95e:	3304      	adds	r3, #4
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	4413      	add	r3, r2
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800a968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	3304      	adds	r3, #4
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	4413      	add	r3, r2
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800a976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a978:	00db      	lsls	r3, r3, #3
 800a97a:	3304      	adds	r3, #4
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	4413      	add	r3, r2
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 800a984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a986:	00db      	lsls	r3, r3, #3
 800a988:	3304      	adds	r3, #4
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	4413      	add	r3, r2
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800a992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a996:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800a99a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800a99e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9a2:	4413      	add	r3, r2
 800a9a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800a9a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800a9ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800a9b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a9ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9be:	4413      	add	r3, r2
 800a9c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800a9c4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800a9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9cc:	4413      	add	r3, r2
 800a9ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800a9d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9da:	4413      	add	r3, r2
 800a9dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800a9e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9e8:	4413      	add	r3, r2
 800a9ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800a9ee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a9f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9f6:	4413      	add	r3, r2
 800a9f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800a9fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	4413      	add	r3, r2
 800aa06:	ed93 7a00 	vldr	s14, [r3]
 800aa0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	4413      	add	r3, r2
 800aa14:	edd3 7a00 	vldr	s15, [r3]
 800aa18:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa1c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800aa20:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aa24:	00db      	lsls	r3, r3, #3
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	4413      	add	r3, r2
 800aa2a:	ed93 7a00 	vldr	s14, [r3]
 800aa2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa32:	00db      	lsls	r3, r3, #3
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	edd3 7a00 	vldr	s15, [r3]
 800aa3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa40:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800aa44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa48:	00db      	lsls	r3, r3, #3
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	ed93 7a00 	vldr	s14, [r3]
 800aa52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa56:	00db      	lsls	r3, r3, #3
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	edd3 7a00 	vldr	s15, [r3]
 800aa60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa64:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800aa68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	4413      	add	r3, r2
 800aa72:	ed93 7a00 	vldr	s14, [r3]
 800aa76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	4413      	add	r3, r2
 800aa80:	edd3 7a00 	vldr	s15, [r3]
 800aa84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa88:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800aa8c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aa90:	00db      	lsls	r3, r3, #3
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	4413      	add	r3, r2
 800aa96:	ed93 7a00 	vldr	s14, [r3]
 800aa9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	edd3 7a00 	vldr	s15, [r3]
 800aaa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaac:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800aab0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	4413      	add	r3, r2
 800aaba:	ed93 7a00 	vldr	s14, [r3]
 800aabe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aac2:	00db      	lsls	r3, r3, #3
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	4413      	add	r3, r2
 800aac8:	edd3 7a00 	vldr	s15, [r3]
 800aacc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aad0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800aad4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	4413      	add	r3, r2
 800aade:	ed93 7a00 	vldr	s14, [r3]
 800aae2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800aae6:	00db      	lsls	r3, r3, #3
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	edd3 7a00 	vldr	s15, [r3]
 800aaf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaf4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800aaf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aafc:	00db      	lsls	r3, r3, #3
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	4413      	add	r3, r2
 800ab02:	ed93 7a00 	vldr	s14, [r3]
 800ab06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab0a:	00db      	lsls	r3, r3, #3
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	edd3 7a00 	vldr	s15, [r3]
 800ab14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab18:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800ab1c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ab20:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ab24:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab28:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800ab2c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ab30:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ab34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab38:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800ab3c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800ab40:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800ab44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab48:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800ab4c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800ab50:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800ab54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab58:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800ab5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab60:	00db      	lsls	r3, r3, #3
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4413      	add	r3, r2
 800ab66:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ab6a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ab6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab72:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800ab76:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800ab7a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ab7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab82:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800ab86:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab8a:	00db      	lsls	r3, r3, #3
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	4413      	add	r3, r2
 800ab92:	ed93 7a00 	vldr	s14, [r3]
 800ab96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	4413      	add	r3, r2
 800aba2:	edd3 7a00 	vldr	s15, [r3]
 800aba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abaa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800abae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800abb2:	00db      	lsls	r3, r3, #3
 800abb4:	3304      	adds	r3, #4
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	4413      	add	r3, r2
 800abba:	ed93 7a00 	vldr	s14, [r3]
 800abbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800abc2:	00db      	lsls	r3, r3, #3
 800abc4:	3304      	adds	r3, #4
 800abc6:	68fa      	ldr	r2, [r7, #12]
 800abc8:	4413      	add	r3, r2
 800abca:	edd3 7a00 	vldr	s15, [r3]
 800abce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abd2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800abd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800abda:	00db      	lsls	r3, r3, #3
 800abdc:	3304      	adds	r3, #4
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	4413      	add	r3, r2
 800abe2:	ed93 7a00 	vldr	s14, [r3]
 800abe6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800abea:	00db      	lsls	r3, r3, #3
 800abec:	3304      	adds	r3, #4
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	4413      	add	r3, r2
 800abf2:	edd3 7a00 	vldr	s15, [r3]
 800abf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abfa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800abfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	3304      	adds	r3, #4
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4413      	add	r3, r2
 800ac0a:	ed93 7a00 	vldr	s14, [r3]
 800ac0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	3304      	adds	r3, #4
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	edd3 7a00 	vldr	s15, [r3]
 800ac1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac22:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800ac26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ac2a:	00db      	lsls	r3, r3, #3
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	4413      	add	r3, r2
 800ac32:	ed93 7a00 	vldr	s14, [r3]
 800ac36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac3a:	00db      	lsls	r3, r3, #3
 800ac3c:	3304      	adds	r3, #4
 800ac3e:	68fa      	ldr	r2, [r7, #12]
 800ac40:	4413      	add	r3, r2
 800ac42:	edd3 7a00 	vldr	s15, [r3]
 800ac46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac4a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800ac4e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ac52:	00db      	lsls	r3, r3, #3
 800ac54:	3304      	adds	r3, #4
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	4413      	add	r3, r2
 800ac5a:	ed93 7a00 	vldr	s14, [r3]
 800ac5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ac62:	00db      	lsls	r3, r3, #3
 800ac64:	3304      	adds	r3, #4
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4413      	add	r3, r2
 800ac6a:	edd3 7a00 	vldr	s15, [r3]
 800ac6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac72:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800ac76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	3304      	adds	r3, #4
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	4413      	add	r3, r2
 800ac82:	ed93 7a00 	vldr	s14, [r3]
 800ac86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac8a:	00db      	lsls	r3, r3, #3
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	68fa      	ldr	r2, [r7, #12]
 800ac90:	4413      	add	r3, r2
 800ac92:	edd3 7a00 	vldr	s15, [r3]
 800ac96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac9a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800ac9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aca2:	00db      	lsls	r3, r3, #3
 800aca4:	3304      	adds	r3, #4
 800aca6:	68fa      	ldr	r2, [r7, #12]
 800aca8:	4413      	add	r3, r2
 800acaa:	ed93 7a00 	vldr	s14, [r3]
 800acae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800acb2:	00db      	lsls	r3, r3, #3
 800acb4:	3304      	adds	r3, #4
 800acb6:	68fa      	ldr	r2, [r7, #12]
 800acb8:	4413      	add	r3, r2
 800acba:	edd3 7a00 	vldr	s15, [r3]
 800acbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acc2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800acc6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800acce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acd2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800acd6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acda:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800acde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ace2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800ace6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800acea:	edd7 7a08 	vldr	s15, [r7, #32]
 800acee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acf2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800acf6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800acfa:	edd7 7a08 	vldr	s15, [r7, #32]
 800acfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800ad06:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ad0a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ad0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad12:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800ad16:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800ad1a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800ad1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad22:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800ad26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4413      	add	r3, r2
 800ad32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad3e:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800ad42:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad4e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800ad52:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ad56:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ad5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad5e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800ad62:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ad66:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800ad6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad6e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800ad72:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ad76:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800ad7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800ad82:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ad86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad8e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800ad92:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ad96:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ad9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800ada2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800ada6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800adaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adae:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800adb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adb6:	00db      	lsls	r3, r3, #3
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	ed97 7a07 	vldr	s14, [r7, #28]
 800adc0:	edd7 7a06 	vldr	s15, [r7, #24]
 800adc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adc8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800adcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	3304      	adds	r3, #4
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	4413      	add	r3, r2
 800add8:	ed97 7a05 	vldr	s14, [r7, #20]
 800addc:	edd7 7a04 	vldr	s15, [r7, #16]
 800ade0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ade4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800ade8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800adec:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800adf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800adf8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800adfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae04:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800ae08:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800ae0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae14:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800ae18:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ae1c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800ae20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae24:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800ae28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	68fa      	ldr	r2, [r7, #12]
 800ae30:	4413      	add	r3, r2
 800ae32:	ed97 7a07 	vldr	s14, [r7, #28]
 800ae36:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae3e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800ae42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae46:	00db      	lsls	r3, r3, #3
 800ae48:	3304      	adds	r3, #4
 800ae4a:	68fa      	ldr	r2, [r7, #12]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	ed97 7a05 	vldr	s14, [r7, #20]
 800ae52:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae56:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae5a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800ae5e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ae62:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ae66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae6a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800ae6e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ae72:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800ae76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800ae7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ae82:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800ae86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae8a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800ae8e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ae92:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800ae96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae9a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800ae9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	4413      	add	r3, r2
 800aea8:	ed97 7a07 	vldr	s14, [r7, #28]
 800aeac:	edd7 7a06 	vldr	s15, [r7, #24]
 800aeb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aeb4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800aeb8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aebc:	00db      	lsls	r3, r3, #3
 800aebe:	3304      	adds	r3, #4
 800aec0:	68fa      	ldr	r2, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	ed97 7a05 	vldr	s14, [r7, #20]
 800aec8:	edd7 7a04 	vldr	s15, [r7, #16]
 800aecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aed0:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800aed4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800aed8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800aedc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aee0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800aeec:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800aef0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800aef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aef8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800aefc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af00:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800af04:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800af08:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af10:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800af14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af18:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800af1c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800af20:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800af24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af28:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800af2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af30:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800af34:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800af38:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800af3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af40:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800af44:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800af48:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800af4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af50:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800af54:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800af58:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800af5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af60:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800af64:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800af68:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800af6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af70:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800af74:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800af78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af80:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800af84:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800af88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af90:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800af94:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800af98:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800af9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afa0:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800afa4:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800afa8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800afac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afb0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800afb4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800afb8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800afbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afc0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800afc4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800afc8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800afcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afd0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800afd4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800afd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800afdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afe0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800afe4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800afe8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800afec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aff0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800aff4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800aff8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800affc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b000:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800b004:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b008:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b00c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b010:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800b014:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b018:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b01c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b020:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800b024:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b028:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b02c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b030:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800b034:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b038:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b040:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800b044:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b048:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b04c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b050:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800b054:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800b058:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b060:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800b064:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800b068:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b06c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b070:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800b074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	4413      	add	r3, r2
 800b07e:	ed97 7a07 	vldr	s14, [r7, #28]
 800b082:	edd7 7a06 	vldr	s15, [r7, #24]
 800b086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b08a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800b08e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	3304      	adds	r3, #4
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	4413      	add	r3, r2
 800b09a:	ed97 7a05 	vldr	s14, [r7, #20]
 800b09e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b0a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0a6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800b0aa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b0ae:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0b6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800b0ba:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b0be:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800b0ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b0ce:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800b0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800b0da:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b0de:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800b0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800b0ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b0ee:	00db      	lsls	r3, r3, #3
 800b0f0:	68fa      	ldr	r2, [r7, #12]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	ed97 7a07 	vldr	s14, [r7, #28]
 800b0f8:	edd7 7a06 	vldr	s15, [r7, #24]
 800b0fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b100:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800b104:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b108:	00db      	lsls	r3, r3, #3
 800b10a:	3304      	adds	r3, #4
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	4413      	add	r3, r2
 800b110:	ed97 7a05 	vldr	s14, [r7, #20]
 800b114:	edd7 7a04 	vldr	s15, [r7, #16]
 800b118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b11c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800b120:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b124:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b12c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800b130:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b134:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b13c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800b140:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b144:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800b150:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b154:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b15c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800b160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b164:	00db      	lsls	r3, r3, #3
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4413      	add	r3, r2
 800b16a:	ed97 7a07 	vldr	s14, [r7, #28]
 800b16e:	edd7 7a06 	vldr	s15, [r7, #24]
 800b172:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b176:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800b17a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	3304      	adds	r3, #4
 800b182:	68fa      	ldr	r2, [r7, #12]
 800b184:	4413      	add	r3, r2
 800b186:	ed97 7a05 	vldr	s14, [r7, #20]
 800b18a:	edd7 7a04 	vldr	s15, [r7, #16]
 800b18e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b192:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800b196:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b19a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b19e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1a2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800b1a6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b1aa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b1ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1b2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800b1b6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800b1ba:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800b1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1c2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800b1c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b1ca:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800b1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1d2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800b1d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b1da:	00db      	lsls	r3, r3, #3
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	4413      	add	r3, r2
 800b1e0:	ed97 7a07 	vldr	s14, [r7, #28]
 800b1e4:	edd7 7a06 	vldr	s15, [r7, #24]
 800b1e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b1ec:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800b1f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b1f4:	00db      	lsls	r3, r3, #3
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	ed97 7a05 	vldr	s14, [r7, #20]
 800b200:	edd7 7a04 	vldr	s15, [r7, #16]
 800b204:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b208:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800b20c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b214:	4413      	add	r3, r2
 800b216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800b21a:	897b      	ldrh	r3, [r7, #10]
 800b21c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b220:	429a      	cmp	r2, r3
 800b222:	f4ff abba 	bcc.w	800a99a <arm_radix8_butterfly_f32+0x746>

         j++;
 800b226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b22a:	3301      	adds	r3, #1
 800b22c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800b230:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b238:	429a      	cmp	r2, r3
 800b23a:	f4ff ab2c 	bcc.w	800a896 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800b23e:	893b      	ldrh	r3, [r7, #8]
 800b240:	00db      	lsls	r3, r3, #3
 800b242:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800b244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b248:	2b07      	cmp	r3, #7
 800b24a:	f63f a813 	bhi.w	800a274 <arm_radix8_butterfly_f32+0x20>
}
 800b24e:	e000      	b.n	800b252 <arm_radix8_butterfly_f32+0xffe>
         break;
 800b250:	bf00      	nop
}
 800b252:	bf00      	nop
 800b254:	37f4      	adds	r7, #244	; 0xf4
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop

0800b260 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800b260:	b480      	push	{r7}
 800b262:	b095      	sub	sp, #84	; 0x54
 800b264:	af00      	add	r7, sp, #0
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	881b      	ldrh	r3, [r3, #0]
 800b27e:	3b01      	subs	r3, #1
 800b280:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800b282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800b288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800b28e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800b294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800b29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b29c:	1d1a      	adds	r2, r3, #4
 800b29e:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800b2a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2a6:	1d1a      	adds	r2, r3, #4
 800b2a8:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800b2ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b2b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b2b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800b2be:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b2c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b2c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2ca:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800b2ce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b2d2:	edd7 7a08 	vldr	s15, [r7, #32]
 800b2d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	1d1a      	adds	r2, r3, #4
 800b2de:	607a      	str	r2, [r7, #4]
 800b2e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b2e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b2e8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800b2ec:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800b2f0:	edd7 7a08 	vldr	s15, [r7, #32]
 800b2f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	1d1a      	adds	r2, r3, #4
 800b2fc:	607a      	str	r2, [r7, #4]
 800b2fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b302:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b306:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800b30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b30c:	00db      	lsls	r3, r3, #3
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	4413      	add	r3, r2
 800b312:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800b314:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b316:	3308      	adds	r3, #8
 800b318:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800b31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800b320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800b326:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800b32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800b332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b334:	1d1a      	adds	r2, r3, #4
 800b336:	64ba      	str	r2, [r7, #72]	; 0x48
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800b33c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b33e:	1d1a      	adds	r2, r3, #4
 800b340:	64ba      	str	r2, [r7, #72]	; 0x48
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800b346:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b34a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b34e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b352:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800b356:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b35a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b35e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b362:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800b366:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b36a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b372:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800b376:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b37a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b37e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b382:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800b386:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b38a:	edd7 7a08 	vldr	s15, [r7, #32]
 800b38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b392:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800b396:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b39a:	edd7 7a08 	vldr	s15, [r7, #32]
 800b39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3a2:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800b3a6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b3aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b3ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3b2:	edd7 7a07 	vldr	s15, [r7, #28]
 800b3b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3ba:	edd7 7a04 	vldr	s15, [r7, #16]
 800b3be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	1d1a      	adds	r2, r3, #4
 800b3c6:	607a      	str	r2, [r7, #4]
 800b3c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b3cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3d0:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800b3d4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800b3d8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b3dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b3e0:	edd7 7a06 	vldr	s15, [r7, #24]
 800b3e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b3e8:	edd7 7a05 	vldr	s15, [r7, #20]
 800b3ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	1d1a      	adds	r2, r3, #4
 800b3f4:	607a      	str	r2, [r7, #4]
 800b3f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b3fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3fe:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800b402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b404:	3308      	adds	r3, #8
 800b406:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800b408:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b40a:	3b08      	subs	r3, #8
 800b40c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800b40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b410:	3b01      	subs	r3, #1
 800b412:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 800b414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b416:	2b00      	cmp	r3, #0
 800b418:	f47f af7f 	bne.w	800b31a <stage_rfft_f32+0xba>
}
 800b41c:	bf00      	nop
 800b41e:	3754      	adds	r7, #84	; 0x54
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800b428:	b480      	push	{r7}
 800b42a:	b095      	sub	sp, #84	; 0x54
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	695b      	ldr	r3, [r3, #20]
 800b438:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	881b      	ldrh	r3, [r3, #0]
 800b446:	3b01      	subs	r3, #1
 800b448:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800b44a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800b450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b452:	685b      	ldr	r3, [r3, #4]
 800b454:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800b456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b458:	3308      	adds	r3, #8
 800b45a:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800b45c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b460:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b464:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	1d1a      	adds	r2, r3, #4
 800b46c:	607a      	str	r2, [r7, #4]
 800b46e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b472:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b476:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800b47a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b47e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800b482:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	1d1a      	adds	r2, r3, #4
 800b48a:	607a      	str	r2, [r7, #4]
 800b48c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b490:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b494:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800b498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b49a:	00db      	lsls	r3, r3, #3
 800b49c:	68ba      	ldr	r2, [r7, #8]
 800b49e:	4413      	add	r3, r2
 800b4a0:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800b4a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800b4a8:	e07c      	b.n	800b5a4 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800b4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800b4b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800b4b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800b4bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800b4c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4c4:	1d1a      	adds	r2, r3, #4
 800b4c6:	64ba      	str	r2, [r7, #72]	; 0x48
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800b4cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4ce:	1d1a      	adds	r2, r3, #4
 800b4d0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800b4d6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b4da:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b4de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800b4e6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b4ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b4ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4f2:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800b4f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b4fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b502:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800b506:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b50a:	edd7 7a08 	vldr	s15, [r7, #32]
 800b50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b512:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800b516:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b51a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800b51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b522:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800b526:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800b52a:	edd7 7a08 	vldr	s15, [r7, #32]
 800b52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b532:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800b536:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800b53a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b53e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b542:	edd7 7a07 	vldr	s15, [r7, #28]
 800b546:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b54a:	edd7 7a06 	vldr	s15, [r7, #24]
 800b54e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	1d1a      	adds	r2, r3, #4
 800b556:	607a      	str	r2, [r7, #4]
 800b558:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b55c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b560:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800b564:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800b568:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b56c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b570:	edd7 7a05 	vldr	s15, [r7, #20]
 800b574:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b578:	edd7 7a04 	vldr	s15, [r7, #16]
 800b57c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	1d1a      	adds	r2, r3, #4
 800b584:	607a      	str	r2, [r7, #4]
 800b586:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b58a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b58e:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800b592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b594:	3308      	adds	r3, #8
 800b596:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800b598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b59a:	3b08      	subs	r3, #8
 800b59c:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800b59e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5a0:	3b01      	subs	r3, #1
 800b5a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 800b5a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f47f af7f 	bne.w	800b4aa <merge_rfft_f32+0x82>
   }

}
 800b5ac:	bf00      	nop
 800b5ae:	3754      	adds	r7, #84	; 0x54
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr

0800b5b8 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b086      	sub	sp, #24
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800b5ca:	78fb      	ldrb	r3, [r7, #3]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00b      	beq.n	800b5e8 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	68b9      	ldr	r1, [r7, #8]
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff ff27 	bl	800b428 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800b5da:	78fa      	ldrb	r2, [r7, #3]
 800b5dc:	2301      	movs	r3, #1
 800b5de:	6879      	ldr	r1, [r7, #4]
 800b5e0:	6978      	ldr	r0, [r7, #20]
 800b5e2:	f7fe fccf 	bl	8009f84 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800b5e6:	e00a      	b.n	800b5fe <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800b5e8:	78fa      	ldrb	r2, [r7, #3]
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	68b9      	ldr	r1, [r7, #8]
 800b5ee:	6978      	ldr	r0, [r7, #20]
 800b5f0:	f7fe fcc8 	bl	8009f84 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	68b9      	ldr	r1, [r7, #8]
 800b5f8:	68f8      	ldr	r0, [r7, #12]
 800b5fa:	f7ff fe31 	bl	800b260 <stage_rfft_f32>
}
 800b5fe:	bf00      	nop
 800b600:	3718      	adds	r7, #24
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d102      	bne.n	800b61c <arm_rfft_32_fast_init_f32+0x14>
 800b616:	f04f 33ff 	mov.w	r3, #4294967295
 800b61a:	e014      	b.n	800b646 <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2110      	movs	r1, #16
 800b620:	4618      	mov	r0, r3
 800b622:	f7fe fd53 	bl	800a0cc <arm_cfft_init_f32>
 800b626:	4603      	mov	r3, r0
 800b628:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b62a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d002      	beq.n	800b638 <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 800b632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b636:	e006      	b.n	800b646 <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2220      	movs	r2, #32
 800b63c:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	4a03      	ldr	r2, [pc, #12]	; (800b650 <arm_rfft_32_fast_init_f32+0x48>)
 800b642:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b644:	2300      	movs	r3, #0
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}
 800b64e:	bf00      	nop
 800b650:	08035a38 	.word	0x08035a38

0800b654 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d102      	bne.n	800b668 <arm_rfft_64_fast_init_f32+0x14>
 800b662:	f04f 33ff 	mov.w	r3, #4294967295
 800b666:	e014      	b.n	800b692 <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2120      	movs	r1, #32
 800b66c:	4618      	mov	r0, r3
 800b66e:	f7fe fd2d 	bl	800a0cc <arm_cfft_init_f32>
 800b672:	4603      	mov	r3, r0
 800b674:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 800b67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b682:	e006      	b.n	800b692 <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2240      	movs	r2, #64	; 0x40
 800b688:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a03      	ldr	r2, [pc, #12]	; (800b69c <arm_rfft_64_fast_init_f32+0x48>)
 800b68e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b690:	2300      	movs	r3, #0
}
 800b692:	4618      	mov	r0, r3
 800b694:	3710      	adds	r7, #16
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	08035ab8 	.word	0x08035ab8

0800b6a0 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b084      	sub	sp, #16
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d102      	bne.n	800b6b4 <arm_rfft_128_fast_init_f32+0x14>
 800b6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b2:	e014      	b.n	800b6de <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2140      	movs	r1, #64	; 0x40
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7fe fd07 	bl	800a0cc <arm_cfft_init_f32>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b6c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d002      	beq.n	800b6d0 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 800b6ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b6ce:	e006      	b.n	800b6de <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2280      	movs	r2, #128	; 0x80
 800b6d4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a03      	ldr	r2, [pc, #12]	; (800b6e8 <arm_rfft_128_fast_init_f32+0x48>)
 800b6da:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	08035bb8 	.word	0x08035bb8

0800b6ec <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d102      	bne.n	800b700 <arm_rfft_256_fast_init_f32+0x14>
 800b6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b6fe:	e015      	b.n	800b72c <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2180      	movs	r1, #128	; 0x80
 800b704:	4618      	mov	r0, r3
 800b706:	f7fe fce1 	bl	800a0cc <arm_cfft_init_f32>
 800b70a:	4603      	mov	r3, r0
 800b70c:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d002      	beq.n	800b71c <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 800b716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b71a:	e007      	b.n	800b72c <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b722:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	4a03      	ldr	r2, [pc, #12]	; (800b734 <arm_rfft_256_fast_init_f32+0x48>)
 800b728:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	08035db8 	.word	0x08035db8

0800b738 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d102      	bne.n	800b74c <arm_rfft_512_fast_init_f32+0x14>
 800b746:	f04f 33ff 	mov.w	r3, #4294967295
 800b74a:	e016      	b.n	800b77a <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b752:	4618      	mov	r0, r3
 800b754:	f7fe fcba 	bl	800a0cc <arm_cfft_init_f32>
 800b758:	4603      	mov	r3, r0
 800b75a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b75c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d002      	beq.n	800b76a <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 800b764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b768:	e007      	b.n	800b77a <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b770:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a03      	ldr	r2, [pc, #12]	; (800b784 <arm_rfft_512_fast_init_f32+0x4c>)
 800b776:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3710      	adds	r7, #16
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	080361b8 	.word	0x080361b8

0800b788 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d102      	bne.n	800b79c <arm_rfft_1024_fast_init_f32+0x14>
 800b796:	f04f 33ff 	mov.w	r3, #4294967295
 800b79a:	e016      	b.n	800b7ca <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe fc92 	bl	800a0cc <arm_cfft_init_f32>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b7ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 800b7b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7b8:	e007      	b.n	800b7ca <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7c0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a03      	ldr	r2, [pc, #12]	; (800b7d4 <arm_rfft_1024_fast_init_f32+0x4c>)
 800b7c6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3710      	adds	r7, #16
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	080369b8 	.word	0x080369b8

0800b7d8 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d102      	bne.n	800b7ec <arm_rfft_2048_fast_init_f32+0x14>
 800b7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ea:	e016      	b.n	800b81a <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7fe fc6a 	bl	800a0cc <arm_cfft_init_f32>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b7fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d002      	beq.n	800b80a <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 800b804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b808:	e007      	b.n	800b81a <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b810:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	4a03      	ldr	r2, [pc, #12]	; (800b824 <arm_rfft_2048_fast_init_f32+0x4c>)
 800b816:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	080379b8 	.word	0x080379b8

0800b828 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d102      	bne.n	800b83c <arm_rfft_4096_fast_init_f32+0x14>
 800b836:	f04f 33ff 	mov.w	r3, #4294967295
 800b83a:	e016      	b.n	800b86a <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b842:	4618      	mov	r0, r3
 800b844:	f7fe fc42 	bl	800a0cc <arm_cfft_init_f32>
 800b848:	4603      	mov	r3, r0
 800b84a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800b84c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d002      	beq.n	800b85a <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 800b854:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b858:	e007      	b.n	800b86a <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b860:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	4a03      	ldr	r2, [pc, #12]	; (800b874 <arm_rfft_4096_fast_init_f32+0x4c>)
 800b866:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	080399b8 	.word	0x080399b8

0800b878 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
 800b880:	460b      	mov	r3, r1
 800b882:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 800b884:	2300      	movs	r3, #0
 800b886:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 800b888:	887b      	ldrh	r3, [r7, #2]
 800b88a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b88e:	d025      	beq.n	800b8dc <arm_rfft_fast_init_f32+0x64>
 800b890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b894:	dc06      	bgt.n	800b8a4 <arm_rfft_fast_init_f32+0x2c>
 800b896:	2b40      	cmp	r3, #64	; 0x40
 800b898:	d026      	beq.n	800b8e8 <arm_rfft_fast_init_f32+0x70>
 800b89a:	2b80      	cmp	r3, #128	; 0x80
 800b89c:	d021      	beq.n	800b8e2 <arm_rfft_fast_init_f32+0x6a>
 800b89e:	2b20      	cmp	r3, #32
 800b8a0:	d025      	beq.n	800b8ee <arm_rfft_fast_init_f32+0x76>
 800b8a2:	e027      	b.n	800b8f4 <arm_rfft_fast_init_f32+0x7c>
 800b8a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8a8:	d012      	beq.n	800b8d0 <arm_rfft_fast_init_f32+0x58>
 800b8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8ae:	dc03      	bgt.n	800b8b8 <arm_rfft_fast_init_f32+0x40>
 800b8b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8b4:	d00f      	beq.n	800b8d6 <arm_rfft_fast_init_f32+0x5e>
 800b8b6:	e01d      	b.n	800b8f4 <arm_rfft_fast_init_f32+0x7c>
 800b8b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8bc:	d005      	beq.n	800b8ca <arm_rfft_fast_init_f32+0x52>
 800b8be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8c2:	d117      	bne.n	800b8f4 <arm_rfft_fast_init_f32+0x7c>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 800b8c4:	4b14      	ldr	r3, [pc, #80]	; (800b918 <arm_rfft_fast_init_f32+0xa0>)
 800b8c6:	60fb      	str	r3, [r7, #12]
    break;
 800b8c8:	e017      	b.n	800b8fa <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 800b8ca:	4b14      	ldr	r3, [pc, #80]	; (800b91c <arm_rfft_fast_init_f32+0xa4>)
 800b8cc:	60fb      	str	r3, [r7, #12]
    break;
 800b8ce:	e014      	b.n	800b8fa <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 800b8d0:	4b13      	ldr	r3, [pc, #76]	; (800b920 <arm_rfft_fast_init_f32+0xa8>)
 800b8d2:	60fb      	str	r3, [r7, #12]
    break;
 800b8d4:	e011      	b.n	800b8fa <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 800b8d6:	4b13      	ldr	r3, [pc, #76]	; (800b924 <arm_rfft_fast_init_f32+0xac>)
 800b8d8:	60fb      	str	r3, [r7, #12]
    break;
 800b8da:	e00e      	b.n	800b8fa <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 800b8dc:	4b12      	ldr	r3, [pc, #72]	; (800b928 <arm_rfft_fast_init_f32+0xb0>)
 800b8de:	60fb      	str	r3, [r7, #12]
    break;
 800b8e0:	e00b      	b.n	800b8fa <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 800b8e2:	4b12      	ldr	r3, [pc, #72]	; (800b92c <arm_rfft_fast_init_f32+0xb4>)
 800b8e4:	60fb      	str	r3, [r7, #12]
    break;
 800b8e6:	e008      	b.n	800b8fa <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 800b8e8:	4b11      	ldr	r3, [pc, #68]	; (800b930 <arm_rfft_fast_init_f32+0xb8>)
 800b8ea:	60fb      	str	r3, [r7, #12]
    break;
 800b8ec:	e005      	b.n	800b8fa <arm_rfft_fast_init_f32+0x82>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 800b8ee:	4b11      	ldr	r3, [pc, #68]	; (800b934 <arm_rfft_fast_init_f32+0xbc>)
 800b8f0:	60fb      	str	r3, [r7, #12]
    break;
 800b8f2:	e002      	b.n	800b8fa <arm_rfft_fast_init_f32+0x82>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 800b8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8f8:	e009      	b.n	800b90e <arm_rfft_fast_init_f32+0x96>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d102      	bne.n	800b906 <arm_rfft_fast_init_f32+0x8e>
 800b900:	f04f 33ff 	mov.w	r3, #4294967295
 800b904:	e003      	b.n	800b90e <arm_rfft_fast_init_f32+0x96>
  return fptr( S );
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	4798      	blx	r3
 800b90c:	4603      	mov	r3, r0

}
 800b90e:	4618      	mov	r0, r3
 800b910:	3710      	adds	r7, #16
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	0800b829 	.word	0x0800b829
 800b91c:	0800b7d9 	.word	0x0800b7d9
 800b920:	0800b789 	.word	0x0800b789
 800b924:	0800b739 	.word	0x0800b739
 800b928:	0800b6ed 	.word	0x0800b6ed
 800b92c:	0800b6a1 	.word	0x0800b6a1
 800b930:	0800b655 	.word	0x0800b655
 800b934:	0800b609 	.word	0x0800b609

0800b938 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800b938:	b480      	push	{r7}
 800b93a:	b089      	sub	sp, #36	; 0x24
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800b94c:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	00db      	lsls	r3, r3, #3
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	4413      	add	r3, r2
 800b956:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	ed93 7a00 	vldr	s14, [r3]
 800b95e:	69bb      	ldr	r3, [r7, #24]
 800b960:	edd3 7a00 	vldr	s15, [r3]
 800b964:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	edd3 6a01 	vldr	s13, [r3, #4]
 800b96e:	69bb      	ldr	r3, [r7, #24]
 800b970:	edd3 7a01 	vldr	s15, [r3, #4]
 800b974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b97c:	edc7 7a04 	vstr	s15, [r7, #16]
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	ed93 7a00 	vldr	s14, [r3]
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	edd3 7a01 	vldr	s15, [r3, #4]
 800b98c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	edd3 6a01 	vldr	s13, [r3, #4]
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	edd3 7a00 	vldr	s15, [r3]
 800b99c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b9a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9a4:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	00db      	lsls	r3, r3, #3
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	ed93 7a00 	vldr	s14, [r3]
 800b9b8:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9c0:	69fb      	ldr	r3, [r7, #28]
 800b9c2:	edc3 7a00 	vstr	s15, [r3]
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	ed93 7a01 	vldr	s14, [r3, #4]
 800b9cc:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	ed93 7a00 	vldr	s14, [r3]
 800b9e0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b9e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	edc3 7a00 	vstr	s15, [r3]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	ed93 7a01 	vldr	s14, [r3, #4]
 800b9f4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b9f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	3308      	adds	r3, #8
 800ba06:	61fb      	str	r3, [r7, #28]
        ++Fout;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	3308      	adds	r3, #8
 800ba0c:	60fb      	str	r3, [r7, #12]
    }while (--m);
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	3b01      	subs	r3, #1
 800ba12:	603b      	str	r3, [r7, #0]
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	bf14      	ite	ne
 800ba1a:	2301      	movne	r3, #1
 800ba1c:	2300      	moveq	r3, #0
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d000      	beq.n	800ba26 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 800ba24:	e798      	b.n	800b958 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 800ba26:	bf00      	nop
 800ba28:	3724      	adds	r7, #36	; 0x24
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 800ba32:	b480      	push	{r7}
 800ba34:	b097      	sub	sp, #92	; 0x5c
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	60f8      	str	r0, [r7, #12]
 800ba3a:	60b9      	str	r1, [r7, #8]
 800ba3c:	607a      	str	r2, [r7, #4]
 800ba3e:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	005b      	lsls	r3, r3, #1
 800ba48:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 800ba4a:	683a      	ldr	r2, [r7, #0]
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	005b      	lsls	r3, r3, #1
 800ba50:	4413      	add	r3, r2
 800ba52:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800ba5a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba5e:	653b      	str	r3, [r7, #80]	; 0x50
 800ba60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba62:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	00db      	lsls	r3, r3, #3
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	ed93 7a00 	vldr	s14, [r3]
 800ba70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba72:	edd3 7a00 	vldr	s15, [r3]
 800ba76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	00db      	lsls	r3, r3, #3
 800ba7e:	68fa      	ldr	r2, [r7, #12]
 800ba80:	4413      	add	r3, r2
 800ba82:	edd3 6a01 	vldr	s13, [r3, #4]
 800ba86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba88:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ba90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba94:	edc7 7a04 	vstr	s15, [r7, #16]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	4413      	add	r3, r2
 800baa0:	ed93 7a00 	vldr	s14, [r3]
 800baa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800baa6:	edd3 7a01 	vldr	s15, [r3, #4]
 800baaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	00db      	lsls	r3, r3, #3
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	4413      	add	r3, r2
 800bab6:	edd3 6a01 	vldr	s13, [r3, #4]
 800baba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800babc:	edd3 7a00 	vldr	s15, [r3]
 800bac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bac8:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 800bacc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bace:	00db      	lsls	r3, r3, #3
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4413      	add	r3, r2
 800bad4:	ed93 7a00 	vldr	s14, [r3]
 800bad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bada:	edd3 7a00 	vldr	s15, [r3]
 800bade:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	68fa      	ldr	r2, [r7, #12]
 800bae8:	4413      	add	r3, r2
 800baea:	edd3 6a01 	vldr	s13, [r3, #4]
 800baee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baf0:	edd3 7a01 	vldr	s15, [r3, #4]
 800baf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800baf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bafc:	edc7 7a06 	vstr	s15, [r7, #24]
 800bb00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb02:	00db      	lsls	r3, r3, #3
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	4413      	add	r3, r2
 800bb08:	ed93 7a00 	vldr	s14, [r3]
 800bb0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb0e:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb12:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb18:	00db      	lsls	r3, r3, #3
 800bb1a:	68fa      	ldr	r2, [r7, #12]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb24:	edd3 7a00 	vldr	s15, [r3]
 800bb28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb30:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 800bb34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb36:	00db      	lsls	r3, r3, #3
 800bb38:	68fa      	ldr	r2, [r7, #12]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	ed93 7a00 	vldr	s14, [r3]
 800bb40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb42:	edd3 7a00 	vldr	s15, [r3]
 800bb46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb58:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb64:	edc7 7a08 	vstr	s15, [r7, #32]
 800bb68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb6a:	00db      	lsls	r3, r3, #3
 800bb6c:	68fa      	ldr	r2, [r7, #12]
 800bb6e:	4413      	add	r3, r2
 800bb70:	ed93 7a00 	vldr	s14, [r3]
 800bb74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb76:	edd3 7a01 	vldr	s15, [r3, #4]
 800bb7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	4413      	add	r3, r2
 800bb86:	edd3 6a01 	vldr	s13, [r3, #4]
 800bb8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb8c:	edd3 7a00 	vldr	s15, [r3]
 800bb90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bb94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb98:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	ed93 7a00 	vldr	s14, [r3]
 800bba2:	edd7 7a06 	vldr	s15, [r7, #24]
 800bba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbaa:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	ed93 7a01 	vldr	s14, [r3, #4]
 800bbb4:	edd7 7a07 	vldr	s15, [r7, #28]
 800bbb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbbc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	ed93 7a00 	vldr	s14, [r3]
 800bbc6:	edd7 7a06 	vldr	s15, [r7, #24]
 800bbca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	edc3 7a00 	vstr	s15, [r3]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	ed93 7a01 	vldr	s14, [r3, #4]
 800bbda:	edd7 7a07 	vldr	s15, [r7, #28]
 800bbde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 800bbe8:	ed97 7a04 	vldr	s14, [r7, #16]
 800bbec:	edd7 7a08 	vldr	s15, [r7, #32]
 800bbf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bbf4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800bbf8:	ed97 7a05 	vldr	s14, [r7, #20]
 800bbfc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bc00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc04:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 800bc08:	ed97 7a04 	vldr	s14, [r7, #16]
 800bc0c:	edd7 7a08 	vldr	s15, [r7, #32]
 800bc10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800bc18:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bc20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc24:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	ed93 7a00 	vldr	s14, [r3]
 800bc2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	4413      	add	r3, r2
 800bc3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc3e:	edc3 7a00 	vstr	s15, [r3]
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc48:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bc4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc4e:	00db      	lsls	r3, r3, #3
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	4413      	add	r3, r2
 800bc54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc58:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc62:	4413      	add	r3, r2
 800bc64:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	011b      	lsls	r3, r3, #4
 800bc6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bc6c:	4413      	add	r3, r2
 800bc6e:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	4613      	mov	r3, r2
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	4413      	add	r3, r2
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc7e:	4413      	add	r3, r2
 800bc80:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	ed93 7a00 	vldr	s14, [r3]
 800bc88:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	edc3 7a00 	vstr	s15, [r3]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	ed93 7a01 	vldr	s14, [r3, #4]
 800bc9c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d030      	beq.n	800bd14 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 800bcb2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bcb6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcc6:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 800bcca:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bcce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	4413      	add	r3, r2
 800bcda:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcde:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 800bce2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bce6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bcea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcf6:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 800bcfa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bcfe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bd02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4413      	add	r3, r2
 800bd0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd0e:	edc3 7a01 	vstr	s15, [r3, #4]
 800bd12:	e02f      	b.n	800bd74 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 800bd14:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bd18:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	00db      	lsls	r3, r3, #3
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd28:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 800bd2c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bd30:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	00db      	lsls	r3, r3, #3
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd40:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 800bd44:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bd48:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd4e:	00db      	lsls	r3, r3, #3
 800bd50:	68fa      	ldr	r2, [r7, #12]
 800bd52:	4413      	add	r3, r2
 800bd54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd58:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 800bd5c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800bd60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bd64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd66:	00db      	lsls	r3, r3, #3
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd70:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3308      	adds	r3, #8
 800bd78:	60fb      	str	r3, [r7, #12]
    }while(--k);
 800bd7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	bf14      	ite	ne
 800bd86:	2301      	movne	r3, #1
 800bd88:	2300      	moveq	r3, #0
 800bd8a:	b2db      	uxtb	r3, r3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d000      	beq.n	800bd92 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 800bd90:	e668      	b.n	800ba64 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 800bd92:	bf00      	nop
 800bd94:	375c      	adds	r7, #92	; 0x5c
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
	...

0800bda0 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 800bda0:	b5b0      	push	{r4, r5, r7, lr}
 800bda2:	b094      	sub	sp, #80	; 0x50
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	603b      	str	r3, [r7, #0]
     size_t k=m;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	005b      	lsls	r3, r3, #1
 800bdb6:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	fb02 f303 	mul.w	r3, r2, r3
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	3321      	adds	r3, #33	; 0x21
 800bdc4:	f107 0210 	add.w	r2, r7, #16
 800bdc8:	00db      	lsls	r3, r3, #3
 800bdca:	440b      	add	r3, r1
 800bdcc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bdd0:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800bdda:	647b      	str	r3, [r7, #68]	; 0x44
 800bddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdde:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	4413      	add	r3, r2
 800bde8:	ed93 7a00 	vldr	s14, [r3]
 800bdec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdee:	edd3 7a00 	vldr	s15, [r3]
 800bdf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	00db      	lsls	r3, r3, #3
 800bdfa:	68fa      	ldr	r2, [r7, #12]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	edd3 6a01 	vldr	s13, [r3, #4]
 800be02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be04:	edd3 7a01 	vldr	s15, [r3, #4]
 800be08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be10:	edc7 7a08 	vstr	s15, [r7, #32]
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	68fa      	ldr	r2, [r7, #12]
 800be1a:	4413      	add	r3, r2
 800be1c:	ed93 7a00 	vldr	s14, [r3]
 800be20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be22:	edd3 7a01 	vldr	s15, [r3, #4]
 800be26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	00db      	lsls	r3, r3, #3
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	4413      	add	r3, r2
 800be32:	edd3 6a01 	vldr	s13, [r3, #4]
 800be36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be38:	edd3 7a00 	vldr	s15, [r3]
 800be3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 800be48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	68fa      	ldr	r2, [r7, #12]
 800be4e:	4413      	add	r3, r2
 800be50:	ed93 7a00 	vldr	s14, [r3]
 800be54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be56:	edd3 7a00 	vldr	s15, [r3]
 800be5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be60:	00db      	lsls	r3, r3, #3
 800be62:	68fa      	ldr	r2, [r7, #12]
 800be64:	4413      	add	r3, r2
 800be66:	edd3 6a01 	vldr	s13, [r3, #4]
 800be6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be6c:	edd3 7a01 	vldr	s15, [r3, #4]
 800be70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be78:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800be7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	4413      	add	r3, r2
 800be84:	ed93 7a00 	vldr	s14, [r3]
 800be88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800be8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	edd3 6a01 	vldr	s13, [r3, #4]
 800be9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bea0:	edd3 7a00 	vldr	s15, [r3]
 800bea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800beac:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 800beb0:	ed97 7a08 	vldr	s14, [r7, #32]
 800beb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800beb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bebc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800bec0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bec4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bec8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800becc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 800bed0:	ed97 7a08 	vldr	s14, [r7, #32]
 800bed4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bedc:	edc7 7a06 	vstr	s15, [r7, #24]
 800bee0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bee4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beec:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	00db      	lsls	r3, r3, #3
 800bef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bef6:	4413      	add	r3, r2
 800bef8:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf00:	4413      	add	r3, r2
 800bf02:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f7f4 fb35 	bl	8000578 <__aeabi_f2d>
 800bf0e:	4604      	mov	r4, r0
 800bf10:	460d      	mov	r5, r1
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7f4 fb2f 	bl	8000578 <__aeabi_f2d>
 800bf1a:	f04f 0200 	mov.w	r2, #0
 800bf1e:	4b57      	ldr	r3, [pc, #348]	; (800c07c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800bf20:	f7f4 fb82 	bl	8000628 <__aeabi_dmul>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	4620      	mov	r0, r4
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	f7f4 f9c4 	bl	80002b8 <__aeabi_dsub>
 800bf30:	4603      	mov	r3, r0
 800bf32:	460c      	mov	r4, r1
 800bf34:	4618      	mov	r0, r3
 800bf36:	4621      	mov	r1, r4
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	00db      	lsls	r3, r3, #3
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	18d4      	adds	r4, r2, r3
 800bf40:	f7f4 fe6a 	bl	8000c18 <__aeabi_d2f>
 800bf44:	4603      	mov	r3, r0
 800bf46:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7f4 fb13 	bl	8000578 <__aeabi_f2d>
 800bf52:	4604      	mov	r4, r0
 800bf54:	460d      	mov	r5, r1
 800bf56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7f4 fb0d 	bl	8000578 <__aeabi_f2d>
 800bf5e:	f04f 0200 	mov.w	r2, #0
 800bf62:	4b46      	ldr	r3, [pc, #280]	; (800c07c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800bf64:	f7f4 fb60 	bl	8000628 <__aeabi_dmul>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	4629      	mov	r1, r5
 800bf70:	f7f4 f9a2 	bl	80002b8 <__aeabi_dsub>
 800bf74:	4603      	mov	r3, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	4618      	mov	r0, r3
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	00db      	lsls	r3, r3, #3
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	18d4      	adds	r4, r2, r3
 800bf84:	f7f4 fe48 	bl	8000c18 <__aeabi_d2f>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 800bf8c:	ed97 7a06 	vldr	s14, [r7, #24]
 800bf90:	edd7 7a05 	vldr	s15, [r7, #20]
 800bf94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf98:	edc7 7a06 	vstr	s15, [r7, #24]
 800bf9c:	ed97 7a07 	vldr	s14, [r7, #28]
 800bfa0:	edd7 7a05 	vldr	s15, [r7, #20]
 800bfa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfa8:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	ed93 7a00 	vldr	s14, [r3]
 800bfb2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bfb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	edc3 7a00 	vstr	s15, [r3]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	ed93 7a01 	vldr	s14, [r3, #4]
 800bfc6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bfca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	00db      	lsls	r3, r3, #3
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	4413      	add	r3, r2
 800bfdc:	ed93 7a00 	vldr	s14, [r3]
 800bfe0:	edd7 7a07 	vldr	s15, [r7, #28]
 800bfe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	68fa      	ldr	r2, [r7, #12]
 800bfea:	4413      	add	r3, r2
 800bfec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bff0:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	00db      	lsls	r3, r3, #3
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	4413      	add	r3, r2
 800bffc:	ed93 7a01 	vldr	s14, [r3, #4]
 800c000:	edd7 7a06 	vldr	s15, [r7, #24]
 800c004:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c006:	00db      	lsls	r3, r3, #3
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	4413      	add	r3, r2
 800c00c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c010:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	00db      	lsls	r3, r3, #3
 800c018:	68fa      	ldr	r2, [r7, #12]
 800c01a:	4413      	add	r3, r2
 800c01c:	ed93 7a00 	vldr	s14, [r3]
 800c020:	edd7 7a07 	vldr	s15, [r7, #28]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4413      	add	r3, r2
 800c02c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c030:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	00db      	lsls	r3, r3, #3
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	4413      	add	r3, r2
 800c03c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c040:	edd7 7a06 	vldr	s15, [r7, #24]
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	68fa      	ldr	r2, [r7, #12]
 800c04a:	4413      	add	r3, r2
 800c04c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c050:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	3308      	adds	r3, #8
 800c058:	60fb      	str	r3, [r7, #12]
     }while(--k);
 800c05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c05c:	3b01      	subs	r3, #1
 800c05e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c062:	2b00      	cmp	r3, #0
 800c064:	bf14      	ite	ne
 800c066:	2301      	movne	r3, #1
 800c068:	2300      	moveq	r3, #0
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d000      	beq.n	800c072 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 800c070:	e6b6      	b.n	800bde0 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 800c072:	bf00      	nop
 800c074:	3750      	adds	r7, #80	; 0x50
 800c076:	46bd      	mov	sp, r7
 800c078:	bdb0      	pop	{r4, r5, r7, pc}
 800c07a:	bf00      	nop
 800c07c:	3fe00000 	.word	0x3fe00000

0800c080 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800c080:	b480      	push	{r7}
 800c082:	b0ab      	sub	sp, #172	; 0xac
 800c084:	af00      	add	r7, sp, #0
 800c086:	60f8      	str	r0, [r7, #12]
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	607a      	str	r2, [r7, #4]
 800c08c:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c094:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	68ba      	ldr	r2, [r7, #8]
 800c09c:	fb02 f303 	mul.w	r3, r2, r3
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c0a6:	441a      	add	r2, r3
 800c0a8:	f107 0318 	add.w	r3, r7, #24
 800c0ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0b0:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	68ba      	ldr	r2, [r7, #8]
 800c0b8:	fb02 f303 	mul.w	r3, r2, r3
 800c0bc:	011b      	lsls	r3, r3, #4
 800c0be:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800c0c2:	441a      	add	r2, r3
 800c0c4:	f107 0310 	add.w	r3, r7, #16
 800c0c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c0cc:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	00db      	lsls	r3, r3, #3
 800c0da:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c0de:	4413      	add	r3, r2
 800c0e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	011b      	lsls	r3, r3, #4
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c0ee:	4413      	add	r3, r2
 800c0f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 800c0f4:	683a      	ldr	r2, [r7, #0]
 800c0f6:	4613      	mov	r3, r2
 800c0f8:	005b      	lsls	r3, r3, #1
 800c0fa:	4413      	add	r3, r2
 800c0fc:	00db      	lsls	r3, r3, #3
 800c0fe:	461a      	mov	r2, r3
 800c100:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c104:	4413      	add	r3, r2
 800c106:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	015b      	lsls	r3, r3, #5
 800c10e:	461a      	mov	r2, r3
 800c110:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c114:	4413      	add	r3, r2
 800c116:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 800c124:	2300      	movs	r3, #0
 800c126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c12a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	429a      	cmp	r2, r3
 800c132:	f280 82a9 	bge.w	800c688 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x608>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 800c136:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800c13a:	f107 0320 	add.w	r3, r7, #32
 800c13e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c142:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 800c146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c14a:	ed93 7a00 	vldr	s14, [r3]
 800c14e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	fb02 f303 	mul.w	r3, r2, r3
 800c158:	00db      	lsls	r3, r3, #3
 800c15a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c15e:	4413      	add	r3, r2
 800c160:	edd3 7a00 	vldr	s15, [r3]
 800c164:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c16c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c170:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c174:	68ba      	ldr	r2, [r7, #8]
 800c176:	fb02 f303 	mul.w	r3, r2, r3
 800c17a:	00db      	lsls	r3, r3, #3
 800c17c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c180:	4413      	add	r3, r2
 800c182:	edd3 7a01 	vldr	s15, [r3, #4]
 800c186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c18a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c18e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800c192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c196:	ed93 7a00 	vldr	s14, [r3]
 800c19a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c19e:	68ba      	ldr	r2, [r7, #8]
 800c1a0:	fb02 f303 	mul.w	r3, r2, r3
 800c1a4:	00db      	lsls	r3, r3, #3
 800c1a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c1aa:	4413      	add	r3, r2
 800c1ac:	edd3 7a01 	vldr	s15, [r3, #4]
 800c1b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1b8:	edd3 6a01 	vldr	s13, [r3, #4]
 800c1bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c1c0:	68ba      	ldr	r2, [r7, #8]
 800c1c2:	fb02 f303 	mul.w	r3, r2, r3
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c1cc:	4413      	add	r3, r2
 800c1ce:	edd3 7a00 	vldr	s15, [r3]
 800c1d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c1d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1da:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 800c1de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1e2:	ed93 7a00 	vldr	s14, [r3]
 800c1e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c1ea:	68ba      	ldr	r2, [r7, #8]
 800c1ec:	fb02 f303 	mul.w	r3, r2, r3
 800c1f0:	011b      	lsls	r3, r3, #4
 800c1f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c1f6:	4413      	add	r3, r2
 800c1f8:	edd3 7a00 	vldr	s15, [r3]
 800c1fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c204:	edd3 6a01 	vldr	s13, [r3, #4]
 800c208:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	fb02 f303 	mul.w	r3, r2, r3
 800c212:	011b      	lsls	r3, r3, #4
 800c214:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c218:	4413      	add	r3, r2
 800c21a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c21e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c222:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c226:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800c22a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c22e:	ed93 7a00 	vldr	s14, [r3]
 800c232:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c236:	68ba      	ldr	r2, [r7, #8]
 800c238:	fb02 f303 	mul.w	r3, r2, r3
 800c23c:	011b      	lsls	r3, r3, #4
 800c23e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c242:	4413      	add	r3, r2
 800c244:	edd3 7a01 	vldr	s15, [r3, #4]
 800c248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c24c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c250:	edd3 6a01 	vldr	s13, [r3, #4]
 800c254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	fb02 f303 	mul.w	r3, r2, r3
 800c25e:	011b      	lsls	r3, r3, #4
 800c260:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c264:	4413      	add	r3, r2
 800c266:	edd3 7a00 	vldr	s15, [r3]
 800c26a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c26e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c272:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 800c276:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c27a:	ed93 7a00 	vldr	s14, [r3]
 800c27e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	fb02 f203 	mul.w	r2, r2, r3
 800c288:	4613      	mov	r3, r2
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	4413      	add	r3, r2
 800c28e:	00db      	lsls	r3, r3, #3
 800c290:	461a      	mov	r2, r3
 800c292:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c296:	4413      	add	r3, r2
 800c298:	edd3 7a00 	vldr	s15, [r3]
 800c29c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2a4:	edd3 6a01 	vldr	s13, [r3, #4]
 800c2a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2ac:	68ba      	ldr	r2, [r7, #8]
 800c2ae:	fb02 f203 	mul.w	r2, r2, r3
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	005b      	lsls	r3, r3, #1
 800c2b6:	4413      	add	r3, r2
 800c2b8:	00db      	lsls	r3, r3, #3
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2c0:	4413      	add	r3, r2
 800c2c2:	edd3 7a01 	vldr	s15, [r3, #4]
 800c2c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c2ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2ce:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800c2d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2d6:	ed93 7a00 	vldr	s14, [r3]
 800c2da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c2de:	68ba      	ldr	r2, [r7, #8]
 800c2e0:	fb02 f203 	mul.w	r2, r2, r3
 800c2e4:	4613      	mov	r3, r2
 800c2e6:	005b      	lsls	r3, r3, #1
 800c2e8:	4413      	add	r3, r2
 800c2ea:	00db      	lsls	r3, r3, #3
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2f2:	4413      	add	r3, r2
 800c2f4:	edd3 7a01 	vldr	s15, [r3, #4]
 800c2f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c300:	edd3 6a01 	vldr	s13, [r3, #4]
 800c304:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	fb02 f203 	mul.w	r2, r2, r3
 800c30e:	4613      	mov	r3, r2
 800c310:	005b      	lsls	r3, r3, #1
 800c312:	4413      	add	r3, r2
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	461a      	mov	r2, r3
 800c318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c31c:	4413      	add	r3, r2
 800c31e:	edd3 7a00 	vldr	s15, [r3]
 800c322:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c32a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 800c32e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c332:	ed93 7a00 	vldr	s14, [r3]
 800c336:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	fb02 f303 	mul.w	r3, r2, r3
 800c340:	015b      	lsls	r3, r3, #5
 800c342:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c346:	4413      	add	r3, r2
 800c348:	edd3 7a00 	vldr	s15, [r3]
 800c34c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c350:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c354:	edd3 6a01 	vldr	s13, [r3, #4]
 800c358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c35c:	68ba      	ldr	r2, [r7, #8]
 800c35e:	fb02 f303 	mul.w	r3, r2, r3
 800c362:	015b      	lsls	r3, r3, #5
 800c364:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c368:	4413      	add	r3, r2
 800c36a:	edd3 7a01 	vldr	s15, [r3, #4]
 800c36e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c372:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c376:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800c37a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c37e:	ed93 7a00 	vldr	s14, [r3]
 800c382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c386:	68ba      	ldr	r2, [r7, #8]
 800c388:	fb02 f303 	mul.w	r3, r2, r3
 800c38c:	015b      	lsls	r3, r3, #5
 800c38e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c392:	4413      	add	r3, r2
 800c394:	edd3 7a01 	vldr	s15, [r3, #4]
 800c398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c39c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c3a0:	edd3 6a01 	vldr	s13, [r3, #4]
 800c3a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	fb02 f303 	mul.w	r3, r2, r3
 800c3ae:	015b      	lsls	r3, r3, #5
 800c3b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c3b4:	4413      	add	r3, r2
 800c3b6:	edd3 7a00 	vldr	s15, [r3]
 800c3ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c3be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3c2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 800c3c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3ca:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c3ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3d2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800c3d6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c3da:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c3de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3e2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 800c3e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3ea:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800c3ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3f2:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 800c3f6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c3fa:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800c3fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c402:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 800c406:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c40a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c40e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c412:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 800c416:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c41a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c41e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c422:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 800c426:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c42a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c42e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c432:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800c436:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c43a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c442:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 800c446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c44a:	ed93 7a00 	vldr	s14, [r3]
 800c44e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c452:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800c456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c45a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c45e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c462:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 800c466:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c46a:	ed93 7a01 	vldr	s14, [r3, #4]
 800c46e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800c472:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800c476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c47a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c47e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c482:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 800c486:	ed97 7a08 	vldr	s14, [r7, #32]
 800c48a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c48e:	edd7 7a06 	vldr	s15, [r7, #24]
 800c492:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c496:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c49a:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800c49e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c4a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4aa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 800c4ae:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c4b2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800c4b6:	edd7 7a06 	vldr	s15, [r7, #24]
 800c4ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c4c2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800c4c6:	edd7 7a04 	vldr	s15, [r7, #16]
 800c4ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4d2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 800c4d6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800c4da:	edd7 7a07 	vldr	s15, [r7, #28]
 800c4de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4e2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800c4e6:	edd7 7a05 	vldr	s15, [r7, #20]
 800c4ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c4ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4f2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 800c4f6:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c4fa:	edd7 7a07 	vldr	s15, [r7, #28]
 800c4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c502:	eeb1 7a67 	vneg.f32	s14, s15
 800c506:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800c50a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c50e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c512:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c516:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 800c51a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c51e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800c522:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c52a:	edc3 7a00 	vstr	s15, [r3]
 800c52e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c532:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c53a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c53e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 800c542:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c546:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800c54a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c54e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c552:	edc3 7a00 	vstr	s15, [r3]
 800c556:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c55a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800c55e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c566:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 800c56a:	ed97 7a08 	vldr	s14, [r7, #32]
 800c56e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800c572:	edd7 7a04 	vldr	s15, [r7, #16]
 800c576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c57a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c57e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800c582:	edd7 7a06 	vldr	s15, [r7, #24]
 800c586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c58a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c58e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 800c592:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c596:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800c59a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c59e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5a6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800c5aa:	edd7 7a06 	vldr	s15, [r7, #24]
 800c5ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5b6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 800c5ba:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800c5be:	edd7 7a07 	vldr	s15, [r7, #28]
 800c5c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5c6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800c5ca:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5d6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 800c5da:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800c5de:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5e6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800c5ea:	edd7 7a07 	vldr	s15, [r7, #28]
 800c5ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c5f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5f6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 800c5fa:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800c5fe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c602:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c606:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c60a:	edc3 7a00 	vstr	s15, [r3]
 800c60e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800c612:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c61a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c61e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 800c622:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800c626:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c62a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c62e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c632:	edc3 7a00 	vstr	s15, [r3]
 800c636:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800c63a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c63e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c642:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c646:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 800c64a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c64e:	3308      	adds	r3, #8
 800c650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c654:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c658:	3308      	adds	r3, #8
 800c65a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c65e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c662:	3308      	adds	r3, #8
 800c664:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c668:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c66c:	3308      	adds	r3, #8
 800c66e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c672:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c676:	3308      	adds	r3, #8
 800c678:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 800c67c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c680:	3301      	adds	r3, #1
 800c682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c686:	e550      	b.n	800c12a <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xaa>
    }
}
 800c688:	bf00      	nop
 800c68a:	37ac      	adds	r7, #172	; 0xac
 800c68c:	46bd      	mov	sp, r7
 800c68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c692:	4770      	bx	lr

0800c694 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b08e      	sub	sp, #56	; 0x38
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800c6a8:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 800c6b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6b2:	00db      	lsls	r3, r3, #3
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 fead 	bl	800d414 <_Z9ei_mallocj>
 800c6ba:	61b8      	str	r0, [r7, #24]

    for ( u=0; u<m; ++u ) {
 800c6bc:	2300      	movs	r3, #0
 800c6be:	637b      	str	r3, [r7, #52]	; 0x34
 800c6c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	f280 80b6 	bge.w	800c836 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a2>
        k=u;
 800c6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6cc:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	da14      	bge.n	800c704 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x70>
            scratch[q1] = Fout[ k  ];
 800c6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6dc:	00db      	lsls	r3, r3, #3
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	18d1      	adds	r1, r2, r3
 800c6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	69ba      	ldr	r2, [r7, #24]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	460a      	mov	r2, r1
 800c6ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6f0:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 800c6f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	4413      	add	r3, r2
 800c6fa:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	3301      	adds	r3, #1
 800c700:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c702:	e7e6      	b.n	800c6d2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x3e>
        }

        k=u;
 800c704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c706:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800c708:	2300      	movs	r3, #0
 800c70a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c710:	429a      	cmp	r2, r3
 800c712:	f280 808c 	bge.w	800c82e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19a>
            int twidx=0;
 800c716:	2300      	movs	r3, #0
 800c718:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	00db      	lsls	r3, r3, #3
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	4413      	add	r3, r2
 800c722:	69ba      	ldr	r2, [r7, #24]
 800c724:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c728:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 800c72c:	2301      	movs	r3, #1
 800c72e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c730:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c734:	429a      	cmp	r2, r3
 800c736:	da72      	bge.n	800c81e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18a>
                twidx += fstride * k;
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	fb02 f203 	mul.w	r2, r2, r3
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	4413      	add	r3, r2
 800c744:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 800c746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	db03      	blt.n	800c756 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc2>
 800c74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	1ad3      	subs	r3, r2, r3
 800c754:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	69ba      	ldr	r2, [r7, #24]
 800c75c:	4413      	add	r3, r2
 800c75e:	ed93 7a00 	vldr	s14, [r3]
 800c762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	6a3a      	ldr	r2, [r7, #32]
 800c768:	4413      	add	r3, r2
 800c76a:	edd3 7a00 	vldr	s15, [r3]
 800c76e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c774:	00db      	lsls	r3, r3, #3
 800c776:	69ba      	ldr	r2, [r7, #24]
 800c778:	4413      	add	r3, r2
 800c77a:	edd3 6a01 	vldr	s13, [r3, #4]
 800c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c780:	00db      	lsls	r3, r3, #3
 800c782:	6a3a      	ldr	r2, [r7, #32]
 800c784:	4413      	add	r3, r2
 800c786:	edd3 7a01 	vldr	s15, [r3, #4]
 800c78a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c78e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c792:	edc7 7a04 	vstr	s15, [r7, #16]
 800c796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c798:	00db      	lsls	r3, r3, #3
 800c79a:	69ba      	ldr	r2, [r7, #24]
 800c79c:	4413      	add	r3, r2
 800c79e:	ed93 7a00 	vldr	s14, [r3]
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7a4:	00db      	lsls	r3, r3, #3
 800c7a6:	6a3a      	ldr	r2, [r7, #32]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	edd3 7a01 	vldr	s15, [r3, #4]
 800c7ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	00db      	lsls	r3, r3, #3
 800c7b6:	69ba      	ldr	r2, [r7, #24]
 800c7b8:	4413      	add	r3, r2
 800c7ba:	edd3 6a01 	vldr	s13, [r3, #4]
 800c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c0:	00db      	lsls	r3, r3, #3
 800c7c2:	6a3a      	ldr	r2, [r7, #32]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	edd3 7a00 	vldr	s15, [r3]
 800c7ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c7ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7d2:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d8:	00db      	lsls	r3, r3, #3
 800c7da:	68fa      	ldr	r2, [r7, #12]
 800c7dc:	4413      	add	r3, r2
 800c7de:	ed93 7a00 	vldr	s14, [r3]
 800c7e2:	edd7 7a04 	vldr	s15, [r7, #16]
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	00db      	lsls	r3, r3, #3
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c7f2:	edc3 7a00 	vstr	s15, [r3]
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7f8:	00db      	lsls	r3, r3, #3
 800c7fa:	68fa      	ldr	r2, [r7, #12]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	ed93 7a01 	vldr	s14, [r3, #4]
 800c802:	edd7 7a05 	vldr	s15, [r7, #20]
 800c806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	68fa      	ldr	r2, [r7, #12]
 800c80c:	4413      	add	r3, r2
 800c80e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c812:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 800c816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c818:	3301      	adds	r3, #1
 800c81a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c81c:	e788      	b.n	800c730 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9c>
            }
            k += m;
 800c81e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	4413      	add	r3, r2
 800c824:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	3301      	adds	r3, #1
 800c82a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c82c:	e76e      	b.n	800c70c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x78>
    for ( u=0; u<m; ++u ) {
 800c82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c830:	3301      	adds	r3, #1
 800c832:	637b      	str	r3, [r7, #52]	; 0x34
 800c834:	e744      	b.n	800c6c0 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2c>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 800c836:	69b8      	ldr	r0, [r7, #24]
 800c838:	f000 fe06 	bl	800d448 <_Z7ei_freePv>
}
 800c83c:	bf00      	nop
 800c83e:	3738      	adds	r7, #56	; 0x38
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b08a      	sub	sp, #40	; 0x28
 800c848:	af02      	add	r7, sp, #8
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
 800c850:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	1d1a      	adds	r2, r3, #4
 800c85a:	62ba      	str	r2, [r7, #40]	; 0x28
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	1d1a      	adds	r2, r3, #4
 800c864:	62ba      	str	r2, [r7, #40]	; 0x28
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	697a      	ldr	r2, [r7, #20]
 800c86e:	fb02 f303 	mul.w	r3, r2, r3
 800c872:	00db      	lsls	r3, r3, #3
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	4413      	add	r3, r2
 800c878:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d11a      	bne.n	800c8b6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c888:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	687a      	ldr	r2, [r7, #4]
 800c890:	fb02 f303 	mul.w	r3, r2, r3
 800c894:	00db      	lsls	r3, r3, #3
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	4413      	add	r3, r2
 800c89a:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3308      	adds	r3, #8
 800c8a0:	60fb      	str	r3, [r7, #12]
 800c8a2:	68fa      	ldr	r2, [r7, #12]
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	bf14      	ite	ne
 800c8aa:	2301      	movne	r3, #1
 800c8ac:	2300      	moveq	r3, #0
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d024      	beq.n	800c8fe <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800c8b4:	e7e4      	b.n	800c880 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 800c8b6:	69bb      	ldr	r3, [r7, #24]
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	fb02 f203 	mul.w	r2, r2, r3
 800c8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	68b9      	ldr	r1, [r7, #8]
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f7ff ffba 	bl	800c844 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	fb02 f303 	mul.w	r3, r2, r3
 800c8d8:	00db      	lsls	r3, r3, #3
 800c8da:	68ba      	ldr	r2, [r7, #8]
 800c8dc:	4413      	add	r3, r2
 800c8de:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	4413      	add	r3, r2
 800c8e8:	60fb      	str	r3, [r7, #12]
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	bf14      	ite	ne
 800c8f2:	2301      	movne	r3, #1
 800c8f4:	2300      	moveq	r3, #0
 800c8f6:	b2db      	uxtb	r3, r3
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d000      	beq.n	800c8fe <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800c8fc:	e7db      	b.n	800c8b6 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	60fb      	str	r3, [r7, #12]

    // recombine the p smaller DFTs
    switch (p) {
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	3b02      	subs	r3, #2
 800c906:	2b03      	cmp	r3, #3
 800c908:	d826      	bhi.n	800c958 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 800c90a:	a201      	add	r2, pc, #4	; (adr r2, 800c910 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 800c90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c910:	0800c921 	.word	0x0800c921
 800c914:	0800c92f 	.word	0x0800c92f
 800c918:	0800c93d 	.word	0x0800c93d
 800c91c:	0800c94b 	.word	0x0800c94b
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c924:	6879      	ldr	r1, [r7, #4]
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f7ff f806 	bl	800b938 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 800c92c:	e01d      	b.n	800c96a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c932:	6879      	ldr	r1, [r7, #4]
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f7ff fa33 	bl	800bda0 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 800c93a:	e016      	b.n	800c96a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c940:	6879      	ldr	r1, [r7, #4]
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f7ff f875 	bl	800ba32 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 800c948:	e00f      	b.n	800c96a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c94e:	6879      	ldr	r1, [r7, #4]
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f7ff fb95 	bl	800c080 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 800c956:	e008      	b.n	800c96a <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f7ff fe96 	bl	800c694 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 800c968:	bf00      	nop
    }
}
 800c96a:	bf00      	nop
 800c96c:	3720      	adds	r7, #32
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop

0800c974 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 800c974:	b590      	push	{r4, r7, lr}
 800c976:	b087      	sub	sp, #28
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
    int p=4;
 800c97e:	2304      	movs	r3, #4
 800c980:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7f3 fde6 	bl	8000554 <__aeabi_i2d>
 800c988:	4603      	mov	r3, r0
 800c98a:	460c      	mov	r4, r1
 800c98c:	ec44 3b10 	vmov	d0, r3, r4
 800c990:	f00a f888 	bl	8016aa4 <sqrt>
 800c994:	eeb0 7a40 	vmov.f32	s14, s0
 800c998:	eef0 7a60 	vmov.f32	s15, s1
 800c99c:	eeb0 0a47 	vmov.f32	s0, s14
 800c9a0:	eef0 0a67 	vmov.f32	s1, s15
 800c9a4:	f009 fd6c 	bl	8016480 <floor>
 800c9a8:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	fb93 f2f2 	sdiv	r2, r3, r2
 800c9b4:	6979      	ldr	r1, [r7, #20]
 800c9b6:	fb01 f202 	mul.w	r2, r1, r2
 800c9ba:	1a9b      	subs	r3, r3, r2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01f      	beq.n	800ca00 <_ZL9kf_factoriPi+0x8c>
            switch (p) {
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d004      	beq.n	800c9d0 <_ZL9kf_factoriPi+0x5c>
 800c9c6:	2b04      	cmp	r3, #4
 800c9c8:	d105      	bne.n	800c9d6 <_ZL9kf_factoriPi+0x62>
                case 4: p = 2; break;
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	617b      	str	r3, [r7, #20]
 800c9ce:	e006      	b.n	800c9de <_ZL9kf_factoriPi+0x6a>
                case 2: p = 3; break;
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	617b      	str	r3, [r7, #20]
 800c9d4:	e003      	b.n	800c9de <_ZL9kf_factoriPi+0x6a>
                default: p += 2; break;
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	3302      	adds	r3, #2
 800c9da:	617b      	str	r3, [r7, #20]
 800c9dc:	bf00      	nop
            }
            if (p > floor_sqrt)
 800c9de:	6978      	ldr	r0, [r7, #20]
 800c9e0:	f7f3 fdb8 	bl	8000554 <__aeabi_i2d>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	4623      	mov	r3, r4
 800c9ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c9f0:	f7f4 f88c 	bl	8000b0c <__aeabi_dcmplt>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d001      	beq.n	800c9fe <_ZL9kf_factoriPi+0x8a>
                p = n;          /* no more factors, skip to end */
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	617b      	str	r3, [r7, #20]
        while (n % p) {
 800c9fe:	e7d5      	b.n	800c9ac <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	fb92 f3f3 	sdiv	r3, r2, r3
 800ca08:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	1d1a      	adds	r2, r3, #4
 800ca0e:	603a      	str	r2, [r7, #0]
 800ca10:	697a      	ldr	r2, [r7, #20]
 800ca12:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	1d1a      	adds	r2, r3, #4
 800ca18:	603a      	str	r2, [r7, #0]
 800ca1a:	687a      	ldr	r2, [r7, #4]
 800ca1c:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b01      	cmp	r3, #1
 800ca22:	dd00      	ble.n	800ca26 <_ZL9kf_factoriPi+0xb2>
    do {
 800ca24:	e7c2      	b.n	800c9ac <_ZL9kf_factoriPi+0x38>
}
 800ca26:	bf00      	nop
 800ca28:	371c      	adds	r7, #28
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd90      	pop	{r4, r7, pc}
	...

0800ca30 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 800ca30:	b5b0      	push	{r4, r5, r7, lr}
 800ca32:	b090      	sub	sp, #64	; 0x40
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	607a      	str	r2, [r7, #4]
 800ca3c:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 800ca42:	68fb      	ldr	r3, [r7, #12]
    size_t memneeded = sizeof(struct kiss_fft_state)
 800ca44:	3321      	adds	r3, #33	; 0x21
 800ca46:	00db      	lsls	r3, r3, #3
 800ca48:	637b      	str	r3, [r7, #52]	; 0x34

    if ( lenmem==NULL ) {
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d104      	bne.n	800ca5a <kiss_fft_alloc+0x2a>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 800ca50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca52:	f000 fcdf 	bl	800d414 <_Z9ei_mallocj>
 800ca56:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ca58:	e00c      	b.n	800ca74 <kiss_fft_alloc+0x44>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d006      	beq.n	800ca6e <kiss_fft_alloc+0x3e>
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d801      	bhi.n	800ca6e <kiss_fft_alloc+0x3e>
            st = (kiss_fft_cfg)mem;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        *lenmem = memneeded;
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca72:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 800ca74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	f000 80a0 	beq.w	800cbbc <kiss_fft_alloc+0x18c>
        int i;
        st->nfft=nfft;
 800ca7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 800ca82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca84:	68ba      	ldr	r2, [r7, #8]
 800ca86:	605a      	str	r2, [r3, #4]
        if (inverse_fft)
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d048      	beq.n	800cb20 <kiss_fft_alloc+0xf0>
        {
            for (i=0;i<nfft;++i) {
 800ca8e:	2300      	movs	r3, #0
 800ca90:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	f280 808a 	bge.w	800cbb0 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 800ca9c:	a44e      	add	r4, pc, #312	; (adr r4, 800cbd8 <kiss_fft_alloc+0x1a8>)
 800ca9e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800caa2:	e9c7 3406 	strd	r3, r4, [r7, #24]
                double phase = 2*pi*i / nfft;
 800caa6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800caa8:	f7f3 fd54 	bl	8000554 <__aeabi_i2d>
 800caac:	a34c      	add	r3, pc, #304	; (adr r3, 800cbe0 <kiss_fft_alloc+0x1b0>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	f7f3 fdb9 	bl	8000628 <__aeabi_dmul>
 800cab6:	4603      	mov	r3, r0
 800cab8:	460c      	mov	r4, r1
 800caba:	4625      	mov	r5, r4
 800cabc:	461c      	mov	r4, r3
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7f3 fd48 	bl	8000554 <__aeabi_i2d>
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	4620      	mov	r0, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	f7f3 fed6 	bl	800087c <__aeabi_ddiv>
 800cad0:	4603      	mov	r3, r0
 800cad2:	460c      	mov	r4, r1
 800cad4:	e9c7 3404 	strd	r3, r4, [r7, #16]
                kf_cexp(st->twiddles+i, phase );
 800cad8:	ed97 0b04 	vldr	d0, [r7, #16]
 800cadc:	f009 fc8c 	bl	80163f8 <cos>
 800cae0:	ec51 0b10 	vmov	r0, r1, d0
 800cae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae6:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800caea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caec:	00db      	lsls	r3, r3, #3
 800caee:	18d4      	adds	r4, r2, r3
 800caf0:	f7f4 f892 	bl	8000c18 <__aeabi_d2f>
 800caf4:	4603      	mov	r3, r0
 800caf6:	6023      	str	r3, [r4, #0]
 800caf8:	ed97 0b04 	vldr	d0, [r7, #16]
 800cafc:	f009 fdc4 	bl	8016688 <sin>
 800cb00:	ec51 0b10 	vmov	r0, r1, d0
 800cb04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb06:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	18d4      	adds	r4, r2, r3
 800cb10:	f7f4 f882 	bl	8000c18 <__aeabi_d2f>
 800cb14:	4603      	mov	r3, r0
 800cb16:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb1e:	e7b8      	b.n	800ca92 <kiss_fft_alloc+0x62>
            }
        } else {
            for (i=0;i<nfft;++i) {
 800cb20:	2300      	movs	r3, #0
 800cb22:	63bb      	str	r3, [r7, #56]	; 0x38
 800cb24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	da41      	bge.n	800cbb0 <kiss_fft_alloc+0x180>
                const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 800cb2c:	a42a      	add	r4, pc, #168	; (adr r4, 800cbd8 <kiss_fft_alloc+0x1a8>)
 800cb2e:	e9d4 3400 	ldrd	r3, r4, [r4]
 800cb32:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
                double phase = -2*pi*i / nfft;
 800cb36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cb38:	f7f3 fd0c 	bl	8000554 <__aeabi_i2d>
 800cb3c:	a32a      	add	r3, pc, #168	; (adr r3, 800cbe8 <kiss_fft_alloc+0x1b8>)
 800cb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb42:	f7f3 fd71 	bl	8000628 <__aeabi_dmul>
 800cb46:	4603      	mov	r3, r0
 800cb48:	460c      	mov	r4, r1
 800cb4a:	4625      	mov	r5, r4
 800cb4c:	461c      	mov	r4, r3
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f7f3 fd00 	bl	8000554 <__aeabi_i2d>
 800cb54:	4602      	mov	r2, r0
 800cb56:	460b      	mov	r3, r1
 800cb58:	4620      	mov	r0, r4
 800cb5a:	4629      	mov	r1, r5
 800cb5c:	f7f3 fe8e 	bl	800087c <__aeabi_ddiv>
 800cb60:	4603      	mov	r3, r0
 800cb62:	460c      	mov	r4, r1
 800cb64:	e9c7 3408 	strd	r3, r4, [r7, #32]
                kf_cexp(st->twiddles+i, phase );
 800cb68:	ed97 0b08 	vldr	d0, [r7, #32]
 800cb6c:	f009 fc44 	bl	80163f8 <cos>
 800cb70:	ec51 0b10 	vmov	r0, r1, d0
 800cb74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb76:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	18d4      	adds	r4, r2, r3
 800cb80:	f7f4 f84a 	bl	8000c18 <__aeabi_d2f>
 800cb84:	4603      	mov	r3, r0
 800cb86:	6023      	str	r3, [r4, #0]
 800cb88:	ed97 0b08 	vldr	d0, [r7, #32]
 800cb8c:	f009 fd7c 	bl	8016688 <sin>
 800cb90:	ec51 0b10 	vmov	r0, r1, d0
 800cb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb96:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	00db      	lsls	r3, r3, #3
 800cb9e:	18d4      	adds	r4, r2, r3
 800cba0:	f7f4 f83a 	bl	8000c18 <__aeabi_d2f>
 800cba4:	4603      	mov	r3, r0
 800cba6:	6063      	str	r3, [r4, #4]
            for (i=0;i<nfft;++i) {
 800cba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbaa:	3301      	adds	r3, #1
 800cbac:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbae:	e7b9      	b.n	800cb24 <kiss_fft_alloc+0xf4>
            }
        }

        kf_factor(nfft,st->factors);
 800cbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f7ff fedc 	bl	800c974 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 800cbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d002      	beq.n	800cbc8 <kiss_fft_alloc+0x198>
        *memallocated = memneeded;
 800cbc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbc6:	601a      	str	r2, [r3, #0]
    }

    return st;
 800cbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3740      	adds	r7, #64	; 0x40
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bdb0      	pop	{r4, r5, r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	f3af 8000 	nop.w
 800cbd8:	54442d18 	.word	0x54442d18
 800cbdc:	400921fb 	.word	0x400921fb
 800cbe0:	54442d18 	.word	0x54442d18
 800cbe4:	401921fb 	.word	0x401921fb
 800cbe8:	54442d18 	.word	0x54442d18
 800cbec:	c01921fb 	.word	0xc01921fb

0800cbf0 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b088      	sub	sp, #32
 800cbf4:	af02      	add	r7, sp, #8
 800cbf6:	60f8      	str	r0, [r7, #12]
 800cbf8:	60b9      	str	r1, [r7, #8]
 800cbfa:	607a      	str	r2, [r7, #4]
 800cbfc:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d11d      	bne.n	800cc42 <kiss_fft_stride+0x52>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	00db      	lsls	r3, r3, #3
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f000 fc01 	bl	800d414 <_Z9ei_mallocj>
 800cc12:	6178      	str	r0, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3308      	adds	r3, #8
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	9201      	str	r2, [sp, #4]
 800cc1c:	9300      	str	r3, [sp, #0]
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2201      	movs	r2, #1
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	6978      	ldr	r0, [r7, #20]
 800cc26:	f7ff fe0d 	bl	800c844 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	00db      	lsls	r3, r3, #3
 800cc30:	461a      	mov	r2, r3
 800cc32:	6979      	ldr	r1, [r7, #20]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f00c fb51 	bl	80192dc <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 800cc3a:	6978      	ldr	r0, [r7, #20]
 800cc3c:	f000 fc04 	bl	800d448 <_Z7ei_freePv>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 800cc40:	e00a      	b.n	800cc58 <kiss_fft_stride+0x68>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	3308      	adds	r3, #8
 800cc46:	68fa      	ldr	r2, [r7, #12]
 800cc48:	9201      	str	r2, [sp, #4]
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	68b9      	ldr	r1, [r7, #8]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff fdf6 	bl	800c844 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 800cc58:	bf00      	nop
 800cc5a:	3718      	adds	r7, #24
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	60f8      	str	r0, [r7, #12]
 800cc68:	60b9      	str	r1, [r7, #8]
 800cc6a:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	68b9      	ldr	r1, [r7, #8]
 800cc72:	68f8      	ldr	r0, [r7, #12]
 800cc74:	f7ff ffbc 	bl	800cbf0 <kiss_fft_stride>
}
 800cc78:	bf00      	nop
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 800cc80:	b5b0      	push	{r4, r5, r7, lr}
 800cc82:	b090      	sub	sp, #64	; 0x40
 800cc84:	af02      	add	r7, sp, #8
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
 800cc8c:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	633b      	str	r3, [r7, #48]	; 0x30
    size_t subsize = 0, memneeded;
 800cc92:	2300      	movs	r3, #0
 800cc94:	617b      	str	r3, [r7, #20]

    if (nfft & 1) {
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f003 0301 	and.w	r3, r3, #1
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d009      	beq.n	800ccb4 <kiss_fftr_alloc+0x34>
        fprintf(stderr,"Real FFT optimization must be even.\n");
 800cca0:	4b89      	ldr	r3, [pc, #548]	; (800cec8 <kiss_fftr_alloc+0x248>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	2224      	movs	r2, #36	; 0x24
 800cca8:	2101      	movs	r1, #1
 800ccaa:	4888      	ldr	r0, [pc, #544]	; (800cecc <kiss_fftr_alloc+0x24c>)
 800ccac:	f00c fad4 	bl	8019258 <fwrite>
        return NULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	e0fb      	b.n	800ceac <kiss_fftr_alloc+0x22c>
    }
    nfft >>= 1;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	105b      	asrs	r3, r3, #1
 800ccb8:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 800ccba:	f107 0214 	add.w	r2, r7, #20
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	9300      	str	r3, [sp, #0]
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	68b9      	ldr	r1, [r7, #8]
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f7ff feb1 	bl	800ca30 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 800ccce:	68fa      	ldr	r2, [r7, #12]
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	005b      	lsls	r3, r3, #1
 800ccd4:	4413      	add	r3, r2
 800ccd6:	0fda      	lsrs	r2, r3, #31
 800ccd8:	4413      	add	r3, r2
 800ccda:	105b      	asrs	r3, r3, #1
 800ccdc:	00da      	lsls	r2, r3, #3
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	4413      	add	r3, r2
 800cce2:	330c      	adds	r3, #12
 800cce4:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (lenmem == NULL) {
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d104      	bne.n	800ccf6 <kiss_fftr_alloc+0x76>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 800ccec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccee:	f000 fb91 	bl	800d414 <_Z9ei_mallocj>
 800ccf2:	6338      	str	r0, [r7, #48]	; 0x30
 800ccf4:	e009      	b.n	800cd0a <kiss_fftr_alloc+0x8a>
    } else {
        if (*lenmem >= memneeded)
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d801      	bhi.n	800cd04 <kiss_fftr_alloc+0x84>
            st = (kiss_fftr_cfg) mem;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	633b      	str	r3, [r7, #48]	; 0x30
        *lenmem = memneeded;
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd08:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 800cd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <kiss_fftr_alloc+0x94>
        return NULL;
 800cd10:	2300      	movs	r3, #0
 800cd12:	e0cb      	b.n	800ceac <kiss_fftr_alloc+0x22c>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 800cd14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd16:	f103 020c 	add.w	r2, r3, #12
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd20:	681a      	ldr	r2, [r3, #0]
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	441a      	add	r2, r3
 800cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd28:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	00db      	lsls	r3, r3, #3
 800cd32:	441a      	add	r2, r3
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 800cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	f107 0114 	add.w	r1, r7, #20
 800cd40:	2300      	movs	r3, #0
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	460b      	mov	r3, r1
 800cd46:	68b9      	ldr	r1, [r7, #8]
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f7ff fe71 	bl	800ca30 <kiss_fft_alloc>

    if (inverse_fft) {
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d052      	beq.n	800cdfa <kiss_fftr_alloc+0x17a>
        for (i = 0; i < nfft/2; ++i) {
 800cd54:	2300      	movs	r3, #0
 800cd56:	637b      	str	r3, [r7, #52]	; 0x34
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	0fda      	lsrs	r2, r3, #31
 800cd5c:	4413      	add	r3, r2
 800cd5e:	105b      	asrs	r3, r3, #1
 800cd60:	461a      	mov	r2, r3
 800cd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd64:	4293      	cmp	r3, r2
 800cd66:	f280 809a 	bge.w	800ce9e <kiss_fftr_alloc+0x21e>
            double phase =
                3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 800cd6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7f3 fbf0 	bl	8000554 <__aeabi_i2d>
 800cd74:	4604      	mov	r4, r0
 800cd76:	460d      	mov	r5, r1
 800cd78:	68f8      	ldr	r0, [r7, #12]
 800cd7a:	f7f3 fbeb 	bl	8000554 <__aeabi_i2d>
 800cd7e:	4602      	mov	r2, r0
 800cd80:	460b      	mov	r3, r1
 800cd82:	4620      	mov	r0, r4
 800cd84:	4629      	mov	r1, r5
 800cd86:	f7f3 fd79 	bl	800087c <__aeabi_ddiv>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	460c      	mov	r4, r1
 800cd8e:	4618      	mov	r0, r3
 800cd90:	4621      	mov	r1, r4
 800cd92:	f04f 0200 	mov.w	r2, #0
 800cd96:	4b4e      	ldr	r3, [pc, #312]	; (800ced0 <kiss_fftr_alloc+0x250>)
 800cd98:	f7f3 fa90 	bl	80002bc <__adddf3>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	460c      	mov	r4, r1
 800cda0:	4618      	mov	r0, r3
 800cda2:	4621      	mov	r1, r4
            double phase =
 800cda4:	a344      	add	r3, pc, #272	; (adr r3, 800ceb8 <kiss_fftr_alloc+0x238>)
 800cda6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdaa:	f7f3 fc3d 	bl	8000628 <__aeabi_dmul>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	460c      	mov	r4, r1
 800cdb2:	e9c7 3406 	strd	r3, r4, [r7, #24]
            kf_cexp (st->super_twiddles+i,phase);
 800cdb6:	ed97 0b06 	vldr	d0, [r7, #24]
 800cdba:	f009 fb1d 	bl	80163f8 <cos>
 800cdbe:	ec51 0b10 	vmov	r0, r1, d0
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc4:	689a      	ldr	r2, [r3, #8]
 800cdc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc8:	00db      	lsls	r3, r3, #3
 800cdca:	18d4      	adds	r4, r2, r3
 800cdcc:	f7f3 ff24 	bl	8000c18 <__aeabi_d2f>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	6023      	str	r3, [r4, #0]
 800cdd4:	ed97 0b06 	vldr	d0, [r7, #24]
 800cdd8:	f009 fc56 	bl	8016688 <sin>
 800cddc:	ec51 0b10 	vmov	r0, r1, d0
 800cde0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cde2:	689a      	ldr	r2, [r3, #8]
 800cde4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde6:	00db      	lsls	r3, r3, #3
 800cde8:	18d4      	adds	r4, r2, r3
 800cdea:	f7f3 ff15 	bl	8000c18 <__aeabi_d2f>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 800cdf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	637b      	str	r3, [r7, #52]	; 0x34
 800cdf8:	e7ae      	b.n	800cd58 <kiss_fftr_alloc+0xd8>
        }
    } else  {
        for (i = 0; i < nfft/2; ++i) {
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	637b      	str	r3, [r7, #52]	; 0x34
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	0fda      	lsrs	r2, r3, #31
 800ce02:	4413      	add	r3, r2
 800ce04:	105b      	asrs	r3, r3, #1
 800ce06:	461a      	mov	r2, r3
 800ce08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	da47      	bge.n	800ce9e <kiss_fftr_alloc+0x21e>
            double phase =
                -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 800ce0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce10:	3301      	adds	r3, #1
 800ce12:	4618      	mov	r0, r3
 800ce14:	f7f3 fb9e 	bl	8000554 <__aeabi_i2d>
 800ce18:	4604      	mov	r4, r0
 800ce1a:	460d      	mov	r5, r1
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f7f3 fb99 	bl	8000554 <__aeabi_i2d>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	4620      	mov	r0, r4
 800ce28:	4629      	mov	r1, r5
 800ce2a:	f7f3 fd27 	bl	800087c <__aeabi_ddiv>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	460c      	mov	r4, r1
 800ce32:	4618      	mov	r0, r3
 800ce34:	4621      	mov	r1, r4
 800ce36:	f04f 0200 	mov.w	r2, #0
 800ce3a:	4b25      	ldr	r3, [pc, #148]	; (800ced0 <kiss_fftr_alloc+0x250>)
 800ce3c:	f7f3 fa3e 	bl	80002bc <__adddf3>
 800ce40:	4603      	mov	r3, r0
 800ce42:	460c      	mov	r4, r1
 800ce44:	4618      	mov	r0, r3
 800ce46:	4621      	mov	r1, r4
            double phase =
 800ce48:	a31d      	add	r3, pc, #116	; (adr r3, 800cec0 <kiss_fftr_alloc+0x240>)
 800ce4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4e:	f7f3 fbeb 	bl	8000628 <__aeabi_dmul>
 800ce52:	4603      	mov	r3, r0
 800ce54:	460c      	mov	r4, r1
 800ce56:	e9c7 3408 	strd	r3, r4, [r7, #32]
            kf_cexp (st->super_twiddles+i,phase);
 800ce5a:	ed97 0b08 	vldr	d0, [r7, #32]
 800ce5e:	f009 facb 	bl	80163f8 <cos>
 800ce62:	ec51 0b10 	vmov	r0, r1, d0
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	689a      	ldr	r2, [r3, #8]
 800ce6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce6c:	00db      	lsls	r3, r3, #3
 800ce6e:	18d4      	adds	r4, r2, r3
 800ce70:	f7f3 fed2 	bl	8000c18 <__aeabi_d2f>
 800ce74:	4603      	mov	r3, r0
 800ce76:	6023      	str	r3, [r4, #0]
 800ce78:	ed97 0b08 	vldr	d0, [r7, #32]
 800ce7c:	f009 fc04 	bl	8016688 <sin>
 800ce80:	ec51 0b10 	vmov	r0, r1, d0
 800ce84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce86:	689a      	ldr	r2, [r3, #8]
 800ce88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8a:	00db      	lsls	r3, r3, #3
 800ce8c:	18d4      	adds	r4, r2, r3
 800ce8e:	f7f3 fec3 	bl	8000c18 <__aeabi_d2f>
 800ce92:	4603      	mov	r3, r0
 800ce94:	6063      	str	r3, [r4, #4]
        for (i = 0; i < nfft/2; ++i) {
 800ce96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce98:	3301      	adds	r3, #1
 800ce9a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce9c:	e7af      	b.n	800cdfe <kiss_fftr_alloc+0x17e>
        }
    }

    if (memallocated != NULL) {
 800ce9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d002      	beq.n	800ceaa <kiss_fftr_alloc+0x22a>
        *memallocated = memneeded;
 800cea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cea8:	601a      	str	r2, [r3, #0]
    }

    return st;
 800ceaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3738      	adds	r7, #56	; 0x38
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bdb0      	pop	{r4, r5, r7, pc}
 800ceb4:	f3af 8000 	nop.w
 800ceb8:	54442d18 	.word	0x54442d18
 800cebc:	400921fb 	.word	0x400921fb
 800cec0:	54442d18 	.word	0x54442d18
 800cec4:	c00921fb 	.word	0xc00921fb
 800cec8:	2000069c 	.word	0x2000069c
 800cecc:	0801caa0 	.word	0x0801caa0
 800ced0:	3fe00000 	.word	0x3fe00000

0800ced4 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b092      	sub	sp, #72	; 0x48
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	60f8      	str	r0, [r7, #12]
 800cedc:	60b9      	str	r1, [r7, #8]
 800cede:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d00a      	beq.n	800cf00 <kiss_fftr+0x2c>
        fprintf(stderr,"kiss fft usage error: improper alloc\n");
 800ceea:	4b8b      	ldr	r3, [pc, #556]	; (800d118 <kiss_fftr+0x244>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	2225      	movs	r2, #37	; 0x25
 800cef2:	2101      	movs	r1, #1
 800cef4:	4889      	ldr	r0, [pc, #548]	; (800d11c <kiss_fftr+0x248>)
 800cef6:	f00c f9af 	bl	8019258 <fwrite>
        exit(1);
 800cefa:	2001      	movs	r0, #1
 800cefc:	f00c f938 	bl	8019170 <exit>
    }

    ncfft = st->substate->nfft;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	6818      	ldr	r0, [r3, #0]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	685b      	ldr	r3, [r3, #4]
 800cf10:	461a      	mov	r2, r3
 800cf12:	68b9      	ldr	r1, [r7, #8]
 800cf14:	f7ff fea4 	bl	800cc60 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 800cf28:	ed97 7a04 	vldr	s14, [r7, #16]
 800cf2c:	edd7 7a05 	vldr	s15, [r7, #20]
 800cf30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 800cf3a:	ed97 7a04 	vldr	s14, [r7, #16]
 800cf3e:	edd7 7a05 	vldr	s15, [r7, #20]
 800cf42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	4413      	add	r3, r2
 800cf4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf4e:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f04f 0200 	mov.w	r2, #0
 800cf58:	605a      	str	r2, [r3, #4]
 800cf5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf5c:	00db      	lsls	r3, r3, #3
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	4413      	add	r3, r2
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	6852      	ldr	r2, [r2, #4]
 800cf66:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 800cf68:	2301      	movs	r3, #1
 800cf6a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6e:	0fda      	lsrs	r2, r3, #31
 800cf70:	4413      	add	r3, r2
 800cf72:	105b      	asrs	r3, r3, #1
 800cf74:	461a      	mov	r2, r3
 800cf76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	f300 80c9 	bgt.w	800d110 <kiss_fftr+0x23c>
        fpk    = st->tmpbuf[k];
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	685a      	ldr	r2, [r3, #4]
 800cf82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf84:	00db      	lsls	r3, r3, #3
 800cf86:	441a      	add	r2, r3
 800cf88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cf8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf90:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	685a      	ldr	r2, [r3, #4]
 800cf98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cf9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf9c:	1acb      	subs	r3, r1, r3
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	4413      	add	r3, r2
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	685a      	ldr	r2, [r3, #4]
 800cfaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cfac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfae:	1acb      	subs	r3, r1, r3
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	4413      	add	r3, r2
 800cfb4:	edd3 7a01 	vldr	s15, [r3, #4]
 800cfb8:	eef1 7a67 	vneg.f32	s15, s15
 800cfbc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 800cfc0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800cfc4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800cfc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfcc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800cfd0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cfd4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cfd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfdc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 800cfe0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800cfe4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800cfe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfec:	edc7 7a08 	vstr	s15, [r7, #32]
 800cff0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cff4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800cff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cffc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 800d000:	ed97 7a08 	vldr	s14, [r7, #32]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	689a      	ldr	r2, [r3, #8]
 800d008:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d00a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d00e:	3b01      	subs	r3, #1
 800d010:	00db      	lsls	r3, r3, #3
 800d012:	4413      	add	r3, r2
 800d014:	edd3 7a00 	vldr	s15, [r3]
 800d018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d01c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	689a      	ldr	r2, [r3, #8]
 800d024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d026:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d02a:	3b01      	subs	r3, #1
 800d02c:	00db      	lsls	r3, r3, #3
 800d02e:	4413      	add	r3, r2
 800d030:	edd3 7a01 	vldr	s15, [r3, #4]
 800d034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d03c:	edc7 7a06 	vstr	s15, [r7, #24]
 800d040:	ed97 7a08 	vldr	s14, [r7, #32]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	689a      	ldr	r2, [r3, #8]
 800d048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d04a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d04e:	3b01      	subs	r3, #1
 800d050:	00db      	lsls	r3, r3, #3
 800d052:	4413      	add	r3, r2
 800d054:	edd3 7a01 	vldr	s15, [r3, #4]
 800d058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d05c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	689a      	ldr	r2, [r3, #8]
 800d064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d066:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d06a:	3b01      	subs	r3, #1
 800d06c:	00db      	lsls	r3, r3, #3
 800d06e:	4413      	add	r3, r2
 800d070:	edd3 7a00 	vldr	s15, [r3]
 800d074:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d07c:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 800d080:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d084:	edd7 7a06 	vldr	s15, [r7, #24]
 800d088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d08c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d08e:	00db      	lsls	r3, r3, #3
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	4413      	add	r3, r2
 800d094:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d09c:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 800d0a0:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d0a4:	edd7 7a07 	vldr	s15, [r7, #28]
 800d0a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0ae:	00db      	lsls	r3, r3, #3
 800d0b0:	687a      	ldr	r2, [r7, #4]
 800d0b2:	4413      	add	r3, r2
 800d0b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d0b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0bc:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 800d0c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0c4:	edd7 7a06 	vldr	s15, [r7, #24]
 800d0c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0d0:	1ad3      	subs	r3, r2, r3
 800d0d2:	00db      	lsls	r3, r3, #3
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	4413      	add	r3, r2
 800d0d8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d0dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d0e0:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 800d0e4:	ed97 7a07 	vldr	s14, [r7, #28]
 800d0e8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d0ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	00db      	lsls	r3, r3, #3
 800d0f8:	687a      	ldr	r2, [r7, #4]
 800d0fa:	4413      	add	r3, r2
 800d0fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d100:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d104:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 800d108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d10a:	3301      	adds	r3, #1
 800d10c:	647b      	str	r3, [r7, #68]	; 0x44
 800d10e:	e72d      	b.n	800cf6c <kiss_fftr+0x98>
    }
}
 800d110:	bf00      	nop
 800d112:	3748      	adds	r7, #72	; 0x48
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	2000069c 	.word	0x2000069c
 800d11c:	0801cac8 	.word	0x0801cac8

0800d120 <_Z8DebugLogPKc>:

// Redirect TFLite DebugLog to ei_printf
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C"
#endif // defined(__cplusplus) && EI_C_LINKAGE == 1
void DebugLog(const char* s) {
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
    ei_printf("%s", s);
 800d128:	6879      	ldr	r1, [r7, #4]
 800d12a:	4803      	ldr	r0, [pc, #12]	; (800d138 <_Z8DebugLogPKc+0x18>)
 800d12c:	f7f7 fcd8 	bl	8004ae0 <_Z9ei_printfPKcz>
}
 800d130:	bf00      	nop
 800d132:	3708      	adds	r7, #8
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	0801caf0 	.word	0x0801caf0

0800d13c <_ZSt5log10f>:
  { return __builtin_log10f(__x); }
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	ed87 0a01 	vstr	s0, [r7, #4]
 800d146:	ed97 0a01 	vldr	s0, [r7, #4]
 800d14a:	f009 fd7f 	bl	8016c4c <log10f>
 800d14e:	eef0 7a40 	vmov.f32	s15, s0
 800d152:	eeb0 0a67 	vmov.f32	s0, s15
 800d156:	3708      	adds	r7, #8
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <_ZSt5isinfd>:
  { return __builtin_isinf(__x); }
 800d15c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	ed87 0b00 	vstr	d0, [r7]
 800d166:	683c      	ldr	r4, [r7, #0]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800d16e:	2301      	movs	r3, #1
 800d170:	461e      	mov	r6, r3
 800d172:	f04f 32ff 	mov.w	r2, #4294967295
 800d176:	4b0f      	ldr	r3, [pc, #60]	; (800d1b4 <_ZSt5isinfd+0x58>)
 800d178:	4620      	mov	r0, r4
 800d17a:	4629      	mov	r1, r5
 800d17c:	f7f3 fcee 	bl	8000b5c <__aeabi_dcmpun>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d10b      	bne.n	800d19e <_ZSt5isinfd+0x42>
 800d186:	f04f 32ff 	mov.w	r2, #4294967295
 800d18a:	4b0a      	ldr	r3, [pc, #40]	; (800d1b4 <_ZSt5isinfd+0x58>)
 800d18c:	4620      	mov	r0, r4
 800d18e:	4629      	mov	r1, r5
 800d190:	f7f3 fcc6 	bl	8000b20 <__aeabi_dcmple>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <_ZSt5isinfd+0x42>
 800d19a:	2300      	movs	r3, #0
 800d19c:	461e      	mov	r6, r3
 800d19e:	b2f3      	uxtb	r3, r6
 800d1a0:	f083 0301 	eor.w	r3, r3, #1
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	f003 0301 	and.w	r3, r3, #1
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1b4:	7fefffff 	.word	0x7fefffff

0800d1b8 <_Z29ei_run_impulse_check_canceledv>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 800d1b8:	b480      	push	{r7}
 800d1ba:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 800d1c8:	b598      	push	{r3, r4, r7, lr}
 800d1ca:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800d1cc:	f7fa f99a 	bl	8007504 <HAL_GetTick>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	f04f 0400 	mov.w	r4, #0
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	4621      	mov	r1, r4
 800d1da:	bd98      	pop	{r3, r4, r7, pc}
 800d1dc:	0000      	movs	r0, r0
	...

0800d1e0 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 800d1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e2:	b08d      	sub	sp, #52	; 0x34
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	ed87 0a01 	vstr	s0, [r7, #4]
        }
        *(c) = '\0';
    }


    ei_printf("%s", s);
 800d1ea:	466b      	mov	r3, sp
 800d1ec:	461e      	mov	r6, r3
    float n = f;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	62bb      	str	r3, [r7, #40]	; 0x28
    char s[MAX_NUMBER_STRING_SIZE];
 800d1f2:	4b83      	ldr	r3, [pc, #524]	; (800d400 <_Z15ei_printf_floatf+0x220>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	1e58      	subs	r0, r3, #1
 800d1f8:	6278      	str	r0, [r7, #36]	; 0x24
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	3301      	adds	r3, #1
 800d1fe:	4619      	mov	r1, r3
 800d200:	f04f 0200 	mov.w	r2, #0
 800d204:	f04f 0300 	mov.w	r3, #0
 800d208:	f04f 0400 	mov.w	r4, #0
 800d20c:	00d4      	lsls	r4, r2, #3
 800d20e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d212:	00cb      	lsls	r3, r1, #3
 800d214:	4603      	mov	r3, r0
 800d216:	3301      	adds	r3, #1
 800d218:	4619      	mov	r1, r3
 800d21a:	f04f 0200 	mov.w	r2, #0
 800d21e:	f04f 0300 	mov.w	r3, #0
 800d222:	f04f 0400 	mov.w	r4, #0
 800d226:	00d4      	lsls	r4, r2, #3
 800d228:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d22c:	00cb      	lsls	r3, r1, #3
 800d22e:	4603      	mov	r3, r0
 800d230:	3301      	adds	r3, #1
 800d232:	3307      	adds	r3, #7
 800d234:	08db      	lsrs	r3, r3, #3
 800d236:	00db      	lsls	r3, r3, #3
 800d238:	ebad 0d03 	sub.w	sp, sp, r3
 800d23c:	466b      	mov	r3, sp
 800d23e:	3300      	adds	r3, #0
 800d240:	623b      	str	r3, [r7, #32]
    if (n == 0.0) {
 800d242:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d246:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d24e:	d106      	bne.n	800d25e <_Z15ei_printf_floatf+0x7e>
        strcpy(s, "0");
 800d250:	6a3b      	ldr	r3, [r7, #32]
 800d252:	496c      	ldr	r1, [pc, #432]	; (800d404 <_Z15ei_printf_floatf+0x224>)
 800d254:	461a      	mov	r2, r3
 800d256:	460b      	mov	r3, r1
 800d258:	881b      	ldrh	r3, [r3, #0]
 800d25a:	8013      	strh	r3, [r2, #0]
 800d25c:	e0c1      	b.n	800d3e2 <_Z15ei_printf_floatf+0x202>
        char *c = s;
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	60bb      	str	r3, [r7, #8]
        int neg = (n < 0);
 800d262:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d26e:	bf4c      	ite	mi
 800d270:	2301      	movmi	r3, #1
 800d272:	2300      	movpl	r3, #0
 800d274:	b2db      	uxtb	r3, r3
 800d276:	61fb      	str	r3, [r7, #28]
        if (neg) {
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d005      	beq.n	800d28a <_Z15ei_printf_floatf+0xaa>
            n = -n;
 800d27e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d282:	eef1 7a67 	vneg.f32	s15, s15
 800d286:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        m = log10(n);
 800d28a:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 800d28e:	f7ff ff55 	bl	800d13c <_ZSt5log10f>
 800d292:	eef0 7a40 	vmov.f32	s15, s0
 800d296:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d29a:	ee17 3a90 	vmov	r3, s15
 800d29e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (neg) {
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d004      	beq.n	800d2b0 <_Z15ei_printf_floatf+0xd0>
            *(c++) = '-';
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	1c5a      	adds	r2, r3, #1
 800d2aa:	60ba      	str	r2, [r7, #8]
 800d2ac:	222d      	movs	r2, #45	; 0x2d
 800d2ae:	701a      	strb	r2, [r3, #0]
        if (m < 1.0) {
 800d2b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2b2:	f7f3 f94f 	bl	8000554 <__aeabi_i2d>
 800d2b6:	f04f 0200 	mov.w	r2, #0
 800d2ba:	4b53      	ldr	r3, [pc, #332]	; (800d408 <_Z15ei_printf_floatf+0x228>)
 800d2bc:	f7f3 fc26 	bl	8000b0c <__aeabi_dcmplt>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <_Z15ei_printf_floatf+0xea>
            m = 0;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (n > PRECISION || m >= 0) {
 800d2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2cc:	f7f3 f954 	bl	8000578 <__aeabi_f2d>
 800d2d0:	4b4e      	ldr	r3, [pc, #312]	; (800d40c <_Z15ei_printf_floatf+0x22c>)
 800d2d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	4615      	mov	r5, r2
 800d2da:	461a      	mov	r2, r3
 800d2dc:	4623      	mov	r3, r4
 800d2de:	f7f3 fc33 	bl	8000b48 <__aeabi_dcmpgt>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d101      	bne.n	800d2ec <_Z15ei_printf_floatf+0x10c>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	461d      	mov	r5, r3
 800d2ec:	b2eb      	uxtb	r3, r5
 800d2ee:	f083 0301 	eor.w	r3, r3, #1
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d002      	beq.n	800d2fe <_Z15ei_printf_floatf+0x11e>
 800d2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	db6e      	blt.n	800d3dc <_Z15ei_printf_floatf+0x1fc>
            double weight = pow(10.0, m);
 800d2fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d300:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 800d3f8 <_Z15ei_printf_floatf+0x218>
 800d304:	f000 f8ab 	bl	800d45e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800d308:	ed87 0b04 	vstr	d0, [r7, #16]
            if (weight > 0 && !isinf(weight)) {
 800d30c:	f04f 0200 	mov.w	r2, #0
 800d310:	f04f 0300 	mov.w	r3, #0
 800d314:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d318:	f7f3 fc16 	bl	8000b48 <__aeabi_dcmpgt>
 800d31c:	4603      	mov	r3, r0
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d00b      	beq.n	800d33a <_Z15ei_printf_floatf+0x15a>
 800d322:	ed97 0b04 	vldr	d0, [r7, #16]
 800d326:	f7ff ff19 	bl	800d15c <_ZSt5isinfd>
 800d32a:	4603      	mov	r3, r0
 800d32c:	f083 0301 	eor.w	r3, r3, #1
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	d001      	beq.n	800d33a <_Z15ei_printf_floatf+0x15a>
 800d336:	2301      	movs	r3, #1
 800d338:	e000      	b.n	800d33c <_Z15ei_printf_floatf+0x15c>
 800d33a:	2300      	movs	r3, #0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d03a      	beq.n	800d3b6 <_Z15ei_printf_floatf+0x1d6>
                digit = floor(n / weight);
 800d340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d342:	f7f3 f919 	bl	8000578 <__aeabi_f2d>
 800d346:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d34a:	f7f3 fa97 	bl	800087c <__aeabi_ddiv>
 800d34e:	4603      	mov	r3, r0
 800d350:	460c      	mov	r4, r1
 800d352:	ec44 3b17 	vmov	d7, r3, r4
 800d356:	eeb0 0a47 	vmov.f32	s0, s14
 800d35a:	eef0 0a67 	vmov.f32	s1, s15
 800d35e:	f009 f88f 	bl	8016480 <floor>
 800d362:	ec54 3b10 	vmov	r3, r4, d0
 800d366:	4618      	mov	r0, r3
 800d368:	4621      	mov	r1, r4
 800d36a:	f7f3 fc0d 	bl	8000b88 <__aeabi_d2iz>
 800d36e:	4603      	mov	r3, r0
 800d370:	60fb      	str	r3, [r7, #12]
                n -= (digit * weight);
 800d372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d374:	f7f3 f900 	bl	8000578 <__aeabi_f2d>
 800d378:	4604      	mov	r4, r0
 800d37a:	460d      	mov	r5, r1
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f7f3 f8e9 	bl	8000554 <__aeabi_i2d>
 800d382:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d386:	f7f3 f94f 	bl	8000628 <__aeabi_dmul>
 800d38a:	4602      	mov	r2, r0
 800d38c:	460b      	mov	r3, r1
 800d38e:	4620      	mov	r0, r4
 800d390:	4629      	mov	r1, r5
 800d392:	f7f2 ff91 	bl	80002b8 <__aeabi_dsub>
 800d396:	4603      	mov	r3, r0
 800d398:	460c      	mov	r4, r1
 800d39a:	4618      	mov	r0, r3
 800d39c:	4621      	mov	r1, r4
 800d39e:	f7f3 fc3b 	bl	8000c18 <__aeabi_d2f>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	62bb      	str	r3, [r7, #40]	; 0x28
                *(c++) = '0' + digit;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	b2da      	uxtb	r2, r3
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	1c59      	adds	r1, r3, #1
 800d3ae:	60b9      	str	r1, [r7, #8]
 800d3b0:	3230      	adds	r2, #48	; 0x30
 800d3b2:	b2d2      	uxtb	r2, r2
 800d3b4:	701a      	strb	r2, [r3, #0]
            if (m == 0 && n > 0) {
 800d3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10b      	bne.n	800d3d4 <_Z15ei_printf_floatf+0x1f4>
 800d3bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d3c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3c8:	dd04      	ble.n	800d3d4 <_Z15ei_printf_floatf+0x1f4>
                *(c++) = '.';
 800d3ca:	68bb      	ldr	r3, [r7, #8]
 800d3cc:	1c5a      	adds	r2, r3, #1
 800d3ce:	60ba      	str	r2, [r7, #8]
 800d3d0:	222e      	movs	r2, #46	; 0x2e
 800d3d2:	701a      	strb	r2, [r3, #0]
            m--;
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        while (n > PRECISION || m >= 0) {
 800d3da:	e776      	b.n	800d2ca <_Z15ei_printf_floatf+0xea>
        *(c) = '\0';
 800d3dc:	68bb      	ldr	r3, [r7, #8]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	701a      	strb	r2, [r3, #0]
    ei_printf("%s", s);
 800d3e2:	6a3b      	ldr	r3, [r7, #32]
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	480a      	ldr	r0, [pc, #40]	; (800d410 <_Z15ei_printf_floatf+0x230>)
 800d3e8:	f7f7 fb7a 	bl	8004ae0 <_Z9ei_printfPKcz>
 800d3ec:	46b5      	mov	sp, r6
}
 800d3ee:	bf00      	nop
 800d3f0:	3734      	adds	r7, #52	; 0x34
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	00000000 	.word	0x00000000
 800d3fc:	40240000 	.word	0x40240000
 800d400:	20000650 	.word	0x20000650
 800d404:	0801caf4 	.word	0x0801caf4
 800d408:	3ff00000 	.word	0x3ff00000
 800d40c:	20000648 	.word	0x20000648
 800d410:	0801caf8 	.word	0x0801caf8

0800d414 <_Z9ei_mallocj>:

__attribute__((weak)) void *ei_malloc(size_t size) {
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
    return malloc(size);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f00b ff4d 	bl	80192bc <malloc>
 800d422:	4603      	mov	r3, r0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <_Z9ei_callocjj>:

__attribute__((weak)) void *ei_calloc(size_t nitems, size_t size) {
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
    return calloc(nitems, size);
 800d436:	6839      	ldr	r1, [r7, #0]
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f00b fe8b 	bl	8019154 <calloc>
 800d43e:	4603      	mov	r3, r0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3708      	adds	r7, #8
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <_Z7ei_freePv>:

__attribute__((weak)) void ei_free(void *ptr) {
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
    free(ptr);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f00b ff3b 	bl	80192cc <free>
}
 800d456:	bf00      	nop
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <_ZSt3powIdiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800d45e:	b590      	push	{r4, r7, lr}
 800d460:	b085      	sub	sp, #20
 800d462:	af00      	add	r7, sp, #0
 800d464:	ed87 0b02 	vstr	d0, [r7, #8]
 800d468:	6078      	str	r0, [r7, #4]
      return pow(__type(__x), __type(__y));
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f7f3 f872 	bl	8000554 <__aeabi_i2d>
 800d470:	4603      	mov	r3, r0
 800d472:	460c      	mov	r4, r1
 800d474:	ec44 3b11 	vmov	d1, r3, r4
 800d478:	ed97 0b02 	vldr	d0, [r7, #8]
 800d47c:	f009 f9a2 	bl	80167c4 <pow>
 800d480:	eeb0 7a40 	vmov.f32	s14, s0
 800d484:	eef0 7a60 	vmov.f32	s15, s1
    }
 800d488:	eeb0 0a47 	vmov.f32	s0, s14
 800d48c:	eef0 0a67 	vmov.f32	s1, s15
 800d490:	3714      	adds	r7, #20
 800d492:	46bd      	mov	sp, r7
 800d494:	bd90      	pop	{r4, r7, pc}

0800d496 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 800d496:	b480      	push	{r7}
 800d498:	b083      	sub	sp, #12
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	009b      	lsls	r3, r3, #2
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	2b0b      	cmp	r3, #11
 800d4be:	d833      	bhi.n	800d528 <TfLiteTypeGetName+0x78>
 800d4c0:	a201      	add	r2, pc, #4	; (adr r2, 800d4c8 <TfLiteTypeGetName+0x18>)
 800d4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c6:	bf00      	nop
 800d4c8:	0800d4f9 	.word	0x0800d4f9
 800d4cc:	0800d4fd 	.word	0x0800d4fd
 800d4d0:	0800d505 	.word	0x0800d505
 800d4d4:	0800d509 	.word	0x0800d509
 800d4d8:	0800d511 	.word	0x0800d511
 800d4dc:	0800d51d 	.word	0x0800d51d
 800d4e0:	0800d515 	.word	0x0800d515
 800d4e4:	0800d501 	.word	0x0800d501
 800d4e8:	0800d519 	.word	0x0800d519
 800d4ec:	0800d50d 	.word	0x0800d50d
 800d4f0:	0800d521 	.word	0x0800d521
 800d4f4:	0800d525 	.word	0x0800d525
    case kTfLiteNoType:
      return "NOTYPE";
 800d4f8:	4b0f      	ldr	r3, [pc, #60]	; (800d538 <TfLiteTypeGetName+0x88>)
 800d4fa:	e016      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800d4fc:	4b0f      	ldr	r3, [pc, #60]	; (800d53c <TfLiteTypeGetName+0x8c>)
 800d4fe:	e014      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 800d500:	4b0f      	ldr	r3, [pc, #60]	; (800d540 <TfLiteTypeGetName+0x90>)
 800d502:	e012      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 800d504:	4b0f      	ldr	r3, [pc, #60]	; (800d544 <TfLiteTypeGetName+0x94>)
 800d506:	e010      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 800d508:	4b0f      	ldr	r3, [pc, #60]	; (800d548 <TfLiteTypeGetName+0x98>)
 800d50a:	e00e      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 800d50c:	4b0f      	ldr	r3, [pc, #60]	; (800d54c <TfLiteTypeGetName+0x9c>)
 800d50e:	e00c      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 800d510:	4b0f      	ldr	r3, [pc, #60]	; (800d550 <TfLiteTypeGetName+0xa0>)
 800d512:	e00a      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 800d514:	4b0f      	ldr	r3, [pc, #60]	; (800d554 <TfLiteTypeGetName+0xa4>)
 800d516:	e008      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800d518:	4b0f      	ldr	r3, [pc, #60]	; (800d558 <TfLiteTypeGetName+0xa8>)
 800d51a:	e006      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 800d51c:	4b0f      	ldr	r3, [pc, #60]	; (800d55c <TfLiteTypeGetName+0xac>)
 800d51e:	e004      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 800d520:	4b0f      	ldr	r3, [pc, #60]	; (800d560 <TfLiteTypeGetName+0xb0>)
 800d522:	e002      	b.n	800d52a <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 800d524:	4b0f      	ldr	r3, [pc, #60]	; (800d564 <TfLiteTypeGetName+0xb4>)
 800d526:	e000      	b.n	800d52a <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 800d528:	4b0f      	ldr	r3, [pc, #60]	; (800d568 <TfLiteTypeGetName+0xb8>)
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	370c      	adds	r7, #12
 800d52e:	46bd      	mov	sp, r7
 800d530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d534:	4770      	bx	lr
 800d536:	bf00      	nop
 800d538:	0801cafc 	.word	0x0801cafc
 800d53c:	0801cb04 	.word	0x0801cb04
 800d540:	0801cb0c 	.word	0x0801cb0c
 800d544:	0801cb14 	.word	0x0801cb14
 800d548:	0801cb1c 	.word	0x0801cb1c
 800d54c:	0801cb24 	.word	0x0801cb24
 800d550:	0801cb2c 	.word	0x0801cb2c
 800d554:	0801cb34 	.word	0x0801cb34
 800d558:	0801cb3c 	.word	0x0801cb3c
 800d55c:	0801cb48 	.word	0x0801cb48
 800d560:	0801cb50 	.word	0x0801cb50
 800d564:	0801cb58 	.word	0x0801cb58
 800d568:	0801cb60 	.word	0x0801cb60

0800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "edge-impulse-sdk/tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 800d56c:	b40e      	push	{r1, r2, r3}
 800d56e:	b580      	push	{r7, lr}
 800d570:	b085      	sub	sp, #20
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 800d576:	f107 0320 	add.w	r3, r7, #32
 800d57a:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3308      	adds	r3, #8
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	69f9      	ldr	r1, [r7, #28]
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	4798      	blx	r3
 800d58c:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800d58e:	68fb      	ldr	r3, [r7, #12]
}
 800d590:	4618      	mov	r0, r3
 800d592:	3714      	adds	r7, #20
 800d594:	46bd      	mov	sp, r7
 800d596:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d59a:	b003      	add	sp, #12
 800d59c:	4770      	bx	lr

0800d59e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 800d59e:	b40c      	push	{r2, r3}
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 800d5aa:	f107 031c 	add.w	r3, r7, #28
 800d5ae:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3308      	adds	r3, #8
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	69b9      	ldr	r1, [r7, #24]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	4798      	blx	r3
 800d5c0:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d5ce:	b002      	add	sp, #8
 800d5d0:	4770      	bx	lr

0800d5d2 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b082      	sub	sp, #8
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	2104      	movs	r1, #4
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	f000 fae0 	bl	800dba6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	b2db      	uxtb	r3, r3
  }
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3708      	adds	r7, #8
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b082      	sub	sp, #8
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	2106      	movs	r1, #6
 800d600:	4618      	mov	r0, r3
 800d602:	f000 fad0 	bl	800dba6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800d606:	4603      	mov	r3, r0
 800d608:	b2db      	uxtb	r3, r3
  }
 800d60a:	4618      	mov	r0, r3
 800d60c:	3708      	adds	r7, #8
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 800d612:	b580      	push	{r7, lr}
 800d614:	b082      	sub	sp, #8
 800d616:	af00      	add	r7, sp, #0
 800d618:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	2108      	movs	r1, #8
 800d620:	4618      	mov	r0, r3
 800d622:	f000 fa63 	bl	800daec <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	bf14      	ite	ne
 800d62c:	2301      	movne	r3, #1
 800d62e:	2300      	moveq	r3, #0
 800d630:	b2db      	uxtb	r3, r3
  }
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}

0800d63a <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 800d63a:	b580      	push	{r7, lr}
 800d63c:	b082      	sub	sp, #8
 800d63e:	af00      	add	r7, sp, #0
 800d640:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	210a      	movs	r1, #10
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 fa4f 	bl	800daec <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	bf14      	ite	ne
 800d654:	2301      	movne	r3, #1
 800d656:	2300      	moveq	r3, #0
 800d658:	b2db      	uxtb	r3, r3
  }
 800d65a:	4618      	mov	r0, r3
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
	...

0800d664 <_ZNK6tflite14SoftmaxOptions4betaEv>:
  float beta() const {
 800d664:	b580      	push	{r7, lr}
 800d666:	b082      	sub	sp, #8
 800d668:	af00      	add	r7, sp, #0
 800d66a:	6078      	str	r0, [r7, #4]
    return GetField<float>(VT_BETA, 0.0f);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800d688 <_ZNK6tflite14SoftmaxOptions4betaEv+0x24>
 800d672:	2104      	movs	r1, #4
 800d674:	4618      	mov	r0, r3
 800d676:	f000 fab6 	bl	800dbe6 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>
 800d67a:	eef0 7a40 	vmov.f32	s15, s0
  }
 800d67e:	eeb0 0a67 	vmov.f32	s0, s15
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	00000000 	.word	0x00000000

0800d68c <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	210a      	movs	r1, #10
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 fa26 	bl	800daec <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800d6a0:	4603      	mov	r3, r0
  }
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b082      	sub	sp, #8
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	210c      	movs	r1, #12
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f000 fa37 	bl	800db2a <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 800d6bc:	4603      	mov	r3, r0
  }
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b082      	sub	sp, #8
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7ff ffdc 	bl	800d68c <_ZNK6tflite8Operator20builtin_options_typeEv>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	2b08      	cmp	r3, #8
 800d6d8:	d104      	bne.n	800d6e4 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7ff ffe5 	bl	800d6aa <_ZNK6tflite8Operator15builtin_optionsEv>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	e000      	b.n	800d6e6 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 800d6e4:	2300      	movs	r3, #0
  }
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>:
  const tflite::SoftmaxOptions *builtin_options_as_SoftmaxOptions() const {
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b082      	sub	sp, #8
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7ff ffc8 	bl	800d68c <_ZNK6tflite8Operator20builtin_options_typeEv>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	2b09      	cmp	r3, #9
 800d700:	d104      	bne.n	800d70c <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x1e>
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f7ff ffd1 	bl	800d6aa <_ZNK6tflite8Operator15builtin_optionsEv>
 800d708:	4603      	mov	r3, r0
 800d70a:	e000      	b.n	800d70e <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv+0x20>
 800d70c:	2300      	movs	r3, #0
  }
 800d70e:	4618      	mov	r0, r3
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 800d716:	b480      	push	{r7}
 800d718:	b083      	sub	sp, #12
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
 800d71e:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	601a      	str	r2, [r3, #0]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	4618      	mov	r0, r3
 800d72a:	370c      	adds	r7, #12
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	3304      	adds	r3, #4
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	4610      	mov	r0, r2
 800d750:	4798      	blx	r3
 800d752:	bf00      	nop
 800d754:	3708      	adds	r7, #8
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 800d75a:	b480      	push	{r7}
 800d75c:	b083      	sub	sp, #12
 800d75e:	af00      	add	r7, sp, #0
 800d760:	6078      	str	r0, [r7, #4]
 800d762:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	601a      	str	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4618      	mov	r0, r3
 800d76e:	370c      	adds	r7, #12
 800d770:	46bd      	mov	sp, r7
 800d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d776:	4770      	bx	lr

0800d778 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 800d778:	b580      	push	{r7, lr}
 800d77a:	b084      	sub	sp, #16
 800d77c:	af00      	add	r7, sp, #0
 800d77e:	60f8      	str	r0, [r7, #12]
 800d780:	60b9      	str	r1, [r7, #8]
 800d782:	607a      	str	r2, [r7, #4]
 800d784:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d101      	bne.n	800d790 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 800d78c:	f00b fcb3 	bl	80190f6 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800d790:	68bb      	ldr	r3, [r7, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d101      	bne.n	800d79a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 800d796:	f00b fcae 	bl	80190f6 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 800d7a0:	f00b fca9 	bl	80190f6 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d101      	bne.n	800d7ae <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 800d7aa:	f00b fca4 	bl	80190f6 <abort>
}
 800d7ae:	bf00      	nop
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
	...

0800d7b8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	4603      	mov	r3, r0
 800d7c0:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 800d7c2:	79fb      	ldrb	r3, [r7, #7]
 800d7c4:	2b05      	cmp	r3, #5
 800d7c6:	d81b      	bhi.n	800d800 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 800d7c8:	a201      	add	r2, pc, #4	; (adr r2, 800d7d0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 800d7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ce:	bf00      	nop
 800d7d0:	0800d7e9 	.word	0x0800d7e9
 800d7d4:	0800d7ed 	.word	0x0800d7ed
 800d7d8:	0800d7f1 	.word	0x0800d7f1
 800d7dc:	0800d7f5 	.word	0x0800d7f5
 800d7e0:	0800d7f9 	.word	0x0800d7f9
 800d7e4:	0800d7fd 	.word	0x0800d7fd
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	e00a      	b.n	800d802 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e008      	b.n	800d802 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 800d7f0:	2302      	movs	r3, #2
 800d7f2:	e006      	b.n	800d802 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 800d7f4:	2303      	movs	r3, #3
 800d7f6:	e004      	b.n	800d802 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 800d7f8:	2304      	movs	r3, #4
 800d7fa:	e002      	b.n	800d802 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 800d7fc:	2305      	movs	r3, #5
 800d7fe:	e000      	b.n	800d802 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	370c      	adds	r7, #12
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop

0800d810 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 800d810:	b580      	push	{r7, lr}
 800d812:	b084      	sub	sp, #16
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
 800d820:	2b0a      	cmp	r3, #10
 800d822:	d850      	bhi.n	800d8c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xb6>
 800d824:	a201      	add	r2, pc, #4	; (adr r2, 800d82c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 800d826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82a:	bf00      	nop
 800d82c:	0800d863 	.word	0x0800d863
 800d830:	0800d859 	.word	0x0800d859
 800d834:	0800d881 	.word	0x0800d881
 800d838:	0800d88b 	.word	0x0800d88b
 800d83c:	0800d89f 	.word	0x0800d89f
 800d840:	0800d8a9 	.word	0x0800d8a9
 800d844:	0800d8b3 	.word	0x0800d8b3
 800d848:	0800d877 	.word	0x0800d877
 800d84c:	0800d8bd 	.word	0x0800d8bd
 800d850:	0800d895 	.word	0x0800d895
 800d854:	0800d86d 	.word	0x0800d86d
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 800d858:	68bb      	ldr	r3, [r7, #8]
 800d85a:	220a      	movs	r2, #10
 800d85c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d85e:	2300      	movs	r3, #0
 800d860:	e03b      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	2201      	movs	r2, #1
 800d866:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d868:	2300      	movs	r3, #0
 800d86a:	e036      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	220b      	movs	r2, #11
 800d870:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d872:	2300      	movs	r3, #0
 800d874:	e031      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	2207      	movs	r2, #7
 800d87a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e02c      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	2202      	movs	r2, #2
 800d884:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d886:	2300      	movs	r3, #0
 800d888:	e027      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	2203      	movs	r2, #3
 800d88e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d890:	2300      	movs	r3, #0
 800d892:	e022      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 800d894:	68bb      	ldr	r3, [r7, #8]
 800d896:	2209      	movs	r2, #9
 800d898:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d89a:	2300      	movs	r3, #0
 800d89c:	e01d      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 800d89e:	68bb      	ldr	r3, [r7, #8]
 800d8a0:	2204      	movs	r2, #4
 800d8a2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	e018      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_STRING:
      *type = kTfLiteString;
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	2205      	movs	r2, #5
 800d8ac:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	e013      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	2206      	movs	r2, #6
 800d8b6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	e00e      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	2208      	movs	r2, #8
 800d8c0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	e009      	b.n	800d8da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    default:
      *type = kTfLiteNoType;
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 800d8cc:	7bfb      	ldrb	r3, [r7, #15]
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	4904      	ldr	r1, [pc, #16]	; (800d8e4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd4>)
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f7ff fe4a 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 800d8d8:	2301      	movs	r3, #1
  }
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	0801cbf8 	.word	0x0801cbf8

0800d8e8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op, BuiltinOperator,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 800d8e8:	b5b0      	push	{r4, r5, r7, lr}
 800d8ea:	b08a      	sub	sp, #40	; 0x28
 800d8ec:	af02      	add	r7, sp, #8
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	607a      	str	r2, [r7, #4]
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	72fb      	strb	r3, [r7, #11]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800d8f8:	6879      	ldr	r1, [r7, #4]
 800d8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fc:	683a      	ldr	r2, [r7, #0]
 800d8fe:	68f8      	ldr	r0, [r7, #12]
 800d900:	f7ff ff3a 	bl	800d778 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800d904:	f107 0318 	add.w	r3, r7, #24
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7ff ff25 	bl	800d75a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800d910:	f107 0310 	add.w	r3, r7, #16
 800d914:	f107 0218 	add.w	r2, r7, #24
 800d918:	4611      	mov	r1, r2
 800d91a:	4618      	mov	r0, r3
 800d91c:	f000 f9ba 	bl	800dc94 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800d920:	f107 0310 	add.w	r3, r7, #16
 800d924:	2100      	movs	r1, #0
 800d926:	4618      	mov	r0, r3
 800d928:	f000 f9f1 	bl	800dd0e <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800d92c:	4603      	mov	r3, r0
 800d92e:	f083 0301 	eor.w	r3, r3, #1
 800d932:	b2db      	uxtb	r3, r3
 800d934:	2b00      	cmp	r3, #0
 800d936:	d00c      	beq.n	800d952 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6a>
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	6879      	ldr	r1, [r7, #4]
 800d93c:	4b36      	ldr	r3, [pc, #216]	; (800da18 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 800d93e:	9301      	str	r3, [sp, #4]
 800d940:	f240 130b 	movw	r3, #267	; 0x10b
 800d944:	9300      	str	r3, [sp, #0]
 800d946:	4b35      	ldr	r3, [pc, #212]	; (800da1c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 800d948:	4a35      	ldr	r2, [pc, #212]	; (800da20 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 800d94a:	f7ff fe28 	bl	800d59e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800d94e:	2401      	movs	r4, #1
 800d950:	e057      	b.n	800da02 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	f7ff feb7 	bl	800d6c6 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 800d958:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d047      	beq.n	800d9f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800d960:	69f8      	ldr	r0, [r7, #28]
 800d962:	f7ff fe36 	bl	800d5d2 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 800d966:	4603      	mov	r3, r0
 800d968:	461d      	mov	r5, r3
    params->activation =
 800d96a:	f107 0310 	add.w	r3, r7, #16
 800d96e:	4618      	mov	r0, r3
 800d970:	f000 f9da 	bl	800dd28 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800d974:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 800d976:	4628      	mov	r0, r5
 800d978:	f7ff ff1e 	bl	800d7b8 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800d97c:	4603      	mov	r3, r0
    params->activation =
 800d97e:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 800d980:	f107 0310 	add.w	r3, r7, #16
 800d984:	4618      	mov	r0, r3
 800d986:	f000 f9cf 	bl	800dd28 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800d98a:	4604      	mov	r4, r0
 800d98c:	69f8      	ldr	r0, [r7, #28]
 800d98e:	f7ff fe40 	bl	800d612 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 800d992:	4603      	mov	r3, r0
 800d994:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 800d996:	f107 0310 	add.w	r3, r7, #16
 800d99a:	4618      	mov	r0, r3
 800d99c:	f000 f9c4 	bl	800dd28 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800d9a0:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 800d9a2:	69f8      	ldr	r0, [r7, #28]
 800d9a4:	f7ff fe49 	bl	800d63a <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 800d9a8:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 800d9aa:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 800d9ac:	69f8      	ldr	r0, [r7, #28]
 800d9ae:	f7ff fe20 	bl	800d5f2 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d002      	beq.n	800d9be <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd6>
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d009      	beq.n	800d9d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
 800d9bc:	e011      	b.n	800d9e2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 800d9be:	f107 0310 	add.w	r3, r7, #16
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 f9b0 	bl	800dd28 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	705a      	strb	r2, [r3, #1]
        break;
 800d9ce:	e00f      	b.n	800d9f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 800d9d0:	f107 0310 	add.w	r3, r7, #16
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f000 f9a7 	bl	800dd28 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2201      	movs	r2, #1
 800d9de:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 800d9e0:	e006      	b.n	800d9f0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	490f      	ldr	r1, [pc, #60]	; (800da24 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7ff fdc0 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 800d9ec:	2401      	movs	r4, #1
 800d9ee:	e008      	b.n	800da02 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800d9f0:	f107 0310 	add.w	r3, r7, #16
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	f000 f9a3 	bl	800dd40 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fe:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800da00:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800da02:	f107 0310 	add.w	r3, r7, #16
 800da06:	4618      	mov	r0, r3
 800da08:	f000 f962 	bl	800dcd0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800da0c:	4623      	mov	r3, r4
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3720      	adds	r7, #32
 800da12:	46bd      	mov	sp, r7
 800da14:	bdb0      	pop	{r4, r5, r7, pc}
 800da16:	bf00      	nop
 800da18:	0801cccc 	.word	0x0801cccc
 800da1c:	0801cc1c 	.word	0x0801cc1c
 800da20:	0801ccb4 	.word	0x0801ccb4
 800da24:	0801cce0 	.word	0x0801cce0

0800da28 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseSoftmax(const Operator* op, BuiltinOperator,
                          ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 800da28:	b590      	push	{r4, r7, lr}
 800da2a:	b08b      	sub	sp, #44	; 0x2c
 800da2c:	af02      	add	r7, sp, #8
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	607a      	str	r2, [r7, #4]
 800da32:	603b      	str	r3, [r7, #0]
 800da34:	460b      	mov	r3, r1
 800da36:	72fb      	strb	r3, [r7, #11]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 800da38:	6879      	ldr	r1, [r7, #4]
 800da3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	68f8      	ldr	r0, [r7, #12]
 800da40:	f7ff fe9a 	bl	800d778 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 800da44:	f107 0318 	add.w	r3, r7, #24
 800da48:	6839      	ldr	r1, [r7, #0]
 800da4a:	4618      	mov	r0, r3
 800da4c:	f7ff fe85 	bl	800d75a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>
  std::unique_ptr<TfLiteSoftmaxParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 800da50:	f107 0310 	add.w	r3, r7, #16
 800da54:	f107 0218 	add.w	r2, r7, #24
 800da58:	4611      	mov	r1, r2
 800da5a:	4618      	mov	r0, r3
 800da5c:	f000 f984 	bl	800dd68 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800da60:	f107 0310 	add.w	r3, r7, #16
 800da64:	2100      	movs	r1, #0
 800da66:	4618      	mov	r0, r3
 800da68:	f000 f9bb 	bl	800dde2 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800da6c:	4603      	mov	r3, r0
 800da6e:	f083 0301 	eor.w	r3, r3, #1
 800da72:	b2db      	uxtb	r3, r3
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00c      	beq.n	800da92 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6a>
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	6879      	ldr	r1, [r7, #4]
 800da7c:	4b18      	ldr	r3, [pc, #96]	; (800dae0 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xb8>)
 800da7e:	9301      	str	r3, [sp, #4]
 800da80:	f240 1369 	movw	r3, #361	; 0x169
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	4b17      	ldr	r3, [pc, #92]	; (800dae4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>)
 800da88:	4a17      	ldr	r2, [pc, #92]	; (800dae8 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc0>)
 800da8a:	f7ff fd88 	bl	800d59e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800da8e:	2401      	movs	r4, #1
 800da90:	e01c      	b.n	800dacc <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f7ff fe2b 	bl	800d6ee <_ZNK6tflite8Operator33builtin_options_as_SoftmaxOptionsEv>
 800da98:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800da9a:	69fb      	ldr	r3, [r7, #28]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00c      	beq.n	800daba <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
    params->beta = schema_params->beta();
 800daa0:	f107 0310 	add.w	r3, r7, #16
 800daa4:	4618      	mov	r0, r3
 800daa6:	f000 f9a9 	bl	800ddfc <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800daaa:	4604      	mov	r4, r0
 800daac:	69f8      	ldr	r0, [r7, #28]
 800daae:	f7ff fdd9 	bl	800d664 <_ZNK6tflite14SoftmaxOptions4betaEv>
 800dab2:	eef0 7a40 	vmov.f32	s15, s0
 800dab6:	edc4 7a00 	vstr	s15, [r4]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 800daba:	f107 0310 	add.w	r3, r7, #16
 800dabe:	4618      	mov	r0, r3
 800dac0:	f000 f9a8 	bl	800de14 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 800dac4:	4602      	mov	r2, r0
 800dac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dac8:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800daca:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteSoftmaxParams>();
 800dacc:	f107 0310 	add.w	r3, r7, #16
 800dad0:	4618      	mov	r0, r3
 800dad2:	f000 f967 	bl	800dda4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800dad6:	4623      	mov	r3, r4
}
 800dad8:	4618      	mov	r0, r3
 800dada:	3724      	adds	r7, #36	; 0x24
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd90      	pop	{r4, r7, pc}
 800dae0:	0801cccc 	.word	0x0801cccc
 800dae4:	0801cc1c 	.word	0x0801cc1c
 800dae8:	0801ccb4 	.word	0x0801ccb4

0800daec <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	807b      	strh	r3, [r7, #2]
 800daf8:	4613      	mov	r3, r2
 800dafa:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 800dafc:	887b      	ldrh	r3, [r7, #2]
 800dafe:	4619      	mov	r1, r3
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7f6 f9af 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800db06:	4603      	mov	r3, r0
 800db08:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800db0a:	89fb      	ldrh	r3, [r7, #14]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d007      	beq.n	800db20 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 800db10:	687a      	ldr	r2, [r7, #4]
 800db12:	89fb      	ldrh	r3, [r7, #14]
 800db14:	4413      	add	r3, r2
 800db16:	4618      	mov	r0, r3
 800db18:	f000 f99c 	bl	800de54 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 800db1c:	4603      	mov	r3, r0
 800db1e:	e000      	b.n	800db22 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 800db20:	787b      	ldrb	r3, [r7, #1]
  }
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}

0800db2a <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 800db2a:	b580      	push	{r7, lr}
 800db2c:	b082      	sub	sp, #8
 800db2e:	af00      	add	r7, sp, #0
 800db30:	6078      	str	r0, [r7, #4]
 800db32:	460b      	mov	r3, r1
 800db34:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800db36:	887b      	ldrh	r3, [r7, #2]
 800db38:	4619      	mov	r1, r3
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f998 	bl	800de70 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 800db40:	4603      	mov	r3, r0
  }
 800db42:	4618      	mov	r0, r3
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}

0800db4a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b086      	sub	sp, #24
 800db4e:	af00      	add	r7, sp, #0
 800db50:	60f8      	str	r0, [r7, #12]
 800db52:	460b      	mov	r3, r1
 800db54:	607a      	str	r2, [r7, #4]
 800db56:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800db58:	897b      	ldrh	r3, [r7, #10]
 800db5a:	4619      	mov	r1, r3
 800db5c:	68f8      	ldr	r0, [r7, #12]
 800db5e:	f7f6 f981 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800db62:	4603      	mov	r3, r0
 800db64:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800db66:	8afb      	ldrh	r3, [r7, #22]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d007      	beq.n	800db7c <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	8afb      	ldrh	r3, [r7, #22]
 800db70:	4413      	add	r3, r2
 800db72:	4618      	mov	r0, r3
 800db74:	f7f7 fb4a 	bl	800520c <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 800db78:	4603      	mov	r3, r0
 800db7a:	e000      	b.n	800db7e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 800db7c:	687b      	ldr	r3, [r7, #4]
  }
 800db7e:	4618      	mov	r0, r3
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	460b      	mov	r3, r1
 800db90:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800db92:	887b      	ldrh	r3, [r7, #2]
 800db94:	4619      	mov	r1, r3
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f000 f98a 	bl	800deb0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800db9c:	4603      	mov	r3, r0
  }
 800db9e:	4618      	mov	r0, r3
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}

0800dba6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800dba6:	b580      	push	{r7, lr}
 800dba8:	b084      	sub	sp, #16
 800dbaa:	af00      	add	r7, sp, #0
 800dbac:	6078      	str	r0, [r7, #4]
 800dbae:	460b      	mov	r3, r1
 800dbb0:	807b      	strh	r3, [r7, #2]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 800dbb6:	887b      	ldrh	r3, [r7, #2]
 800dbb8:	4619      	mov	r1, r3
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7f6 f952 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800dbc4:	89fb      	ldrh	r3, [r7, #14]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d007      	beq.n	800dbda <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	89fb      	ldrh	r3, [r7, #14]
 800dbce:	4413      	add	r3, r2
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f000 f98d 	bl	800def0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	e001      	b.n	800dbde <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 800dbda:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b086      	sub	sp, #24
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	60f8      	str	r0, [r7, #12]
 800dbee:	460b      	mov	r3, r1
 800dbf0:	ed87 0a01 	vstr	s0, [r7, #4]
 800dbf4:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 800dbf6:	897b      	ldrh	r3, [r7, #10]
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f7f6 f932 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800dc00:	4603      	mov	r3, r0
 800dc02:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800dc04:	8afb      	ldrh	r3, [r7, #22]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d008      	beq.n	800dc1c <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x36>
 800dc0a:	68fa      	ldr	r2, [r7, #12]
 800dc0c:	8afb      	ldrh	r3, [r7, #22]
 800dc0e:	4413      	add	r3, r2
 800dc10:	4618      	mov	r0, r3
 800dc12:	f000 f97c 	bl	800df0e <_ZN11flatbuffers10ReadScalarIfEET_PKv>
 800dc16:	eef0 7a40 	vmov.f32	s15, s0
 800dc1a:	e001      	b.n	800dc20 <_ZNK11flatbuffers5Table8GetFieldIfEET_tS2_+0x3a>
 800dc1c:	edd7 7a01 	vldr	s15, [r7, #4]
  }
 800dc20:	eeb0 0a67 	vmov.f32	s0, s15
 800dc24:	3718      	adds	r7, #24
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b082      	sub	sp, #8
 800dc2e:	af00      	add	r7, sp, #0
 800dc30:	6078      	str	r0, [r7, #4]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7f7 faad 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
	...

0800dc48 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7ff ffe9 	bl	800dc2a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d306      	bcc.n	800dc6e <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 800dc60:	4b09      	ldr	r3, [pc, #36]	; (800dc88 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 800dc62:	4a0a      	ldr	r2, [pc, #40]	; (800dc8c <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 800dc64:	f240 1101 	movw	r1, #257	; 0x101
 800dc68:	4809      	ldr	r0, [pc, #36]	; (800dc90 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 800dc6a:	f00b fa4b 	bl	8019104 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 f971 	bl	800df56 <_ZNK11flatbuffers6VectorIlE4DataEv>
 800dc74:	4603      	mov	r3, r0
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f000 f95a 	bl	800df32 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 800dc7e:	4603      	mov	r3, r0
  }
 800dc80:	4618      	mov	r0, r3
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	0801cd88 	.word	0x0801cd88
 800dc8c:	0803da48 	.word	0x0803da48
 800dc90:	0801cd94 	.word	0x0801cd94

0800dc94 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800dc94:	b590      	push	{r4, r7, lr}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800dca2:	4618      	mov	r0, r3
 800dca4:	f000 f979 	bl	800df9a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 800dca8:	4604      	mov	r4, r0
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	f107 030c 	add.w	r3, r7, #12
 800dcb2:	4611      	mov	r1, r2
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f7ff fd2e 	bl	800d716 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800dcba:	f107 030c 	add.w	r3, r7, #12
 800dcbe:	461a      	mov	r2, r3
 800dcc0:	4621      	mov	r1, r4
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 f98a 	bl	800dfdc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	3714      	adds	r7, #20
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd90      	pop	{r4, r7, pc}

0800dcd0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b084      	sub	sp, #16
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f000 f99a 	bl	800e014 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800dce0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d009      	beq.n	800dcfe <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 f99f 	bl	800e02e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	4619      	mov	r1, r3
 800dcf8:	4610      	mov	r0, r2
 800dcfa:	f7ff fd1b 	bl	800d734 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2200      	movs	r2, #0
 800dd02:	601a      	str	r2, [r3, #0]
      }
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	4618      	mov	r0, r3
 800dd08:	3710      	adds	r7, #16
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	bd80      	pop	{r7, pc}

0800dd0e <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800dd0e:	b580      	push	{r7, lr}
 800dd10:	b082      	sub	sp, #8
 800dd12:	af00      	add	r7, sp, #0
 800dd14:	6078      	str	r0, [r7, #4]
 800dd16:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 f9ab 	bl	800e074 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	4618      	mov	r0, r3
 800dd22:	3708      	adds	r7, #8
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b082      	sub	sp, #8
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
	return get();
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f000 f9b0 	bl	800e096 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800dd36:	4603      	mov	r3, r0
      }
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 f9a4 	bl	800e096 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800dd4e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	4618      	mov	r0, r3
 800dd54:	f000 f95e 	bl	800e014 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	6013      	str	r3, [r2, #0]
	return __p;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
      }
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI19TfLiteSoftmaxParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800dd68:	b590      	push	{r4, r7, lr}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
 800dd70:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800dd76:	4618      	mov	r0, r3
 800dd78:	f000 f99a 	bl	800e0b0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>
 800dd7c:	4604      	mov	r4, r0
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	681a      	ldr	r2, [r3, #0]
 800dd82:	f107 030c 	add.w	r3, r7, #12
 800dd86:	4611      	mov	r1, r2
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7ff fcc4 	bl	800d716 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 800dd8e:	f107 030c 	add.w	r3, r7, #12
 800dd92:	461a      	mov	r2, r3
 800dd94:	4621      	mov	r1, r4
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f000 f9ab 	bl	800e0f2 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 800dd9c:	6878      	ldr	r0, [r7, #4]
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd90      	pop	{r4, r7, pc}

0800dda4 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
      ~unique_ptr() noexcept
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f000 f9bb 	bl	800e12a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800ddb4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d009      	beq.n	800ddd2 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 f9c0 	bl	800e144 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4619      	mov	r1, r3
 800ddcc:	4610      	mov	r0, r2
 800ddce:	f7ff fcb1 	bl	800d734 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	601a      	str	r2, [r3, #0]
      }
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <_ZStneI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b082      	sub	sp, #8
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
 800ddea:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 f9cc 	bl	800e18a <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
	return get();
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 f9d1 	bl	800e1ac <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800de0a:	4603      	mov	r3, r0
      }
 800de0c:	4618      	mov	r0, r3
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 f9c5 	bl	800e1ac <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800de22:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	4618      	mov	r0, r3
 800de28:	f000 f97f 	bl	800e12a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800de2c:	4602      	mov	r2, r0
 800de2e:	2300      	movs	r3, #0
 800de30:	6013      	str	r3, [r2, #0]
	return __p;
 800de32:	68fb      	ldr	r3, [r7, #12]
      }
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}

0800de3c <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800de3c:	b480      	push	{r7}
 800de3e:	b083      	sub	sp, #12
 800de40:	af00      	add	r7, sp, #0
 800de42:	4603      	mov	r3, r0
 800de44:	71fb      	strb	r3, [r7, #7]
    return t;
 800de46:	79fb      	ldrb	r3, [r7, #7]
}
 800de48:	4618      	mov	r0, r3
 800de4a:	370c      	adds	r7, #12
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	4618      	mov	r0, r3
 800de62:	f7ff ffeb 	bl	800de3c <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 800de66:	4603      	mov	r3, r0
}
 800de68:	4618      	mov	r0, r3
 800de6a:	3708      	adds	r7, #8
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}

0800de70 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	460b      	mov	r3, r1
 800de7a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800de7c:	887b      	ldrh	r3, [r7, #2]
 800de7e:	4619      	mov	r1, r3
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7f5 ffef 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800de86:	4603      	mov	r3, r0
 800de88:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	89fb      	ldrh	r3, [r7, #14]
 800de8e:	4413      	add	r3, r2
 800de90:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800de92:	89fb      	ldrh	r3, [r7, #14]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d006      	beq.n	800dea6 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 800de98:	68b8      	ldr	r0, [r7, #8]
 800de9a:	f7f7 f9a9 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800de9e:	4602      	mov	r2, r0
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	4413      	add	r3, r2
                        : nullptr;
 800dea4:	e000      	b.n	800dea8 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800dea6:	2300      	movs	r3, #0
  }
 800dea8:	4618      	mov	r0, r3
 800deaa:	3710      	adds	r7, #16
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b084      	sub	sp, #16
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	460b      	mov	r3, r1
 800deba:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800debc:	887b      	ldrh	r3, [r7, #2]
 800debe:	4619      	mov	r1, r3
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f7f5 ffcf 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800dec6:	4603      	mov	r3, r0
 800dec8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800deca:	687a      	ldr	r2, [r7, #4]
 800decc:	89fb      	ldrh	r3, [r7, #14]
 800dece:	4413      	add	r3, r2
 800ded0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800ded2:	89fb      	ldrh	r3, [r7, #14]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	d006      	beq.n	800dee6 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 800ded8:	68b8      	ldr	r0, [r7, #8]
 800deda:	f7f7 f989 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800dede:	4602      	mov	r2, r0
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	4413      	add	r3, r2
                        : nullptr;
 800dee4:	e000      	b.n	800dee8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800dee6:	2300      	movs	r3, #0
  }
 800dee8:	4618      	mov	r0, r3
 800deea:	3710      	adds	r7, #16
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}

0800def0 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	f993 3000 	ldrsb.w	r3, [r3]
 800defe:	4618      	mov	r0, r3
 800df00:	f000 f961 	bl	800e1c6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 800df04:	4603      	mov	r3, r0
}
 800df06:	4618      	mov	r0, r3
 800df08:	3708      	adds	r7, #8
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <_ZN11flatbuffers10ReadScalarIfEET_PKv>:
T ReadScalar(const void *p) {
 800df0e:	b580      	push	{r7, lr}
 800df10:	b082      	sub	sp, #8
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	edd3 7a00 	vldr	s15, [r3]
 800df1c:	eeb0 0a67 	vmov.f32	s0, s15
 800df20:	f000 f95e 	bl	800e1e0 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 800df24:	eef0 7a40 	vmov.f32	s15, s0
}
 800df28:	eeb0 0a67 	vmov.f32	s0, s15
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800df32:	b580      	push	{r7, lr}
 800df34:	b082      	sub	sp, #8
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
 800df3a:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	687a      	ldr	r2, [r7, #4]
 800df42:	4413      	add	r3, r2
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4618      	mov	r0, r3
 800df48:	f7f7 fbd4 	bl	80056f4 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 800df4c:	4603      	mov	r3, r0
  }
 800df4e:	4618      	mov	r0, r3
 800df50:	3708      	adds	r7, #8
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 800df56:	b480      	push	{r7}
 800df58:	b083      	sub	sp, #12
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	3304      	adds	r3, #4
  }
 800df62:	4618      	mov	r0, r3
 800df64:	370c      	adds	r7, #12
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800df6e:	b480      	push	{r7}
 800df70:	b083      	sub	sp, #12
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	4618      	mov	r0, r3
 800df7a:	370c      	adds	r7, #12
 800df7c:	46bd      	mov	sp, r7
 800df7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df82:	4770      	bx	lr

0800df84 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800df84:	b480      	push	{r7}
 800df86:	b083      	sub	sp, #12
 800df88:	af00      	add	r7, sp, #0
 800df8a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4618      	mov	r0, r3
 800df90:	370c      	adds	r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr

0800df9a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b084      	sub	sp, #16
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	2104      	movs	r1, #4
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	4798      	blx	r3
 800dfb0:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	4619      	mov	r1, r3
 800dfb6:	2004      	movs	r0, #4
 800dfb8:	f7f3 f847 	bl	800104a <_ZnwjPv>
 800dfbc:	4603      	mov	r3, r0
  }
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	3710      	adds	r7, #16
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}

0800dfc6 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800dfc6:	b480      	push	{r7}
 800dfc8:	b083      	sub	sp, #12
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800dfdc:	b5b0      	push	{r4, r5, r7, lr}
 800dfde:	b084      	sub	sp, #16
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	60f8      	str	r0, [r7, #12]
 800dfe4:	60b9      	str	r1, [r7, #8]
 800dfe6:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800dfe8:	68fc      	ldr	r4, [r7, #12]
 800dfea:	f107 0308 	add.w	r3, r7, #8
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7ff ffe9 	bl	800dfc6 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800dff4:	4603      	mov	r3, r0
 800dff6:	681d      	ldr	r5, [r3, #0]
 800dff8:	6878      	ldr	r0, [r7, #4]
 800dffa:	f7ff ffb8 	bl	800df6e <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800dffe:	4603      	mov	r3, r0
 800e000:	461a      	mov	r2, r3
 800e002:	4629      	mov	r1, r5
 800e004:	4620      	mov	r0, r4
 800e006:	f000 f81f 	bl	800e048 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	4618      	mov	r0, r3
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bdb0      	pop	{r4, r5, r7, pc}

0800e014 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 f8ed 	bl	800e1fe <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e024:	4603      	mov	r3, r0
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e02e:	b580      	push	{r7, lr}
 800e030:	b082      	sub	sp, #8
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 f8ed 	bl	800e218 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e03e:	4603      	mov	r3, r0
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e048:	b590      	push	{r4, r7, lr}
 800e04a:	b085      	sub	sp, #20
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	60f8      	str	r0, [r7, #12]
 800e050:	60b9      	str	r1, [r7, #8]
 800e052:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e054:	68fc      	ldr	r4, [r7, #12]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff ff94 	bl	800df84 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e05c:	4602      	mov	r2, r0
 800e05e:	f107 0308 	add.w	r3, r7, #8
 800e062:	4619      	mov	r1, r3
 800e064:	4620      	mov	r0, r4
 800e066:	f000 f8ef 	bl	800e248 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	4618      	mov	r0, r3
 800e06e:	3714      	adds	r7, #20
 800e070:	46bd      	mov	sp, r7
 800e072:	bd90      	pop	{r4, r7, pc}

0800e074 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 f80a 	bl	800e096 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e082:	4603      	mov	r3, r0
 800e084:	2b00      	cmp	r3, #0
 800e086:	bf14      	ite	ne
 800e088:	2301      	movne	r3, #1
 800e08a:	2300      	moveq	r3, #0
 800e08c:	b2db      	uxtb	r3, r3
 800e08e:	4618      	mov	r0, r3
 800e090:	3708      	adds	r7, #8
 800e092:	46bd      	mov	sp, r7
 800e094:	bd80      	pop	{r7, pc}

0800e096 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e096:	b580      	push	{r7, lr}
 800e098:	b082      	sub	sp, #8
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f000 f8ea 	bl	800e27a <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI19TfLiteSoftmaxParamsEEPT_v>:
  T* AllocatePOD() {
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2204      	movs	r2, #4
 800e0c0:	2104      	movs	r1, #4
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	4798      	blx	r3
 800e0c6:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	4619      	mov	r1, r3
 800e0cc:	2004      	movs	r0, #4
 800e0ce:	f7f2 ffbc 	bl	800104a <_ZnwjPv>
 800e0d2:	4603      	mov	r3, r0
  }
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	370c      	adds	r7, #12
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr

0800e0f2 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 800e0f2:	b5b0      	push	{r4, r5, r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	60f8      	str	r0, [r7, #12]
 800e0fa:	60b9      	str	r1, [r7, #8]
 800e0fc:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 800e0fe:	68fc      	ldr	r4, [r7, #12]
 800e100:	f107 0308 	add.w	r3, r7, #8
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff ffe9 	bl	800e0dc <_ZSt4moveIRP19TfLiteSoftmaxParamsEONSt16remove_referenceIT_E4typeEOS4_>
 800e10a:	4603      	mov	r3, r0
 800e10c:	681d      	ldr	r5, [r3, #0]
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff ff2d 	bl	800df6e <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 800e114:	4603      	mov	r3, r0
 800e116:	461a      	mov	r2, r3
 800e118:	4629      	mov	r1, r5
 800e11a:	4620      	mov	r0, r4
 800e11c:	f000 f81f 	bl	800e15e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bdb0      	pop	{r4, r5, r7, pc}

0800e12a <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b082      	sub	sp, #8
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	4618      	mov	r0, r3
 800e136:	f000 f8ae 	bl	800e296 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e13a:	4603      	mov	r3, r0
 800e13c:	4618      	mov	r0, r3
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <_ZNSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 f8ae 	bl	800e2b0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 800e154:	4603      	mov	r3, r0
 800e156:	4618      	mov	r0, r3
 800e158:	3708      	adds	r7, #8
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 800e15e:	b590      	push	{r4, r7, lr}
 800e160:	b085      	sub	sp, #20
 800e162:	af00      	add	r7, sp, #0
 800e164:	60f8      	str	r0, [r7, #12]
 800e166:	60b9      	str	r1, [r7, #8]
 800e168:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 800e16a:	68fc      	ldr	r4, [r7, #12]
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7ff ff09 	bl	800df84 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e172:	4602      	mov	r2, r0
 800e174:	f107 0308 	add.w	r3, r7, #8
 800e178:	4619      	mov	r1, r3
 800e17a:	4620      	mov	r0, r4
 800e17c:	f000 f8b0 	bl	800e2e0 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	4618      	mov	r0, r3
 800e184:	3714      	adds	r7, #20
 800e186:	46bd      	mov	sp, r7
 800e188:	bd90      	pop	{r4, r7, pc}

0800e18a <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b082      	sub	sp, #8
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f000 f80a 	bl	800e1ac <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	bf14      	ite	ne
 800e19e:	2301      	movne	r3, #1
 800e1a0:	2300      	moveq	r3, #0
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <_ZNKSt10unique_ptrI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f000 f8ab 	bl	800e312 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3708      	adds	r7, #8
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bd80      	pop	{r7, pc}

0800e1c6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800e1c6:	b480      	push	{r7}
 800e1c8:	b083      	sub	sp, #12
 800e1ca:	af00      	add	r7, sp, #0
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	71fb      	strb	r3, [r7, #7]
    return t;
 800e1d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	370c      	adds	r7, #12
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1de:	4770      	bx	lr

0800e1e0 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800e1e0:	b480      	push	{r7}
 800e1e2:	b083      	sub	sp, #12
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	ee07 3a90 	vmov	s15, r3
}
 800e1f0:	eeb0 0a67 	vmov.f32	s0, s15
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fc:	4770      	bx	lr

0800e1fe <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800e1fe:	b580      	push	{r7, lr}
 800e200:	b082      	sub	sp, #8
 800e202:	af00      	add	r7, sp, #0
 800e204:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	4618      	mov	r0, r3
 800e20a:	f000 f890 	bl	800e32e <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800e20e:	4603      	mov	r3, r0
 800e210:	4618      	mov	r0, r3
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	4618      	mov	r0, r3
 800e224:	f000 f88f 	bl	800e346 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e228:	4603      	mov	r3, r0
 800e22a:	4618      	mov	r0, r3
 800e22c:	3708      	adds	r7, #8
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e232:	b480      	push	{r7}
 800e234:	b083      	sub	sp, #12
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	4618      	mov	r0, r3
 800e23e:	370c      	adds	r7, #12
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr

0800e248 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800e248:	b5b0      	push	{r4, r5, r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	60f8      	str	r0, [r7, #12]
 800e250:	60b9      	str	r1, [r7, #8]
 800e252:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800e254:	68fc      	ldr	r4, [r7, #12]
 800e256:	68b8      	ldr	r0, [r7, #8]
 800e258:	f7ff ffeb 	bl	800e232 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800e25c:	4605      	mov	r5, r0
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7ff fe90 	bl	800df84 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e264:	4603      	mov	r3, r0
 800e266:	461a      	mov	r2, r3
 800e268:	4629      	mov	r1, r5
 800e26a:	4620      	mov	r0, r4
 800e26c:	f000 f878 	bl	800e360 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	4618      	mov	r0, r3
 800e274:	3710      	adds	r7, #16
 800e276:	46bd      	mov	sp, r7
 800e278:	bdb0      	pop	{r4, r5, r7, pc}

0800e27a <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b082      	sub	sp, #8
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4618      	mov	r0, r3
 800e286:	f000 f889 	bl	800e39c <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800e28a:	4603      	mov	r3, r0
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4618      	mov	r0, r3
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800e296:	b580      	push	{r7, lr}
 800e298:	b082      	sub	sp, #8
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	f000 f888 	bl	800e3b6 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3708      	adds	r7, #8
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <_ZNSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f000 f887 	bl	800e3ce <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e2ca:	b480      	push	{r7}
 800e2cc:	b083      	sub	sp, #12
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	370c      	adds	r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <_ZNSt5tupleIJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 800e2e0:	b5b0      	push	{r4, r5, r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 800e2ec:	68fc      	ldr	r4, [r7, #12]
 800e2ee:	68b8      	ldr	r0, [r7, #8]
 800e2f0:	f7ff ffeb 	bl	800e2ca <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f7ff fe44 	bl	800df84 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	461a      	mov	r2, r3
 800e300:	4629      	mov	r1, r5
 800e302:	4620      	mov	r0, r4
 800e304:	f000 f870 	bl	800e3e8 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	4618      	mov	r0, r3
 800e30c:	3710      	adds	r7, #16
 800e30e:	46bd      	mov	sp, r7
 800e310:	bdb0      	pop	{r4, r5, r7, pc}

0800e312 <_ZNKSt15__uniq_ptr_implI19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800e312:	b580      	push	{r7, lr}
 800e314:	b082      	sub	sp, #8
 800e316:	af00      	add	r7, sp, #0
 800e318:	6078      	str	r0, [r7, #4]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f000 f881 	bl	800e424 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 800e322:	4603      	mov	r3, r0
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	4618      	mov	r0, r3
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e32e:	b580      	push	{r7, lr}
 800e330:	b082      	sub	sp, #8
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 f8a0 	bl	800e47c <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800e33c:	4603      	mov	r3, r0
 800e33e:	4618      	mov	r0, r3
 800e340:	3708      	adds	r7, #8
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}

0800e346 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800e346:	b580      	push	{r7, lr}
 800e348:	b082      	sub	sp, #8
 800e34a:	af00      	add	r7, sp, #0
 800e34c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4618      	mov	r0, r3
 800e352:	f000 f874 	bl	800e43e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e356:	4603      	mov	r3, r0
 800e358:	4618      	mov	r0, r3
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800e360:	b590      	push	{r4, r7, lr}
 800e362:	b085      	sub	sp, #20
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800e36c:	68fc      	ldr	r4, [r7, #12]
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f7ff fe08 	bl	800df84 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e374:	4603      	mov	r3, r0
 800e376:	4619      	mov	r1, r3
 800e378:	4620      	mov	r0, r4
 800e37a:	f000 f86c 	bl	800e456 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	1d1c      	adds	r4, r3, #4
 800e382:	68b8      	ldr	r0, [r7, #8]
 800e384:	f7ff ff55 	bl	800e232 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800e388:	4603      	mov	r3, r0
 800e38a:	4619      	mov	r1, r3
 800e38c:	4620      	mov	r0, r4
 800e38e:	f000 f883 	bl	800e498 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	4618      	mov	r0, r3
 800e396:	3714      	adds	r7, #20
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd90      	pop	{r4, r7, pc}

0800e39c <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f000 f887 	bl	800e4ba <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 f887 	bl	800e4d2 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3708      	adds	r7, #8
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <_ZSt3getILj1EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b082      	sub	sp, #8
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f000 f830 	bl	800e43e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}

0800e3e8 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 800e3e8:	b590      	push	{r4, r7, lr}
 800e3ea:	b085      	sub	sp, #20
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 800e3f4:	68fc      	ldr	r4, [r7, #12]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f7ff fdc4 	bl	800df84 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	4619      	mov	r1, r3
 800e400:	4620      	mov	r0, r4
 800e402:	f000 f828 	bl	800e456 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	1d1c      	adds	r4, r3, #4
 800e40a:	68b8      	ldr	r0, [r7, #8]
 800e40c:	f7ff ff5d 	bl	800e2ca <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800e410:	4603      	mov	r3, r0
 800e412:	4619      	mov	r1, r3
 800e414:	4620      	mov	r0, r4
 800e416:	f000 f86a 	bl	800e4ee <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	4618      	mov	r0, r3
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	bd90      	pop	{r4, r7, pc}

0800e424 <_ZSt3getILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:
    get(const tuple<_Elements...>& __t) noexcept
 800e424:	b580      	push	{r7, lr}
 800e426:	b082      	sub	sp, #8
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	4618      	mov	r0, r3
 800e430:	f000 f86e 	bl	800e510 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 800e434:	4603      	mov	r3, r0
 800e436:	4618      	mov	r0, r3
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}

0800e43e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e43e:	b580      	push	{r7, lr}
 800e440:	b082      	sub	sp, #8
 800e442:	af00      	add	r7, sp, #0
 800e444:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f000 f86e 	bl	800e528 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 800e44c:	4603      	mov	r3, r0
 800e44e:	4618      	mov	r0, r3
 800e450:	3708      	adds	r7, #8
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 800e456:	b590      	push	{r4, r7, lr}
 800e458:	b083      	sub	sp, #12
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 800e460:	687c      	ldr	r4, [r7, #4]
 800e462:	6838      	ldr	r0, [r7, #0]
 800e464:	f7ff fd8e 	bl	800df84 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e468:	4603      	mov	r3, r0
 800e46a:	4619      	mov	r1, r3
 800e46c:	4620      	mov	r0, r4
 800e46e:	f000 f868 	bl	800e542 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	4618      	mov	r0, r3
 800e476:	370c      	adds	r7, #12
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd90      	pop	{r4, r7, pc}

0800e47c <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	3304      	adds	r3, #4
 800e488:	4618      	mov	r0, r3
 800e48a:	f000 f86b 	bl	800e564 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 800e48e:	4603      	mov	r3, r0
 800e490:	4618      	mov	r0, r3
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e4a2:	6838      	ldr	r0, [r7, #0]
 800e4a4:	f7ff fec5 	bl	800e232 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	681a      	ldr	r2, [r3, #0]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	601a      	str	r2, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3708      	adds	r7, #8
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b082      	sub	sp, #8
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 f859 	bl	800e57a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3708      	adds	r7, #8
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b082      	sub	sp, #8
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	3304      	adds	r3, #4
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f000 f859 	bl	800e596 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}

0800e4ee <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800e4ee:	b580      	push	{r7, lr}
 800e4f0:	b082      	sub	sp, #8
 800e4f2:	af00      	add	r7, sp, #0
 800e4f4:	6078      	str	r0, [r7, #4]
 800e4f6:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e4f8:	6838      	ldr	r0, [r7, #0]
 800e4fa:	f7ff fee6 	bl	800e2ca <_ZSt7forwardIRP19TfLiteSoftmaxParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 800e4fe:	4603      	mov	r3, r0
 800e500:	681a      	ldr	r2, [r3, #0]
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	4618      	mov	r0, r3
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <_ZSt12__get_helperILj0EP19TfLiteSoftmaxParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800e510:	b580      	push	{r7, lr}
 800e512:	b082      	sub	sp, #8
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 f847 	bl	800e5ac <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 800e51e:	4603      	mov	r3, r0
 800e520:	4618      	mov	r0, r3
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	4618      	mov	r0, r3
 800e534:	f000 f848 	bl	800e5c8 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 800e538:	4603      	mov	r3, r0
 800e53a:	4618      	mov	r0, r3
 800e53c:	3708      	adds	r7, #8
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}

0800e542 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 800e542:	b580      	push	{r7, lr}
 800e544:	b082      	sub	sp, #8
 800e546:	af00      	add	r7, sp, #0
 800e548:	6078      	str	r0, [r7, #4]
 800e54a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 800e54c:	6838      	ldr	r0, [r7, #0]
 800e54e:	f7ff fd19 	bl	800df84 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 800e552:	4602      	mov	r2, r0
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6812      	ldr	r2, [r2, #0]
 800e558:	601a      	str	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	4618      	mov	r0, r3
 800e55e:	3708      	adds	r7, #8
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}

0800e564 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e564:	b480      	push	{r7}
 800e566:	b083      	sub	sp, #12
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	4618      	mov	r0, r3
 800e570:	370c      	adds	r7, #12
 800e572:	46bd      	mov	sp, r7
 800e574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e578:	4770      	bx	lr

0800e57a <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e57a:	b580      	push	{r7, lr}
 800e57c:	b082      	sub	sp, #8
 800e57e:	af00      	add	r7, sp, #0
 800e580:	6078      	str	r0, [r7, #4]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	3304      	adds	r3, #4
 800e586:	4618      	mov	r0, r3
 800e588:	f000 f829 	bl	800e5de <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 800e58c:	4603      	mov	r3, r0
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}

0800e596 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e596:	b480      	push	{r7}
 800e598:	b083      	sub	sp, #12
 800e59a:	af00      	add	r7, sp, #0
 800e59c:	6078      	str	r0, [r7, #4]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	370c      	adds	r7, #12
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <_ZNSt11_Tuple_implILj0EJP19TfLiteSoftmaxParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b082      	sub	sp, #8
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	3304      	adds	r3, #4
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f000 f81b 	bl	800e5f4 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>
 800e5be:	4603      	mov	r3, r0
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	370c      	adds	r7, #12
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr

0800e5de <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800e5de:	b480      	push	{r7}
 800e5e0:	b083      	sub	sp, #12
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr

0800e5f4 <_ZNSt10_Head_baseILj0EP19TfLiteSoftmaxParamsLb0EE7_M_headERKS2_>:
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4618      	mov	r0, r3
 800e600:	370c      	adds	r7, #12
 800e602:	46bd      	mov	sp, r7
 800e604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e608:	4770      	bx	lr

0800e60a <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b082      	sub	sp, #8
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4618      	mov	r0, r3
 800e616:	f000 f8d9 	bl	800e7cc <_ZNK11flatbuffers6VectorIcE4DataEv>
 800e61a:	4603      	mov	r3, r0
 800e61c:	4618      	mov	r0, r3
 800e61e:	3708      	adds	r7, #8
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}

0800e624 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 800e624:	b480      	push	{r7}
 800e626:	af00      	add	r7, sp, #0
  return names;
 800e628:	4b02      	ldr	r3, [pc, #8]	; (800e634 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr
 800e634:	0803db18 	.word	0x0803db18

0800e638 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	4603      	mov	r3, r0
 800e640:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
 800e642:	2300      	movs	r3, #0
 800e644:	72bb      	strb	r3, [r7, #10]
 800e646:	237e      	movs	r3, #126	; 0x7e
 800e648:	72fb      	strb	r3, [r7, #11]
 800e64a:	f107 020b 	add.w	r2, r7, #11
 800e64e:	f107 010a 	add.w	r1, r7, #10
 800e652:	1dfb      	adds	r3, r7, #7
 800e654:	4618      	mov	r0, r3
 800e656:	f000 f8c5 	bl	800e7e4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800e65a:	4603      	mov	r3, r0
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d001      	beq.n	800e664 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 800e660:	4b07      	ldr	r3, [pc, #28]	; (800e680 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 800e662:	e008      	b.n	800e676 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 800e664:	79fb      	ldrb	r3, [r7, #7]
 800e666:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800e668:	f7ff ffdc 	bl	800e624 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 800e66c:	4602      	mov	r2, r0
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4413      	add	r3, r2
 800e674:	681b      	ldr	r3, [r3, #0]
}
 800e676:	4618      	mov	r0, r3
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	0801d404 	.word	0x0801d404

0800e684 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	2104      	movs	r1, #4
 800e692:	4618      	mov	r0, r3
 800e694:	f7ff fa87 	bl	800dba6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800e698:	4603      	mov	r3, r0
 800e69a:	b2db      	uxtb	r3, r3
  }
 800e69c:	4618      	mov	r0, r3
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2106      	movs	r1, #6
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f000 f8b2 	bl	800e81a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800e6b6:	4603      	mov	r3, r0
  }
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	2108      	movs	r1, #8
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7ff fa3b 	bl	800db4a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800e6d4:	4603      	mov	r3, r0
  }
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3708      	adds	r7, #8
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
	...

0800e6e0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b088      	sub	sp, #32
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
 800e6ec:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	601a      	str	r2, [r3, #0]
  auto builtin_code = opcode->builtin_code();
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f7ff ffc3 	bl	800e684 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 800e6fe:	4603      	mov	r3, r0
 800e700:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	f7ff ffdc 	bl	800e6c0 <_ZNK6tflite12OperatorCode7versionEv>
 800e708:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800e70a:	7fbb      	ldrb	r3, [r7, #30]
 800e70c:	2b7e      	cmp	r3, #126	; 0x7e
 800e70e:	d908      	bls.n	800e722 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 800e710:	7fbb      	ldrb	r3, [r7, #30]
 800e712:	461a      	mov	r2, r3
 800e714:	492a      	ldr	r1, [pc, #168]	; (800e7c0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f7fe ff28 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 800e71c:	2301      	movs	r3, #1
 800e71e:	77fb      	strb	r3, [r7, #31]
 800e720:	e048      	b.n	800e7b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 800e722:	7fbb      	ldrb	r3, [r7, #30]
 800e724:	2b20      	cmp	r3, #32
 800e726:	d01a      	beq.n	800e75e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	7fb9      	ldrb	r1, [r7, #30]
 800e730:	69ba      	ldr	r2, [r7, #24]
 800e732:	68b8      	ldr	r0, [r7, #8]
 800e734:	4798      	blx	r3
 800e736:	4602      	mov	r2, r0
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d137      	bne.n	800e7b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 800e744:	7fbb      	ldrb	r3, [r7, #30]
 800e746:	4618      	mov	r0, r3
 800e748:	f7ff ff76 	bl	800e638 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800e74c:	4602      	mov	r2, r0
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	491c      	ldr	r1, [pc, #112]	; (800e7c4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f7fe ff0a 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800e758:	2301      	movs	r3, #1
 800e75a:	77fb      	strb	r3, [r7, #31]
 800e75c:	e02a      	b.n	800e7b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 800e75e:	68f8      	ldr	r0, [r7, #12]
 800e760:	f7ff ffa0 	bl	800e6a4 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	bf0c      	ite	eq
 800e76a:	2301      	moveq	r3, #1
 800e76c:	2300      	movne	r3, #0
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	2b00      	cmp	r3, #0
 800e772:	d006      	beq.n	800e782 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 800e774:	4914      	ldr	r1, [pc, #80]	; (800e7c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7fe fef8 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 800e77c:	2301      	movs	r3, #1
 800e77e:	77fb      	strb	r3, [r7, #31]
 800e780:	e018      	b.n	800e7b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f7ff ff8e 	bl	800e6a4 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800e788:	4603      	mov	r3, r0
 800e78a:	4618      	mov	r0, r3
 800e78c:	f7ff ff3d 	bl	800e60a <_ZNK11flatbuffers6String5c_strEv>
 800e790:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	3304      	adds	r3, #4
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	69ba      	ldr	r2, [r7, #24]
 800e79c:	6979      	ldr	r1, [r7, #20]
 800e79e:	68b8      	ldr	r0, [r7, #8]
 800e7a0:	4798      	blx	r3
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d101      	bne.n	800e7b4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 800e7b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3720      	adds	r7, #32
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	0801d408 	.word	0x0801d408
 800e7c4:	0801d45c 	.word	0x0801d45c
 800e7c8:	0801d494 	.word	0x0801d494

0800e7cc <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 800e7cc:	b480      	push	{r7}
 800e7ce:	b083      	sub	sp, #12
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3304      	adds	r3, #4
  }
 800e7d8:	4618      	mov	r0, r3
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 800e7e4:	b480      	push	{r7}
 800e7e6:	b085      	sub	sp, #20
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	781a      	ldrb	r2, [r3, #0]
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d305      	bcc.n	800e808 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	781a      	ldrb	r2, [r3, #0]
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	d201      	bcs.n	800e80c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800e808:	2301      	movs	r3, #1
 800e80a:	e000      	b.n	800e80e <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 800e80c:	2300      	movs	r3, #0
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3714      	adds	r7, #20
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr

0800e81a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800e81a:	b580      	push	{r7, lr}
 800e81c:	b082      	sub	sp, #8
 800e81e:	af00      	add	r7, sp, #0
 800e820:	6078      	str	r0, [r7, #4]
 800e822:	460b      	mov	r3, r1
 800e824:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800e826:	887b      	ldrh	r3, [r7, #2]
 800e828:	4619      	mov	r1, r3
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f000 f805 	bl	800e83a <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800e830:	4603      	mov	r3, r0
  }
 800e832:	4618      	mov	r0, r3
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}

0800e83a <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800e83a:	b580      	push	{r7, lr}
 800e83c:	b084      	sub	sp, #16
 800e83e:	af00      	add	r7, sp, #0
 800e840:	6078      	str	r0, [r7, #4]
 800e842:	460b      	mov	r3, r1
 800e844:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800e846:	887b      	ldrh	r3, [r7, #2]
 800e848:	4619      	mov	r1, r3
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f7f5 fb0a 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800e850:	4603      	mov	r3, r0
 800e852:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	89fb      	ldrh	r3, [r7, #14]
 800e858:	4413      	add	r3, r2
 800e85a:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e85c:	89fb      	ldrh	r3, [r7, #14]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d006      	beq.n	800e870 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800e862:	68b8      	ldr	r0, [r7, #8]
 800e864:	f7f6 fcc4 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800e868:	4602      	mov	r2, r0
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	4413      	add	r3, r2
                        : nullptr;
 800e86e:	e000      	b.n	800e872 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800e870:	2300      	movs	r3, #0
  }
 800e872:	4618      	mov	r0, r3
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:

#include "edge-impulse-sdk/tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
 800e87a:	b480      	push	{r7}
 800e87c:	b087      	sub	sp, #28
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
  if (!tensor->is_variable) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e888:	f083 0301 	eor.w	r3, r3, #1
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d001      	beq.n	800e896 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1c>
    return kTfLiteOk;
 800e892:	2300      	movs	r3, #0
 800e894:	e01e      	b.n	800e8d4 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x5a>
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
 800e896:	2300      	movs	r3, #0
 800e898:	617b      	str	r3, [r7, #20]
  if (tensor->type == kTfLiteInt8) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	2b09      	cmp	r3, #9
 800e8a0:	d102      	bne.n	800e8a8 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x2e>
    value = tensor->params.zero_point;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	691b      	ldr	r3, [r3, #16]
 800e8a6:	617b      	str	r3, [r7, #20]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60fb      	str	r3, [r7, #12]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	699b      	ldr	r3, [r3, #24]
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	d20a      	bcs.n	800e8d2 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x58>
    *raw_ptr = value;
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	701a      	strb	r2, [r3, #0]
    raw_ptr++;
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	3301      	adds	r3, #1
 800e8ce:	60fb      	str	r3, [r7, #12]
 800e8d0:	e7ef      	b.n	800e8b2 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x38>
  }
#endif
  return kTfLiteOk;
 800e8d2:	2300      	movs	r3, #0
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	371c      	adds	r7, #28
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800e8e0:	b480      	push	{r7}
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
	...

0800e8f4 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800e8f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800e8f8:	b088      	sub	sp, #32
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	ed87 0b02 	vstr	d0, [r7, #8]
 800e900:	6078      	str	r0, [r7, #4]
 800e902:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800e904:	f04f 0200 	mov.w	r2, #0
 800e908:	f04f 0300 	mov.w	r3, #0
 800e90c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e910:	f7f2 f8f2 	bl	8000af8 <__aeabi_dcmpeq>
 800e914:	4603      	mov	r3, r0
 800e916:	2b00      	cmp	r3, #0
 800e918:	d006      	beq.n	800e928 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2200      	movs	r2, #0
 800e91e:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	2200      	movs	r2, #0
 800e924:	601a      	str	r2, [r3, #0]
 800e926:	e06a      	b.n	800e9fe <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800e928:	6838      	ldr	r0, [r7, #0]
 800e92a:	ed97 0b02 	vldr	d0, [r7, #8]
 800e92e:	f007 fe2b 	bl	8016588 <frexp>
 800e932:	ed87 0b06 	vstr	d0, [r7, #24]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800e936:	f04f 0200 	mov.w	r2, #0
 800e93a:	4b33      	ldr	r3, [pc, #204]	; (800ea08 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 800e93c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e940:	f7f1 fe72 	bl	8000628 <__aeabi_dmul>
 800e944:	4603      	mov	r3, r0
 800e946:	460c      	mov	r4, r1
 800e948:	ec44 3b17 	vmov	d7, r3, r4
 800e94c:	eeb0 0a47 	vmov.f32	s0, s14
 800e950:	eef0 0a67 	vmov.f32	s1, s15
 800e954:	f000 f983 	bl	800ec5e <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800e958:	ec54 3b10 	vmov	r3, r4, d0
 800e95c:	4618      	mov	r0, r3
 800e95e:	4621      	mov	r1, r4
 800e960:	f7f2 f9c2 	bl	8000ce8 <__aeabi_d2lz>
 800e964:	4603      	mov	r3, r0
 800e966:	460c      	mov	r4, r1
 800e968:	e9c7 3404 	strd	r3, r4, [r7, #16]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800e96c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e970:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e974:	f04f 0200 	mov.w	r2, #0
 800e978:	4299      	cmp	r1, r3
 800e97a:	eb72 0304 	sbcs.w	r3, r2, r4
 800e97e:	da01      	bge.n	800e984 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>
 800e980:	f00a fbb9 	bl	80190f6 <abort>
  if (q_fixed == (1ll << 31)) {
 800e984:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e988:	2c00      	cmp	r4, #0
 800e98a:	bf08      	it	eq
 800e98c:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
 800e990:	d114      	bne.n	800e9bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 800e992:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 800e996:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800e99a:	4611      	mov	r1, r2
 800e99c:	f04f 0200 	mov.w	r2, #0
 800e9a0:	eb1b 0301 	adds.w	r3, fp, r1
 800e9a4:	eb4c 0402 	adc.w	r4, ip, r2
 800e9a8:	1064      	asrs	r4, r4, #1
 800e9aa:	ea4f 0333 	mov.w	r3, r3, rrx
 800e9ae:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ++*shift;
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800e9bc:	f7ff ff90 	bl	800e8e0 <_ZNSt14numeric_limitsIlE3maxEv>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800e9c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e9cc:	4299      	cmp	r1, r3
 800e9ce:	eb72 0304 	sbcs.w	r3, r2, r4
 800e9d2:	da01      	bge.n	800e9d8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 800e9d4:	f00a fb8f 	bl	80190f6 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f113 0f1f 	cmn.w	r3, #31
 800e9e0:	da08      	bge.n	800e9f4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800e9e8:	f04f 0300 	mov.w	r3, #0
 800e9ec:	f04f 0400 	mov.w	r4, #0
 800e9f0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800e9f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	601a      	str	r2, [r3, #0]
}
 800e9fe:	3720      	adds	r7, #32
 800ea00:	46bd      	mov	sp, r7
 800ea02:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ea06:	bf00      	nop
 800ea08:	41e00000 	.word	0x41e00000

0800ea0c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	ed87 0b02 	vstr	d0, [r7, #8]
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800ea1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ea1e:	f04f 0200 	mov.w	r2, #0
 800ea22:	4b0e      	ldr	r3, [pc, #56]	; (800ea5c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x50>)
 800ea24:	f7f2 f890 	bl	8000b48 <__aeabi_dcmpgt>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d101      	bne.n	800ea32 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800ea2e:	f00a fb62 	bl	80190f6 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800ea32:	ed97 7b02 	vldr	d7, [r7, #8]
 800ea36:	6839      	ldr	r1, [r7, #0]
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	eeb0 0a47 	vmov.f32	s0, s14
 800ea3e:	eef0 0a67 	vmov.f32	s1, s15
 800ea42:	f7ff ff57 	bl	800e8f4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	da01      	bge.n	800ea52 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x46>
 800ea4e:	f00a fb52 	bl	80190f6 <abort>
}
 800ea52:	bf00      	nop
 800ea54:	3710      	adds	r7, #16
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	3ff00000 	.word	0x3ff00000

0800ea60 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ea60:	b590      	push	{r4, r7, lr}
 800ea62:	b083      	sub	sp, #12
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ea76:	461a      	mov	r2, r3
 800ea78:	4623      	mov	r3, r4
 800ea7a:	f7f2 f847 	bl	8000b0c <__aeabi_dcmplt>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d001      	beq.n	800ea88 <_ZSt3minIdERKT_S2_S2_+0x28>
	return __b;
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	e000      	b.n	800ea8a <_ZSt3minIdERKT_S2_S2_+0x2a>
      return __a;
 800ea88:	687b      	ldr	r3, [r7, #4]
    }
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	370c      	adds	r7, #12
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd90      	pop	{r4, r7, pc}
 800ea92:	0000      	movs	r0, r0
 800ea94:	0000      	movs	r0, r0
	...

0800ea98 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800ea98:	b5b0      	push	{r4, r5, r7, lr}
 800ea9a:	b08e      	sub	sp, #56	; 0x38
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	ed87 0b06 	vstr	d0, [r7, #24]
 800eaa2:	ed87 1b04 	vstr	d1, [r7, #16]
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  // Patched by Edge Impulse, cast double to std::min/std::max calls
  const double input_beta_real_multiplier = std::min<double>(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800eaac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eab0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800eab4:	f7f1 fdb8 	bl	8000628 <__aeabi_dmul>
 800eab8:	4603      	mov	r3, r0
 800eaba:	460c      	mov	r4, r1
 800eabc:	4625      	mov	r5, r4
 800eabe:	461c      	mov	r4, r3
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	f1c3 031f 	rsb	r3, r3, #31
 800eac6:	2201      	movs	r2, #1
 800eac8:	fa02 f303 	lsl.w	r3, r2, r3
 800eacc:	4618      	mov	r0, r3
 800eace:	f7f1 fd41 	bl	8000554 <__aeabi_i2d>
 800ead2:	4602      	mov	r2, r0
 800ead4:	460b      	mov	r3, r1
 800ead6:	4620      	mov	r0, r4
 800ead8:	4629      	mov	r1, r5
 800eada:	f7f1 fda5 	bl	8000628 <__aeabi_dmul>
 800eade:	4603      	mov	r3, r0
 800eae0:	460c      	mov	r4, r1
 800eae2:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800eae6:	a40e      	add	r4, pc, #56	; (adr r4, 800eb20 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800eae8:	e9d4 3400 	ldrd	r3, r4, [r4]
 800eaec:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 800eaf0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800eaf4:	f107 0320 	add.w	r3, r7, #32
 800eaf8:	4611      	mov	r1, r2
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff ffb0 	bl	800ea60 <_ZSt3minIdERKT_S2_S2_>
 800eb00:	4603      	mov	r3, r0
 800eb02:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eb06:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800eb0a:	6879      	ldr	r1, [r7, #4]
 800eb0c:	68b8      	ldr	r0, [r7, #8]
 800eb0e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800eb12:	f7ff ff7b 	bl	800ea0c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800eb16:	bf00      	nop
 800eb18:	3738      	adds	r7, #56	; 0x38
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bdb0      	pop	{r4, r5, r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	ffc00000 	.word	0xffc00000
 800eb24:	41dfffff 	.word	0x41dfffff

0800eb28 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800eb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb2c:	b087      	sub	sp, #28
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	60f8      	str	r0, [r7, #12]
 800eb32:	60b9      	str	r1, [r7, #8]
 800eb34:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800eb36:	2201      	movs	r2, #1
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	4618      	mov	r0, r3
 800eb42:	f7f1 fd07 	bl	8000554 <__aeabi_i2d>
 800eb46:	4682      	mov	sl, r0
 800eb48:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	1ad1      	subs	r1, r2, r3
 800eb50:	f04f 0201 	mov.w	r2, #1
 800eb54:	f04f 0300 	mov.w	r3, #0
 800eb58:	f1a1 0620 	sub.w	r6, r1, #32
 800eb5c:	f1c1 0020 	rsb	r0, r1, #32
 800eb60:	fa03 f901 	lsl.w	r9, r3, r1
 800eb64:	fa02 f606 	lsl.w	r6, r2, r6
 800eb68:	ea49 0906 	orr.w	r9, r9, r6
 800eb6c:	fa22 f000 	lsr.w	r0, r2, r0
 800eb70:	ea49 0900 	orr.w	r9, r9, r0
 800eb74:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800eb78:	4640      	mov	r0, r8
 800eb7a:	4649      	mov	r1, r9
 800eb7c:	f7f1 fd26 	bl	80005cc <__aeabi_l2d>
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	4650      	mov	r0, sl
 800eb86:	4659      	mov	r1, fp
 800eb88:	f7f1 fd4e 	bl	8000628 <__aeabi_dmul>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	460b      	mov	r3, r1
 800eb90:	4690      	mov	r8, r2
 800eb92:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800eb94:	f04f 0201 	mov.w	r2, #1
 800eb98:	f04f 0300 	mov.w	r3, #0
 800eb9c:	68b9      	ldr	r1, [r7, #8]
 800eb9e:	f1a1 0620 	sub.w	r6, r1, #32
 800eba2:	f1c1 0020 	rsb	r0, r1, #32
 800eba6:	fa03 f501 	lsl.w	r5, r3, r1
 800ebaa:	fa02 f606 	lsl.w	r6, r2, r6
 800ebae:	4335      	orrs	r5, r6
 800ebb0:	fa22 f000 	lsr.w	r0, r2, r0
 800ebb4:	4305      	orrs	r5, r0
 800ebb6:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800ebba:	4620      	mov	r0, r4
 800ebbc:	4629      	mov	r1, r5
 800ebbe:	f7f1 fd05 	bl	80005cc <__aeabi_l2d>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	460c      	mov	r4, r1
  const double max_input_rescaled =
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	4623      	mov	r3, r4
 800ebca:	4640      	mov	r0, r8
 800ebcc:	4649      	mov	r1, r9
 800ebce:	f7f1 fe55 	bl	800087c <__aeabi_ddiv>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	e9c7 3404 	strd	r3, r4, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800ebda:	ed97 0b04 	vldr	d0, [r7, #16]
 800ebde:	f007 fc4f 	bl	8016480 <floor>
 800ebe2:	ec54 3b10 	vmov	r3, r4, d0
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	4621      	mov	r1, r4
 800ebea:	f7f1 ffcd 	bl	8000b88 <__aeabi_d2iz>
 800ebee:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	371c      	adds	r7, #28
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ebfa <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800ebfa:	b480      	push	{r7}
 800ebfc:	b083      	sub	sp, #12
 800ebfe:	af00      	add	r7, sp, #0
 800ec00:	6078      	str	r0, [r7, #4]
 800ec02:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	ed93 7a00 	vldr	s14, [r3]
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	edd3 7a00 	vldr	s15, [r3]
 800ec10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec18:	d501      	bpl.n	800ec1e <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	e000      	b.n	800ec20 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800ec1e:	687b      	ldr	r3, [r7, #4]
    }
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr

0800ec2c <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800ec2c:	b480      	push	{r7}
 800ec2e:	b083      	sub	sp, #12
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	ed93 7a00 	vldr	s14, [r3]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	edd3 7a00 	vldr	s15, [r3]
 800ec42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec4a:	d501      	bpl.n	800ec50 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	e000      	b.n	800ec52 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800ec50:	687b      	ldr	r3, [r7, #4]
    }
 800ec52:	4618      	mov	r0, r3
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800ec5e:	b580      	push	{r7, lr}
 800ec60:	b082      	sub	sp, #8
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	ed87 0b00 	vstr	d0, [r7]
 800ec68:	ed97 0b00 	vldr	d0, [r7]
 800ec6c:	f007 fcc2 	bl	80165f4 <round>
 800ec70:	eeb0 7a40 	vmov.f32	s14, s0
 800ec74:	eef0 7a60 	vmov.f32	s15, s1
 800ec78:	eeb0 0a47 	vmov.f32	s0, s14
 800ec7c:	eef0 0a67 	vmov.f32	s1, s15
 800ec80:	3708      	adds	r7, #8
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b082      	sub	sp, #8
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	ed87 0a01 	vstr	s0, [r7, #4]
 800ec90:	ed97 0a01 	vldr	s0, [r7, #4]
 800ec94:	f7f2 fae5 	bl	8001262 <_ZSt5roundf>
 800ec98:	eef0 7a40 	vmov.f32	s15, s0
 800ec9c:	eeb0 0a67 	vmov.f32	s0, s15
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800eca6:	b480      	push	{r7}
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800ecae:	4618      	mov	r0, r3
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb6:	4770      	bx	lr

0800ecb8 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800ecb8:	b480      	push	{r7}
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	237f      	movs	r3, #127	; 0x7f
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800ecc8:	b480      	push	{r7}
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	2300      	movs	r3, #0
 800ecce:	4618      	mov	r0, r3
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800ecd8:	b480      	push	{r7}
 800ecda:	af00      	add	r7, sp, #0
 800ecdc:	23ff      	movs	r3, #255	; 0xff
 800ecde:	4618      	mov	r0, r3
 800ece0:	46bd      	mov	sp, r7
 800ece2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece6:	4770      	bx	lr

0800ece8 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	689b      	ldr	r3, [r3, #8]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	370c      	adds	r7, #12
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr

0800ed02 <_ZSt3absd>:
  { return __builtin_fabs(__x); }
 800ed02:	b490      	push	{r4, r7}
 800ed04:	b082      	sub	sp, #8
 800ed06:	af00      	add	r7, sp, #0
 800ed08:	ed87 0b00 	vstr	d0, [r7]
 800ed0c:	683b      	ldr	r3, [r7, #0]
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 800ed14:	ec44 3b17 	vmov	d7, r3, r4
 800ed18:	eeb0 0a47 	vmov.f32	s0, s14
 800ed1c:	eef0 0a67 	vmov.f32	s1, s15
 800ed20:	3708      	adds	r7, #8
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bc90      	pop	{r4, r7}
 800ed26:	4770      	bx	lr

0800ed28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800ed28:	b5b0      	push	{r4, r5, r7, lr}
 800ed2a:	b08e      	sub	sp, #56	; 0x38
 800ed2c:	af02      	add	r7, sp, #8
 800ed2e:	60f8      	str	r0, [r7, #12]
 800ed30:	60b9      	str	r1, [r7, #8]
 800ed32:	607a      	str	r2, [r7, #4]
 800ed34:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	68db      	ldr	r3, [r3, #12]
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	f7f1 fc1c 	bl	8000578 <__aeabi_f2d>
 800ed40:	4604      	mov	r4, r0
 800ed42:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7f1 fc15 	bl	8000578 <__aeabi_f2d>
 800ed4e:	4602      	mov	r2, r0
 800ed50:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800ed52:	4620      	mov	r0, r4
 800ed54:	4629      	mov	r1, r5
 800ed56:	f7f1 fc67 	bl	8000628 <__aeabi_dmul>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d04a      	beq.n	800edfe <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	68db      	ldr	r3, [r3, #12]
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7f1 fc03 	bl	8000578 <__aeabi_f2d>
 800ed72:	4603      	mov	r3, r0
 800ed74:	460c      	mov	r4, r1
 800ed76:	e9c7 3408 	strd	r3, r4, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800ed7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ed7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800ed82:	f7f1 fa99 	bl	80002b8 <__aeabi_dsub>
 800ed86:	4603      	mov	r3, r0
 800ed88:	460c      	mov	r4, r1
 800ed8a:	ec44 3b17 	vmov	d7, r3, r4
 800ed8e:	eeb0 0a47 	vmov.f32	s0, s14
 800ed92:	eef0 0a67 	vmov.f32	s1, s15
 800ed96:	f7ff ffb4 	bl	800ed02 <_ZSt3absd>
 800ed9a:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800ed9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda0:	68db      	ldr	r3, [r3, #12]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7f1 fbe8 	bl	8000578 <__aeabi_f2d>
 800eda8:	4603      	mov	r3, r0
 800edaa:	460c      	mov	r4, r1
 800edac:	e9c7 3404 	strd	r3, r4, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800edb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800edb4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800edb8:	f7f1 fd60 	bl	800087c <__aeabi_ddiv>
 800edbc:	4603      	mov	r3, r0
 800edbe:	460c      	mov	r4, r1
 800edc0:	4618      	mov	r0, r3
 800edc2:	4621      	mov	r1, r4
 800edc4:	2301      	movs	r3, #1
 800edc6:	461c      	mov	r4, r3
 800edc8:	a316      	add	r3, pc, #88	; (adr r3, 800ee24 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800edca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edce:	f7f1 fea7 	bl	8000b20 <__aeabi_dcmple>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d101      	bne.n	800eddc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800edd8:	2300      	movs	r3, #0
 800edda:	461c      	mov	r4, r3
 800eddc:	b2e3      	uxtb	r3, r4
 800edde:	f083 0301 	eor.w	r3, r3, #1
 800ede2:	b2db      	uxtb	r3, r3
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d00a      	beq.n	800edfe <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	695c      	ldr	r4, [r3, #20]
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	4b0a      	ldr	r3, [pc, #40]	; (800ee18 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf0>)
 800edf0:	9300      	str	r3, [sp, #0]
 800edf2:	239a      	movs	r3, #154	; 0x9a
 800edf4:	4a09      	ldr	r2, [pc, #36]	; (800ee1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf4>)
 800edf6:	490a      	ldr	r1, [pc, #40]	; (800ee20 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800edf8:	47a0      	blx	r4
 800edfa:	2301      	movs	r3, #1
 800edfc:	e008      	b.n	800ee10 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xe8>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800edfe:	68f8      	ldr	r0, [r7, #12]
                                          multiplier);
 800ee00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee06:	687a      	ldr	r2, [r7, #4]
 800ee08:	68b9      	ldr	r1, [r7, #8]
 800ee0a:	f000 f80f 	bl	800ee2c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800ee0e:	4603      	mov	r3, r0
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3730      	adds	r7, #48	; 0x30
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bdb0      	pop	{r4, r5, r7, pc}
 800ee18:	0801d6e0 	.word	0x0801d6e0
 800ee1c:	0801d4cc 	.word	0x0801d4cc
 800ee20:	0801d5cc 	.word	0x0801d5cc
 800ee24:	47ae147b 	.word	0x47ae147b
 800ee28:	3f947ae1 	.word	0x3f947ae1

0800ee2c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800ee2c:	b590      	push	{r4, r7, lr}
 800ee2e:	b089      	sub	sp, #36	; 0x24
 800ee30:	af02      	add	r7, sp, #8
 800ee32:	60f8      	str	r0, [r7, #12]
 800ee34:	60b9      	str	r1, [r7, #8]
 800ee36:	607a      	str	r2, [r7, #4]
 800ee38:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	edd3 7a03 	vldr	s15, [r3, #12]
 800ee46:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800ee4a:	ee17 0a90 	vmov	r0, s15
 800ee4e:	f7f1 fb93 	bl	8000578 <__aeabi_f2d>
 800ee52:	4603      	mov	r3, r0
 800ee54:	460c      	mov	r4, r1
 800ee56:	e9c7 3404 	strd	r3, r4, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	461c      	mov	r4, r3
 800ee5e:	f04f 0200 	mov.w	r2, #0
 800ee62:	f04f 0300 	mov.w	r3, #0
 800ee66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ee6a:	f7f1 fe63 	bl	8000b34 <__aeabi_dcmpge>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d101      	bne.n	800ee78 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800ee74:	2300      	movs	r3, #0
 800ee76:	461c      	mov	r4, r3
 800ee78:	b2e3      	uxtb	r3, r4
 800ee7a:	f083 0301 	eor.w	r3, r3, #1
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d00a      	beq.n	800ee9a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	695c      	ldr	r4, [r3, #20]
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	4b0f      	ldr	r3, [pc, #60]	; (800eec8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800ee8c:	9300      	str	r3, [sp, #0]
 800ee8e:	23a7      	movs	r3, #167	; 0xa7
 800ee90:	4a0e      	ldr	r2, [pc, #56]	; (800eecc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800ee92:	490f      	ldr	r1, [pc, #60]	; (800eed0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 800ee94:	47a0      	blx	r4
 800ee96:	2301      	movs	r3, #1
 800ee98:	e012      	b.n	800eec0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x94>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	68db      	ldr	r3, [r3, #12]
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f7f1 fb6a 	bl	8000578 <__aeabi_f2d>
 800eea4:	4603      	mov	r3, r0
 800eea6:	460c      	mov	r4, r1
 800eea8:	461a      	mov	r2, r3
 800eeaa:	4623      	mov	r3, r4
 800eeac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800eeb0:	f7f1 fce4 	bl	800087c <__aeabi_ddiv>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	460c      	mov	r4, r1
 800eeb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eeba:	e9c2 3400 	strd	r3, r4, [r2]

  return kTfLiteOk;
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	371c      	adds	r7, #28
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bd90      	pop	{r4, r7, pc}
 800eec8:	0801d704 	.word	0x0801d704
 800eecc:	0801d4cc 	.word	0x0801d4cc
 800eed0:	0801d5cc 	.word	0x0801d5cc

0800eed4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	ed87 0a00 	vstr	s0, [r7]
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800eee6:	ed97 7a00 	vldr	s14, [r7]
 800eeea:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800eeee:	eeb0 0a66 	vmov.f32	s0, s13
 800eef2:	f7ff fec8 	bl	800ec86 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800eef6:	eef0 7a40 	vmov.f32	s15, s0
 800eefa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eefe:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	685b      	ldr	r3, [r3, #4]
  };
 800ef06:	4413      	add	r3, r2
 800ef08:	4618      	mov	r0, r3
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b08e      	sub	sp, #56	; 0x38
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	60b9      	str	r1, [r7, #8]
 800ef18:	607a      	str	r2, [r7, #4]
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	691b      	ldr	r3, [r3, #16]
 800ef2a:	633b      	str	r3, [r7, #48]	; 0x30
  };
 800ef2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef2e:	617b      	str	r3, [r7, #20]
 800ef30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef32:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 800ef34:	7bfb      	ldrb	r3, [r7, #15]
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	d118      	bne.n	800ef6c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800ef3a:	f107 0314 	add.w	r3, r7, #20
 800ef3e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800f034 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7ff ffc6 	bl	800eed4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	61fb      	str	r3, [r7, #28]
 800ef4c:	f107 021c 	add.w	r2, r7, #28
 800ef50:	f107 0308 	add.w	r3, r7, #8
 800ef54:	4611      	mov	r1, r2
 800ef56:	4618      	mov	r0, r3
 800ef58:	f000 f8c2 	bl	800f0e0 <_ZSt3maxIlERKT_S2_S2_>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	681a      	ldr	r2, [r3, #0]
 800ef60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef62:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef68:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 800ef6a:	e05f      	b.n	800f02c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 800ef6c:	7bfb      	ldrb	r3, [r7, #15]
 800ef6e:	2b03      	cmp	r3, #3
 800ef70:	d129      	bne.n	800efc6 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 800ef72:	f107 0314 	add.w	r3, r7, #20
 800ef76:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800f034 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f7ff ffaa 	bl	800eed4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800ef80:	4603      	mov	r3, r0
 800ef82:	623b      	str	r3, [r7, #32]
 800ef84:	f107 0220 	add.w	r2, r7, #32
 800ef88:	f107 0308 	add.w	r3, r7, #8
 800ef8c:	4611      	mov	r1, r2
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f000 f8a6 	bl	800f0e0 <_ZSt3maxIlERKT_S2_S2_>
 800ef94:	4603      	mov	r3, r0
 800ef96:	681a      	ldr	r2, [r3, #0]
 800ef98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef9a:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 800ef9c:	f107 0314 	add.w	r3, r7, #20
 800efa0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7ff ff95 	bl	800eed4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800efaa:	4603      	mov	r3, r0
 800efac:	627b      	str	r3, [r7, #36]	; 0x24
 800efae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800efb2:	1d3b      	adds	r3, r7, #4
 800efb4:	4611      	mov	r1, r2
 800efb6:	4618      	mov	r0, r3
 800efb8:	f000 f8a6 	bl	800f108 <_ZSt3minIlERKT_S2_S2_>
 800efbc:	4603      	mov	r3, r0
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efc2:	601a      	str	r2, [r3, #0]
}
 800efc4:	e032      	b.n	800f02c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 800efc6:	7bfb      	ldrb	r3, [r7, #15]
 800efc8:	2b02      	cmp	r3, #2
 800efca:	d129      	bne.n	800f020 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 800efcc:	f107 0314 	add.w	r3, r7, #20
 800efd0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7ff ff7d 	bl	800eed4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800efda:	4603      	mov	r3, r0
 800efdc:	62bb      	str	r3, [r7, #40]	; 0x28
 800efde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800efe2:	f107 0308 	add.w	r3, r7, #8
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f000 f879 	bl	800f0e0 <_ZSt3maxIlERKT_S2_S2_>
 800efee:	4603      	mov	r3, r0
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff4:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 800eff6:	f107 0314 	add.w	r3, r7, #20
 800effa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800effe:	4618      	mov	r0, r3
 800f000:	f7ff ff68 	bl	800eed4 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f004:	4603      	mov	r3, r0
 800f006:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f008:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f00c:	1d3b      	adds	r3, r7, #4
 800f00e:	4611      	mov	r1, r2
 800f010:	4618      	mov	r0, r3
 800f012:	f000 f879 	bl	800f108 <_ZSt3minIlERKT_S2_S2_>
 800f016:	4603      	mov	r3, r0
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f01c:	601a      	str	r2, [r3, #0]
}
 800f01e:	e005      	b.n	800f02c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f024:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f02a:	601a      	str	r2, [r3, #0]
}
 800f02c:	bf00      	nop
 800f02e:	3738      	adds	r7, #56	; 0x38
 800f030:	46bd      	mov	sp, r7
 800f032:	bd80      	pop	{r7, pc}
 800f034:	00000000 	.word	0x00000000

0800f038 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800f038:	b590      	push	{r4, r7, lr}
 800f03a:	b089      	sub	sp, #36	; 0x24
 800f03c:	af02      	add	r7, sp, #8
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	607a      	str	r2, [r7, #4]
 800f042:	603b      	str	r3, [r7, #0]
 800f044:	460b      	mov	r3, r1
 800f046:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800f048:	2300      	movs	r3, #0
 800f04a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800f04c:	2300      	movs	r3, #0
 800f04e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	2b03      	cmp	r3, #3
 800f056:	d108      	bne.n	800f06a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800f058:	f7ff fe36 	bl	800ecc8 <_ZNSt14numeric_limitsIhE3minEv>
 800f05c:	4603      	mov	r3, r0
 800f05e:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800f060:	f7ff fe3a 	bl	800ecd8 <_ZNSt14numeric_limitsIhE3maxEv>
 800f064:	4603      	mov	r3, r0
 800f066:	613b      	str	r3, [r7, #16]
 800f068:	e024      	b.n	800f0b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	2b09      	cmp	r3, #9
 800f070:	d108      	bne.n	800f084 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800f072:	f7ff fe18 	bl	800eca6 <_ZNSt14numeric_limitsIaE3minEv>
 800f076:	4603      	mov	r3, r0
 800f078:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800f07a:	f7ff fe1d 	bl	800ecb8 <_ZNSt14numeric_limitsIaE3maxEv>
 800f07e:	4603      	mov	r3, r0
 800f080:	613b      	str	r3, [r7, #16]
 800f082:	e017      	b.n	800f0b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	2b07      	cmp	r3, #7
 800f08a:	d108      	bne.n	800f09e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800f08c:	f7f1 fffa 	bl	8001084 <_ZNSt14numeric_limitsIsE3minEv>
 800f090:	4603      	mov	r3, r0
 800f092:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800f094:	f7f2 f800 	bl	8001098 <_ZNSt14numeric_limitsIsE3maxEv>
 800f098:	4603      	mov	r3, r0
 800f09a:	613b      	str	r3, [r7, #16]
 800f09c:	e00a      	b.n	800f0b4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	695c      	ldr	r4, [r3, #20]
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	4b0b      	ldr	r3, [pc, #44]	; (800f0d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	23da      	movs	r3, #218	; 0xda
 800f0aa:	4a0b      	ldr	r2, [pc, #44]	; (800f0d8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 800f0ac:	490b      	ldr	r1, [pc, #44]	; (800f0dc <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800f0ae:	47a0      	blx	r4
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e00a      	b.n	800f0ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 800f0b4:	7af8      	ldrb	r0, [r7, #11]
 800f0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b8:	9301      	str	r3, [sp, #4]
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	9300      	str	r3, [sp, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	693a      	ldr	r2, [r7, #16]
 800f0c2:	6979      	ldr	r1, [r7, #20]
 800f0c4:	f7ff ff24 	bl	800ef10 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 800f0c8:	2300      	movs	r3, #0
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	371c      	adds	r7, #28
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd90      	pop	{r4, r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	0801d720 	.word	0x0801d720
 800f0d8:	0801d4cc 	.word	0x0801d4cc
 800f0dc:	0801d5cc 	.word	0x0801d5cc

0800f0e0 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681a      	ldr	r2, [r3, #0]
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	da01      	bge.n	800f0fa <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	e000      	b.n	800f0fc <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800f0fa:	687b      	ldr	r3, [r7, #4]
    }
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800f108:	b480      	push	{r7}
 800f10a:	b083      	sub	sp, #12
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	681a      	ldr	r2, [r3, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	429a      	cmp	r2, r3
 800f11c:	da01      	bge.n	800f122 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	e000      	b.n	800f124 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800f122:	687b      	ldr	r3, [r7, #4]
    }
 800f124:	4618      	mov	r0, r3
 800f126:	370c      	adds	r7, #12
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr

0800f130 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 800f130:	b580      	push	{r7, lr}
 800f132:	b082      	sub	sp, #8
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	2104      	movs	r1, #4
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7fe fd22 	bl	800db86 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800f142:	4603      	mov	r3, r0
  }
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2200      	movs	r2, #0
 800f158:	2106      	movs	r1, #6
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fe fd23 	bl	800dba6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800f160:	4603      	mov	r3, r0
 800f162:	b2db      	uxtb	r3, r3
  }
 800f164:	4618      	mov	r0, r3
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <_ZN6tflite14AlignPointerUpEPhj>:
#include "edge-impulse-sdk/tensorflow/lite/core/api/flatbuffer_conversions.h"
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 800f16c:	b480      	push	{r7}
 800f16e:	b085      	sub	sp, #20
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	4413      	add	r3, r2
 800f180:	1e5a      	subs	r2, r3, #1
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	fbb2 f3f3 	udiv	r3, r2, r3
 800f188:	683a      	ldr	r2, [r7, #0]
 800f18a:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 800f18e:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800f190:	68bb      	ldr	r3, [r7, #8]
}
 800f192:	4618      	mov	r0, r3
 800f194:	3714      	adds	r7, #20
 800f196:	46bd      	mov	sp, r7
 800f198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19c:	4770      	bx	lr

0800f19e <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 800f19e:	b480      	push	{r7}
 800f1a0:	b085      	sub	sp, #20
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
 800f1a6:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 800f1ac:	68fa      	ldr	r2, [r7, #12]
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1b4:	683a      	ldr	r2, [r7, #0]
 800f1b6:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 800f1ba:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 800f1bc:	68bb      	ldr	r3, [r7, #8]
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3714      	adds	r7, #20
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c8:	4770      	bx	lr

0800f1ca <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 800f1ca:	b480      	push	{r7}
 800f1cc:	b085      	sub	sp, #20
 800f1ce:	af00      	add	r7, sp, #0
 800f1d0:	6078      	str	r0, [r7, #4]
 800f1d2:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 800f1d4:	683a      	ldr	r2, [r7, #0]
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	4413      	add	r3, r2
 800f1da:	1e5a      	subs	r2, r3, #1
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	fbb2 f2f3 	udiv	r2, r2, r3
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	fb02 f303 	mul.w	r3, r2, r3
 800f1e8:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3714      	adds	r7, #20
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr

0800f1f8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size,
                              ErrorReporter* reporter) {
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	4603      	mov	r3, r0
 800f200:	60b9      	str	r1, [r7, #8]
 800f202:	607a      	str	r2, [r7, #4]
 800f204:	73fb      	strb	r3, [r7, #15]
  switch (type) {
 800f206:	7bfb      	ldrb	r3, [r7, #15]
 800f208:	3b01      	subs	r3, #1
 800f20a:	2b08      	cmp	r3, #8
 800f20c:	d834      	bhi.n	800f278 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x80>
 800f20e:	a201      	add	r2, pc, #4	; (adr r2, 800f214 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>)
 800f210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f214:	0800f239 	.word	0x0800f239
 800f218:	0800f249 	.word	0x0800f249
 800f21c:	0800f251 	.word	0x0800f251
 800f220:	0800f261 	.word	0x0800f261
 800f224:	0800f279 	.word	0x0800f279
 800f228:	0800f269 	.word	0x0800f269
 800f22c:	0800f241 	.word	0x0800f241
 800f230:	0800f271 	.word	0x0800f271
 800f234:	0800f259 	.word	0x0800f259
    case kTfLiteFloat32:
      *size = sizeof(float);
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	2204      	movs	r2, #4
 800f23c:	601a      	str	r2, [r3, #0]
      break;
 800f23e:	e027      	b.n	800f290 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	2202      	movs	r2, #2
 800f244:	601a      	str	r2, [r3, #0]
      break;
 800f246:	e023      	b.n	800f290 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	2204      	movs	r2, #4
 800f24c:	601a      	str	r2, [r3, #0]
      break;
 800f24e:	e01f      	b.n	800f290 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	2201      	movs	r2, #1
 800f254:	601a      	str	r2, [r3, #0]
      break;
 800f256:	e01b      	b.n	800f290 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	2201      	movs	r2, #1
 800f25c:	601a      	str	r2, [r3, #0]
      break;
 800f25e:	e017      	b.n	800f290 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2208      	movs	r2, #8
 800f264:	601a      	str	r2, [r3, #0]
      break;
 800f266:	e013      	b.n	800f290 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteBool:
      *size = sizeof(bool);
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2201      	movs	r2, #1
 800f26c:	601a      	str	r2, [r3, #0]
      break;
 800f26e:	e00f      	b.n	800f290 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	2208      	movs	r2, #8
 800f274:	601a      	str	r2, [r3, #0]
      break;
 800f276:	e00b      	b.n	800f290 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    default:
      reporter->Report("Type %s (%d) not is not supported",
 800f278:	7bfb      	ldrb	r3, [r7, #15]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fe f918 	bl	800d4b0 <TfLiteTypeGetName>
 800f280:	4602      	mov	r2, r0
 800f282:	7bfb      	ldrb	r3, [r7, #15]
 800f284:	4905      	ldr	r1, [pc, #20]	; (800f29c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0xa4>)
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7fe f970 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                       TfLiteTypeGetName(type), type);
      return kTfLiteError;
 800f28c:	2301      	movs	r3, #1
 800f28e:	e000      	b.n	800f292 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
  }
  return kTfLiteOk;
 800f290:	2300      	movs	r3, #0
}
 800f292:	4618      	mov	r0, r3
 800f294:	3710      	adds	r7, #16
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}
 800f29a:	bf00      	nop
 800f29c:	0801d7b0 	.word	0x0801d7b0

0800f2a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b088      	sub	sp, #32
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	60f8      	str	r0, [r7, #12]
 800f2a8:	60b9      	str	r1, [r7, #8]
 800f2aa:	607a      	str	r2, [r7, #4]
 800f2ac:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 800f2b2:	68f8      	ldr	r0, [r7, #12]
 800f2b4:	f7ff ff3c 	bl	800f130 <_ZNK6tflite6Tensor5shapeEv>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	bf14      	ite	ne
 800f2be:	2301      	movne	r3, #1
 800f2c0:	2300      	moveq	r3, #0
 800f2c2:	b2db      	uxtb	r3, r3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d022      	beq.n	800f30e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	61bb      	str	r3, [r7, #24]
 800f2cc:	68f8      	ldr	r0, [r7, #12]
 800f2ce:	f7ff ff2f 	bl	800f130 <_ZNK6tflite6Tensor5shapeEv>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f000 f845 	bl	800f364 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800f2da:	4602      	mov	r2, r0
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	4293      	cmp	r3, r2
 800f2e0:	bf34      	ite	cc
 800f2e2:	2301      	movcc	r3, #1
 800f2e4:	2300      	movcs	r3, #0
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d010      	beq.n	800f30e <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f7ff ff1f 	bl	800f130 <_ZNK6tflite6Tensor5shapeEv>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	69b9      	ldr	r1, [r7, #24]
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f7fe fca6 	bl	800dc48 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	fb02 f303 	mul.w	r3, r2, r3
 800f304:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800f306:	69bb      	ldr	r3, [r7, #24]
 800f308:	3301      	adds	r3, #1
 800f30a:	61bb      	str	r3, [r7, #24]
 800f30c:	e7de      	b.n	800f2cc <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800f30e:	68f8      	ldr	r0, [r7, #12]
 800f310:	f7ff ff1c 	bl	800f14c <_ZNK6tflite6Tensor4typeEv>
 800f314:	4603      	mov	r3, r0
 800f316:	4618      	mov	r0, r3
 800f318:	f107 0315 	add.w	r3, r7, #21
 800f31c:	683a      	ldr	r2, [r7, #0]
 800f31e:	4619      	mov	r1, r3
 800f320:	f7fe fa76 	bl	800d810 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800f324:	4603      	mov	r3, r0
 800f326:	75fb      	strb	r3, [r7, #23]
 800f328:	7dfb      	ldrb	r3, [r7, #23]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d001      	beq.n	800f332 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 800f32e:	7dfb      	ldrb	r3, [r7, #23]
 800f330:	e014      	b.n	800f35c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xbc>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(
 800f332:	7d7b      	ldrb	r3, [r7, #21]
 800f334:	683a      	ldr	r2, [r7, #0]
 800f336:	6879      	ldr	r1, [r7, #4]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff ff5d 	bl	800f1f8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>
 800f33e:	4603      	mov	r3, r0
 800f340:	75bb      	strb	r3, [r7, #22]
 800f342:	7dbb      	ldrb	r3, [r7, #22]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d001      	beq.n	800f34c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xac>
 800f348:	7dbb      	ldrb	r3, [r7, #22]
 800f34a:	e007      	b.n	800f35c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xbc>
      TfLiteTypeSizeOf(tf_lite_type, type_size, error_reporter));
  *bytes = element_count * (*type_size);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	69fa      	ldr	r2, [r7, #28]
 800f352:	fb02 f203 	mul.w	r2, r2, r3
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800f35a:	2300      	movs	r3, #0
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3720      	adds	r7, #32
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 800f364:	b580      	push	{r7, lr}
 800f366:	b082      	sub	sp, #8
 800f368:	af00      	add	r7, sp, #0
 800f36a:	6078      	str	r0, [r7, #4]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f7fe fc5c 	bl	800dc2a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f372:	4603      	mov	r3, r0
 800f374:	4618      	mov	r0, r3
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2108      	movs	r1, #8
 800f388:	4618      	mov	r0, r3
 800f38a:	f001 fc8b 	bl	8010ca4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800f38e:	4603      	mov	r3, r0
  }
 800f390:	4618      	mov	r0, r3
 800f392:	3708      	adds	r7, #8
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}

0800f398 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	210a      	movs	r1, #10
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f001 fc8d 	bl	8010cc4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800f3aa:	4603      	mov	r3, r0
  }
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	2110      	movs	r1, #16
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fe fbc1 	bl	800db4a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800f3c8:	4603      	mov	r3, r0
  }
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	3708      	adds	r7, #8
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	bd80      	pop	{r7, pc}

0800f3d2 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 800f3d2:	b580      	push	{r7, lr}
 800f3d4:	b082      	sub	sp, #8
 800f3d6:	af00      	add	r7, sp, #0
 800f3d8:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	2108      	movs	r1, #8
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7f5 ff21 	bl	8005228 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800f3e6:	4603      	mov	r3, r0
  }
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	210c      	movs	r1, #12
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f001 fc71 	bl	8010ce4 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800f402:	4603      	mov	r3, r0
  }
 800f404:	4618      	mov	r0, r3
 800f406:	3708      	adds	r7, #8
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b082      	sub	sp, #8
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2200      	movs	r2, #0
 800f418:	210e      	movs	r1, #14
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fe fb66 	bl	800daec <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800f420:	4603      	mov	r3, r0
 800f422:	2b00      	cmp	r3, #0
 800f424:	bf14      	ite	ne
 800f426:	2301      	movne	r3, #1
 800f428:	2300      	moveq	r3, #0
 800f42a:	b2db      	uxtb	r3, r3
  }
 800f42c:	4618      	mov	r0, r3
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	2104      	movs	r1, #4
 800f442:	4618      	mov	r0, r3
 800f444:	f7f5 fef0 	bl	8005228 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800f448:	4603      	mov	r3, r0
  }
 800f44a:	4618      	mov	r0, r3
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800f452:	b580      	push	{r7, lr}
 800f454:	b082      	sub	sp, #8
 800f456:	af00      	add	r7, sp, #0
 800f458:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2106      	movs	r1, #6
 800f45e:	4618      	mov	r0, r3
 800f460:	f7fe fb91 	bl	800db86 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800f464:	4603      	mov	r3, r0
  }
 800f466:	4618      	mov	r0, r3
 800f468:	3708      	adds	r7, #8
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800f46e:	b580      	push	{r7, lr}
 800f470:	b082      	sub	sp, #8
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	2108      	movs	r1, #8
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7fe fb83 	bl	800db86 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800f480:	4603      	mov	r3, r0
  }
 800f482:	4618      	mov	r0, r3
 800f484:	3708      	adds	r7, #8
 800f486:	46bd      	mov	sp, r7
 800f488:	bd80      	pop	{r7, pc}

0800f48a <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 800f48a:	b580      	push	{r7, lr}
 800f48c:	b082      	sub	sp, #8
 800f48e:	af00      	add	r7, sp, #0
 800f490:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	210e      	movs	r1, #14
 800f496:	4618      	mov	r0, r3
 800f498:	f001 fbf4 	bl	8010c84 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800f49c:	4603      	mov	r3, r0
  }
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3708      	adds	r7, #8
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b082      	sub	sp, #8
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2104      	movs	r1, #4
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f001 fc26 	bl	8010d04 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800f4b8:	4603      	mov	r3, r0
  }
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b082      	sub	sp, #8
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2106      	movs	r1, #6
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f7fe fb59 	bl	800db86 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800f4d4:	4603      	mov	r3, r0
  }
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3708      	adds	r7, #8
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}

0800f4de <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800f4de:	b580      	push	{r7, lr}
 800f4e0:	b082      	sub	sp, #8
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2108      	movs	r1, #8
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7fe fb4b 	bl	800db86 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800f4f0:	4603      	mov	r3, r0
  }
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}

0800f4fa <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 800f4fa:	b580      	push	{r7, lr}
 800f4fc:	b082      	sub	sp, #8
 800f4fe:	af00      	add	r7, sp, #0
 800f500:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	210a      	movs	r1, #10
 800f506:	4618      	mov	r0, r3
 800f508:	f001 fc0c 	bl	8010d24 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800f50c:	4603      	mov	r3, r0
  }
 800f50e:	4618      	mov	r0, r3
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 800f516:	b580      	push	{r7, lr}
 800f518:	b082      	sub	sp, #8
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2104      	movs	r1, #4
 800f522:	4618      	mov	r0, r3
 800f524:	f001 fbae 	bl	8010c84 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 800f528:	4603      	mov	r3, r0
  }
 800f52a:	4618      	mov	r0, r3
 800f52c:	3708      	adds	r7, #8
 800f52e:	46bd      	mov	sp, r7
 800f530:	bd80      	pop	{r7, pc}

0800f532 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 800f532:	b580      	push	{r7, lr}
 800f534:	b082      	sub	sp, #8
 800f536:	af00      	add	r7, sp, #0
 800f538:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2104      	movs	r1, #4
 800f53e:	4618      	mov	r0, r3
 800f540:	f7ff f96b 	bl	800e81a <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800f544:	4603      	mov	r3, r0
  }
 800f546:	4618      	mov	r0, r3
 800f548:	3708      	adds	r7, #8
 800f54a:	46bd      	mov	sp, r7
 800f54c:	bd80      	pop	{r7, pc}

0800f54e <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800f54e:	b580      	push	{r7, lr}
 800f550:	b082      	sub	sp, #8
 800f552:	af00      	add	r7, sp, #0
 800f554:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	2106      	movs	r1, #6
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7f5 fe63 	bl	8005228 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 800f562:	4603      	mov	r3, r0
  }
 800f564:	4618      	mov	r0, r3
 800f566:	3708      	adds	r7, #8
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}

0800f56c <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2106      	movs	r1, #6
 800f578:	4618      	mov	r0, r3
 800f57a:	f001 fbe3 	bl	8010d44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 800f57e:	4603      	mov	r3, r0
  }
 800f580:	4618      	mov	r0, r3
 800f582:	3708      	adds	r7, #8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	2108      	movs	r1, #8
 800f594:	4618      	mov	r0, r3
 800f596:	f001 fbe5 	bl	8010d64 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 800f59a:	4603      	mov	r3, r0
  }
 800f59c:	4618      	mov	r0, r3
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	210c      	movs	r1, #12
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f001 fbe7 	bl	8010d84 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 800f5b6:	4603      	mov	r3, r0
  }
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3708      	adds	r7, #8
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2110      	movs	r1, #16
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f001 fbe9 	bl	8010da4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800f5d2:	4603      	mov	r3, r0
  }
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3708      	adds	r7, #8
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	4a04      	ldr	r2, [pc, #16]	; (800f5f8 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	601a      	str	r2, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	370c      	adds	r7, #12
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr
 800f5f8:	0803dd7c 	.word	0x0803dd7c

0800f5fc <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7ff ffe9 	bl	800f5dc <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800f60a:	2104      	movs	r1, #4
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f006 febc 	bl	801638a <_ZdlPvj>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4618      	mov	r0, r3
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800f61c:	b480      	push	{r7}
 800f61e:	b083      	sub	sp, #12
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	4a04      	ldr	r2, [pc, #16]	; (800f638 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	601a      	str	r2, [r3, #0]
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4618      	mov	r0, r3
 800f62e:	370c      	adds	r7, #12
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr
 800f638:	0803dd7c 	.word	0x0803dd7c

0800f63c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
// the flexible array element to be initialized.
const TfLiteIntArray kZeroLengthIntArray = {0};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	f7ff ffe7 	bl	800f61c <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800f64e:	4a05      	ldr	r2, [pc, #20]	; (800f664 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	601a      	str	r2, [r3, #0]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	683a      	ldr	r2, [r7, #0]
 800f658:	605a      	str	r2, [r3, #4]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4618      	mov	r0, r3
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	0803dd3c 	.word	0x0803dd3c

0800f668 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 800f668:	b580      	push	{r7, lr}
 800f66a:	b084      	sub	sp, #16
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	60f8      	str	r0, [r7, #12]
 800f670:	60b9      	str	r1, [r7, #8]
 800f672:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6858      	ldr	r0, [r3, #4]
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	330c      	adds	r3, #12
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	68b9      	ldr	r1, [r7, #8]
 800f686:	4798      	blx	r3
 800f688:	4603      	mov	r3, r0
  }
 800f68a:	4618      	mov	r0, r3
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 800f692:	b480      	push	{r7}
 800f694:	b083      	sub	sp, #12
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
 800f69a:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800f69c:	bf00      	nop
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(ErrorReporter* reporter,
 800f6a8:	b480      	push	{r7}
 800f6aa:	b085      	sub	sp, #20
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
                        SimpleMemoryAllocator* allocator)
      : reporter_(reporter), allocator_(allocator) {}
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	68ba      	ldr	r2, [r7, #8]
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	605a      	str	r2, [r3, #4]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	609a      	str	r2, [r3, #8]
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	60da      	str	r2, [r3, #12]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	611a      	str	r2, [r3, #16]
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3714      	adds	r7, #20
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>:

  // Initializes the builder by allocating AllocationInfo array from the
  // simple memory allocator.
  TfLiteStatus Init(size_t tensor_count, size_t scratch_buffer_count) {
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	60f8      	str	r0, [r7, #12]
 800f6e8:	60b9      	str	r1, [r7, #8]
 800f6ea:	607a      	str	r2, [r7, #4]
    tensor_count_ = tensor_count;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	68ba      	ldr	r2, [r7, #8]
 800f6f0:	609a      	str	r2, [r3, #8]
    buffer_count_ = scratch_buffer_count;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	60da      	str	r2, [r3, #12]
    return Allocate();
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	f000 f821 	bl	800f740 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>
 800f6fe:	4603      	mov	r3, r0
  }
 800f700:	4618      	mov	r0, r3
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>:

  // Add allocation information for the scratch buffers.
  TfLiteStatus AddScratchBuffers(internal::ScratchBufferHandle* buffer_handles);

  // Returns a pointer to the built AllocationInfo array.
  const AllocationInfo* Finish() const { return info_; }
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	691b      	ldr	r3, [r3, #16]
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>:
  size_t Size() const { return tensor_count_ + buffer_count_; }
 800f720:	b480      	push	{r7}
 800f722:	b083      	sub	sp, #12
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	689a      	ldr	r2, [r3, #8]
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	68db      	ldr	r3, [r3, #12]
 800f730:	4413      	add	r3, r2
 800f732:	4618      	mov	r0, r3
 800f734:	370c      	adds	r7, #12
 800f736:	46bd      	mov	sp, r7
 800f738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73c:	4770      	bx	lr
	...

0800f740 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>:
  size_t tensor_count_ = 0;
  size_t buffer_count_ = 0;
  AllocationInfo* info_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::Allocate() {
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  size_t bytes = sizeof(AllocationInfo) * Size();
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f7ff ffe9 	bl	800f720 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 800f74e:	4602      	mov	r2, r0
 800f750:	4613      	mov	r3, r2
 800f752:	005b      	lsls	r3, r3, #1
 800f754:	4413      	add	r3, r2
 800f756:	00db      	lsls	r3, r3, #3
 800f758:	60fb      	str	r3, [r7, #12]
  info_ = reinterpret_cast<AllocationInfo*>(
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6858      	ldr	r0, [r3, #4]
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	330c      	adds	r3, #12
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	2204      	movs	r2, #4
 800f76a:	68f9      	ldr	r1, [r7, #12]
 800f76c:	4798      	blx	r3
 800f76e:	4602      	mov	r2, r0
  info_ = reinterpret_cast<AllocationInfo*>(
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	611a      	str	r2, [r3, #16]
  if (info_ == nullptr) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d108      	bne.n	800f78e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x4e>
    TF_LITE_REPORT_ERROR(
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	68fa      	ldr	r2, [r7, #12]
 800f782:	4905      	ldr	r1, [pc, #20]	; (800f798 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x58>)
 800f784:	4618      	mov	r0, r3
 800f786:	f7fd fef1 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 800f78a:	2301      	movs	r3, #1
 800f78c:	e000      	b.n	800f790 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x50>
  }
  return kTfLiteOk;
 800f78e:	2300      	movs	r3, #0
}
 800f790:	4618      	mov	r0, r3
 800f792:	3710      	adds	r7, #16
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	0801df94 	.word	0x0801df94

0800f79c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>:

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteTensor* runtime_tensors) {
 800f79c:	b580      	push	{r7, lr}
 800f79e:	b09a      	sub	sp, #104	; 0x68
 800f7a0:	af02      	add	r7, sp, #8
 800f7a2:	60f8      	str	r0, [r7, #12]
 800f7a4:	60b9      	str	r1, [r7, #8]
 800f7a6:	607a      	str	r2, [r7, #4]
 800f7a8:	603b      	str	r3, [r7, #0]
  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	689b      	ldr	r3, [r3, #8]
 800f7b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d24f      	bcs.n	800f858 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xbc>
    AllocationInfo* current = &info_[i];
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	6919      	ldr	r1, [r3, #16]
 800f7bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f7be:	4613      	mov	r3, r2
 800f7c0:	005b      	lsls	r3, r3, #1
 800f7c2:	4413      	add	r3, r2
 800f7c4:	00db      	lsls	r3, r3, #3
 800f7c6:	440b      	add	r3, r1
 800f7c8:	643b      	str	r3, [r7, #64]	; 0x40
    // TfLiteTensor.uint8 field is deprecated so use .data field instead.
    current->output_ptr = &(runtime_tensors[i].data.data);
 800f7ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7cc:	019b      	lsls	r3, r3, #6
 800f7ce:	683a      	ldr	r2, [r7, #0]
 800f7d0:	4413      	add	r3, r2
 800f7d2:	1d1a      	adds	r2, r3, #4
 800f7d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7d6:	605a      	str	r2, [r3, #4]
    current->bytes = runtime_tensors[i].bytes;
 800f7d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7da:	019b      	lsls	r3, r3, #6
 800f7dc:	683a      	ldr	r2, [r7, #0]
 800f7de:	4413      	add	r3, r2
 800f7e0:	699a      	ldr	r2, [r3, #24]
 800f7e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7e4:	601a      	str	r2, [r3, #0]
    current->first_created = -1;
 800f7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ec:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 800f7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800f7f4:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 800f7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7f8:	019b      	lsls	r3, r3, #6
 800f7fa:	683a      	ldr	r2, [r7, #0]
 800f7fc:	4413      	add	r3, r2
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d113      	bne.n	800f82c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x90>
                                (!subgraph->tensors()->Get(i)->is_variable());
 800f804:	68b8      	ldr	r0, [r7, #8]
 800f806:	f7ff fe4e 	bl	800f4a6 <_ZNK6tflite8SubGraph7tensorsEv>
 800f80a:	4603      	mov	r3, r0
 800f80c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f80e:	4618      	mov	r0, r3
 800f810:	f001 fb60 	bl	8010ed4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800f814:	4603      	mov	r3, r0
 800f816:	4618      	mov	r0, r3
 800f818:	f7ff fdf8 	bl	800f40c <_ZNK6tflite6Tensor11is_variableEv>
 800f81c:	4603      	mov	r3, r0
 800f81e:	f083 0301 	eor.w	r3, r3, #1
 800f822:	b2db      	uxtb	r3, r3
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 800f824:	2b00      	cmp	r3, #0
 800f826:	d001      	beq.n	800f82c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x90>
 800f828:	2201      	movs	r2, #1
 800f82a:	e000      	b.n	800f82e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x92>
 800f82c:	2200      	movs	r2, #0
 800f82e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f830:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d007      	beq.n	800f848 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xac>
      current->offline_offset = offline_offsets[i];
 800f838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f83a:	009b      	lsls	r3, r3, #2
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	4413      	add	r3, r2
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f844:	611a      	str	r2, [r3, #16]
 800f846:	e003      	b.n	800f850 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xb4>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 800f848:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f84a:	f04f 32ff 	mov.w	r2, #4294967295
 800f84e:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 800f850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f852:	3301      	adds	r3, #1
 800f854:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f856:	e7aa      	b.n	800f7ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x12>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800f858:	2300      	movs	r3, #0
 800f85a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f85c:	68b8      	ldr	r0, [r7, #8]
 800f85e:	f7ff fe30 	bl	800f4c2 <_ZNK6tflite8SubGraph6inputsEv>
 800f862:	4603      	mov	r3, r0
 800f864:	4618      	mov	r0, r3
 800f866:	f7fe f9e0 	bl	800dc2a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f86a:	4602      	mov	r2, r0
 800f86c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f86e:	4293      	cmp	r3, r2
 800f870:	bf34      	ite	cc
 800f872:	2301      	movcc	r3, #1
 800f874:	2300      	movcs	r3, #0
 800f876:	b2db      	uxtb	r3, r3
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d018      	beq.n	800f8ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x112>
    const int tensor_index = subgraph->inputs()->Get(i);
 800f87c:	68b8      	ldr	r0, [r7, #8]
 800f87e:	f7ff fe20 	bl	800f4c2 <_ZNK6tflite8SubGraph6inputsEv>
 800f882:	4603      	mov	r3, r0
 800f884:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f886:	4618      	mov	r0, r3
 800f888:	f7fe f9de 	bl	800dc48 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f88c:	61b8      	str	r0, [r7, #24]
    AllocationInfo* current = &info_[tensor_index];
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6919      	ldr	r1, [r3, #16]
 800f892:	69ba      	ldr	r2, [r7, #24]
 800f894:	4613      	mov	r3, r2
 800f896:	005b      	lsls	r3, r3, #1
 800f898:	4413      	add	r3, r2
 800f89a:	00db      	lsls	r3, r3, #3
 800f89c:	440b      	add	r3, r1
 800f89e:	617b      	str	r3, [r7, #20]
    current->first_created = 0;
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 800f8a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8ac:	e7d6      	b.n	800f85c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xc0>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	657b      	str	r3, [r7, #84]	; 0x54
 800f8b2:	68b8      	ldr	r0, [r7, #8]
 800f8b4:	f7ff fe13 	bl	800f4de <_ZNK6tflite8SubGraph7outputsEv>
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7fe f9b5 	bl	800dc2a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	bf34      	ite	cc
 800f8c8:	2301      	movcc	r3, #1
 800f8ca:	2300      	movcs	r3, #0
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d021      	beq.n	800f916 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x17a>
    const int tensor_index = subgraph->outputs()->Get(i);
 800f8d2:	68b8      	ldr	r0, [r7, #8]
 800f8d4:	f7ff fe03 	bl	800f4de <_ZNK6tflite8SubGraph7outputsEv>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7fe f9b3 	bl	800dc48 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f8e2:	6238      	str	r0, [r7, #32]
    AllocationInfo* current = &info_[tensor_index];
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6919      	ldr	r1, [r3, #16]
 800f8e8:	6a3a      	ldr	r2, [r7, #32]
 800f8ea:	4613      	mov	r3, r2
 800f8ec:	005b      	lsls	r3, r3, #1
 800f8ee:	4413      	add	r3, r2
 800f8f0:	00db      	lsls	r3, r3, #3
 800f8f2:	440b      	add	r3, r1
 800f8f4:	61fb      	str	r3, [r7, #28]
    current->last_used = subgraph->operators()->size() - 1;
 800f8f6:	68b8      	ldr	r0, [r7, #8]
 800f8f8:	f7ff fdff 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	4618      	mov	r0, r3
 800f900:	f001 fb0e 	bl	8010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800f904:	4603      	mov	r3, r0
 800f906:	3b01      	subs	r3, #1
 800f908:	461a      	mov	r2, r3
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 800f90e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f910:	3301      	adds	r3, #1
 800f912:	657b      	str	r3, [r7, #84]	; 0x54
 800f914:	e7cd      	b.n	800f8b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x116>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800f916:	68b8      	ldr	r0, [r7, #8]
 800f918:	f7ff fdef 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 800f91c:	4603      	mov	r3, r0
 800f91e:	4618      	mov	r0, r3
 800f920:	f001 fafe 	bl	8010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800f924:	4603      	mov	r3, r0
 800f926:	3b01      	subs	r3, #1
 800f928:	653b      	str	r3, [r7, #80]	; 0x50
 800f92a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	db77      	blt.n	800fa20 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x284>
    const auto* op = subgraph->operators()->Get(i);
 800f930:	68b8      	ldr	r0, [r7, #8]
 800f932:	f7ff fde2 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 800f936:	4602      	mov	r2, r0
 800f938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f93a:	4619      	mov	r1, r3
 800f93c:	4610      	mov	r0, r2
 800f93e:	f001 fafd 	bl	8010f3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 800f942:	63f8      	str	r0, [r7, #60]	; 0x3c
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800f944:	2300      	movs	r3, #0
 800f946:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f948:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f94a:	f7ff fd82 	bl	800f452 <_ZNK6tflite8Operator6inputsEv>
 800f94e:	4603      	mov	r3, r0
 800f950:	4618      	mov	r0, r3
 800f952:	f7fe f96a 	bl	800dc2a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f956:	4602      	mov	r2, r0
 800f958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f95a:	4293      	cmp	r3, r2
 800f95c:	bf34      	ite	cc
 800f95e:	2301      	movcc	r3, #1
 800f960:	2300      	movcs	r3, #0
 800f962:	b2db      	uxtb	r3, r3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d022      	beq.n	800f9ae <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x212>
      const int tensor_index = op->inputs()->Get(n);
 800f968:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f96a:	f7ff fd72 	bl	800f452 <_ZNK6tflite8Operator6inputsEv>
 800f96e:	4603      	mov	r3, r0
 800f970:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f972:	4618      	mov	r0, r3
 800f974:	f7fe f968 	bl	800dc48 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f978:	6338      	str	r0, [r7, #48]	; 0x30
      AllocationInfo* current = &info_[tensor_index];
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6919      	ldr	r1, [r3, #16]
 800f97e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f980:	4613      	mov	r3, r2
 800f982:	005b      	lsls	r3, r3, #1
 800f984:	4413      	add	r3, r2
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	440b      	add	r3, r1
 800f98a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (((current->last_used == -1) || (current->last_used < i))) {
 800f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f994:	d004      	beq.n	800f9a0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x204>
 800f996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f99c:	429a      	cmp	r2, r3
 800f99e:	dd02      	ble.n	800f9a6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x20a>
        current->last_used = i;
 800f9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f9a4:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800f9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f9ac:	e7cc      	b.n	800f948 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1ac>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f9b4:	f7ff fd5b 	bl	800f46e <_ZNK6tflite8Operator7outputsEv>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fe f935 	bl	800dc2a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9c4:	4293      	cmp	r3, r2
 800f9c6:	bf34      	ite	cc
 800f9c8:	2301      	movcc	r3, #1
 800f9ca:	2300      	movcs	r3, #0
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d022      	beq.n	800fa18 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x27c>
      const int tensor_index = op->outputs()->Get(n);
 800f9d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f9d4:	f7ff fd4b 	bl	800f46e <_ZNK6tflite8Operator7outputsEv>
 800f9d8:	4603      	mov	r3, r0
 800f9da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fe f933 	bl	800dc48 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800f9e2:	63b8      	str	r0, [r7, #56]	; 0x38
      AllocationInfo* current = &info_[tensor_index];
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	6919      	ldr	r1, [r3, #16]
 800f9e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	005b      	lsls	r3, r3, #1
 800f9ee:	4413      	add	r3, r2
 800f9f0:	00db      	lsls	r3, r3, #3
 800f9f2:	440b      	add	r3, r1
 800f9f4:	637b      	str	r3, [r7, #52]	; 0x34
      if ((current->first_created == -1) || (current->first_created > i)) {
 800f9f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9f8:	689b      	ldr	r3, [r3, #8]
 800f9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9fe:	d004      	beq.n	800fa0a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x26e>
 800fa00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa06:	429a      	cmp	r2, r3
 800fa08:	da02      	bge.n	800fa10 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x274>
        current->first_created = i;
 800fa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fa0e:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 800fa10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa12:	3301      	adds	r3, #1
 800fa14:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa16:	e7cc      	b.n	800f9b2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x216>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800fa18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa1a:	3b01      	subs	r3, #1
 800fa1c:	653b      	str	r3, [r7, #80]	; 0x50
 800fa1e:	e784      	b.n	800f92a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x18e>
      }
    }
  }

  // Work out which tensors need to be allocated.
  for (size_t i = 0; i < tensor_count_; ++i) {
 800fa20:	2300      	movs	r3, #0
 800fa22:	647b      	str	r3, [r7, #68]	; 0x44
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	689b      	ldr	r3, [r3, #8]
 800fa28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d24e      	bcs.n	800facc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x330>
    AllocationInfo* current = &info_[i];
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	6919      	ldr	r1, [r3, #16]
 800fa32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fa34:	4613      	mov	r3, r2
 800fa36:	005b      	lsls	r3, r3, #1
 800fa38:	4413      	add	r3, r2
 800fa3a:	00db      	lsls	r3, r3, #3
 800fa3c:	440b      	add	r3, r1
 800fa3e:	62bb      	str	r3, [r7, #40]	; 0x28
    const bool is_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 800fa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa48:	d106      	bne.n	800fa58 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2bc>
 800fa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa52:	d001      	beq.n	800fa58 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2bc>
 800fa54:	2301      	movs	r3, #1
 800fa56:	e000      	b.n	800fa5a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2be>
 800fa58:	2300      	movs	r3, #0
    const bool is_read_only =
 800fa5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_read_only) {
 800fa5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d002      	beq.n	800fa6c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2d0>
      current->needs_allocating = false;
 800fa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa68:	2200      	movs	r2, #0
 800fa6a:	751a      	strb	r2, [r3, #20]
    }
    const bool has_partial_lifetime =
        !is_read_only &&
 800fa6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa70:	f083 0301 	eor.w	r3, r3, #1
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d00b      	beq.n	800fa92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f6>
        ((current->first_created == -1) || (current->last_used == -1));
 800fa7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa7c:	689b      	ldr	r3, [r3, #8]
        !is_read_only &&
 800fa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa82:	d004      	beq.n	800fa8e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f2>
        ((current->first_created == -1) || (current->last_used == -1));
 800fa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa8c:	d101      	bne.n	800fa92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f6>
        !is_read_only &&
 800fa8e:	2301      	movs	r3, #1
 800fa90:	e000      	b.n	800fa94 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f8>
 800fa92:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 800fa94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if (has_partial_lifetime && current->needs_allocating) {
 800fa98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d011      	beq.n	800fac4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x328>
 800faa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faa2:	7d1b      	ldrb	r3, [r3, #20]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d00d      	beq.n	800fac4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x328>
      TF_LITE_REPORT_ERROR(
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	6818      	ldr	r0, [r3, #0]
 800faac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800faae:	689a      	ldr	r2, [r3, #8]
 800fab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	4613      	mov	r3, r2
 800fab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800faba:	4907      	ldr	r1, [pc, #28]	; (800fad8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x33c>)
 800fabc:	f7fd fd56 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 800fac0:	2301      	movs	r3, #1
 800fac2:	e004      	b.n	800face <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x332>
  for (size_t i = 0; i < tensor_count_; ++i) {
 800fac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fac6:	3301      	adds	r3, #1
 800fac8:	647b      	str	r3, [r7, #68]	; 0x44
 800faca:	e7ab      	b.n	800fa24 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x288>
    }
  }
  return kTfLiteOk;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3760      	adds	r7, #96	; 0x60
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop
 800fad8:	0801dfd8 	.word	0x0801dfd8

0800fadc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 800fadc:	b580      	push	{r7, lr}
 800fade:	b08c      	sub	sp, #48	; 0x30
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 800fae8:	68b8      	ldr	r0, [r7, #8]
 800faea:	f7ff fd69 	bl	800f5c0 <_ZNK6tflite5Model8metadataEv>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	bf14      	ite	ne
 800faf4:	2301      	movne	r3, #1
 800faf6:	2300      	moveq	r3, #0
 800faf8:	b2db      	uxtb	r3, r3
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d060      	beq.n	800fbc0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800fafe:	2300      	movs	r3, #0
 800fb00:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb02:	68b8      	ldr	r0, [r7, #8]
 800fb04:	f7ff fd5c 	bl	800f5c0 <_ZNK6tflite5Model8metadataEv>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f001 fad8 	bl	80110c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 800fb10:	4602      	mov	r2, r0
 800fb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb14:	4293      	cmp	r3, r2
 800fb16:	bf34      	ite	cc
 800fb18:	2301      	movcc	r3, #1
 800fb1a:	2300      	movcs	r3, #0
 800fb1c:	b2db      	uxtb	r3, r3
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d04e      	beq.n	800fbc0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 800fb22:	68b8      	ldr	r0, [r7, #8]
 800fb24:	f7ff fd4c 	bl	800f5c0 <_ZNK6tflite5Model8metadataEv>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb2c:	4618      	mov	r0, r3
 800fb2e:	f001 fad5 	bl	80110dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 800fb32:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800fb34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb36:	f7ff fcfc 	bl	800f532 <_ZNK6tflite8Metadata4nameEv>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fe fd64 	bl	800e60a <_ZNK11flatbuffers6String5c_strEv>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2217      	movs	r2, #23
 800fb46:	4921      	ldr	r1, [pc, #132]	; (800fbcc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f009 ffc5 	bl	8019ad8 <strncmp>
 800fb4e:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	bf0c      	ite	eq
 800fb54:	2301      	moveq	r3, #1
 800fb56:	2300      	movne	r3, #0
 800fb58:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d02c      	beq.n	800fbb8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 800fb5e:	68b8      	ldr	r0, [r7, #8]
 800fb60:	f7ff fd20 	bl	800f5a4 <_ZNK6tflite5Model7buffersEv>
 800fb64:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 800fb66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb68:	f7ff fcf1 	bl	800f54e <_ZNK6tflite8Metadata6bufferEv>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	4619      	mov	r1, r3
 800fb70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fb72:	f001 fae7 	bl	8011144 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800fb76:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 800fb78:	6a38      	ldr	r0, [r7, #32]
 800fb7a:	f7ff fccc 	bl	800f516 <_ZNK6tflite6Buffer4dataEv>
 800fb7e:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800fb80:	69f8      	ldr	r0, [r7, #28]
 800fb82:	f001 faed 	bl	8011160 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800fb86:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 800fb88:	69bb      	ldr	r3, [r7, #24]
 800fb8a:	3308      	adds	r3, #8
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800fb90:	69bb      	ldr	r3, [r7, #24]
 800fb92:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	697a      	ldr	r2, [r7, #20]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d009      	beq.n	800fbb8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	6818      	ldr	r0, [r3, #0]
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	689b      	ldr	r3, [r3, #8]
 800fbac:	697a      	ldr	r2, [r7, #20]
 800fbae:	4908      	ldr	r1, [pc, #32]	; (800fbd0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 800fbb0:	f7fd fcdc 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 800fbb4:	2301      	movs	r3, #1
 800fbb6:	e004      	b.n	800fbc2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800fbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbba:	3301      	adds	r3, #1
 800fbbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbbe:	e7a0      	b.n	800fb02 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 800fbc0:	2300      	movs	r3, #0
}
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	3730      	adds	r7, #48	; 0x30
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	bd80      	pop	{r7, pc}
 800fbca:	bf00      	nop
 800fbcc:	0803dd18 	.word	0x0803dd18
 800fbd0:	0801df48 	.word	0x0801df48

0800fbd4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferHandle* buffer_handles) {
 800fbd4:	b480      	push	{r7}
 800fbd6:	b087      	sub	sp, #28
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	617b      	str	r3, [r7, #20]
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	689a      	ldr	r2, [r3, #8]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	4413      	add	r3, r2
 800fbee:	697a      	ldr	r2, [r7, #20]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d22e      	bcs.n	800fc52 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x7e>
    AllocationInfo* current = &info_[i];
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6919      	ldr	r1, [r3, #16]
 800fbf8:	697a      	ldr	r2, [r7, #20]
 800fbfa:	4613      	mov	r3, r2
 800fbfc:	005b      	lsls	r3, r3, #1
 800fbfe:	4413      	add	r3, r2
 800fc00:	00db      	lsls	r3, r3, #3
 800fc02:	440b      	add	r3, r1
 800fc04:	613b      	str	r3, [r7, #16]
    internal::ScratchBufferHandle* handle =
        &(buffer_handles[i - tensor_count_]);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	697a      	ldr	r2, [r7, #20]
 800fc0c:	1ad2      	subs	r2, r2, r3
 800fc0e:	4613      	mov	r3, r2
 800fc10:	005b      	lsls	r3, r3, #1
 800fc12:	4413      	add	r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	461a      	mov	r2, r3
    internal::ScratchBufferHandle* handle =
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	60fb      	str	r3, [r7, #12]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
 800fc1e:	68fa      	ldr	r2, [r7, #12]
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	605a      	str	r2, [r3, #4]
    current->bytes = handle->bytes;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	685a      	ldr	r2, [r3, #4]
 800fc28:	693b      	ldr	r3, [r7, #16]
 800fc2a:	601a      	str	r2, [r3, #0]
    current->first_created = handle->node_idx;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	689a      	ldr	r2, [r3, #8]
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	609a      	str	r2, [r3, #8]
    current->last_used = handle->node_idx;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	689a      	ldr	r2, [r3, #8]
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	60da      	str	r2, [r3, #12]
    current->needs_allocating = true;
 800fc3c:	693b      	ldr	r3, [r7, #16]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	751a      	strb	r2, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	f04f 32ff 	mov.w	r2, #4294967295
 800fc48:	611a      	str	r2, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	617b      	str	r3, [r7, #20]
 800fc50:	e7c8      	b.n	800fbe4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x10>
  }
  return kTfLiteOk;
 800fc52:	2300      	movs	r3, #0
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	371c      	adds	r7, #28
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr

0800fc60 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800fc60:	b590      	push	{r4, r7, lr}
 800fc62:	b08b      	sub	sp, #44	; 0x2c
 800fc64:	af02      	add	r7, sp, #8
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	607a      	str	r2, [r7, #4]
 800fc6c:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800fc6e:	2300      	movs	r3, #0
 800fc70:	61fb      	str	r3, [r7, #28]
 800fc72:	69fa      	ldr	r2, [r7, #28]
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	429a      	cmp	r2, r3
 800fc78:	d247      	bcs.n	800fd0a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 800fc7a:	69fa      	ldr	r2, [r7, #28]
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	005b      	lsls	r3, r3, #1
 800fc80:	4413      	add	r3, r2
 800fc82:	00db      	lsls	r3, r3, #3
 800fc84:	461a      	mov	r2, r3
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4413      	add	r3, r2
 800fc8a:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 800fc8c:	69bb      	ldr	r3, [r7, #24]
 800fc8e:	7d1b      	ldrb	r3, [r3, #20]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d036      	beq.n	800fd02 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800fc94:	69bb      	ldr	r3, [r7, #24]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2110      	movs	r1, #16
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7ff fa95 	bl	800f1ca <_ZN6tflite11AlignSizeUpEjj>
 800fca0:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	691b      	ldr	r3, [r3, #16]
 800fca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcaa:	d114      	bne.n	800fcd6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3308      	adds	r3, #8
 800fcb2:	681c      	ldr	r4, [r3, #0]
 800fcb4:	697a      	ldr	r2, [r7, #20]
 800fcb6:	69bb      	ldr	r3, [r7, #24]
 800fcb8:	6899      	ldr	r1, [r3, #8]
 800fcba:	69bb      	ldr	r3, [r7, #24]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	9300      	str	r3, [sp, #0]
 800fcc0:	460b      	mov	r3, r1
 800fcc2:	68f9      	ldr	r1, [r7, #12]
 800fcc4:	68b8      	ldr	r0, [r7, #8]
 800fcc6:	47a0      	blx	r4
 800fcc8:	4603      	mov	r3, r0
 800fcca:	74bb      	strb	r3, [r7, #18]
 800fccc:	7cbb      	ldrb	r3, [r7, #18]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d017      	beq.n	800fd02 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800fcd2:	7cbb      	ldrb	r3, [r7, #18]
 800fcd4:	e01a      	b.n	800fd0c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800fcd6:	6979      	ldr	r1, [r7, #20]
 800fcd8:	69bb      	ldr	r3, [r7, #24]
 800fcda:	6898      	ldr	r0, [r3, #8]
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	69ba      	ldr	r2, [r7, #24]
 800fce2:	6912      	ldr	r2, [r2, #16]
 800fce4:	9201      	str	r2, [sp, #4]
 800fce6:	9300      	str	r3, [sp, #0]
 800fce8:	4603      	mov	r3, r0
 800fcea:	460a      	mov	r2, r1
 800fcec:	68f9      	ldr	r1, [r7, #12]
 800fcee:	68b8      	ldr	r0, [r7, #8]
 800fcf0:	f006 f8bc 	bl	8015e6c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	74fb      	strb	r3, [r7, #19]
 800fcf8:	7cfb      	ldrb	r3, [r7, #19]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d001      	beq.n	800fd02 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 800fcfe:	7cfb      	ldrb	r3, [r7, #19]
 800fd00:	e004      	b.n	800fd0c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	3301      	adds	r3, #1
 800fd06:	61fb      	str	r3, [r7, #28]
 800fd08:	e7b3      	b.n	800fc72 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800fd0a:	2300      	movs	r3, #0
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3724      	adds	r7, #36	; 0x24
 800fd10:	46bd      	mov	sp, r7
 800fd12:	bd90      	pop	{r4, r7, pc}

0800fd14 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 800fd14:	b590      	push	{r4, r7, lr}
 800fd16:	b08b      	sub	sp, #44	; 0x2c
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	60f8      	str	r0, [r7, #12]
 800fd1c:	60b9      	str	r1, [r7, #8]
 800fd1e:	607a      	str	r2, [r7, #4]
 800fd20:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 800fd22:	2300      	movs	r3, #0
 800fd24:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800fd26:	2300      	movs	r3, #0
 800fd28:	623b      	str	r3, [r7, #32]
 800fd2a:	6a3a      	ldr	r2, [r7, #32]
 800fd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2e:	429a      	cmp	r2, r3
 800fd30:	d22e      	bcs.n	800fd90 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 800fd32:	6a3a      	ldr	r2, [r7, #32]
 800fd34:	4613      	mov	r3, r2
 800fd36:	005b      	lsls	r3, r3, #1
 800fd38:	4413      	add	r3, r2
 800fd3a:	00db      	lsls	r3, r3, #3
 800fd3c:	461a      	mov	r2, r3
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	4413      	add	r3, r2
 800fd42:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	7d1b      	ldrb	r3, [r3, #20]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d01d      	beq.n	800fd88 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 800fd4c:	f04f 33ff 	mov.w	r3, #4294967295
 800fd50:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	3314      	adds	r3, #20
 800fd58:	681c      	ldr	r4, [r3, #0]
 800fd5a:	f107 0314 	add.w	r3, r7, #20
 800fd5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd60:	68f9      	ldr	r1, [r7, #12]
 800fd62:	68b8      	ldr	r0, [r7, #8]
 800fd64:	47a0      	blx	r4
 800fd66:	4603      	mov	r3, r0
 800fd68:	76fb      	strb	r3, [r7, #27]
 800fd6a:	7efb      	ldrb	r3, [r7, #27]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d001      	beq.n	800fd74 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 800fd70:	7efb      	ldrb	r3, [r7, #27]
 800fd72:	e00e      	b.n	800fd92 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	4619      	mov	r1, r3
 800fd78:	69fb      	ldr	r3, [r7, #28]
 800fd7a:	685b      	ldr	r3, [r3, #4]
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	440a      	add	r2, r1
 800fd80:	601a      	str	r2, [r3, #0]
      ++planner_index;
 800fd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd84:	3301      	adds	r3, #1
 800fd86:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800fd88:	6a3b      	ldr	r3, [r7, #32]
 800fd8a:	3301      	adds	r3, #1
 800fd8c:	623b      	str	r3, [r7, #32]
 800fd8e:	e7cc      	b.n	800fd2a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 800fd90:	2300      	movs	r3, #0
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	372c      	adds	r7, #44	; 0x2c
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd90      	pop	{r4, r7, pc}
	...

0800fd9c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
}

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 800fd9c:	b590      	push	{r4, r7, lr}
 800fd9e:	b091      	sub	sp, #68	; 0x44
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	60b9      	str	r1, [r7, #8]
 800fda6:	607a      	str	r2, [r7, #4]
 800fda8:	603b      	str	r3, [r7, #0]
  *result = {};
 800fdaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdac:	4618      	mov	r0, r3
 800fdae:	2340      	movs	r3, #64	; 0x40
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	2100      	movs	r1, #0
 800fdb4:	f009 fab6 	bl	8019324 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800fdb8:	68b8      	ldr	r0, [r7, #8]
 800fdba:	f7ff f9c7 	bl	800f14c <_ZNK6tflite6Tensor4typeEv>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdc4:	683a      	ldr	r2, [r7, #0]
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	f7fd fd22 	bl	800d810 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800fdd2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d002      	beq.n	800fde0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x44>
 800fdda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fdde:	e125      	b.n	801002c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 800fde0:	68b8      	ldr	r0, [r7, #8]
 800fde2:	f7ff fb13 	bl	800f40c <_ZNK6tflite6Tensor11is_variableEv>
 800fde6:	4603      	mov	r3, r0
 800fde8:	461a      	mov	r2, r3
 800fdea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  // in memory. We'll check to see if there's a serialized buffer (pretty much
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800fdf0:	68b8      	ldr	r0, [r7, #8]
 800fdf2:	f7ff faee 	bl	800f3d2 <_ZNK6tflite6Tensor6bufferEv>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f001 f9a2 	bl	8011144 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800fe00:	6378      	str	r0, [r7, #52]	; 0x34
 800fe02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d01a      	beq.n	800fe3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800fe08:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fe0a:	f7ff fb84 	bl	800f516 <_ZNK6tflite6Buffer4dataEv>
 800fe0e:	6338      	str	r0, [r7, #48]	; 0x30
 800fe10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d013      	beq.n	800fe3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800fe16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe18:	f000 ffd4 	bl	8010dc4 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	bf14      	ite	ne
 800fe22:	2301      	movne	r3, #1
 800fe24:	2300      	moveq	r3, #0
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d008      	beq.n	800fe3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        result->data.data =
            const_cast<void*>(static_cast<const void*>(array->data()));
 800fe2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe2e:	f001 f997 	bl	8011160 <_ZNK11flatbuffers6VectorIhE4dataEv>
 800fe32:	4602      	mov	r2, r0
        result->data.data =
 800fe34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe36:	605a      	str	r2, [r3, #4]
        // We set the data from a serialized buffer, so record tha.
        result->allocation_type = kTfLiteMmapRo;
 800fe38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe3a:	2201      	movs	r2, #1
 800fe3c:	751a      	strb	r2, [r3, #20]
    // it less ambiguous.
  }

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800fe3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d102      	bne.n	800fe4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb0>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 800fe46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe48:	2202      	movs	r2, #2
 800fe4a:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 800fe4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe4e:	f103 0118 	add.w	r1, r3, #24
 800fe52:	f107 0214 	add.w	r2, r7, #20
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	68b8      	ldr	r0, [r7, #8]
 800fe5a:	f7ff fa21 	bl	800f2a0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fe64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d002      	beq.n	800fe72 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd6>
 800fe6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe70:	e0dc      	b.n	801002c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 800fe72:	68b8      	ldr	r0, [r7, #8]
 800fe74:	f7ff f95c 	bl	800f130 <_ZNK6tflite6Tensor5shapeEv>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	bf0c      	ite	eq
 800fe7e:	2301      	moveq	r3, #1
 800fe80:	2300      	movne	r3, #0
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d003      	beq.n	800fe90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf4>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800fe88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe8a:	4a6a      	ldr	r2, [pc, #424]	; (8010034 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x298>)
 800fe8c:	609a      	str	r2, [r3, #8]
 800fe8e:	e013      	b.n	800feb8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800fe90:	68b8      	ldr	r0, [r7, #8]
 800fe92:	f7ff f94d 	bl	800f130 <_ZNK6tflite6Tensor5shapeEv>
 800fe96:	4602      	mov	r2, r0
 800fe98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe9a:	3308      	adds	r3, #8
 800fe9c:	6839      	ldr	r1, [r7, #0]
 800fe9e:	68f8      	ldr	r0, [r7, #12]
 800fea0:	f001 f96a 	bl	8011178 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800fea4:	4603      	mov	r3, r0
 800fea6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800feaa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d002      	beq.n	800feb8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
 800feb2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800feb6:	e0b9      	b.n	801002c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800feb8:	68b8      	ldr	r0, [r7, #8]
 800feba:	f7ff fa99 	bl	800f3f0 <_ZNK6tflite6Tensor12quantizationEv>
 800febe:	62b8      	str	r0, [r7, #40]	; 0x28
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 800fec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d021      	beq.n	800ff0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
  if (src_quantization && src_quantization->scale() &&
 800fec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fec8:	f7ff fa58 	bl	800f37c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800fecc:	4603      	mov	r3, r0
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d01b      	beq.n	800ff0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->scale()->size() > 0) &&
 800fed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fed4:	f7ff fa52 	bl	800f37c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800fed8:	4603      	mov	r3, r0
 800feda:	4618      	mov	r0, r3
 800fedc:	f000 ff80 	bl	8010de0 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800fee0:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d011      	beq.n	800ff0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      src_quantization->zero_point() &&
 800fee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fee8:	f7ff fa56 	bl	800f398 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800feec:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d00b      	beq.n	800ff0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->zero_point()->size() > 0)) {
 800fef2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fef4:	f7ff fa50 	bl	800f398 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800fef8:	4603      	mov	r3, r0
 800fefa:	4618      	mov	r0, r3
 800fefc:	f000 ffa6 	bl	8010e4c <_ZNK11flatbuffers6VectorIxE4sizeEv>
 800ff00:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d001      	beq.n	800ff0a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
 800ff06:	2301      	movs	r3, #1
 800ff08:	e000      	b.n	800ff0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
 800ff0a:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f000 808c 	beq.w	801002a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x28e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 800ff12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff14:	f7ff fa32 	bl	800f37c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2100      	movs	r1, #0
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f000 ff6d 	bl	8010dfc <_ZNK11flatbuffers6VectorIfE3GetEm>
 800ff22:	eef0 7a40 	vmov.f32	s15, s0
 800ff26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff28:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 800ff2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff2e:	f7ff fa33 	bl	800f398 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2100      	movs	r1, #0
 800ff36:	4618      	mov	r0, r3
 800ff38:	f000 ff96 	bl	8010e68 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	460c      	mov	r4, r1
    result->params.zero_point =
 800ff40:	461a      	mov	r2, r3
 800ff42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff44:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 800ff46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff48:	f7ff fa18 	bl	800f37c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f000 ff46 	bl	8010de0 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 800ff54:	4603      	mov	r3, r0
 800ff56:	627b      	str	r3, [r7, #36]	; 0x24
    TfLiteAffineQuantization* quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
                                        alignof(TfLiteAffineQuantization)));
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	330c      	adds	r3, #12
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2204      	movs	r2, #4
 800ff62:	210c      	movs	r1, #12
 800ff64:	68f8      	ldr	r0, [r7, #12]
 800ff66:	4798      	blx	r3
 800ff68:	6238      	str	r0, [r7, #32]
    if (quantization == nullptr) {
 800ff6a:	6a3b      	ldr	r3, [r7, #32]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d105      	bne.n	800ff7c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1e0>
      TF_LITE_REPORT_ERROR(error_reporter,
 800ff70:	4931      	ldr	r1, [pc, #196]	; (8010038 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29c>)
 800ff72:	6838      	ldr	r0, [r7, #0]
 800ff74:	f7fd fafa 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e057      	b.n	801002c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	330c      	adds	r3, #12
 800ff82:	681c      	ldr	r4, [r3, #0]
 800ff84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff86:	f7fd fa86 	bl	800d496 <TfLiteIntArrayGetSizeInBytes>
 800ff8a:	4603      	mov	r3, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 800ff8c:	2204      	movs	r2, #4
 800ff8e:	4619      	mov	r1, r3
 800ff90:	68f8      	ldr	r0, [r7, #12]
 800ff92:	47a0      	blx	r4
 800ff94:	4602      	mov	r2, r0
    quantization->zero_point =
 800ff96:	6a3b      	ldr	r3, [r7, #32]
 800ff98:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 800ff9a:	6a3b      	ldr	r3, [r7, #32]
 800ff9c:	685b      	ldr	r3, [r3, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d105      	bne.n	800ffae <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x212>
      TF_LITE_REPORT_ERROR(error_reporter,
 800ffa2:	4926      	ldr	r1, [pc, #152]	; (801003c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>)
 800ffa4:	6838      	ldr	r0, [r7, #0]
 800ffa6:	f7fd fae1 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	e03e      	b.n	801002c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 800ffae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffb0:	f7ff f9e4 	bl	800f37c <_ZNK6tflite22QuantizationParameters5scaleEv>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	6a3b      	ldr	r3, [r7, #32]
 800ffb8:	6839      	ldr	r1, [r7, #0]
 800ffba:	68f8      	ldr	r0, [r7, #12]
 800ffbc:	f001 f8f5 	bl	80111aa <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	77fb      	strb	r3, [r7, #31]
 800ffc4:	7ffb      	ldrb	r3, [r7, #31]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d001      	beq.n	800ffce <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
 800ffca:	7ffb      	ldrb	r3, [r7, #31]
 800ffcc:	e02e      	b.n	801002c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 800ffce:	6a3b      	ldr	r3, [r7, #32]
 800ffd0:	685b      	ldr	r3, [r3, #4]
 800ffd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffd4:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800ffd6:	6a3b      	ldr	r3, [r7, #32]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	3304      	adds	r3, #4
 800ffdc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < channels; i++) {
 800ffde:	2300      	movs	r3, #0
 800ffe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ffe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ffe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	da12      	bge.n	8010010 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x274>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 800ffea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffec:	f7ff f9d4 	bl	800f398 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800fff0:	4602      	mov	r2, r0
 800fff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fff4:	4619      	mov	r1, r3
 800fff6:	4610      	mov	r0, r2
 800fff8:	f000 ff36 	bl	8010e68 <_ZNK11flatbuffers6VectorIxE3GetEm>
 800fffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	69ba      	ldr	r2, [r7, #24]
 8010002:	4413      	add	r3, r2
 8010004:	4602      	mov	r2, r0
 8010006:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8010008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801000a:	3301      	adds	r3, #1
 801000c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801000e:	e7e8      	b.n	800ffe2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x246>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8010010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010012:	f7ff f9cf 	bl	800f3b4 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8010016:	4602      	mov	r2, r0
 8010018:	6a3b      	ldr	r3, [r7, #32]
 801001a:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 801001c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801001e:	2201      	movs	r2, #1
 8010020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8010024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010026:	6a3a      	ldr	r2, [r7, #32]
 8010028:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 801002a:	2300      	movs	r3, #0
}
 801002c:	4618      	mov	r0, r3
 801002e:	3744      	adds	r7, #68	; 0x44
 8010030:	46bd      	mov	sp, r7
 8010032:	bd90      	pop	{r4, r7, pc}
 8010034:	0803dd30 	.word	0x0803dd30
 8010038:	0801e03c 	.word	0x0801e03c
 801003c:	0801e06c 	.word	0x0801e06c

08010040 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8010040:	b480      	push	{r7}
 8010042:	b085      	sub	sp, #20
 8010044:	af00      	add	r7, sp, #0
 8010046:	60f8      	str	r0, [r7, #12]
 8010048:	60b9      	str	r1, [r7, #8]
 801004a:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 801004c:	4a0c      	ldr	r2, [pc, #48]	; (8010080 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	601a      	str	r2, [r3, #0]
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	68ba      	ldr	r2, [r7, #8]
 8010056:	605a      	str	r2, [r3, #4]
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	609a      	str	r2, [r3, #8]
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	2200      	movs	r2, #0
 8010062:	731a      	strb	r2, [r3, #12]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2200      	movs	r2, #0
 8010068:	611a      	str	r2, [r3, #16]
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	2200      	movs	r2, #0
 801006e:	615a      	str	r2, [r3, #20]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	4618      	mov	r0, r3
 8010074:	3714      	adds	r7, #20
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	0803dd54 	.word	0x0803dd54

08010084 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8010084:	b480      	push	{r7}
 8010086:	b083      	sub	sp, #12
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	4a04      	ldr	r2, [pc, #16]	; (80100a0 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	601a      	str	r2, [r3, #0]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4618      	mov	r0, r3
 8010096:	370c      	adds	r7, #12
 8010098:	46bd      	mov	sp, r7
 801009a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009e:	4770      	bx	lr
 80100a0:	0803dd54 	.word	0x0803dd54

080100a4 <_ZN6tflite14MicroAllocatorD0Ev>:
 80100a4:	b580      	push	{r7, lr}
 80100a6:	b082      	sub	sp, #8
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f7ff ffe9 	bl	8010084 <_ZN6tflite14MicroAllocatorD1Ev>
 80100b2:	2118      	movs	r1, #24
 80100b4:	6878      	ldr	r0, [r7, #4]
 80100b6:	f006 f968 	bl	801638a <_ZdlPvj>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	4618      	mov	r0, r3
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}

080100c4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b086      	sub	sp, #24
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 80100d0:	2110      	movs	r1, #16
 80100d2:	68f8      	ldr	r0, [r7, #12]
 80100d4:	f7ff f84a 	bl	800f16c <_ZN6tflite14AlignPointerUpEPhj>
 80100d8:	6178      	str	r0, [r7, #20]
  if (aligned_arena != tensor_arena) {
 80100da:	697a      	ldr	r2, [r7, #20]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d007      	beq.n	80100f2 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x2e>
    TF_LITE_REPORT_ERROR(
 80100e2:	697a      	ldr	r2, [r7, #20]
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	461a      	mov	r2, r3
 80100ea:	490d      	ldr	r1, [pc, #52]	; (8010120 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x5c>)
 80100ec:	6878      	ldr	r0, [r7, #4]
 80100ee:	f7fd fa3d 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "%d bytes lost due to alignment. To avoid this loss, please make sure "
        "the tensor_arena is 16 bytes aligned.",
        aligned_arena - tensor_arena);
  }
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	4413      	add	r3, r2
 80100f8:	461a      	mov	r2, r3
 80100fa:	697b      	ldr	r3, [r7, #20]
 80100fc:	1ad3      	subs	r3, r2, r3
 80100fe:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8010100:	693a      	ldr	r2, [r7, #16]
 8010102:	6979      	ldr	r1, [r7, #20]
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f002 fa73 	bl	80125f0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 801010a:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
 801010c:	6879      	ldr	r1, [r7, #4]
 801010e:	4618      	mov	r0, r3
 8010110:	f000 f808 	bl	8010124 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8010114:	4603      	mov	r3, r0
}
 8010116:	4618      	mov	r0, r3
 8010118:	3718      	adds	r7, #24
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}
 801011e:	bf00      	nop
 8010120:	0801e09c 	.word	0x0801e09c

08010124 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8010124:	b590      	push	{r4, r7, lr}
 8010126:	b085      	sub	sp, #20
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d101      	bne.n	8010138 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8010134:	f008 ffdf 	bl	80190f6 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d101      	bne.n	8010142 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 801013e:	f008 ffda 	bl	80190f6 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	330c      	adds	r3, #12
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2204      	movs	r2, #4
 801014c:	2118      	movs	r1, #24
 801014e:	6878      	ldr	r0, [r7, #4]
 8010150:	4798      	blx	r3
 8010152:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	4619      	mov	r1, r3
 8010158:	2018      	movs	r0, #24
 801015a:	f7f0 ff76 	bl	800104a <_ZnwjPv>
 801015e:	4604      	mov	r4, r0
 8010160:	2c00      	cmp	r4, #0
 8010162:	d006      	beq.n	8010172 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x4e>
 8010164:	683a      	ldr	r2, [r7, #0]
 8010166:	6879      	ldr	r1, [r7, #4]
 8010168:	4620      	mov	r0, r4
 801016a:	f7ff ff69 	bl	8010040 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 801016e:	4623      	mov	r3, r4
 8010170:	e000      	b.n	8010174 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x50>
 8010172:	4623      	mov	r3, r4
 8010174:	60bb      	str	r3, [r7, #8]
  return allocator;
 8010176:	68bb      	ldr	r3, [r7, #8]
}
 8010178:	4618      	mov	r0, r3
 801017a:	3714      	adds	r7, #20
 801017c:	46bd      	mov	sp, r7
 801017e:	bd90      	pop	{r4, r7, pc}

08010180 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, TfLiteContext* context,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations) {
 8010180:	b590      	push	{r4, r7, lr}
 8010182:	b089      	sub	sp, #36	; 0x24
 8010184:	af02      	add	r7, sp, #8
 8010186:	60f8      	str	r0, [r7, #12]
 8010188:	60b9      	str	r1, [r7, #8]
 801018a:	607a      	str	r2, [r7, #4]
 801018c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d101      	bne.n	8010198 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x18>
 8010194:	f008 ffaf 	bl	80190f6 <abort>
  TFLITE_DCHECK(context != nullptr);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d101      	bne.n	80101a2 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x22>
 801019e:	f008 ffaa 	bl	80190f6 <abort>

  if (model_is_allocating_) {
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	7b1b      	ldrb	r3, [r3, #12]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d007      	beq.n	80101ba <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	689b      	ldr	r3, [r3, #8]
 80101ae:	4923      	ldr	r1, [pc, #140]	; (801023c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xbc>)
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fd f9db 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 80101b6:	2301      	movs	r3, #1
 80101b8:	e03c      	b.n	8010234 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80101ba:	68b9      	ldr	r1, [r7, #8]
 80101bc:	68f8      	ldr	r0, [r7, #12]
 80101be:	f000 fbe1 	bl	8010984 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80101c2:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d101      	bne.n	80101ce <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x4e>
 80101ca:	f008 ff94 	bl	80190f6 <abort>
  model_is_allocating_ = true;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2201      	movs	r2, #1
 80101d2:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	68b9      	ldr	r1, [r7, #8]
 80101da:	68f8      	ldr	r0, [r7, #12]
 80101dc:	f000 fba6 	bl	801092c <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>
 80101e0:	4603      	mov	r3, r0
 80101e2:	74fb      	strb	r3, [r7, #19]
 80101e4:	7cfb      	ldrb	r3, [r7, #19]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d001      	beq.n	80101ee <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x6e>
 80101ea:	7cfb      	ldrb	r3, [r7, #19]
 80101ec:	e022      	b.n	8010234 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
      InitGraphAndContextTensorData(model, context, subgraph));
  TF_LITE_ENSURE_STATUS(
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	3310      	adds	r3, #16
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101f8:	6979      	ldr	r1, [r7, #20]
 80101fa:	68f8      	ldr	r0, [r7, #12]
 80101fc:	4798      	blx	r3
 80101fe:	4603      	mov	r3, r0
 8010200:	74bb      	strb	r3, [r7, #18]
 8010202:	7cbb      	ldrb	r3, [r7, #18]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d001      	beq.n	801020c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x8c>
 8010208:	7cbb      	ldrb	r3, [r7, #18]
 801020a:	e013      	b.n	8010234 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
      AllocateNodeAndRegistrations(subgraph, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	3314      	adds	r3, #20
 8010212:	681c      	ldr	r4, [r3, #0]
 8010214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	697a      	ldr	r2, [r7, #20]
 801021e:	68b9      	ldr	r1, [r7, #8]
 8010220:	68f8      	ldr	r0, [r7, #12]
 8010222:	47a0      	blx	r4
 8010224:	4603      	mov	r3, r0
 8010226:	747b      	strb	r3, [r7, #17]
 8010228:	7c7b      	ldrb	r3, [r7, #17]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d001      	beq.n	8010232 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb2>
 801022e:	7c7b      	ldrb	r3, [r7, #17]
 8010230:	e000      	b.n	8010234 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
      model, subgraph, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 8010232:	2300      	movs	r3, #0
}
 8010234:	4618      	mov	r0, r3
 8010236:	371c      	adds	r7, #28
 8010238:	46bd      	mov	sp, r7
 801023a:	bd90      	pop	{r4, r7, pc}
 801023c:	0801e108 	.word	0x0801e108

08010240 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:

TfLiteStatus MicroAllocator::FinishModelAllocation(const Model* model,
                                                   TfLiteContext* context) {
 8010240:	b590      	push	{r4, r7, lr}
 8010242:	b087      	sub	sp, #28
 8010244:	af00      	add	r7, sp, #0
 8010246:	60f8      	str	r0, [r7, #12]
 8010248:	60b9      	str	r1, [r7, #8]
 801024a:	607a      	str	r2, [r7, #4]
  if (!model_is_allocating_) {
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	7b1b      	ldrb	r3, [r3, #12]
 8010250:	f083 0301 	eor.w	r3, r3, #1
 8010254:	b2db      	uxtb	r3, r3
 8010256:	2b00      	cmp	r3, #0
 8010258:	d007      	beq.n	801026a <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	689b      	ldr	r3, [r3, #8]
 801025e:	491b      	ldr	r1, [pc, #108]	; (80102cc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x8c>)
 8010260:	4618      	mov	r0, r3
 8010262:	f7fd f983 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8010266:	2301      	movs	r3, #1
 8010268:	e02c      	b.n	80102c4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 801026a:	68b9      	ldr	r1, [r7, #8]
 801026c:	68f8      	ldr	r0, [r7, #12]
 801026e:	f000 fb89 	bl	8010984 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8010272:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8010274:	697b      	ldr	r3, [r7, #20]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d101      	bne.n	801027e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x3e>
 801027a:	f008 ff3c 	bl	80190f6 <abort>

  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	681b      	ldr	r3, [r3, #0]
 8010282:	331c      	adds	r3, #28
 8010284:	681c      	ldr	r4, [r3, #0]
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	68b9      	ldr	r1, [r7, #8]
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	47a0      	blx	r4
 8010290:	4603      	mov	r3, r0
 8010292:	74fb      	strb	r3, [r7, #19]
 8010294:	7cfb      	ldrb	r3, [r7, #19]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d001      	beq.n	801029e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x5e>
 801029a:	7cfb      	ldrb	r3, [r7, #19]
 801029c:	e012      	b.n	80102c4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	3318      	adds	r3, #24
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	697a      	ldr	r2, [r7, #20]
 80102a8:	6879      	ldr	r1, [r7, #4]
 80102aa:	68f8      	ldr	r0, [r7, #12]
 80102ac:	4798      	blx	r3
 80102ae:	4603      	mov	r3, r0
 80102b0:	74bb      	strb	r3, [r7, #18]
 80102b2:	7cbb      	ldrb	r3, [r7, #18]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d001      	beq.n	80102bc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x7c>
 80102b8:	7cbb      	ldrb	r3, [r7, #18]
 80102ba:	e003      	b.n	80102c4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>

  model_is_allocating_ = false;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	2200      	movs	r2, #0
 80102c0:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	371c      	adds	r7, #28
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd90      	pop	{r4, r7, pc}
 80102cc:	0801e160 	.word	0x0801e160

080102d0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b086      	sub	sp, #24
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	60f8      	str	r0, [r7, #12]
 80102d8:	60b9      	str	r1, [r7, #8]
 80102da:	607a      	str	r2, [r7, #4]
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	6858      	ldr	r0, [r3, #4]
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	685b      	ldr	r3, [r3, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	330c      	adds	r3, #12
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	2210      	movs	r2, #16
 80102ec:	68b9      	ldr	r1, [r7, #8]
 80102ee:	4798      	blx	r3
 80102f0:	6178      	str	r0, [r7, #20]
  if (data == nullptr) {
 80102f2:	697b      	ldr	r3, [r7, #20]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d108      	bne.n	801030a <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	689b      	ldr	r3, [r3, #8]
 80102fc:	68ba      	ldr	r2, [r7, #8]
 80102fe:	4907      	ldr	r1, [pc, #28]	; (801031c <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x4c>)
 8010300:	4618      	mov	r0, r3
 8010302:	f7fd f933 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
 8010306:	2301      	movs	r3, #1
 8010308:	e003      	b.n	8010312 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x42>
  }
  (*ptr) = data;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	697a      	ldr	r2, [r7, #20]
 801030e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3718      	adds	r7, #24
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}
 801031a:	bf00      	nop
 801031c:	0801e1ac 	.word	0x0801e1ac

08010320 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
 8010320:	b590      	push	{r4, r7, lr}
 8010322:	b087      	sub	sp, #28
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	607a      	str	r2, [r7, #4]
 801032c:	603b      	str	r3, [r7, #0]
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	691b      	ldr	r3, [r3, #16]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00b      	beq.n	801034e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	691c      	ldr	r4, [r3, #16]
          memory_allocator_->GetTail()) {
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	685b      	ldr	r3, [r3, #4]
 801033e:	4618      	mov	r0, r3
 8010340:	f002 fa1e 	bl	8012780 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 8010344:	4603      	mov	r3, r0
  if (scratch_buffer_handles_ != nullptr &&
 8010346:	429c      	cmp	r4, r3
 8010348:	d001      	beq.n	801034e <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
 801034a:	2301      	movs	r3, #1
 801034c:	e000      	b.n	8010350 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x30>
 801034e:	2300      	movs	r3, #0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d007      	beq.n	8010364 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x44>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	689b      	ldr	r3, [r3, #8]
 8010358:	491d      	ldr	r1, [pc, #116]	; (80103d0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb0>)
 801035a:	4618      	mov	r0, r3
 801035c:	f7fd f906 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Internal error: AllocateFromTail can not be called "
                         "between two RequestScratchBufferInArena calls.");
    return kTfLiteError;
 8010360:	2301      	movs	r3, #1
 8010362:	e030      	b.n	80103c6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }

  internal::ScratchBufferHandle* handle =
      reinterpret_cast<internal::ScratchBufferHandle*>(
          memory_allocator_->AllocateFromTail(
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	6858      	ldr	r0, [r3, #4]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	685b      	ldr	r3, [r3, #4]
              sizeof(internal::ScratchBufferHandle),
              alignof(internal::ScratchBufferHandle)));
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	330c      	adds	r3, #12
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2204      	movs	r2, #4
 8010374:	210c      	movs	r1, #12
 8010376:	4798      	blx	r3
 8010378:	6178      	str	r0, [r7, #20]
  if (handle == nullptr) {
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d108      	bne.n	8010392 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x72>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	689b      	ldr	r3, [r3, #8]
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	4913      	ldr	r1, [pc, #76]	; (80103d4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb4>)
 8010388:	4618      	mov	r0, r3
 801038a:	f7fd f8ef 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
 801038e:	2301      	movs	r3, #1
 8010390:	e019      	b.n	80103c6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }
  *handle = {};
 8010392:	697b      	ldr	r3, [r7, #20]
 8010394:	461a      	mov	r2, r3
 8010396:	2300      	movs	r3, #0
 8010398:	6013      	str	r3, [r2, #0]
 801039a:	6053      	str	r3, [r2, #4]
 801039c:	6093      	str	r3, [r2, #8]
  handle->bytes = bytes;
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	605a      	str	r2, [r3, #4]
  handle->node_idx = node_id;
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	68ba      	ldr	r2, [r7, #8]
 80103a8:	609a      	str	r2, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	461a      	mov	r2, r3
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	601a      	str	r2, [r3, #0]
  scratch_buffer_count_ += 1;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	695b      	ldr	r3, [r3, #20]
 80103b8:	1c5a      	adds	r2, r3, #1
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	615a      	str	r2, [r3, #20]
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	697a      	ldr	r2, [r7, #20]
 80103c2:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 80103c4:	2300      	movs	r3, #0
}
 80103c6:	4618      	mov	r0, r3
 80103c8:	371c      	adds	r7, #28
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd90      	pop	{r4, r7, pc}
 80103ce:	bf00      	nop
 80103d0:	0801e1dc 	.word	0x0801e1dc
 80103d4:	0801e240 	.word	0x0801e240

080103d8 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	695a      	ldr	r2, [r3, #20]
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d809      	bhi.n	8010400 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6898      	ldr	r0, [r3, #8]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	695b      	ldr	r3, [r3, #20]
 80103f4:	683a      	ldr	r2, [r7, #0]
 80103f6:	490b      	ldr	r1, [pc, #44]	; (8010424 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x4c>)
 80103f8:	f7fd f8b8 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
 80103fc:	2300      	movs	r3, #0
 80103fe:	e00c      	b.n	801041a <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x42>
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6919      	ldr	r1, [r3, #16]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	695a      	ldr	r2, [r3, #20]
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	1ad2      	subs	r2, r2, r3
 801040c:	4613      	mov	r3, r2
 801040e:	005b      	lsls	r3, r3, #1
 8010410:	4413      	add	r3, r2
 8010412:	009b      	lsls	r3, r3, #2
 8010414:	3b0c      	subs	r3, #12
 8010416:	440b      	add	r3, r1
 8010418:	681b      	ldr	r3, [r3, #0]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3708      	adds	r7, #8
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}
 8010422:	bf00      	nop
 8010424:	0801e278 	.word	0x0801e278

08010428 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateTfLiteTensorArray(
    TfLiteContext* context, const SubGraph* subgraph) {
 8010428:	b580      	push	{r7, lr}
 801042a:	b084      	sub	sp, #16
 801042c:	af00      	add	r7, sp, #0
 801042e:	60f8      	str	r0, [r7, #12]
 8010430:	60b9      	str	r1, [r7, #8]
 8010432:	607a      	str	r2, [r7, #4]
  context->tensors_size = subgraph->tensors()->size();
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f7ff f836 	bl	800f4a6 <_ZNK6tflite8SubGraph7tensorsEv>
 801043a:	4603      	mov	r3, r0
 801043c:	4618      	mov	r0, r3
 801043e:	f000 fd3b 	bl	8010eb8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8010442:	4602      	mov	r2, r0
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	601a      	str	r2, [r3, #0]
  context->tensors =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	6858      	ldr	r0, [r3, #4]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	330c      	adds	r3, #12
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	68ba      	ldr	r2, [r7, #8]
 8010458:	6812      	ldr	r2, [r2, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 801045a:	0191      	lsls	r1, r2, #6
 801045c:	2204      	movs	r2, #4
 801045e:	4798      	blx	r3
 8010460:	4602      	mov	r2, r0
  context->tensors =
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	609a      	str	r2, [r3, #8]
  if (context->tensors == nullptr) {
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	689b      	ldr	r3, [r3, #8]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d10a      	bne.n	8010484 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5c>
    TF_LITE_REPORT_ERROR(
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	6898      	ldr	r0, [r3, #8]
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	019b      	lsls	r3, r3, #6
 8010478:	461a      	mov	r2, r3
 801047a:	4905      	ldr	r1, [pc, #20]	; (8010490 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x68>)
 801047c:	f7fd f876 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->tensors, %d bytes required",
        sizeof(TfLiteTensor) * context->tensors_size);
    return kTfLiteError;
 8010480:	2301      	movs	r3, #1
 8010482:	e000      	b.n	8010486 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5e>
  }
  return kTfLiteOk;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	0801e2a4 	.word	0x0801e2a4

08010494 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorArrayFromFlatbuffer(
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
 8010494:	b5b0      	push	{r4, r5, r7, lr}
 8010496:	b088      	sub	sp, #32
 8010498:	af02      	add	r7, sp, #8
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	607a      	str	r2, [r7, #4]
 80104a0:	603b      	str	r3, [r7, #0]
  // Initialize tensors in context_ using the flatbuffer for quantization data.
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80104a2:	2300      	movs	r3, #0
 80104a4:	617b      	str	r3, [r7, #20]
 80104a6:	6838      	ldr	r0, [r7, #0]
 80104a8:	f7fe fffd 	bl	800f4a6 <_ZNK6tflite8SubGraph7tensorsEv>
 80104ac:	4603      	mov	r3, r0
 80104ae:	4618      	mov	r0, r3
 80104b0:	f000 fd02 	bl	8010eb8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80104b4:	4602      	mov	r2, r0
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	4293      	cmp	r3, r2
 80104ba:	bf34      	ite	cc
 80104bc:	2301      	movcc	r3, #1
 80104be:	2300      	movcs	r3, #0
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d02d      	beq.n	8010522 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x8e>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 80104ca:	6838      	ldr	r0, [r7, #0]
 80104cc:	f7fe ffeb 	bl	800f4a6 <_ZNK6tflite8SubGraph7tensorsEv>
 80104d0:	4603      	mov	r3, r0
 80104d2:	6979      	ldr	r1, [r7, #20]
 80104d4:	4618      	mov	r0, r3
 80104d6:	f000 fcfd 	bl	8010ed4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80104da:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 80104dc:	68b8      	ldr	r0, [r7, #8]
 80104de:	f7ff f861 	bl	800f5a4 <_ZNK6tflite5Model7buffersEv>
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &context->tensors[i]);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	689a      	ldr	r2, [r3, #8]
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	019b      	lsls	r3, r3, #6
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 80104ee:	4413      	add	r3, r2
        error_reporter_, &context->tensors[i]);
 80104f0:	9300      	str	r3, [sp, #0]
 80104f2:	460b      	mov	r3, r1
 80104f4:	4602      	mov	r2, r0
 80104f6:	4629      	mov	r1, r5
 80104f8:	4620      	mov	r0, r4
 80104fa:	f7ff fc4f 	bl	800fd9c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 80104fe:	4603      	mov	r3, r0
 8010500:	74fb      	strb	r3, [r7, #19]
    if (status != kTfLiteOk) {
 8010502:	7cfb      	ldrb	r3, [r7, #19]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d008      	beq.n	801051a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x86>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	689b      	ldr	r3, [r3, #8]
 801050c:	697a      	ldr	r2, [r7, #20]
 801050e:	4907      	ldr	r1, [pc, #28]	; (801052c <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x98>)
 8010510:	4618      	mov	r0, r3
 8010512:	f7fd f82b 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 8010516:	2301      	movs	r3, #1
 8010518:	e004      	b.n	8010524 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x90>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 801051a:	697b      	ldr	r3, [r7, #20]
 801051c:	3301      	adds	r3, #1
 801051e:	617b      	str	r3, [r7, #20]
 8010520:	e7c1      	b.n	80104a6 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x12>
    }
  }
  return kTfLiteOk;
 8010522:	2300      	movs	r3, #0
}
 8010524:	4618      	mov	r0, r3
 8010526:	3718      	adds	r7, #24
 8010528:	46bd      	mov	sp, r7
 801052a:	bdb0      	pop	{r4, r5, r7, pc}
 801052c:	0801e2e8 	.word	0x0801e2e8

08010530 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
 8010530:	b5b0      	push	{r4, r5, r7, lr}
 8010532:	b086      	sub	sp, #24
 8010534:	af00      	add	r7, sp, #0
 8010536:	60f8      	str	r0, [r7, #12]
 8010538:	60b9      	str	r1, [r7, #8]
 801053a:	607a      	str	r2, [r7, #4]
  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	685d      	ldr	r5, [r3, #4]
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	685b      	ldr	r3, [r3, #4]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
          alignof(NodeAndRegistration)));
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	330c      	adds	r3, #12
 8010548:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 801054a:	68b8      	ldr	r0, [r7, #8]
 801054c:	f7fe ffd5 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 8010550:	4603      	mov	r3, r0
 8010552:	4618      	mov	r0, r3
 8010554:	f000 fce4 	bl	8010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8010558:	4602      	mov	r2, r0
 801055a:	4613      	mov	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4413      	add	r3, r2
 8010560:	00db      	lsls	r3, r3, #3
          alignof(NodeAndRegistration)));
 8010562:	2204      	movs	r2, #4
 8010564:	4619      	mov	r1, r3
 8010566:	4628      	mov	r0, r5
 8010568:	47a0      	blx	r4
 801056a:	6178      	str	r0, [r7, #20]
  if (output == nullptr) {
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d107      	bne.n	8010582 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x52>
    TF_LITE_REPORT_ERROR(
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	4907      	ldr	r1, [pc, #28]	; (8010594 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x64>)
 8010578:	4618      	mov	r0, r3
 801057a:	f7fc fff7 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 801057e:	2301      	movs	r3, #1
 8010580:	e003      	b.n	801058a <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x5a>
  }
  *node_and_registrations = output;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	697a      	ldr	r2, [r7, #20]
 8010586:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3718      	adds	r7, #24
 801058e:	46bd      	mov	sp, r7
 8010590:	bdb0      	pop	{r4, r5, r7, pc}
 8010592:	bf00      	nop
 8010594:	0801e308 	.word	0x0801e308

08010598 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const SubGraph* subgraph,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 8010598:	b5b0      	push	{r4, r5, r7, lr}
 801059a:	b098      	sub	sp, #96	; 0x60
 801059c:	af02      	add	r7, sp, #8
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	607a      	str	r2, [r7, #4]
 80105a4:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 80105a6:	2300      	movs	r3, #0
 80105a8:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  auto* opcodes = model->operator_codes();
 80105ac:	68b8      	ldr	r0, [r7, #8]
 80105ae:	f7fe ffdd 	bl	800f56c <_ZNK6tflite5Model14operator_codesEv>
 80105b2:	6478      	str	r0, [r7, #68]	; 0x44
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	685a      	ldr	r2, [r3, #4]
 80105b8:	f107 031c 	add.w	r3, r7, #28
 80105bc:	4611      	mov	r1, r2
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff f83c 	bl	800f63c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 80105c4:	2300      	movs	r3, #0
 80105c6:	657b      	str	r3, [r7, #84]	; 0x54
 80105c8:	6878      	ldr	r0, [r7, #4]
 80105ca:	f7fe ff96 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 80105ce:	4603      	mov	r3, r0
 80105d0:	4618      	mov	r0, r3
 80105d2:	f000 fca5 	bl	8010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80105d6:	4602      	mov	r2, r0
 80105d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105da:	4293      	cmp	r3, r2
 80105dc:	bf34      	ite	cc
 80105de:	2301      	movcc	r3, #1
 80105e0:	2300      	movcs	r3, #0
 80105e2:	b2db      	uxtb	r3, r3
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	f000 8130 	beq.w	801084a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b2>
    const auto* op = subgraph->operators()->Get(i);
 80105ea:	6878      	ldr	r0, [r7, #4]
 80105ec:	f7fe ff85 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 80105f0:	4603      	mov	r3, r0
 80105f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80105f4:	4618      	mov	r0, r3
 80105f6:	f000 fca1 	bl	8010f3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80105fa:	6438      	str	r0, [r7, #64]	; 0x40
    const size_t index = op->opcode_index();
 80105fc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80105fe:	f7fe ff19 	bl	800f434 <_ZNK6tflite8Operator12opcode_indexEv>
 8010602:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (index >= opcodes->size()) {
 8010604:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010606:	f000 fcbf 	bl	8010f88 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 801060a:	4602      	mov	r2, r0
 801060c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801060e:	4293      	cmp	r3, r2
 8010610:	bf2c      	ite	cs
 8010612:	2301      	movcs	r3, #1
 8010614:	2300      	movcc	r3, #0
 8010616:	b2db      	uxtb	r3, r3
 8010618:	2b00      	cmp	r3, #0
 801061a:	d008      	beq.n	801062e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x96>
      TF_LITE_REPORT_ERROR(error_reporter_,
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010622:	498f      	ldr	r1, [pc, #572]	; (8010860 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c8>)
 8010624:	4618      	mov	r0, r3
 8010626:	f7fc ffa1 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 801062a:	2401      	movs	r4, #1
 801062c:	e10e      	b.n	801084c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
    }
    auto* opcode = (*opcodes)[index];
 801062e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010630:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010632:	f000 fdd3 	bl	80111dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 8010636:	63b8      	str	r0, [r7, #56]	; 0x38
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8010638:	6839      	ldr	r1, [r7, #0]
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 801063e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010640:	4613      	mov	r3, r2
 8010642:	009b      	lsls	r3, r3, #2
 8010644:	4413      	add	r3, r2
 8010646:	00db      	lsls	r3, r3, #3
 8010648:	461a      	mov	r2, r3
 801064a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801064c:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 801064e:	3324      	adds	r3, #36	; 0x24
    status =
 8010650:	4602      	mov	r2, r0
 8010652:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010654:	f7fe f844 	bl	800e6e0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8010658:	4603      	mov	r3, r0
 801065a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (status != kTfLiteOk) {
 801065e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010662:	2b00      	cmp	r3, #0
 8010664:	d011      	beq.n	801068a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf2>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	689c      	ldr	r4, [r3, #8]
 801066a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801066c:	f7fe f80a 	bl	800e684 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8010670:	4603      	mov	r3, r0
 8010672:	4618      	mov	r0, r3
 8010674:	f7fd ffe0 	bl	800e638 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8010678:	4603      	mov	r3, r0
 801067a:	461a      	mov	r2, r3
 801067c:	4979      	ldr	r1, [pc, #484]	; (8010864 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2cc>)
 801067e:	4620      	mov	r0, r4
 8010680:	f7fc ff74 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(opcode->builtin_code()));
      return status;
 8010684:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8010688:	e0e0      	b.n	801084c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
    }
    const auto* registration = node_and_registrations[i].registration;
 801068a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801068c:	4613      	mov	r3, r2
 801068e:	009b      	lsls	r3, r3, #2
 8010690:	4413      	add	r3, r2
 8010692:	00db      	lsls	r3, r3, #3
 8010694:	461a      	mov	r2, r3
 8010696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010698:	4413      	add	r3, r2
 801069a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801069c:	637b      	str	r3, [r7, #52]	; 0x34
    if (registration == nullptr) {
 801069e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d108      	bne.n	80106b6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11e>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	689b      	ldr	r3, [r3, #8]
 80106a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80106aa:	496f      	ldr	r1, [pc, #444]	; (8010868 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d0>)
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7fc ff5d 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 80106b2:	2401      	movs	r4, #1
 80106b4:	e0ca      	b.n	801084c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 80106b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106b8:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 80106ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    const char* custom_data = nullptr;
 80106be:	2300      	movs	r3, #0
 80106c0:	653b      	str	r3, [r7, #80]	; 0x50
    size_t custom_data_size = 0;
 80106c2:	2300      	movs	r3, #0
 80106c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned char* builtin_data = nullptr;
 80106c6:	2300      	movs	r3, #0
 80106c8:	61bb      	str	r3, [r7, #24]

    if (op_type == BuiltinOperator_CUSTOM) {
 80106ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80106ce:	2b20      	cmp	r3, #32
 80106d0:	d11b      	bne.n	801070a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x172>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 80106d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80106d4:	f7fe fed9 	bl	800f48a <_ZNK6tflite8Operator14custom_optionsEv>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	bf14      	ite	ne
 80106de:	2301      	movne	r3, #1
 80106e0:	2300      	moveq	r3, #0
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d05d      	beq.n	80107a4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x20c>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 80106e8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80106ea:	f7fe fece 	bl	800f48a <_ZNK6tflite8Operator14custom_optionsEv>
 80106ee:	4603      	mov	r3, r0
        custom_data =
 80106f0:	4618      	mov	r0, r3
 80106f2:	f000 fd35 	bl	8011160 <_ZNK11flatbuffers6VectorIhE4dataEv>
 80106f6:	6538      	str	r0, [r7, #80]	; 0x50
        custom_data_size = op->custom_options()->size();
 80106f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80106fa:	f7fe fec6 	bl	800f48a <_ZNK6tflite8Operator14custom_optionsEv>
 80106fe:	4603      	mov	r3, r0
 8010700:	4618      	mov	r0, r3
 8010702:	f000 fb5f 	bl	8010dc4 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8010706:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010708:	e04c      	b.n	80107a4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x20c>
      }
    } else {
      if (op->custom_options() != nullptr) {
 801070a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801070c:	f7fe febd 	bl	800f48a <_ZNK6tflite8Operator14custom_optionsEv>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	bf14      	ite	ne
 8010716:	2301      	movne	r3, #1
 8010718:	2300      	moveq	r3, #0
 801071a:	b2db      	uxtb	r3, r3
 801071c:	2b00      	cmp	r3, #0
 801071e:	d00e      	beq.n	801073e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a6>
        TF_LITE_REPORT_ERROR(
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	689c      	ldr	r4, [r3, #8]
 8010724:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010728:	4618      	mov	r0, r3
 801072a:	f7fd ff85 	bl	800e638 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 801072e:	4603      	mov	r3, r0
 8010730:	461a      	mov	r2, r3
 8010732:	494e      	ldr	r1, [pc, #312]	; (801086c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
 8010734:	4620      	mov	r0, r4
 8010736:	f7fc ff19 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 801073a:	2401      	movs	r4, #1
 801073c:	e086      	b.n	801084c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	3318      	adds	r3, #24
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801074a:	4611      	mov	r1, r2
 801074c:	6838      	ldr	r0, [r7, #0]
 801074e:	4798      	blx	r3
 8010750:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (parser == nullptr) {
 8010752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010754:	2b00      	cmp	r3, #0
 8010756:	d10e      	bne.n	8010776 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1de>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	689c      	ldr	r4, [r3, #8]
 801075c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010760:	4618      	mov	r0, r3
 8010762:	f7fd ff69 	bl	800e638 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8010766:	4603      	mov	r3, r0
 8010768:	461a      	mov	r2, r3
 801076a:	4941      	ldr	r1, [pc, #260]	; (8010870 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d8>)
 801076c:	4620      	mov	r0, r4
 801076e:	f7fc fefd 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 8010772:	2401      	movs	r4, #1
 8010774:	e06a      	b.n	801084c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
      }
      TF_LITE_ENSURE_STATUS(parser(op, op_type, error_reporter_,
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	689a      	ldr	r2, [r3, #8]
 801077a:	f107 001c 	add.w	r0, r7, #28
 801077e:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8010782:	f107 0318 	add.w	r3, r7, #24
 8010786:	9300      	str	r3, [sp, #0]
 8010788:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 801078a:	4603      	mov	r3, r0
 801078c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801078e:	47a0      	blx	r4
 8010790:	4603      	mov	r3, r0
 8010792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801079a:	2b00      	cmp	r3, #0
 801079c:	d002      	beq.n	80107a4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x20c>
 801079e:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 80107a2:	e053      	b.n	801084c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
                                   &builtin_data_allocator,
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	685c      	ldr	r4, [r3, #4]
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	689d      	ldr	r5, [r3, #8]
 80107ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80107ae:	f7fe fe50 	bl	800f452 <_ZNK6tflite8Operator6inputsEv>
 80107b2:	4602      	mov	r2, r0
 80107b4:	f107 0314 	add.w	r3, r7, #20
 80107b8:	4629      	mov	r1, r5
 80107ba:	4620      	mov	r0, r4
 80107bc:	f000 fcdc 	bl	8011178 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80107c0:	4603      	mov	r3, r0
 80107c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80107c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d002      	beq.n	80107d4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x23c>
 80107ce:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
 80107d2:	e03b      	b.n	801084c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	685c      	ldr	r4, [r3, #4]
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	689d      	ldr	r5, [r3, #8]
 80107dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80107de:	f7fe fe46 	bl	800f46e <_ZNK6tflite8Operator7outputsEv>
 80107e2:	4602      	mov	r2, r0
 80107e4:	f107 0310 	add.w	r3, r7, #16
 80107e8:	4629      	mov	r1, r5
 80107ea:	4620      	mov	r0, r4
 80107ec:	f000 fcc4 	bl	8011178 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80107f0:	4603      	mov	r3, r0
 80107f2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80107f6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d002      	beq.n	8010804 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>
 80107fe:	f897 4029 	ldrb.w	r4, [r7, #41]	; 0x29
 8010802:	e023      	b.n	801084c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 8010804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010806:	4613      	mov	r3, r2
 8010808:	009b      	lsls	r3, r3, #2
 801080a:	4413      	add	r3, r2
 801080c:	00db      	lsls	r3, r3, #3
 801080e:	461a      	mov	r2, r3
 8010810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010812:	4413      	add	r3, r2
 8010814:	627b      	str	r3, [r7, #36]	; 0x24
    *node = {};
 8010816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010818:	4618      	mov	r0, r3
 801081a:	2324      	movs	r3, #36	; 0x24
 801081c:	461a      	mov	r2, r3
 801081e:	2100      	movs	r1, #0
 8010820:	f008 fd80 	bl	8019324 <memset>
    node->inputs = inputs_array;
 8010824:	697a      	ldr	r2, [r7, #20]
 8010826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010828:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 801082a:	693a      	ldr	r2, [r7, #16]
 801082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082e:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8010830:	69ba      	ldr	r2, [r7, #24]
 8010832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010834:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 8010836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010838:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801083a:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 801083c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010840:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8010842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010844:	3301      	adds	r3, #1
 8010846:	657b      	str	r3, [r7, #84]	; 0x54
 8010848:	e6be      	b.n	80105c8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x30>
  }

  return kTfLiteOk;
 801084a:	2400      	movs	r4, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 801084c:	f107 031c 	add.w	r3, r7, #28
 8010850:	4618      	mov	r0, r3
 8010852:	f000 ff2f 	bl	80116b4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8010856:	4623      	mov	r3, r4
}
 8010858:	4618      	mov	r0, r3
 801085a:	3758      	adds	r7, #88	; 0x58
 801085c:	46bd      	mov	sp, r7
 801085e:	bdb0      	pop	{r4, r5, r7, pc}
 8010860:	0801e340 	.word	0x0801e340
 8010864:	0801e36c 	.word	0x0801e36c
 8010868:	0801e39c 	.word	0x0801e39c
 801086c:	0801e3c0 	.word	0x0801e3c0
 8010870:	0801e408 	.word	0x0801e408

08010874 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::AllocateVariables(TfLiteContext* context,
                                               const SubGraph* subgraph) {
 8010874:	b5b0      	push	{r4, r5, r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af00      	add	r7, sp, #0
 801087a:	60f8      	str	r0, [r7, #12]
 801087c:	60b9      	str	r1, [r7, #8]
 801087e:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < context->tensors_size; ++i) {
 8010880:	2300      	movs	r3, #0
 8010882:	617b      	str	r3, [r7, #20]
 8010884:	68bb      	ldr	r3, [r7, #8]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	697a      	ldr	r2, [r7, #20]
 801088a:	429a      	cmp	r2, r3
 801088c:	d247      	bcs.n	801091e <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xaa>
    if (subgraph->tensors()->Get(i)->is_variable()) {
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f7fe fe09 	bl	800f4a6 <_ZNK6tflite8SubGraph7tensorsEv>
 8010894:	4603      	mov	r3, r0
 8010896:	6979      	ldr	r1, [r7, #20]
 8010898:	4618      	mov	r0, r3
 801089a:	f000 fb1b 	bl	8010ed4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 801089e:	4603      	mov	r3, r0
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fe fdb3 	bl	800f40c <_ZNK6tflite6Tensor11is_variableEv>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d02c      	beq.n	8010906 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x92>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	6858      	ldr	r0, [r3, #4]
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	685b      	ldr	r3, [r3, #4]
          context->tensors[i].bytes, kBufferAlignment);
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	330c      	adds	r3, #12
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	6891      	ldr	r1, [r2, #8]
 80108be:	697a      	ldr	r2, [r7, #20]
 80108c0:	0192      	lsls	r2, r2, #6
 80108c2:	440a      	add	r2, r1
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 80108c4:	6995      	ldr	r5, [r2, #24]
 80108c6:	68ba      	ldr	r2, [r7, #8]
 80108c8:	6891      	ldr	r1, [r2, #8]
 80108ca:	697a      	ldr	r2, [r7, #20]
 80108cc:	0192      	lsls	r2, r2, #6
 80108ce:	188c      	adds	r4, r1, r2
 80108d0:	2210      	movs	r2, #16
 80108d2:	4629      	mov	r1, r5
 80108d4:	4798      	blx	r3
 80108d6:	4603      	mov	r3, r0
 80108d8:	6063      	str	r3, [r4, #4]
      // Allocation failure.
      if (context->tensors[i].data.data == nullptr) {
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	689a      	ldr	r2, [r3, #8]
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	019b      	lsls	r3, r3, #6
 80108e2:	4413      	add	r3, r2
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d10d      	bne.n	8010906 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x92>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	6898      	ldr	r0, [r3, #8]
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	689a      	ldr	r2, [r3, #8]
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	019b      	lsls	r3, r3, #6
 80108f6:	4413      	add	r3, r2
 80108f8:	699b      	ldr	r3, [r3, #24]
 80108fa:	461a      	mov	r2, r3
 80108fc:	490a      	ldr	r1, [pc, #40]	; (8010928 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xb4>)
 80108fe:	f7fc fe35 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             context->tensors[i].bytes);
        return kTfLiteError;
 8010902:	2301      	movs	r3, #1
 8010904:	e00c      	b.n	8010920 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xac>
      }
    }
    tflite::ResetVariableTensor(&(context->tensors[i]));
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	689a      	ldr	r2, [r3, #8]
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	019b      	lsls	r3, r3, #6
 801090e:	4413      	add	r3, r2
 8010910:	4618      	mov	r0, r3
 8010912:	f7fd ffb2 	bl	800e87a <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
 8010916:	697b      	ldr	r3, [r7, #20]
 8010918:	3301      	adds	r3, #1
 801091a:	617b      	str	r3, [r7, #20]
 801091c:	e7b2      	b.n	8010884 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x10>
  }

  return kTfLiteOk;
 801091e:	2300      	movs	r3, #0
}
 8010920:	4618      	mov	r0, r3
 8010922:	3718      	adds	r7, #24
 8010924:	46bd      	mov	sp, r7
 8010926:	bdb0      	pop	{r4, r5, r7, pc}
 8010928:	0801e428 	.word	0x0801e428

0801092c <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

TfLiteStatus MicroAllocator::InitGraphAndContextTensorData(
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
 801092c:	b590      	push	{r4, r7, lr}
 801092e:	b087      	sub	sp, #28
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	607a      	str	r2, [r7, #4]
 8010938:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	3308      	adds	r3, #8
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	683a      	ldr	r2, [r7, #0]
 8010944:	6879      	ldr	r1, [r7, #4]
 8010946:	68f8      	ldr	r0, [r7, #12]
 8010948:	4798      	blx	r3
 801094a:	4603      	mov	r3, r0
 801094c:	75fb      	strb	r3, [r7, #23]
 801094e:	7dfb      	ldrb	r3, [r7, #23]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d001      	beq.n	8010958 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c>
 8010954:	7dfb      	ldrb	r3, [r7, #23]
 8010956:	e010      	b.n	801097a <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e>
  TF_LITE_ENSURE_STATUS(
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	330c      	adds	r3, #12
 801095e:	681c      	ldr	r4, [r3, #0]
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	687a      	ldr	r2, [r7, #4]
 8010964:	68b9      	ldr	r1, [r7, #8]
 8010966:	68f8      	ldr	r0, [r7, #12]
 8010968:	47a0      	blx	r4
 801096a:	4603      	mov	r3, r0
 801096c:	75bb      	strb	r3, [r7, #22]
 801096e:	7dbb      	ldrb	r3, [r7, #22]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d001      	beq.n	8010978 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4c>
 8010974:	7dbb      	ldrb	r3, [r7, #22]
 8010976:	e000      	b.n	801097a <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e>
      PopulateTfLiteTensorArrayFromFlatbuffer(model, context, subgraph));
  return kTfLiteOk;
 8010978:	2300      	movs	r3, #0
}
 801097a:	4618      	mov	r0, r3
 801097c:	371c      	adds	r7, #28
 801097e:	46bd      	mov	sp, r7
 8010980:	bd90      	pop	{r4, r7, pc}
	...

08010984 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
 801098c:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 801098e:	6838      	ldr	r0, [r7, #0]
 8010990:	f7fe fdfa 	bl	800f588 <_ZNK6tflite5Model9subgraphsEv>
 8010994:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f000 fb2a 	bl	8010ff0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 801099c:	4603      	mov	r3, r0
 801099e:	2b01      	cmp	r3, #1
 80109a0:	bf14      	ite	ne
 80109a2:	2301      	movne	r3, #1
 80109a4:	2300      	moveq	r3, #0
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d007      	beq.n	80109bc <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	4907      	ldr	r1, [pc, #28]	; (80109d0 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fc fdda 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 80109b8:	2300      	movs	r3, #0
 80109ba:	e004      	b.n	80109c6 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x42>
  }
  return (*subgraphs)[0];
 80109bc:	2100      	movs	r1, #0
 80109be:	68f8      	ldr	r0, [r7, #12]
 80109c0:	f000 fbb2 	bl	8011128 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80109c4:	4603      	mov	r3, r0
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop
 80109d0:	0801e458 	.word	0x0801e458

080109d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
 80109d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109d6:	b0a7      	sub	sp, #156	; 0x9c
 80109d8:	af02      	add	r7, sp, #8
 80109da:	60f8      	str	r0, [r7, #12]
 80109dc:	60b9      	str	r1, [r7, #8]
 80109de:	607a      	str	r2, [r7, #4]
 80109e0:	603b      	str	r3, [r7, #0]
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	689d      	ldr	r5, [r3, #8]
                                        memory_allocator_->GetHead(),
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	685b      	ldr	r3, [r3, #4]
                                        memory_allocator_->GetTail());
 80109ea:	4618      	mov	r0, r3
 80109ec:	f001 febc 	bl	8012768 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 80109f0:	4606      	mov	r6, r0
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	4618      	mov	r0, r3
 80109f8:	f001 fec2 	bl	8012780 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 80109fc:	4603      	mov	r3, r0
 80109fe:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8010a02:	4632      	mov	r2, r6
 8010a04:	4629      	mov	r1, r5
 8010a06:	f001 fdbd 	bl	8012584 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	6899      	ldr	r1, [r3, #8]
 8010a0e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010a12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fe fe46 	bl	800f6a8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>
    TF_LITE_ENSURE_STATUS(
 8010a1c:	6838      	ldr	r0, [r7, #0]
 8010a1e:	f7fe fd42 	bl	800f4a6 <_ZNK6tflite8SubGraph7tensorsEv>
 8010a22:	4603      	mov	r3, r0
 8010a24:	4618      	mov	r0, r3
 8010a26:	f000 fa47 	bl	8010eb8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8010a2a:	4601      	mov	r1, r0
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	695a      	ldr	r2, [r3, #20]
 8010a30:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010a34:	4618      	mov	r0, r3
 8010a36:	f7fe fe53 	bl	800f6e0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8010a40:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d003      	beq.n	8010a50 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x7c>
 8010a48:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 8010a4c:	2500      	movs	r5, #0
 8010a4e:	e100      	b.n	8010c52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
 8010a50:	2300      	movs	r3, #0
 8010a52:	643b      	str	r3, [r7, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(
 8010a54:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010a58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010a5c:	68b9      	ldr	r1, [r7, #8]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7ff f83c 	bl	800fadc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 8010a64:	4603      	mov	r3, r0
 8010a66:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8010a6a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d003      	beq.n	8010a7a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xa6>
 8010a72:	f897 408e 	ldrb.w	r4, [r7, #142]	; 0x8e
 8010a76:	2500      	movs	r5, #0
 8010a78:	e0eb      	b.n	8010c52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
 8010a7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8010a84:	6839      	ldr	r1, [r7, #0]
 8010a86:	f7fe fe89 	bl	800f79c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8010a90:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d003      	beq.n	8010aa0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xcc>
 8010a98:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 8010a9c:	2500      	movs	r5, #0
 8010a9e:	e0d8      	b.n	8010c52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
                                             context->tensors));

    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	691a      	ldr	r2, [r3, #16]
 8010aa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010aa8:	4611      	mov	r1, r2
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f7ff f892 	bl	800fbd4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>
 8010ab0:	4603      	mov	r3, r0
 8010ab2:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 8010ab6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d003      	beq.n	8010ac6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf2>
 8010abe:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8010ac2:	2500      	movs	r5, #0
 8010ac4:	e0c5      	b.n	8010c52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    const AllocationInfo* allocation_info = builder.Finish();
 8010ac6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7fe fe1c 	bl	800f708 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>
 8010ad0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
 8010ad4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f001 fe5d 	bl	8012798 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8010ade:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
 8010ae2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010aec:	4618      	mov	r0, r3
 8010aee:	f001 fdd7 	bl	80126a0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
 8010af2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8010af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d10f      	bne.n	8010b1e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14a>
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6898      	ldr	r0, [r3, #8]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6899      	ldr	r1, [r3, #8]
 8010b06:	4b5a      	ldr	r3, [pc, #360]	; (8010c70 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x29c>)
 8010b08:	9301      	str	r3, [sp, #4]
 8010b0a:	f240 339b 	movw	r3, #923	; 0x39b
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	4b58      	ldr	r3, [pc, #352]	; (8010c74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 8010b12:	4a59      	ldr	r2, [pc, #356]	; (8010c78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 8010b14:	f7fc fd43 	bl	800d59e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8010b18:	2401      	movs	r4, #1
 8010b1a:	2500      	movs	r5, #0
 8010b1c:	e099      	b.n	8010c52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8010b1e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010b22:	f107 0314 	add.w	r3, r7, #20
 8010b26:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f005 f8f0 	bl	8015d10 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	689d      	ldr	r5, [r3, #8]
 8010b34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7fe fdf1 	bl	800f720 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	f107 0114 	add.w	r1, r7, #20
 8010b44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010b48:	4628      	mov	r0, r5
 8010b4a:	f7ff f889 	bl	800fc60 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010b54:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d003      	beq.n	8010b64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x190>
 8010b5c:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 8010b60:	2500      	movs	r5, #0
 8010b62:	e06b      	b.n	8010c3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
        CreatePlan(error_reporter_, &planner, allocation_info, builder.Size()));

    size_t actual_available_arena_size =
        memory_allocator_->GetAvailableMemory();
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f001 fe15 	bl	8012798 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8010b6e:	67b8      	str	r0, [r7, #120]	; 0x78
    // Make sure we have enough arena size.
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8010b70:	f107 0314 	add.w	r3, r7, #20
 8010b74:	4618      	mov	r0, r3
 8010b76:	f005 fb84 	bl	8016282 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	bf34      	ite	cc
 8010b82:	2301      	movcc	r3, #1
 8010b84:	2300      	movcs	r3, #0
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00f      	beq.n	8010bac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1d8>
      TF_LITE_REPORT_ERROR(
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	689c      	ldr	r4, [r3, #8]
 8010b90:	f107 0314 	add.w	r3, r7, #20
 8010b94:	4618      	mov	r0, r3
 8010b96:	f005 fb74 	bl	8016282 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8010b9a:	4602      	mov	r2, r0
 8010b9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010b9e:	4937      	ldr	r1, [pc, #220]	; (8010c7c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a8>)
 8010ba0:	4620      	mov	r0, r4
 8010ba2:	f7fc fce3 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Arena size is too small for activation buffers. Needed %d but only "
          "%d was available.",
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
 8010ba6:	2401      	movs	r4, #1
 8010ba8:	2500      	movs	r5, #0
 8010baa:	e047      	b.n	8010c3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	689d      	ldr	r5, [r3, #8]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f001 fdd7 	bl	8012768 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 8010bba:	4606      	mov	r6, r0
 8010bbc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010bc0:	4618      	mov	r0, r3
 8010bc2:	f7fe fdad 	bl	800f720 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	f107 0114 	add.w	r1, r7, #20
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010bd2:	4632      	mov	r2, r6
 8010bd4:	4628      	mov	r0, r5
 8010bd6:	f7ff f89d 	bl	800fd14 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8010be0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d003      	beq.n	8010bf0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21c>
 8010be8:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8010bec:	2500      	movs	r5, #0
 8010bee:	e025      	b.n	8010c3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
                                     memory_allocator_->GetHead(),
                                     allocation_info, builder.Size()));
    // Allocate the planned area, so the allocator knows it's used.
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	685e      	ldr	r6, [r3, #4]
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	685b      	ldr	r3, [r3, #4]
                                            /*alignment=*/1);
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	3308      	adds	r3, #8
 8010bfc:	681d      	ldr	r5, [r3, #0]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8010bfe:	f107 0314 	add.w	r3, r7, #20
 8010c02:	4618      	mov	r0, r3
 8010c04:	f005 fb3d 	bl	8016282 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8010c08:	4603      	mov	r3, r0
                                            /*alignment=*/1);
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	4630      	mov	r0, r6
 8010c10:	47a8      	blx	r5
 8010c12:	6738      	str	r0, [r7, #112]	; 0x70
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
 8010c14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d10f      	bne.n	8010c3a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x266>
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	6898      	ldr	r0, [r3, #8]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	6899      	ldr	r1, [r3, #8]
 8010c22:	4b17      	ldr	r3, [pc, #92]	; (8010c80 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>)
 8010c24:	9301      	str	r3, [sp, #4]
 8010c26:	f44f 736d 	mov.w	r3, #948	; 0x3b4
 8010c2a:	9300      	str	r3, [sp, #0]
 8010c2c:	4b11      	ldr	r3, [pc, #68]	; (8010c74 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 8010c2e:	4a12      	ldr	r2, [pc, #72]	; (8010c78 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 8010c30:	f7fc fcb5 	bl	800d59e <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8010c34:	2401      	movs	r4, #1
 8010c36:	2500      	movs	r5, #0
 8010c38:	e000      	b.n	8010c3c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
 8010c3a:	2501      	movs	r5, #1
 8010c3c:	f107 0314 	add.w	r3, r7, #20
 8010c40:	4618      	mov	r0, r3
 8010c42:	f005 f8b7 	bl	8015db4 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8010c46:	2d01      	cmp	r5, #1
 8010c48:	d001      	beq.n	8010c4e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27a>
 8010c4a:	2500      	movs	r5, #0
 8010c4c:	e001      	b.n	8010c52 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8010c4e:	bf00      	nop
 8010c50:	2501      	movs	r5, #1
 8010c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010c56:	4618      	mov	r0, r3
 8010c58:	f001 fd02 	bl	8012660 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8010c5c:	2d01      	cmp	r5, #1
 8010c5e:	d101      	bne.n	8010c64 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x290>
                                        memory_allocator_->GetTail());
 8010c60:	bf00      	nop
  }
  return kTfLiteOk;
 8010c62:	2400      	movs	r4, #0
 8010c64:	4623      	mov	r3, r4
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3794      	adds	r7, #148	; 0x94
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c6e:	bf00      	nop
 8010c70:	0801e528 	.word	0x0801e528
 8010c74:	0801e484 	.word	0x0801e484
 8010c78:	0801e510 	.word	0x0801e510
 8010c7c:	0801e544 	.word	0x0801e544
 8010c80:	0801e59c 	.word	0x0801e59c

08010c84 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010c90:	887b      	ldrh	r3, [r7, #2]
 8010c92:	4619      	mov	r1, r3
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 faaf 	bl	80111f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8010c9a:	4603      	mov	r3, r0
  }
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	3708      	adds	r7, #8
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	bd80      	pop	{r7, pc}

08010ca4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010ca4:	b580      	push	{r7, lr}
 8010ca6:	b082      	sub	sp, #8
 8010ca8:	af00      	add	r7, sp, #0
 8010caa:	6078      	str	r0, [r7, #4]
 8010cac:	460b      	mov	r3, r1
 8010cae:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010cb0:	887b      	ldrh	r3, [r7, #2]
 8010cb2:	4619      	mov	r1, r3
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 fabf 	bl	8011238 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8010cba:	4603      	mov	r3, r0
  }
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3708      	adds	r7, #8
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010cd0:	887b      	ldrh	r3, [r7, #2]
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 facf 	bl	8011278 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8010cda:	4603      	mov	r3, r0
  }
 8010cdc:	4618      	mov	r0, r3
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}

08010ce4 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010cf0:	887b      	ldrh	r3, [r7, #2]
 8010cf2:	4619      	mov	r1, r3
 8010cf4:	6878      	ldr	r0, [r7, #4]
 8010cf6:	f000 fadf 	bl	80112b8 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8010cfa:	4603      	mov	r3, r0
  }
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3708      	adds	r7, #8
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010d10:	887b      	ldrh	r3, [r7, #2]
 8010d12:	4619      	mov	r1, r3
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f000 faef 	bl	80112f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8010d1a:	4603      	mov	r3, r0
  }
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	3708      	adds	r7, #8
 8010d20:	46bd      	mov	sp, r7
 8010d22:	bd80      	pop	{r7, pc}

08010d24 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010d24:	b580      	push	{r7, lr}
 8010d26:	b082      	sub	sp, #8
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
 8010d2c:	460b      	mov	r3, r1
 8010d2e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010d30:	887b      	ldrh	r3, [r7, #2]
 8010d32:	4619      	mov	r1, r3
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f000 faff 	bl	8011338 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8010d3a:	4603      	mov	r3, r0
  }
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}

08010d44 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010d44:	b580      	push	{r7, lr}
 8010d46:	b082      	sub	sp, #8
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	6078      	str	r0, [r7, #4]
 8010d4c:	460b      	mov	r3, r1
 8010d4e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010d50:	887b      	ldrh	r3, [r7, #2]
 8010d52:	4619      	mov	r1, r3
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f000 fb0f 	bl	8011378 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8010d5a:	4603      	mov	r3, r0
  }
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010d70:	887b      	ldrh	r3, [r7, #2]
 8010d72:	4619      	mov	r1, r3
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 fb1f 	bl	80113b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8010d7a:	4603      	mov	r3, r0
  }
 8010d7c:	4618      	mov	r0, r3
 8010d7e:	3708      	adds	r7, #8
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}

08010d84 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b082      	sub	sp, #8
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	460b      	mov	r3, r1
 8010d8e:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010d90:	887b      	ldrh	r3, [r7, #2]
 8010d92:	4619      	mov	r1, r3
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 fb2f 	bl	80113f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8010d9a:	4603      	mov	r3, r0
  }
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	3708      	adds	r7, #8
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}

08010da4 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	460b      	mov	r3, r1
 8010dae:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8010db0:	887b      	ldrh	r3, [r7, #2]
 8010db2:	4619      	mov	r1, r3
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 fb3f 	bl	8011438 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8010dba:	4603      	mov	r3, r0
  }
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3708      	adds	r7, #8
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd80      	pop	{r7, pc}

08010dc4 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b082      	sub	sp, #8
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7f4 f9e0 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3708      	adds	r7, #8
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b082      	sub	sp, #8
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7f4 f9d2 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8010df2:	4603      	mov	r3, r0
 8010df4:	4618      	mov	r0, r3
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f7ff ffea 	bl	8010de0 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8010e0c:	4602      	mov	r2, r0
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	4293      	cmp	r3, r2
 8010e12:	d306      	bcc.n	8010e22 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8010e14:	4b0a      	ldr	r3, [pc, #40]	; (8010e40 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8010e16:	4a0b      	ldr	r2, [pc, #44]	; (8010e44 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8010e18:	f240 1101 	movw	r1, #257	; 0x101
 8010e1c:	480a      	ldr	r0, [pc, #40]	; (8010e48 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8010e1e:	f008 f971 	bl	8019104 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fb4a 	bl	80114bc <_ZNK11flatbuffers6VectorIfE4DataEv>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	6839      	ldr	r1, [r7, #0]
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f000 fb2f 	bl	8011490 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8010e32:	eef0 7a40 	vmov.f32	s15, s0
  }
 8010e36:	eeb0 0a67 	vmov.f32	s0, s15
 8010e3a:	3708      	adds	r7, #8
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	0801e5c0 	.word	0x0801e5c0
 8010e44:	0803e270 	.word	0x0803e270
 8010e48:	0801e5cc 	.word	0x0801e5cc

08010e4c <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b082      	sub	sp, #8
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7f4 f99c 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	4618      	mov	r0, r3
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8010e68:	b590      	push	{r4, r7, lr}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff ffea 	bl	8010e4c <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8010e78:	4602      	mov	r2, r0
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	d306      	bcc.n	8010e8e <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8010e80:	4b0a      	ldr	r3, [pc, #40]	; (8010eac <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 8010e82:	4a0b      	ldr	r2, [pc, #44]	; (8010eb0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 8010e84:	f240 1101 	movw	r1, #257	; 0x101
 8010e88:	480a      	ldr	r0, [pc, #40]	; (8010eb4 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 8010e8a:	f008 f93b 	bl	8019104 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8010e8e:	6878      	ldr	r0, [r7, #4]
 8010e90:	f000 fb36 	bl	8011500 <_ZNK11flatbuffers6VectorIxE4DataEv>
 8010e94:	4603      	mov	r3, r0
 8010e96:	6839      	ldr	r1, [r7, #0]
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f000 fb1b 	bl	80114d4 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	460c      	mov	r4, r1
  }
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	370c      	adds	r7, #12
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd90      	pop	{r4, r7, pc}
 8010eac:	0801e5c0 	.word	0x0801e5c0
 8010eb0:	0803e338 	.word	0x0803e338
 8010eb4:	0801e5cc 	.word	0x0801e5cc

08010eb8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b082      	sub	sp, #8
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	6078      	str	r0, [r7, #4]
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f7f4 f966 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	4618      	mov	r0, r3
 8010ece:	3708      	adds	r7, #8
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	bd80      	pop	{r7, pc}

08010ed4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7ff ffea 	bl	8010eb8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	683b      	ldr	r3, [r7, #0]
 8010ee8:	4293      	cmp	r3, r2
 8010eea:	d306      	bcc.n	8010efa <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8010eec:	4b09      	ldr	r3, [pc, #36]	; (8010f14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8010eee:	4a0a      	ldr	r2, [pc, #40]	; (8010f18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8010ef0:	f240 1101 	movw	r1, #257	; 0x101
 8010ef4:	4809      	ldr	r0, [pc, #36]	; (8010f1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8010ef6:	f008 f905 	bl	8019104 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f000 fb20 	bl	8011540 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8010f00:	4603      	mov	r3, r0
 8010f02:	6839      	ldr	r1, [r7, #0]
 8010f04:	4618      	mov	r0, r3
 8010f06:	f000 fb07 	bl	8011518 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8010f0a:	4603      	mov	r3, r0
  }
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3708      	adds	r7, #8
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}
 8010f14:	0801e5c0 	.word	0x0801e5c0
 8010f18:	0803e07c 	.word	0x0803e07c
 8010f1c:	0801e5cc 	.word	0x0801e5cc

08010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b082      	sub	sp, #8
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7f4 f932 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8010f32:	4603      	mov	r3, r0
 8010f34:	4618      	mov	r0, r3
 8010f36:	3708      	adds	r7, #8
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}

08010f3c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f7ff ffea 	bl	8010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d306      	bcc.n	8010f62 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8010f54:	4b09      	ldr	r3, [pc, #36]	; (8010f7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8010f56:	4a0a      	ldr	r2, [pc, #40]	; (8010f80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8010f58:	f240 1101 	movw	r1, #257	; 0x101
 8010f5c:	4809      	ldr	r0, [pc, #36]	; (8010f84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8010f5e:	f008 f8d1 	bl	8019104 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f000 fb0c 	bl	8011580 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	6839      	ldr	r1, [r7, #0]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f000 faf3 	bl	8011558 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8010f72:	4603      	mov	r3, r0
  }
 8010f74:	4618      	mov	r0, r3
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	0801e5c0 	.word	0x0801e5c0
 8010f80:	0803e174 	.word	0x0803e174
 8010f84:	0801e5cc 	.word	0x0801e5cc

08010f88 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b082      	sub	sp, #8
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7f4 f8fe 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f7ff ffea 	bl	8010f88 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8010fb4:	4602      	mov	r2, r0
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	4293      	cmp	r3, r2
 8010fba:	d306      	bcc.n	8010fca <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8010fbc:	4b09      	ldr	r3, [pc, #36]	; (8010fe4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 8010fbe:	4a0a      	ldr	r2, [pc, #40]	; (8010fe8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 8010fc0:	f240 1101 	movw	r1, #257	; 0x101
 8010fc4:	4809      	ldr	r0, [pc, #36]	; (8010fec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8010fc6:	f008 f89d 	bl	8019104 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8010fca:	6878      	ldr	r0, [r7, #4]
 8010fcc:	f000 faf8 	bl	80115c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	6839      	ldr	r1, [r7, #0]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f000 fadf 	bl	8011598 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8010fda:	4603      	mov	r3, r0
  }
 8010fdc:	4618      	mov	r0, r3
 8010fde:	3708      	adds	r7, #8
 8010fe0:	46bd      	mov	sp, r7
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	0801e5c0 	.word	0x0801e5c0
 8010fe8:	0803e410 	.word	0x0803e410
 8010fec:	0801e5cc 	.word	0x0801e5cc

08010ff0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b082      	sub	sp, #8
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7f4 f8ca 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8011002:	4603      	mov	r3, r0
 8011004:	4618      	mov	r0, r3
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff ffea 	bl	8010ff0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 801101c:	4602      	mov	r2, r0
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	4293      	cmp	r3, r2
 8011022:	d306      	bcc.n	8011032 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8011024:	4b09      	ldr	r3, [pc, #36]	; (801104c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8011026:	4a0a      	ldr	r2, [pc, #40]	; (8011050 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8011028:	f240 1101 	movw	r1, #257	; 0x101
 801102c:	4809      	ldr	r0, [pc, #36]	; (8011054 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 801102e:	f008 f869 	bl	8019104 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8011032:	6878      	ldr	r0, [r7, #4]
 8011034:	f000 fae4 	bl	8011600 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8011038:	4603      	mov	r3, r0
 801103a:	6839      	ldr	r1, [r7, #0]
 801103c:	4618      	mov	r0, r3
 801103e:	f000 facb 	bl	80115d8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8011042:	4603      	mov	r3, r0
  }
 8011044:	4618      	mov	r0, r3
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	0801e5c0 	.word	0x0801e5c0
 8011050:	0803de88 	.word	0x0803de88
 8011054:	0801e5cc 	.word	0x0801e5cc

08011058 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	4618      	mov	r0, r3
 8011066:	f7f4 f896 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 801106a:	4603      	mov	r3, r0
 801106c:	4618      	mov	r0, r3
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7ff ffea 	bl	8011058 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8011084:	4602      	mov	r2, r0
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	4293      	cmp	r3, r2
 801108a:	d306      	bcc.n	801109a <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 801108c:	4b09      	ldr	r3, [pc, #36]	; (80110b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 801108e:	4a0a      	ldr	r2, [pc, #40]	; (80110b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8011090:	f240 1101 	movw	r1, #257	; 0x101
 8011094:	4809      	ldr	r0, [pc, #36]	; (80110bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8011096:	f008 f835 	bl	8019104 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 fad0 	bl	8011640 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 80110a0:	4603      	mov	r3, r0
 80110a2:	6839      	ldr	r1, [r7, #0]
 80110a4:	4618      	mov	r0, r3
 80110a6:	f000 fab7 	bl	8011618 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 80110aa:	4603      	mov	r3, r0
  }
 80110ac:	4618      	mov	r0, r3
 80110ae:	3708      	adds	r7, #8
 80110b0:	46bd      	mov	sp, r7
 80110b2:	bd80      	pop	{r7, pc}
 80110b4:	0801e5c0 	.word	0x0801e5c0
 80110b8:	0803df84 	.word	0x0803df84
 80110bc:	0801e5cc 	.word	0x0801e5cc

080110c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4618      	mov	r0, r3
 80110ce:	f7f4 f862 	bl	8005196 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80110d2:	4603      	mov	r3, r0
 80110d4:	4618      	mov	r0, r3
 80110d6:	3708      	adds	r7, #8
 80110d8:	46bd      	mov	sp, r7
 80110da:	bd80      	pop	{r7, pc}

080110dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80110dc:	b580      	push	{r7, lr}
 80110de:	b082      	sub	sp, #8
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7ff ffea 	bl	80110c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 80110ec:	4602      	mov	r2, r0
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	4293      	cmp	r3, r2
 80110f2:	d306      	bcc.n	8011102 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 80110f4:	4b09      	ldr	r3, [pc, #36]	; (801111c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 80110f6:	4a0a      	ldr	r2, [pc, #40]	; (8011120 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 80110f8:	f240 1101 	movw	r1, #257	; 0x101
 80110fc:	4809      	ldr	r0, [pc, #36]	; (8011124 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 80110fe:	f008 f801 	bl	8019104 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8011102:	6878      	ldr	r0, [r7, #4]
 8011104:	f000 fabc 	bl	8011680 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8011108:	4603      	mov	r3, r0
 801110a:	6839      	ldr	r1, [r7, #0]
 801110c:	4618      	mov	r0, r3
 801110e:	f000 faa3 	bl	8011658 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8011112:	4603      	mov	r3, r0
  }
 8011114:	4618      	mov	r0, r3
 8011116:	3708      	adds	r7, #8
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}
 801111c:	0801e5c0 	.word	0x0801e5c0
 8011120:	0803dd8c 	.word	0x0803dd8c
 8011124:	0801e5cc 	.word	0x0801e5cc

08011128 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
 8011132:	6839      	ldr	r1, [r7, #0]
 8011134:	6878      	ldr	r0, [r7, #4]
 8011136:	f7ff ff69 	bl	801100c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 801113a:	4603      	mov	r3, r0
 801113c:	4618      	mov	r0, r3
 801113e:	3708      	adds	r7, #8
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}

08011144 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 8011144:	b580      	push	{r7, lr}
 8011146:	b082      	sub	sp, #8
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
 801114e:	6839      	ldr	r1, [r7, #0]
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f7ff ff8f 	bl	8011074 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 8011156:	4603      	mov	r3, r0
 8011158:	4618      	mov	r0, r3
 801115a:	3708      	adds	r7, #8
 801115c:	46bd      	mov	sp, r7
 801115e:	bd80      	pop	{r7, pc}

08011160 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6878      	ldr	r0, [r7, #4]
 801116a:	f000 f985 	bl	8011478 <_ZNK11flatbuffers6VectorIhE4DataEv>
 801116e:	4603      	mov	r3, r0
 8011170:	4618      	mov	r0, r3
 8011172:	3708      	adds	r7, #8
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}

08011178 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	60f8      	str	r0, [r7, #12]
 8011180:	60b9      	str	r1, [r7, #8]
 8011182:	607a      	str	r2, [r7, #4]
 8011184:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d101      	bne.n	8011190 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 801118c:	f007 ffb3 	bl	80190f6 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2b00      	cmp	r3, #0
 8011194:	d101      	bne.n	801119a <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8011196:	f007 ffae 	bl	80190f6 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	687a      	ldr	r2, [r7, #4]
 801119e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80111a0:	2300      	movs	r3, #0
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3710      	adds	r7, #16
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}

080111aa <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 80111aa:	b580      	push	{r7, lr}
 80111ac:	b084      	sub	sp, #16
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	60f8      	str	r0, [r7, #12]
 80111b2:	60b9      	str	r1, [r7, #8]
 80111b4:	607a      	str	r2, [r7, #4]
 80111b6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 80111b8:	68bb      	ldr	r3, [r7, #8]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d101      	bne.n	80111c2 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 80111be:	f007 ff9a 	bl	80190f6 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d101      	bne.n	80111cc <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 80111c8:	f007 ff95 	bl	80190f6 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	687a      	ldr	r2, [r7, #4]
 80111d0:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80111d2:	2300      	movs	r3, #0
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
 80111e4:	6039      	str	r1, [r7, #0]
 80111e6:	6839      	ldr	r1, [r7, #0]
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f7ff fedb 	bl	8010fa4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 80111ee:	4603      	mov	r3, r0
 80111f0:	4618      	mov	r0, r3
 80111f2:	3708      	adds	r7, #8
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b084      	sub	sp, #16
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	460b      	mov	r3, r1
 8011202:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8011204:	887b      	ldrh	r3, [r7, #2]
 8011206:	4619      	mov	r1, r3
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f7f2 fe2b 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 801120e:	4603      	mov	r3, r0
 8011210:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8011212:	687a      	ldr	r2, [r7, #4]
 8011214:	89fb      	ldrh	r3, [r7, #14]
 8011216:	4413      	add	r3, r2
 8011218:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801121a:	89fb      	ldrh	r3, [r7, #14]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d006      	beq.n	801122e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 8011220:	68b8      	ldr	r0, [r7, #8]
 8011222:	f7f3 ffe5 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011226:	4602      	mov	r2, r0
 8011228:	68bb      	ldr	r3, [r7, #8]
 801122a:	4413      	add	r3, r2
                        : nullptr;
 801122c:	e000      	b.n	8011230 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801122e:	2300      	movs	r3, #0
  }
 8011230:	4618      	mov	r0, r3
 8011232:	3710      	adds	r7, #16
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	460b      	mov	r3, r1
 8011242:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8011244:	887b      	ldrh	r3, [r7, #2]
 8011246:	4619      	mov	r1, r3
 8011248:	6878      	ldr	r0, [r7, #4]
 801124a:	f7f2 fe0b 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 801124e:	4603      	mov	r3, r0
 8011250:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8011252:	687a      	ldr	r2, [r7, #4]
 8011254:	89fb      	ldrh	r3, [r7, #14]
 8011256:	4413      	add	r3, r2
 8011258:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801125a:	89fb      	ldrh	r3, [r7, #14]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d006      	beq.n	801126e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 8011260:	68b8      	ldr	r0, [r7, #8]
 8011262:	f7f3 ffc5 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011266:	4602      	mov	r2, r0
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	4413      	add	r3, r2
                        : nullptr;
 801126c:	e000      	b.n	8011270 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801126e:	2300      	movs	r3, #0
  }
 8011270:	4618      	mov	r0, r3
 8011272:	3710      	adds	r7, #16
 8011274:	46bd      	mov	sp, r7
 8011276:	bd80      	pop	{r7, pc}

08011278 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8011278:	b580      	push	{r7, lr}
 801127a:	b084      	sub	sp, #16
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	460b      	mov	r3, r1
 8011282:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8011284:	887b      	ldrh	r3, [r7, #2]
 8011286:	4619      	mov	r1, r3
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7f2 fdeb 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 801128e:	4603      	mov	r3, r0
 8011290:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8011292:	687a      	ldr	r2, [r7, #4]
 8011294:	89fb      	ldrh	r3, [r7, #14]
 8011296:	4413      	add	r3, r2
 8011298:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801129a:	89fb      	ldrh	r3, [r7, #14]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d006      	beq.n	80112ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 80112a0:	68b8      	ldr	r0, [r7, #8]
 80112a2:	f7f3 ffa5 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80112a6:	4602      	mov	r2, r0
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	4413      	add	r3, r2
                        : nullptr;
 80112ac:	e000      	b.n	80112b0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80112ae:	2300      	movs	r3, #0
  }
 80112b0:	4618      	mov	r0, r3
 80112b2:	3710      	adds	r7, #16
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b084      	sub	sp, #16
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	460b      	mov	r3, r1
 80112c2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80112c4:	887b      	ldrh	r3, [r7, #2]
 80112c6:	4619      	mov	r1, r3
 80112c8:	6878      	ldr	r0, [r7, #4]
 80112ca:	f7f2 fdcb 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80112ce:	4603      	mov	r3, r0
 80112d0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	89fb      	ldrh	r3, [r7, #14]
 80112d6:	4413      	add	r3, r2
 80112d8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80112da:	89fb      	ldrh	r3, [r7, #14]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d006      	beq.n	80112ee <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 80112e0:	68b8      	ldr	r0, [r7, #8]
 80112e2:	f7f3 ff85 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80112e6:	4602      	mov	r2, r0
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	4413      	add	r3, r2
                        : nullptr;
 80112ec:	e000      	b.n	80112f0 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80112ee:	2300      	movs	r3, #0
  }
 80112f0:	4618      	mov	r0, r3
 80112f2:	3710      	adds	r7, #16
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b084      	sub	sp, #16
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	460b      	mov	r3, r1
 8011302:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8011304:	887b      	ldrh	r3, [r7, #2]
 8011306:	4619      	mov	r1, r3
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f7f2 fdab 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 801130e:	4603      	mov	r3, r0
 8011310:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8011312:	687a      	ldr	r2, [r7, #4]
 8011314:	89fb      	ldrh	r3, [r7, #14]
 8011316:	4413      	add	r3, r2
 8011318:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801131a:	89fb      	ldrh	r3, [r7, #14]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d006      	beq.n	801132e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 8011320:	68b8      	ldr	r0, [r7, #8]
 8011322:	f7f3 ff65 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011326:	4602      	mov	r2, r0
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	4413      	add	r3, r2
                        : nullptr;
 801132c:	e000      	b.n	8011330 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801132e:	2300      	movs	r3, #0
  }
 8011330:	4618      	mov	r0, r3
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	460b      	mov	r3, r1
 8011342:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8011344:	887b      	ldrh	r3, [r7, #2]
 8011346:	4619      	mov	r1, r3
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f7f2 fd8b 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 801134e:	4603      	mov	r3, r0
 8011350:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8011352:	687a      	ldr	r2, [r7, #4]
 8011354:	89fb      	ldrh	r3, [r7, #14]
 8011356:	4413      	add	r3, r2
 8011358:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801135a:	89fb      	ldrh	r3, [r7, #14]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d006      	beq.n	801136e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 8011360:	68b8      	ldr	r0, [r7, #8]
 8011362:	f7f3 ff45 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011366:	4602      	mov	r2, r0
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	4413      	add	r3, r2
                        : nullptr;
 801136c:	e000      	b.n	8011370 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801136e:	2300      	movs	r3, #0
  }
 8011370:	4618      	mov	r0, r3
 8011372:	3710      	adds	r7, #16
 8011374:	46bd      	mov	sp, r7
 8011376:	bd80      	pop	{r7, pc}

08011378 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8011378:	b580      	push	{r7, lr}
 801137a:	b084      	sub	sp, #16
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	460b      	mov	r3, r1
 8011382:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8011384:	887b      	ldrh	r3, [r7, #2]
 8011386:	4619      	mov	r1, r3
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f7f2 fd6b 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 801138e:	4603      	mov	r3, r0
 8011390:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8011392:	687a      	ldr	r2, [r7, #4]
 8011394:	89fb      	ldrh	r3, [r7, #14]
 8011396:	4413      	add	r3, r2
 8011398:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801139a:	89fb      	ldrh	r3, [r7, #14]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d006      	beq.n	80113ae <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 80113a0:	68b8      	ldr	r0, [r7, #8]
 80113a2:	f7f3 ff25 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80113a6:	4602      	mov	r2, r0
 80113a8:	68bb      	ldr	r3, [r7, #8]
 80113aa:	4413      	add	r3, r2
                        : nullptr;
 80113ac:	e000      	b.n	80113b0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80113ae:	2300      	movs	r3, #0
  }
 80113b0:	4618      	mov	r0, r3
 80113b2:	3710      	adds	r7, #16
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}

080113b8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80113b8:	b580      	push	{r7, lr}
 80113ba:	b084      	sub	sp, #16
 80113bc:	af00      	add	r7, sp, #0
 80113be:	6078      	str	r0, [r7, #4]
 80113c0:	460b      	mov	r3, r1
 80113c2:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80113c4:	887b      	ldrh	r3, [r7, #2]
 80113c6:	4619      	mov	r1, r3
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7f2 fd4b 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80113ce:	4603      	mov	r3, r0
 80113d0:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	89fb      	ldrh	r3, [r7, #14]
 80113d6:	4413      	add	r3, r2
 80113d8:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80113da:	89fb      	ldrh	r3, [r7, #14]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d006      	beq.n	80113ee <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 80113e0:	68b8      	ldr	r0, [r7, #8]
 80113e2:	f7f3 ff05 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80113e6:	4602      	mov	r2, r0
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	4413      	add	r3, r2
                        : nullptr;
 80113ec:	e000      	b.n	80113f0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80113ee:	2300      	movs	r3, #0
  }
 80113f0:	4618      	mov	r0, r3
 80113f2:	3710      	adds	r7, #16
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	460b      	mov	r3, r1
 8011402:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8011404:	887b      	ldrh	r3, [r7, #2]
 8011406:	4619      	mov	r1, r3
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7f2 fd2b 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 801140e:	4603      	mov	r3, r0
 8011410:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	89fb      	ldrh	r3, [r7, #14]
 8011416:	4413      	add	r3, r2
 8011418:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801141a:	89fb      	ldrh	r3, [r7, #14]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d006      	beq.n	801142e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 8011420:	68b8      	ldr	r0, [r7, #8]
 8011422:	f7f3 fee5 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011426:	4602      	mov	r2, r0
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	4413      	add	r3, r2
                        : nullptr;
 801142c:	e000      	b.n	8011430 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801142e:	2300      	movs	r3, #0
  }
 8011430:	4618      	mov	r0, r3
 8011432:	3710      	adds	r7, #16
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8011438:	b580      	push	{r7, lr}
 801143a:	b084      	sub	sp, #16
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
 8011440:	460b      	mov	r3, r1
 8011442:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8011444:	887b      	ldrh	r3, [r7, #2]
 8011446:	4619      	mov	r1, r3
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f7f2 fd0b 	bl	8003e64 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 801144e:	4603      	mov	r3, r0
 8011450:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8011452:	687a      	ldr	r2, [r7, #4]
 8011454:	89fb      	ldrh	r3, [r7, #14]
 8011456:	4413      	add	r3, r2
 8011458:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801145a:	89fb      	ldrh	r3, [r7, #14]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d006      	beq.n	801146e <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 8011460:	68b8      	ldr	r0, [r7, #8]
 8011462:	f7f3 fec5 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011466:	4602      	mov	r2, r0
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	4413      	add	r3, r2
                        : nullptr;
 801146c:	e000      	b.n	8011470 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 801146e:	2300      	movs	r3, #0
  }
 8011470:	4618      	mov	r0, r3
 8011472:	3710      	adds	r7, #16
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}

08011478 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8011478:	b480      	push	{r7}
 801147a:	b083      	sub	sp, #12
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	3304      	adds	r3, #4
  }
 8011484:	4618      	mov	r0, r3
 8011486:	370c      	adds	r7, #12
 8011488:	46bd      	mov	sp, r7
 801148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148e:	4770      	bx	lr

08011490 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	687a      	ldr	r2, [r7, #4]
 80114a0:	4413      	add	r3, r2
 80114a2:	edd3 7a00 	vldr	s15, [r3]
 80114a6:	eeb0 0a67 	vmov.f32	s0, s15
 80114aa:	f7fc fe99 	bl	800e1e0 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 80114ae:	eef0 7a40 	vmov.f32	s15, s0
  }
 80114b2:	eeb0 0a67 	vmov.f32	s0, s15
 80114b6:	3708      	adds	r7, #8
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}

080114bc <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 80114bc:	b480      	push	{r7}
 80114be:	b083      	sub	sp, #12
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	3304      	adds	r3, #4
  }
 80114c8:	4618      	mov	r0, r3
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr

080114d4 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80114d4:	b590      	push	{r4, r7, lr}
 80114d6:	b083      	sub	sp, #12
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	00db      	lsls	r3, r3, #3
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	4413      	add	r3, r2
 80114e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80114ea:	4618      	mov	r0, r3
 80114ec:	4621      	mov	r1, r4
 80114ee:	f000 f8d3 	bl	8011698 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 80114f2:	4603      	mov	r3, r0
 80114f4:	460c      	mov	r4, r1
  }
 80114f6:	4618      	mov	r0, r3
 80114f8:	4621      	mov	r1, r4
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bd90      	pop	{r4, r7, pc}

08011500 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8011500:	b480      	push	{r7}
 8011502:	b083      	sub	sp, #12
 8011504:	af00      	add	r7, sp, #0
 8011506:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	3304      	adds	r3, #4
  }
 801150c:	4618      	mov	r0, r3
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr

08011518 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8011518:	b580      	push	{r7, lr}
 801151a:	b082      	sub	sp, #8
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	687a      	ldr	r2, [r7, #4]
 8011528:	4413      	add	r3, r2
 801152a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7f3 fe5f 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011532:	4602      	mov	r2, r0
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	4413      	add	r3, r2
  }
 8011538:	4618      	mov	r0, r3
 801153a:	3708      	adds	r7, #8
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	3304      	adds	r3, #4
  }
 801154c:	4618      	mov	r0, r3
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	009b      	lsls	r3, r3, #2
 8011566:	687a      	ldr	r2, [r7, #4]
 8011568:	4413      	add	r3, r2
 801156a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f7f3 fe3f 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011572:	4602      	mov	r2, r0
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	4413      	add	r3, r2
  }
 8011578:	4618      	mov	r0, r3
 801157a:	3708      	adds	r7, #8
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}

08011580 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	3304      	adds	r3, #4
  }
 801158c:	4618      	mov	r0, r3
 801158e:	370c      	adds	r7, #12
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr

08011598 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8011598:	b580      	push	{r7, lr}
 801159a:	b082      	sub	sp, #8
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
 80115a0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	009b      	lsls	r3, r3, #2
 80115a6:	687a      	ldr	r2, [r7, #4]
 80115a8:	4413      	add	r3, r2
 80115aa:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f7f3 fe1f 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80115b2:	4602      	mov	r2, r0
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	4413      	add	r3, r2
  }
 80115b8:	4618      	mov	r0, r3
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 80115c0:	b480      	push	{r7}
 80115c2:	b083      	sub	sp, #12
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	3304      	adds	r3, #4
  }
 80115cc:	4618      	mov	r0, r3
 80115ce:	370c      	adds	r7, #12
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	687a      	ldr	r2, [r7, #4]
 80115e8:	4413      	add	r3, r2
 80115ea:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80115ec:	6878      	ldr	r0, [r7, #4]
 80115ee:	f7f3 fdff 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80115f2:	4602      	mov	r2, r0
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	4413      	add	r3, r2
  }
 80115f8:	4618      	mov	r0, r3
 80115fa:	3708      	adds	r7, #8
 80115fc:	46bd      	mov	sp, r7
 80115fe:	bd80      	pop	{r7, pc}

08011600 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	3304      	adds	r3, #4
  }
 801160c:	4618      	mov	r0, r3
 801160e:	370c      	adds	r7, #12
 8011610:	46bd      	mov	sp, r7
 8011612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011616:	4770      	bx	lr

08011618 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8011618:	b580      	push	{r7, lr}
 801161a:	b082      	sub	sp, #8
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	009b      	lsls	r3, r3, #2
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	4413      	add	r3, r2
 801162a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 801162c:	6878      	ldr	r0, [r7, #4]
 801162e:	f7f3 fddf 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011632:	4602      	mov	r2, r0
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	4413      	add	r3, r2
  }
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	3304      	adds	r3, #4
  }
 801164c:	4618      	mov	r0, r3
 801164e:	370c      	adds	r7, #12
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr

08011658 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8011662:	683b      	ldr	r3, [r7, #0]
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	687a      	ldr	r2, [r7, #4]
 8011668:	4413      	add	r3, r2
 801166a:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f7f3 fdbf 	bl	80051f0 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8011672:	4602      	mov	r2, r0
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4413      	add	r3, r2
  }
 8011678:	4618      	mov	r0, r3
 801167a:	3708      	adds	r7, #8
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	3304      	adds	r3, #4
  }
 801168c:	4618      	mov	r0, r3
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8011698:	b490      	push	{r4, r7}
 801169a:	b082      	sub	sp, #8
 801169c:	af00      	add	r7, sp, #0
 801169e:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 80116a2:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	4621      	mov	r1, r4
 80116aa:	3708      	adds	r7, #8
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bc90      	pop	{r4, r7}
 80116b0:	4770      	bx	lr
	...

080116b4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	4a05      	ldr	r2, [pc, #20]	; (80116d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	601a      	str	r2, [r3, #0]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fd ff89 	bl	800f5dc <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	4618      	mov	r0, r3
 80116ce:	3708      	adds	r7, #8
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}
 80116d4:	0803dd3c 	.word	0x0803dd3c

080116d8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 80116d8:	b580      	push	{r7, lr}
 80116da:	b082      	sub	sp, #8
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6878      	ldr	r0, [r7, #4]
 80116e2:	f7ff ffe7 	bl	80116b4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 80116e6:	2108      	movs	r1, #8
 80116e8:	6878      	ldr	r0, [r7, #4]
 80116ea:	f004 fe4e 	bl	801638a <_ZdlPvj>
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	4618      	mov	r0, r3
 80116f2:	3708      	adds	r7, #8
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b0c4      	sub	sp, #272	; 0x110
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	f107 030c 	add.w	r3, r7, #12
 8011702:	6018      	str	r0, [r3, #0]
 8011704:	f107 0308 	add.w	r3, r7, #8
 8011708:	6019      	str	r1, [r3, #0]
 801170a:	1d3b      	adds	r3, r7, #4
 801170c:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 801170e:	1d3b      	adds	r3, r7, #4
 8011710:	f107 0208 	add.w	r2, r7, #8
 8011714:	f107 0010 	add.w	r0, r7, #16
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	6812      	ldr	r2, [r2, #0]
 801171c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8011720:	f000 fde0 	bl	80122e4 <MicroVsnprintf>
  DebugLog(log_buffer);
 8011724:	f107 0310 	add.w	r3, r7, #16
 8011728:	4618      	mov	r0, r3
 801172a:	f7fb fcf9 	bl	800d120 <_Z8DebugLogPKc>
  DebugLog("\r\n");
 801172e:	4804      	ldr	r0, [pc, #16]	; (8011740 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>)
 8011730:	f7fb fcf6 	bl	800d120 <_Z8DebugLogPKc>
#endif
  return 0;
 8011734:	2300      	movs	r3, #0
}
 8011736:	4618      	mov	r0, r3
 8011738:	f507 7788 	add.w	r7, r7, #272	; 0x110
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	0801e668 	.word	0x0801e668

08011744 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>:
  // comes from.
  virtual uint32_t BeginEvent(const char* tag, EventType event_type,
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
 8011744:	b5b0      	push	{r4, r5, r7, lr}
 8011746:	b088      	sub	sp, #32
 8011748:	af04      	add	r7, sp, #16
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	3308      	adds	r3, #8
 8011756:	681d      	ldr	r5, [r3, #0]
 8011758:	f04f 0300 	mov.w	r3, #0
 801175c:	f04f 0400 	mov.w	r4, #0
 8011760:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011764:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8011768:	e9cd 3400 	strd	r3, r4, [sp]
 801176c:	687a      	ldr	r2, [r7, #4]
 801176e:	68b9      	ldr	r1, [r7, #8]
 8011770:	68f8      	ldr	r0, [r7, #12]
 8011772:	47a8      	blx	r5
 8011774:	4603      	mov	r3, r0
  }
 8011776:	4618      	mov	r0, r3
 8011778:	3710      	adds	r7, #16
 801177a:	46bd      	mov	sp, r7
 801177c:	bdb0      	pop	{r4, r5, r7, pc}

0801177e <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>:
// of the object and ends when the object goes out of scope.
// The lifetime of tag should be at least the lifetime of `profiler`.
// `profiler` may be null, in which case nothing is profiled.
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
 801177e:	b590      	push	{r4, r7, lr}
 8011780:	b087      	sub	sp, #28
 8011782:	af02      	add	r7, sp, #8
 8011784:	60f8      	str	r0, [r7, #12]
 8011786:	60b9      	str	r1, [r7, #8]
 8011788:	607a      	str	r2, [r7, #4]
 801178a:	603b      	str	r3, [r7, #0]
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	68ba      	ldr	r2, [r7, #8]
 8011790:	601a      	str	r2, [r3, #0]
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2200      	movs	r2, #0
 8011796:	605a      	str	r2, [r3, #4]
    if (profiler) {
 8011798:	68bb      	ldr	r3, [r7, #8]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d00c      	beq.n	80117b8 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx+0x3a>
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	6818      	ldr	r0, [r3, #0]
 80117a2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80117a6:	e9cd 3400 	strd	r3, r4, [sp]
 80117aa:	683a      	ldr	r2, [r7, #0]
 80117ac:	6879      	ldr	r1, [r7, #4]
 80117ae:	f7ff ffc9 	bl	8011744 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>
 80117b2:	4602      	mov	r2, r0
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	605a      	str	r2, [r3, #4]
    }
  }
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	4618      	mov	r0, r3
 80117bc:	3714      	adds	r7, #20
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd90      	pop	{r4, r7, pc}

080117c2 <_ZN6tflite13ScopedProfileD1Ev>:

  ~ScopedProfile() {
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b082      	sub	sp, #8
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
    if (profiler_) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00a      	beq.n	80117e8 <_ZN6tflite13ScopedProfileD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6818      	ldr	r0, [r3, #0]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	3310      	adds	r3, #16
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	6852      	ldr	r2, [r2, #4]
 80117e4:	4611      	mov	r1, r2
 80117e6:	4798      	blx	r3
    }
  }
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4618      	mov	r0, r3
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>:
  uint32_t event_handle_;
};

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
 80117f2:	b590      	push	{r4, r7, lr}
 80117f4:	b087      	sub	sp, #28
 80117f6:	af02      	add	r7, sp, #8
 80117f8:	60f8      	str	r0, [r7, #12]
 80117fa:	60b9      	str	r1, [r7, #8]
 80117fc:	607a      	str	r2, [r7, #4]
 80117fe:	603b      	str	r3, [r7, #0]
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 8011800:	68f8      	ldr	r0, [r7, #12]
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	f04f 0400 	mov.w	r4, #0
 8011808:	e9cd 3400 	strd	r3, r4, [sp]
 801180c:	2302      	movs	r3, #2
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	68b9      	ldr	r1, [r7, #8]
 8011812:	f7ff ffb4 	bl	801177e <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	4618      	mov	r0, r3
 801181a:	3714      	adds	r7, #20
 801181c:	46bd      	mov	sp, r7
 801181e:	bd90      	pop	{r4, r7, pc}

08011820 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>:
// A helper class to encapsulate the implementation of APIs in Context.
// context->impl_ points to an instance of this class.
// Check tensorflow/lite/c/common.h for detailed descriptions.
class ContextHelper {
 public:
  explicit ContextHelper(ErrorReporter* error_reporter,
 8011820:	b480      	push	{r7}
 8011822:	b085      	sub	sp, #20
 8011824:	af00      	add	r7, sp, #0
 8011826:	60f8      	str	r0, [r7, #12]
 8011828:	60b9      	str	r1, [r7, #8]
 801182a:	607a      	str	r2, [r7, #4]
                         MicroAllocator* allocator)
      : allocator_(allocator), error_reporter_(error_reporter) {}
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	601a      	str	r2, [r3, #0]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	68ba      	ldr	r2, [r7, #8]
 8011836:	605a      	str	r2, [r3, #4]
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f04f 32ff 	mov.w	r2, #4294967295
 801183e:	609a      	str	r2, [r3, #8]
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	4618      	mov	r0, r3
 8011844:	3714      	adds	r7, #20
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr

0801184e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>:
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
 801184e:	b480      	push	{r7}
 8011850:	b083      	sub	sp, #12
 8011852:	af00      	add	r7, sp, #0
 8011854:	6078      	str	r0, [r7, #4]
 8011856:	6039      	str	r1, [r7, #0]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	683a      	ldr	r2, [r7, #0]
 801185c:	609a      	str	r2, [r3, #8]
 801185e:	bf00      	nop
 8011860:	370c      	adds	r7, #12
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr

0801186a <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 801186a:	b580      	push	{r7, lr}
 801186c:	b082      	sub	sp, #8
 801186e:	af00      	add	r7, sp, #0
 8011870:	6078      	str	r0, [r7, #4]
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011876:	4618      	mov	r0, r3
 8011878:	f7fd fe23 	bl	800f4c2 <_ZNK6tflite8SubGraph6inputsEv>
 801187c:	4603      	mov	r3, r0
 801187e:	4618      	mov	r0, r3
 8011880:	f7fd fd70 	bl	800f364 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8011884:	4603      	mov	r3, r0
 8011886:	4618      	mov	r0, r3
 8011888:	3708      	adds	r7, #8
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 801188e:	b580      	push	{r7, lr}
 8011890:	b082      	sub	sp, #8
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801189a:	4618      	mov	r0, r3
 801189c:	f7fd fe11 	bl	800f4c2 <_ZNK6tflite8SubGraph6inputsEv>
 80118a0:	4603      	mov	r3, r0
  }
 80118a2:	4618      	mov	r0, r3
 80118a4:	3708      	adds	r7, #8
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}

080118aa <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 80118aa:	b580      	push	{r7, lr}
 80118ac:	b082      	sub	sp, #8
 80118ae:	af00      	add	r7, sp, #0
 80118b0:	6078      	str	r0, [r7, #4]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fd fe11 	bl	800f4de <_ZNK6tflite8SubGraph7outputsEv>
 80118bc:	4603      	mov	r3, r0
 80118be:	4618      	mov	r0, r3
 80118c0:	f7fd fd50 	bl	800f364 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 80118c4:	4603      	mov	r3, r0
 80118c6:	4618      	mov	r0, r3
 80118c8:	3708      	adds	r7, #8
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd80      	pop	{r7, pc}

080118ce <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b082      	sub	sp, #8
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118da:	4618      	mov	r0, r3
 80118dc:	f7fd fdff 	bl	800f4de <_ZNK6tflite8SubGraph7outputsEv>
 80118e0:	4603      	mov	r3, r0
  }
 80118e2:	4618      	mov	r0, r3
 80118e4:	3708      	adds	r7, #8
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}

080118ea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
#include "edge-impulse-sdk/tensorflow/lite/schema/schema_generated.h"

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 80118ea:	b580      	push	{r7, lr}
 80118ec:	b082      	sub	sp, #8
 80118ee:	af00      	add	r7, sp, #0
 80118f0:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	695b      	ldr	r3, [r3, #20]
 80118f6:	2b20      	cmp	r3, #32
 80118f8:	d102      	bne.n	8011900 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	699b      	ldr	r3, [r3, #24]
 80118fe:	e006      	b.n	801190e <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	695b      	ldr	r3, [r3, #20]
 8011904:	b2db      	uxtb	r3, r3
 8011906:	4618      	mov	r0, r3
 8011908:	f7fc fe96 	bl	800e638 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 801190c:	4603      	mov	r3, r0
  }
}
 801190e:	4618      	mov	r0, r3
 8011910:	3708      	adds	r7, #8
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}

08011916 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
}  // namespace

namespace internal {

TfLiteStatus ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                     size_t bytes, void** ptr) {
 8011916:	b580      	push	{r7, lr}
 8011918:	b084      	sub	sp, #16
 801191a:	af00      	add	r7, sp, #0
 801191c:	60f8      	str	r0, [r7, #12]
 801191e:	60b9      	str	r1, [r7, #8]
 8011920:	607a      	str	r2, [r7, #4]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	687a      	ldr	r2, [r7, #4]
 801192a:	68b9      	ldr	r1, [r7, #8]
 801192c:	4618      	mov	r0, r3
 801192e:	f7fe fccf 	bl	80102d0 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>
 8011932:	4603      	mov	r3, r0
}
 8011934:	4618      	mov	r0, r3
 8011936:	3710      	adds	r7, #16
 8011938:	46bd      	mov	sp, r7
 801193a:	bd80      	pop	{r7, pc}

0801193c <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 801193c:	b580      	push	{r7, lr}
 801193e:	b086      	sub	sp, #24
 8011940:	af00      	add	r7, sp, #0
 8011942:	60f8      	str	r0, [r7, #12]
 8011944:	60b9      	str	r1, [r7, #8]
 8011946:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	6818      	ldr	r0, [r3, #0]
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	6899      	ldr	r1, [r3, #8]
      helper->current_node_idx_, bytes, buffer_idx);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	68ba      	ldr	r2, [r7, #8]
 801195a:	f7fe fce1 	bl	8010320 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>
 801195e:	4603      	mov	r3, r0
}
 8011960:	4618      	mov	r0, r3
 8011962:	3718      	adds	r7, #24
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}

08011968 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 8011968:	b580      	push	{r7, lr}
 801196a:	b082      	sub	sp, #8
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	68db      	ldr	r3, [r3, #12]
      ->allocator_->GetScratchBuffer(buffer_idx);
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	6839      	ldr	r1, [r7, #0]
 801197a:	4618      	mov	r0, r3
 801197c:	f7fe fd2c 	bl	80103d8 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>
 8011980:	4603      	mov	r3, r0
}
 8011982:	4618      	mov	r0, r3
 8011984:	3708      	adds	r7, #8
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 801198a:	b40e      	push	{r1, r2, r3}
 801198c:	b580      	push	{r7, lr}
 801198e:	b085      	sub	sp, #20
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 801199a:	f107 0320 	add.w	r3, r7, #32
 801199e:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	6858      	ldr	r0, [r3, #4]
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	3308      	adds	r3, #8
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	68ba      	ldr	r2, [r7, #8]
 80119b0:	69f9      	ldr	r1, [r7, #28]
 80119b2:	4798      	blx	r3
  va_end(args);
}
 80119b4:	bf00      	nop
 80119b6:	3714      	adds	r7, #20
 80119b8:	46bd      	mov	sp, r7
 80119ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80119be:	b003      	add	sp, #12
 80119c0:	4770      	bx	lr

080119c2 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 80119c2:	b580      	push	{r7, lr}
 80119c4:	b084      	sub	sp, #16
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	60f8      	str	r0, [r7, #12]
 80119ca:	60b9      	str	r1, [r7, #8]
 80119cc:	607a      	str	r2, [r7, #4]
 80119ce:	603b      	str	r3, [r7, #0]
      error_reporter_(error_reporter),
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
                                         error_reporter)),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	2200      	movs	r2, #0
 80119d4:	601a      	str	r2, [r3, #0]
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	68ba      	ldr	r2, [r7, #8]
 80119da:	605a      	str	r2, [r3, #4]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	609a      	str	r2, [r3, #8]
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	69fa      	ldr	r2, [r7, #28]
 80119e6:	60da      	str	r2, [r3, #12]
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	3310      	adds	r3, #16
 80119ec:	2250      	movs	r2, #80	; 0x50
 80119ee:	2100      	movs	r1, #0
 80119f0:	4618      	mov	r0, r3
 80119f2:	f007 fc97 	bl	8019324 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 80119f6:	69fa      	ldr	r2, [r7, #28]
 80119f8:	69b9      	ldr	r1, [r7, #24]
 80119fa:	6838      	ldr	r0, [r7, #0]
 80119fc:	f7fe fb62 	bl	80100c4 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 8011a00:	4602      	mov	r2, r0
      context_helper_(error_reporter_, &allocator_) {
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	661a      	str	r2, [r3, #96]	; 0x60
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	2201      	movs	r2, #1
 8011a12:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	68d9      	ldr	r1, [r3, #12]
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a24:	461a      	mov	r2, r3
 8011a26:	f7ff fefb 	bl	8011820 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>
  Init(profiler);
 8011a2a:	6a39      	ldr	r1, [r7, #32]
 8011a2c:	68f8      	ldr	r0, [r7, #12]
 8011a2e:	f000 f84d 	bl	8011acc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	4618      	mov	r0, r3
 8011a36:	3710      	adds	r7, #16
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <_ZN6tflite16MicroInterpreterD1Ev>:
      context_helper_(error_reporter_, &allocator_) {

  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b086      	sub	sp, #24
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d03a      	beq.n	8011ac2 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	617b      	str	r3, [r7, #20]
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fd fd50 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7ff fa5f 	bl	8010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8011a62:	4602      	mov	r2, r0
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	4293      	cmp	r3, r2
 8011a68:	bf34      	ite	cc
 8011a6a:	2301      	movcc	r3, #1
 8011a6c:	2300      	movcs	r3, #0
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d026      	beq.n	8011ac2 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	6819      	ldr	r1, [r3, #0]
 8011a78:	697a      	ldr	r2, [r7, #20]
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	009b      	lsls	r3, r3, #2
 8011a7e:	4413      	add	r3, r2
 8011a80:	00db      	lsls	r3, r3, #3
 8011a82:	440b      	add	r3, r1
 8011a84:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6819      	ldr	r1, [r3, #0]
 8011a8a:	697a      	ldr	r2, [r7, #20]
 8011a8c:	4613      	mov	r3, r2
 8011a8e:	009b      	lsls	r3, r3, #2
 8011a90:	4413      	add	r3, r2
 8011a92:	00db      	lsls	r3, r3, #3
 8011a94:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 8011a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a98:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d00c      	beq.n	8011aba <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	685b      	ldr	r3, [r3, #4]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d008      	beq.n	8011aba <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
        registration->free(&context_, node->user_data);
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	685b      	ldr	r3, [r3, #4]
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	f102 0010 	add.w	r0, r2, #16
 8011ab2:	693a      	ldr	r2, [r7, #16]
 8011ab4:	6912      	ldr	r2, [r2, #16]
 8011ab6:	4611      	mov	r1, r2
 8011ab8:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	3301      	adds	r3, #1
 8011abe:	617b      	str	r3, [r7, #20]
 8011ac0:	e7c6      	b.n	8011a50 <_ZN6tflite16MicroInterpreterD1Ev+0x14>
      }
    }
  }
}
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	3718      	adds	r7, #24
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f7fd fd54 	bl	800f588 <_ZNK6tflite5Model9subgraphsEv>
 8011ae0:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 8011ae2:	68f8      	ldr	r0, [r7, #12]
 8011ae4:	f7ff fa84 	bl	8010ff0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	2b01      	cmp	r3, #1
 8011aec:	bf14      	ite	ne
 8011aee:	2301      	movne	r3, #1
 8011af0:	2300      	moveq	r3, #0
 8011af2:	b2db      	uxtb	r3, r3
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d00a      	beq.n	8011b0e <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	68db      	ldr	r3, [r3, #12]
 8011afc:	4912      	ldr	r1, [pc, #72]	; (8011b48 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x7c>)
 8011afe:	4618      	mov	r0, r3
 8011b00:	f7fb fd34 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2201      	movs	r2, #1
 8011b08:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    return;
 8011b0c:	e018      	b.n	8011b40 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x74>
  }
  subgraph_ = (*subgraphs)[0];
 8011b0e:	2100      	movs	r1, #0
 8011b10:	68f8      	ldr	r0, [r7, #12]
 8011b12:	f7ff fb09 	bl	8011128 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 8011b16:	4602      	mov	r2, r0
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	669a      	str	r2, [r3, #104]	; 0x68

  context_.impl_ = static_cast<void*>(&context_helper_);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	4a08      	ldr	r2, [pc, #32]	; (8011b4c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>)
 8011b2a:	625a      	str	r2, [r3, #36]	; 0x24
  context_.recommended_num_threads = 1;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	2201      	movs	r2, #1
 8011b30:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	683a      	ldr	r2, [r7, #0]
 8011b36:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	0801ec44 	.word	0x0801ec44
 8011b4c:	0801198b 	.word	0x0801198b

08011b50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8011b50:	b590      	push	{r4, r7, lr}
 8011b52:	b08f      	sub	sp, #60	; 0x3c
 8011b54:	af02      	add	r7, sp, #8
 8011b56:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6859      	ldr	r1, [r3, #4]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f103 0210 	add.w	r2, r3, #16
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	689c      	ldr	r4, [r3, #8]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	4623      	mov	r3, r4
 8011b70:	f7fe fb06 	bl	8010180 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
 8011b74:	4603      	mov	r3, r0
                                      &node_and_registrations_) != kTfLiteOk) {
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	bf14      	ite	ne
 8011b7a:	2301      	movne	r3, #1
 8011b7c:	2300      	moveq	r3, #0
 8011b7e:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d00b      	beq.n	8011b9c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	68db      	ldr	r3, [r3, #12]
 8011b88:	4973      	ldr	r1, [pc, #460]	; (8011d58 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x208>)
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7fb fcee 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2201      	movs	r2, #1
 8011b94:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    return kTfLiteError;
 8011b98:	2301      	movs	r3, #1
 8011b9a:	e0d9      	b.n	8011d50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
        CorrectTensorEndianness(thisTensor);
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	4a6f      	ldr	r2, [pc, #444]	; (8011d5c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20c>)
 8011ba0:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	2200      	movs	r2, #0
 8011bac:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8011bae:	2300      	movs	r3, #0
 8011bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7fd fc9f 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7ff f9ae 	bl	8010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8011bc4:	4602      	mov	r2, r0
 8011bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bc8:	4293      	cmp	r3, r2
 8011bca:	bf34      	ite	cc
 8011bcc:	2301      	movcc	r3, #1
 8011bce:	2300      	movcs	r3, #0
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d03c      	beq.n	8011c50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x100>
    context_helper_.SetNodeIndex(i);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	336c      	adds	r3, #108	; 0x6c
 8011bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bdc:	4611      	mov	r1, r2
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ff fe35 	bl	801184e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6819      	ldr	r1, [r3, #0]
 8011be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bea:	4613      	mov	r3, r2
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	4413      	add	r3, r2
 8011bf0:	00db      	lsls	r3, r3, #3
 8011bf2:	440b      	add	r3, r1
 8011bf4:	613b      	str	r3, [r7, #16]
    auto* registration = node_and_registrations_[i].registration;
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6819      	ldr	r1, [r3, #0]
 8011bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bfc:	4613      	mov	r3, r2
 8011bfe:	009b      	lsls	r3, r3, #2
 8011c00:	4413      	add	r3, r2
 8011c02:	00db      	lsls	r3, r3, #3
 8011c04:	440b      	add	r3, r1
 8011c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c08:	60fb      	str	r3, [r7, #12]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	695b      	ldr	r3, [r3, #20]
 8011c0e:	2b20      	cmp	r3, #32
 8011c10:	d106      	bne.n	8011c20 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd0>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	699b      	ldr	r3, [r3, #24]
 8011c16:	627b      	str	r3, [r7, #36]	; 0x24
      init_data_size = node->custom_initial_data_size;
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	69db      	ldr	r3, [r3, #28]
 8011c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c1e:	e004      	b.n	8011c2a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	695b      	ldr	r3, [r3, #20]
 8011c24:	627b      	str	r3, [r7, #36]	; 0x24
      init_data_size = 0;
 8011c26:	2300      	movs	r3, #0
 8011c28:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (registration->init) {
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d00a      	beq.n	8011c48 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf8>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	687a      	ldr	r2, [r7, #4]
 8011c38:	f102 0010 	add.w	r0, r2, #16
 8011c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c40:	4798      	blx	r3
 8011c42:	4602      	mov	r2, r0
      node->user_data =
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8011c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c4a:	3301      	adds	r3, #1
 8011c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c4e:	e7b0      	b.n	8011bb2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62>
    }
  }
  context_helper_.SetNodeIndex(-1);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	336c      	adds	r3, #108	; 0x6c
 8011c54:	f04f 31ff 	mov.w	r1, #4294967295
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7ff fdf8 	bl	801184e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is available
  // in Prepare stage.
  context_.RequestScratchBufferInArena =
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	4a3f      	ldr	r2, [pc, #252]	; (8011d60 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x210>)
 8011c62:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8011c64:	2300      	movs	r3, #0
 8011c66:	623b      	str	r3, [r7, #32]
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7fd fc44 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 8011c72:	4603      	mov	r3, r0
 8011c74:	4618      	mov	r0, r3
 8011c76:	f7ff f953 	bl	8010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	6a3b      	ldr	r3, [r7, #32]
 8011c7e:	4293      	cmp	r3, r2
 8011c80:	bf34      	ite	cc
 8011c82:	2301      	movcc	r3, #1
 8011c84:	2300      	movcs	r3, #0
 8011c86:	b2db      	uxtb	r3, r3
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d03c      	beq.n	8011d06 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b6>
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	336c      	adds	r3, #108	; 0x6c
 8011c90:	6a3a      	ldr	r2, [r7, #32]
 8011c92:	4611      	mov	r1, r2
 8011c94:	4618      	mov	r0, r3
 8011c96:	f7ff fdda 	bl	801184e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6819      	ldr	r1, [r3, #0]
 8011c9e:	6a3a      	ldr	r2, [r7, #32]
 8011ca0:	4613      	mov	r3, r2
 8011ca2:	009b      	lsls	r3, r3, #2
 8011ca4:	4413      	add	r3, r2
 8011ca6:	00db      	lsls	r3, r3, #3
 8011ca8:	440b      	add	r3, r1
 8011caa:	61fb      	str	r3, [r7, #28]
    auto* registration = node_and_registrations_[i].registration;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6819      	ldr	r1, [r3, #0]
 8011cb0:	6a3a      	ldr	r2, [r7, #32]
 8011cb2:	4613      	mov	r3, r2
 8011cb4:	009b      	lsls	r3, r3, #2
 8011cb6:	4413      	add	r3, r2
 8011cb8:	00db      	lsls	r3, r3, #3
 8011cba:	440b      	add	r3, r1
 8011cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cbe:	61bb      	str	r3, [r7, #24]
    if (registration->prepare) {
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	689b      	ldr	r3, [r3, #8]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d01a      	beq.n	8011cfe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 8011cc8:	69bb      	ldr	r3, [r7, #24]
 8011cca:	689b      	ldr	r3, [r3, #8]
 8011ccc:	687a      	ldr	r2, [r7, #4]
 8011cce:	3210      	adds	r2, #16
 8011cd0:	69f9      	ldr	r1, [r7, #28]
 8011cd2:	4610      	mov	r0, r2
 8011cd4:	4798      	blx	r3
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	75fb      	strb	r3, [r7, #23]
      if (prepare_status != kTfLiteOk) {
 8011cda:	7dfb      	ldrb	r3, [r7, #23]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00e      	beq.n	8011cfe <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
        TF_LITE_REPORT_ERROR(
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	68dc      	ldr	r4, [r3, #12]
 8011ce4:	69b8      	ldr	r0, [r7, #24]
 8011ce6:	f7ff fe00 	bl	80118ea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8011cea:	4602      	mov	r2, r0
 8011cec:	7dfb      	ldrb	r3, [r7, #23]
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	6a3b      	ldr	r3, [r7, #32]
 8011cf2:	491c      	ldr	r1, [pc, #112]	; (8011d64 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x214>)
 8011cf4:	4620      	mov	r0, r4
 8011cf6:	f7fb fc39 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	e028      	b.n	8011d50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8011cfe:	6a3b      	ldr	r3, [r7, #32]
 8011d00:	3301      	adds	r3, #1
 8011d02:	623b      	str	r3, [r7, #32]
 8011d04:	e7b0      	b.n	8011c68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
      }
    }
  }
  context_helper_.SetNodeIndex(-1);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	336c      	adds	r3, #108	; 0x6c
 8011d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7ff fd9d 	bl	801184e <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2200      	movs	r2, #0
 8011d18:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	4a11      	ldr	r2, [pc, #68]	; (8011d68 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>)
 8011d24:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	6859      	ldr	r1, [r3, #4]
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	3310      	adds	r3, #16
 8011d32:	461a      	mov	r2, r3
 8011d34:	f7fe fa84 	bl	8010240 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	72fb      	strb	r3, [r7, #11]
 8011d3c:	7afb      	ldrb	r3, [r7, #11]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d001      	beq.n	8011d46 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1f6>
 8011d42:	7afb      	ldrb	r3, [r7, #11]
 8011d44:	e004      	b.n	8011d50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
                    allocator_.FinishModelAllocation(model_, &context_));
  tensors_allocated_ = true;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2201      	movs	r2, #1
 8011d4a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  return kTfLiteOk;
 8011d4e:	2300      	movs	r3, #0
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	3734      	adds	r7, #52	; 0x34
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd90      	pop	{r4, r7, pc}
 8011d58:	0801ec70 	.word	0x0801ec70
 8011d5c:	08011917 	.word	0x08011917
 8011d60:	0801193d 	.word	0x0801193d
 8011d64:	0801ec94 	.word	0x0801ec94
 8011d68:	08011969 	.word	0x08011969

08011d6c <_ZN6tflite21ScopedOperatorProfileD1Ev>:
class ScopedOperatorProfile : public ScopedProfile {
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	4618      	mov	r0, r3
 8011d78:	f7ff fd23 	bl	80117c2 <_ZN6tflite13ScopedProfileD1Ev>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3708      	adds	r7, #8
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
	...

08011d88 <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 8011d88:	b5b0      	push	{r4, r5, r7, lr}
 8011d8a:	b08c      	sub	sp, #48	; 0x30
 8011d8c:	af02      	add	r7, sp, #8
 8011d8e:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d007      	beq.n	8011daa <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	68db      	ldr	r3, [r3, #12]
 8011d9e:	4942      	ldr	r1, [pc, #264]	; (8011ea8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x120>)
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fb fbe3 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 8011da6:	2401      	movs	r4, #1
 8011da8:	e079      	b.n	8011e9e <_ZN6tflite16MicroInterpreter6InvokeEv+0x116>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8011db0:	f083 0301 	eor.w	r3, r3, #1
 8011db4:	b2db      	uxtb	r3, r3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d009      	beq.n	8011dce <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f7ff fec8 	bl	8011b50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8011dc0:	4603      	mov	r3, r0
 8011dc2:	75bb      	strb	r3, [r7, #22]
 8011dc4:	7dbb      	ldrb	r3, [r7, #22]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d001      	beq.n	8011dce <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 8011dca:	7dbc      	ldrb	r4, [r7, #22]
 8011dcc:	e067      	b.n	8011e9e <_ZN6tflite16MicroInterpreter6InvokeEv+0x116>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8011dce:	2300      	movs	r3, #0
 8011dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fd fb8f 	bl	800f4fa <_ZNK6tflite8SubGraph9operatorsEv>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	4618      	mov	r0, r3
 8011de0:	f7ff f89e 	bl	8010f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8011de4:	4602      	mov	r2, r0
 8011de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011de8:	4293      	cmp	r3, r2
 8011dea:	bf34      	ite	cc
 8011dec:	2301      	movcc	r3, #1
 8011dee:	2300      	movcs	r3, #0
 8011df0:	b2db      	uxtb	r3, r3
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d052      	beq.n	8011e9c <_ZN6tflite16MicroInterpreter6InvokeEv+0x114>
    auto* node = &(node_and_registrations_[i].node);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6819      	ldr	r1, [r3, #0]
 8011dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dfc:	4613      	mov	r3, r2
 8011dfe:	009b      	lsls	r3, r3, #2
 8011e00:	4413      	add	r3, r2
 8011e02:	00db      	lsls	r3, r3, #3
 8011e04:	440b      	add	r3, r1
 8011e06:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6819      	ldr	r1, [r3, #0]
 8011e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e0e:	4613      	mov	r3, r2
 8011e10:	009b      	lsls	r3, r3, #2
 8011e12:	4413      	add	r3, r2
 8011e14:	00db      	lsls	r3, r3, #3
 8011e16:	440b      	add	r3, r1
 8011e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e1a:	61fb      	str	r3, [r7, #28]

    if (registration->invoke) {
 8011e1c:	69fb      	ldr	r3, [r7, #28]
 8011e1e:	68db      	ldr	r3, [r3, #12]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d037      	beq.n	8011e94 <_ZN6tflite16MicroInterpreter6InvokeEv+0x10c>
      TfLiteStatus invoke_status;
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by ScopedOperatorProfile.
      tflite::Profiler* profiler =
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e28:	61bb      	str	r3, [r7, #24]
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
 8011e2a:	69f8      	ldr	r0, [r7, #28]
 8011e2c:	f7ff fd5d 	bl	80118ea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8011e30:	4602      	mov	r2, r0
 8011e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e34:	f107 000c 	add.w	r0, r7, #12
 8011e38:	69b9      	ldr	r1, [r7, #24]
 8011e3a:	f7ff fcda 	bl	80117f2 <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>
#endif
      invoke_status = registration->invoke(&context_, node);
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	68db      	ldr	r3, [r3, #12]
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	3210      	adds	r2, #16
 8011e46:	6a39      	ldr	r1, [r7, #32]
 8011e48:	4610      	mov	r0, r2
 8011e4a:	4798      	blx	r3
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	75fb      	strb	r3, [r7, #23]

      if (invoke_status == kTfLiteError) {
 8011e50:	7dfb      	ldrb	r3, [r7, #23]
 8011e52:	2b01      	cmp	r3, #1
 8011e54:	d10f      	bne.n	8011e76 <_ZN6tflite16MicroInterpreter6InvokeEv+0xee>
        TF_LITE_REPORT_ERROR(
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	68dc      	ldr	r4, [r3, #12]
 8011e5a:	69f8      	ldr	r0, [r7, #28]
 8011e5c:	f7ff fd45 	bl	80118ea <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8011e60:	4602      	mov	r2, r0
 8011e62:	7dfb      	ldrb	r3, [r7, #23]
 8011e64:	9300      	str	r3, [sp, #0]
 8011e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e68:	4910      	ldr	r1, [pc, #64]	; (8011eac <_ZN6tflite16MicroInterpreter6InvokeEv+0x124>)
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	f7fb fb7e 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 8011e70:	2401      	movs	r4, #1
 8011e72:	2500      	movs	r5, #0
 8011e74:	e006      	b.n	8011e84 <_ZN6tflite16MicroInterpreter6InvokeEv+0xfc>
      } else if (invoke_status != kTfLiteOk) {
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d002      	beq.n	8011e82 <_ZN6tflite16MicroInterpreter6InvokeEv+0xfa>
        return invoke_status;
 8011e7c:	7dfc      	ldrb	r4, [r7, #23]
 8011e7e:	2500      	movs	r5, #0
 8011e80:	e000      	b.n	8011e84 <_ZN6tflite16MicroInterpreter6InvokeEv+0xfc>
 8011e82:	2501      	movs	r5, #1
 8011e84:	f107 030c 	add.w	r3, r7, #12
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7ff ff6f 	bl	8011d6c <_ZN6tflite21ScopedOperatorProfileD1Ev>
 8011e8e:	2d01      	cmp	r5, #1
 8011e90:	d105      	bne.n	8011e9e <_ZN6tflite16MicroInterpreter6InvokeEv+0x116>
          profiler, OpNameFromRegistration(registration), i);
 8011e92:	bf00      	nop
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8011e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e96:	3301      	adds	r3, #1
 8011e98:	627b      	str	r3, [r7, #36]	; 0x24
 8011e9a:	e79a      	b.n	8011dd2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x4a>
      }
    }
  }
  return kTfLiteOk;
 8011e9c:	2400      	movs	r4, #0
 8011e9e:	4623      	mov	r3, r4
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	3728      	adds	r7, #40	; 0x28
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8011ea8:	0801eccc 	.word	0x0801eccc
 8011eac:	0801ecfc 	.word	0x0801ecfc

08011eb0 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8011eb0:	b590      	push	{r4, r7, lr}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f7ff fcd5 	bl	801186a <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8011ec0:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 8011ec2:	683a      	ldr	r2, [r7, #0]
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	429a      	cmp	r2, r3
 8011ec8:	d308      	bcc.n	8011edc <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	68d8      	ldr	r0, [r3, #12]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	683a      	ldr	r2, [r7, #0]
 8011ed2:	490b      	ldr	r1, [pc, #44]	; (8011f00 <_ZN6tflite16MicroInterpreter5inputEj+0x50>)
 8011ed4:	f7fb fb4a 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	e00c      	b.n	8011ef6 <_ZN6tflite16MicroInterpreter5inputEj+0x46>
  }
  return &(context_.tensors[inputs().Get(index)]);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	699c      	ldr	r4, [r3, #24]
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f7ff fcd4 	bl	801188e <_ZNK6tflite16MicroInterpreter6inputsEv>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	6839      	ldr	r1, [r7, #0]
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7fb feac 	bl	800dc48 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	019b      	lsls	r3, r3, #6
 8011ef4:	4423      	add	r3, r4
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3714      	adds	r7, #20
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd90      	pop	{r4, r7, pc}
 8011efe:	bf00      	nop
 8011f00:	0801ed30 	.word	0x0801ed30

08011f04 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8011f04:	b590      	push	{r4, r7, lr}
 8011f06:	b085      	sub	sp, #20
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
 8011f0c:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 8011f0e:	6878      	ldr	r0, [r7, #4]
 8011f10:	f7ff fccb 	bl	80118aa <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8011f14:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 8011f16:	683a      	ldr	r2, [r7, #0]
 8011f18:	68fb      	ldr	r3, [r7, #12]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d308      	bcc.n	8011f30 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	68d8      	ldr	r0, [r3, #12]
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	683a      	ldr	r2, [r7, #0]
 8011f26:	490b      	ldr	r1, [pc, #44]	; (8011f54 <_ZN6tflite16MicroInterpreter6outputEj+0x50>)
 8011f28:	f7fb fb20 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	e00c      	b.n	8011f4a <_ZN6tflite16MicroInterpreter6outputEj+0x46>
  }
  return &(context_.tensors[outputs().Get(index)]);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	699c      	ldr	r4, [r3, #24]
 8011f34:	6878      	ldr	r0, [r7, #4]
 8011f36:	f7ff fcca 	bl	80118ce <_ZNK6tflite16MicroInterpreter7outputsEv>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7fb fe82 	bl	800dc48 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8011f44:	4603      	mov	r3, r0
 8011f46:	019b      	lsls	r3, r3, #6
 8011f48:	4423      	add	r3, r4
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3714      	adds	r7, #20
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd90      	pop	{r4, r7, pc}
 8011f52:	bf00      	nop
 8011f54:	0801ed5c 	.word	0x0801ed5c

08011f58 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 8011f58:	b480      	push	{r7}
 8011f5a:	b087      	sub	sp, #28
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
 8011f60:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	3b01      	subs	r3, #1
 8011f6a:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 8011f6c:	697a      	ldr	r2, [r7, #20]
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d20e      	bcs.n	8011f92 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	1c5a      	adds	r2, r3, #1
 8011f7e:	617a      	str	r2, [r7, #20]
 8011f80:	693a      	ldr	r2, [r7, #16]
 8011f82:	7812      	ldrb	r2, [r2, #0]
 8011f84:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	1e5a      	subs	r2, r3, #1
 8011f8a:	613a      	str	r2, [r7, #16]
 8011f8c:	7bfa      	ldrb	r2, [r7, #15]
 8011f8e:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 8011f90:	e7ec      	b.n	8011f6c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 8011f92:	687b      	ldr	r3, [r7, #4]
}
 8011f94:	4618      	mov	r0, r3
 8011f96:	371c      	adds	r7, #28
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9e:	4770      	bx	lr

08011fa0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 8011fa0:	b480      	push	{r7}
 8011fa2:	b087      	sub	sp, #28
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	607a      	str	r2, [r7, #4]
  char* current = main;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8011fb0:	697b      	ldr	r3, [r7, #20]
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d003      	beq.n	8011fc0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8011fbe:	e7f7      	b.n	8011fb0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	3b01      	subs	r3, #1
 8011fc4:	68fa      	ldr	r2, [r7, #12]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d00e      	beq.n	8011ff0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 8011fd2:	697a      	ldr	r2, [r7, #20]
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d20a      	bcs.n	8011ff0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	781a      	ldrb	r2, [r3, #0]
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	701a      	strb	r2, [r3, #0]
    ++current;
 8011fe2:	697b      	ldr	r3, [r7, #20]
 8011fe4:	3301      	adds	r3, #1
 8011fe6:	617b      	str	r3, [r7, #20]
    ++to_append;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	3301      	adds	r3, #1
 8011fec:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 8011fee:	e7ec      	b.n	8011fca <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 8011ff0:	697b      	ldr	r3, [r7, #20]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	701a      	strb	r2, [r3, #0]
  return current;
 8011ff6:	697b      	ldr	r3, [r7, #20]
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	371c      	adds	r7, #28
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012002:	4770      	bx	lr

08012004 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8012004:	b580      	push	{r7, lr}
 8012006:	b088      	sub	sp, #32
 8012008:	af00      	add	r7, sp, #0
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	60b9      	str	r1, [r7, #8]
 801200e:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8012010:	68bb      	ldr	r3, [r7, #8]
 8012012:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	fbb3 f1f2 	udiv	r1, r3, r2
 801201c:	fb02 f201 	mul.w	r2, r2, r1
 8012020:	1a9b      	subs	r3, r3, r2
 8012022:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	2b09      	cmp	r3, #9
 8012028:	dc04      	bgt.n	8012034 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	b2db      	uxtb	r3, r3
 801202e:	3330      	adds	r3, #48	; 0x30
 8012030:	77fb      	strb	r3, [r7, #31]
 8012032:	e003      	b.n	801203c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 8012034:	697b      	ldr	r3, [r7, #20]
 8012036:	b2db      	uxtb	r3, r3
 8012038:	3357      	adds	r3, #87	; 0x57
 801203a:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 801203c:	68bb      	ldr	r3, [r7, #8]
 801203e:	1c5a      	adds	r2, r3, #1
 8012040:	60ba      	str	r2, [r7, #8]
 8012042:	7ffa      	ldrb	r2, [r7, #31]
 8012044:	701a      	strb	r2, [r3, #0]
    i /= base;
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	68fa      	ldr	r2, [r7, #12]
 801204a:	fbb2 f3f3 	udiv	r3, r2, r3
 801204e:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d000      	beq.n	8012058 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 8012056:	e7dd      	b.n	8012014 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 8012058:	68bb      	ldr	r3, [r7, #8]
 801205a:	2200      	movs	r2, #0
 801205c:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 801205e:	68b9      	ldr	r1, [r7, #8]
 8012060:	69b8      	ldr	r0, [r7, #24]
 8012062:	f7ff ff79 	bl	8011f58 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 8012066:	68bb      	ldr	r3, [r7, #8]
}
 8012068:	4618      	mov	r0, r3
 801206a:	3720      	adds	r7, #32
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}

08012070 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 8012070:	b580      	push	{r7, lr}
 8012072:	b084      	sub	sp, #16
 8012074:	af00      	add	r7, sp, #0
 8012076:	6078      	str	r0, [r7, #4]
 8012078:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	2b00      	cmp	r3, #0
 8012082:	da07      	bge.n	8012094 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	1c5a      	adds	r2, r3, #1
 8012088:	603a      	str	r2, [r7, #0]
 801208a:	222d      	movs	r2, #45	; 0x2d
 801208c:	701a      	strb	r2, [r3, #0]
    u = -u;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	425b      	negs	r3, r3
 8012092:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 8012094:	220a      	movs	r2, #10
 8012096:	6839      	ldr	r1, [r7, #0]
 8012098:	68f8      	ldr	r0, [r7, #12]
 801209a:	f7ff ffb3 	bl	8012004 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 801209e:	4603      	mov	r3, r0
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3710      	adds	r7, #16
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}

080120a8 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b090      	sub	sp, #64	; 0x40
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	60f8      	str	r0, [r7, #12]
 80120b0:	60b9      	str	r1, [r7, #8]
 80120b2:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 80120b4:	f107 0310 	add.w	r3, r7, #16
 80120b8:	4619      	mov	r1, r3
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f7ff ffd8 	bl	8012070 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 80120c0:	f107 0310 	add.w	r3, r7, #16
 80120c4:	461a      	mov	r2, r3
 80120c6:	68b9      	ldr	r1, [r7, #8]
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f7ff ff69 	bl	8011fa0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80120ce:	4603      	mov	r3, r0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3740      	adds	r7, #64	; 0x40
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}

080120d8 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 80120d8:	b580      	push	{r7, lr}
 80120da:	b090      	sub	sp, #64	; 0x40
 80120dc:	af00      	add	r7, sp, #0
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	607a      	str	r2, [r7, #4]
 80120e4:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 80120e6:	f107 0310 	add.w	r3, r7, #16
 80120ea:	683a      	ldr	r2, [r7, #0]
 80120ec:	4619      	mov	r1, r3
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7ff ff88 	bl	8012004 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 80120f4:	f107 0310 	add.w	r3, r7, #16
 80120f8:	461a      	mov	r2, r3
 80120fa:	68b9      	ldr	r1, [r7, #8]
 80120fc:	68f8      	ldr	r0, [r7, #12]
 80120fe:	f7ff ff4f 	bl	8011fa0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8012102:	4603      	mov	r3, r0
}
 8012104:	4618      	mov	r0, r3
 8012106:	3740      	adds	r7, #64	; 0x40
 8012108:	46bd      	mov	sp, r7
 801210a:	bd80      	pop	{r7, pc}

0801210c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 801210c:	b590      	push	{r4, r7, lr}
 801210e:	b095      	sub	sp, #84	; 0x54
 8012110:	af00      	add	r7, sp, #0
 8012112:	ed87 0a01 	vstr	s0, [r7, #4]
 8012116:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 8012118:	683b      	ldr	r3, [r7, #0]
 801211a:	64fb      	str	r3, [r7, #76]	; 0x4c
  char* current_end = buffer + (kFastToBufferSize - 1);
 801211c:	683b      	ldr	r3, [r7, #0]
 801211e:	332f      	adds	r3, #47	; 0x2f
 8012120:	643b      	str	r3, [r7, #64]	; 0x40
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 8012122:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012126:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t exponent_mask = 0x7f800000;
 8012128:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 801212c:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t exponent_shift = 23;
 801212e:	2317      	movs	r3, #23
 8012130:	637b      	str	r3, [r7, #52]	; 0x34
  const int32_t exponent_bias = 127;
 8012132:	237f      	movs	r3, #127	; 0x7f
 8012134:	633b      	str	r3, [r7, #48]	; 0x30
  const uint32_t fraction_mask = 0x007fffff;
 8012136:	4b42      	ldr	r3, [pc, #264]	; (8012240 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x134>)
 8012138:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
 801213a:	1d3b      	adds	r3, r7, #4
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	62bb      	str	r3, [r7, #40]	; 0x28
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 8012140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012142:	0ddb      	lsrs	r3, r3, #23
 8012144:	b2db      	uxtb	r3, r3
 8012146:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 8012148:	627b      	str	r3, [r7, #36]	; 0x24
  const uint32_t fraction = (u & fraction_mask);
 801214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801214c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012150:	623b      	str	r3, [r7, #32]
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 8012152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012154:	2b00      	cmp	r3, #0
 8012156:	da05      	bge.n	8012164 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x58>
    *current = '-';
 8012158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801215a:	222d      	movs	r2, #45	; 0x2d
 801215c:	701a      	strb	r2, [r3, #0]
    current += 1;
 801215e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012160:	3301      	adds	r3, #1
 8012162:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  *current = 0;
 8012164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012166:	2200      	movs	r2, #0
 8012168:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 801216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216c:	2b80      	cmp	r3, #128	; 0x80
 801216e:	d118      	bne.n	80121a2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
    if (fraction == 0) {
 8012170:	6a3b      	ldr	r3, [r7, #32]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d10a      	bne.n	801218c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x80>
      current = StrCatStr(current, (current_end - current), "Inf");
 8012176:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012178:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801217a:	1ad3      	subs	r3, r2, r3
 801217c:	4a31      	ldr	r2, [pc, #196]	; (8012244 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x138>)
 801217e:	4619      	mov	r1, r3
 8012180:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012182:	f7ff ff0d 	bl	8011fa0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8012186:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 8012188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801218a:	e054      	b.n	8012236 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 801218c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801218e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012190:	1ad3      	subs	r3, r2, r3
 8012192:	4a2d      	ldr	r2, [pc, #180]	; (8012248 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x13c>)
 8012194:	4619      	mov	r1, r3
 8012196:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012198:	f7ff ff02 	bl	8011fa0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 801219c:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 801219e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121a0:	e049      	b.n	8012236 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 80121a2:	230d      	movs	r3, #13
 80121a4:	61fb      	str	r3, [r7, #28]
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 80121a6:	4b29      	ldr	r3, [pc, #164]	; (801224c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x140>)
 80121a8:	f107 040c 	add.w	r4, r7, #12
 80121ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80121ae:	c407      	stmia	r4!, {r0, r1, r2}
 80121b0:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 80121b2:	6a3b      	ldr	r3, [r7, #32]
 80121b4:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 80121b6:	2300      	movs	r3, #0
 80121b8:	647b      	str	r3, [r7, #68]	; 0x44
 80121ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121bc:	2b0c      	cmp	r3, #12
 80121be:	dc0f      	bgt.n	80121e0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd4>
    scaled_fraction += (fraction >> scale_shifts[i]);
 80121c0:	f107 020c 	add.w	r2, r7, #12
 80121c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121c6:	4413      	add	r3, r2
 80121c8:	f993 3000 	ldrsb.w	r3, [r3]
 80121cc:	461a      	mov	r2, r3
 80121ce:	6a3b      	ldr	r3, [r7, #32]
 80121d0:	40d3      	lsrs	r3, r2
 80121d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80121d4:	4413      	add	r3, r2
 80121d6:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 80121d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121da:	3301      	adds	r3, #1
 80121dc:	647b      	str	r3, [r7, #68]	; 0x44
 80121de:	e7ec      	b.n	80121ba <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xae>
  }
  *current = '1';
 80121e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121e2:	2231      	movs	r2, #49	; 0x31
 80121e4:	701a      	strb	r2, [r3, #0]
  current += 1;
 80121e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121e8:	3301      	adds	r3, #1
 80121ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = '.';
 80121ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121ee:	222e      	movs	r2, #46	; 0x2e
 80121f0:	701a      	strb	r2, [r3, #0]
  current += 1;
 80121f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121f4:	3301      	adds	r3, #1
 80121f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = 0;
 80121f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121fa:	2200      	movs	r2, #0
 80121fc:	701a      	strb	r2, [r3, #0]
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 80121fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012202:	1ad1      	subs	r1, r2, r3
 8012204:	230a      	movs	r3, #10
 8012206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012208:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801220a:	f7ff ff65 	bl	80120d8 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 801220e:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatStr(current, (current_end - current), "*2^");
 8012210:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012214:	1ad3      	subs	r3, r2, r3
 8012216:	4a0e      	ldr	r2, [pc, #56]	; (8012250 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x144>)
 8012218:	4619      	mov	r1, r3
 801221a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801221c:	f7ff fec0 	bl	8011fa0 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8012220:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatInt32(current, (current_end - current), exponent);
 8012222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012226:	1ad3      	subs	r3, r2, r3
 8012228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801222a:	4619      	mov	r1, r3
 801222c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801222e:	f7ff ff3b 	bl	80120a8 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 8012232:	64f8      	str	r0, [r7, #76]	; 0x4c
  return current;
 8012234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8012236:	4618      	mov	r0, r3
 8012238:	3754      	adds	r7, #84	; 0x54
 801223a:	46bd      	mov	sp, r7
 801223c:	bd90      	pop	{r4, r7, pc}
 801223e:	bf00      	nop
 8012240:	007fffff 	.word	0x007fffff
 8012244:	0801ee8c 	.word	0x0801ee8c
 8012248:	0801ee90 	.word	0x0801ee90
 801224c:	0801ee98 	.word	0x0801ee98
 8012250:	0801ee94 	.word	0x0801ee94

08012254 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
 801225c:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 801225e:	6879      	ldr	r1, [r7, #4]
 8012260:	6838      	ldr	r0, [r7, #0]
 8012262:	f7ff ff05 	bl	8012070 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 8012266:	4603      	mov	r3, r0
 8012268:	461a      	mov	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	1ad3      	subs	r3, r2, r3
}
 801226e:	4618      	mov	r0, r3
 8012270:	3708      	adds	r7, #8
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 8012276:	b580      	push	{r7, lr}
 8012278:	b082      	sub	sp, #8
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
 801227e:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 8012280:	220a      	movs	r2, #10
 8012282:	6879      	ldr	r1, [r7, #4]
 8012284:	6838      	ldr	r0, [r7, #0]
 8012286:	f7ff febd 	bl	8012004 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 801228a:	4603      	mov	r3, r0
 801228c:	461a      	mov	r2, r3
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	1ad3      	subs	r3, r2, r3
}
 8012292:	4618      	mov	r0, r3
 8012294:	3708      	adds	r7, #8
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}

0801229a <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 801229a:	b580      	push	{r7, lr}
 801229c:	b082      	sub	sp, #8
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
 80122a2:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 80122a4:	2210      	movs	r2, #16
 80122a6:	6879      	ldr	r1, [r7, #4]
 80122a8:	6838      	ldr	r0, [r7, #0]
 80122aa:	f7ff feab 	bl	8012004 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80122ae:	4603      	mov	r3, r0
 80122b0:	461a      	mov	r2, r3
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	1ad3      	subs	r3, r2, r3
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3708      	adds	r7, #8
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 80122be:	b580      	push	{r7, lr}
 80122c0:	b082      	sub	sp, #8
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
 80122c6:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	ed97 0a00 	vldr	s0, [r7]
 80122d0:	f7ff ff1c 	bl	801210c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 80122d4:	4603      	mov	r3, r0
 80122d6:	461a      	mov	r2, r3
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	1ad3      	subs	r3, r2, r3
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3708      	adds	r7, #8
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 80122e4:	b5b0      	push	{r4, r5, r7, lr}
 80122e6:	b08a      	sub	sp, #40	; 0x28
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	607a      	str	r2, [r7, #4]
 80122f0:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 80122f2:	2300      	movs	r3, #0
 80122f4:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 80122fa:	68bb      	ldr	r3, [r7, #8]
 80122fc:	3b01      	subs	r3, #1
 80122fe:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 8012300:	6a3b      	ldr	r3, [r7, #32]
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	f000 8109 	beq.w	801251c <MicroVsnprintf+0x238>
 801230a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	429a      	cmp	r2, r3
 8012310:	f280 8104 	bge.w	801251c <MicroVsnprintf+0x238>
    if (*current == '%') {
 8012314:	6a3b      	ldr	r3, [r7, #32]
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	2b25      	cmp	r3, #37	; 0x25
 801231a:	f040 80f3 	bne.w	8012504 <MicroVsnprintf+0x220>
      current++;
 801231e:	6a3b      	ldr	r3, [r7, #32]
 8012320:	3301      	adds	r3, #1
 8012322:	623b      	str	r3, [r7, #32]
      switch (*current) {
 8012324:	6a3b      	ldr	r3, [r7, #32]
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	2b66      	cmp	r3, #102	; 0x66
 801232a:	f000 8083 	beq.w	8012434 <MicroVsnprintf+0x150>
 801232e:	2b66      	cmp	r3, #102	; 0x66
 8012330:	dc05      	bgt.n	801233e <MicroVsnprintf+0x5a>
 8012332:	2b25      	cmp	r3, #37	; 0x25
 8012334:	f000 80b4 	beq.w	80124a0 <MicroVsnprintf+0x1bc>
 8012338:	2b64      	cmp	r3, #100	; 0x64
 801233a:	d008      	beq.n	801234e <MicroVsnprintf+0x6a>
 801233c:	e0ed      	b.n	801251a <MicroVsnprintf+0x236>
 801233e:	2b75      	cmp	r3, #117	; 0x75
 8012340:	d026      	beq.n	8012390 <MicroVsnprintf+0xac>
 8012342:	2b78      	cmp	r3, #120	; 0x78
 8012344:	d045      	beq.n	80123d2 <MicroVsnprintf+0xee>
 8012346:	2b73      	cmp	r3, #115	; 0x73
 8012348:	f000 80b6 	beq.w	80124b8 <MicroVsnprintf+0x1d4>
 801234c:	e0e5      	b.n	801251a <MicroVsnprintf+0x236>
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 801234e:	69ba      	ldr	r2, [r7, #24]
 8012350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012352:	1ad3      	subs	r3, r2, r3
 8012354:	2b0a      	cmp	r3, #10
 8012356:	dc09      	bgt.n	801236c <MicroVsnprintf+0x88>
            output[output_index++] = '\0';
 8012358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235a:	1c5a      	adds	r2, r3, #1
 801235c:	627a      	str	r2, [r7, #36]	; 0x24
 801235e:	461a      	mov	r2, r3
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	4413      	add	r3, r2
 8012364:	2200      	movs	r2, #0
 8012366:	701a      	strb	r2, [r3, #0]
            return output_index;
 8012368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236a:	e0e0      	b.n	801252e <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 801236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236e:	68fa      	ldr	r2, [r7, #12]
 8012370:	18d0      	adds	r0, r2, r3
 8012372:	683b      	ldr	r3, [r7, #0]
 8012374:	1d1a      	adds	r2, r3, #4
 8012376:	603a      	str	r2, [r7, #0]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	4619      	mov	r1, r3
 801237c:	f7ff ff6a 	bl	8012254 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 8012380:	4602      	mov	r2, r0
          output_index +=
 8012382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012384:	4413      	add	r3, r2
 8012386:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8012388:	6a3b      	ldr	r3, [r7, #32]
 801238a:	3301      	adds	r3, #1
 801238c:	623b      	str	r3, [r7, #32]
          break;
 801238e:	e0c4      	b.n	801251a <MicroVsnprintf+0x236>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8012390:	69ba      	ldr	r2, [r7, #24]
 8012392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012394:	1ad3      	subs	r3, r2, r3
 8012396:	2b0a      	cmp	r3, #10
 8012398:	dc09      	bgt.n	80123ae <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 801239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801239c:	1c5a      	adds	r2, r3, #1
 801239e:	627a      	str	r2, [r7, #36]	; 0x24
 80123a0:	461a      	mov	r2, r3
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	4413      	add	r3, r2
 80123a6:	2200      	movs	r2, #0
 80123a8:	701a      	strb	r2, [r3, #0]
            return output_index;
 80123aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ac:	e0bf      	b.n	801252e <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 80123ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123b0:	68fa      	ldr	r2, [r7, #12]
 80123b2:	18d0      	adds	r0, r2, r3
 80123b4:	683b      	ldr	r3, [r7, #0]
 80123b6:	1d1a      	adds	r2, r3, #4
 80123b8:	603a      	str	r2, [r7, #0]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	4619      	mov	r1, r3
 80123be:	f7ff ff5a 	bl	8012276 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 80123c2:	4602      	mov	r2, r0
          output_index +=
 80123c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c6:	4413      	add	r3, r2
 80123c8:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80123ca:	6a3b      	ldr	r3, [r7, #32]
 80123cc:	3301      	adds	r3, #1
 80123ce:	623b      	str	r3, [r7, #32]
          break;
 80123d0:	e0a3      	b.n	801251a <MicroVsnprintf+0x236>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 80123d2:	69ba      	ldr	r2, [r7, #24]
 80123d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	2b09      	cmp	r3, #9
 80123da:	dc09      	bgt.n	80123f0 <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 80123dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123de:	1c5a      	adds	r2, r3, #1
 80123e0:	627a      	str	r2, [r7, #36]	; 0x24
 80123e2:	461a      	mov	r2, r3
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	4413      	add	r3, r2
 80123e8:	2200      	movs	r2, #0
 80123ea:	701a      	strb	r2, [r3, #0]
            return output_index;
 80123ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ee:	e09e      	b.n	801252e <MicroVsnprintf+0x24a>
          }
          output[output_index++] = '0';
 80123f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123f2:	1c5a      	adds	r2, r3, #1
 80123f4:	627a      	str	r2, [r7, #36]	; 0x24
 80123f6:	461a      	mov	r2, r3
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	4413      	add	r3, r2
 80123fc:	2230      	movs	r2, #48	; 0x30
 80123fe:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 8012400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012402:	1c5a      	adds	r2, r3, #1
 8012404:	627a      	str	r2, [r7, #36]	; 0x24
 8012406:	461a      	mov	r2, r3
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	4413      	add	r3, r2
 801240c:	2278      	movs	r2, #120	; 0x78
 801240e:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8012410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012412:	68fa      	ldr	r2, [r7, #12]
 8012414:	18d0      	adds	r0, r2, r3
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	1d1a      	adds	r2, r3, #4
 801241a:	603a      	str	r2, [r7, #0]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	4619      	mov	r1, r3
 8012420:	f7ff ff3b 	bl	801229a <_ZN12_GLOBAL__N_19FormatHexEPcm>
 8012424:	4602      	mov	r2, r0
          output_index +=
 8012426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012428:	4413      	add	r3, r2
 801242a:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 801242c:	6a3b      	ldr	r3, [r7, #32]
 801242e:	3301      	adds	r3, #1
 8012430:	623b      	str	r3, [r7, #32]
          break;
 8012432:	e072      	b.n	801251a <MicroVsnprintf+0x236>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 8012434:	69ba      	ldr	r2, [r7, #24]
 8012436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012438:	1ad3      	subs	r3, r2, r3
 801243a:	ee07 3a90 	vmov	s15, r3
 801243e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012442:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8012446:	eef4 7ac7 	vcmpe.f32	s15, s14
 801244a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801244e:	d509      	bpl.n	8012464 <MicroVsnprintf+0x180>
            output[output_index++] = '\0';
 8012450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012452:	1c5a      	adds	r2, r3, #1
 8012454:	627a      	str	r2, [r7, #36]	; 0x24
 8012456:	461a      	mov	r2, r3
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	4413      	add	r3, r2
 801245c:	2200      	movs	r2, #0
 801245e:	701a      	strb	r2, [r3, #0]
            return output_index;
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	e064      	b.n	801252e <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 8012464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012466:	68fa      	ldr	r2, [r7, #12]
 8012468:	18d5      	adds	r5, r2, r3
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	3307      	adds	r3, #7
 801246e:	f023 0307 	bic.w	r3, r3, #7
 8012472:	f103 0208 	add.w	r2, r3, #8
 8012476:	603a      	str	r2, [r7, #0]
 8012478:	e9d3 3400 	ldrd	r3, r4, [r3]
 801247c:	4618      	mov	r0, r3
 801247e:	4621      	mov	r1, r4
 8012480:	f7ee fbca 	bl	8000c18 <__aeabi_d2f>
 8012484:	4603      	mov	r3, r0
 8012486:	ee00 3a10 	vmov	s0, r3
 801248a:	4628      	mov	r0, r5
 801248c:	f7ff ff17 	bl	80122be <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 8012490:	4602      	mov	r2, r0
          output_index +=
 8012492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012494:	4413      	add	r3, r2
 8012496:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8012498:	6a3b      	ldr	r3, [r7, #32]
 801249a:	3301      	adds	r3, #1
 801249c:	623b      	str	r3, [r7, #32]
          break;
 801249e:	e03c      	b.n	801251a <MicroVsnprintf+0x236>
        case '%':
          output[output_index++] = *current++;
 80124a0:	6a3b      	ldr	r3, [r7, #32]
 80124a2:	1c5a      	adds	r2, r3, #1
 80124a4:	623a      	str	r2, [r7, #32]
 80124a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124a8:	1c51      	adds	r1, r2, #1
 80124aa:	6279      	str	r1, [r7, #36]	; 0x24
 80124ac:	4611      	mov	r1, r2
 80124ae:	68fa      	ldr	r2, [r7, #12]
 80124b0:	440a      	add	r2, r1
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	7013      	strb	r3, [r2, #0]
          break;
 80124b6:	e030      	b.n	801251a <MicroVsnprintf+0x236>
        case 's':
          char* string = va_arg(args, char*);
 80124b8:	683b      	ldr	r3, [r7, #0]
 80124ba:	1d1a      	adds	r2, r3, #4
 80124bc:	603a      	str	r2, [r7, #0]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 80124c2:	2300      	movs	r3, #0
 80124c4:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 80124c6:	69fa      	ldr	r2, [r7, #28]
 80124c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ca:	4413      	add	r3, r2
 80124cc:	69ba      	ldr	r2, [r7, #24]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	dd14      	ble.n	80124fc <MicroVsnprintf+0x218>
                 string[string_idx] != '\0') {
 80124d2:	69fb      	ldr	r3, [r7, #28]
 80124d4:	697a      	ldr	r2, [r7, #20]
 80124d6:	4413      	add	r3, r2
 80124d8:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d00e      	beq.n	80124fc <MicroVsnprintf+0x218>
            output[output_index++] = string[string_idx++];
 80124de:	69fb      	ldr	r3, [r7, #28]
 80124e0:	1c5a      	adds	r2, r3, #1
 80124e2:	61fa      	str	r2, [r7, #28]
 80124e4:	461a      	mov	r2, r3
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	441a      	add	r2, r3
 80124ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ec:	1c59      	adds	r1, r3, #1
 80124ee:	6279      	str	r1, [r7, #36]	; 0x24
 80124f0:	4619      	mov	r1, r3
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	440b      	add	r3, r1
 80124f6:	7812      	ldrb	r2, [r2, #0]
 80124f8:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 80124fa:	e7e4      	b.n	80124c6 <MicroVsnprintf+0x1e2>
          }
          current++;
 80124fc:	6a3b      	ldr	r3, [r7, #32]
 80124fe:	3301      	adds	r3, #1
 8012500:	623b      	str	r3, [r7, #32]
 8012502:	e6fd      	b.n	8012300 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 8012504:	6a3b      	ldr	r3, [r7, #32]
 8012506:	1c5a      	adds	r2, r3, #1
 8012508:	623a      	str	r2, [r7, #32]
 801250a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801250c:	1c51      	adds	r1, r2, #1
 801250e:	6279      	str	r1, [r7, #36]	; 0x24
 8012510:	4611      	mov	r1, r2
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	440a      	add	r2, r1
 8012516:	781b      	ldrb	r3, [r3, #0]
 8012518:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 801251a:	e6f1      	b.n	8012300 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 801251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251e:	1c5a      	adds	r2, r3, #1
 8012520:	627a      	str	r2, [r7, #36]	; 0x24
 8012522:	461a      	mov	r2, r3
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	4413      	add	r3, r2
 8012528:	2200      	movs	r2, #0
 801252a:	701a      	strb	r2, [r3, #0]
  return output_index;
 801252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801252e:	4618      	mov	r0, r3
 8012530:	3728      	adds	r7, #40	; 0x28
 8012532:	46bd      	mov	sp, r7
 8012534:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012538 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 8012538:	b480      	push	{r7}
 801253a:	b083      	sub	sp, #12
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
 8012540:	6039      	str	r1, [r7, #0]
 8012542:	4a0f      	ldr	r2, [pc, #60]	; (8012580 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x48>)
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	601a      	str	r2, [r3, #0]
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	685a      	ldr	r2, [r3, #4]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	605a      	str	r2, [r3, #4]
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	689a      	ldr	r2, [r3, #8]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	609a      	str	r2, [r3, #8]
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	68da      	ldr	r2, [r3, #12]
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	60da      	str	r2, [r3, #12]
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	691a      	ldr	r2, [r3, #16]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	611a      	str	r2, [r3, #16]
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	695a      	ldr	r2, [r3, #20]
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	615a      	str	r2, [r3, #20]
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	4618      	mov	r0, r3
 8012574:	370c      	adds	r7, #12
 8012576:	46bd      	mov	sp, r7
 8012578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257c:	4770      	bx	lr
 801257e:	bf00      	nop
 8012580:	0803e530 	.word	0x0803e530

08012584 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "edge-impulse-sdk/tensorflow/lite/kernels/internal/compatibility.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8012584:	b480      	push	{r7}
 8012586:	b085      	sub	sp, #20
 8012588:	af00      	add	r7, sp, #0
 801258a:	60f8      	str	r0, [r7, #12]
 801258c:	60b9      	str	r1, [r7, #8]
 801258e:	607a      	str	r2, [r7, #4]
 8012590:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer_tail)
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail) {}
 8012592:	4a0c      	ldr	r2, [pc, #48]	; (80125c4 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x40>)
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	601a      	str	r2, [r3, #0]
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	68ba      	ldr	r2, [r7, #8]
 801259c:	605a      	str	r2, [r3, #4]
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	609a      	str	r2, [r3, #8]
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	683a      	ldr	r2, [r7, #0]
 80125a8:	60da      	str	r2, [r3, #12]
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	687a      	ldr	r2, [r7, #4]
 80125ae:	611a      	str	r2, [r3, #16]
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	683a      	ldr	r2, [r7, #0]
 80125b4:	615a      	str	r2, [r3, #20]
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	4618      	mov	r0, r3
 80125ba:	3714      	adds	r7, #20
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr
 80125c4:	0803e530 	.word	0x0803e530

080125c8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b084      	sub	sp, #16
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	607a      	str	r2, [r7, #4]
 80125d4:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 80125d6:	687a      	ldr	r2, [r7, #4]
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	4413      	add	r3, r2
 80125dc:	687a      	ldr	r2, [r7, #4]
 80125de:	68b9      	ldr	r1, [r7, #8]
 80125e0:	68f8      	ldr	r0, [r7, #12]
 80125e2:	f7ff ffcf 	bl	8012584 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	4618      	mov	r0, r3
 80125ea:	3710      	adds	r7, #16
 80125ec:	46bd      	mov	sp, r7
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 80125f0:	b590      	push	{r4, r7, lr}
 80125f2:	b08d      	sub	sp, #52	; 0x34
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	60f8      	str	r0, [r7, #12]
 80125f8:	60b9      	str	r1, [r7, #8]
 80125fa:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d101      	bne.n	8012606 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 8012602:	f006 fd78 	bl	80190f6 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 8012606:	68bb      	ldr	r3, [r7, #8]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d101      	bne.n	8012610 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 801260c:	f006 fd73 	bl	80190f6 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8012610:	f107 0014 	add.w	r0, r7, #20
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	68ba      	ldr	r2, [r7, #8]
 8012618:	68f9      	ldr	r1, [r7, #12]
 801261a:	f7ff ffd5 	bl	80125c8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
 801261e:	f107 0314 	add.w	r3, r7, #20
 8012622:	2204      	movs	r2, #4
 8012624:	2118      	movs	r1, #24
 8012626:	4618      	mov	r0, r3
 8012628:	f000 f86a 	bl	8012700 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 801262c:	62f8      	str	r0, [r7, #44]	; 0x2c
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 801262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012630:	4619      	mov	r1, r3
 8012632:	2018      	movs	r0, #24
 8012634:	f7ee fd09 	bl	800104a <_ZnwjPv>
 8012638:	4604      	mov	r4, r0
 801263a:	2c00      	cmp	r4, #0
 801263c:	d005      	beq.n	801264a <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x5a>
 801263e:	f107 0314 	add.w	r3, r7, #20
 8012642:	4619      	mov	r1, r3
 8012644:	4620      	mov	r0, r4
 8012646:	f7ff ff77 	bl	8012538 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 801264a:	f107 0314 	add.w	r3, r7, #20
 801264e:	4618      	mov	r0, r3
 8012650:	f000 f806 	bl	8012660 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8012654:	4623      	mov	r3, r4
}
 8012656:	4618      	mov	r0, r3
 8012658:	3734      	adds	r7, #52	; 0x34
 801265a:	46bd      	mov	sp, r7
 801265c:	bd90      	pop	{r4, r7, pc}
	...

08012660 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8012660:	b480      	push	{r7}
 8012662:	b083      	sub	sp, #12
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	4a04      	ldr	r2, [pc, #16]	; (801267c <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	601a      	str	r2, [r3, #0]
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	4618      	mov	r0, r3
 8012672:	370c      	adds	r7, #12
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr
 801267c:	0803e530 	.word	0x0803e530

08012680 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8012680:	b580      	push	{r7, lr}
 8012682:	b082      	sub	sp, #8
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7ff ffe9 	bl	8012660 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 801268e:	2118      	movs	r1, #24
 8012690:	6878      	ldr	r0, [r7, #4]
 8012692:	f003 fe7a 	bl	801638a <_ZdlPvj>
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	4618      	mov	r0, r3
 801269a:	3708      	adds	r7, #8
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b088      	sub	sp, #32
 80126a4:	af02      	add	r7, sp, #8
 80126a6:	60f8      	str	r0, [r7, #12]
 80126a8:	60b9      	str	r1, [r7, #8]
 80126aa:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	691b      	ldr	r3, [r3, #16]
 80126b0:	6879      	ldr	r1, [r7, #4]
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fc fd5a 	bl	800f16c <_ZN6tflite14AlignPointerUpEPhj>
 80126b8:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	695b      	ldr	r3, [r3, #20]
 80126be:	461a      	mov	r2, r3
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	1ad3      	subs	r3, r2, r3
 80126c4:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 80126c6:	693a      	ldr	r2, [r7, #16]
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	429a      	cmp	r2, r3
 80126cc:	d20c      	bcs.n	80126e8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x48>
    TF_LITE_REPORT_ERROR(
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	6858      	ldr	r0, [r3, #4]
 80126d2:	68ba      	ldr	r2, [r7, #8]
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	1ad3      	subs	r3, r2, r3
 80126d8:	9300      	str	r3, [sp, #0]
 80126da:	693b      	ldr	r3, [r7, #16]
 80126dc:	68ba      	ldr	r2, [r7, #8]
 80126de:	4907      	ldr	r1, [pc, #28]	; (80126fc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x5c>)
 80126e0:	f7fa ff44 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
 80126e4:	2300      	movs	r3, #0
 80126e6:	e005      	b.n	80126f4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x54>
  }
  head_ = aligned_result + size;
 80126e8:	697a      	ldr	r2, [r7, #20]
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	441a      	add	r2, r3
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	611a      	str	r2, [r3, #16]
  return aligned_result;
 80126f2:	697b      	ldr	r3, [r7, #20]
}
 80126f4:	4618      	mov	r0, r3
 80126f6:	3718      	adds	r7, #24
 80126f8:	46bd      	mov	sp, r7
 80126fa:	bd80      	pop	{r7, pc}
 80126fc:	0801eebc 	.word	0x0801eebc

08012700 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8012700:	b580      	push	{r7, lr}
 8012702:	b088      	sub	sp, #32
 8012704:	af02      	add	r7, sp, #8
 8012706:	60f8      	str	r0, [r7, #12]
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	695a      	ldr	r2, [r3, #20]
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	425b      	negs	r3, r3
 8012714:	4413      	add	r3, r2
 8012716:	6879      	ldr	r1, [r7, #4]
 8012718:	4618      	mov	r0, r3
 801271a:	f7fc fd40 	bl	800f19e <_ZN6tflite16AlignPointerDownEPhj>
 801271e:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	691b      	ldr	r3, [r3, #16]
 8012724:	697a      	ldr	r2, [r7, #20]
 8012726:	429a      	cmp	r2, r3
 8012728:	d213      	bcs.n	8012752 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x52>
    const size_t missing_memory = head_ - aligned_result;
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	691b      	ldr	r3, [r3, #16]
 801272e:	461a      	mov	r2, r3
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	1ad3      	subs	r3, r2, r3
 8012734:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	6858      	ldr	r0, [r3, #4]
 801273a:	68ba      	ldr	r2, [r7, #8]
 801273c:	693b      	ldr	r3, [r7, #16]
 801273e:	1ad2      	subs	r2, r2, r3
 8012740:	693b      	ldr	r3, [r7, #16]
 8012742:	9300      	str	r3, [sp, #0]
 8012744:	4613      	mov	r3, r2
 8012746:	68ba      	ldr	r2, [r7, #8]
 8012748:	4906      	ldr	r1, [pc, #24]	; (8012764 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x64>)
 801274a:	f7fa ff0f 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
 801274e:	2300      	movs	r3, #0
 8012750:	e003      	b.n	801275a <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x5a>
  }
  tail_ = aligned_result;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	697a      	ldr	r2, [r7, #20]
 8012756:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8012758:	697b      	ldr	r3, [r7, #20]
}
 801275a:	4618      	mov	r0, r3
 801275c:	3718      	adds	r7, #24
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	0801eebc 	.word	0x0801eebc

08012768 <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
 8012768:	b480      	push	{r7}
 801276a:	b083      	sub	sp, #12
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	691b      	ldr	r3, [r3, #16]
 8012774:	4618      	mov	r0, r3
 8012776:	370c      	adds	r7, #12
 8012778:	46bd      	mov	sp, r7
 801277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277e:	4770      	bx	lr

08012780 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
 8012780:	b480      	push	{r7}
 8012782:	b083      	sub	sp, #12
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	695b      	ldr	r3, [r3, #20]
 801278c:	4618      	mov	r0, r3
 801278e:	370c      	adds	r7, #12
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr

08012798 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
 8012798:	b480      	push	{r7}
 801279a:	b083      	sub	sp, #12
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
  return tail_ - head_;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	695b      	ldr	r3, [r3, #20]
 80127a4:	461a      	mov	r2, r3
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	691b      	ldr	r3, [r3, #16]
 80127aa:	1ad3      	subs	r3, r2, r3
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	370c      	adds	r7, #12
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr

080127b8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
 80127b8:	b480      	push	{r7}
 80127ba:	b085      	sub	sp, #20
 80127bc:	af00      	add	r7, sp, #0
 80127be:	60f8      	str	r0, [r7, #12]
 80127c0:	60b9      	str	r1, [r7, #8]
 80127c2:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->inputs->data[index]];
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	689a      	ldr	r2, [r3, #8]
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	6819      	ldr	r1, [r3, #0]
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	009b      	lsls	r3, r3, #2
 80127d0:	440b      	add	r3, r1
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	019b      	lsls	r3, r3, #6
 80127d6:	4413      	add	r3, r2
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3714      	adds	r7, #20
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                                      const TfLiteNode* node, int index) {
  TfLiteTensor* tensor = &context->tensors[node->inputs->data[index]];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
 80127e4:	b480      	push	{r7}
 80127e6:	b085      	sub	sp, #20
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->outputs->data[index]];
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	689a      	ldr	r2, [r3, #8]
 80127f4:	68bb      	ldr	r3, [r7, #8]
 80127f6:	6859      	ldr	r1, [r3, #4]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	009b      	lsls	r3, r3, #2
 80127fc:	440b      	add	r3, r1
 80127fe:	685b      	ldr	r3, [r3, #4]
 8012800:	019b      	lsls	r3, r3, #6
 8012802:	4413      	add	r3, r2
}
 8012804:	4618      	mov	r0, r3
 8012806:	3714      	adds	r7, #20
 8012808:	46bd      	mov	sp, r7
 801280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280e:	4770      	bx	lr

08012810 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8012810:	b480      	push	{r7}
 8012812:	b083      	sub	sp, #12
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d002      	beq.n	8012824 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8012822:	e000      	b.n	8012826 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8012824:	2300      	movs	r3, #0
}
 8012826:	4618      	mov	r0, r3
 8012828:	370c      	adds	r7, #12
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr

08012832 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8012832:	b480      	push	{r7}
 8012834:	b083      	sub	sp, #12
 8012836:	af00      	add	r7, sp, #0
 8012838:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d002      	beq.n	8012846 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	685b      	ldr	r3, [r3, #4]
 8012844:	e000      	b.n	8012848 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 8012846:	2300      	movs	r3, #0
}
 8012848:	4618      	mov	r0, r3
 801284a:	370c      	adds	r7, #12
 801284c:	46bd      	mov	sp, r7
 801284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012852:	4770      	bx	lr

08012854 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8012854:	b480      	push	{r7}
 8012856:	b083      	sub	sp, #12
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	2200      	movs	r2, #0
 8012860:	601a      	str	r2, [r3, #0]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4618      	mov	r0, r3
 8012866:	370c      	adds	r7, #12
 8012868:	46bd      	mov	sp, r7
 801286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286e:	4770      	bx	lr

08012870 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 8012870:	b580      	push	{r7, lr}
 8012872:	b084      	sub	sp, #16
 8012874:	af00      	add	r7, sp, #0
 8012876:	60f8      	str	r0, [r7, #12]
 8012878:	60b9      	str	r1, [r7, #8]
 801287a:	607a      	str	r2, [r7, #4]
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	2200      	movs	r2, #0
 8012880:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	68b9      	ldr	r1, [r7, #8]
 8012886:	68f8      	ldr	r0, [r7, #12]
 8012888:	f000 f8a0 	bl	80129cc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	4618      	mov	r0, r3
 8012890:	3710      	adds	r7, #16
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}

08012896 <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 8012896:	b580      	push	{r7, lr}
 8012898:	b082      	sub	sp, #8
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	2b05      	cmp	r3, #5
 80128a4:	dd08      	ble.n	80128b8 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	685b      	ldr	r3, [r3, #4]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d004      	beq.n	80128b8 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	4618      	mov	r0, r3
 80128b4:	f003 fd62 	bl	801637c <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	4618      	mov	r0, r3
 80128bc:	3708      	adds	r7, #8
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}

080128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 80128c2:	b480      	push	{r7}
 80128c4:	b083      	sub	sp, #12
 80128c6:	af00      	add	r7, sp, #0
 80128c8:	6078      	str	r0, [r7, #4]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	4618      	mov	r0, r3
 80128d0:	370c      	adds	r7, #12
 80128d2:	46bd      	mov	sp, r7
 80128d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d8:	4770      	bx	lr

080128da <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 80128da:	b580      	push	{r7, lr}
 80128dc:	b082      	sub	sp, #8
 80128de:	af00      	add	r7, sp, #0
 80128e0:	6078      	str	r0, [r7, #4]
 80128e2:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	da01      	bge.n	80128ee <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 80128ea:	f006 fc04 	bl	80190f6 <abort>
    TFLITE_DCHECK_LT(i, size_);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681a      	ldr	r2, [r3, #0]
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	429a      	cmp	r2, r3
 80128f6:	dc01      	bgt.n	80128fc <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 80128f8:	f006 fbfd 	bl	80190f6 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2b05      	cmp	r3, #5
 8012902:	dd06      	ble.n	8012912 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	685a      	ldr	r2, [r3, #4]
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	009b      	lsls	r3, r3, #2
 801290c:	4413      	add	r3, r2
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	e004      	b.n	801291c <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	687a      	ldr	r2, [r7, #4]
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	4413      	add	r3, r2
 801291a:	685b      	ldr	r3, [r3, #4]
  }
 801291c:	4618      	mov	r0, r3
 801291e:	3708      	adds	r7, #8
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b05      	cmp	r3, #5
 8012932:	dd02      	ble.n	801293a <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	e001      	b.n	801293e <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	3304      	adds	r3, #4
  }
 801293e:	4618      	mov	r0, r3
 8012940:	370c      	adds	r7, #12
 8012942:	46bd      	mov	sp, r7
 8012944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012948:	4770      	bx	lr

0801294a <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 801294a:	b480      	push	{r7}
 801294c:	b083      	sub	sp, #12
 801294e:	af00      	add	r7, sp, #0
 8012950:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	2b05      	cmp	r3, #5
 8012958:	dd02      	ble.n	8012960 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	e001      	b.n	8012964 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	3304      	adds	r3, #4
  }
 8012964:	4618      	mov	r0, r3
 8012966:	370c      	adds	r7, #12
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr

08012970 <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	2b05      	cmp	r3, #5
 8012980:	dd08      	ble.n	8012994 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d004      	beq.n	8012994 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	4618      	mov	r0, r3
 8012990:	f003 fcf4 	bl	801637c <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	683a      	ldr	r2, [r7, #0]
 8012998:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 801299a:	683b      	ldr	r3, [r7, #0]
 801299c:	2b05      	cmp	r3, #5
 801299e:	dd0e      	ble.n	80129be <_ZN6tflite12RuntimeShape6ResizeEi+0x4e>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	4a09      	ldr	r2, [pc, #36]	; (80129c8 <_ZN6tflite12RuntimeShape6ResizeEi+0x58>)
 80129a4:	4293      	cmp	r3, r2
 80129a6:	d801      	bhi.n	80129ac <_ZN6tflite12RuntimeShape6ResizeEi+0x3c>
 80129a8:	009b      	lsls	r3, r3, #2
 80129aa:	e001      	b.n	80129b0 <_ZN6tflite12RuntimeShape6ResizeEi+0x40>
 80129ac:	f04f 33ff 	mov.w	r3, #4294967295
 80129b0:	4618      	mov	r0, r3
 80129b2:	f003 fce8 	bl	8016386 <_Znaj>
 80129b6:	4603      	mov	r3, r0
 80129b8:	461a      	mov	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 80129be:	bf00      	nop
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	1ffffffe 	.word	0x1ffffffe

080129cc <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b086      	sub	sp, #24
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 80129d8:	68b9      	ldr	r1, [r7, #8]
 80129da:	68f8      	ldr	r0, [r7, #12]
 80129dc:	f7ff ffc8 	bl	8012970 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 80129e0:	68f8      	ldr	r0, [r7, #12]
 80129e2:	f7ff ff9f 	bl	8012924 <_ZN6tflite12RuntimeShape8DimsDataEv>
 80129e6:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 80129e8:	68bb      	ldr	r3, [r7, #8]
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	461a      	mov	r2, r3
 80129ee:	6879      	ldr	r1, [r7, #4]
 80129f0:	6978      	ldr	r0, [r7, #20]
 80129f2:	f006 fc73 	bl	80192dc <memcpy>
  }
 80129f6:	bf00      	nop
 80129f8:	3718      	adds	r7, #24
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}

080129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 80129fe:	b580      	push	{r7, lr}
 8012a00:	b086      	sub	sp, #24
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	6078      	str	r0, [r7, #4]
 8012a06:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d103      	bne.n	8012a16 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f7ff ff20 	bl	8012854 <_ZN6tflite12RuntimeShapeC1Ev>
 8012a14:	e00d      	b.n	8012a32 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8012a16:	683b      	ldr	r3, [r7, #0]
 8012a18:	689b      	ldr	r3, [r3, #8]
 8012a1a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8012a22:	697b      	ldr	r3, [r7, #20]
 8012a24:	3304      	adds	r3, #4
 8012a26:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8012a28:	68fa      	ldr	r2, [r7, #12]
 8012a2a:	6939      	ldr	r1, [r7, #16]
 8012a2c:	6878      	ldr	r0, [r7, #4]
 8012a2e:	f7ff ff1f 	bl	8012870 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	3718      	adds	r7, #24
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}

08012a3a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8012a3a:	b480      	push	{r7}
 8012a3c:	b083      	sub	sp, #12
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d002      	beq.n	8012a4e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8012a4c:	e000      	b.n	8012a50 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8012a4e:	2300      	movs	r3, #0
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	370c      	adds	r7, #12
 8012a54:	46bd      	mov	sp, r7
 8012a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5a:	4770      	bx	lr

08012a5c <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8012a5c:	b480      	push	{r7}
 8012a5e:	b083      	sub	sp, #12
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d002      	beq.n	8012a70 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	e000      	b.n	8012a72 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 8012a70:	2300      	movs	r3, #0
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	370c      	adds	r7, #12
 8012a76:	46bd      	mov	sp, r7
 8012a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7c:	4770      	bx	lr

08012a7e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8012a7e:	b480      	push	{r7}
 8012a80:	b083      	sub	sp, #12
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d002      	beq.n	8012a92 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8012a90:	e000      	b.n	8012a94 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8012a92:	2300      	movs	r3, #0
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	370c      	adds	r7, #12
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a9e:	4770      	bx	lr

08012aa0 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8012aa0:	b480      	push	{r7}
 8012aa2:	b083      	sub	sp, #12
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d002      	beq.n	8012ab4 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	e000      	b.n	8012ab6 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 8012ab4:	2300      	movs	r3, #0
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	370c      	adds	r7, #12
 8012aba:	46bd      	mov	sp, r7
 8012abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac0:	4770      	bx	lr

08012ac2 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8012ac2:	b480      	push	{r7}
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012aca:	4618      	mov	r0, r3
 8012acc:	46bd      	mov	sp, r7
 8012ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad2:	4770      	bx	lr

08012ad4 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8012ad4:	b480      	push	{r7}
 8012ad6:	af00      	add	r7, sp, #0
 8012ad8:	4b04      	ldr	r3, [pc, #16]	; (8012aec <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8012ada:	ee07 3a90 	vmov	s15, r3
 8012ade:	eeb0 0a67 	vmov.f32	s0, s15
 8012ae2:	46bd      	mov	sp, r7
 8012ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae8:	4770      	bx	lr
 8012aea:	bf00      	nop
 8012aec:	7f7fffff 	.word	0x7f7fffff

08012af0 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8012af0:	b480      	push	{r7}
 8012af2:	af00      	add	r7, sp, #0
 8012af4:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8012af8:	ee07 3a90 	vmov	s15, r3
 8012afc:	eeb0 0a67 	vmov.f32	s0, s15
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr

08012b08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8012b08:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8012b0c:	b08c      	sub	sp, #48	; 0x30
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	6078      	str	r0, [r7, #4]
 8012b12:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8012b14:	687a      	ldr	r2, [r7, #4]
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	429a      	cmp	r2, r3
 8012b1a:	d107      	bne.n	8012b2c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8012b1c:	f7ff ffd1 	bl	8012ac2 <_ZNSt14numeric_limitsIlE3minEv>
 8012b20:	4602      	mov	r2, r0
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	4293      	cmp	r3, r2
 8012b26:	d101      	bne.n	8012b2c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	e000      	b.n	8012b2e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8012b38:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b_64(b);
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8012b42:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8012b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b48:	69ba      	ldr	r2, [r7, #24]
 8012b4a:	fb02 f203 	mul.w	r2, r2, r3
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	6a39      	ldr	r1, [r7, #32]
 8012b52:	fb01 f303 	mul.w	r3, r1, r3
 8012b56:	441a      	add	r2, r3
 8012b58:	6a39      	ldr	r1, [r7, #32]
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	fba1 3403 	umull	r3, r4, r1, r3
 8012b60:	4422      	add	r2, r4
 8012b62:	4614      	mov	r4, r2
 8012b64:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8012b68:	e9c7 3404 	strd	r3, r4, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8012b6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	f174 0300 	sbcs.w	r3, r4, #0
 8012b76:	db02      	blt.n	8012b7e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x76>
 8012b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012b7c:	e000      	b.n	8012b80 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8012b7e:	4b19      	ldr	r3, [pc, #100]	; (8012be4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 8012b80:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	4619      	mov	r1, r3
 8012b86:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8012b8a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012b8e:	eb13 0b01 	adds.w	fp, r3, r1
 8012b92:	eb44 0c02 	adc.w	ip, r4, r2
 8012b96:	465b      	mov	r3, fp
 8012b98:	4664      	mov	r4, ip
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f174 0200 	sbcs.w	r2, r4, #0
 8012ba0:	da06      	bge.n	8012bb0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8012ba2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ba6:	f04f 0200 	mov.w	r2, #0
 8012baa:	185b      	adds	r3, r3, r1
 8012bac:	eb44 0402 	adc.w	r4, r4, r2
 8012bb0:	f04f 0100 	mov.w	r1, #0
 8012bb4:	f04f 0200 	mov.w	r2, #0
 8012bb8:	0fd9      	lsrs	r1, r3, #31
 8012bba:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 8012bbe:	17e2      	asrs	r2, r4, #31
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	4614      	mov	r4, r2
  std::int32_t ab_x2_high32 =
 8012bc4:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8012bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d003      	beq.n	8012bd6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xce>
 8012bce:	f7fb fe87 	bl	800e8e0 <_ZNSt14numeric_limitsIlE3maxEv>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	e000      	b.n	8012bd8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8012bd6:	68bb      	ldr	r3, [r7, #8]
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3730      	adds	r7, #48	; 0x30
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8012be2:	bf00      	nop
 8012be4:	c0000001 	.word	0xc0000001

08012be8 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b084      	sub	sp, #16
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	ed87 0a03 	vstr	s0, [r7, #12]
 8012bf2:	edc7 0a02 	vstr	s1, [r7, #8]
 8012bf6:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 8012bfa:	f107 0208 	add.w	r2, r7, #8
 8012bfe:	f107 030c 	add.w	r3, r7, #12
 8012c02:	4611      	mov	r1, r2
 8012c04:	4618      	mov	r0, r3
 8012c06:	f7fb fff8 	bl	800ebfa <_ZSt3maxIfERKT_S2_S2_>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	1d3b      	adds	r3, r7, #4
 8012c0e:	4619      	mov	r1, r3
 8012c10:	4610      	mov	r0, r2
 8012c12:	f7fc f80b 	bl	800ec2c <_ZSt3minIfERKT_S2_S2_>
 8012c16:	4603      	mov	r3, r0
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	ee07 3a90 	vmov	s15, r3
}
 8012c1e:	eeb0 0a67 	vmov.f32	s0, s15
 8012c22:	3710      	adds	r7, #16
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8012c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c2a:	b089      	sub	sp, #36	; 0x24
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	6078      	str	r0, [r7, #4]
 8012c30:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8012c32:	683a      	ldr	r2, [r7, #0]
 8012c34:	2a00      	cmp	r2, #0
 8012c36:	da06      	bge.n	8012c46 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8012c38:	4b30      	ldr	r3, [pc, #192]	; (8012cfc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd4>)
 8012c3a:	4a31      	ldr	r2, [pc, #196]	; (8012d00 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8012c3c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8012c40:	4830      	ldr	r0, [pc, #192]	; (8012d04 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8012c42:	f006 fa5f 	bl	8019104 <__assert_func>
  assert(exponent <= 31);
 8012c46:	683a      	ldr	r2, [r7, #0]
 8012c48:	2a1f      	cmp	r2, #31
 8012c4a:	dd06      	ble.n	8012c5a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8012c4c:	4b2e      	ldr	r3, [pc, #184]	; (8012d08 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8012c4e:	4a2c      	ldr	r2, [pc, #176]	; (8012d00 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8012c50:	f240 1167 	movw	r1, #359	; 0x167
 8012c54:	482b      	ldr	r0, [pc, #172]	; (8012d04 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8012c56:	f006 fa55 	bl	8019104 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8012c5a:	f04f 0101 	mov.w	r1, #1
 8012c5e:	f04f 0200 	mov.w	r2, #0
 8012c62:	6838      	ldr	r0, [r7, #0]
 8012c64:	f1a0 0620 	sub.w	r6, r0, #32
 8012c68:	f1c0 0520 	rsb	r5, r0, #32
 8012c6c:	fa02 f400 	lsl.w	r4, r2, r0
 8012c70:	fa01 f606 	lsl.w	r6, r1, r6
 8012c74:	4334      	orrs	r4, r6
 8012c76:	fa21 f505 	lsr.w	r5, r1, r5
 8012c7a:	432c      	orrs	r4, r5
 8012c7c:	fa01 f300 	lsl.w	r3, r1, r0
 8012c80:	3b01      	subs	r3, #1
 8012c82:	4618      	mov	r0, r3
 8012c84:	f000 f884 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012c88:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8012c8a:	2000      	movs	r0, #0
 8012c8c:	f000 f880 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012c90:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8012c92:	2001      	movs	r0, #1
 8012c94:	f000 f87c 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8012c98:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8012c9a:	69f9      	ldr	r1, [r7, #28]
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f000 f882 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012ca2:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	69f8      	ldr	r0, [r7, #28]
 8012ca8:	f000 f88b 	bl	8012dc2 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8012cac:	4604      	mov	r4, r0
 8012cae:	69b9      	ldr	r1, [r7, #24]
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f000 f895 	bl	8012de0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	6979      	ldr	r1, [r7, #20]
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f000 f873 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012cc0:	4603      	mov	r3, r0
  const IntegerType threshold =
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	4620      	mov	r0, r4
 8012cc6:	f000 f89f 	bl	8012e08 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012cca:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8012ccc:	6839      	ldr	r1, [r7, #0]
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f000 f877 	bl	8012dc2 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8012cd4:	4604      	mov	r4, r0
 8012cd6:	68f9      	ldr	r1, [r7, #12]
 8012cd8:	6938      	ldr	r0, [r7, #16]
 8012cda:	f000 f8a3 	bl	8012e24 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	6979      	ldr	r1, [r7, #20]
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f000 f85f 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8012ce8:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 8012cea:	4619      	mov	r1, r3
 8012cec:	4620      	mov	r0, r4
 8012cee:	f000 f88b 	bl	8012e08 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8012cf2:	4603      	mov	r3, r0
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3724      	adds	r7, #36	; 0x24
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cfc:	0801ef1c 	.word	0x0801ef1c
 8012d00:	0803e540 	.word	0x0803e540
 8012d04:	0801ef2c 	.word	0x0801ef2c
 8012d08:	0801efbc 	.word	0x0801efbc

08012d0c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b084      	sub	sp, #16
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	4603      	mov	r3, r0
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	607a      	str	r2, [r7, #4]
 8012d18:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8012d1a:	7bfb      	ldrb	r3, [r7, #15]
 8012d1c:	2b01      	cmp	r3, #1
 8012d1e:	d10b      	bne.n	8012d38 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	f04f 0200 	mov.w	r2, #0
 8012d26:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8012d28:	f7ff fed4 	bl	8012ad4 <_ZNSt14numeric_limitsIfE3maxEv>
 8012d2c:	eef0 7a40 	vmov.f32	s15, s0
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8012d36:	e023      	b.n	8012d80 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8012d38:	7bfb      	ldrb	r3, [r7, #15]
 8012d3a:	2b03      	cmp	r3, #3
 8012d3c:	d107      	bne.n	8012d4e <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8012d3e:	68bb      	ldr	r3, [r7, #8]
 8012d40:	f04f 0200 	mov.w	r2, #0
 8012d44:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	4a0f      	ldr	r2, [pc, #60]	; (8012d88 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8012d4a:	601a      	str	r2, [r3, #0]
}
 8012d4c:	e018      	b.n	8012d80 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8012d4e:	7bfb      	ldrb	r3, [r7, #15]
 8012d50:	2b02      	cmp	r3, #2
 8012d52:	d107      	bne.n	8012d64 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8012d54:	68bb      	ldr	r3, [r7, #8]
 8012d56:	4a0d      	ldr	r2, [pc, #52]	; (8012d8c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8012d58:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8012d60:	601a      	str	r2, [r3, #0]
}
 8012d62:	e00d      	b.n	8012d80 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8012d64:	f7ff fec4 	bl	8012af0 <_ZNSt14numeric_limitsIfE6lowestEv>
 8012d68:	eef0 7a40 	vmov.f32	s15, s0
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8012d72:	f7ff feaf 	bl	8012ad4 <_ZNSt14numeric_limitsIfE3maxEv>
 8012d76:	eef0 7a40 	vmov.f32	s15, s0
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	edc3 7a00 	vstr	s15, [r3]
}
 8012d80:	bf00      	nop
 8012d82:	3710      	adds	r7, #16
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	40c00000 	.word	0x40c00000
 8012d8c:	bf800000 	.word	0xbf800000

08012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  return x;
 8012d98:	687b      	ldr	r3, [r7, #4]
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	370c      	adds	r7, #12
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da4:	4770      	bx	lr

08012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 8012da6:	b480      	push	{r7}
 8012da8:	b083      	sub	sp, #12
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
 8012dae:	6039      	str	r1, [r7, #0]
  return a & b;
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	4013      	ands	r3, r2
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	370c      	adds	r7, #12
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc0:	4770      	bx	lr

08012dc2 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8012dc2:	b480      	push	{r7}
 8012dc4:	b083      	sub	sp, #12
 8012dc6:	af00      	add	r7, sp, #0
 8012dc8:	6078      	str	r0, [r7, #4]
 8012dca:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	fa42 f303 	asr.w	r3, r2, r3
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	370c      	adds	r7, #12
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr

08012de0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b082      	sub	sp, #8
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
 8012de8:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8012dea:	687a      	ldr	r2, [r7, #4]
 8012dec:	683b      	ldr	r3, [r7, #0]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	bfb4      	ite	lt
 8012df2:	2301      	movlt	r3, #1
 8012df4:	2300      	movge	r3, #0
 8012df6:	b2db      	uxtb	r3, r3
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f000 f827 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012dfe:	4603      	mov	r3, r0
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3708      	adds	r7, #8
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8012e08:	b480      	push	{r7}
 8012e0a:	b083      	sub	sp, #12
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
  return a + b;
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	683b      	ldr	r3, [r7, #0]
 8012e16:	4413      	add	r3, r2
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	370c      	adds	r7, #12
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e22:	4770      	bx	lr

08012e24 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
 8012e2c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8012e2e:	687a      	ldr	r2, [r7, #4]
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	429a      	cmp	r2, r3
 8012e34:	bfcc      	ite	gt
 8012e36:	2301      	movgt	r3, #1
 8012e38:	2300      	movle	r3, #0
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f000 f805 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8012e42:	4603      	mov	r3, r0
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3708      	adds	r7, #8
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bd80      	pop	{r7, pc}

08012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d004      	beq.n	8012e64 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8012e5a:	2000      	movs	r0, #0
 8012e5c:	f000 f807 	bl	8012e6e <_ZN8gemmlowp6BitNotIlEET_S1_>
 8012e60:	4603      	mov	r3, r0
 8012e62:	e000      	b.n	8012e66 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 8012e64:	2300      	movs	r3, #0
}
 8012e66:	4618      	mov	r0, r3
 8012e68:	3708      	adds	r7, #8
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}

08012e6e <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8012e6e:	b480      	push	{r7}
 8012e70:	b083      	sub	sp, #12
 8012e72:	af00      	add	r7, sp, #0
 8012e74:	6078      	str	r0, [r7, #4]
  return ~a;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	43db      	mvns	r3, r3
}
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	370c      	adds	r7, #12
 8012e7e:	46bd      	mov	sp, r7
 8012e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e84:	4770      	bx	lr

08012e86 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8012e86:	b480      	push	{r7}
 8012e88:	b083      	sub	sp, #12
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d002      	beq.n	8012e9a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8012e98:	e000      	b.n	8012e9c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8012e9a:	2300      	movs	r3, #0
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	370c      	adds	r7, #12
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea6:	4770      	bx	lr

08012ea8 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8012ea8:	b480      	push	{r7}
 8012eaa:	b083      	sub	sp, #12
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	6078      	str	r0, [r7, #4]
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	370c      	adds	r7, #12
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec0:	4770      	bx	lr

08012ec2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8012ec2:	b480      	push	{r7}
 8012ec4:	b083      	sub	sp, #12
 8012ec6:	af00      	add	r7, sp, #0
 8012ec8:	6078      	str	r0, [r7, #4]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	685b      	ldr	r3, [r3, #4]
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	370c      	adds	r7, #12
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eda:	4770      	bx	lr

08012edc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 8012edc:	b590      	push	{r4, r7, lr}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	607a      	str	r2, [r7, #4]
 8012ee8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8012eea:	68b9      	ldr	r1, [r7, #8]
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	f7ff fcf4 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ef2:	4604      	mov	r4, r0
 8012ef4:	6839      	ldr	r1, [r7, #0]
 8012ef6:	6878      	ldr	r0, [r7, #4]
 8012ef8:	f7ff fcef 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 8012efc:	4603      	mov	r3, r0
 8012efe:	429c      	cmp	r4, r3
 8012f00:	d001      	beq.n	8012f06 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8012f02:	f006 f8f8 	bl	80190f6 <abort>
  return shape1.Dims(index1);
 8012f06:	68b9      	ldr	r1, [r7, #8]
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f7ff fce6 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 8012f0e:	4603      	mov	r3, r0
}
 8012f10:	4618      	mov	r0, r3
 8012f12:	3714      	adds	r7, #20
 8012f14:	46bd      	mov	sp, r7
 8012f16:	bd90      	pop	{r4, r7, pc}

08012f18 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b086      	sub	sp, #24
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	60b9      	str	r1, [r7, #8]
 8012f22:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012f2a:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	dc02      	bgt.n	8012f38 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	425b      	negs	r3, r3
 8012f36:	e000      	b.n	8012f3a <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8012f38:	2300      	movs	r3, #0
 8012f3a:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	fa02 f303 	lsl.w	r3, r2, r3
 8012f44:	68b9      	ldr	r1, [r7, #8]
 8012f46:	4618      	mov	r0, r3
 8012f48:	f7ff fdde 	bl	8012b08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8012f4c:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
 8012f4e:	6939      	ldr	r1, [r7, #16]
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7ff fe69 	bl	8012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8012f56:	4603      	mov	r3, r0
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3718      	adds	r7, #24
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 8012f60:	b480      	push	{r7}
 8012f62:	b087      	sub	sp, #28
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	60f8      	str	r0, [r7, #12]
 8012f68:	60b9      	str	r1, [r7, #8]
 8012f6a:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 8012f6c:	68bb      	ldr	r3, [r7, #8]
 8012f6e:	681b      	ldr	r3, [r3, #0]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	687a      	ldr	r2, [r7, #4]
 8012f74:	429a      	cmp	r2, r3
 8012f76:	da0a      	bge.n	8012f8e <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	681a      	ldr	r2, [r3, #0]
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	009b      	lsls	r3, r3, #2
 8012f80:	4413      	add	r3, r2
 8012f82:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 8012f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f88:	d001      	beq.n	8012f8e <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	e000      	b.n	8012f90 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 8012f8e:	2300      	movs	r3, #0
 8012f90:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 8012f92:	7dfb      	ldrb	r3, [r7, #23]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00a      	beq.n	8012fae <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x4e>
    return &context->tensors[node->inputs->data[index]];
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	689a      	ldr	r2, [r3, #8]
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	6819      	ldr	r1, [r3, #0]
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	009b      	lsls	r3, r3, #2
 8012fa4:	440b      	add	r3, r1
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	019b      	lsls	r3, r3, #6
 8012faa:	4413      	add	r3, r2
 8012fac:	e000      	b.n	8012fb0 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x50>
  return nullptr;
 8012fae:	2300      	movs	r3, #0
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	371c      	adds	r7, #28
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr

08012fbc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b086      	sub	sp, #24
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
 8012fc4:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f7ff fc7b 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012fcc:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8012fce:	683b      	ldr	r3, [r7, #0]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	db03      	blt.n	8012fdc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 8012fd4:	683a      	ldr	r2, [r7, #0]
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	db01      	blt.n	8012fe0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8012fdc:	f006 f88b 	bl	80190f6 <abort>
  const auto* dims_data = shape.DimsData();
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f7ff fcb2 	bl	801294a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8012fe6:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 8012fe8:	2301      	movs	r3, #1
 8012fea:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8012fec:	2300      	movs	r3, #0
 8012fee:	613b      	str	r3, [r7, #16]
 8012ff0:	693a      	ldr	r2, [r7, #16]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	429a      	cmp	r2, r3
 8012ff6:	da12      	bge.n	801301e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 8012ff8:	693a      	ldr	r2, [r7, #16]
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	429a      	cmp	r2, r3
 8012ffe:	d005      	beq.n	801300c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 8013000:	693b      	ldr	r3, [r7, #16]
 8013002:	009b      	lsls	r3, r3, #2
 8013004:	68ba      	ldr	r2, [r7, #8]
 8013006:	4413      	add	r3, r2
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	e000      	b.n	801300e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 801300c:	2301      	movs	r3, #1
 801300e:	697a      	ldr	r2, [r7, #20]
 8013010:	fb03 f302 	mul.w	r3, r3, r2
 8013014:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	3301      	adds	r3, #1
 801301a:	613b      	str	r3, [r7, #16]
 801301c:	e7e8      	b.n	8012ff0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 801301e:	697b      	ldr	r3, [r7, #20]
}
 8013020:	4618      	mov	r0, r3
 8013022:	3718      	adds	r7, #24
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 8013028:	b590      	push	{r4, r7, lr}
 801302a:	b091      	sub	sp, #68	; 0x44
 801302c:	af00      	add	r7, sp, #0
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
 8013034:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	69db      	ldr	r3, [r3, #28]
 801303a:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	6a1b      	ldr	r3, [r3, #32]
 8013040:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8013042:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013044:	f7ff fc3d 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013048:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 801304a:	6838      	ldr	r0, [r7, #0]
 801304c:	f7ff fc39 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013050:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8013052:	6a3b      	ldr	r3, [r7, #32]
 8013054:	3b01      	subs	r3, #1
 8013056:	4619      	mov	r1, r3
 8013058:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801305a:	f7ff ffaf 	bl	8012fbc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801305e:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8013060:	69fb      	ldr	r3, [r7, #28]
 8013062:	1e99      	subs	r1, r3, #2
 8013064:	6a3b      	ldr	r3, [r7, #32]
 8013066:	3b01      	subs	r3, #1
                                       output_shape, output_dims_count - 1);
 8013068:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801306a:	6838      	ldr	r0, [r7, #0]
 801306c:	f7ff ff36 	bl	8012edc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013070:	6178      	str	r0, [r7, #20]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	3b01      	subs	r3, #1
 8013076:	4619      	mov	r1, r3
 8013078:	6838      	ldr	r0, [r7, #0]
 801307a:	f7ff fc2e 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 801307e:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8013080:	2300      	movs	r3, #0
 8013082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	429a      	cmp	r2, r3
 801308a:	da5f      	bge.n	801314c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801308c:	2300      	movs	r3, #0
 801308e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013090:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013092:	697b      	ldr	r3, [r7, #20]
 8013094:	429a      	cmp	r2, r3
 8013096:	da55      	bge.n	8013144 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8013098:	f04f 0300 	mov.w	r3, #0
 801309c:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 801309e:	2300      	movs	r3, #0
 80130a0:	633b      	str	r3, [r7, #48]	; 0x30
 80130a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80130a4:	693b      	ldr	r3, [r7, #16]
 80130a6:	429a      	cmp	r2, r3
 80130a8:	da21      	bge.n	80130ee <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 80130aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130ac:	693a      	ldr	r2, [r7, #16]
 80130ae:	fb02 f203 	mul.w	r2, r2, r3
 80130b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b4:	4413      	add	r3, r2
 80130b6:	009b      	lsls	r3, r3, #2
 80130b8:	687a      	ldr	r2, [r7, #4]
 80130ba:	4413      	add	r3, r2
 80130bc:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 80130c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c2:	693a      	ldr	r2, [r7, #16]
 80130c4:	fb02 f203 	mul.w	r2, r2, r3
 80130c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130ca:	4413      	add	r3, r2
 80130cc:	009b      	lsls	r3, r3, #2
 80130ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130d0:	4413      	add	r3, r2
 80130d2:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 80130d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80130de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130e2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 80130e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e8:	3301      	adds	r3, #1
 80130ea:	633b      	str	r3, [r7, #48]	; 0x30
 80130ec:	e7d9      	b.n	80130a2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 80130ee:	f04f 0300 	mov.w	r3, #0
 80130f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 80130f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d005      	beq.n	8013106 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 80130fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013100:	4413      	add	r3, r2
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 8013106:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 801310a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 801310e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013112:	697b      	ldr	r3, [r7, #20]
 8013114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013116:	fb02 f203 	mul.w	r2, r2, r3
 801311a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311c:	4413      	add	r3, r2
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013122:	18d4      	adds	r4, r2, r3
 8013124:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8013128:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 801312c:	eeb0 0a67 	vmov.f32	s0, s15
 8013130:	f7ff fd5a 	bl	8012be8 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 8013134:	eef0 7a40 	vmov.f32	s15, s0
 8013138:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801313c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801313e:	3301      	adds	r3, #1
 8013140:	63bb      	str	r3, [r7, #56]	; 0x38
 8013142:	e7a5      	b.n	8013090 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8013144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013146:	3301      	adds	r3, #1
 8013148:	63fb      	str	r3, [r7, #60]	; 0x3c
 801314a:	e79b      	b.n	8013084 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 801314c:	bf00      	nop
 801314e:	3744      	adds	r7, #68	; 0x44
 8013150:	46bd      	mov	sp, r7
 8013152:	bd90      	pop	{r4, r7, pc}

08013154 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 8013154:	b580      	push	{r7, lr}
 8013156:	b096      	sub	sp, #88	; 0x58
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	607a      	str	r2, [r7, #4]
 8013160:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	685b      	ldr	r3, [r3, #4]
 801316c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	689b      	ldr	r3, [r3, #8]
 8013172:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	68db      	ldr	r3, [r3, #12]
 8013178:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	691b      	ldr	r3, [r3, #16]
 801317e:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	695b      	ldr	r3, [r3, #20]
 8013184:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	699b      	ldr	r3, [r3, #24]
 801318a:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 801318c:	6838      	ldr	r0, [r7, #0]
 801318e:	f7ff fb98 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013192:	4603      	mov	r3, r0
 8013194:	2b01      	cmp	r3, #1
 8013196:	dc01      	bgt.n	801319c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8013198:	f005 ffad 	bl	80190f6 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 801319c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801319e:	f7ff fb90 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80131a2:	4603      	mov	r3, r0
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	dc01      	bgt.n	80131ac <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 80131a8:	f005 ffa5 	bl	80190f6 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80131ac:	69ba      	ldr	r2, [r7, #24]
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	429a      	cmp	r2, r3
 80131b2:	dd01      	ble.n	80131b8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 80131b4:	f005 ff9f 	bl	80190f6 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 80131b8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80131ba:	f7ff fb82 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80131be:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 80131c0:	6838      	ldr	r0, [r7, #0]
 80131c2:	f7ff fb7e 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80131c6:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 80131c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ca:	3b01      	subs	r3, #1
 80131cc:	4619      	mov	r1, r3
 80131ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80131d0:	f7ff fef4 	bl	8012fbc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80131d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 80131d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131d8:	1e99      	subs	r1, r3, #2
 80131da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131dc:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 80131de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80131e0:	6838      	ldr	r0, [r7, #0]
 80131e2:	f7ff fe7b 	bl	8012edc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80131e6:	62b8      	str	r0, [r7, #40]	; 0x28
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80131e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ea:	3b01      	subs	r3, #1
 80131ec:	4619      	mov	r1, r3
 80131ee:	6838      	ldr	r0, [r7, #0]
 80131f0:	f7ff fb73 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 80131f4:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 80131f6:	2300      	movs	r3, #0
 80131f8:	657b      	str	r3, [r7, #84]	; 0x54
 80131fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80131fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fe:	429a      	cmp	r2, r3
 8013200:	da73      	bge.n	80132ea <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013202:	2300      	movs	r3, #0
 8013204:	653b      	str	r3, [r7, #80]	; 0x50
 8013206:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320a:	429a      	cmp	r2, r3
 801320c:	da69      	bge.n	80132e2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32 acc = 0;
 801320e:	2300      	movs	r3, #0
 8013210:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8013212:	2300      	movs	r3, #0
 8013214:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013216:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801321a:	429a      	cmp	r2, r3
 801321c:	da24      	bge.n	8013268 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32 input_val = input_data[b * accum_depth + d];
 801321e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013222:	fb02 f203 	mul.w	r2, r2, r3
 8013226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013228:	4413      	add	r3, r2
 801322a:	461a      	mov	r2, r3
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	4413      	add	r3, r2
 8013230:	781b      	ldrb	r3, [r3, #0]
 8013232:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8013234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013238:	fb02 f203 	mul.w	r2, r2, r3
 801323c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801323e:	4413      	add	r3, r2
 8013240:	461a      	mov	r2, r3
 8013242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013244:	4413      	add	r3, r2
 8013246:	781b      	ldrb	r3, [r3, #0]
 8013248:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 801324a:	69fa      	ldr	r2, [r7, #28]
 801324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801324e:	4413      	add	r3, r2
 8013250:	6a39      	ldr	r1, [r7, #32]
 8013252:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013254:	440a      	add	r2, r1
 8013256:	fb02 f203 	mul.w	r2, r2, r3
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	4413      	add	r3, r2
 801325e:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8013260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013262:	3301      	adds	r3, #1
 8013264:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013266:	e7d6      	b.n	8013216 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8013268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801326a:	2b00      	cmp	r3, #0
 801326c:	d007      	beq.n	801327e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 801326e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013270:	009b      	lsls	r3, r3, #2
 8013272:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013274:	4413      	add	r3, r2
 8013276:	681a      	ldr	r2, [r3, #0]
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	4413      	add	r3, r2
 801327c:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013284:	4618      	mov	r0, r3
 8013286:	f7ff fe47 	bl	8012f18 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 801328a:	4603      	mov	r3, r0
 801328c:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 801328e:	693a      	ldr	r2, [r7, #16]
 8013290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013292:	4413      	add	r3, r2
 8013294:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8013296:	f107 0218 	add.w	r2, r7, #24
 801329a:	f107 0310 	add.w	r3, r7, #16
 801329e:	4611      	mov	r1, r2
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7fb ff1d 	bl	800f0e0 <_ZSt3maxIlERKT_S2_S2_>
 80132a6:	4603      	mov	r3, r0
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 80132ac:	f107 0214 	add.w	r2, r7, #20
 80132b0:	f107 0310 	add.w	r3, r7, #16
 80132b4:	4611      	mov	r1, r2
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fb ff26 	bl	800f108 <_ZSt3minIlERKT_S2_S2_>
 80132bc:	4603      	mov	r3, r0
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 80132c2:	6939      	ldr	r1, [r7, #16]
 80132c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80132c8:	fb02 f203 	mul.w	r2, r2, r3
 80132cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132ce:	4413      	add	r3, r2
 80132d0:	461a      	mov	r2, r3
 80132d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80132d4:	4413      	add	r3, r2
 80132d6:	b2ca      	uxtb	r2, r1
 80132d8:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80132da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132dc:	3301      	adds	r3, #1
 80132de:	653b      	str	r3, [r7, #80]	; 0x50
 80132e0:	e791      	b.n	8013206 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 80132e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80132e4:	3301      	adds	r3, #1
 80132e6:	657b      	str	r3, [r7, #84]	; 0x54
 80132e8:	e787      	b.n	80131fa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 80132ea:	bf00      	nop
 80132ec:	3758      	adds	r7, #88	; 0x58
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}

080132f2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 80132f2:	b580      	push	{r7, lr}
 80132f4:	b098      	sub	sp, #96	; 0x60
 80132f6:	af00      	add	r7, sp, #0
 80132f8:	60f8      	str	r0, [r7, #12]
 80132fa:	60b9      	str	r1, [r7, #8]
 80132fc:	607a      	str	r2, [r7, #4]
 80132fe:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	685b      	ldr	r3, [r3, #4]
 801330a:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	689b      	ldr	r3, [r3, #8]
 8013310:	623b      	str	r3, [r7, #32]
  const int32 output_multiplier = params.output_multiplier;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	68db      	ldr	r3, [r3, #12]
 8013316:	64bb      	str	r3, [r7, #72]	; 0x48
  const int output_shift = params.output_shift;
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	691b      	ldr	r3, [r3, #16]
 801331c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_activation_min = params.quantized_activation_min;
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	695b      	ldr	r3, [r3, #20]
 8013322:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	699b      	ldr	r3, [r3, #24]
 8013328:	61bb      	str	r3, [r7, #24]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801332a:	69fa      	ldr	r2, [r7, #28]
 801332c:	69bb      	ldr	r3, [r7, #24]
 801332e:	429a      	cmp	r2, r3
 8013330:	dd01      	ble.n	8013336 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 8013332:	f005 fee0 	bl	80190f6 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 8013336:	6a3b      	ldr	r3, [r7, #32]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d001      	beq.n	8013340 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 801333c:	f005 fedb 	bl	80190f6 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8013340:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013342:	f7ff fabe 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013346:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_dim_count = filter_shape.DimensionsCount();
 8013348:	6838      	ldr	r0, [r7, #0]
 801334a:	f7ff faba 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801334e:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8013350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013352:	3b01      	subs	r3, #1
 8013354:	4619      	mov	r1, r3
 8013356:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8013358:	f7ff fe30 	bl	8012fbc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801335c:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 801335e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013360:	1e99      	subs	r1, r3, #2
 8013362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013364:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 8013366:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013368:	6838      	ldr	r0, [r7, #0]
 801336a:	f7ff fdb7 	bl	8012edc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801336e:	6378      	str	r0, [r7, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8013370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013372:	3b01      	subs	r3, #1
 8013374:	4619      	mov	r1, r3
 8013376:	6838      	ldr	r0, [r7, #0]
 8013378:	f7ff faaf 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 801337c:	6338      	str	r0, [r7, #48]	; 0x30
  for (int b = 0; b < batches; ++b) {
 801337e:	2300      	movs	r3, #0
 8013380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013382:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013386:	429a      	cmp	r2, r3
 8013388:	da7c      	bge.n	8013484 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801338a:	2300      	movs	r3, #0
 801338c:	65bb      	str	r3, [r7, #88]	; 0x58
 801338e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013392:	429a      	cmp	r2, r3
 8013394:	da72      	bge.n	801347c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 8013396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013398:	009b      	lsls	r3, r3, #2
 801339a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801339c:	4413      	add	r3, r2
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 80133a2:	2300      	movs	r3, #0
 80133a4:	657b      	str	r3, [r7, #84]	; 0x54
 80133a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80133a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133aa:	429a      	cmp	r2, r3
 80133ac:	da2c      	bge.n	8013408 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 80133ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80133b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133b2:	fb02 f203 	mul.w	r2, r2, r3
 80133b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133b8:	4413      	add	r3, r2
 80133ba:	461a      	mov	r2, r3
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	4413      	add	r3, r2
 80133c0:	781b      	ldrb	r3, [r3, #0]
 80133c2:	b29a      	uxth	r2, r3
 80133c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	4413      	add	r3, r2
 80133ca:	b29b      	uxth	r3, r3
 80133cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 80133ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133d2:	fb02 f203 	mul.w	r2, r2, r3
 80133d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80133d8:	4413      	add	r3, r2
 80133da:	461a      	mov	r2, r3
 80133dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80133de:	4413      	add	r3, r2
 80133e0:	781b      	ldrb	r3, [r3, #0]
 80133e2:	b29a      	uxth	r2, r3
 80133e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	4413      	add	r3, r2
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
        accum += filter_val * input_val;
 80133ee:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80133f2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80133f6:	fb02 f203 	mul.w	r2, r2, r3
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	4413      	add	r3, r2
 80133fe:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8013400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013402:	3301      	adds	r3, #1
 8013404:	657b      	str	r3, [r7, #84]	; 0x54
 8013406:	e7ce      	b.n	80133a6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801340c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801340e:	4618      	mov	r0, r3
 8013410:	f7ff fd82 	bl	8012f18 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8013414:	4603      	mov	r3, r0
      accum =
 8013416:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 8013418:	69fa      	ldr	r2, [r7, #28]
 801341a:	6a3b      	ldr	r3, [r7, #32]
 801341c:	1ad3      	subs	r3, r2, r3
 801341e:	627b      	str	r3, [r7, #36]	; 0x24
 8013420:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013424:	f107 0314 	add.w	r3, r7, #20
 8013428:	4611      	mov	r1, r2
 801342a:	4618      	mov	r0, r3
 801342c:	f7fb fe58 	bl	800f0e0 <_ZSt3maxIlERKT_S2_S2_>
 8013430:	4603      	mov	r3, r0
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 8013436:	69ba      	ldr	r2, [r7, #24]
 8013438:	6a3b      	ldr	r3, [r7, #32]
 801343a:	1ad3      	subs	r3, r2, r3
 801343c:	62bb      	str	r3, [r7, #40]	; 0x28
 801343e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013442:	f107 0314 	add.w	r3, r7, #20
 8013446:	4611      	mov	r1, r2
 8013448:	4618      	mov	r0, r3
 801344a:	f7fb fe5d 	bl	800f108 <_ZSt3minIlERKT_S2_S2_>
 801344e:	4603      	mov	r3, r0
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 8013454:	697a      	ldr	r2, [r7, #20]
 8013456:	6a3b      	ldr	r3, [r7, #32]
 8013458:	4413      	add	r3, r2
 801345a:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 801345c:	6979      	ldr	r1, [r7, #20]
 801345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013460:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013462:	fb02 f203 	mul.w	r2, r2, r3
 8013466:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013468:	4413      	add	r3, r2
 801346a:	005b      	lsls	r3, r3, #1
 801346c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801346e:	4413      	add	r3, r2
 8013470:	b20a      	sxth	r2, r1
 8013472:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013476:	3301      	adds	r3, #1
 8013478:	65bb      	str	r3, [r7, #88]	; 0x58
 801347a:	e788      	b.n	801338e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 801347c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801347e:	3301      	adds	r3, #1
 8013480:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013482:	e77e      	b.n	8013382 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 8013484:	bf00      	nop
 8013486:	3760      	adds	r7, #96	; 0x60
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 801348c:	b580      	push	{r7, lr}
 801348e:	b096      	sub	sp, #88	; 0x58
 8013490:	af00      	add	r7, sp, #0
 8013492:	60f8      	str	r0, [r7, #12]
 8013494:	60b9      	str	r1, [r7, #8]
 8013496:	607a      	str	r2, [r7, #4]
 8013498:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	685b      	ldr	r3, [r3, #4]
 80134a4:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	689b      	ldr	r3, [r3, #8]
 80134aa:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	68db      	ldr	r3, [r3, #12]
 80134b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	691b      	ldr	r3, [r3, #16]
 80134b6:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	695b      	ldr	r3, [r3, #20]
 80134bc:	623b      	str	r3, [r7, #32]
  const int32 output_activation_max = params.quantized_activation_max;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	699b      	ldr	r3, [r3, #24]
 80134c2:	61fb      	str	r3, [r7, #28]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 80134c4:	6838      	ldr	r0, [r7, #0]
 80134c6:	f7ff f9fc 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80134ca:	4603      	mov	r3, r0
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	dc01      	bgt.n	80134d4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 80134d0:	f005 fe11 	bl	80190f6 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 80134d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80134d6:	f7ff f9f4 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80134da:	4603      	mov	r3, r0
 80134dc:	2b02      	cmp	r3, #2
 80134de:	d001      	beq.n	80134e4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 80134e0:	f005 fe09 	bl	80190f6 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 80134e4:	6a3a      	ldr	r2, [r7, #32]
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	429a      	cmp	r2, r3
 80134ea:	dd01      	ble.n	80134f0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 80134ec:	f005 fe03 	bl	80190f6 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 80134f0:	6838      	ldr	r0, [r7, #0]
 80134f2:	f7ff f9e6 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80134f6:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 80134f8:	2100      	movs	r1, #0
 80134fa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80134fc:	f7ff f9ed 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 8013500:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 8013502:	2101      	movs	r1, #1
 8013504:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8013506:	f7ff f9e8 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 801350a:	4603      	mov	r3, r0
 801350c:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 801350e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013510:	3b02      	subs	r3, #2
 8013512:	4619      	mov	r1, r3
 8013514:	6838      	ldr	r0, [r7, #0]
 8013516:	f7ff f9e0 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 801351a:	4602      	mov	r2, r0
 801351c:	69bb      	ldr	r3, [r7, #24]
 801351e:	429a      	cmp	r2, r3
 8013520:	da01      	bge.n	8013526 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x9a>
 8013522:	f005 fde8 	bl	80190f6 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8013526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013528:	3b01      	subs	r3, #1
 801352a:	4619      	mov	r1, r3
 801352c:	6838      	ldr	r0, [r7, #0]
 801352e:	f7ff f9d4 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 8013532:	62f8      	str	r0, [r7, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
 8013534:	2300      	movs	r3, #0
 8013536:	657b      	str	r3, [r7, #84]	; 0x54
 8013538:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801353c:	429a      	cmp	r2, r3
 801353e:	da75      	bge.n	801362c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8013540:	2300      	movs	r3, #0
 8013542:	653b      	str	r3, [r7, #80]	; 0x50
 8013544:	69bb      	ldr	r3, [r7, #24]
 8013546:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013548:	429a      	cmp	r2, r3
 801354a:	da6b      	bge.n	8013624 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x198>
      int32 acc = 0;
 801354c:	2300      	movs	r3, #0
 801354e:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8013550:	2300      	movs	r3, #0
 8013552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013554:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013558:	429a      	cmp	r2, r3
 801355a:	da26      	bge.n	80135aa <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11e>
        int32 input_val = input_data[b * accum_depth + d];
 801355c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801355e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013560:	fb02 f203 	mul.w	r2, r2, r3
 8013564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013566:	4413      	add	r3, r2
 8013568:	461a      	mov	r2, r3
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	4413      	add	r3, r2
 801356e:	f993 3000 	ldrsb.w	r3, [r3]
 8013572:	62bb      	str	r3, [r7, #40]	; 0x28
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8013574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013578:	fb02 f203 	mul.w	r2, r2, r3
 801357c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801357e:	4413      	add	r3, r2
 8013580:	461a      	mov	r2, r3
 8013582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013584:	4413      	add	r3, r2
 8013586:	f993 3000 	ldrsb.w	r3, [r3]
 801358a:	627b      	str	r3, [r7, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 801358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801358e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013590:	4413      	add	r3, r2
 8013592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013596:	440a      	add	r2, r1
 8013598:	fb02 f203 	mul.w	r2, r2, r3
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	4413      	add	r3, r2
 80135a0:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 80135a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80135a4:	3301      	adds	r3, #1
 80135a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80135a8:	e7d4      	b.n	8013554 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc8>
      }
      if (bias_data) {
 80135aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d007      	beq.n	80135c0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x134>
        acc += bias_data[out_c];
 80135b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135b2:	009b      	lsls	r3, r3, #2
 80135b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80135b6:	4413      	add	r3, r2
 80135b8:	681a      	ldr	r2, [r3, #0]
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	4413      	add	r3, r2
 80135be:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80135c6:	4618      	mov	r0, r3
 80135c8:	f7ff fca6 	bl	8012f18 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80135cc:	4603      	mov	r3, r0
 80135ce:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 80135d0:	697a      	ldr	r2, [r7, #20]
 80135d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135d4:	4413      	add	r3, r2
 80135d6:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 80135d8:	f107 0220 	add.w	r2, r7, #32
 80135dc:	f107 0314 	add.w	r3, r7, #20
 80135e0:	4611      	mov	r1, r2
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fb fd7c 	bl	800f0e0 <_ZSt3maxIlERKT_S2_S2_>
 80135e8:	4603      	mov	r3, r0
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 80135ee:	f107 021c 	add.w	r2, r7, #28
 80135f2:	f107 0314 	add.w	r3, r7, #20
 80135f6:	4611      	mov	r1, r2
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fb fd85 	bl	800f108 <_ZSt3minIlERKT_S2_S2_>
 80135fe:	4603      	mov	r3, r0
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 8013604:	6979      	ldr	r1, [r7, #20]
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801360a:	fb02 f203 	mul.w	r2, r2, r3
 801360e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013610:	4413      	add	r3, r2
 8013612:	461a      	mov	r2, r3
 8013614:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013616:	4413      	add	r3, r2
 8013618:	b24a      	sxtb	r2, r1
 801361a:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801361c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801361e:	3301      	adds	r3, #1
 8013620:	653b      	str	r3, [r7, #80]	; 0x50
 8013622:	e78f      	b.n	8013544 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb8>
  for (int b = 0; b < batches; ++b) {
 8013624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013626:	3301      	adds	r3, #1
 8013628:	657b      	str	r3, [r7, #84]	; 0x54
 801362a:	e785      	b.n	8013538 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xac>
    }
  }
}
 801362c:	bf00      	nop
 801362e:	3758      	adds	r7, #88	; 0x58
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}

08013634 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 8013634:	b590      	push	{r4, r7, lr}
 8013636:	b08d      	sub	sp, #52	; 0x34
 8013638:	af02      	add	r7, sp, #8
 801363a:	60f8      	str	r0, [r7, #12]
 801363c:	607b      	str	r3, [r7, #4]
 801363e:	460b      	mov	r3, r1
 8013640:	72fb      	strb	r3, [r7, #11]
 8013642:	4613      	mov	r3, r2
 8013644:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 8013646:	2300      	movs	r3, #0
 8013648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 801364c:	7abb      	ldrb	r3, [r7, #10]
 801364e:	2b01      	cmp	r3, #1
 8013650:	d041      	beq.n	80136d6 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 8013652:	f04f 0300 	mov.w	r3, #0
 8013656:	f04f 0400 	mov.w	r4, #0
 801365a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 801365e:	f107 0318 	add.w	r3, r7, #24
 8013662:	9301      	str	r3, [sp, #4]
 8013664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013666:	9300      	str	r3, [sp, #0]
 8013668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801366a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801366c:	6879      	ldr	r1, [r7, #4]
 801366e:	68f8      	ldr	r0, [r7, #12]
 8013670:	f7fb fb5a 	bl	800ed28 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8013674:	4603      	mov	r3, r0
 8013676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801367a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801367e:	2b00      	cmp	r3, #0
 8013680:	d002      	beq.n	8013688 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 8013682:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013686:	e028      	b.n	80136da <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 8013688:	ed97 7b06 	vldr	d7, [r7, #24]
 801368c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801368e:	f107 0214 	add.w	r2, r7, #20
 8013692:	4611      	mov	r1, r2
 8013694:	4618      	mov	r0, r3
 8013696:	eeb0 0a47 	vmov.f32	s0, s14
 801369a:	eef0 0a67 	vmov.f32	s1, s15
 801369e:	f7fb f929 	bl	800e8f4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	425a      	negs	r2, r3
 80136a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136a8:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 80136aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136ac:	f103 0208 	add.w	r2, r3, #8
 80136b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136b2:	330c      	adds	r3, #12
 80136b4:	7af9      	ldrb	r1, [r7, #11]
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	4613      	mov	r3, r2
 80136ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80136bc:	68f8      	ldr	r0, [r7, #12]
 80136be:	f7fb fcbb 	bl	800f038 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 80136c2:	4603      	mov	r3, r0
 80136c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80136c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d002      	beq.n	80136d6 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 80136d0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80136d4:	e001      	b.n	80136da <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 80136d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80136da:	4618      	mov	r0, r3
 80136dc:	372c      	adds	r7, #44	; 0x2c
 80136de:	46bd      	mov	sp, r7
 80136e0:	bd90      	pop	{r4, r7, pc}

080136e2 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 80136e2:	b580      	push	{r7, lr}
 80136e4:	b086      	sub	sp, #24
 80136e6:	af00      	add	r7, sp, #0
 80136e8:	60f8      	str	r0, [r7, #12]
 80136ea:	60b9      	str	r1, [r7, #8]
 80136ec:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d101      	bne.n	80136fa <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 80136f6:	f005 fcfe 	bl	80190f6 <abort>
  void* data = nullptr;
 80136fa:	2300      	movs	r3, #0
 80136fc:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013702:	f107 0214 	add.w	r2, r7, #20
 8013706:	2114      	movs	r1, #20
 8013708:	68f8      	ldr	r0, [r7, #12]
 801370a:	4798      	blx	r3
 801370c:	4603      	mov	r3, r0
 801370e:	2b01      	cmp	r3, #1
 8013710:	bf0c      	ite	eq
 8013712:	2301      	moveq	r3, #1
 8013714:	2300      	movne	r3, #0
 8013716:	b2db      	uxtb	r3, r3
 8013718:	2b00      	cmp	r3, #0
 801371a:	d001      	beq.n	8013720 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 801371c:	2300      	movs	r3, #0
 801371e:	e000      	b.n	8013722 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 8013720:	697b      	ldr	r3, [r7, #20]
}
 8013722:	4618      	mov	r0, r3
 8013724:	3718      	adds	r7, #24
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}
	...

0801372c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 801372c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801372e:	b08d      	sub	sp, #52	; 0x34
 8013730:	af04      	add	r7, sp, #16
 8013732:	6078      	str	r0, [r7, #4]
 8013734:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8013736:	683b      	ldr	r3, [r7, #0]
 8013738:	691b      	ldr	r3, [r3, #16]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d101      	bne.n	8013742 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801373e:	f005 fcda 	bl	80190f6 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8013742:	683b      	ldr	r3, [r7, #0]
 8013744:	695b      	ldr	r3, [r3, #20]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d101      	bne.n	801374e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 801374a:	f005 fcd4 	bl	80190f6 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	691b      	ldr	r3, [r3, #16]
 8013752:	61fb      	str	r3, [r7, #28]
  const auto params =
 8013754:	683b      	ldr	r3, [r7, #0]
 8013756:	695b      	ldr	r3, [r3, #20]
 8013758:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2200      	movs	r2, #0
 801375e:	6839      	ldr	r1, [r7, #0]
 8013760:	4618      	mov	r0, r3
 8013762:	f7ff f829 	bl	80127b8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013766:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2201      	movs	r2, #1
 801376c:	6839      	ldr	r1, [r7, #0]
 801376e:	4618      	mov	r0, r3
 8013770:	f7ff f822 	bl	80127b8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013774:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2202      	movs	r2, #2
 801377a:	6839      	ldr	r1, [r7, #0]
 801377c:	4618      	mov	r0, r3
 801377e:	f7ff fbef 	bl	8012f60 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8013782:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2200      	movs	r2, #0
 8013788:	6839      	ldr	r1, [r7, #0]
 801378a:	4618      	mov	r0, r3
 801378c:	f7ff f82a 	bl	80127e4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013790:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8013792:	697b      	ldr	r3, [r7, #20]
 8013794:	781a      	ldrb	r2, [r3, #0]
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	781b      	ldrb	r3, [r3, #0]
 801379a:	429a      	cmp	r2, r3
 801379c:	d01c      	beq.n	80137d8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xac>
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	695c      	ldr	r4, [r3, #20]
 80137a2:	687d      	ldr	r5, [r7, #4]
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	781b      	ldrb	r3, [r3, #0]
 80137a8:	4618      	mov	r0, r3
 80137aa:	f7f9 fe81 	bl	800d4b0 <TfLiteTypeGetName>
 80137ae:	4606      	mov	r6, r0
 80137b0:	68bb      	ldr	r3, [r7, #8]
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7f9 fe7b 	bl	800d4b0 <TfLiteTypeGetName>
 80137ba:	4603      	mov	r3, r0
 80137bc:	9303      	str	r3, [sp, #12]
 80137be:	9602      	str	r6, [sp, #8]
 80137c0:	4b17      	ldr	r3, [pc, #92]	; (8013820 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 80137c2:	9301      	str	r3, [sp, #4]
 80137c4:	4b17      	ldr	r3, [pc, #92]	; (8013824 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 80137c6:	9300      	str	r3, [sp, #0]
 80137c8:	f240 23ef 	movw	r3, #751	; 0x2ef
 80137cc:	4a16      	ldr	r2, [pc, #88]	; (8013828 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
 80137ce:	4917      	ldr	r1, [pc, #92]	; (801382c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
 80137d0:	4628      	mov	r0, r5
 80137d2:	47a0      	blx	r4
 80137d4:	2301      	movs	r3, #1
 80137d6:	e01e      	b.n	8013816 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	781a      	ldrb	r2, [r3, #0]
 80137dc:	693b      	ldr	r3, [r7, #16]
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d007      	beq.n	80137f4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xc8>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	695b      	ldr	r3, [r3, #20]
 80137e8:	687a      	ldr	r2, [r7, #4]
 80137ea:	4911      	ldr	r1, [pc, #68]	; (8013830 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x104>)
 80137ec:	4610      	mov	r0, r2
 80137ee:	4798      	blx	r3
 80137f0:	2301      	movs	r3, #1
 80137f2:	e010      	b.n	8013816 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xea>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	7819      	ldrb	r1, [r3, #0]
 80137fa:	697b      	ldr	r3, [r7, #20]
 80137fc:	781a      	ldrb	r2, [r3, #0]
                         filter, bias, output, data);
 80137fe:	69fb      	ldr	r3, [r7, #28]
 8013800:	9303      	str	r3, [sp, #12]
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	9302      	str	r3, [sp, #8]
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	9301      	str	r3, [sp, #4]
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	9300      	str	r3, [sp, #0]
 801380e:	697b      	ldr	r3, [r7, #20]
 8013810:	f7ff ff10 	bl	8013634 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 8013814:	4603      	mov	r3, r0
}
 8013816:	4618      	mov	r0, r3
 8013818:	3724      	adds	r7, #36	; 0x24
 801381a:	46bd      	mov	sp, r7
 801381c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801381e:	bf00      	nop
 8013820:	0801f07c 	.word	0x0801f07c
 8013824:	0801f08c 	.word	0x0801f08c
 8013828:	0801efcc 	.word	0x0801efcc
 801382c:	0801f060 	.word	0x0801f060
 8013830:	0801f098 	.word	0x0801f098

08013834 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 8013834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013836:	b0ad      	sub	sp, #180	; 0xb4
 8013838:	af06      	add	r7, sp, #24
 801383a:	60f8      	str	r0, [r7, #12]
 801383c:	60b9      	str	r1, [r7, #8]
 801383e:	607a      	str	r2, [r7, #4]
 8013840:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 8013842:	683b      	ldr	r3, [r7, #0]
 8013844:	691b      	ldr	r3, [r3, #16]
 8013846:	425b      	negs	r3, r3
 8013848:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 801384a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801384e:	691b      	ldr	r3, [r3, #16]
 8013850:	425b      	negs	r3, r3
 8013852:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 8013854:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013858:	691b      	ldr	r3, [r3, #16]
 801385a:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	425b      	negs	r3, r3
 8013868:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	689b      	ldr	r3, [r3, #8]
 801386e:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	68db      	ldr	r3, [r3, #12]
 8013874:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8013876:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801387a:	6839      	ldr	r1, [r7, #0]
 801387c:	4618      	mov	r0, r3
 801387e:	f7ff f8be 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8013882:	6838      	ldr	r0, [r7, #0]
 8013884:	f7ff f8fb 	bl	8012a7e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8013888:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 801388a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801388e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8013892:	4618      	mov	r0, r3
 8013894:	f7ff f8b3 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8013898:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801389c:	f7ff f8ef 	bl	8012a7e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80138a0:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 80138a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80138a6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7ff f8a7 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 80138b0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80138b4:	f7ff fae7 	bl	8012e86 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80138b8:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 80138ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80138be:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80138c2:	4618      	mov	r0, r3
 80138c4:	f7ff f89b 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 80138c8:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80138cc:	f7ff f8e8 	bl	8012aa0 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80138d0:	4603      	mov	r3, r0
 80138d2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80138d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80138da:	f107 0010 	add.w	r0, r7, #16
 80138de:	9304      	str	r3, [sp, #16]
 80138e0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80138e4:	9303      	str	r3, [sp, #12]
 80138e6:	9502      	str	r5, [sp, #8]
 80138e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80138ec:	9301      	str	r3, [sp, #4]
 80138ee:	9400      	str	r4, [sp, #0]
 80138f0:	4613      	mov	r3, r2
 80138f2:	4632      	mov	r2, r6
 80138f4:	f7ff fdca 	bl	801348c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 80138f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80138fc:	4618      	mov	r0, r3
 80138fe:	f7fe ffca 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 8013902:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013906:	4618      	mov	r0, r3
 8013908:	f7fe ffc5 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 801390c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013910:	4618      	mov	r0, r3
 8013912:	f7fe ffc0 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8013916:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801391a:	4618      	mov	r0, r3
 801391c:	f7fe ffbb 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 8013920:	2300      	movs	r3, #0
}
 8013922:	4618      	mov	r0, r3
 8013924:	379c      	adds	r7, #156	; 0x9c
 8013926:	46bd      	mov	sp, r7
 8013928:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801392c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 801392c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801392e:	b0c9      	sub	sp, #292	; 0x124
 8013930:	af06      	add	r7, sp, #24
 8013932:	60f8      	str	r0, [r7, #12]
 8013934:	f107 0008 	add.w	r0, r7, #8
 8013938:	6001      	str	r1, [r0, #0]
 801393a:	1d39      	adds	r1, r7, #4
 801393c:	600a      	str	r2, [r1, #0]
 801393e:	463a      	mov	r2, r7
 8013940:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 8013942:	463b      	mov	r3, r7
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	691b      	ldr	r3, [r3, #16]
 8013948:	425b      	negs	r3, r3
 801394a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 801394e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013952:	691b      	ldr	r3, [r3, #16]
 8013954:	425b      	negs	r3, r3
 8013956:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 801395a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801395e:	691b      	ldr	r3, [r3, #16]
 8013960:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 8013964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013968:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 801396a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801396e:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 8013970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013974:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 8013976:	1d3b      	adds	r3, r7, #4
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 801397e:	1d3b      	adds	r3, r7, #4
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	685b      	ldr	r3, [r3, #4]
 8013984:	425b      	negs	r3, r3
 8013986:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 8013988:	1d3b      	adds	r3, r7, #4
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	689b      	ldr	r3, [r3, #8]
 801398e:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8013990:	1d3b      	adds	r3, r7, #4
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	68db      	ldr	r3, [r3, #12]
 8013996:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 8013998:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	2b03      	cmp	r3, #3
 80139a0:	d002      	beq.n	80139a8 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x7c>
 80139a2:	2b07      	cmp	r3, #7
 80139a4:	d058      	beq.n	8013a58 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x12c>
 80139a6:	e0af      	b.n	8013b08 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 80139a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80139ac:	463b      	mov	r3, r7
 80139ae:	6819      	ldr	r1, [r3, #0]
 80139b0:	4610      	mov	r0, r2
 80139b2:	f7ff f824 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80139b6:	463b      	mov	r3, r7
 80139b8:	6818      	ldr	r0, [r3, #0]
 80139ba:	f7fe ff29 	bl	8012810 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80139be:	4606      	mov	r6, r0
 80139c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80139c4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7ff f818 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80139ce:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80139d2:	f7fe ff1d 	bl	8012810 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80139d6:	4604      	mov	r4, r0
 80139d8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80139dc:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7ff f80c 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80139e6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80139ea:	f7ff fa4c 	bl	8012e86 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80139ee:	4605      	mov	r5, r0
 80139f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80139f4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80139f8:	4618      	mov	r0, r3
 80139fa:	f7ff f800 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80139fe:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8013a02:	f7fe ff16 	bl	8012832 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8013a06:	4603      	mov	r3, r0
 8013a08:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8013a0c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8013a10:	f107 0014 	add.w	r0, r7, #20
 8013a14:	9304      	str	r3, [sp, #16]
 8013a16:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013a1a:	9303      	str	r3, [sp, #12]
 8013a1c:	9502      	str	r5, [sp, #8]
 8013a1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013a22:	9301      	str	r3, [sp, #4]
 8013a24:	9400      	str	r4, [sp, #0]
 8013a26:	4613      	mov	r3, r2
 8013a28:	4632      	mov	r2, r6
 8013a2a:	f7ff fb93 	bl	8013154 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 8013a2e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7fe ff2f 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
 8013a38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f7fe ff2a 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
 8013a42:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7fe ff25 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
 8013a4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013a50:	4618      	mov	r0, r3
 8013a52:	f7fe ff20 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8013a56:	e069      	b.n	8013b2c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 8013a58:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8013a5c:	463b      	mov	r3, r7
 8013a5e:	6819      	ldr	r1, [r3, #0]
 8013a60:	4610      	mov	r0, r2
 8013a62:	f7fe ffcc 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013a66:	463b      	mov	r3, r7
 8013a68:	6818      	ldr	r0, [r3, #0]
 8013a6a:	f7fe fed1 	bl	8012810 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013a6e:	4606      	mov	r6, r0
 8013a70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013a74:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f7fe ffc0 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013a7e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8013a82:	f7fe fec5 	bl	8012810 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013a86:	4604      	mov	r4, r0
 8013a88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013a8c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013a90:	4618      	mov	r0, r3
 8013a92:	f7fe ffb4 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013a96:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8013a9a:	f7ff f9f4 	bl	8012e86 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8013a9e:	4605      	mov	r5, r0
 8013aa0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013aa4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7fe ffa8 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013aae:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8013ab2:	f000 f937 	bl	8013d24 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013abc:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8013ac0:	f107 0014 	add.w	r0, r7, #20
 8013ac4:	9304      	str	r3, [sp, #16]
 8013ac6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013aca:	9303      	str	r3, [sp, #12]
 8013acc:	9502      	str	r5, [sp, #8]
 8013ace:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013ad2:	9301      	str	r3, [sp, #4]
 8013ad4:	9400      	str	r4, [sp, #0]
 8013ad6:	4613      	mov	r3, r2
 8013ad8:	4632      	mov	r2, r6
 8013ada:	f7ff fc0a 	bl	80132f2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 8013ade:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fe fed7 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
 8013ae8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7fe fed2 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
 8013af2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7fe fecd 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
 8013afc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7fe fec8 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8013b06:	e011      	b.n	8013b2c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	695c      	ldr	r4, [r3, #20]
 8013b0c:	68fd      	ldr	r5, [r7, #12]
 8013b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b12:	781b      	ldrb	r3, [r3, #0]
 8013b14:	4618      	mov	r0, r3
 8013b16:	f7f9 fccb 	bl	800d4b0 <TfLiteTypeGetName>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013b20:	781b      	ldrb	r3, [r3, #0]
 8013b22:	4905      	ldr	r1, [pc, #20]	; (8013b38 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>)
 8013b24:	4628      	mov	r0, r5
 8013b26:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 8013b28:	2301      	movs	r3, #1
 8013b2a:	e000      	b.n	8013b2e <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x202>
  }

  return kTfLiteOk;
 8013b2c:	2300      	movs	r3, #0
}
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b38:	0801f15c 	.word	0x0801f15c

08013b3c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 8013b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b3e:	b0af      	sub	sp, #188	; 0xbc
 8013b40:	af06      	add	r7, sp, #24
 8013b42:	60f8      	str	r0, [r7, #12]
 8013b44:	60b9      	str	r1, [r7, #8]
 8013b46:	603b      	str	r3, [r7, #0]
 8013b48:	4613      	mov	r3, r2
 8013b4a:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 8013b4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8013b50:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8013b54:	79fb      	ldrb	r3, [r7, #7]
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7ff f8d8 	bl	8012d0c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 8013b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 8013b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b62:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 8013b64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b68:	6839      	ldr	r1, [r7, #0]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7fe ff47 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8013b70:	6838      	ldr	r0, [r7, #0]
 8013b72:	f7fe ff62 	bl	8012a3a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013b76:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 8013b78:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013b7c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013b80:	4618      	mov	r0, r3
 8013b82:	f7fe ff3c 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8013b86:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8013b8a:	f7fe ff56 	bl	8012a3a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013b8e:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8013b90:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013b94:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f7fe ff30 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8013b9e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8013ba2:	f7fe ff4a 	bl	8012a3a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013ba6:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8013ba8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013bac:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7fe ff24 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8013bb6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8013bba:	f7fe ff4f 	bl	8012a5c <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013bc4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013bc8:	f107 0010 	add.w	r0, r7, #16
 8013bcc:	9304      	str	r3, [sp, #16]
 8013bce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013bd2:	9303      	str	r3, [sp, #12]
 8013bd4:	9502      	str	r5, [sp, #8]
 8013bd6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013bda:	9301      	str	r3, [sp, #4]
 8013bdc:	9400      	str	r4, [sp, #0]
 8013bde:	4613      	mov	r3, r2
 8013be0:	4632      	mov	r2, r6
 8013be2:	f7ff fa21 	bl	8013028 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8013be6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013bea:	4618      	mov	r0, r3
 8013bec:	f7fe fe53 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
 8013bf0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013bf4:	4618      	mov	r0, r3
 8013bf6:	f7fe fe4e 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 8013bfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f7fe fe49 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 8013c04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c08:	4618      	mov	r0, r3
 8013c0a:	f7fe fe44 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 8013c0e:	2300      	movs	r3, #0
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	37a4      	adds	r7, #164	; 0xa4
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c18 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8013c18:	b5b0      	push	{r4, r5, r7, lr}
 8013c1a:	b08c      	sub	sp, #48	; 0x30
 8013c1c:	af04      	add	r7, sp, #16
 8013c1e:	6078      	str	r0, [r7, #4]
 8013c20:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	695b      	ldr	r3, [r3, #20]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d101      	bne.n	8013c2e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 8013c2a:	f005 fa64 	bl	80190f6 <abort>
  const auto* params =
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	695b      	ldr	r3, [r3, #20]
 8013c32:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	2200      	movs	r2, #0
 8013c38:	6839      	ldr	r1, [r7, #0]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f7fe fdbc 	bl	80127b8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013c40:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2201      	movs	r2, #1
 8013c46:	6839      	ldr	r1, [r7, #0]
 8013c48:	4618      	mov	r0, r3
 8013c4a:	f7fe fdb5 	bl	80127b8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8013c4e:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	2202      	movs	r2, #2
 8013c54:	6839      	ldr	r1, [r7, #0]
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7ff f982 	bl	8012f60 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8013c5c:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	2200      	movs	r2, #0
 8013c62:	6839      	ldr	r1, [r7, #0]
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7fe fdbd 	bl	80127e4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013c6a:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	691b      	ldr	r3, [r3, #16]
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d101      	bne.n	8013c78 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x60>
 8013c74:	f005 fa3f 	bl	80190f6 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	691b      	ldr	r3, [r3, #16]
 8013c7c:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8013c7e:	69bb      	ldr	r3, [r7, #24]
 8013c80:	781b      	ldrb	r3, [r3, #0]
 8013c82:	2b03      	cmp	r3, #3
 8013c84:	d020      	beq.n	8013cc8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 8013c86:	2b09      	cmp	r3, #9
 8013c88:	d010      	beq.n	8013cac <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x94>
 8013c8a:	2b01      	cmp	r3, #1
 8013c8c:	d12a      	bne.n	8013ce4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	781a      	ldrb	r2, [r3, #0]
                       output);
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	9302      	str	r3, [sp, #8]
 8013c98:	693b      	ldr	r3, [r7, #16]
 8013c9a:	9301      	str	r3, [sp, #4]
 8013c9c:	697b      	ldr	r3, [r7, #20]
 8013c9e:	9300      	str	r3, [sp, #0]
 8013ca0:	69bb      	ldr	r3, [r7, #24]
 8013ca2:	6839      	ldr	r1, [r7, #0]
 8013ca4:	f7ff ff4a 	bl	8013b3c <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	e02a      	b.n	8013d02 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8013cac:	6878      	ldr	r0, [r7, #4]
                               output);
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	9302      	str	r3, [sp, #8]
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	9301      	str	r3, [sp, #4]
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	9300      	str	r3, [sp, #0]
 8013cba:	69bb      	ldr	r3, [r7, #24]
 8013cbc:	68ba      	ldr	r2, [r7, #8]
 8013cbe:	6839      	ldr	r1, [r7, #0]
 8013cc0:	f7ff fdb8 	bl	8013834 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	e01c      	b.n	8013d02 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	9302      	str	r3, [sp, #8]
 8013cce:	693b      	ldr	r3, [r7, #16]
 8013cd0:	9301      	str	r3, [sp, #4]
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	9300      	str	r3, [sp, #0]
 8013cd6:	69bb      	ldr	r3, [r7, #24]
 8013cd8:	68ba      	ldr	r2, [r7, #8]
 8013cda:	6839      	ldr	r1, [r7, #0]
 8013cdc:	f7ff fe26 	bl	801392c <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	e00e      	b.n	8013d02 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	695c      	ldr	r4, [r3, #20]
 8013ce8:	687d      	ldr	r5, [r7, #4]
 8013cea:	69bb      	ldr	r3, [r7, #24]
 8013cec:	781b      	ldrb	r3, [r3, #0]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7f9 fbde 	bl	800d4b0 <TfLiteTypeGetName>
 8013cf4:	4602      	mov	r2, r0
 8013cf6:	69bb      	ldr	r3, [r7, #24]
 8013cf8:	781b      	ldrb	r3, [r3, #0]
 8013cfa:	4904      	ldr	r1, [pc, #16]	; (8013d0c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 8013cfc:	4628      	mov	r0, r5
 8013cfe:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8013d00:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 8013d02:	4618      	mov	r0, r3
 8013d04:	3720      	adds	r7, #32
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bdb0      	pop	{r4, r5, r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	0801f15c 	.word	0x0801f15c

08013d10 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 8013d10:	b480      	push	{r7}
 8013d12:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8013d14:	4b02      	ldr	r3, [pc, #8]	; (8013d20 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d1e:	4770      	bx	lr
 8013d20:	20000654 	.word	0x20000654

08013d24 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8013d24:	b480      	push	{r7}
 8013d26:	b083      	sub	sp, #12
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d002      	beq.n	8013d38 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	685b      	ldr	r3, [r3, #4]
 8013d36:	e000      	b.n	8013d3a <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 8013d38:	2300      	movs	r3, #0
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	370c      	adds	r7, #12
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d44:	4770      	bx	lr

08013d46 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
 8013d46:	b590      	push	{r4, r7, lr}
 8013d48:	b087      	sub	sp, #28
 8013d4a:	af00      	add	r7, sp, #0
 8013d4c:	60f8      	str	r0, [r7, #12]
 8013d4e:	60b9      	str	r1, [r7, #8]
 8013d50:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 8013d52:	68f8      	ldr	r0, [r7, #12]
 8013d54:	f7fe fdb5 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013d58:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	617b      	str	r3, [r7, #20]
 8013d5e:	697a      	ldr	r2, [r7, #20]
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	429a      	cmp	r2, r3
 8013d64:	da15      	bge.n	8013d92 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 8013d66:	697a      	ldr	r2, [r7, #20]
 8013d68:	68bb      	ldr	r3, [r7, #8]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d00d      	beq.n	8013d8a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8013d6e:	6979      	ldr	r1, [r7, #20]
 8013d70:	68f8      	ldr	r0, [r7, #12]
 8013d72:	f7fe fdb2 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 8013d76:	4604      	mov	r4, r0
 8013d78:	6979      	ldr	r1, [r7, #20]
 8013d7a:	6878      	ldr	r0, [r7, #4]
 8013d7c:	f7fe fdad 	bl	80128da <_ZNK6tflite12RuntimeShape4DimsEi>
 8013d80:	4603      	mov	r3, r0
 8013d82:	429c      	cmp	r4, r3
 8013d84:	d001      	beq.n	8013d8a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 8013d86:	f005 f9b6 	bl	80190f6 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	3301      	adds	r3, #1
 8013d8e:	617b      	str	r3, [r7, #20]
 8013d90:	e7e5      	b.n	8013d5e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
    }
  }
  return FlatSizeSkipDim(shape, skip_dim);
 8013d92:	68b9      	ldr	r1, [r7, #8]
 8013d94:	68f8      	ldr	r0, [r7, #12]
 8013d96:	f7ff f911 	bl	8012fbc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8013d9a:	4603      	mov	r3, r0
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	371c      	adds	r7, #28
 8013da0:	46bd      	mov	sp, r7
 8013da2:	bd90      	pop	{r4, r7, pc}

08013da4 <_ZN6tflite17CountLeadingZerosImEEiT_>:
  int32_t result = x >> total_shift;
  return result;
}

template <typename T>
int CountLeadingZeros(T integer_input) {
 8013da4:	b480      	push	{r7}
 8013da6:	b083      	sub	sp, #12
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
  static_assert(std::is_unsigned<T>::value,
                "Only unsigned integer types handled.");
#if defined(__GNUC__)
  return integer_input ? __builtin_clz(integer_input)
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d003      	beq.n	8013dba <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8013db8:	e000      	b.n	8013dbc <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8013dba:	2320      	movs	r3, #32
    integer_input <<= 1;
    ++leading_zeros;
  }
  return leading_zeros;
#endif
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	370c      	adds	r7, #12
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dc6:	4770      	bx	lr

08013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 8013dc8:	b480      	push	{r7}
 8013dca:	b083      	sub	sp, #12
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	6078      	str	r0, [r7, #4]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	370c      	adds	r7, #12
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ddc:	4770      	bx	lr

08013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8013dde:	b590      	push	{r4, r7, lr}
 8013de0:	b085      	sub	sp, #20
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8013de6:	f107 030c 	add.w	r3, r7, #12
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7ff ffec 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013df0:	4604      	mov	r4, r0
 8013df2:	6878      	ldr	r0, [r7, #4]
 8013df4:	f7fe ffcc 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013df8:	4603      	mov	r3, r0
 8013dfa:	6023      	str	r3, [r4, #0]
    return retval;
 8013dfc:	68fb      	ldr	r3, [r7, #12]
  }
 8013dfe:	4618      	mov	r0, r3
 8013e00:	3714      	adds	r7, #20
 8013e02:	46bd      	mov	sp, r7
 8013e04:	bd90      	pop	{r4, r7, pc}

08013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8013e06:	b580      	push	{r7, lr}
 8013e08:	b082      	sub	sp, #8
 8013e0a:	af00      	add	r7, sp, #0
 8013e0c:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 8013e0e:	2100      	movs	r1, #0
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f7fe ff09 	bl	8012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013e16:	4603      	mov	r3, r0
}
 8013e18:	4618      	mov	r0, r3
 8013e1a:	3708      	adds	r7, #8
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	bd80      	pop	{r7, pc}

08013e20 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b082      	sub	sp, #8
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f000 f813 	bl	8013e54 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 8013e2e:	4603      	mov	r3, r0
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3708      	adds	r7, #8
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 8013e38:	b480      	push	{r7}
 8013e3a:	b083      	sub	sp, #12
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
  return a - b;
 8013e42:	687a      	ldr	r2, [r7, #4]
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	1ad3      	subs	r3, r2, r3
}
 8013e48:	4618      	mov	r0, r3
 8013e4a:	370c      	adds	r7, #12
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e52:	4770      	bx	lr

08013e54 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013e54:	b580      	push	{r7, lr}
 8013e56:	b082      	sub	sp, #8
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013e5c:	2101      	movs	r1, #1
 8013e5e:	6878      	ldr	r0, [r7, #4]
 8013e60:	f7fe fee2 	bl	8012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013e64:	4603      	mov	r3, r0
  }
 8013e66:	4618      	mov	r0, r3
 8013e68:	3708      	adds	r7, #8
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	bd80      	pop	{r7, pc}

08013e6e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8013e6e:	b490      	push	{r4, r7}
 8013e70:	b088      	sub	sp, #32
 8013e72:	af00      	add	r7, sp, #0
 8013e74:	6078      	str	r0, [r7, #4]
 8013e76:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8013e7e:	e9c7 3406 	strd	r3, r4, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8013e82:	2201      	movs	r2, #1
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	fa02 f303 	lsl.w	r3, r2, r3
 8013e8a:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8013e8e:	69fa      	ldr	r2, [r7, #28]
 8013e90:	fb03 f102 	mul.w	r1, r3, r2
 8013e94:	69ba      	ldr	r2, [r7, #24]
 8013e96:	fb04 f202 	mul.w	r2, r4, r2
 8013e9a:	440a      	add	r2, r1
 8013e9c:	69b9      	ldr	r1, [r7, #24]
 8013e9e:	fba1 3403 	umull	r3, r4, r1, r3
 8013ea2:	4422      	add	r2, r4
 8013ea4:	4614      	mov	r4, r2
 8013ea6:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8013eaa:	e9c7 3404 	strd	r3, r4, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8013eae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013eb2:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8013eb4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013eb8:	60bb      	str	r3, [r7, #8]
             ? min
 8013eba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013ebe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ec2:	f174 33ff 	sbcs.w	r3, r4, #4294967295
 8013ec6:	db0e      	blt.n	8013ee6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x78>
             : wide_shifted > max ? max
 8013ec8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013ecc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013ed0:	f04f 0200 	mov.w	r2, #0
 8013ed4:	4299      	cmp	r1, r3
 8013ed6:	eb72 0304 	sbcs.w	r3, r2, r4
 8013eda:	db01      	blt.n	8013ee0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x72>
 8013edc:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8013ede:	e004      	b.n	8013eea <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8013ee0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 8013ee4:	e001      	b.n	8013eea <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             ? min
 8013ee6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3720      	adds	r7, #32
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bc90      	pop	{r4, r7}
 8013ef2:	4770      	bx	lr

08013ef4 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 8013ef4:	b590      	push	{r4, r7, lr}
 8013ef6:	b085      	sub	sp, #20
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	60f8      	str	r0, [r7, #12]
 8013efc:	60b9      	str	r1, [r7, #8]
 8013efe:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 8013f00:	68b9      	ldr	r1, [r7, #8]
 8013f02:	68f8      	ldr	r0, [r7, #12]
 8013f04:	f7fe ff4f 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013f08:	4604      	mov	r4, r0
 8013f0a:	68f8      	ldr	r0, [r7, #12]
 8013f0c:	f7fe ffaf 	bl	8012e6e <_ZN8gemmlowp6BitNotIlEET_S1_>
 8013f10:	4603      	mov	r3, r0
 8013f12:	6879      	ldr	r1, [r7, #4]
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7fe ff46 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	4620      	mov	r0, r4
 8013f20:	f000 f805 	bl	8013f2e <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 8013f24:	4603      	mov	r3, r0
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3714      	adds	r7, #20
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd90      	pop	{r4, r7, pc}

08013f2e <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 8013f2e:	b480      	push	{r7}
 8013f30:	b083      	sub	sp, #12
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	6039      	str	r1, [r7, #0]
  return a ^ b;
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	4053      	eors	r3, r2
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	370c      	adds	r7, #12
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr

08013f4a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 8013f4a:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8013f4e:	b08b      	sub	sp, #44	; 0x2c
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8013f5c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b64 = b;
 8013f60:	683b      	ldr	r3, [r7, #0]
 8013f62:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8013f66:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t sum = a64 + b64;
 8013f6a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8013f6e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8013f72:	eb13 0b01 	adds.w	fp, r3, r1
 8013f76:	eb44 0c02 	adc.w	ip, r4, r2
 8013f7a:	e9c7 bc04 	strd	fp, ip, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8013f7e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	f174 0300 	sbcs.w	r3, r4, #0
 8013f88:	db04      	blt.n	8013f94 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4a>
 8013f8a:	f04f 0301 	mov.w	r3, #1
 8013f8e:	f04f 0400 	mov.w	r4, #0
 8013f92:	e003      	b.n	8013f9c <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x52>
 8013f94:	f04f 33ff 	mov.w	r3, #4294967295
 8013f98:	f04f 34ff 	mov.w	r4, #4294967295
 8013f9c:	e9c7 3402 	strd	r3, r4, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8013fa0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8013fa4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8013fa8:	eb13 0b01 	adds.w	fp, r3, r1
 8013fac:	eb44 0c02 	adc.w	ip, r4, r2
 8013fb0:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 8013fb4:	4611      	mov	r1, r2
 8013fb6:	f04f 0200 	mov.w	r2, #0
 8013fba:	eb1b 0301 	adds.w	r3, fp, r1
 8013fbe:	eb4c 0402 	adc.w	r4, ip, r2
 8013fc2:	1064      	asrs	r4, r4, #1
 8013fc4:	ea4f 0333 	mov.w	r3, r3, rrx
}
 8013fc8:	4618      	mov	r0, r3
 8013fca:	372c      	adds	r7, #44	; 0x2c
 8013fcc:	46bd      	mov	sp, r7
 8013fce:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8013fd2:	4770      	bx	lr

08013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8013fd4:	b580      	push	{r7, lr}
 8013fd6:	b084      	sub	sp, #16
 8013fd8:	af00      	add	r7, sp, #0
 8013fda:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013fdc:	f107 030c 	add.w	r3, r7, #12
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7ff fef1 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013fe6:	4602      	mov	r2, r0
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	6013      	str	r3, [r2, #0]
    return retval;
 8013fec:	68fb      	ldr	r3, [r7, #12]
  }
 8013fee:	4618      	mov	r0, r3
 8013ff0:	3710      	adds	r7, #16
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	bd80      	pop	{r7, pc}
	...

08013ff8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b08a      	sub	sp, #40	; 0x28
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 8014000:	f000 f85a 	bl	80140b8 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8014004:	4603      	mov	r3, r0
 8014006:	4619      	mov	r1, r3
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f000 f860 	bl	80140ce <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801400e:	4603      	mov	r3, r0
 8014010:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 8014012:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 8014016:	f000 f88c 	bl	8014132 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801401a:	4603      	mov	r3, r0
  const F2 constant_48_over_17 =
 801401c:	4618      	mov	r0, r3
 801401e:	f000 f874 	bl	801410a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8014022:	4603      	mov	r3, r0
 8014024:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 8014026:	4823      	ldr	r0, [pc, #140]	; (80140b4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8014028:	f000 f883 	bl	8014132 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 801402c:	4603      	mov	r3, r0
  const F2 constant_neg_32_over_17 =
 801402e:	4618      	mov	r0, r3
 8014030:	f000 f86b 	bl	801410a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8014034:	4603      	mov	r3, r0
 8014036:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8014038:	69b9      	ldr	r1, [r7, #24]
 801403a:	6a38      	ldr	r0, [r7, #32]
 801403c:	f000 f886 	bl	801414c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014040:	4603      	mov	r3, r0
 8014042:	4619      	mov	r1, r3
 8014044:	69f8      	ldr	r0, [r7, #28]
 8014046:	f000 f8a3 	bl	8014190 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801404a:	4603      	mov	r3, r0
 801404c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801404e:	2300      	movs	r3, #0
 8014050:	627b      	str	r3, [r7, #36]	; 0x24
 8014052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014054:	2b02      	cmp	r3, #2
 8014056:	dc21      	bgt.n	801409c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8014058:	6979      	ldr	r1, [r7, #20]
 801405a:	6a38      	ldr	r0, [r7, #32]
 801405c:	f000 f876 	bl	801414c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014060:	4603      	mov	r3, r0
 8014062:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8014064:	f000 f8b2 	bl	80141cc <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8014068:	4603      	mov	r3, r0
    F2 one_minus_half_denominator_times_x =
 801406a:	6939      	ldr	r1, [r7, #16]
 801406c:	4618      	mov	r0, r3
 801406e:	f000 f8b6 	bl	80141de <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014072:	4603      	mov	r3, r0
 8014074:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8014076:	68f9      	ldr	r1, [r7, #12]
 8014078:	6978      	ldr	r0, [r7, #20]
 801407a:	f000 f8ce 	bl	801421a <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801407e:	4603      	mov	r3, r0
 8014080:	4618      	mov	r0, r3
 8014082:	f000 f8ec 	bl	801425e <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8014086:	4603      	mov	r3, r0
 8014088:	4619      	mov	r1, r3
 801408a:	6978      	ldr	r0, [r7, #20]
 801408c:	f000 f880 	bl	8014190 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014090:	4603      	mov	r3, r0
 8014092:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8014094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014096:	3301      	adds	r3, #1
 8014098:	627b      	str	r3, [r7, #36]	; 0x24
 801409a:	e7da      	b.n	8014052 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801409c:	6978      	ldr	r0, [r7, #20]
 801409e:	f000 f8f8 	bl	8014292 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 80140a2:	4603      	mov	r3, r0
 80140a4:	4618      	mov	r0, r3
 80140a6:	f000 f90a 	bl	80142be <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80140aa:	4603      	mov	r3, r0
}
 80140ac:	4618      	mov	r0, r3
 80140ae:	3728      	adds	r7, #40	; 0x28
 80140b0:	46bd      	mov	sp, r7
 80140b2:	bd80      	pop	{r7, pc}
 80140b4:	c3c3c3c4 	.word	0xc3c3c3c4

080140b8 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 80140b8:	b580      	push	{r7, lr}
 80140ba:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 80140bc:	f000 f945 	bl	801434a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 80140c0:	4603      	mov	r3, r0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7ff fe8b 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80140c8:	4603      	mov	r3, r0
  }
 80140ca:	4618      	mov	r0, r3
 80140cc:	bd80      	pop	{r7, pc}

080140ce <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 80140ce:	b590      	push	{r4, r7, lr}
 80140d0:	b083      	sub	sp, #12
 80140d2:	af00      	add	r7, sp, #0
 80140d4:	6078      	str	r0, [r7, #4]
 80140d6:	6039      	str	r1, [r7, #0]
 80140d8:	1d3b      	adds	r3, r7, #4
 80140da:	4618      	mov	r0, r3
 80140dc:	f7ff fe74 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80140e0:	4603      	mov	r3, r0
 80140e2:	681c      	ldr	r4, [r3, #0]
 80140e4:	463b      	mov	r3, r7
 80140e6:	4618      	mov	r0, r3
 80140e8:	f7ff fe6e 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80140ec:	4603      	mov	r3, r0
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	4619      	mov	r1, r3
 80140f2:	4620      	mov	r0, r4
 80140f4:	f7ff ff29 	bl	8013f4a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 80140f8:	4603      	mov	r3, r0
 80140fa:	4618      	mov	r0, r3
 80140fc:	f7ff ff6a 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014100:	4603      	mov	r3, r0
 8014102:	4618      	mov	r0, r3
 8014104:	370c      	adds	r7, #12
 8014106:	46bd      	mov	sp, r7
 8014108:	bd90      	pop	{r4, r7, pc}

0801410a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801410a:	b590      	push	{r4, r7, lr}
 801410c:	b085      	sub	sp, #20
 801410e:	af00      	add	r7, sp, #0
 8014110:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8014112:	f107 030c 	add.w	r3, r7, #12
 8014116:	4618      	mov	r0, r3
 8014118:	f000 f91e 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801411c:	4604      	mov	r4, r0
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7fe fe36 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014124:	4603      	mov	r3, r0
 8014126:	6023      	str	r3, [r4, #0]
    return retval;
 8014128:	68fb      	ldr	r3, [r7, #12]
  }
 801412a:	4618      	mov	r0, r3
 801412c:	3714      	adds	r7, #20
 801412e:	46bd      	mov	sp, r7
 8014130:	bd90      	pop	{r4, r7, pc}

08014132 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8014132:	b580      	push	{r7, lr}
 8014134:	b082      	sub	sp, #8
 8014136:	af00      	add	r7, sp, #0
 8014138:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801413a:	2100      	movs	r1, #0
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f7fe fd73 	bl	8012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014142:	4603      	mov	r3, r0
}
 8014144:	4618      	mov	r0, r3
 8014146:	3708      	adds	r7, #8
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}

0801414c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801414c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801414e:	b085      	sub	sp, #20
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
 8014154:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8014156:	1d3b      	adds	r3, r7, #4
 8014158:	4618      	mov	r0, r3
 801415a:	f7ff fe35 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801415e:	4603      	mov	r3, r0
 8014160:	681d      	ldr	r5, [r3, #0]
 8014162:	463b      	mov	r3, r7
 8014164:	4618      	mov	r0, r3
 8014166:	f000 f8f7 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801416a:	4603      	mov	r3, r0
 801416c:	681e      	ldr	r6, [r3, #0]
 801416e:	f107 030c 	add.w	r3, r7, #12
 8014172:	4618      	mov	r0, r3
 8014174:	f000 f8f0 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014178:	4604      	mov	r4, r0
 801417a:	4631      	mov	r1, r6
 801417c:	4628      	mov	r0, r5
 801417e:	f7fe fcc3 	bl	8012b08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014182:	4603      	mov	r3, r0
 8014184:	6023      	str	r3, [r4, #0]
  return c;
 8014186:	68fb      	ldr	r3, [r7, #12]
}
 8014188:	4618      	mov	r0, r3
 801418a:	3714      	adds	r7, #20
 801418c:	46bd      	mov	sp, r7
 801418e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014190 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8014190:	b590      	push	{r4, r7, lr}
 8014192:	b083      	sub	sp, #12
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
 8014198:	6039      	str	r1, [r7, #0]
 801419a:	1d3b      	adds	r3, r7, #4
 801419c:	4618      	mov	r0, r3
 801419e:	f000 f8db 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80141a2:	4603      	mov	r3, r0
 80141a4:	681c      	ldr	r4, [r3, #0]
 80141a6:	463b      	mov	r3, r7
 80141a8:	4618      	mov	r0, r3
 80141aa:	f000 f8d5 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80141ae:	4603      	mov	r3, r0
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	4619      	mov	r1, r3
 80141b4:	4620      	mov	r0, r4
 80141b6:	f7fe fe27 	bl	8012e08 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80141ba:	4603      	mov	r3, r0
 80141bc:	4618      	mov	r0, r3
 80141be:	f000 f8d6 	bl	801436e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 80141c2:	4603      	mov	r3, r0
 80141c4:	4618      	mov	r0, r3
 80141c6:	370c      	adds	r7, #12
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd90      	pop	{r4, r7, pc}

080141cc <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 80141cc:	b580      	push	{r7, lr}
 80141ce:	af00      	add	r7, sp, #0
            : (ScalarRawType(1) << (kIntegerBits == 0 ? 0 : kFractionalBits)));
 80141d0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80141d4:	f7ff ff99 	bl	801410a <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80141d8:	4603      	mov	r3, r0
  }
 80141da:	4618      	mov	r0, r3
 80141dc:	bd80      	pop	{r7, pc}

080141de <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 80141de:	b590      	push	{r4, r7, lr}
 80141e0:	b083      	sub	sp, #12
 80141e2:	af00      	add	r7, sp, #0
 80141e4:	6078      	str	r0, [r7, #4]
 80141e6:	6039      	str	r1, [r7, #0]
 80141e8:	1d3b      	adds	r3, r7, #4
 80141ea:	4618      	mov	r0, r3
 80141ec:	f000 f8b4 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80141f0:	4603      	mov	r3, r0
 80141f2:	681c      	ldr	r4, [r3, #0]
 80141f4:	463b      	mov	r3, r7
 80141f6:	4618      	mov	r0, r3
 80141f8:	f000 f8ae 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80141fc:	4603      	mov	r3, r0
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	4619      	mov	r1, r3
 8014202:	4620      	mov	r0, r4
 8014204:	f7ff fe18 	bl	8013e38 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8014208:	4603      	mov	r3, r0
 801420a:	4618      	mov	r0, r3
 801420c:	f000 f8af 	bl	801436e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8014210:	4603      	mov	r3, r0
 8014212:	4618      	mov	r0, r3
 8014214:	370c      	adds	r7, #12
 8014216:	46bd      	mov	sp, r7
 8014218:	bd90      	pop	{r4, r7, pc}

0801421a <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801421a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801421c:	b085      	sub	sp, #20
 801421e:	af00      	add	r7, sp, #0
 8014220:	6078      	str	r0, [r7, #4]
 8014222:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8014224:	1d3b      	adds	r3, r7, #4
 8014226:	4618      	mov	r0, r3
 8014228:	f000 f896 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801422c:	4603      	mov	r3, r0
 801422e:	681d      	ldr	r5, [r3, #0]
 8014230:	463b      	mov	r3, r7
 8014232:	4618      	mov	r0, r3
 8014234:	f000 f890 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014238:	4603      	mov	r3, r0
 801423a:	681e      	ldr	r6, [r3, #0]
 801423c:	f107 030c 	add.w	r3, r7, #12
 8014240:	4618      	mov	r0, r3
 8014242:	f000 f856 	bl	80142f2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8014246:	4604      	mov	r4, r0
 8014248:	4631      	mov	r1, r6
 801424a:	4628      	mov	r0, r5
 801424c:	f7fe fc5c 	bl	8012b08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014250:	4603      	mov	r3, r0
 8014252:	6023      	str	r3, [r4, #0]
  return c;
 8014254:	68fb      	ldr	r3, [r7, #12]
}
 8014256:	4618      	mov	r0, r3
 8014258:	3714      	adds	r7, #20
 801425a:	46bd      	mov	sp, r7
 801425c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801425e <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 801425e:	b5b0      	push	{r4, r5, r7, lr}
 8014260:	b084      	sub	sp, #16
 8014262:	af00      	add	r7, sp, #0
 8014264:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8014266:	1d3b      	adds	r3, r7, #4
 8014268:	4618      	mov	r0, r3
 801426a:	f000 f842 	bl	80142f2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 801426e:	4603      	mov	r3, r0
 8014270:	681d      	ldr	r5, [r3, #0]
 8014272:	f107 030c 	add.w	r3, r7, #12
 8014276:	4618      	mov	r0, r3
 8014278:	f000 f86e 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801427c:	4604      	mov	r4, r0
 801427e:	4628      	mov	r0, r5
 8014280:	f000 f886 	bl	8014390 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8014284:	4603      	mov	r3, r0
 8014286:	6023      	str	r3, [r4, #0]
  return result;
 8014288:	68fb      	ldr	r3, [r7, #12]
}
 801428a:	4618      	mov	r0, r3
 801428c:	3710      	adds	r7, #16
 801428e:	46bd      	mov	sp, r7
 8014290:	bdb0      	pop	{r4, r5, r7, pc}

08014292 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8014292:	b590      	push	{r4, r7, lr}
 8014294:	b085      	sub	sp, #20
 8014296:	af00      	add	r7, sp, #0
 8014298:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 801429a:	1d3b      	adds	r3, r7, #4
 801429c:	4618      	mov	r0, r3
 801429e:	f000 f85b 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80142a2:	4604      	mov	r4, r0
 80142a4:	f107 030c 	add.w	r3, r7, #12
 80142a8:	4618      	mov	r0, r3
 80142aa:	f000 f87d 	bl	80143a8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80142ae:	4602      	mov	r2, r0
 80142b0:	6823      	ldr	r3, [r4, #0]
 80142b2:	6013      	str	r3, [r2, #0]
  return c;
 80142b4:	68fb      	ldr	r3, [r7, #12]
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3714      	adds	r7, #20
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd90      	pop	{r4, r7, pc}

080142be <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 80142be:	b5b0      	push	{r4, r5, r7, lr}
 80142c0:	b084      	sub	sp, #16
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 80142c6:	1d3b      	adds	r3, r7, #4
 80142c8:	4618      	mov	r0, r3
 80142ca:	f000 f86d 	bl	80143a8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 80142ce:	4603      	mov	r3, r0
 80142d0:	681d      	ldr	r5, [r3, #0]
 80142d2:	f107 030c 	add.w	r3, r7, #12
 80142d6:	4618      	mov	r0, r3
 80142d8:	f7ff fd76 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80142dc:	4604      	mov	r4, r0
 80142de:	4628      	mov	r0, r5
 80142e0:	f000 f86d 	bl	80143be <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 80142e4:	4603      	mov	r3, r0
 80142e6:	6023      	str	r3, [r4, #0]
  return result;
 80142e8:	68fb      	ldr	r3, [r7, #12]
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3710      	adds	r7, #16
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bdb0      	pop	{r4, r5, r7, pc}

080142f2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 80142f2:	b480      	push	{r7}
 80142f4:	b083      	sub	sp, #12
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	6078      	str	r0, [r7, #4]
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	4618      	mov	r0, r3
 80142fe:	370c      	adds	r7, #12
 8014300:	46bd      	mov	sp, r7
 8014302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014306:	4770      	bx	lr

08014308 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8014308:	b590      	push	{r4, r7, lr}
 801430a:	b085      	sub	sp, #20
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014314:	f107 0308 	add.w	r3, r7, #8
 8014318:	4618      	mov	r0, r3
 801431a:	f7ff fd55 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801431e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014320:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8014322:	1d3b      	adds	r3, r7, #4
 8014324:	4618      	mov	r0, r3
 8014326:	f7ff fd4f 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801432a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	461a      	mov	r2, r3
 8014330:	4621      	mov	r1, r4
 8014332:	68f8      	ldr	r0, [r7, #12]
 8014334:	f7ff fdde 	bl	8013ef4 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014338:	4603      	mov	r3, r0
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 801433a:	4618      	mov	r0, r3
 801433c:	f7ff fe4a 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014340:	4603      	mov	r3, r0
}
 8014342:	4618      	mov	r0, r3
 8014344:	3714      	adds	r7, #20
 8014346:	46bd      	mov	sp, r7
 8014348:	bd90      	pop	{r4, r7, pc}

0801434a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 801434a:	b580      	push	{r7, lr}
 801434c:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 801434e:	f7fa fac7 	bl	800e8e0 <_ZNSt14numeric_limitsIlE3maxEv>
 8014352:	4603      	mov	r3, r0
  }
 8014354:	4618      	mov	r0, r3
 8014356:	bd80      	pop	{r7, pc}

08014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	4618      	mov	r0, r3
 8014364:	370c      	adds	r7, #12
 8014366:	46bd      	mov	sp, r7
 8014368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436c:	4770      	bx	lr

0801436e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801436e:	b580      	push	{r7, lr}
 8014370:	b084      	sub	sp, #16
 8014372:	af00      	add	r7, sp, #0
 8014374:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8014376:	f107 030c 	add.w	r3, r7, #12
 801437a:	4618      	mov	r0, r3
 801437c:	f7ff ffec 	bl	8014358 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8014380:	4602      	mov	r2, r0
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6013      	str	r3, [r2, #0]
    return retval;
 8014386:	68fb      	ldr	r3, [r7, #12]
  }
 8014388:	4618      	mov	r0, r3
 801438a:	3710      	adds	r7, #16
 801438c:	46bd      	mov	sp, r7
 801438e:	bd80      	pop	{r7, pc}

08014390 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8014390:	b580      	push	{r7, lr}
 8014392:	b082      	sub	sp, #8
 8014394:	af00      	add	r7, sp, #0
 8014396:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8014398:	6878      	ldr	r0, [r7, #4]
 801439a:	f000 f82f 	bl	80143fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 801439e:	4603      	mov	r3, r0
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3708      	adds	r7, #8
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}

080143a8 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 80143a8:	b480      	push	{r7}
 80143aa:	b083      	sub	sp, #12
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	6078      	str	r0, [r7, #4]
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	4618      	mov	r0, r3
 80143b4:	370c      	adds	r7, #12
 80143b6:	46bd      	mov	sp, r7
 80143b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143bc:	4770      	bx	lr

080143be <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80143be:	b580      	push	{r7, lr}
 80143c0:	b082      	sub	sp, #8
 80143c2:	af00      	add	r7, sp, #0
 80143c4:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f000 f85a 	bl	8014480 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 80143cc:	4603      	mov	r3, r0
}
 80143ce:	4618      	mov	r0, r3
 80143d0:	3708      	adds	r7, #8
 80143d2:	46bd      	mov	sp, r7
 80143d4:	bd80      	pop	{r7, pc}

080143d6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 80143d6:	b580      	push	{r7, lr}
 80143d8:	b082      	sub	sp, #8
 80143da:	af00      	add	r7, sp, #0
 80143dc:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	bf0c      	ite	eq
 80143e4:	2301      	moveq	r3, #1
 80143e6:	2300      	movne	r3, #0
 80143e8:	b2db      	uxtb	r3, r3
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7fe fd2e 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80143f0:	4603      	mov	r3, r0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3708      	adds	r7, #8
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}
	...

080143fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b08a      	sub	sp, #40	; 0x28
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8014404:	f7fe fb5d 	bl	8012ac2 <_ZNSt14numeric_limitsIlE3minEv>
 8014408:	4603      	mov	r3, r0
    const IntegerType min =
 801440a:	4618      	mov	r0, r3
 801440c:	f7fe fcc0 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014410:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8014412:	f7fa fa65 	bl	800e8e0 <_ZNSt14numeric_limitsIlE3maxEv>
 8014416:	4603      	mov	r3, r0
    const IntegerType max =
 8014418:	4618      	mov	r0, r3
 801441a:	f7fe fcb9 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801441e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8014420:	2320      	movs	r3, #32
 8014422:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8014424:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8014428:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801442a:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 801442e:	f7fe fcaf 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014432:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 8014434:	4619      	mov	r1, r3
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	f7fe fcf4 	bl	8012e24 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801443c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801443e:	480f      	ldr	r0, [pc, #60]	; (801447c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8014440:	f7fe fca6 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014444:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 8014446:	4619      	mov	r1, r3
 8014448:	6878      	ldr	r0, [r7, #4]
 801444a:	f7fe fcc9 	bl	8012de0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801444e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8014450:	2102      	movs	r1, #2
 8014452:	6878      	ldr	r0, [r7, #4]
 8014454:	f7ff fd0b 	bl	8013e6e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8014458:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801445a:	68fa      	ldr	r2, [r7, #12]
 801445c:	6a39      	ldr	r1, [r7, #32]
 801445e:	6978      	ldr	r0, [r7, #20]
 8014460:	f7ff fd48 	bl	8013ef4 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014464:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8014466:	68fa      	ldr	r2, [r7, #12]
 8014468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801446a:	6938      	ldr	r0, [r7, #16]
 801446c:	f7ff fd42 	bl	8013ef4 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8014470:	60f8      	str	r0, [r7, #12]
    return result;
 8014472:	68fb      	ldr	r3, [r7, #12]
  }
 8014474:	4618      	mov	r0, r3
 8014476:	3728      	adds	r7, #40	; 0x28
 8014478:	46bd      	mov	sp, r7
 801447a:	bd80      	pop	{r7, pc}
 801447c:	e0000001 	.word	0xe0000001

08014480 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014480:	b580      	push	{r7, lr}
 8014482:	b08a      	sub	sp, #40	; 0x28
 8014484:	af00      	add	r7, sp, #0
 8014486:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8014488:	f7fe fb1b 	bl	8012ac2 <_ZNSt14numeric_limitsIlE3minEv>
 801448c:	4603      	mov	r3, r0
    const IntegerType min =
 801448e:	4618      	mov	r0, r3
 8014490:	f7fe fc7e 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8014494:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8014496:	f7fa fa23 	bl	800e8e0 <_ZNSt14numeric_limitsIlE3maxEv>
 801449a:	4603      	mov	r3, r0
    const IntegerType max =
 801449c:	4618      	mov	r0, r3
 801449e:	f7fe fc77 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80144a2:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 80144a4:	2320      	movs	r3, #32
 80144a6:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 80144a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80144ac:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 80144ae:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 80144b2:	f7fe fc6d 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80144b6:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 80144b8:	4619      	mov	r1, r3
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f7fe fcb2 	bl	8012e24 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 80144c0:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 80144c2:	480f      	ldr	r0, [pc, #60]	; (8014500 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 80144c4:	f7fe fc64 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80144c8:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 80144ca:	4619      	mov	r1, r3
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f7fe fc87 	bl	8012de0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 80144d2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 80144d4:	2101      	movs	r1, #1
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f7ff fcc9 	bl	8013e6e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 80144dc:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 80144de:	68fa      	ldr	r2, [r7, #12]
 80144e0:	6a39      	ldr	r1, [r7, #32]
 80144e2:	6978      	ldr	r0, [r7, #20]
 80144e4:	f7ff fd06 	bl	8013ef4 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80144e8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 80144ea:	68fa      	ldr	r2, [r7, #12]
 80144ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144ee:	6938      	ldr	r0, [r7, #16]
 80144f0:	f7ff fd00 	bl	8013ef4 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 80144f4:	60f8      	str	r0, [r7, #12]
    return result;
 80144f6:	68fb      	ldr	r3, [r7, #12]
  }
 80144f8:	4618      	mov	r0, r3
 80144fa:	3728      	adds	r7, #40	; 0x28
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	c0000001 	.word	0xc0000001

08014504 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8014504:	b580      	push	{r7, lr}
 8014506:	b08a      	sub	sp, #40	; 0x28
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 801450c:	482c      	ldr	r0, [pc, #176]	; (80145c0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 801450e:	f7ff fc7a 	bl	8013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014512:	4603      	mov	r3, r0
  const F constant_term =
 8014514:	4618      	mov	r0, r3
 8014516:	f7ff fc62 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801451a:	4603      	mov	r3, r0
 801451c:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 801451e:	4829      	ldr	r0, [pc, #164]	; (80145c4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8014520:	f7ff fc71 	bl	8013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8014524:	4603      	mov	r3, r0
  const F constant_1_over_3 =
 8014526:	4618      	mov	r0, r3
 8014528:	f7ff fc59 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801452c:	4603      	mov	r3, r0
 801452e:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8014530:	f000 f86c 	bl	801460c <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8014534:	4603      	mov	r3, r0
 8014536:	4619      	mov	r1, r3
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f000 f870 	bl	801461e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801453e:	4603      	mov	r3, r0
 8014540:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8014542:	69f9      	ldr	r1, [r7, #28]
 8014544:	69f8      	ldr	r0, [r7, #28]
 8014546:	f000 f83f 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801454a:	4603      	mov	r3, r0
 801454c:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 801454e:	69f9      	ldr	r1, [r7, #28]
 8014550:	69b8      	ldr	r0, [r7, #24]
 8014552:	f000 f839 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014556:	4603      	mov	r3, r0
 8014558:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 801455a:	69b9      	ldr	r1, [r7, #24]
 801455c:	69b8      	ldr	r0, [r7, #24]
 801455e:	f000 f833 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014562:	4603      	mov	r3, r0
 8014564:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8014566:	6938      	ldr	r0, [r7, #16]
 8014568:	f000 f877 	bl	801465a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 801456c:	4603      	mov	r3, r0
 801456e:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8014570:	6979      	ldr	r1, [r7, #20]
 8014572:	68f8      	ldr	r0, [r7, #12]
 8014574:	f000 f853 	bl	801461e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8014578:	4603      	mov	r3, r0
 801457a:	6a39      	ldr	r1, [r7, #32]
 801457c:	4618      	mov	r0, r3
 801457e:	f000 f823 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8014582:	4603      	mov	r3, r0
 8014584:	69b9      	ldr	r1, [r7, #24]
 8014586:	4618      	mov	r0, r3
 8014588:	f000 f849 	bl	801461e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801458c:	4603      	mov	r3, r0
  F x4_over_24_plus_x3_over_6_plus_x2_over_2 =
 801458e:	4618      	mov	r0, r3
 8014590:	f000 f879 	bl	8014686 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8014594:	4603      	mov	r3, r0
 8014596:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8014598:	68b9      	ldr	r1, [r7, #8]
 801459a:	69f8      	ldr	r0, [r7, #28]
 801459c:	f000 f83f 	bl	801461e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80145a0:	4603      	mov	r3, r0
 80145a2:	4619      	mov	r1, r3
 80145a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145a6:	f000 f80f 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80145aa:	4603      	mov	r3, r0
      constant_term * (x + x4_over_24_plus_x3_over_6_plus_x2_over_2));
 80145ac:	4619      	mov	r1, r3
 80145ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145b0:	f000 f87f 	bl	80146b2 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80145b4:	4603      	mov	r3, r0
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	3728      	adds	r7, #40	; 0x28
 80145ba:	46bd      	mov	sp, r7
 80145bc:	bd80      	pop	{r7, pc}
 80145be:	bf00      	nop
 80145c0:	70f5a894 	.word	0x70f5a894
 80145c4:	2aaaaaab 	.word	0x2aaaaaab

080145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80145c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ca:	b085      	sub	sp, #20
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80145d2:	1d3b      	adds	r3, r7, #4
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7ff fbf7 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80145da:	4603      	mov	r3, r0
 80145dc:	681d      	ldr	r5, [r3, #0]
 80145de:	463b      	mov	r3, r7
 80145e0:	4618      	mov	r0, r3
 80145e2:	f7ff fbf1 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80145e6:	4603      	mov	r3, r0
 80145e8:	681e      	ldr	r6, [r3, #0]
 80145ea:	f107 030c 	add.w	r3, r7, #12
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7ff fbea 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80145f4:	4604      	mov	r4, r0
 80145f6:	4631      	mov	r1, r6
 80145f8:	4628      	mov	r0, r5
 80145fa:	f7fe fa85 	bl	8012b08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80145fe:	4603      	mov	r3, r0
 8014600:	6023      	str	r3, [r4, #0]
  return c;
 8014602:	68fb      	ldr	r3, [r7, #12]
}
 8014604:	4618      	mov	r0, r3
 8014606:	3714      	adds	r7, #20
 8014608:	46bd      	mov	sp, r7
 801460a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801460c <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 801460c:	b580      	push	{r7, lr}
 801460e:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8014610:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8014614:	f7ff fbe3 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8014618:	4603      	mov	r3, r0
  }
 801461a:	4618      	mov	r0, r3
 801461c:	bd80      	pop	{r7, pc}

0801461e <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801461e:	b590      	push	{r4, r7, lr}
 8014620:	b083      	sub	sp, #12
 8014622:	af00      	add	r7, sp, #0
 8014624:	6078      	str	r0, [r7, #4]
 8014626:	6039      	str	r1, [r7, #0]
 8014628:	1d3b      	adds	r3, r7, #4
 801462a:	4618      	mov	r0, r3
 801462c:	f7ff fbcc 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014630:	4603      	mov	r3, r0
 8014632:	681c      	ldr	r4, [r3, #0]
 8014634:	463b      	mov	r3, r7
 8014636:	4618      	mov	r0, r3
 8014638:	f7ff fbc6 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801463c:	4603      	mov	r3, r0
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	4619      	mov	r1, r3
 8014642:	4620      	mov	r0, r4
 8014644:	f7fe fbe0 	bl	8012e08 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8014648:	4603      	mov	r3, r0
 801464a:	4618      	mov	r0, r3
 801464c:	f7ff fcc2 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014650:	4603      	mov	r3, r0
 8014652:	4618      	mov	r0, r3
 8014654:	370c      	adds	r7, #12
 8014656:	46bd      	mov	sp, r7
 8014658:	bd90      	pop	{r4, r7, pc}

0801465a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 801465a:	b580      	push	{r7, lr}
 801465c:	b082      	sub	sp, #8
 801465e:	af00      	add	r7, sp, #0
 8014660:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8014662:	1d3b      	adds	r3, r7, #4
 8014664:	4618      	mov	r0, r3
 8014666:	f7ff fbaf 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801466a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	4618      	mov	r0, r3
 8014670:	f000 f83d 	bl	80146ee <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8014674:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8014676:	4618      	mov	r0, r3
 8014678:	f7ff fcac 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801467c:	4603      	mov	r3, r0
}
 801467e:	4618      	mov	r0, r3
 8014680:	3708      	adds	r7, #8
 8014682:	46bd      	mov	sp, r7
 8014684:	bd80      	pop	{r7, pc}

08014686 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8014686:	b580      	push	{r7, lr}
 8014688:	b082      	sub	sp, #8
 801468a:	af00      	add	r7, sp, #0
 801468c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 801468e:	1d3b      	adds	r3, r7, #4
 8014690:	4618      	mov	r0, r3
 8014692:	f7ff fb99 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014696:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	4618      	mov	r0, r3
 801469c:	f7ff fbc0 	bl	8013e20 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 80146a0:	4603      	mov	r3, r0
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 80146a2:	4618      	mov	r0, r3
 80146a4:	f7ff fc96 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80146a8:	4603      	mov	r3, r0
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3708      	adds	r7, #8
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}

080146b2 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 80146b2:	b590      	push	{r4, r7, lr}
 80146b4:	b083      	sub	sp, #12
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	6078      	str	r0, [r7, #4]
 80146ba:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80146bc:	1d3b      	adds	r3, r7, #4
 80146be:	4618      	mov	r0, r3
 80146c0:	f7ff fb82 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80146c4:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80146c6:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80146c8:	463b      	mov	r3, r7
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7ff fb7c 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80146d0:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	4619      	mov	r1, r3
 80146d6:	4620      	mov	r0, r4
 80146d8:	f000 f815 	bl	8014706 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 80146dc:	4603      	mov	r3, r0
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 80146de:	4618      	mov	r0, r3
 80146e0:	f7ff fc78 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80146e4:	4603      	mov	r3, r0
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	370c      	adds	r7, #12
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd90      	pop	{r4, r7, pc}

080146ee <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80146ee:	b580      	push	{r7, lr}
 80146f0:	b082      	sub	sp, #8
 80146f2:	af00      	add	r7, sp, #0
 80146f4:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f000 f813 	bl	8014722 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 80146fc:	4603      	mov	r3, r0
}
 80146fe:	4618      	mov	r0, r3
 8014700:	3708      	adds	r7, #8
 8014702:	46bd      	mov	sp, r7
 8014704:	bd80      	pop	{r7, pc}

08014706 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8014706:	b580      	push	{r7, lr}
 8014708:	b082      	sub	sp, #8
 801470a:	af00      	add	r7, sp, #0
 801470c:	6078      	str	r0, [r7, #4]
 801470e:	6039      	str	r1, [r7, #0]
                                                                             b);
 8014710:	6839      	ldr	r1, [r7, #0]
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f000 f812 	bl	801473c <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8014718:	4603      	mov	r3, r0
}
 801471a:	4618      	mov	r0, r3
 801471c:	3708      	adds	r7, #8
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}

08014722 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8014722:	b580      	push	{r7, lr}
 8014724:	b082      	sub	sp, #8
 8014726:	af00      	add	r7, sp, #0
 8014728:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 801472a:	2102      	movs	r1, #2
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f7fe fa7b 	bl	8012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8014732:	4603      	mov	r3, r0
  }
 8014734:	4618      	mov	r0, r3
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 801473c:	b580      	push	{r7, lr}
 801473e:	b082      	sub	sp, #8
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6039      	str	r1, [r7, #0]
 8014746:	6839      	ldr	r1, [r7, #0]
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f7fe fb5d 	bl	8012e08 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801474e:	4603      	mov	r3, r0
 8014750:	4618      	mov	r0, r3
 8014752:	3708      	adds	r7, #8
 8014754:	46bd      	mov	sp, r7
 8014756:	bd80      	pop	{r7, pc}

08014758 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014758:	b480      	push	{r7}
 801475a:	b083      	sub	sp, #12
 801475c:	af00      	add	r7, sp, #0
 801475e:	6078      	str	r0, [r7, #4]
 8014760:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	781a      	ldrb	r2, [r3, #0]
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	429a      	cmp	r2, r3
 801476c:	d201      	bcs.n	8014772 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 801476e:	683b      	ldr	r3, [r7, #0]
 8014770:	e000      	b.n	8014774 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 8014772:	687b      	ldr	r3, [r7, #4]
    }
 8014774:	4618      	mov	r0, r3
 8014776:	370c      	adds	r7, #12
 8014778:	46bd      	mov	sp, r7
 801477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477e:	4770      	bx	lr

08014780 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014780:	b480      	push	{r7}
 8014782:	b083      	sub	sp, #12
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f993 2000 	ldrsb.w	r2, [r3]
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	f993 3000 	ldrsb.w	r3, [r3]
 8014796:	429a      	cmp	r2, r3
 8014798:	da01      	bge.n	801479e <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 801479a:	683b      	ldr	r3, [r7, #0]
 801479c:	e000      	b.n	80147a0 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 801479e:	687b      	ldr	r3, [r7, #4]
    }
 80147a0:	4618      	mov	r0, r3
 80147a2:	370c      	adds	r7, #12
 80147a4:	46bd      	mov	sp, r7
 80147a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147aa:	4770      	bx	lr

080147ac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 80147ac:	b580      	push	{r7, lr}
 80147ae:	b084      	sub	sp, #16
 80147b0:	af00      	add	r7, sp, #0
 80147b2:	60f8      	str	r0, [r7, #12]
 80147b4:	60b9      	str	r1, [r7, #8]
 80147b6:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 80147b8:	68fa      	ldr	r2, [r7, #12]
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	fa02 f303 	lsl.w	r3, r2, r3
                                           quantized_multiplier);
 80147c0:	68b9      	ldr	r1, [r7, #8]
 80147c2:	4618      	mov	r0, r3
 80147c4:	f7fe f9a0 	bl	8012b08 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80147c8:	4603      	mov	r3, r0
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3710      	adds	r7, #16
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}

080147d2 <_ZN6tflite13GetReciprocalEliPi>:
                                                     InputIntegerBits>(
      input_val);
}

inline int32 GetReciprocal(int32 x, int x_integer_digits,
                           int* num_bits_over_unit) {
 80147d2:	b580      	push	{r7, lr}
 80147d4:	b088      	sub	sp, #32
 80147d6:	af00      	add	r7, sp, #0
 80147d8:	60f8      	str	r0, [r7, #12]
 80147da:	60b9      	str	r1, [r7, #8]
 80147dc:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7ff fadf 	bl	8013da4 <_ZN6tflite17CountLeadingZerosImEEiT_>
 80147e6:	61f8      	str	r0, [r7, #28]
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 80147e8:	68ba      	ldr	r2, [r7, #8]
 80147ea:	69fb      	ldr	r3, [r7, #28]
 80147ec:	1ad2      	subs	r2, r2, r3
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	601a      	str	r2, [r3, #0]
  const int32 shifted_sum_minus_one =
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 80147f2:	68fa      	ldr	r2, [r7, #12]
 80147f4:	69fb      	ldr	r3, [r7, #28]
 80147f6:	fa02 f303 	lsl.w	r3, r2, r3
 80147fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 80147fe:	61bb      	str	r3, [r7, #24]
                         (static_cast<uint32>(1) << 31));

  gemmlowp::FixedPoint<int32, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
 8014800:	69b8      	ldr	r0, [r7, #24]
 8014802:	f7ff fbe7 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014806:	4603      	mov	r3, r0
 8014808:	4618      	mov	r0, r3
 801480a:	f7ff fbf5 	bl	8013ff8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 801480e:	4603      	mov	r3, r0
 8014810:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8014812:	f107 0314 	add.w	r3, r7, #20
 8014816:	4618      	mov	r0, r3
 8014818:	f7ff fad6 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801481c:	4603      	mov	r3, r0
 801481e:	681b      	ldr	r3, [r3, #0]
}
 8014820:	4618      	mov	r0, r3
 8014822:	3720      	adds	r7, #32
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8014828:	b590      	push	{r4, r7, lr}
 801482a:	ed2d 8b02 	vpush	{d8}
 801482e:	b08f      	sub	sp, #60	; 0x3c
 8014830:	af00      	add	r7, sp, #0
 8014832:	60f8      	str	r0, [r7, #12]
 8014834:	60b9      	str	r1, [r7, #8]
 8014836:	607a      	str	r2, [r7, #4]
 8014838:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801483a:	68b8      	ldr	r0, [r7, #8]
 801483c:	f7fe f841 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014840:	4603      	mov	r3, r0
 8014842:	3b01      	subs	r3, #1
 8014844:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014846:	683a      	ldr	r2, [r7, #0]
 8014848:	6a39      	ldr	r1, [r7, #32]
 801484a:	68b8      	ldr	r0, [r7, #8]
 801484c:	f7ff fa7b 	bl	8013d46 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014850:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014852:	6a3b      	ldr	r3, [r7, #32]
 8014854:	683a      	ldr	r2, [r7, #0]
 8014856:	6a39      	ldr	r1, [r7, #32]
 8014858:	68b8      	ldr	r0, [r7, #8]
 801485a:	f7fe fb3f 	bl	8012edc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801485e:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8014860:	2300      	movs	r3, #0
 8014862:	637b      	str	r3, [r7, #52]	; 0x34
 8014864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014866:	69fb      	ldr	r3, [r7, #28]
 8014868:	429a      	cmp	r2, r3
 801486a:	f280 808f 	bge.w	801498c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x164>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 801486e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8014872:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8014874:	2300      	movs	r3, #0
 8014876:	633b      	str	r3, [r7, #48]	; 0x30
 8014878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801487a:	69bb      	ldr	r3, [r7, #24]
 801487c:	429a      	cmp	r2, r3
 801487e:	da15      	bge.n	80148ac <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 8014880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014882:	69ba      	ldr	r2, [r7, #24]
 8014884:	fb02 f203 	mul.w	r2, r2, r3
 8014888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488a:	4413      	add	r3, r2
 801488c:	009b      	lsls	r3, r3, #2
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	441a      	add	r2, r3
 8014892:	f107 0314 	add.w	r3, r7, #20
 8014896:	4611      	mov	r1, r2
 8014898:	4618      	mov	r0, r3
 801489a:	f7fa f9ae 	bl	800ebfa <_ZSt3maxIfERKT_S2_S2_>
 801489e:	4603      	mov	r3, r0
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 80148a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a6:	3301      	adds	r3, #1
 80148a8:	633b      	str	r3, [r7, #48]	; 0x30
 80148aa:	e7e5      	b.n	8014878 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 80148ac:	f04f 0300 	mov.w	r3, #0
 80148b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 80148b2:	2300      	movs	r3, #0
 80148b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80148b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148b8:	69bb      	ldr	r3, [r7, #24]
 80148ba:	429a      	cmp	r2, r3
 80148bc:	da29      	bge.n	8014912 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xea>
      sum += std::exp((input_data[i * depth + c] - max) *
 80148be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148c0:	69ba      	ldr	r2, [r7, #24]
 80148c2:	fb02 f203 	mul.w	r2, r2, r3
 80148c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148c8:	4413      	add	r3, r2
 80148ca:	009b      	lsls	r3, r3, #2
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	4413      	add	r3, r2
 80148d0:	ed93 7a00 	vldr	s14, [r3]
 80148d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80148d8:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80148e2:	4618      	mov	r0, r3
 80148e4:	4621      	mov	r1, r4
 80148e6:	f7ec f997 	bl	8000c18 <__aeabi_d2f>
 80148ea:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 80148ee:	ee68 7a27 	vmul.f32	s15, s16, s15
 80148f2:	eeb0 0a67 	vmov.f32	s0, s15
 80148f6:	f7ec fca4 	bl	8001242 <_ZSt3expf>
 80148fa:	eeb0 7a40 	vmov.f32	s14, s0
 80148fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014902:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014906:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 801490a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490c:	3301      	adds	r3, #1
 801490e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014910:	e7d1      	b.n	80148b6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8014912:	2300      	movs	r3, #0
 8014914:	627b      	str	r3, [r7, #36]	; 0x24
 8014916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014918:	69bb      	ldr	r3, [r7, #24]
 801491a:	429a      	cmp	r2, r3
 801491c:	da32      	bge.n	8014984 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 801491e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014920:	69ba      	ldr	r2, [r7, #24]
 8014922:	fb02 f203 	mul.w	r2, r2, r3
 8014926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014928:	4413      	add	r3, r2
 801492a:	009b      	lsls	r3, r3, #2
 801492c:	687a      	ldr	r2, [r7, #4]
 801492e:	4413      	add	r3, r2
 8014930:	ed93 7a00 	vldr	s14, [r3]
 8014934:	edd7 7a05 	vldr	s15, [r7, #20]
 8014938:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8014942:	4618      	mov	r0, r3
 8014944:	4621      	mov	r1, r4
 8014946:	f7ec f967 	bl	8000c18 <__aeabi_d2f>
 801494a:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 801494e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014952:	eeb0 0a67 	vmov.f32	s0, s15
 8014956:	f7ec fc74 	bl	8001242 <_ZSt3expf>
 801495a:	eef0 6a40 	vmov.f32	s13, s0
 801495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014960:	69ba      	ldr	r2, [r7, #24]
 8014962:	fb02 f203 	mul.w	r2, r2, r3
 8014966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014968:	4413      	add	r3, r2
 801496a:	009b      	lsls	r3, r3, #2
 801496c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801496e:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 8014970:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014974:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8014978:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 801497c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497e:	3301      	adds	r3, #1
 8014980:	627b      	str	r3, [r7, #36]	; 0x24
 8014982:	e7c8      	b.n	8014916 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
  for (int i = 0; i < outer_size; ++i) {
 8014984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014986:	3301      	adds	r3, #1
 8014988:	637b      	str	r3, [r7, #52]	; 0x34
 801498a:	e76b      	b.n	8014864 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
                                   sum;
    }
  }
}
 801498c:	bf00      	nop
 801498e:	373c      	adds	r7, #60	; 0x3c
 8014990:	46bd      	mov	sp, r7
 8014992:	ecbd 8b02 	vpop	{d8}
 8014996:	bd90      	pop	{r4, r7, pc}

08014998 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8014998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801499c:	b08b      	sub	sp, #44	; 0x2c
 801499e:	af04      	add	r7, sp, #16
 80149a0:	60f8      	str	r0, [r7, #12]
 80149a2:	60b9      	str	r1, [r7, #8]
 80149a4:	607a      	str	r2, [r7, #4]
 80149a6:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 80149a8:	68bb      	ldr	r3, [r7, #8]
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	2b03      	cmp	r3, #3
 80149ae:	d004      	beq.n	80149ba <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 80149b0:	68bb      	ldr	r3, [r7, #8]
 80149b2:	781b      	ldrb	r3, [r3, #0]
 80149b4:	2b09      	cmp	r3, #9
 80149b6:	f040 80f2 	bne.w	8014b9e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x206>
    if (input->type == kTfLiteUInt8) {
 80149ba:	68bb      	ldr	r3, [r7, #8]
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	2b03      	cmp	r3, #3
 80149c0:	d134      	bne.n	8014a2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x94>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	2b03      	cmp	r3, #3
 80149c8:	d019      	beq.n	80149fe <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x66>
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	695c      	ldr	r4, [r3, #20]
 80149ce:	68fd      	ldr	r5, [r7, #12]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	4618      	mov	r0, r3
 80149d6:	f7f8 fd6b 	bl	800d4b0 <TfLiteTypeGetName>
 80149da:	4606      	mov	r6, r0
 80149dc:	2003      	movs	r0, #3
 80149de:	f7f8 fd67 	bl	800d4b0 <TfLiteTypeGetName>
 80149e2:	4603      	mov	r3, r0
 80149e4:	9303      	str	r3, [sp, #12]
 80149e6:	9602      	str	r6, [sp, #8]
 80149e8:	4b93      	ldr	r3, [pc, #588]	; (8014c38 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80149ea:	9301      	str	r3, [sp, #4]
 80149ec:	4b93      	ldr	r3, [pc, #588]	; (8014c3c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 80149ee:	9300      	str	r3, [sp, #0]
 80149f0:	23c3      	movs	r3, #195	; 0xc3
 80149f2:	4a93      	ldr	r2, [pc, #588]	; (8014c40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 80149f4:	4993      	ldr	r1, [pc, #588]	; (8014c44 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 80149f6:	4628      	mov	r0, r5
 80149f8:	47a0      	blx	r4
 80149fa:	2301      	movs	r3, #1
 80149fc:	e116      	b.n	8014c2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	691b      	ldr	r3, [r3, #16]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	f000 8096 	beq.w	8014b34 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	695c      	ldr	r4, [r3, #20]
 8014a0c:	68f8      	ldr	r0, [r7, #12]
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	691b      	ldr	r3, [r3, #16]
 8014a12:	2200      	movs	r2, #0
 8014a14:	9203      	str	r2, [sp, #12]
 8014a16:	9302      	str	r3, [sp, #8]
 8014a18:	4b8b      	ldr	r3, [pc, #556]	; (8014c48 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 8014a1a:	9301      	str	r3, [sp, #4]
 8014a1c:	4b8b      	ldr	r3, [pc, #556]	; (8014c4c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 8014a1e:	9300      	str	r3, [sp, #0]
 8014a20:	23c4      	movs	r3, #196	; 0xc4
 8014a22:	4a87      	ldr	r2, [pc, #540]	; (8014c40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014a24:	498a      	ldr	r1, [pc, #552]	; (8014c50 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 8014a26:	47a0      	blx	r4
 8014a28:	2301      	movs	r3, #1
 8014a2a:	e0ff      	b.n	8014c2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8014a2c:	68bb      	ldr	r3, [r7, #8]
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	2b09      	cmp	r3, #9
 8014a32:	d019      	beq.n	8014a68 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xd0>
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	695c      	ldr	r4, [r3, #20]
 8014a38:	68fd      	ldr	r5, [r7, #12]
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7f8 fd36 	bl	800d4b0 <TfLiteTypeGetName>
 8014a44:	4606      	mov	r6, r0
 8014a46:	2009      	movs	r0, #9
 8014a48:	f7f8 fd32 	bl	800d4b0 <TfLiteTypeGetName>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	9303      	str	r3, [sp, #12]
 8014a50:	9602      	str	r6, [sp, #8]
 8014a52:	4b80      	ldr	r3, [pc, #512]	; (8014c54 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8014a54:	9301      	str	r3, [sp, #4]
 8014a56:	4b80      	ldr	r3, [pc, #512]	; (8014c58 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8014a58:	9300      	str	r3, [sp, #0]
 8014a5a:	23c6      	movs	r3, #198	; 0xc6
 8014a5c:	4a78      	ldr	r2, [pc, #480]	; (8014c40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014a5e:	4979      	ldr	r1, [pc, #484]	; (8014c44 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 8014a60:	4628      	mov	r0, r5
 8014a62:	47a0      	blx	r4
 8014a64:	2301      	movs	r3, #1
 8014a66:	e0e1      	b.n	8014c2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
      if (output->type == kTfLiteInt16) {
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	2b07      	cmp	r3, #7
 8014a6e:	d116      	bne.n	8014a9e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x106>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	691b      	ldr	r3, [r3, #16]
 8014a74:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8014a78:	d05c      	beq.n	8014b34 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	695c      	ldr	r4, [r3, #20]
 8014a7e:	68f8      	ldr	r0, [r7, #12]
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	691b      	ldr	r3, [r3, #16]
 8014a84:	4a75      	ldr	r2, [pc, #468]	; (8014c5c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>)
 8014a86:	9203      	str	r2, [sp, #12]
 8014a88:	9302      	str	r3, [sp, #8]
 8014a8a:	4b75      	ldr	r3, [pc, #468]	; (8014c60 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 8014a8c:	9301      	str	r3, [sp, #4]
 8014a8e:	4b6f      	ldr	r3, [pc, #444]	; (8014c4c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 8014a90:	9300      	str	r3, [sp, #0]
 8014a92:	23c8      	movs	r3, #200	; 0xc8
 8014a94:	4a6a      	ldr	r2, [pc, #424]	; (8014c40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014a96:	496e      	ldr	r1, [pc, #440]	; (8014c50 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 8014a98:	47a0      	blx	r4
 8014a9a:	2301      	movs	r3, #1
 8014a9c:	e0c6      	b.n	8014c2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	781b      	ldrb	r3, [r3, #0]
 8014aa2:	2b09      	cmp	r3, #9
 8014aa4:	d019      	beq.n	8014ada <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x142>
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	695c      	ldr	r4, [r3, #20]
 8014aaa:	68fd      	ldr	r5, [r7, #12]
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	f7f8 fcfd 	bl	800d4b0 <TfLiteTypeGetName>
 8014ab6:	4606      	mov	r6, r0
 8014ab8:	2009      	movs	r0, #9
 8014aba:	f7f8 fcf9 	bl	800d4b0 <TfLiteTypeGetName>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	9303      	str	r3, [sp, #12]
 8014ac2:	9602      	str	r6, [sp, #8]
 8014ac4:	4b63      	ldr	r3, [pc, #396]	; (8014c54 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8014ac6:	9301      	str	r3, [sp, #4]
 8014ac8:	4b5c      	ldr	r3, [pc, #368]	; (8014c3c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 8014aca:	9300      	str	r3, [sp, #0]
 8014acc:	23cc      	movs	r3, #204	; 0xcc
 8014ace:	4a5c      	ldr	r2, [pc, #368]	; (8014c40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014ad0:	495c      	ldr	r1, [pc, #368]	; (8014c44 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	47a0      	blx	r4
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	e0a8      	b.n	8014c2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	691b      	ldr	r3, [r3, #16]
 8014ade:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8014ae2:	d012      	beq.n	8014b0a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x172>
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	695c      	ldr	r4, [r3, #20]
 8014ae8:	68f8      	ldr	r0, [r7, #12]
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	691b      	ldr	r3, [r3, #16]
 8014aee:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8014af2:	9203      	str	r2, [sp, #12]
 8014af4:	9302      	str	r3, [sp, #8]
 8014af6:	4b5b      	ldr	r3, [pc, #364]	; (8014c64 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8014af8:	9301      	str	r3, [sp, #4]
 8014afa:	4b54      	ldr	r3, [pc, #336]	; (8014c4c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 8014afc:	9300      	str	r3, [sp, #0]
 8014afe:	23cd      	movs	r3, #205	; 0xcd
 8014b00:	4a4f      	ldr	r2, [pc, #316]	; (8014c40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014b02:	4953      	ldr	r1, [pc, #332]	; (8014c50 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 8014b04:	47a0      	blx	r4
 8014b06:	2301      	movs	r3, #1
 8014b08:	e090      	b.n	8014c2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	edd3 7a03 	vldr	s15, [r3, #12]
 8014b10:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8014c68 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>
 8014b14:	eef4 7a47 	vcmp.f32	s15, s14
 8014b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b1c:	d00a      	beq.n	8014b34 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x19c>
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	695c      	ldr	r4, [r3, #20]
 8014b22:	68f8      	ldr	r0, [r7, #12]
 8014b24:	4b51      	ldr	r3, [pc, #324]	; (8014c6c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d4>)
 8014b26:	9300      	str	r3, [sp, #0]
 8014b28:	23ce      	movs	r3, #206	; 0xce
 8014b2a:	4a45      	ldr	r2, [pc, #276]	; (8014c40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014b2c:	4950      	ldr	r1, [pc, #320]	; (8014c70 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d8>)
 8014b2e:	47a0      	blx	r4
 8014b30:	2301      	movs	r3, #1
 8014b32:	e07b      	b.n	8014c2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 8014b38:	4618      	mov	r0, r3
 8014b3a:	f7eb fd1d 	bl	8000578 <__aeabi_f2d>
 8014b3e:	4680      	mov	r8, r0
 8014b40:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7eb fd16 	bl	8000578 <__aeabi_f2d>
 8014b4c:	4682      	mov	sl, r0
 8014b4e:	468b      	mov	fp, r1
 8014b50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b52:	3308      	adds	r3, #8
 8014b54:	f107 0214 	add.w	r2, r7, #20
 8014b58:	4619      	mov	r1, r3
 8014b5a:	2005      	movs	r0, #5
 8014b5c:	ec4b ab11 	vmov	d1, sl, fp
 8014b60:	ec49 8b10 	vmov	d0, r8, r9
 8014b64:	f7f9 ff98 	bl	800ea98 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 8014b68:	697a      	ldr	r2, [r7, #20]
 8014b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b6c:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 8014b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b70:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8014b72:	221f      	movs	r2, #31
 8014b74:	4619      	mov	r1, r3
 8014b76:	2005      	movs	r0, #5
 8014b78:	f7f9 ffd6 	bl	800eb28 <_ZN6tflite20CalculateInputRadiusEiii>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7eb fce8 	bl	8000554 <__aeabi_i2d>
 8014b84:	4602      	mov	r2, r0
 8014b86:	460b      	mov	r3, r1
 8014b88:	4614      	mov	r4, r2
 8014b8a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 8014b8e:	4620      	mov	r0, r4
 8014b90:	4629      	mov	r1, r5
 8014b92:	f7eb fff9 	bl	8000b88 <__aeabi_d2iz>
 8014b96:	4602      	mov	r2, r0
 8014b98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014b9a:	619a      	str	r2, [r3, #24]
                                            op_data->input_left_shift);
 8014b9c:	e045      	b.n	8014c2a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x292>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	2b01      	cmp	r3, #1
 8014ba4:	d019      	beq.n	8014bda <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x242>
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	695c      	ldr	r4, [r3, #20]
 8014baa:	68fd      	ldr	r5, [r7, #12]
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	f7f8 fc7d 	bl	800d4b0 <TfLiteTypeGetName>
 8014bb6:	4606      	mov	r6, r0
 8014bb8:	2001      	movs	r0, #1
 8014bba:	f7f8 fc79 	bl	800d4b0 <TfLiteTypeGetName>
 8014bbe:	4603      	mov	r3, r0
 8014bc0:	9303      	str	r3, [sp, #12]
 8014bc2:	9602      	str	r6, [sp, #8]
 8014bc4:	4b2b      	ldr	r3, [pc, #172]	; (8014c74 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 8014bc6:	9301      	str	r3, [sp, #4]
 8014bc8:	4b23      	ldr	r3, [pc, #140]	; (8014c58 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 8014bca:	9300      	str	r3, [sp, #0]
 8014bcc:	23de      	movs	r3, #222	; 0xde
 8014bce:	4a1c      	ldr	r2, [pc, #112]	; (8014c40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014bd0:	491c      	ldr	r1, [pc, #112]	; (8014c44 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 8014bd2:	4628      	mov	r0, r5
 8014bd4:	47a0      	blx	r4
 8014bd6:	2301      	movs	r3, #1
 8014bd8:	e028      	b.n	8014c2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	781b      	ldrb	r3, [r3, #0]
 8014bde:	2b01      	cmp	r3, #1
 8014be0:	d019      	beq.n	8014c16 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x27e>
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	695c      	ldr	r4, [r3, #20]
 8014be6:	68fd      	ldr	r5, [r7, #12]
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	781b      	ldrb	r3, [r3, #0]
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7f8 fc5f 	bl	800d4b0 <TfLiteTypeGetName>
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	2001      	movs	r0, #1
 8014bf6:	f7f8 fc5b 	bl	800d4b0 <TfLiteTypeGetName>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	9303      	str	r3, [sp, #12]
 8014bfe:	9602      	str	r6, [sp, #8]
 8014c00:	4b1c      	ldr	r3, [pc, #112]	; (8014c74 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2dc>)
 8014c02:	9301      	str	r3, [sp, #4]
 8014c04:	4b0d      	ldr	r3, [pc, #52]	; (8014c3c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 8014c06:	9300      	str	r3, [sp, #0]
 8014c08:	23df      	movs	r3, #223	; 0xdf
 8014c0a:	4a0d      	ldr	r2, [pc, #52]	; (8014c40 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014c0c:	490d      	ldr	r1, [pc, #52]	; (8014c44 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 8014c0e:	4628      	mov	r0, r5
 8014c10:	47a0      	blx	r4
 8014c12:	2301      	movs	r3, #1
 8014c14:	e00a      	b.n	8014c2c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>
    op_data->beta = static_cast<double>(params->beta);
 8014c16:	683b      	ldr	r3, [r7, #0]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f7eb fcac 	bl	8000578 <__aeabi_f2d>
 8014c20:	4603      	mov	r3, r0
 8014c22:	460c      	mov	r4, r1
 8014c24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c26:	e9c2 3400 	strd	r3, r4, [r2]
  }
  return kTfLiteOk;
 8014c2a:	2300      	movs	r3, #0
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	371c      	adds	r7, #28
 8014c30:	46bd      	mov	sp, r7
 8014c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c36:	bf00      	nop
 8014c38:	0801f2d0 	.word	0x0801f2d0
 8014c3c:	0801f2e0 	.word	0x0801f2e0
 8014c40:	0801f228 	.word	0x0801f228
 8014c44:	0801f2b4 	.word	0x0801f2b4
 8014c48:	0801f30c 	.word	0x0801f30c
 8014c4c:	0801f310 	.word	0x0801f310
 8014c50:	0801f2f0 	.word	0x0801f2f0
 8014c54:	0801f32c 	.word	0x0801f32c
 8014c58:	0801f338 	.word	0x0801f338
 8014c5c:	ffff8000 	.word	0xffff8000
 8014c60:	0801f344 	.word	0x0801f344
 8014c64:	0801f34c 	.word	0x0801f34c
 8014c68:	3b800000 	.word	0x3b800000
 8014c6c:	0801f36c 	.word	0x0801f36c
 8014c70:	0801f354 	.word	0x0801f354
 8014c74:	0801f390 	.word	0x0801f390

08014c78 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8014c78:	b5b0      	push	{r4, r5, r7, lr}
 8014c7a:	b088      	sub	sp, #32
 8014c7c:	af04      	add	r7, sp, #16
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8014c82:	6838      	ldr	r0, [r7, #0]
 8014c84:	f7fe f910 	bl	8012ea8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b01      	cmp	r3, #1
 8014c8c:	bf14      	ite	ne
 8014c8e:	2301      	movne	r3, #1
 8014c90:	2300      	moveq	r3, #0
 8014c92:	b2db      	uxtb	r3, r3
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d014      	beq.n	8014cc2 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x4a>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	695c      	ldr	r4, [r3, #20]
 8014c9c:	687d      	ldr	r5, [r7, #4]
 8014c9e:	6838      	ldr	r0, [r7, #0]
 8014ca0:	f7fe f902 	bl	8012ea8 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014ca4:	4602      	mov	r2, r0
 8014ca6:	2301      	movs	r3, #1
 8014ca8:	9303      	str	r3, [sp, #12]
 8014caa:	9202      	str	r2, [sp, #8]
 8014cac:	4b26      	ldr	r3, [pc, #152]	; (8014d48 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8014cae:	9301      	str	r3, [sp, #4]
 8014cb0:	4b26      	ldr	r3, [pc, #152]	; (8014d4c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8014cb2:	9300      	str	r3, [sp, #0]
 8014cb4:	23e8      	movs	r3, #232	; 0xe8
 8014cb6:	4a26      	ldr	r2, [pc, #152]	; (8014d50 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8014cb8:	4926      	ldr	r1, [pc, #152]	; (8014d54 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8014cba:	4628      	mov	r0, r5
 8014cbc:	47a0      	blx	r4
 8014cbe:	2301      	movs	r3, #1
 8014cc0:	e03d      	b.n	8014d3e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8014cc2:	6838      	ldr	r0, [r7, #0]
 8014cc4:	f7fe f8fd 	bl	8012ec2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	2b01      	cmp	r3, #1
 8014ccc:	bf14      	ite	ne
 8014cce:	2301      	movne	r3, #1
 8014cd0:	2300      	moveq	r3, #0
 8014cd2:	b2db      	uxtb	r3, r3
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d014      	beq.n	8014d02 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x8a>
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	695c      	ldr	r4, [r3, #20]
 8014cdc:	687d      	ldr	r5, [r7, #4]
 8014cde:	6838      	ldr	r0, [r7, #0]
 8014ce0:	f7fe f8ef 	bl	8012ec2 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8014ce4:	4602      	mov	r2, r0
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	9303      	str	r3, [sp, #12]
 8014cea:	9202      	str	r2, [sp, #8]
 8014cec:	4b16      	ldr	r3, [pc, #88]	; (8014d48 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8014cee:	9301      	str	r3, [sp, #4]
 8014cf0:	4b19      	ldr	r3, [pc, #100]	; (8014d58 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8014cf2:	9300      	str	r3, [sp, #0]
 8014cf4:	23e9      	movs	r3, #233	; 0xe9
 8014cf6:	4a16      	ldr	r2, [pc, #88]	; (8014d50 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8014cf8:	4916      	ldr	r1, [pc, #88]	; (8014d54 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	47a0      	blx	r4
 8014cfe:	2301      	movs	r3, #1
 8014d00:	e01d      	b.n	8014d3e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  const TfLiteTensor* input = GetInput(context, node, 0);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2200      	movs	r2, #0
 8014d06:	6839      	ldr	r1, [r7, #0]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f7fd fd55 	bl	80127b8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014d0e:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 8014d10:	68f8      	ldr	r0, [r7, #12]
 8014d12:	f7f9 ffe9 	bl	800ece8 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 8014d16:	4603      	mov	r3, r0
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	bfd4      	ite	le
 8014d1c:	2301      	movle	r3, #1
 8014d1e:	2300      	movgt	r3, #0
 8014d20:	b2db      	uxtb	r3, r3
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d00a      	beq.n	8014d3c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	695c      	ldr	r4, [r3, #20]
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	4b0b      	ldr	r3, [pc, #44]	; (8014d5c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8014d2e:	9300      	str	r3, [sp, #0]
 8014d30:	23eb      	movs	r3, #235	; 0xeb
 8014d32:	4a07      	ldr	r2, [pc, #28]	; (8014d50 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8014d34:	490a      	ldr	r1, [pc, #40]	; (8014d60 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8014d36:	47a0      	blx	r4
 8014d38:	2301      	movs	r3, #1
 8014d3a:	e000      	b.n	8014d3e <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc6>

  return kTfLiteOk;
 8014d3c:	2300      	movs	r3, #0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3710      	adds	r7, #16
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bdb0      	pop	{r4, r5, r7, pc}
 8014d46:	bf00      	nop
 8014d48:	0801f3a0 	.word	0x0801f3a0
 8014d4c:	0801f3a4 	.word	0x0801f3a4
 8014d50:	0801f228 	.word	0x0801f228
 8014d54:	0801f2f0 	.word	0x0801f2f0
 8014d58:	0801f3b4 	.word	0x0801f3b4
 8014d5c:	0801f3c8 	.word	0x0801f3c8
 8014d60:	0801f354 	.word	0x0801f354

08014d64 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 8014d64:	b590      	push	{r4, r7, lr}
 8014d66:	b093      	sub	sp, #76	; 0x4c
 8014d68:	af02      	add	r7, sp, #8
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8014d70:	f107 0310 	add.w	r3, r7, #16
 8014d74:	68f9      	ldr	r1, [r7, #12]
 8014d76:	4618      	mov	r0, r3
 8014d78:	f7fd fe41 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8014d7c:	68f8      	ldr	r0, [r7, #12]
 8014d7e:	f7fd fe5c 	bl	8012a3a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8014d82:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 8014d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d88:	68b9      	ldr	r1, [r7, #8]
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fd fe37 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8014d90:	68b8      	ldr	r0, [r7, #8]
 8014d92:	f7fd fe63 	bl	8012a5c <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8014d96:	4602      	mov	r2, r0
 8014d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d9c:	f107 0110 	add.w	r1, r7, #16
 8014da0:	9200      	str	r2, [sp, #0]
 8014da2:	4622      	mov	r2, r4
 8014da4:	6878      	ldr	r0, [r7, #4]
 8014da6:	f7ff fd3f 	bl	8014828 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 8014daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014dae:	4618      	mov	r0, r3
 8014db0:	f7fd fd71 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8014db4:	f107 0310 	add.w	r3, r7, #16
 8014db8:	4618      	mov	r0, r3
 8014dba:	f7fd fd6c 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014dbe:	bf00      	nop
 8014dc0:	3744      	adds	r7, #68	; 0x44
 8014dc2:	46bd      	mov	sp, r7
 8014dc4:	bd90      	pop	{r4, r7, pc}

08014dc6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 8014dc6:	b590      	push	{r4, r7, lr}
 8014dc8:	b0ab      	sub	sp, #172	; 0xac
 8014dca:	af02      	add	r7, sp, #8
 8014dcc:	60f8      	str	r0, [r7, #12]
 8014dce:	60b9      	str	r1, [r7, #8]
 8014dd0:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	781b      	ldrb	r3, [r3, #0]
 8014dd6:	2b03      	cmp	r3, #3
 8014dd8:	d127      	bne.n	8014e2a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8014dda:	f107 0310 	add.w	r3, r7, #16
 8014dde:	68f9      	ldr	r1, [r7, #12]
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7fd fe0c 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 8014de6:	68f8      	ldr	r0, [r7, #12]
 8014de8:	f7fd fd12 	bl	8012810 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8014dec:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8014dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014df2:	68b9      	ldr	r1, [r7, #8]
 8014df4:	4618      	mov	r0, r3
 8014df6:	f7fd fe02 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 8014dfa:	68b8      	ldr	r0, [r7, #8]
 8014dfc:	f7fd fd19 	bl	8012832 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8014e00:	4602      	mov	r2, r0
 8014e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014e06:	f107 0110 	add.w	r1, r7, #16
 8014e0a:	9200      	str	r2, [sp, #0]
 8014e0c:	4622      	mov	r2, r4
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f000 f8c4 	bl	8014f9c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8014e14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f7fd fd3c 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8014e1e:	f107 0310 	add.w	r3, r7, #16
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7fd fd37 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}
 8014e28:	e052      	b.n	8014ed0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
    if (output->type == kTfLiteInt16) {
 8014e2a:	68bb      	ldr	r3, [r7, #8]
 8014e2c:	781b      	ldrb	r3, [r3, #0]
 8014e2e:	2b07      	cmp	r3, #7
 8014e30:	d127      	bne.n	8014e82 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8014e32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014e36:	68f9      	ldr	r1, [r7, #12]
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7fd fde0 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8014e3e:	68f8      	ldr	r0, [r7, #12]
 8014e40:	f7fd fe1d 	bl	8012a7e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8014e44:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 8014e46:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014e4a:	68b9      	ldr	r1, [r7, #8]
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f7fd fdd6 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8014e52:	68b8      	ldr	r0, [r7, #8]
 8014e54:	f7fe ff66 	bl	8013d24 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8014e58:	4602      	mov	r2, r0
 8014e5a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014e5e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8014e62:	9200      	str	r2, [sp, #0]
 8014e64:	4622      	mov	r2, r4
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f000 f9b3 	bl	80151d2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 8014e6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7fd fd10 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8014e76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	f7fd fd0b 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014e80:	e026      	b.n	8014ed0 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8014e82:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014e86:	68f9      	ldr	r1, [r7, #12]
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7fd fdb8 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8014e8e:	68f8      	ldr	r0, [r7, #12]
 8014e90:	f7fd fdf5 	bl	8012a7e <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8014e94:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int8_t>(output));
 8014e96:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014e9a:	68b9      	ldr	r1, [r7, #8]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7fd fdae 	bl	80129fe <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8014ea2:	68b8      	ldr	r0, [r7, #8]
 8014ea4:	f7fd fdfc 	bl	8012aa0 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014eae:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8014eb2:	9200      	str	r2, [sp, #0]
 8014eb4:	4622      	mov	r2, r4
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f000 faa9 	bl	801540e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
 8014ebc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f7fd fce8 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8014ec6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8014eca:	4618      	mov	r0, r3
 8014ecc:	f7fd fce3 	bl	8012896 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8014ed0:	bf00      	nop
 8014ed2:	37a4      	adds	r7, #164	; 0xa4
 8014ed4:	46bd      	mov	sp, r7
 8014ed6:	bd90      	pop	{r4, r7, pc}

08014ed8 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 8014ed8:	b5b0      	push	{r4, r5, r7, lr}
 8014eda:	b096      	sub	sp, #88	; 0x58
 8014edc:	af02      	add	r7, sp, #8
 8014ede:	6078      	str	r0, [r7, #4]
 8014ee0:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8014ee2:	683b      	ldr	r3, [r7, #0]
 8014ee4:	695b      	ldr	r3, [r3, #20]
 8014ee6:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input = GetInput(context, node, 0);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	2200      	movs	r2, #0
 8014eec:	6839      	ldr	r1, [r7, #0]
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7fd fc62 	bl	80127b8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014ef4:	64b8      	str	r0, [r7, #72]	; 0x48
  TfLiteTensor* output = GetOutput(context, node, 0);
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	2200      	movs	r2, #0
 8014efa:	6839      	ldr	r1, [r7, #0]
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7fd fc71 	bl	80127e4 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014f02:	6478      	str	r0, [r7, #68]	; 0x44

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 8014f04:	6878      	ldr	r0, [r7, #4]
 8014f06:	f107 0308 	add.w	r3, r7, #8
 8014f0a:	9300      	str	r3, [sp, #0]
 8014f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014f0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014f10:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014f12:	f7ff fd41 	bl	8014998 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 8014f16:	4603      	mov	r3, r0
 8014f18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014f1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d002      	beq.n	8014f2a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x52>
 8014f24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014f28:	e028      	b.n	8014f7c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 8014f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f2c:	781b      	ldrb	r3, [r3, #0]
 8014f2e:	2b03      	cmp	r3, #3
 8014f30:	d00c      	beq.n	8014f4c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 8014f32:	2b09      	cmp	r3, #9
 8014f34:	d00a      	beq.n	8014f4c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x74>
 8014f36:	2b01      	cmp	r3, #1
 8014f38:	d111      	bne.n	8014f5e <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x86>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 8014f3a:	f107 0308 	add.w	r3, r7, #8
 8014f3e:	461a      	mov	r2, r3
 8014f40:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014f42:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014f44:	f7ff ff0e 	bl	8014d64 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	e017      	b.n	8014f7c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 8014f4c:	f107 0308 	add.w	r3, r7, #8
 8014f50:	461a      	mov	r2, r3
 8014f52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014f54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8014f56:	f7ff ff36 	bl	8014dc6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	e00e      	b.n	8014f7c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	695c      	ldr	r4, [r3, #20]
 8014f62:	687d      	ldr	r5, [r7, #4]
 8014f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f66:	781b      	ldrb	r3, [r3, #0]
 8014f68:	4618      	mov	r0, r3
 8014f6a:	f7f8 faa1 	bl	800d4b0 <TfLiteTypeGetName>
 8014f6e:	4602      	mov	r2, r0
 8014f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	4903      	ldr	r1, [pc, #12]	; (8014f84 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 8014f76:	4628      	mov	r0, r5
 8014f78:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8014f7a:	2301      	movs	r3, #1
  }
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3750      	adds	r7, #80	; 0x50
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bdb0      	pop	{r4, r5, r7, pc}
 8014f84:	0801f3e4 	.word	0x0801f3e4

08014f88 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration* Register_SOFTMAX() {
 8014f88:	b480      	push	{r7}
 8014f8a:	af00      	add	r7, sp, #0
                                 /*invoke=*/activations::SoftmaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8014f8c:	4b02      	ldr	r3, [pc, #8]	; (8014f98 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x10>)
}
 8014f8e:	4618      	mov	r0, r3
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr
 8014f98:	20000674 	.word	0x20000674

08014f9c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 8014f9c:	b590      	push	{r4, r7, lr}
 8014f9e:	b09f      	sub	sp, #124	; 0x7c
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	60f8      	str	r0, [r7, #12]
 8014fa4:	60b9      	str	r1, [r7, #8]
 8014fa6:	607a      	str	r2, [r7, #4]
 8014fa8:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	689b      	ldr	r3, [r3, #8]
 8014fae:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	68db      	ldr	r3, [r3, #12]
 8014fb4:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	699b      	ldr	r3, [r3, #24]
 8014fba:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014fbc:	68b8      	ldr	r0, [r7, #8]
 8014fbe:	f7fd fc80 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	3b01      	subs	r3, #1
 8014fc6:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 8014fc8:	683a      	ldr	r2, [r7, #0]
 8014fca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014fcc:	68b8      	ldr	r0, [r7, #8]
 8014fce:	f7fe feba 	bl	8013d46 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014fd2:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
 8014fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014fd6:	683a      	ldr	r2, [r7, #0]
 8014fd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014fda:	68b8      	ldr	r0, [r7, #8]
 8014fdc:	f7fd ff7e 	bl	8012edc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014fe0:	6538      	str	r0, [r7, #80]	; 0x50
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	677b      	str	r3, [r7, #116]	; 0x74
 8014fe6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014fea:	429a      	cmp	r2, r3
 8014fec:	f280 80ed 	bge.w	80151ca <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	673b      	str	r3, [r7, #112]	; 0x70
 8014ffa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ffe:	429a      	cmp	r2, r3
 8015000:	da16      	bge.n	8015030 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015002:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015004:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015006:	fb02 f203 	mul.w	r2, r2, r3
 801500a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801500c:	4413      	add	r3, r2
 801500e:	461a      	mov	r2, r3
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	441a      	add	r2, r3
 8015014:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8015018:	4611      	mov	r1, r2
 801501a:	4618      	mov	r0, r3
 801501c:	f7ff fb9c 	bl	8014758 <_ZSt3maxIhERKT_S2_S2_>
 8015020:	4603      	mov	r3, r0
 8015022:	781b      	ldrb	r3, [r3, #0]
 8015024:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015028:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801502a:	3301      	adds	r3, #1
 801502c:	673b      	str	r3, [r7, #112]	; 0x70
 801502e:	e7e4      	b.n	8014ffa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8015030:	f000 fb0b 	bl	801564a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015034:	4603      	mov	r3, r0
 8015036:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015038:	2300      	movs	r3, #0
 801503a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801503c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801503e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015040:	429a      	cmp	r2, r3
 8015042:	da2f      	bge.n	80150a4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8015044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015046:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015048:	fb02 f203 	mul.w	r2, r2, r3
 801504c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801504e:	4413      	add	r3, r2
 8015050:	461a      	mov	r2, r3
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	4413      	add	r3, r2
 8015056:	781b      	ldrb	r3, [r3, #0]
 8015058:	461a      	mov	r2, r3
 801505a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8015062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015066:	429a      	cmp	r2, r3
 8015068:	db18      	blt.n	801509c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32 input_diff_rescaled =
 801506a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801506c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801506e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015070:	f7ff fb9c 	bl	80147ac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015074:	64b8      	str	r0, [r7, #72]	; 0x48
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
 8015076:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015078:	f000 faef 	bl	801565a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801507c:	4603      	mov	r3, r0
 801507e:	61fb      	str	r3, [r7, #28]
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8015080:	69f8      	ldr	r0, [r7, #28]
 8015082:	f000 fb19 	bl	80156b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015086:	4603      	mov	r3, r0
 8015088:	4618      	mov	r0, r3
 801508a:	f000 fc5d 	bl	8015948 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801508e:	4603      	mov	r3, r0
 8015090:	4619      	mov	r1, r3
 8015092:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015094:	f000 faf2 	bl	801567c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015098:	4603      	mov	r3, r0
 801509a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801509c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801509e:	3301      	adds	r3, #1
 80150a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80150a2:	e7cb      	b.n	801503c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80150a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80150a8:	4618      	mov	r0, r3
 80150aa:	f000 fc67 	bl	801597c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80150ae:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80150b6:	210c      	movs	r1, #12
 80150b8:	4618      	mov	r0, r3
 80150ba:	f7ff fb8a 	bl	80147d2 <_ZN6tflite13GetReciprocalEliPi>
 80150be:	4603      	mov	r3, r0
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7fe ff87 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80150c6:	4603      	mov	r3, r0
 80150c8:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 80150ca:	2300      	movs	r3, #0
 80150cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80150ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80150d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150d2:	429a      	cmp	r2, r3
 80150d4:	da75      	bge.n	80151c2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80150d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80150d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80150da:	fb02 f203 	mul.w	r2, r2, r3
 80150de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80150e0:	4413      	add	r3, r2
 80150e2:	461a      	mov	r2, r3
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	4413      	add	r3, r2
 80150e8:	781b      	ldrb	r3, [r3, #0]
 80150ea:	461a      	mov	r2, r3
 80150ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80150f0:	1ad3      	subs	r3, r2, r3
 80150f2:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80150f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80150f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80150f8:	429a      	cmp	r2, r3
 80150fa:	db50      	blt.n	801519e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32 input_diff_rescaled =
 80150fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80150fe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015100:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015102:	f7ff fb53 	bl	80147ac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015106:	6438      	str	r0, [r7, #64]	; 0x40
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
 8015108:	6c38      	ldr	r0, [r7, #64]	; 0x40
 801510a:	f000 faa6 	bl	801565a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801510e:	4603      	mov	r3, r0
 8015110:	61bb      	str	r3, [r7, #24]
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8015112:	69b8      	ldr	r0, [r7, #24]
 8015114:	f000 fad0 	bl	80156b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015118:	4603      	mov	r3, r0
 801511a:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 801511c:	6979      	ldr	r1, [r7, #20]
 801511e:	6a38      	ldr	r0, [r7, #32]
 8015120:	f7ff fa52 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015124:	4603      	mov	r3, r0
 8015126:	633b      	str	r3, [r7, #48]	; 0x30
 8015128:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801512c:	4618      	mov	r0, r3
 801512e:	f7fe fe4b 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015132:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015134:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8015136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015138:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801513a:	4611      	mov	r1, r2
 801513c:	4618      	mov	r0, r3
 801513e:	f7fd fd73 	bl	8012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015142:	63f8      	str	r0, [r7, #60]	; 0x3c

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8015144:	f7f9 fdc0 	bl	800ecc8 <_ZNSt14numeric_limitsIhE3minEv>
 8015148:	4603      	mov	r3, r0
 801514a:	461a      	mov	r2, r3
            unsat_output +
 801514c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801514e:	4413      	add	r3, r2
        const int32 shifted_output =
 8015150:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8015152:	f7f9 fdc1 	bl	800ecd8 <_ZNSt14numeric_limitsIhE3maxEv>
 8015156:	4603      	mov	r3, r0
 8015158:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 801515a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801515e:	f107 0310 	add.w	r3, r7, #16
 8015162:	4611      	mov	r1, r2
 8015164:	4618      	mov	r0, r3
 8015166:	f7f9 ffcf 	bl	800f108 <_ZSt3minIlERKT_S2_S2_>
 801516a:	4604      	mov	r4, r0
 801516c:	f7f9 fdac 	bl	800ecc8 <_ZNSt14numeric_limitsIhE3minEv>
 8015170:	4603      	mov	r3, r0
 8015172:	63bb      	str	r3, [r7, #56]	; 0x38
 8015174:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015178:	4619      	mov	r1, r3
 801517a:	4620      	mov	r0, r4
 801517c:	f7f9 ffb0 	bl	800f0e0 <_ZSt3maxIlERKT_S2_S2_>
 8015180:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8015182:	6819      	ldr	r1, [r3, #0]
 8015184:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015186:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015188:	fb02 f203 	mul.w	r2, r2, r3
 801518c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801518e:	4413      	add	r3, r2
 8015190:	461a      	mov	r2, r3
 8015192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015196:	4413      	add	r3, r2
 8015198:	b2ca      	uxtb	r2, r1
 801519a:	701a      	strb	r2, [r3, #0]
 801519c:	e00d      	b.n	80151ba <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801519e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80151a2:	fb02 f203 	mul.w	r2, r2, r3
 80151a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151a8:	4413      	add	r3, r2
 80151aa:	461a      	mov	r2, r3
 80151ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80151b0:	189c      	adds	r4, r3, r2
 80151b2:	f7f9 fd89 	bl	800ecc8 <_ZNSt14numeric_limitsIhE3minEv>
 80151b6:	4603      	mov	r3, r0
 80151b8:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80151ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80151bc:	3301      	adds	r3, #1
 80151be:	66bb      	str	r3, [r7, #104]	; 0x68
 80151c0:	e785      	b.n	80150ce <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 80151c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80151c4:	3301      	adds	r3, #1
 80151c6:	677b      	str	r3, [r7, #116]	; 0x74
 80151c8:	e70d      	b.n	8014fe6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
      }
    }
  }
}
 80151ca:	bf00      	nop
 80151cc:	377c      	adds	r7, #124	; 0x7c
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd90      	pop	{r4, r7, pc}

080151d2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 80151d2:	b590      	push	{r4, r7, lr}
 80151d4:	b09f      	sub	sp, #124	; 0x7c
 80151d6:	af00      	add	r7, sp, #0
 80151d8:	60f8      	str	r0, [r7, #12]
 80151da:	60b9      	str	r1, [r7, #8]
 80151dc:	607a      	str	r2, [r7, #4]
 80151de:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 80151e0:	68fb      	ldr	r3, [r7, #12]
 80151e2:	689b      	ldr	r3, [r3, #8]
 80151e4:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 80151e6:	68fb      	ldr	r3, [r7, #12]
 80151e8:	68db      	ldr	r3, [r3, #12]
 80151ea:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	699b      	ldr	r3, [r3, #24]
 80151f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80151f2:	68b8      	ldr	r0, [r7, #8]
 80151f4:	f7fd fb65 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80151f8:	4603      	mov	r3, r0
 80151fa:	3b01      	subs	r3, #1
 80151fc:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 80151fe:	683a      	ldr	r2, [r7, #0]
 8015200:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015202:	68b8      	ldr	r0, [r7, #8]
 8015204:	f7fe fd9f 	bl	8013d46 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8015208:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 801520a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801520c:	683a      	ldr	r2, [r7, #0]
 801520e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015210:	68b8      	ldr	r0, [r7, #8]
 8015212:	f7fd fe63 	bl	8012edc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015216:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8015218:	2300      	movs	r3, #0
 801521a:	677b      	str	r3, [r7, #116]	; 0x74
 801521c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801521e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015220:	429a      	cmp	r2, r3
 8015222:	f280 80f0 	bge.w	8015406 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8015226:	2380      	movs	r3, #128	; 0x80
 8015228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801522c:	2300      	movs	r3, #0
 801522e:	673b      	str	r3, [r7, #112]	; 0x70
 8015230:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015234:	429a      	cmp	r2, r3
 8015236:	da17      	bge.n	8015268 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015238:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801523a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801523c:	fb02 f203 	mul.w	r2, r2, r3
 8015240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015242:	4413      	add	r3, r2
 8015244:	461a      	mov	r2, r3
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	441a      	add	r2, r3
 801524a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801524e:	4611      	mov	r1, r2
 8015250:	4618      	mov	r0, r3
 8015252:	f7ff fa95 	bl	8014780 <_ZSt3maxIaERKT_S2_S2_>
 8015256:	4603      	mov	r3, r0
 8015258:	f993 3000 	ldrsb.w	r3, [r3]
 801525c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015260:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015262:	3301      	adds	r3, #1
 8015264:	673b      	str	r3, [r7, #112]	; 0x70
 8015266:	e7e3      	b.n	8015230 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8015268:	f000 f9ef 	bl	801564a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 801526c:	4603      	mov	r3, r0
 801526e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015270:	2300      	movs	r3, #0
 8015272:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015278:	429a      	cmp	r2, r3
 801527a:	da30      	bge.n	80152de <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801527c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801527e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015280:	fb02 f203 	mul.w	r2, r2, r3
 8015284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015286:	4413      	add	r3, r2
 8015288:	461a      	mov	r2, r3
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	4413      	add	r3, r2
 801528e:	f993 3000 	ldrsb.w	r3, [r3]
 8015292:	461a      	mov	r2, r3
 8015294:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8015298:	1ad3      	subs	r3, r2, r3
 801529a:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801529c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801529e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80152a0:	429a      	cmp	r2, r3
 80152a2:	db18      	blt.n	80152d6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32 input_diff_rescaled =
 80152a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80152a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80152a8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80152aa:	f7ff fa7f 	bl	80147ac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80152ae:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 80152b0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80152b2:	f000 f9d2 	bl	801565a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80152b6:	4603      	mov	r3, r0
 80152b8:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 80152ba:	69f8      	ldr	r0, [r7, #28]
 80152bc:	f000 f9fc 	bl	80156b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80152c0:	4603      	mov	r3, r0
 80152c2:	4618      	mov	r0, r3
 80152c4:	f000 fb40 	bl	8015948 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80152c8:	4603      	mov	r3, r0
 80152ca:	4619      	mov	r1, r3
 80152cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152ce:	f000 f9d5 	bl	801567c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80152d2:	4603      	mov	r3, r0
 80152d4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80152d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80152d8:	3301      	adds	r3, #1
 80152da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80152dc:	e7ca      	b.n	8015274 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80152de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80152e2:	4618      	mov	r0, r3
 80152e4:	f000 fb4a 	bl	801597c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80152e8:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80152f0:	210c      	movs	r1, #12
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7ff fa6d 	bl	80147d2 <_ZN6tflite13GetReciprocalEliPi>
 80152f8:	4603      	mov	r3, r0
 80152fa:	4618      	mov	r0, r3
 80152fc:	f7fe fe6a 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015300:	4603      	mov	r3, r0
 8015302:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8015304:	2300      	movs	r3, #0
 8015306:	66bb      	str	r3, [r7, #104]	; 0x68
 8015308:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801530a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801530c:	429a      	cmp	r2, r3
 801530e:	da76      	bge.n	80153fe <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8015310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015312:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015314:	fb02 f203 	mul.w	r2, r2, r3
 8015318:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801531a:	4413      	add	r3, r2
 801531c:	461a      	mov	r2, r3
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	4413      	add	r3, r2
 8015322:	f993 3000 	ldrsb.w	r3, [r3]
 8015326:	461a      	mov	r2, r3
 8015328:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801532c:	1ad3      	subs	r3, r2, r3
 801532e:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8015330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015334:	429a      	cmp	r2, r3
 8015336:	db50      	blt.n	80153da <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32 input_diff_rescaled =
 8015338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801533a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801533c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801533e:	f7ff fa35 	bl	80147ac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015342:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 8015344:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015346:	f000 f988 	bl	801565a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801534a:	4603      	mov	r3, r0
 801534c:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801534e:	69b8      	ldr	r0, [r7, #24]
 8015350:	f000 f9b2 	bl	80156b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015354:	4603      	mov	r3, r0
 8015356:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015358:	6979      	ldr	r1, [r7, #20]
 801535a:	6a38      	ldr	r0, [r7, #32]
 801535c:	f7ff f934 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015360:	4603      	mov	r3, r0
 8015362:	633b      	str	r3, [r7, #48]	; 0x30
 8015364:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015368:	4618      	mov	r0, r3
 801536a:	f7fe fd2d 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801536e:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015370:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8015372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015374:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015376:	4611      	mov	r1, r2
 8015378:	4618      	mov	r0, r3
 801537a:	f7fd fc55 	bl	8012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801537e:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8015380:	f7eb fe80 	bl	8001084 <_ZNSt14numeric_limitsIsE3minEv>
 8015384:	4603      	mov	r3, r0
 8015386:	461a      	mov	r2, r3
            unsat_output +
 8015388:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801538a:	4413      	add	r3, r2
        const int32 shifted_output =
 801538c:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 801538e:	f7eb fe83 	bl	8001098 <_ZNSt14numeric_limitsIsE3maxEv>
 8015392:	4603      	mov	r3, r0
 8015394:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8015396:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801539a:	f107 0310 	add.w	r3, r7, #16
 801539e:	4611      	mov	r1, r2
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7f9 feb1 	bl	800f108 <_ZSt3minIlERKT_S2_S2_>
 80153a6:	4604      	mov	r4, r0
 80153a8:	f7eb fe6c 	bl	8001084 <_ZNSt14numeric_limitsIsE3minEv>
 80153ac:	4603      	mov	r3, r0
 80153ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80153b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80153b4:	4619      	mov	r1, r3
 80153b6:	4620      	mov	r0, r4
 80153b8:	f7f9 fe92 	bl	800f0e0 <_ZSt3maxIlERKT_S2_S2_>
 80153bc:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 80153be:	6819      	ldr	r1, [r3, #0]
 80153c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80153c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80153c4:	fb02 f203 	mul.w	r2, r2, r3
 80153c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153ca:	4413      	add	r3, r2
 80153cc:	005b      	lsls	r3, r3, #1
 80153ce:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80153d2:	4413      	add	r3, r2
 80153d4:	b20a      	sxth	r2, r1
 80153d6:	801a      	strh	r2, [r3, #0]
 80153d8:	e00d      	b.n	80153f6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 80153da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80153dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80153de:	fb02 f203 	mul.w	r2, r2, r3
 80153e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153e4:	4413      	add	r3, r2
 80153e6:	005b      	lsls	r3, r3, #1
 80153e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80153ec:	18d4      	adds	r4, r2, r3
 80153ee:	f7eb fe49 	bl	8001084 <_ZNSt14numeric_limitsIsE3minEv>
 80153f2:	4603      	mov	r3, r0
 80153f4:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80153f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80153f8:	3301      	adds	r3, #1
 80153fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80153fc:	e784      	b.n	8015308 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 80153fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015400:	3301      	adds	r3, #1
 8015402:	677b      	str	r3, [r7, #116]	; 0x74
 8015404:	e70a      	b.n	801521c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8015406:	bf00      	nop
 8015408:	377c      	adds	r7, #124	; 0x7c
 801540a:	46bd      	mov	sp, r7
 801540c:	bd90      	pop	{r4, r7, pc}

0801540e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801540e:	b590      	push	{r4, r7, lr}
 8015410:	b09f      	sub	sp, #124	; 0x7c
 8015412:	af00      	add	r7, sp, #0
 8015414:	60f8      	str	r0, [r7, #12]
 8015416:	60b9      	str	r1, [r7, #8]
 8015418:	607a      	str	r2, [r7, #4]
 801541a:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	689b      	ldr	r3, [r3, #8]
 8015420:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	68db      	ldr	r3, [r3, #12]
 8015426:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	699b      	ldr	r3, [r3, #24]
 801542c:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 801542e:	68b8      	ldr	r0, [r7, #8]
 8015430:	f7fd fa47 	bl	80128c2 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015434:	4603      	mov	r3, r0
 8015436:	3b01      	subs	r3, #1
 8015438:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
 801543a:	683a      	ldr	r2, [r7, #0]
 801543c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801543e:	68b8      	ldr	r0, [r7, #8]
 8015440:	f7fe fc81 	bl	8013d46 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8015444:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
 8015446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015448:	683a      	ldr	r2, [r7, #0]
 801544a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801544c:	68b8      	ldr	r0, [r7, #8]
 801544e:	f7fd fd45 	bl	8012edc <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015452:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8015454:	2300      	movs	r3, #0
 8015456:	677b      	str	r3, [r7, #116]	; 0x74
 8015458:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801545a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801545c:	429a      	cmp	r2, r3
 801545e:	f280 80f0 	bge.w	8015642 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8015462:	2380      	movs	r3, #128	; 0x80
 8015464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015468:	2300      	movs	r3, #0
 801546a:	673b      	str	r3, [r7, #112]	; 0x70
 801546c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801546e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015470:	429a      	cmp	r2, r3
 8015472:	da17      	bge.n	80154a4 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015474:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015476:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015478:	fb02 f203 	mul.w	r2, r2, r3
 801547c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801547e:	4413      	add	r3, r2
 8015480:	461a      	mov	r2, r3
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	441a      	add	r2, r3
 8015486:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801548a:	4611      	mov	r1, r2
 801548c:	4618      	mov	r0, r3
 801548e:	f7ff f977 	bl	8014780 <_ZSt3maxIaERKT_S2_S2_>
 8015492:	4603      	mov	r3, r0
 8015494:	f993 3000 	ldrsb.w	r3, [r3]
 8015498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801549c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801549e:	3301      	adds	r3, #1
 80154a0:	673b      	str	r3, [r7, #112]	; 0x70
 80154a2:	e7e3      	b.n	801546c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80154a4:	f000 f8d1 	bl	801564a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80154a8:	4603      	mov	r3, r0
 80154aa:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80154ac:	2300      	movs	r3, #0
 80154ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80154b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80154b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154b4:	429a      	cmp	r2, r3
 80154b6:	da30      	bge.n	801551a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80154b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80154ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80154bc:	fb02 f203 	mul.w	r2, r2, r3
 80154c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80154c2:	4413      	add	r3, r2
 80154c4:	461a      	mov	r2, r3
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	4413      	add	r3, r2
 80154ca:	f993 3000 	ldrsb.w	r3, [r3]
 80154ce:	461a      	mov	r2, r3
 80154d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80154d4:	1ad3      	subs	r3, r2, r3
 80154d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 80154d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80154da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80154dc:	429a      	cmp	r2, r3
 80154de:	db18      	blt.n	8015512 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
        const int32 input_diff_rescaled =
 80154e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80154e2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80154e4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80154e6:	f7ff f961 	bl	80147ac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80154ea:	64b8      	str	r0, [r7, #72]	; 0x48
        const FixedPointScaledDiff scaled_diff_f8 =
 80154ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80154ee:	f000 f8b4 	bl	801565a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80154f2:	4603      	mov	r3, r0
 80154f4:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 80154f6:	69f8      	ldr	r0, [r7, #28]
 80154f8:	f000 f8de 	bl	80156b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80154fc:	4603      	mov	r3, r0
 80154fe:	4618      	mov	r0, r3
 8015500:	f000 fa22 	bl	8015948 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015504:	4603      	mov	r3, r0
 8015506:	4619      	mov	r1, r3
 8015508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801550a:	f000 f8b7 	bl	801567c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801550e:	4603      	mov	r3, r0
 8015510:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015514:	3301      	adds	r3, #1
 8015516:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015518:	e7ca      	b.n	80154b0 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 801551a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801551e:	4618      	mov	r0, r3
 8015520:	f000 fa2c 	bl	801597c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015524:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801552c:	210c      	movs	r1, #12
 801552e:	4618      	mov	r0, r3
 8015530:	f7ff f94f 	bl	80147d2 <_ZN6tflite13GetReciprocalEliPi>
 8015534:	4603      	mov	r3, r0
 8015536:	4618      	mov	r0, r3
 8015538:	f7fe fd4c 	bl	8013fd4 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801553c:	4603      	mov	r3, r0
 801553e:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8015540:	2300      	movs	r3, #0
 8015542:	66bb      	str	r3, [r7, #104]	; 0x68
 8015544:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015548:	429a      	cmp	r2, r3
 801554a:	da76      	bge.n	801563a <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801554c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801554e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015550:	fb02 f203 	mul.w	r2, r2, r3
 8015554:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015556:	4413      	add	r3, r2
 8015558:	461a      	mov	r2, r3
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	4413      	add	r3, r2
 801555e:	f993 3000 	ldrsb.w	r3, [r3]
 8015562:	461a      	mov	r2, r3
 8015564:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8015568:	1ad3      	subs	r3, r2, r3
 801556a:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 801556c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801556e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015570:	429a      	cmp	r2, r3
 8015572:	db50      	blt.n	8015616 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
        const int32 input_diff_rescaled =
 8015574:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015576:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015578:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801557a:	f7ff f917 	bl	80147ac <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801557e:	6438      	str	r0, [r7, #64]	; 0x40
        const FixedPointScaledDiff scaled_diff_f8 =
 8015580:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015582:	f000 f86a 	bl	801565a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015586:	4603      	mov	r3, r0
 8015588:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801558a:	69b8      	ldr	r0, [r7, #24]
 801558c:	f000 f894 	bl	80156b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015590:	4603      	mov	r3, r0
 8015592:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015594:	6979      	ldr	r1, [r7, #20]
 8015596:	6a38      	ldr	r0, [r7, #32]
 8015598:	f7ff f816 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801559c:	4603      	mov	r3, r0
 801559e:	633b      	str	r3, [r7, #48]	; 0x30
 80155a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80155a4:	4618      	mov	r0, r3
 80155a6:	f7fe fc0f 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80155aa:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 80155ac:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 80155ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155b0:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 80155b2:	4611      	mov	r1, r2
 80155b4:	4618      	mov	r0, r3
 80155b6:	f7fd fb37 	bl	8012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80155ba:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 80155bc:	f7f9 fb73 	bl	800eca6 <_ZNSt14numeric_limitsIaE3minEv>
 80155c0:	4603      	mov	r3, r0
 80155c2:	461a      	mov	r2, r3
            unsat_output +
 80155c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155c6:	4413      	add	r3, r2
        const int32 shifted_output =
 80155c8:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 80155ca:	f7f9 fb75 	bl	800ecb8 <_ZNSt14numeric_limitsIaE3maxEv>
 80155ce:	4603      	mov	r3, r0
 80155d0:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 80155d2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80155d6:	f107 0310 	add.w	r3, r7, #16
 80155da:	4611      	mov	r1, r2
 80155dc:	4618      	mov	r0, r3
 80155de:	f7f9 fd93 	bl	800f108 <_ZSt3minIlERKT_S2_S2_>
 80155e2:	4604      	mov	r4, r0
 80155e4:	f7f9 fb5f 	bl	800eca6 <_ZNSt14numeric_limitsIaE3minEv>
 80155e8:	4603      	mov	r3, r0
 80155ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80155ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80155f0:	4619      	mov	r1, r3
 80155f2:	4620      	mov	r0, r4
 80155f4:	f7f9 fd74 	bl	800f0e0 <_ZSt3maxIlERKT_S2_S2_>
 80155f8:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 80155fa:	6819      	ldr	r1, [r3, #0]
 80155fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80155fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015600:	fb02 f203 	mul.w	r2, r2, r3
 8015604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015606:	4413      	add	r3, r2
 8015608:	461a      	mov	r2, r3
 801560a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801560e:	4413      	add	r3, r2
 8015610:	b24a      	sxtb	r2, r1
 8015612:	701a      	strb	r2, [r3, #0]
 8015614:	e00d      	b.n	8015632 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8015616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015618:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801561a:	fb02 f203 	mul.w	r2, r2, r3
 801561e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015620:	4413      	add	r3, r2
 8015622:	461a      	mov	r2, r3
 8015624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015628:	189c      	adds	r4, r3, r2
 801562a:	f7f9 fb3c 	bl	800eca6 <_ZNSt14numeric_limitsIaE3minEv>
 801562e:	4603      	mov	r3, r0
 8015630:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8015632:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015634:	3301      	adds	r3, #1
 8015636:	66bb      	str	r3, [r7, #104]	; 0x68
 8015638:	e784      	b.n	8015544 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 801563a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801563c:	3301      	adds	r3, #1
 801563e:	677b      	str	r3, [r7, #116]	; 0x74
 8015640:	e70a      	b.n	8015458 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8015642:	bf00      	nop
 8015644:	377c      	adds	r7, #124	; 0x7c
 8015646:	46bd      	mov	sp, r7
 8015648:	bd90      	pop	{r4, r7, pc}

0801564a <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 801564a:	b580      	push	{r7, lr}
 801564c:	af00      	add	r7, sp, #0
 801564e:	2000      	movs	r0, #0
 8015650:	f000 f99f 	bl	8015992 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8015654:	4603      	mov	r3, r0
 8015656:	4618      	mov	r0, r3
 8015658:	bd80      	pop	{r7, pc}

0801565a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801565a:	b580      	push	{r7, lr}
 801565c:	b084      	sub	sp, #16
 801565e:	af00      	add	r7, sp, #0
 8015660:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015662:	f107 030c 	add.w	r3, r7, #12
 8015666:	4618      	mov	r0, r3
 8015668:	f000 f9a7 	bl	80159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801566c:	4602      	mov	r2, r0
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	6013      	str	r3, [r2, #0]
    return retval;
 8015672:	68fb      	ldr	r3, [r7, #12]
  }
 8015674:	4618      	mov	r0, r3
 8015676:	3710      	adds	r7, #16
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 801567c:	b590      	push	{r4, r7, lr}
 801567e:	b083      	sub	sp, #12
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	6039      	str	r1, [r7, #0]
 8015686:	1d3b      	adds	r3, r7, #4
 8015688:	4618      	mov	r0, r3
 801568a:	f000 f977 	bl	801597c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801568e:	4603      	mov	r3, r0
 8015690:	681c      	ldr	r4, [r3, #0]
 8015692:	463b      	mov	r3, r7
 8015694:	4618      	mov	r0, r3
 8015696:	f000 f971 	bl	801597c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801569a:	4603      	mov	r3, r0
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	4619      	mov	r1, r3
 80156a0:	4620      	mov	r0, r4
 80156a2:	f7fd fbb1 	bl	8012e08 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 80156a6:	4603      	mov	r3, r0
 80156a8:	4618      	mov	r0, r3
 80156aa:	f000 f991 	bl	80159d0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 80156ae:	4603      	mov	r3, r0
 80156b0:	4618      	mov	r0, r3
 80156b2:	370c      	adds	r7, #12
 80156b4:	46bd      	mov	sp, r7
 80156b6:	bd90      	pop	{r4, r7, pc}

080156b8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 80156b8:	b590      	push	{r4, r7, lr}
 80156ba:	b091      	sub	sp, #68	; 0x44
 80156bc:	af00      	add	r7, sp, #0
 80156be:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 80156c0:	f000 f997 	bl	80159f2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 80156c4:	4603      	mov	r3, r0
 80156c6:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 80156c8:	2001      	movs	r0, #1
 80156ca:	f000 f99b 	bl	8015a04 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 80156ce:	4603      	mov	r3, r0
 80156d0:	4619      	mov	r1, r3
 80156d2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80156d4:	f000 f9aa 	bl	8015a2c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80156d8:	4603      	mov	r3, r0
 80156da:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 80156dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f000 f9c2 	bl	8015a68 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80156e4:	4603      	mov	r3, r0
 80156e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80156e8:	4618      	mov	r0, r3
 80156ea:	f000 f99f 	bl	8015a2c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80156ee:	4603      	mov	r3, r0
 80156f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 80156f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156f4:	f000 f9d6 	bl	8015aa4 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 80156f8:	4603      	mov	r3, r0
 80156fa:	4618      	mov	r0, r3
 80156fc:	f7fe ff02 	bl	8014504 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8015700:	4603      	mov	r3, r0
 8015702:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8015704:	6879      	ldr	r1, [r7, #4]
 8015706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015708:	f000 f990 	bl	8015a2c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801570c:	4603      	mov	r3, r0
 801570e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015710:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015714:	4618      	mov	r0, r3
 8015716:	f000 f950 	bl	80159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801571a:	4603      	mov	r3, r0
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8015720:	4883      	ldr	r0, [pc, #524]	; (8015930 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8015722:	f7fe fb70 	bl	8013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015726:	4603      	mov	r3, r0
 8015728:	4618      	mov	r0, r3
 801572a:	f7fe fb58 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801572e:	4603      	mov	r3, r0
 8015730:	627b      	str	r3, [r7, #36]	; 0x24
 8015732:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8015736:	f7fd fb2b 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801573a:	4603      	mov	r3, r0
 801573c:	4619      	mov	r1, r3
 801573e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015740:	f7fd fb31 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015744:	4603      	mov	r3, r0
 8015746:	4618      	mov	r0, r3
 8015748:	f7fd fb80 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801574c:	4604      	mov	r4, r0
 801574e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015752:	f7fe ff39 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015756:	4603      	mov	r3, r0
 8015758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801575a:	4619      	mov	r1, r3
 801575c:	4620      	mov	r0, r4
 801575e:	f7fe fdd3 	bl	8014308 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015762:	4603      	mov	r3, r0
 8015764:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8015766:	4873      	ldr	r0, [pc, #460]	; (8015934 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8015768:	f7fe fb4d 	bl	8013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801576c:	4603      	mov	r3, r0
 801576e:	4618      	mov	r0, r3
 8015770:	f7fe fb35 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015774:	4603      	mov	r3, r0
 8015776:	623b      	str	r3, [r7, #32]
 8015778:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 801577c:	f7fd fb08 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015780:	4603      	mov	r3, r0
 8015782:	4619      	mov	r1, r3
 8015784:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015786:	f7fd fb0e 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801578a:	4603      	mov	r3, r0
 801578c:	4618      	mov	r0, r3
 801578e:	f7fd fb5d 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015792:	4604      	mov	r4, r0
 8015794:	6a39      	ldr	r1, [r7, #32]
 8015796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015798:	f7fe ff16 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801579c:	4603      	mov	r3, r0
 801579e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80157a0:	4619      	mov	r1, r3
 80157a2:	4620      	mov	r0, r4
 80157a4:	f7fe fdb0 	bl	8014308 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80157a8:	4603      	mov	r3, r0
 80157aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 80157ac:	4862      	ldr	r0, [pc, #392]	; (8015938 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 80157ae:	f7fe fb2a 	bl	8013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80157b2:	4603      	mov	r3, r0
 80157b4:	4618      	mov	r0, r3
 80157b6:	f7fe fb12 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80157ba:	4603      	mov	r3, r0
 80157bc:	61fb      	str	r3, [r7, #28]
 80157be:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80157c2:	f7fd fae5 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80157c6:	4603      	mov	r3, r0
 80157c8:	4619      	mov	r1, r3
 80157ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80157cc:	f7fd faeb 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80157d0:	4603      	mov	r3, r0
 80157d2:	4618      	mov	r0, r3
 80157d4:	f7fd fb3a 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80157d8:	4604      	mov	r4, r0
 80157da:	69f9      	ldr	r1, [r7, #28]
 80157dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157de:	f7fe fef3 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80157e2:	4603      	mov	r3, r0
 80157e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80157e6:	4619      	mov	r1, r3
 80157e8:	4620      	mov	r0, r4
 80157ea:	f7fe fd8d 	bl	8014308 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80157ee:	4603      	mov	r3, r0
 80157f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 80157f2:	4852      	ldr	r0, [pc, #328]	; (801593c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 80157f4:	f7fe fb07 	bl	8013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80157f8:	4603      	mov	r3, r0
 80157fa:	4618      	mov	r0, r3
 80157fc:	f7fe faef 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015800:	4603      	mov	r3, r0
 8015802:	61bb      	str	r3, [r7, #24]
 8015804:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8015808:	f7fd fac2 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801580c:	4603      	mov	r3, r0
 801580e:	4619      	mov	r1, r3
 8015810:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015812:	f7fd fac8 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015816:	4603      	mov	r3, r0
 8015818:	4618      	mov	r0, r3
 801581a:	f7fd fb17 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801581e:	4604      	mov	r4, r0
 8015820:	69b9      	ldr	r1, [r7, #24]
 8015822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015824:	f7fe fed0 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015828:	4603      	mov	r3, r0
 801582a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801582c:	4619      	mov	r1, r3
 801582e:	4620      	mov	r0, r4
 8015830:	f7fe fd6a 	bl	8014308 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015834:	4603      	mov	r3, r0
 8015836:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8015838:	4841      	ldr	r0, [pc, #260]	; (8015940 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 801583a:	f7fe fae4 	bl	8013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 801583e:	4603      	mov	r3, r0
 8015840:	4618      	mov	r0, r3
 8015842:	f7fe facc 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015846:	4603      	mov	r3, r0
 8015848:	617b      	str	r3, [r7, #20]
 801584a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 801584e:	f7fd fa9f 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015852:	4603      	mov	r3, r0
 8015854:	4619      	mov	r1, r3
 8015856:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015858:	f7fd faa5 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801585c:	4603      	mov	r3, r0
 801585e:	4618      	mov	r0, r3
 8015860:	f7fd faf4 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015864:	4604      	mov	r4, r0
 8015866:	6979      	ldr	r1, [r7, #20]
 8015868:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801586a:	f7fe fead 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801586e:	4603      	mov	r3, r0
 8015870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015872:	4619      	mov	r1, r3
 8015874:	4620      	mov	r0, r4
 8015876:	f7fe fd47 	bl	8014308 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 801587a:	4603      	mov	r3, r0
 801587c:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 801587e:	4831      	ldr	r0, [pc, #196]	; (8015944 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8015880:	f7fe fac1 	bl	8013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015884:	4603      	mov	r3, r0
 8015886:	4618      	mov	r0, r3
 8015888:	f7fe faa9 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 801588c:	4603      	mov	r3, r0
 801588e:	613b      	str	r3, [r7, #16]
 8015890:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8015894:	f7fd fa7c 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015898:	4603      	mov	r3, r0
 801589a:	4619      	mov	r1, r3
 801589c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801589e:	f7fd fa82 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80158a2:	4603      	mov	r3, r0
 80158a4:	4618      	mov	r0, r3
 80158a6:	f7fd fad1 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80158aa:	4604      	mov	r4, r0
 80158ac:	6939      	ldr	r1, [r7, #16]
 80158ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158b0:	f7fe fe8a 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80158b4:	4603      	mov	r3, r0
 80158b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158b8:	4619      	mov	r1, r3
 80158ba:	4620      	mov	r0, r4
 80158bc:	f7fe fd24 	bl	8014308 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 80158c0:	4603      	mov	r3, r0
 80158c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 80158c4:	20f2      	movs	r0, #242	; 0xf2
 80158c6:	f7fe fa9e 	bl	8013e06 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 80158ca:	4603      	mov	r3, r0
 80158cc:	4618      	mov	r0, r3
 80158ce:	f7fe fa86 	bl	8013dde <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 80158d2:	4603      	mov	r3, r0
 80158d4:	60fb      	str	r3, [r7, #12]
 80158d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80158da:	f7fd fa59 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80158de:	4603      	mov	r3, r0
 80158e0:	4619      	mov	r1, r3
 80158e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80158e4:	f7fd fa5f 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80158e8:	4603      	mov	r3, r0
 80158ea:	4618      	mov	r0, r3
 80158ec:	f7fd faae 	bl	8012e4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 80158f0:	4604      	mov	r4, r0
 80158f2:	68f9      	ldr	r1, [r7, #12]
 80158f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158f6:	f7fe fe67 	bl	80145c8 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80158fa:	4603      	mov	r3, r0
 80158fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158fe:	4619      	mov	r1, r3
 8015900:	4620      	mov	r0, r4
 8015902:	f7fe fd01 	bl	8014308 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015906:	4603      	mov	r3, r0
 8015908:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f000 f8e4 	bl	8015ad8 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8015910:	4604      	mov	r4, r0
 8015912:	f7fe fbd1 	bl	80140b8 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8015916:	4603      	mov	r3, r0
 8015918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801591a:	4619      	mov	r1, r3
 801591c:	4620      	mov	r0, r4
 801591e:	f7fe fcf3 	bl	8014308 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015922:	4603      	mov	r3, r0
 8015924:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8015926:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8015928:	4618      	mov	r0, r3
 801592a:	3744      	adds	r7, #68	; 0x44
 801592c:	46bd      	mov	sp, r7
 801592e:	bd90      	pop	{r4, r7, pc}
 8015930:	63afbe7b 	.word	0x63afbe7b
 8015934:	4da2cbf2 	.word	0x4da2cbf2
 8015938:	2f16ac6c 	.word	0x2f16ac6c
 801593c:	1152aaa4 	.word	0x1152aaa4
 8015940:	02582ab7 	.word	0x02582ab7
 8015944:	000afe11 	.word	0x000afe11

08015948 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015948:	b5b0      	push	{r4, r5, r7, lr}
 801594a:	b084      	sub	sp, #16
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015950:	1d3b      	adds	r3, r7, #4
 8015952:	4618      	mov	r0, r3
 8015954:	f7fe fa38 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015958:	4603      	mov	r3, r0
 801595a:	681d      	ldr	r5, [r3, #0]
 801595c:	f107 030c 	add.w	r3, r7, #12
 8015960:	4618      	mov	r0, r3
 8015962:	f000 f80b 	bl	801597c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015966:	4604      	mov	r4, r0
 8015968:	4628      	mov	r0, r5
 801596a:	f000 f8c7 	bl	8015afc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 801596e:	4603      	mov	r3, r0
 8015970:	6023      	str	r3, [r4, #0]
  return result;
 8015972:	68fb      	ldr	r3, [r7, #12]
}
 8015974:	4618      	mov	r0, r3
 8015976:	3710      	adds	r7, #16
 8015978:	46bd      	mov	sp, r7
 801597a:	bdb0      	pop	{r4, r5, r7, pc}

0801597c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	4618      	mov	r0, r3
 8015988:	370c      	adds	r7, #12
 801598a:	46bd      	mov	sp, r7
 801598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015990:	4770      	bx	lr

08015992 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015992:	b590      	push	{r4, r7, lr}
 8015994:	b085      	sub	sp, #20
 8015996:	af00      	add	r7, sp, #0
 8015998:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801599a:	f107 030c 	add.w	r3, r7, #12
 801599e:	4618      	mov	r0, r3
 80159a0:	f7ff ffec 	bl	801597c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80159a4:	4604      	mov	r4, r0
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f7fd f9f2 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80159ac:	4603      	mov	r3, r0
 80159ae:	6023      	str	r3, [r4, #0]
    return retval;
 80159b0:	68fb      	ldr	r3, [r7, #12]
  }
 80159b2:	4618      	mov	r0, r3
 80159b4:	3714      	adds	r7, #20
 80159b6:	46bd      	mov	sp, r7
 80159b8:	bd90      	pop	{r4, r7, pc}

080159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 80159ba:	b480      	push	{r7}
 80159bc:	b083      	sub	sp, #12
 80159be:	af00      	add	r7, sp, #0
 80159c0:	6078      	str	r0, [r7, #4]
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	4618      	mov	r0, r3
 80159c6:	370c      	adds	r7, #12
 80159c8:	46bd      	mov	sp, r7
 80159ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ce:	4770      	bx	lr

080159d0 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80159d0:	b580      	push	{r7, lr}
 80159d2:	b084      	sub	sp, #16
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80159d8:	f107 030c 	add.w	r3, r7, #12
 80159dc:	4618      	mov	r0, r3
 80159de:	f7ff ffcd 	bl	801597c <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80159e2:	4602      	mov	r2, r0
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	6013      	str	r3, [r2, #0]
    return retval;
 80159e8:	68fb      	ldr	r3, [r7, #12]
  }
 80159ea:	4618      	mov	r0, r3
 80159ec:	3710      	adds	r7, #16
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}

080159f2 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 80159f2:	b580      	push	{r7, lr}
 80159f4:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 80159f6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80159fa:	f000 f803 	bl	8015a04 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 80159fe:	4603      	mov	r3, r0
  }
 8015a00:	4618      	mov	r0, r3
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015a04:	b590      	push	{r4, r7, lr}
 8015a06:	b085      	sub	sp, #20
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015a0c:	f107 030c 	add.w	r3, r7, #12
 8015a10:	4618      	mov	r0, r3
 8015a12:	f7ff ffd2 	bl	80159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015a16:	4604      	mov	r4, r0
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f7fd f9b9 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	6023      	str	r3, [r4, #0]
    return retval;
 8015a22:	68fb      	ldr	r3, [r7, #12]
  }
 8015a24:	4618      	mov	r0, r3
 8015a26:	3714      	adds	r7, #20
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd90      	pop	{r4, r7, pc}

08015a2c <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8015a2c:	b590      	push	{r4, r7, lr}
 8015a2e:	b083      	sub	sp, #12
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	6078      	str	r0, [r7, #4]
 8015a34:	6039      	str	r1, [r7, #0]
 8015a36:	1d3b      	adds	r3, r7, #4
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7ff ffbe 	bl	80159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015a3e:	4603      	mov	r3, r0
 8015a40:	681c      	ldr	r4, [r3, #0]
 8015a42:	463b      	mov	r3, r7
 8015a44:	4618      	mov	r0, r3
 8015a46:	f7ff ffb8 	bl	80159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015a4a:	4603      	mov	r3, r0
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	4619      	mov	r1, r3
 8015a50:	4620      	mov	r0, r4
 8015a52:	f7fe f9f1 	bl	8013e38 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8015a56:	4603      	mov	r3, r0
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7ff fdfe 	bl	801565a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	4618      	mov	r0, r3
 8015a62:	370c      	adds	r7, #12
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd90      	pop	{r4, r7, pc}

08015a68 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8015a68:	b590      	push	{r4, r7, lr}
 8015a6a:	b083      	sub	sp, #12
 8015a6c:	af00      	add	r7, sp, #0
 8015a6e:	6078      	str	r0, [r7, #4]
 8015a70:	6039      	str	r1, [r7, #0]
 8015a72:	1d3b      	adds	r3, r7, #4
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7ff ffa0 	bl	80159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	681c      	ldr	r4, [r3, #0]
 8015a7e:	463b      	mov	r3, r7
 8015a80:	4618      	mov	r0, r3
 8015a82:	f7ff ff9a 	bl	80159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015a86:	4603      	mov	r3, r0
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	4619      	mov	r1, r3
 8015a8c:	4620      	mov	r0, r4
 8015a8e:	f7fd f98a 	bl	8012da6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015a92:	4603      	mov	r3, r0
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7ff fde0 	bl	801565a <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	370c      	adds	r7, #12
 8015aa0:	46bd      	mov	sp, r7
 8015aa2:	bd90      	pop	{r4, r7, pc}

08015aa4 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015aa4:	b5b0      	push	{r4, r5, r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015aac:	1d3b      	adds	r3, r7, #4
 8015aae:	4618      	mov	r0, r3
 8015ab0:	f7ff ff83 	bl	80159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015ab4:	4603      	mov	r3, r0
 8015ab6:	681d      	ldr	r5, [r3, #0]
 8015ab8:	f107 030c 	add.w	r3, r7, #12
 8015abc:	4618      	mov	r0, r3
 8015abe:	f7fe f983 	bl	8013dc8 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015ac2:	4604      	mov	r4, r0
 8015ac4:	4628      	mov	r0, r5
 8015ac6:	f000 f825 	bl	8015b14 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8015aca:	4603      	mov	r3, r0
 8015acc:	6023      	str	r3, [r4, #0]
  return result;
 8015ace:	68fb      	ldr	r3, [r7, #12]
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bdb0      	pop	{r4, r5, r7, pc}

08015ad8 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	1d3b      	adds	r3, r7, #4
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7ff ff69 	bl	80159ba <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7fe fc72 	bl	80143d6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 8015af2:	4603      	mov	r3, r0
 8015af4:	4618      	mov	r0, r3
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}

08015afc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f000 f811 	bl	8015b2c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 8015b0a:	4603      	mov	r3, r0
}
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	3708      	adds	r7, #8
 8015b10:	46bd      	mov	sp, r7
 8015b12:	bd80      	pop	{r7, pc}

08015b14 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8015b14:	b580      	push	{r7, lr}
 8015b16:	b082      	sub	sp, #8
 8015b18:	af00      	add	r7, sp, #0
 8015b1a:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f000 f813 	bl	8015b48 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 8015b22:	4603      	mov	r3, r0
}
 8015b24:	4618      	mov	r0, r3
 8015b26:	3708      	adds	r7, #8
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd80      	pop	{r7, pc}

08015b2c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b082      	sub	sp, #8
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8015b34:	210c      	movs	r1, #12
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f7fd f876 	bl	8012c28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015b3c:	4603      	mov	r3, r0
  }
 8015b3e:	4618      	mov	r0, r3
 8015b40:	3708      	adds	r7, #8
 8015b42:	46bd      	mov	sp, r7
 8015b44:	bd80      	pop	{r7, pc}
	...

08015b48 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b08a      	sub	sp, #40	; 0x28
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8015b50:	f7fc ffb7 	bl	8012ac2 <_ZNSt14numeric_limitsIlE3minEv>
 8015b54:	4603      	mov	r3, r0
    const IntegerType min =
 8015b56:	4618      	mov	r0, r3
 8015b58:	f7fd f91a 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015b5c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8015b5e:	f7f8 febf 	bl	800e8e0 <_ZNSt14numeric_limitsIlE3maxEv>
 8015b62:	4603      	mov	r3, r0
    const IntegerType max =
 8015b64:	4618      	mov	r0, r3
 8015b66:	f7fd f913 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015b6a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8015b6c:	2320      	movs	r3, #32
 8015b6e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8015b70:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8015b74:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8015b76:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 8015b7a:	f7fd f909 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015b7e:	4603      	mov	r3, r0
    const IntegerType positive_mask =
 8015b80:	4619      	mov	r1, r3
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f7fd f94e 	bl	8012e24 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8015b88:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8015b8a:	480f      	ldr	r0, [pc, #60]	; (8015bc8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8015b8c:	f7fd f900 	bl	8012d90 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015b90:	4603      	mov	r3, r0
    const IntegerType negative_mask =
 8015b92:	4619      	mov	r1, r3
 8015b94:	6878      	ldr	r0, [r7, #4]
 8015b96:	f7fd f923 	bl	8012de0 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8015b9a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8015b9c:	2105      	movs	r1, #5
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f7fe f965 	bl	8013e6e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8015ba4:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8015ba6:	68fa      	ldr	r2, [r7, #12]
 8015ba8:	6a39      	ldr	r1, [r7, #32]
 8015baa:	6978      	ldr	r0, [r7, #20]
 8015bac:	f7fe f9a2 	bl	8013ef4 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015bb0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8015bb2:	68fa      	ldr	r2, [r7, #12]
 8015bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015bb6:	6938      	ldr	r0, [r7, #16]
 8015bb8:	f7fe f99c 	bl	8013ef4 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8015bbc:	60f8      	str	r0, [r7, #12]
    return result;
 8015bbe:	68fb      	ldr	r3, [r7, #12]
  }
 8015bc0:	4618      	mov	r0, r3
 8015bc2:	3728      	adds	r7, #40	; 0x28
 8015bc4:	46bd      	mov	sp, r7
 8015bc6:	bd80      	pop	{r7, pc}
 8015bc8:	fc000001 	.word	0xfc000001

08015bcc <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 8015bcc:	b480      	push	{r7}
 8015bce:	b083      	sub	sp, #12
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	4a04      	ldr	r2, [pc, #16]	; (8015be8 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	601a      	str	r2, [r3, #0]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	4618      	mov	r0, r3
 8015bde:	370c      	adds	r7, #12
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr
 8015be8:	0803e5c4 	.word	0x0803e5c4

08015bec <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 8015bec:	b480      	push	{r7}
 8015bee:	b083      	sub	sp, #12
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
 8015bf4:	4a04      	ldr	r2, [pc, #16]	; (8015c08 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	601a      	str	r2, [r3, #0]
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr
 8015c08:	0803e5c4 	.word	0x0803e5c4

08015c0c <_ZN6tflite13MemoryPlannerD0Ev>:
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b082      	sub	sp, #8
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f7ff ffe9 	bl	8015bec <_ZN6tflite13MemoryPlannerD1Ev>
 8015c1a:	2104      	movs	r1, #4
 8015c1c:	6878      	ldr	r0, [r7, #4]
 8015c1e:	f000 fbb4 	bl	801638a <_ZdlPvj>
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	4618      	mov	r0, r3
 8015c26:	3708      	adds	r7, #8
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}

08015c2c <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 8015c2c:	b480      	push	{r7}
 8015c2e:	b083      	sub	sp, #12
 8015c30:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 8015c32:	2328      	movs	r3, #40	; 0x28
 8015c34:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 8015c36:	2328      	movs	r3, #40	; 0x28
  }
 8015c38:	4618      	mov	r0, r3
 8015c3a:	370c      	adds	r7, #12
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c42:	4770      	bx	lr

08015c44 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 8015c44:	b480      	push	{r7}
 8015c46:	b089      	sub	sp, #36	; 0x24
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	60f8      	str	r0, [r7, #12]
 8015c4c:	60b9      	str	r1, [r7, #8]
 8015c4e:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 8015c50:	2300      	movs	r3, #0
 8015c52:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8015c54:	2301      	movs	r3, #1
 8015c56:	61bb      	str	r3, [r7, #24]
 8015c58:	69ba      	ldr	r2, [r7, #24]
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	da4c      	bge.n	8015cfa <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 8015c60:	69bb      	ldr	r3, [r7, #24]
 8015c62:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015c66:	3b01      	subs	r3, #1
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	68fa      	ldr	r2, [r7, #12]
 8015c6c:	4413      	add	r3, r2
 8015c6e:	681a      	ldr	r2, [r3, #0]
 8015c70:	69bb      	ldr	r3, [r7, #24]
 8015c72:	009b      	lsls	r3, r3, #2
 8015c74:	68f9      	ldr	r1, [r7, #12]
 8015c76:	440b      	add	r3, r1
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	da39      	bge.n	8015cf2 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 8015c7e:	69bb      	ldr	r3, [r7, #24]
 8015c80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015c84:	3b01      	subs	r3, #1
 8015c86:	009b      	lsls	r3, r3, #2
 8015c88:	68fa      	ldr	r2, [r7, #12]
 8015c8a:	4413      	add	r3, r2
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 8015c90:	69bb      	ldr	r3, [r7, #24]
 8015c92:	009b      	lsls	r3, r3, #2
 8015c94:	68fa      	ldr	r2, [r7, #12]
 8015c96:	441a      	add	r2, r3
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015c9e:	3b01      	subs	r3, #1
 8015ca0:	009b      	lsls	r3, r3, #2
 8015ca2:	68f9      	ldr	r1, [r7, #12]
 8015ca4:	440b      	add	r3, r1
 8015ca6:	6812      	ldr	r2, [r2, #0]
 8015ca8:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 8015caa:	69bb      	ldr	r3, [r7, #24]
 8015cac:	009b      	lsls	r3, r3, #2
 8015cae:	68fa      	ldr	r2, [r7, #12]
 8015cb0:	4413      	add	r3, r2
 8015cb2:	697a      	ldr	r2, [r7, #20]
 8015cb4:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 8015cb6:	69bb      	ldr	r3, [r7, #24]
 8015cb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015cbc:	3b01      	subs	r3, #1
 8015cbe:	009b      	lsls	r3, r3, #2
 8015cc0:	68ba      	ldr	r2, [r7, #8]
 8015cc2:	4413      	add	r3, r2
 8015cc4:	681b      	ldr	r3, [r3, #0]
 8015cc6:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 8015cc8:	69bb      	ldr	r3, [r7, #24]
 8015cca:	009b      	lsls	r3, r3, #2
 8015ccc:	68ba      	ldr	r2, [r7, #8]
 8015cce:	441a      	add	r2, r3
 8015cd0:	69bb      	ldr	r3, [r7, #24]
 8015cd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015cd6:	3b01      	subs	r3, #1
 8015cd8:	009b      	lsls	r3, r3, #2
 8015cda:	68b9      	ldr	r1, [r7, #8]
 8015cdc:	440b      	add	r3, r1
 8015cde:	6812      	ldr	r2, [r2, #0]
 8015ce0:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 8015ce2:	69bb      	ldr	r3, [r7, #24]
 8015ce4:	009b      	lsls	r3, r3, #2
 8015ce6:	68ba      	ldr	r2, [r7, #8]
 8015ce8:	4413      	add	r3, r2
 8015cea:	693a      	ldr	r2, [r7, #16]
 8015cec:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 8015cf2:	69bb      	ldr	r3, [r7, #24]
 8015cf4:	3301      	adds	r3, #1
 8015cf6:	61bb      	str	r3, [r7, #24]
 8015cf8:	e7ae      	b.n	8015c58 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 8015cfa:	7ffb      	ldrb	r3, [r7, #31]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d000      	beq.n	8015d02 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 8015d00:	e7a6      	b.n	8015c50 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 8015d02:	bf00      	nop
 8015d04:	3724      	adds	r7, #36	; 0x24
 8015d06:	46bd      	mov	sp, r7
 8015d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d0c:	4770      	bx	lr
	...

08015d10 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 8015d10:	b590      	push	{r4, r7, lr}
 8015d12:	b087      	sub	sp, #28
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	60f8      	str	r0, [r7, #12]
 8015d18:	60b9      	str	r1, [r7, #8]
 8015d1a:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7ff ff54 	bl	8015bcc <_ZN6tflite13MemoryPlannerC1Ev>
 8015d24:	4a22      	ldr	r2, [pc, #136]	; (8015db0 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	601a      	str	r2, [r3, #0]
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	609a      	str	r2, [r3, #8]
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	2201      	movs	r2, #1
 8015d34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 8015d38:	687c      	ldr	r4, [r7, #4]
 8015d3a:	f7ff ff77 	bl	8015c2c <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	fbb4 f3f3 	udiv	r3, r4, r3
 8015d44:	461a      	mov	r2, r3
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 8015d4a:	68bb      	ldr	r3, [r7, #8]
 8015d4c:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	697a      	ldr	r2, [r7, #20]
 8015d52:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 8015d54:	68fb      	ldr	r3, [r7, #12]
 8015d56:	685b      	ldr	r3, [r3, #4]
 8015d58:	011b      	lsls	r3, r3, #4
 8015d5a:	697a      	ldr	r2, [r7, #20]
 8015d5c:	4413      	add	r3, r2
 8015d5e:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	697a      	ldr	r2, [r7, #20]
 8015d64:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	009b      	lsls	r3, r3, #2
 8015d6c:	697a      	ldr	r2, [r7, #20]
 8015d6e:	4413      	add	r3, r2
 8015d70:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	697a      	ldr	r2, [r7, #20]
 8015d76:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 8015d78:	68fb      	ldr	r3, [r7, #12]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	009b      	lsls	r3, r3, #2
 8015d7e:	697a      	ldr	r2, [r7, #20]
 8015d80:	4413      	add	r3, r2
 8015d82:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	697a      	ldr	r2, [r7, #20]
 8015d88:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	461a      	mov	r2, r3
 8015d90:	4613      	mov	r3, r2
 8015d92:	005b      	lsls	r3, r3, #1
 8015d94:	4413      	add	r3, r2
 8015d96:	009b      	lsls	r3, r3, #2
 8015d98:	461a      	mov	r2, r3
 8015d9a:	697b      	ldr	r3, [r7, #20]
 8015d9c:	4413      	add	r3, r2
 8015d9e:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	697a      	ldr	r2, [r7, #20]
 8015da4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	4618      	mov	r0, r3
 8015daa:	371c      	adds	r7, #28
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd90      	pop	{r4, r7, pc}
 8015db0:	0803e5a4 	.word	0x0803e5a4

08015db4 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
 8015dbc:	4a05      	ldr	r2, [pc, #20]	; (8015dd4 <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	601a      	str	r2, [r3, #0]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7ff ff11 	bl	8015bec <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3708      	adds	r7, #8
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}
 8015dd4:	0803e5a4 	.word	0x0803e5a4

08015dd8 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 8015dd8:	b580      	push	{r7, lr}
 8015dda:	b082      	sub	sp, #8
 8015ddc:	af00      	add	r7, sp, #0
 8015dde:	6078      	str	r0, [r7, #4]
}
 8015de0:	6878      	ldr	r0, [r7, #4]
 8015de2:	f7ff ffe7 	bl	8015db4 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 8015de6:	212c      	movs	r1, #44	; 0x2c
 8015de8:	6878      	ldr	r0, [r7, #4]
 8015dea:	f000 face 	bl	801638a <_ZdlPvj>
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	4618      	mov	r0, r3
 8015df2:	3708      	adds	r7, #8
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}

08015df8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b086      	sub	sp, #24
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	60f8      	str	r0, [r7, #12]
 8015e00:	60b9      	str	r1, [r7, #8]
 8015e02:	607a      	str	r2, [r7, #4]
 8015e04:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	689a      	ldr	r2, [r3, #8]
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	db08      	blt.n	8015e24 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 8015e12:	68fb      	ldr	r3, [r7, #12]
 8015e14:	685b      	ldr	r3, [r3, #4]
 8015e16:	461a      	mov	r2, r3
 8015e18:	4913      	ldr	r1, [pc, #76]	; (8015e68 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 8015e1a:	68b8      	ldr	r0, [r7, #8]
 8015e1c:	f7f7 fba6 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 8015e20:	2301      	movs	r3, #1
 8015e22:	e01d      	b.n	8015e60 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	68da      	ldr	r2, [r3, #12]
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	689b      	ldr	r3, [r3, #8]
 8015e2c:	011b      	lsls	r3, r3, #4
 8015e2e:	4413      	add	r3, r2
 8015e30:	617b      	str	r3, [r7, #20]
  current->size = size;
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	687a      	ldr	r2, [r7, #4]
 8015e36:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	683a      	ldr	r2, [r7, #0]
 8015e3c:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	6a3a      	ldr	r2, [r7, #32]
 8015e42:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	f04f 32ff 	mov.w	r2, #4294967295
 8015e4a:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	689b      	ldr	r3, [r3, #8]
 8015e50:	1c5a      	adds	r2, r3, #1
 8015e52:	68fb      	ldr	r3, [r7, #12]
 8015e54:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	2201      	movs	r2, #1
 8015e5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 8015e5e:	2300      	movs	r3, #0
}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3718      	adds	r7, #24
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}
 8015e68:	0801f4b0 	.word	0x0801f4b0

08015e6c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 8015e6c:	b590      	push	{r4, r7, lr}
 8015e6e:	b089      	sub	sp, #36	; 0x24
 8015e70:	af02      	add	r7, sp, #8
 8015e72:	60f8      	str	r0, [r7, #12]
 8015e74:	60b9      	str	r1, [r7, #8]
 8015e76:	607a      	str	r2, [r7, #4]
 8015e78:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	68da      	ldr	r2, [r3, #12]
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	689b      	ldr	r3, [r3, #8]
 8015e82:	011b      	lsls	r3, r3, #4
 8015e84:	4413      	add	r3, r2
 8015e86:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	3308      	adds	r3, #8
 8015e8e:	681c      	ldr	r4, [r3, #0]
 8015e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e92:	9300      	str	r3, [sp, #0]
 8015e94:	683b      	ldr	r3, [r7, #0]
 8015e96:	687a      	ldr	r2, [r7, #4]
 8015e98:	68b9      	ldr	r1, [r7, #8]
 8015e9a:	68f8      	ldr	r0, [r7, #12]
 8015e9c:	47a0      	blx	r4
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	bf14      	ite	ne
 8015ea4:	2301      	movne	r3, #1
 8015ea6:	2300      	moveq	r3, #0
 8015ea8:	b2db      	uxtb	r3, r3
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d001      	beq.n	8015eb2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 8015eae:	2301      	movs	r3, #1
 8015eb0:	e003      	b.n	8015eba <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015eb6:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 8015eb8:	2300      	movs	r3, #0
}
 8015eba:	4618      	mov	r0, r3
 8015ebc:	371c      	adds	r7, #28
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd90      	pop	{r4, r7, pc}

08015ec2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 8015ec2:	b480      	push	{r7}
 8015ec4:	b087      	sub	sp, #28
 8015ec6:	af00      	add	r7, sp, #0
 8015ec8:	60f8      	str	r0, [r7, #12]
 8015eca:	60b9      	str	r1, [r7, #8]
 8015ecc:	607a      	str	r2, [r7, #4]
 8015ece:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	68da      	ldr	r2, [r3, #12]
 8015ed4:	68bb      	ldr	r3, [r7, #8]
 8015ed6:	685b      	ldr	r3, [r3, #4]
 8015ed8:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 8015eda:	4413      	add	r3, r2
 8015edc:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 8015ede:	697b      	ldr	r3, [r7, #20]
 8015ee0:	689b      	ldr	r3, [r3, #8]
 8015ee2:	683a      	ldr	r2, [r7, #0]
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	da01      	bge.n	8015eec <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	e007      	b.n	8015efc <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 8015eec:	697b      	ldr	r3, [r7, #20]
 8015eee:	68db      	ldr	r3, [r3, #12]
 8015ef0:	687a      	ldr	r2, [r7, #4]
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	dd01      	ble.n	8015efa <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 8015ef6:	2300      	movs	r3, #0
 8015ef8:	e000      	b.n	8015efc <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 8015efa:	2301      	movs	r3, #1
}
 8015efc:	4618      	mov	r0, r3
 8015efe:	371c      	adds	r7, #28
 8015f00:	46bd      	mov	sp, r7
 8015f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f06:	4770      	bx	lr

08015f08 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b086      	sub	sp, #24
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	60f8      	str	r0, [r7, #12]
 8015f10:	60b9      	str	r1, [r7, #8]
 8015f12:	607a      	str	r2, [r7, #4]
 8015f14:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 8015f16:	2300      	movs	r3, #0
 8015f18:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d10b      	bne.n	8015f38 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	699a      	ldr	r2, [r3, #24]
 8015f24:	68fb      	ldr	r3, [r7, #12]
 8015f26:	6a1b      	ldr	r3, [r3, #32]
 8015f28:	4619      	mov	r1, r3
 8015f2a:	460b      	mov	r3, r1
 8015f2c:	005b      	lsls	r3, r3, #1
 8015f2e:	440b      	add	r3, r1
 8015f30:	009b      	lsls	r3, r3, #2
 8015f32:	4413      	add	r3, r2
 8015f34:	613b      	str	r3, [r7, #16]
 8015f36:	e011      	b.n	8015f5c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	689b      	ldr	r3, [r3, #8]
 8015f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f40:	d101      	bne.n	8015f46 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 8015f42:	2300      	movs	r3, #0
 8015f44:	e029      	b.n	8015f9a <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 8015f46:	68fb      	ldr	r3, [r7, #12]
 8015f48:	699a      	ldr	r2, [r3, #24]
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	689b      	ldr	r3, [r3, #8]
 8015f4e:	4619      	mov	r1, r3
 8015f50:	460b      	mov	r3, r1
 8015f52:	005b      	lsls	r3, r3, #1
 8015f54:	440b      	add	r3, r1
 8015f56:	009b      	lsls	r3, r3, #2
 8015f58:	4413      	add	r3, r2
 8015f5a:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	687a      	ldr	r2, [r7, #4]
 8015f60:	6939      	ldr	r1, [r7, #16]
 8015f62:	68f8      	ldr	r0, [r7, #12]
 8015f64:	f7ff ffad 	bl	8015ec2 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 8015f68:	4603      	mov	r3, r0
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d002      	beq.n	8015f74 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 8015f6e:	693b      	ldr	r3, [r7, #16]
 8015f70:	617b      	str	r3, [r7, #20]
      break;
 8015f72:	e011      	b.n	8015f98 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	689b      	ldr	r3, [r3, #8]
 8015f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f7c:	d00b      	beq.n	8015f96 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	699a      	ldr	r2, [r3, #24]
 8015f82:	693b      	ldr	r3, [r7, #16]
 8015f84:	689b      	ldr	r3, [r3, #8]
 8015f86:	4619      	mov	r1, r3
 8015f88:	460b      	mov	r3, r1
 8015f8a:	005b      	lsls	r3, r3, #1
 8015f8c:	440b      	add	r3, r1
 8015f8e:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 8015f90:	4413      	add	r3, r2
 8015f92:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 8015f94:	e7e2      	b.n	8015f5c <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 8015f96:	bf00      	nop
  } while (true);
  return result;
 8015f98:	697b      	ldr	r3, [r7, #20]
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	3718      	adds	r7, #24
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}

08015fa2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 8015fa2:	b580      	push	{r7, lr}
 8015fa4:	b098      	sub	sp, #96	; 0x60
 8015fa6:	af00      	add	r7, sp, #0
 8015fa8:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015fb0:	f083 0301 	eor.w	r3, r3, #1
 8015fb4:	b2db      	uxtb	r3, r3
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	f040 815f 	bne.w	801627a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	689b      	ldr	r3, [r3, #8]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	f000 815a 	beq.w	801627a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	689b      	ldr	r3, [r3, #8]
 8015fd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 8015fd8:	2300      	movs	r3, #0
 8015fda:	657b      	str	r3, [r7, #84]	; 0x54
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	689b      	ldr	r3, [r3, #8]
 8015fe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	da4d      	bge.n	8016082 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	68da      	ldr	r2, [r3, #12]
 8015fea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015fec:	011b      	lsls	r3, r3, #4
 8015fee:	4413      	add	r3, r2
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ff6:	d11e      	bne.n	8016036 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 8015ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ffa:	3b01      	subs	r3, #1
 8015ffc:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	68da      	ldr	r2, [r3, #12]
 8016002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016004:	011b      	lsls	r3, r3, #4
 8016006:	441a      	add	r2, r3
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	6919      	ldr	r1, [r3, #16]
 801600c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801600e:	009b      	lsls	r3, r3, #2
 8016010:	440b      	add	r3, r1
 8016012:	6812      	ldr	r2, [r2, #0]
 8016014:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	695a      	ldr	r2, [r3, #20]
 801601a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801601c:	009b      	lsls	r3, r3, #2
 801601e:	4413      	add	r3, r2
 8016020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016022:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801602a:	009b      	lsls	r3, r3, #2
 801602c:	4413      	add	r3, r2
 801602e:	f04f 32ff 	mov.w	r2, #4294967295
 8016032:	601a      	str	r2, [r3, #0]
 8016034:	e021      	b.n	801607a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	68da      	ldr	r2, [r3, #12]
 801603a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801603c:	011b      	lsls	r3, r3, #4
 801603e:	441a      	add	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6919      	ldr	r1, [r3, #16]
 8016044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016046:	009b      	lsls	r3, r3, #2
 8016048:	440b      	add	r3, r1
 801604a:	6812      	ldr	r2, [r2, #0]
 801604c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	695a      	ldr	r2, [r3, #20]
 8016052:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016054:	009b      	lsls	r3, r3, #2
 8016056:	4413      	add	r3, r2
 8016058:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801605a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	68da      	ldr	r2, [r3, #12]
 8016060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016062:	011b      	lsls	r3, r3, #4
 8016064:	441a      	add	r2, r3
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801606a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801606c:	009b      	lsls	r3, r3, #2
 801606e:	440b      	add	r3, r1
 8016070:	6852      	ldr	r2, [r2, #4]
 8016072:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 8016074:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016076:	3301      	adds	r3, #1
 8016078:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 801607a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801607c:	3301      	adds	r3, #1
 801607e:	657b      	str	r3, [r7, #84]	; 0x54
 8016080:	e7ac      	b.n	8015fdc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	691a      	ldr	r2, [r3, #16]
 8016086:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016088:	009b      	lsls	r3, r3, #2
 801608a:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	695a      	ldr	r2, [r3, #20]
 8016090:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016092:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 8016094:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 801609a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801609c:	1ad3      	subs	r3, r2, r3
 801609e:	461a      	mov	r2, r3
 80160a0:	f7ff fdd0 	bl	8015c44 <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	2200      	movs	r2, #0
 80160a8:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2201      	movs	r2, #1
 80160ae:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	699a      	ldr	r2, [r3, #24]
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	6a1b      	ldr	r3, [r3, #32]
 80160b8:	4619      	mov	r1, r3
 80160ba:	460b      	mov	r3, r1
 80160bc:	005b      	lsls	r3, r3, #1
 80160be:	440b      	add	r3, r1
 80160c0:	009b      	lsls	r3, r3, #2
 80160c2:	4413      	add	r3, r2
 80160c4:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 80160c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160c8:	f04f 32ff 	mov.w	r2, #4294967295
 80160cc:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	695b      	ldr	r3, [r3, #20]
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 80160d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80160da:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	68da      	ldr	r2, [r3, #12]
 80160e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160e2:	011b      	lsls	r3, r3, #4
 80160e4:	4413      	add	r3, r2
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160ec:	d106      	bne.n	80160fc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80160f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80160f4:	009b      	lsls	r3, r3, #2
 80160f6:	4413      	add	r3, r2
 80160f8:	2200      	movs	r2, #0
 80160fa:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016102:	009b      	lsls	r3, r3, #2
 8016104:	4413      	add	r3, r2
 8016106:	681a      	ldr	r2, [r3, #0]
 8016108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801610a:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 801610c:	2301      	movs	r3, #1
 801610e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	689b      	ldr	r3, [r3, #8]
 8016114:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016116:	429a      	cmp	r2, r3
 8016118:	f280 80b0 	bge.w	801627c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	695a      	ldr	r2, [r3, #20]
 8016120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016122:	009b      	lsls	r3, r3, #2
 8016124:	4413      	add	r3, r2
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	68da      	ldr	r2, [r3, #12]
 801612e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016130:	011b      	lsls	r3, r3, #4
 8016132:	4413      	add	r3, r2
 8016134:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 8016136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 801613c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801613e:	689b      	ldr	r3, [r3, #8]
 8016140:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 8016142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016144:	68db      	ldr	r3, [r3, #12]
 8016146:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 8016148:	2300      	movs	r3, #0
 801614a:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 801614c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801614e:	685b      	ldr	r3, [r3, #4]
 8016150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016154:	d12d      	bne.n	80161b2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 8016156:	2300      	movs	r3, #0
 8016158:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
            prior_entry, wanted_first_time_used, wanted_last_time_used);
 801615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801615c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801615e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f7ff fed1 	bl	8015f08 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 8016166:	62b8      	str	r0, [r7, #40]	; 0x28

        if (prior_entry) {
 8016168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801616a:	2b00      	cmp	r3, #0
 801616c:	d012      	beq.n	8016194 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	68da      	ldr	r2, [r3, #12]
 8016172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016174:	685b      	ldr	r3, [r3, #4]
 8016176:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 8016178:	4413      	add	r3, r2
 801617a:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 801617c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801617e:	681a      	ldr	r2, [r3, #0]
 8016180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016182:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 8016184:	4413      	add	r3, r2
 8016186:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 8016188:	6a3a      	ldr	r2, [r7, #32]
 801618a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801618c:	429a      	cmp	r2, r3
 801618e:	dd01      	ble.n	8016194 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 8016190:	6a3b      	ldr	r3, [r7, #32]
 8016192:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 8016194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016196:	2b00      	cmp	r3, #0
 8016198:	d00f      	beq.n	80161ba <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 801619a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801619c:	681a      	ldr	r2, [r3, #0]
 801619e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80161a0:	1ad3      	subs	r3, r2, r3
 80161a2:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 80161a4:	69fa      	ldr	r2, [r7, #28]
 80161a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161a8:	429a      	cmp	r2, r3
 80161aa:	da08      	bge.n	80161be <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 80161ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ae:	647b      	str	r3, [r7, #68]	; 0x44
      }
 80161b0:	e7d3      	b.n	801615a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 80161b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161b4:	685b      	ldr	r3, [r3, #4]
 80161b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80161b8:	e002      	b.n	80161c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 80161ba:	bf00      	nop
 80161bc:	e000      	b.n	80161c0 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 80161be:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80161c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80161c6:	009b      	lsls	r3, r3, #2
 80161c8:	4413      	add	r3, r2
 80161ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80161cc:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	699a      	ldr	r2, [r3, #24]
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	69db      	ldr	r3, [r3, #28]
 80161d6:	4619      	mov	r1, r3
 80161d8:	460b      	mov	r3, r1
 80161da:	005b      	lsls	r3, r3, #1
 80161dc:	440b      	add	r3, r1
 80161de:	009b      	lsls	r3, r3, #2
 80161e0:	4413      	add	r3, r2
 80161e2:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 80161e4:	69bb      	ldr	r3, [r7, #24]
 80161e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80161e8:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 80161ea:	69bb      	ldr	r3, [r7, #24]
 80161ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80161ee:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	69db      	ldr	r3, [r3, #28]
 80161f4:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	69db      	ldr	r3, [r3, #28]
 80161fa:	1c5a      	adds	r2, r3, #1
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 8016200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016206:	429a      	cmp	r2, r3
 8016208:	da09      	bge.n	801621e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 801620a:	69bb      	ldr	r3, [r7, #24]
 801620c:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	6a1a      	ldr	r2, [r3, #32]
 8016212:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016214:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	697a      	ldr	r2, [r7, #20]
 801621a:	621a      	str	r2, [r3, #32]
 801621c:	e029      	b.n	8016272 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 801621e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016220:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 8016222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016224:	689b      	ldr	r3, [r3, #8]
 8016226:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801622e:	d107      	bne.n	8016240 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 8016230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016232:	697a      	ldr	r2, [r7, #20]
 8016234:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 8016236:	69bb      	ldr	r3, [r7, #24]
 8016238:	f04f 32ff 	mov.w	r2, #4294967295
 801623c:	609a      	str	r2, [r3, #8]
          break;
 801623e:	e018      	b.n	8016272 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	6999      	ldr	r1, [r3, #24]
 8016244:	693a      	ldr	r2, [r7, #16]
 8016246:	4613      	mov	r3, r2
 8016248:	005b      	lsls	r3, r3, #1
 801624a:	4413      	add	r3, r2
 801624c:	009b      	lsls	r3, r3, #2
 801624e:	440b      	add	r3, r1
 8016250:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016258:	429a      	cmp	r2, r3
 801625a:	da07      	bge.n	801626c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 801625c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801625e:	689a      	ldr	r2, [r3, #8]
 8016260:	69bb      	ldr	r3, [r7, #24]
 8016262:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 8016264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016266:	697a      	ldr	r2, [r7, #20]
 8016268:	609a      	str	r2, [r3, #8]
          break;
 801626a:	e002      	b.n	8016272 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	643b      	str	r3, [r7, #64]	; 0x40
      }
 8016270:	e7d7      	b.n	8016222 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 8016272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016274:	3301      	adds	r3, #1
 8016276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016278:	e74a      	b.n	8016110 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 801627a:	bf00      	nop
    }
  }
}
 801627c:	3760      	adds	r7, #96	; 0x60
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}

08016282 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 8016282:	b580      	push	{r7, lr}
 8016284:	b086      	sub	sp, #24
 8016286:	af00      	add	r7, sp, #0
 8016288:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 801628a:	6878      	ldr	r0, [r7, #4]
 801628c:	f7ff fe89 	bl	8015fa2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	689b      	ldr	r3, [r3, #8]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d101      	bne.n	801629c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 8016298:	2300      	movs	r3, #0
 801629a:	e035      	b.n	8016308 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	699a      	ldr	r2, [r3, #24]
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	6a1b      	ldr	r3, [r3, #32]
 80162a4:	4619      	mov	r1, r3
 80162a6:	460b      	mov	r3, r1
 80162a8:	005b      	lsls	r3, r3, #1
 80162aa:	440b      	add	r3, r1
 80162ac:	009b      	lsls	r3, r3, #2
 80162ae:	4413      	add	r3, r2
 80162b0:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 80162b2:	2300      	movs	r3, #0
 80162b4:	613b      	str	r3, [r7, #16]
  while (entry) {
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d024      	beq.n	8016306 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	68da      	ldr	r2, [r3, #12]
 80162c0:	697b      	ldr	r3, [r7, #20]
 80162c2:	685b      	ldr	r3, [r3, #4]
 80162c4:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 80162c6:	4413      	add	r3, r2
 80162c8:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	681a      	ldr	r2, [r3, #0]
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	4413      	add	r3, r2
 80162d4:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 80162d6:	68ba      	ldr	r2, [r7, #8]
 80162d8:	693b      	ldr	r3, [r7, #16]
 80162da:	429a      	cmp	r2, r3
 80162dc:	d901      	bls.n	80162e2 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	689b      	ldr	r3, [r3, #8]
 80162e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162ea:	d00b      	beq.n	8016304 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	699a      	ldr	r2, [r3, #24]
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	689b      	ldr	r3, [r3, #8]
 80162f4:	4619      	mov	r1, r3
 80162f6:	460b      	mov	r3, r1
 80162f8:	005b      	lsls	r3, r3, #1
 80162fa:	440b      	add	r3, r1
 80162fc:	009b      	lsls	r3, r3, #2
 80162fe:	4413      	add	r3, r2
 8016300:	617b      	str	r3, [r7, #20]
  while (entry) {
 8016302:	e7d8      	b.n	80162b6 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 8016304:	bf00      	nop
  }
  return max_size;
 8016306:	693b      	ldr	r3, [r7, #16]
}
 8016308:	4618      	mov	r0, r3
 801630a:	3718      	adds	r7, #24
 801630c:	46bd      	mov	sp, r7
 801630e:	bd80      	pop	{r7, pc}

08016310 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 8016310:	b480      	push	{r7}
 8016312:	b083      	sub	sp, #12
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	689b      	ldr	r3, [r3, #8]
 801631c:	4618      	mov	r0, r3
 801631e:	370c      	adds	r7, #12
 8016320:	46bd      	mov	sp, r7
 8016322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016326:	4770      	bx	lr

08016328 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 8016328:	b580      	push	{r7, lr}
 801632a:	b084      	sub	sp, #16
 801632c:	af00      	add	r7, sp, #0
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	60b9      	str	r1, [r7, #8]
 8016332:	607a      	str	r2, [r7, #4]
 8016334:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 8016336:	68f8      	ldr	r0, [r7, #12]
 8016338:	f7ff fe33 	bl	8015fa2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	2b00      	cmp	r3, #0
 8016340:	db04      	blt.n	801634c <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	689b      	ldr	r3, [r3, #8]
 8016346:	687a      	ldr	r2, [r7, #4]
 8016348:	429a      	cmp	r2, r3
 801634a:	db08      	blt.n	801635e <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	689b      	ldr	r3, [r3, #8]
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	4909      	ldr	r1, [pc, #36]	; (8016378 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 8016354:	68b8      	ldr	r0, [r7, #8]
 8016356:	f7f7 f909 	bl	800d56c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 801635a:	2301      	movs	r3, #1
 801635c:	e008      	b.n	8016370 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	009b      	lsls	r3, r3, #2
 8016366:	4413      	add	r3, r2
 8016368:	681a      	ldr	r2, [r3, #0]
 801636a:	683b      	ldr	r3, [r7, #0]
 801636c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 801636e:	2300      	movs	r3, #0
}
 8016370:	4618      	mov	r0, r3
 8016372:	3710      	adds	r7, #16
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	0801f540 	.word	0x0801f540

0801637c <_ZdaPv>:
 801637c:	f000 b820 	b.w	80163c0 <_ZdlPv>

08016380 <__cxa_pure_virtual>:
 8016380:	b508      	push	{r3, lr}
 8016382:	f000 f82b 	bl	80163dc <_ZSt9terminatev>

08016386 <_Znaj>:
 8016386:	f000 b802 	b.w	801638e <_Znwj>

0801638a <_ZdlPvj>:
 801638a:	f000 b819 	b.w	80163c0 <_ZdlPv>

0801638e <_Znwj>:
 801638e:	b510      	push	{r4, lr}
 8016390:	2800      	cmp	r0, #0
 8016392:	bf14      	ite	ne
 8016394:	4604      	movne	r4, r0
 8016396:	2401      	moveq	r4, #1
 8016398:	4620      	mov	r0, r4
 801639a:	f002 ff8f 	bl	80192bc <malloc>
 801639e:	b930      	cbnz	r0, 80163ae <_Znwj+0x20>
 80163a0:	f000 f806 	bl	80163b0 <_ZSt15get_new_handlerv>
 80163a4:	b908      	cbnz	r0, 80163aa <_Znwj+0x1c>
 80163a6:	f002 fea6 	bl	80190f6 <abort>
 80163aa:	4780      	blx	r0
 80163ac:	e7f4      	b.n	8016398 <_Znwj+0xa>
 80163ae:	bd10      	pop	{r4, pc}

080163b0 <_ZSt15get_new_handlerv>:
 80163b0:	4b02      	ldr	r3, [pc, #8]	; (80163bc <_ZSt15get_new_handlerv+0xc>)
 80163b2:	6818      	ldr	r0, [r3, #0]
 80163b4:	f3bf 8f5b 	dmb	ish
 80163b8:	4770      	bx	lr
 80163ba:	bf00      	nop
 80163bc:	20000938 	.word	0x20000938

080163c0 <_ZdlPv>:
 80163c0:	f002 bf84 	b.w	80192cc <free>

080163c4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80163c4:	b508      	push	{r3, lr}
 80163c6:	4780      	blx	r0
 80163c8:	f002 fe95 	bl	80190f6 <abort>

080163cc <_ZSt13get_terminatev>:
 80163cc:	4b02      	ldr	r3, [pc, #8]	; (80163d8 <_ZSt13get_terminatev+0xc>)
 80163ce:	6818      	ldr	r0, [r3, #0]
 80163d0:	f3bf 8f5b 	dmb	ish
 80163d4:	4770      	bx	lr
 80163d6:	bf00      	nop
 80163d8:	20000694 	.word	0x20000694

080163dc <_ZSt9terminatev>:
 80163dc:	b508      	push	{r3, lr}
 80163de:	f7ff fff5 	bl	80163cc <_ZSt13get_terminatev>
 80163e2:	f7ff ffef 	bl	80163c4 <_ZN10__cxxabiv111__terminateEPFvvE>

080163e6 <_ZSt17__throw_bad_allocv>:
 80163e6:	b508      	push	{r3, lr}
 80163e8:	f002 fe85 	bl	80190f6 <abort>

080163ec <_ZSt20__throw_length_errorPKc>:
 80163ec:	b508      	push	{r3, lr}
 80163ee:	f002 fe82 	bl	80190f6 <abort>
 80163f2:	0000      	movs	r0, r0
 80163f4:	0000      	movs	r0, r0
	...

080163f8 <cos>:
 80163f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80163fa:	ec51 0b10 	vmov	r0, r1, d0
 80163fe:	4a1e      	ldr	r2, [pc, #120]	; (8016478 <cos+0x80>)
 8016400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016404:	4293      	cmp	r3, r2
 8016406:	dc06      	bgt.n	8016416 <cos+0x1e>
 8016408:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8016470 <cos+0x78>
 801640c:	f001 feb4 	bl	8018178 <__kernel_cos>
 8016410:	ec51 0b10 	vmov	r0, r1, d0
 8016414:	e007      	b.n	8016426 <cos+0x2e>
 8016416:	4a19      	ldr	r2, [pc, #100]	; (801647c <cos+0x84>)
 8016418:	4293      	cmp	r3, r2
 801641a:	dd09      	ble.n	8016430 <cos+0x38>
 801641c:	ee10 2a10 	vmov	r2, s0
 8016420:	460b      	mov	r3, r1
 8016422:	f7e9 ff49 	bl	80002b8 <__aeabi_dsub>
 8016426:	ec41 0b10 	vmov	d0, r0, r1
 801642a:	b005      	add	sp, #20
 801642c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016430:	4668      	mov	r0, sp
 8016432:	f001 f9e1 	bl	80177f8 <__ieee754_rem_pio2>
 8016436:	f000 0003 	and.w	r0, r0, #3
 801643a:	2801      	cmp	r0, #1
 801643c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016440:	ed9d 0b00 	vldr	d0, [sp]
 8016444:	d007      	beq.n	8016456 <cos+0x5e>
 8016446:	2802      	cmp	r0, #2
 8016448:	d00e      	beq.n	8016468 <cos+0x70>
 801644a:	2800      	cmp	r0, #0
 801644c:	d0de      	beq.n	801640c <cos+0x14>
 801644e:	2001      	movs	r0, #1
 8016450:	f002 fa9a 	bl	8018988 <__kernel_sin>
 8016454:	e7dc      	b.n	8016410 <cos+0x18>
 8016456:	f002 fa97 	bl	8018988 <__kernel_sin>
 801645a:	ec53 2b10 	vmov	r2, r3, d0
 801645e:	ee10 0a10 	vmov	r0, s0
 8016462:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016466:	e7de      	b.n	8016426 <cos+0x2e>
 8016468:	f001 fe86 	bl	8018178 <__kernel_cos>
 801646c:	e7f5      	b.n	801645a <cos+0x62>
 801646e:	bf00      	nop
	...
 8016478:	3fe921fb 	.word	0x3fe921fb
 801647c:	7fefffff 	.word	0x7fefffff

08016480 <floor>:
 8016480:	ec51 0b10 	vmov	r0, r1, d0
 8016484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016488:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801648c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016490:	2e13      	cmp	r6, #19
 8016492:	460c      	mov	r4, r1
 8016494:	ee10 5a10 	vmov	r5, s0
 8016498:	4680      	mov	r8, r0
 801649a:	dc34      	bgt.n	8016506 <floor+0x86>
 801649c:	2e00      	cmp	r6, #0
 801649e:	da16      	bge.n	80164ce <floor+0x4e>
 80164a0:	a335      	add	r3, pc, #212	; (adr r3, 8016578 <floor+0xf8>)
 80164a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a6:	f7e9 ff09 	bl	80002bc <__adddf3>
 80164aa:	2200      	movs	r2, #0
 80164ac:	2300      	movs	r3, #0
 80164ae:	f7ea fb4b 	bl	8000b48 <__aeabi_dcmpgt>
 80164b2:	b148      	cbz	r0, 80164c8 <floor+0x48>
 80164b4:	2c00      	cmp	r4, #0
 80164b6:	da59      	bge.n	801656c <floor+0xec>
 80164b8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80164bc:	4a30      	ldr	r2, [pc, #192]	; (8016580 <floor+0x100>)
 80164be:	432b      	orrs	r3, r5
 80164c0:	2500      	movs	r5, #0
 80164c2:	42ab      	cmp	r3, r5
 80164c4:	bf18      	it	ne
 80164c6:	4614      	movne	r4, r2
 80164c8:	4621      	mov	r1, r4
 80164ca:	4628      	mov	r0, r5
 80164cc:	e025      	b.n	801651a <floor+0x9a>
 80164ce:	4f2d      	ldr	r7, [pc, #180]	; (8016584 <floor+0x104>)
 80164d0:	4137      	asrs	r7, r6
 80164d2:	ea01 0307 	and.w	r3, r1, r7
 80164d6:	4303      	orrs	r3, r0
 80164d8:	d01f      	beq.n	801651a <floor+0x9a>
 80164da:	a327      	add	r3, pc, #156	; (adr r3, 8016578 <floor+0xf8>)
 80164dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164e0:	f7e9 feec 	bl	80002bc <__adddf3>
 80164e4:	2200      	movs	r2, #0
 80164e6:	2300      	movs	r3, #0
 80164e8:	f7ea fb2e 	bl	8000b48 <__aeabi_dcmpgt>
 80164ec:	2800      	cmp	r0, #0
 80164ee:	d0eb      	beq.n	80164c8 <floor+0x48>
 80164f0:	2c00      	cmp	r4, #0
 80164f2:	bfbe      	ittt	lt
 80164f4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80164f8:	fa43 f606 	asrlt.w	r6, r3, r6
 80164fc:	19a4      	addlt	r4, r4, r6
 80164fe:	ea24 0407 	bic.w	r4, r4, r7
 8016502:	2500      	movs	r5, #0
 8016504:	e7e0      	b.n	80164c8 <floor+0x48>
 8016506:	2e33      	cmp	r6, #51	; 0x33
 8016508:	dd0b      	ble.n	8016522 <floor+0xa2>
 801650a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801650e:	d104      	bne.n	801651a <floor+0x9a>
 8016510:	ee10 2a10 	vmov	r2, s0
 8016514:	460b      	mov	r3, r1
 8016516:	f7e9 fed1 	bl	80002bc <__adddf3>
 801651a:	ec41 0b10 	vmov	d0, r0, r1
 801651e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016522:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8016526:	f04f 33ff 	mov.w	r3, #4294967295
 801652a:	fa23 f707 	lsr.w	r7, r3, r7
 801652e:	4207      	tst	r7, r0
 8016530:	d0f3      	beq.n	801651a <floor+0x9a>
 8016532:	a311      	add	r3, pc, #68	; (adr r3, 8016578 <floor+0xf8>)
 8016534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016538:	f7e9 fec0 	bl	80002bc <__adddf3>
 801653c:	2200      	movs	r2, #0
 801653e:	2300      	movs	r3, #0
 8016540:	f7ea fb02 	bl	8000b48 <__aeabi_dcmpgt>
 8016544:	2800      	cmp	r0, #0
 8016546:	d0bf      	beq.n	80164c8 <floor+0x48>
 8016548:	2c00      	cmp	r4, #0
 801654a:	da02      	bge.n	8016552 <floor+0xd2>
 801654c:	2e14      	cmp	r6, #20
 801654e:	d103      	bne.n	8016558 <floor+0xd8>
 8016550:	3401      	adds	r4, #1
 8016552:	ea25 0507 	bic.w	r5, r5, r7
 8016556:	e7b7      	b.n	80164c8 <floor+0x48>
 8016558:	2301      	movs	r3, #1
 801655a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801655e:	fa03 f606 	lsl.w	r6, r3, r6
 8016562:	4435      	add	r5, r6
 8016564:	4545      	cmp	r5, r8
 8016566:	bf38      	it	cc
 8016568:	18e4      	addcc	r4, r4, r3
 801656a:	e7f2      	b.n	8016552 <floor+0xd2>
 801656c:	2500      	movs	r5, #0
 801656e:	462c      	mov	r4, r5
 8016570:	e7aa      	b.n	80164c8 <floor+0x48>
 8016572:	bf00      	nop
 8016574:	f3af 8000 	nop.w
 8016578:	8800759c 	.word	0x8800759c
 801657c:	7e37e43c 	.word	0x7e37e43c
 8016580:	bff00000 	.word	0xbff00000
 8016584:	000fffff 	.word	0x000fffff

08016588 <frexp>:
 8016588:	b570      	push	{r4, r5, r6, lr}
 801658a:	2100      	movs	r1, #0
 801658c:	ec55 4b10 	vmov	r4, r5, d0
 8016590:	6001      	str	r1, [r0, #0]
 8016592:	4916      	ldr	r1, [pc, #88]	; (80165ec <frexp+0x64>)
 8016594:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016598:	428b      	cmp	r3, r1
 801659a:	4606      	mov	r6, r0
 801659c:	462a      	mov	r2, r5
 801659e:	dc22      	bgt.n	80165e6 <frexp+0x5e>
 80165a0:	ee10 1a10 	vmov	r1, s0
 80165a4:	4319      	orrs	r1, r3
 80165a6:	d01e      	beq.n	80165e6 <frexp+0x5e>
 80165a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80165ac:	da0d      	bge.n	80165ca <frexp+0x42>
 80165ae:	2200      	movs	r2, #0
 80165b0:	4b0f      	ldr	r3, [pc, #60]	; (80165f0 <frexp+0x68>)
 80165b2:	ee10 0a10 	vmov	r0, s0
 80165b6:	4629      	mov	r1, r5
 80165b8:	f7ea f836 	bl	8000628 <__aeabi_dmul>
 80165bc:	460a      	mov	r2, r1
 80165be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80165c2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80165c6:	4604      	mov	r4, r0
 80165c8:	6031      	str	r1, [r6, #0]
 80165ca:	6831      	ldr	r1, [r6, #0]
 80165cc:	151b      	asrs	r3, r3, #20
 80165ce:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80165d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80165d6:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80165da:	440b      	add	r3, r1
 80165dc:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 80165e0:	6033      	str	r3, [r6, #0]
 80165e2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80165e6:	ec45 4b10 	vmov	d0, r4, r5
 80165ea:	bd70      	pop	{r4, r5, r6, pc}
 80165ec:	7fefffff 	.word	0x7fefffff
 80165f0:	43500000 	.word	0x43500000

080165f4 <round>:
 80165f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165f6:	ec57 6b10 	vmov	r6, r7, d0
 80165fa:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80165fe:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8016602:	2c13      	cmp	r4, #19
 8016604:	463b      	mov	r3, r7
 8016606:	463d      	mov	r5, r7
 8016608:	dc17      	bgt.n	801663a <round+0x46>
 801660a:	2c00      	cmp	r4, #0
 801660c:	da09      	bge.n	8016622 <round+0x2e>
 801660e:	3401      	adds	r4, #1
 8016610:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8016614:	d103      	bne.n	801661e <round+0x2a>
 8016616:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801661a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801661e:	2100      	movs	r1, #0
 8016620:	e02c      	b.n	801667c <round+0x88>
 8016622:	4a18      	ldr	r2, [pc, #96]	; (8016684 <round+0x90>)
 8016624:	4122      	asrs	r2, r4
 8016626:	4217      	tst	r7, r2
 8016628:	d100      	bne.n	801662c <round+0x38>
 801662a:	b19e      	cbz	r6, 8016654 <round+0x60>
 801662c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016630:	4123      	asrs	r3, r4
 8016632:	442b      	add	r3, r5
 8016634:	ea23 0302 	bic.w	r3, r3, r2
 8016638:	e7f1      	b.n	801661e <round+0x2a>
 801663a:	2c33      	cmp	r4, #51	; 0x33
 801663c:	dd0d      	ble.n	801665a <round+0x66>
 801663e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8016642:	d107      	bne.n	8016654 <round+0x60>
 8016644:	4630      	mov	r0, r6
 8016646:	4639      	mov	r1, r7
 8016648:	ee10 2a10 	vmov	r2, s0
 801664c:	f7e9 fe36 	bl	80002bc <__adddf3>
 8016650:	4606      	mov	r6, r0
 8016652:	460f      	mov	r7, r1
 8016654:	ec47 6b10 	vmov	d0, r6, r7
 8016658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801665a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801665e:	f04f 30ff 	mov.w	r0, #4294967295
 8016662:	40d0      	lsrs	r0, r2
 8016664:	4206      	tst	r6, r0
 8016666:	d0f5      	beq.n	8016654 <round+0x60>
 8016668:	2201      	movs	r2, #1
 801666a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801666e:	fa02 f404 	lsl.w	r4, r2, r4
 8016672:	1931      	adds	r1, r6, r4
 8016674:	bf28      	it	cs
 8016676:	189b      	addcs	r3, r3, r2
 8016678:	ea21 0100 	bic.w	r1, r1, r0
 801667c:	461f      	mov	r7, r3
 801667e:	460e      	mov	r6, r1
 8016680:	e7e8      	b.n	8016654 <round+0x60>
 8016682:	bf00      	nop
 8016684:	000fffff 	.word	0x000fffff

08016688 <sin>:
 8016688:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801668a:	ec51 0b10 	vmov	r0, r1, d0
 801668e:	4a20      	ldr	r2, [pc, #128]	; (8016710 <sin+0x88>)
 8016690:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016694:	4293      	cmp	r3, r2
 8016696:	dc07      	bgt.n	80166a8 <sin+0x20>
 8016698:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8016708 <sin+0x80>
 801669c:	2000      	movs	r0, #0
 801669e:	f002 f973 	bl	8018988 <__kernel_sin>
 80166a2:	ec51 0b10 	vmov	r0, r1, d0
 80166a6:	e007      	b.n	80166b8 <sin+0x30>
 80166a8:	4a1a      	ldr	r2, [pc, #104]	; (8016714 <sin+0x8c>)
 80166aa:	4293      	cmp	r3, r2
 80166ac:	dd09      	ble.n	80166c2 <sin+0x3a>
 80166ae:	ee10 2a10 	vmov	r2, s0
 80166b2:	460b      	mov	r3, r1
 80166b4:	f7e9 fe00 	bl	80002b8 <__aeabi_dsub>
 80166b8:	ec41 0b10 	vmov	d0, r0, r1
 80166bc:	b005      	add	sp, #20
 80166be:	f85d fb04 	ldr.w	pc, [sp], #4
 80166c2:	4668      	mov	r0, sp
 80166c4:	f001 f898 	bl	80177f8 <__ieee754_rem_pio2>
 80166c8:	f000 0003 	and.w	r0, r0, #3
 80166cc:	2801      	cmp	r0, #1
 80166ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80166d2:	ed9d 0b00 	vldr	d0, [sp]
 80166d6:	d004      	beq.n	80166e2 <sin+0x5a>
 80166d8:	2802      	cmp	r0, #2
 80166da:	d005      	beq.n	80166e8 <sin+0x60>
 80166dc:	b970      	cbnz	r0, 80166fc <sin+0x74>
 80166de:	2001      	movs	r0, #1
 80166e0:	e7dd      	b.n	801669e <sin+0x16>
 80166e2:	f001 fd49 	bl	8018178 <__kernel_cos>
 80166e6:	e7dc      	b.n	80166a2 <sin+0x1a>
 80166e8:	2001      	movs	r0, #1
 80166ea:	f002 f94d 	bl	8018988 <__kernel_sin>
 80166ee:	ec53 2b10 	vmov	r2, r3, d0
 80166f2:	ee10 0a10 	vmov	r0, s0
 80166f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80166fa:	e7dd      	b.n	80166b8 <sin+0x30>
 80166fc:	f001 fd3c 	bl	8018178 <__kernel_cos>
 8016700:	e7f5      	b.n	80166ee <sin+0x66>
 8016702:	bf00      	nop
 8016704:	f3af 8000 	nop.w
	...
 8016710:	3fe921fb 	.word	0x3fe921fb
 8016714:	7fefffff 	.word	0x7fefffff

08016718 <tan>:
 8016718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801671a:	ec51 0b10 	vmov	r0, r1, d0
 801671e:	4a14      	ldr	r2, [pc, #80]	; (8016770 <tan+0x58>)
 8016720:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016724:	4293      	cmp	r3, r2
 8016726:	dc05      	bgt.n	8016734 <tan+0x1c>
 8016728:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8016768 <tan+0x50>
 801672c:	2001      	movs	r0, #1
 801672e:	f002 f9e7 	bl	8018b00 <__kernel_tan>
 8016732:	e009      	b.n	8016748 <tan+0x30>
 8016734:	4a0f      	ldr	r2, [pc, #60]	; (8016774 <tan+0x5c>)
 8016736:	4293      	cmp	r3, r2
 8016738:	dd09      	ble.n	801674e <tan+0x36>
 801673a:	ee10 2a10 	vmov	r2, s0
 801673e:	460b      	mov	r3, r1
 8016740:	f7e9 fdba 	bl	80002b8 <__aeabi_dsub>
 8016744:	ec41 0b10 	vmov	d0, r0, r1
 8016748:	b005      	add	sp, #20
 801674a:	f85d fb04 	ldr.w	pc, [sp], #4
 801674e:	4668      	mov	r0, sp
 8016750:	f001 f852 	bl	80177f8 <__ieee754_rem_pio2>
 8016754:	0040      	lsls	r0, r0, #1
 8016756:	f000 0002 	and.w	r0, r0, #2
 801675a:	f1c0 0001 	rsb	r0, r0, #1
 801675e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016762:	ed9d 0b00 	vldr	d0, [sp]
 8016766:	e7e2      	b.n	801672e <tan+0x16>
	...
 8016770:	3fe921fb 	.word	0x3fe921fb
 8016774:	7fefffff 	.word	0x7fefffff

08016778 <roundf>:
 8016778:	ee10 0a10 	vmov	r0, s0
 801677c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8016780:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8016784:	2a16      	cmp	r2, #22
 8016786:	dc15      	bgt.n	80167b4 <roundf+0x3c>
 8016788:	2a00      	cmp	r2, #0
 801678a:	da08      	bge.n	801679e <roundf+0x26>
 801678c:	3201      	adds	r2, #1
 801678e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8016792:	d101      	bne.n	8016798 <roundf+0x20>
 8016794:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8016798:	ee00 3a10 	vmov	s0, r3
 801679c:	4770      	bx	lr
 801679e:	4908      	ldr	r1, [pc, #32]	; (80167c0 <roundf+0x48>)
 80167a0:	4111      	asrs	r1, r2
 80167a2:	4208      	tst	r0, r1
 80167a4:	d0fa      	beq.n	801679c <roundf+0x24>
 80167a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80167aa:	4113      	asrs	r3, r2
 80167ac:	4403      	add	r3, r0
 80167ae:	ea23 0301 	bic.w	r3, r3, r1
 80167b2:	e7f1      	b.n	8016798 <roundf+0x20>
 80167b4:	2a80      	cmp	r2, #128	; 0x80
 80167b6:	d1f1      	bne.n	801679c <roundf+0x24>
 80167b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80167bc:	4770      	bx	lr
 80167be:	bf00      	nop
 80167c0:	007fffff 	.word	0x007fffff

080167c4 <pow>:
 80167c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167c8:	ed2d 8b04 	vpush	{d8-d9}
 80167cc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8016aa0 <pow+0x2dc>
 80167d0:	b08d      	sub	sp, #52	; 0x34
 80167d2:	ec57 6b10 	vmov	r6, r7, d0
 80167d6:	ec55 4b11 	vmov	r4, r5, d1
 80167da:	f000 fafd 	bl	8016dd8 <__ieee754_pow>
 80167de:	f999 3000 	ldrsb.w	r3, [r9]
 80167e2:	9300      	str	r3, [sp, #0]
 80167e4:	3301      	adds	r3, #1
 80167e6:	eeb0 8a40 	vmov.f32	s16, s0
 80167ea:	eef0 8a60 	vmov.f32	s17, s1
 80167ee:	46c8      	mov	r8, r9
 80167f0:	d05f      	beq.n	80168b2 <pow+0xee>
 80167f2:	4622      	mov	r2, r4
 80167f4:	462b      	mov	r3, r5
 80167f6:	4620      	mov	r0, r4
 80167f8:	4629      	mov	r1, r5
 80167fa:	f7ea f9af 	bl	8000b5c <__aeabi_dcmpun>
 80167fe:	4683      	mov	fp, r0
 8016800:	2800      	cmp	r0, #0
 8016802:	d156      	bne.n	80168b2 <pow+0xee>
 8016804:	4632      	mov	r2, r6
 8016806:	463b      	mov	r3, r7
 8016808:	4630      	mov	r0, r6
 801680a:	4639      	mov	r1, r7
 801680c:	f7ea f9a6 	bl	8000b5c <__aeabi_dcmpun>
 8016810:	9001      	str	r0, [sp, #4]
 8016812:	b1e8      	cbz	r0, 8016850 <pow+0x8c>
 8016814:	2200      	movs	r2, #0
 8016816:	2300      	movs	r3, #0
 8016818:	4620      	mov	r0, r4
 801681a:	4629      	mov	r1, r5
 801681c:	f7ea f96c 	bl	8000af8 <__aeabi_dcmpeq>
 8016820:	2800      	cmp	r0, #0
 8016822:	d046      	beq.n	80168b2 <pow+0xee>
 8016824:	2301      	movs	r3, #1
 8016826:	9302      	str	r3, [sp, #8]
 8016828:	4b96      	ldr	r3, [pc, #600]	; (8016a84 <pow+0x2c0>)
 801682a:	9303      	str	r3, [sp, #12]
 801682c:	4b96      	ldr	r3, [pc, #600]	; (8016a88 <pow+0x2c4>)
 801682e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8016832:	2200      	movs	r2, #0
 8016834:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016838:	9b00      	ldr	r3, [sp, #0]
 801683a:	2b02      	cmp	r3, #2
 801683c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016840:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016844:	d033      	beq.n	80168ae <pow+0xea>
 8016846:	a802      	add	r0, sp, #8
 8016848:	f002 fb37 	bl	8018eba <matherr>
 801684c:	bb48      	cbnz	r0, 80168a2 <pow+0xde>
 801684e:	e05d      	b.n	801690c <pow+0x148>
 8016850:	f04f 0a00 	mov.w	sl, #0
 8016854:	f04f 0b00 	mov.w	fp, #0
 8016858:	4652      	mov	r2, sl
 801685a:	465b      	mov	r3, fp
 801685c:	4630      	mov	r0, r6
 801685e:	4639      	mov	r1, r7
 8016860:	f7ea f94a 	bl	8000af8 <__aeabi_dcmpeq>
 8016864:	ec4b ab19 	vmov	d9, sl, fp
 8016868:	2800      	cmp	r0, #0
 801686a:	d054      	beq.n	8016916 <pow+0x152>
 801686c:	4652      	mov	r2, sl
 801686e:	465b      	mov	r3, fp
 8016870:	4620      	mov	r0, r4
 8016872:	4629      	mov	r1, r5
 8016874:	f7ea f940 	bl	8000af8 <__aeabi_dcmpeq>
 8016878:	4680      	mov	r8, r0
 801687a:	b318      	cbz	r0, 80168c4 <pow+0x100>
 801687c:	2301      	movs	r3, #1
 801687e:	9302      	str	r3, [sp, #8]
 8016880:	4b80      	ldr	r3, [pc, #512]	; (8016a84 <pow+0x2c0>)
 8016882:	9303      	str	r3, [sp, #12]
 8016884:	9b01      	ldr	r3, [sp, #4]
 8016886:	930a      	str	r3, [sp, #40]	; 0x28
 8016888:	9b00      	ldr	r3, [sp, #0]
 801688a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801688e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016892:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d0d5      	beq.n	8016846 <pow+0x82>
 801689a:	4b7b      	ldr	r3, [pc, #492]	; (8016a88 <pow+0x2c4>)
 801689c:	2200      	movs	r2, #0
 801689e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80168a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168a4:	b11b      	cbz	r3, 80168ae <pow+0xea>
 80168a6:	f002 fc5d 	bl	8019164 <__errno>
 80168aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80168ac:	6003      	str	r3, [r0, #0]
 80168ae:	ed9d 8b08 	vldr	d8, [sp, #32]
 80168b2:	eeb0 0a48 	vmov.f32	s0, s16
 80168b6:	eef0 0a68 	vmov.f32	s1, s17
 80168ba:	b00d      	add	sp, #52	; 0x34
 80168bc:	ecbd 8b04 	vpop	{d8-d9}
 80168c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168c4:	ec45 4b10 	vmov	d0, r4, r5
 80168c8:	f002 faef 	bl	8018eaa <finite>
 80168cc:	2800      	cmp	r0, #0
 80168ce:	d0f0      	beq.n	80168b2 <pow+0xee>
 80168d0:	4652      	mov	r2, sl
 80168d2:	465b      	mov	r3, fp
 80168d4:	4620      	mov	r0, r4
 80168d6:	4629      	mov	r1, r5
 80168d8:	f7ea f918 	bl	8000b0c <__aeabi_dcmplt>
 80168dc:	2800      	cmp	r0, #0
 80168de:	d0e8      	beq.n	80168b2 <pow+0xee>
 80168e0:	2301      	movs	r3, #1
 80168e2:	9302      	str	r3, [sp, #8]
 80168e4:	4b67      	ldr	r3, [pc, #412]	; (8016a84 <pow+0x2c0>)
 80168e6:	9303      	str	r3, [sp, #12]
 80168e8:	f999 3000 	ldrsb.w	r3, [r9]
 80168ec:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80168f0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80168f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80168f8:	b913      	cbnz	r3, 8016900 <pow+0x13c>
 80168fa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80168fe:	e7a2      	b.n	8016846 <pow+0x82>
 8016900:	4962      	ldr	r1, [pc, #392]	; (8016a8c <pow+0x2c8>)
 8016902:	2000      	movs	r0, #0
 8016904:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016908:	2b02      	cmp	r3, #2
 801690a:	d19c      	bne.n	8016846 <pow+0x82>
 801690c:	f002 fc2a 	bl	8019164 <__errno>
 8016910:	2321      	movs	r3, #33	; 0x21
 8016912:	6003      	str	r3, [r0, #0]
 8016914:	e7c5      	b.n	80168a2 <pow+0xde>
 8016916:	eeb0 0a48 	vmov.f32	s0, s16
 801691a:	eef0 0a68 	vmov.f32	s1, s17
 801691e:	f002 fac4 	bl	8018eaa <finite>
 8016922:	9000      	str	r0, [sp, #0]
 8016924:	2800      	cmp	r0, #0
 8016926:	f040 8081 	bne.w	8016a2c <pow+0x268>
 801692a:	ec47 6b10 	vmov	d0, r6, r7
 801692e:	f002 fabc 	bl	8018eaa <finite>
 8016932:	2800      	cmp	r0, #0
 8016934:	d07a      	beq.n	8016a2c <pow+0x268>
 8016936:	ec45 4b10 	vmov	d0, r4, r5
 801693a:	f002 fab6 	bl	8018eaa <finite>
 801693e:	2800      	cmp	r0, #0
 8016940:	d074      	beq.n	8016a2c <pow+0x268>
 8016942:	ec53 2b18 	vmov	r2, r3, d8
 8016946:	ee18 0a10 	vmov	r0, s16
 801694a:	4619      	mov	r1, r3
 801694c:	f7ea f906 	bl	8000b5c <__aeabi_dcmpun>
 8016950:	f999 9000 	ldrsb.w	r9, [r9]
 8016954:	4b4b      	ldr	r3, [pc, #300]	; (8016a84 <pow+0x2c0>)
 8016956:	b1b0      	cbz	r0, 8016986 <pow+0x1c2>
 8016958:	2201      	movs	r2, #1
 801695a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801695e:	9b00      	ldr	r3, [sp, #0]
 8016960:	930a      	str	r3, [sp, #40]	; 0x28
 8016962:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016966:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801696a:	f1b9 0f00 	cmp.w	r9, #0
 801696e:	d0c4      	beq.n	80168fa <pow+0x136>
 8016970:	4652      	mov	r2, sl
 8016972:	465b      	mov	r3, fp
 8016974:	4650      	mov	r0, sl
 8016976:	4659      	mov	r1, fp
 8016978:	f7e9 ff80 	bl	800087c <__aeabi_ddiv>
 801697c:	f1b9 0f02 	cmp.w	r9, #2
 8016980:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016984:	e7c1      	b.n	801690a <pow+0x146>
 8016986:	2203      	movs	r2, #3
 8016988:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801698c:	900a      	str	r0, [sp, #40]	; 0x28
 801698e:	4629      	mov	r1, r5
 8016990:	4620      	mov	r0, r4
 8016992:	2200      	movs	r2, #0
 8016994:	4b3e      	ldr	r3, [pc, #248]	; (8016a90 <pow+0x2cc>)
 8016996:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801699a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801699e:	f7e9 fe43 	bl	8000628 <__aeabi_dmul>
 80169a2:	4604      	mov	r4, r0
 80169a4:	460d      	mov	r5, r1
 80169a6:	f1b9 0f00 	cmp.w	r9, #0
 80169aa:	d124      	bne.n	80169f6 <pow+0x232>
 80169ac:	4b39      	ldr	r3, [pc, #228]	; (8016a94 <pow+0x2d0>)
 80169ae:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80169b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80169b6:	4630      	mov	r0, r6
 80169b8:	4652      	mov	r2, sl
 80169ba:	465b      	mov	r3, fp
 80169bc:	4639      	mov	r1, r7
 80169be:	f7ea f8a5 	bl	8000b0c <__aeabi_dcmplt>
 80169c2:	2800      	cmp	r0, #0
 80169c4:	d056      	beq.n	8016a74 <pow+0x2b0>
 80169c6:	ec45 4b10 	vmov	d0, r4, r5
 80169ca:	f002 fa81 	bl	8018ed0 <rint>
 80169ce:	4622      	mov	r2, r4
 80169d0:	462b      	mov	r3, r5
 80169d2:	ec51 0b10 	vmov	r0, r1, d0
 80169d6:	f7ea f88f 	bl	8000af8 <__aeabi_dcmpeq>
 80169da:	b920      	cbnz	r0, 80169e6 <pow+0x222>
 80169dc:	4b2e      	ldr	r3, [pc, #184]	; (8016a98 <pow+0x2d4>)
 80169de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80169e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80169e6:	f998 3000 	ldrsb.w	r3, [r8]
 80169ea:	2b02      	cmp	r3, #2
 80169ec:	d142      	bne.n	8016a74 <pow+0x2b0>
 80169ee:	f002 fbb9 	bl	8019164 <__errno>
 80169f2:	2322      	movs	r3, #34	; 0x22
 80169f4:	e78d      	b.n	8016912 <pow+0x14e>
 80169f6:	4b29      	ldr	r3, [pc, #164]	; (8016a9c <pow+0x2d8>)
 80169f8:	2200      	movs	r2, #0
 80169fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80169fe:	4630      	mov	r0, r6
 8016a00:	4652      	mov	r2, sl
 8016a02:	465b      	mov	r3, fp
 8016a04:	4639      	mov	r1, r7
 8016a06:	f7ea f881 	bl	8000b0c <__aeabi_dcmplt>
 8016a0a:	2800      	cmp	r0, #0
 8016a0c:	d0eb      	beq.n	80169e6 <pow+0x222>
 8016a0e:	ec45 4b10 	vmov	d0, r4, r5
 8016a12:	f002 fa5d 	bl	8018ed0 <rint>
 8016a16:	4622      	mov	r2, r4
 8016a18:	462b      	mov	r3, r5
 8016a1a:	ec51 0b10 	vmov	r0, r1, d0
 8016a1e:	f7ea f86b 	bl	8000af8 <__aeabi_dcmpeq>
 8016a22:	2800      	cmp	r0, #0
 8016a24:	d1df      	bne.n	80169e6 <pow+0x222>
 8016a26:	2200      	movs	r2, #0
 8016a28:	4b18      	ldr	r3, [pc, #96]	; (8016a8c <pow+0x2c8>)
 8016a2a:	e7da      	b.n	80169e2 <pow+0x21e>
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	2300      	movs	r3, #0
 8016a30:	ec51 0b18 	vmov	r0, r1, d8
 8016a34:	f7ea f860 	bl	8000af8 <__aeabi_dcmpeq>
 8016a38:	2800      	cmp	r0, #0
 8016a3a:	f43f af3a 	beq.w	80168b2 <pow+0xee>
 8016a3e:	ec47 6b10 	vmov	d0, r6, r7
 8016a42:	f002 fa32 	bl	8018eaa <finite>
 8016a46:	2800      	cmp	r0, #0
 8016a48:	f43f af33 	beq.w	80168b2 <pow+0xee>
 8016a4c:	ec45 4b10 	vmov	d0, r4, r5
 8016a50:	f002 fa2b 	bl	8018eaa <finite>
 8016a54:	2800      	cmp	r0, #0
 8016a56:	f43f af2c 	beq.w	80168b2 <pow+0xee>
 8016a5a:	2304      	movs	r3, #4
 8016a5c:	9302      	str	r3, [sp, #8]
 8016a5e:	4b09      	ldr	r3, [pc, #36]	; (8016a84 <pow+0x2c0>)
 8016a60:	9303      	str	r3, [sp, #12]
 8016a62:	2300      	movs	r3, #0
 8016a64:	930a      	str	r3, [sp, #40]	; 0x28
 8016a66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016a6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016a6e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8016a72:	e7b8      	b.n	80169e6 <pow+0x222>
 8016a74:	a802      	add	r0, sp, #8
 8016a76:	f002 fa20 	bl	8018eba <matherr>
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	f47f af11 	bne.w	80168a2 <pow+0xde>
 8016a80:	e7b5      	b.n	80169ee <pow+0x22a>
 8016a82:	bf00      	nop
 8016a84:	0803e5dc 	.word	0x0803e5dc
 8016a88:	3ff00000 	.word	0x3ff00000
 8016a8c:	fff00000 	.word	0xfff00000
 8016a90:	3fe00000 	.word	0x3fe00000
 8016a94:	47efffff 	.word	0x47efffff
 8016a98:	c7efffff 	.word	0xc7efffff
 8016a9c:	7ff00000 	.word	0x7ff00000
 8016aa0:	20000698 	.word	0x20000698

08016aa4 <sqrt>:
 8016aa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016aa8:	ed2d 8b02 	vpush	{d8}
 8016aac:	b08b      	sub	sp, #44	; 0x2c
 8016aae:	ec55 4b10 	vmov	r4, r5, d0
 8016ab2:	f001 f893 	bl	8017bdc <__ieee754_sqrt>
 8016ab6:	4b26      	ldr	r3, [pc, #152]	; (8016b50 <sqrt+0xac>)
 8016ab8:	eeb0 8a40 	vmov.f32	s16, s0
 8016abc:	eef0 8a60 	vmov.f32	s17, s1
 8016ac0:	f993 6000 	ldrsb.w	r6, [r3]
 8016ac4:	1c73      	adds	r3, r6, #1
 8016ac6:	d02a      	beq.n	8016b1e <sqrt+0x7a>
 8016ac8:	4622      	mov	r2, r4
 8016aca:	462b      	mov	r3, r5
 8016acc:	4620      	mov	r0, r4
 8016ace:	4629      	mov	r1, r5
 8016ad0:	f7ea f844 	bl	8000b5c <__aeabi_dcmpun>
 8016ad4:	4607      	mov	r7, r0
 8016ad6:	bb10      	cbnz	r0, 8016b1e <sqrt+0x7a>
 8016ad8:	f04f 0800 	mov.w	r8, #0
 8016adc:	f04f 0900 	mov.w	r9, #0
 8016ae0:	4642      	mov	r2, r8
 8016ae2:	464b      	mov	r3, r9
 8016ae4:	4620      	mov	r0, r4
 8016ae6:	4629      	mov	r1, r5
 8016ae8:	f7ea f810 	bl	8000b0c <__aeabi_dcmplt>
 8016aec:	b1b8      	cbz	r0, 8016b1e <sqrt+0x7a>
 8016aee:	2301      	movs	r3, #1
 8016af0:	9300      	str	r3, [sp, #0]
 8016af2:	4b18      	ldr	r3, [pc, #96]	; (8016b54 <sqrt+0xb0>)
 8016af4:	9301      	str	r3, [sp, #4]
 8016af6:	9708      	str	r7, [sp, #32]
 8016af8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8016afc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8016b00:	b9b6      	cbnz	r6, 8016b30 <sqrt+0x8c>
 8016b02:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8016b06:	4668      	mov	r0, sp
 8016b08:	f002 f9d7 	bl	8018eba <matherr>
 8016b0c:	b1d0      	cbz	r0, 8016b44 <sqrt+0xa0>
 8016b0e:	9b08      	ldr	r3, [sp, #32]
 8016b10:	b11b      	cbz	r3, 8016b1a <sqrt+0x76>
 8016b12:	f002 fb27 	bl	8019164 <__errno>
 8016b16:	9b08      	ldr	r3, [sp, #32]
 8016b18:	6003      	str	r3, [r0, #0]
 8016b1a:	ed9d 8b06 	vldr	d8, [sp, #24]
 8016b1e:	eeb0 0a48 	vmov.f32	s0, s16
 8016b22:	eef0 0a68 	vmov.f32	s1, s17
 8016b26:	b00b      	add	sp, #44	; 0x2c
 8016b28:	ecbd 8b02 	vpop	{d8}
 8016b2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b30:	4642      	mov	r2, r8
 8016b32:	464b      	mov	r3, r9
 8016b34:	4640      	mov	r0, r8
 8016b36:	4649      	mov	r1, r9
 8016b38:	f7e9 fea0 	bl	800087c <__aeabi_ddiv>
 8016b3c:	2e02      	cmp	r6, #2
 8016b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016b42:	d1e0      	bne.n	8016b06 <sqrt+0x62>
 8016b44:	f002 fb0e 	bl	8019164 <__errno>
 8016b48:	2321      	movs	r3, #33	; 0x21
 8016b4a:	6003      	str	r3, [r0, #0]
 8016b4c:	e7df      	b.n	8016b0e <sqrt+0x6a>
 8016b4e:	bf00      	nop
 8016b50:	20000698 	.word	0x20000698
 8016b54:	0803e5e0 	.word	0x0803e5e0

08016b58 <expf>:
 8016b58:	b530      	push	{r4, r5, lr}
 8016b5a:	ed2d 8b02 	vpush	{d8}
 8016b5e:	4d35      	ldr	r5, [pc, #212]	; (8016c34 <expf+0xdc>)
 8016b60:	b08b      	sub	sp, #44	; 0x2c
 8016b62:	eeb0 8a40 	vmov.f32	s16, s0
 8016b66:	f001 f8e9 	bl	8017d3c <__ieee754_expf>
 8016b6a:	f995 3000 	ldrsb.w	r3, [r5]
 8016b6e:	3301      	adds	r3, #1
 8016b70:	ee10 4a10 	vmov	r4, s0
 8016b74:	d030      	beq.n	8016bd8 <expf+0x80>
 8016b76:	eeb0 0a48 	vmov.f32	s0, s16
 8016b7a:	f002 faa3 	bl	80190c4 <finitef>
 8016b7e:	b358      	cbz	r0, 8016bd8 <expf+0x80>
 8016b80:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8016c38 <expf+0xe0>
 8016b84:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b8c:	dd35      	ble.n	8016bfa <expf+0xa2>
 8016b8e:	2303      	movs	r3, #3
 8016b90:	9300      	str	r3, [sp, #0]
 8016b92:	4b2a      	ldr	r3, [pc, #168]	; (8016c3c <expf+0xe4>)
 8016b94:	9301      	str	r3, [sp, #4]
 8016b96:	ee18 0a10 	vmov	r0, s16
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	9308      	str	r3, [sp, #32]
 8016b9e:	f7e9 fceb 	bl	8000578 <__aeabi_f2d>
 8016ba2:	f995 3000 	ldrsb.w	r3, [r5]
 8016ba6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016bae:	b9cb      	cbnz	r3, 8016be4 <expf+0x8c>
 8016bb0:	4b23      	ldr	r3, [pc, #140]	; (8016c40 <expf+0xe8>)
 8016bb2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016bb6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016bba:	4668      	mov	r0, sp
 8016bbc:	f002 f97d 	bl	8018eba <matherr>
 8016bc0:	b1b0      	cbz	r0, 8016bf0 <expf+0x98>
 8016bc2:	9b08      	ldr	r3, [sp, #32]
 8016bc4:	b11b      	cbz	r3, 8016bce <expf+0x76>
 8016bc6:	f002 facd 	bl	8019164 <__errno>
 8016bca:	9b08      	ldr	r3, [sp, #32]
 8016bcc:	6003      	str	r3, [r0, #0]
 8016bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016bd2:	f7ea f821 	bl	8000c18 <__aeabi_d2f>
 8016bd6:	4604      	mov	r4, r0
 8016bd8:	ee00 4a10 	vmov	s0, r4
 8016bdc:	b00b      	add	sp, #44	; 0x2c
 8016bde:	ecbd 8b02 	vpop	{d8}
 8016be2:	bd30      	pop	{r4, r5, pc}
 8016be4:	4917      	ldr	r1, [pc, #92]	; (8016c44 <expf+0xec>)
 8016be6:	2000      	movs	r0, #0
 8016be8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016bec:	2b02      	cmp	r3, #2
 8016bee:	d1e4      	bne.n	8016bba <expf+0x62>
 8016bf0:	f002 fab8 	bl	8019164 <__errno>
 8016bf4:	2322      	movs	r3, #34	; 0x22
 8016bf6:	6003      	str	r3, [r0, #0]
 8016bf8:	e7e3      	b.n	8016bc2 <expf+0x6a>
 8016bfa:	eddf 7a13 	vldr	s15, [pc, #76]	; 8016c48 <expf+0xf0>
 8016bfe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c06:	d5e7      	bpl.n	8016bd8 <expf+0x80>
 8016c08:	2304      	movs	r3, #4
 8016c0a:	9300      	str	r3, [sp, #0]
 8016c0c:	4b0b      	ldr	r3, [pc, #44]	; (8016c3c <expf+0xe4>)
 8016c0e:	9301      	str	r3, [sp, #4]
 8016c10:	ee18 0a10 	vmov	r0, s16
 8016c14:	2300      	movs	r3, #0
 8016c16:	9308      	str	r3, [sp, #32]
 8016c18:	f7e9 fcae 	bl	8000578 <__aeabi_f2d>
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	2200      	movs	r2, #0
 8016c20:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016c24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016c28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016c2c:	f995 3000 	ldrsb.w	r3, [r5]
 8016c30:	e7dc      	b.n	8016bec <expf+0x94>
 8016c32:	bf00      	nop
 8016c34:	20000698 	.word	0x20000698
 8016c38:	42b17180 	.word	0x42b17180
 8016c3c:	0803e5e5 	.word	0x0803e5e5
 8016c40:	47efffff 	.word	0x47efffff
 8016c44:	7ff00000 	.word	0x7ff00000
 8016c48:	c2cff1b5 	.word	0xc2cff1b5

08016c4c <log10f>:
 8016c4c:	b510      	push	{r4, lr}
 8016c4e:	ed2d 8b02 	vpush	{d8}
 8016c52:	b08a      	sub	sp, #40	; 0x28
 8016c54:	eeb0 8a40 	vmov.f32	s16, s0
 8016c58:	f001 fa32 	bl	80180c0 <__ieee754_log10f>
 8016c5c:	4b31      	ldr	r3, [pc, #196]	; (8016d24 <log10f+0xd8>)
 8016c5e:	f993 4000 	ldrsb.w	r4, [r3]
 8016c62:	1c63      	adds	r3, r4, #1
 8016c64:	d059      	beq.n	8016d1a <log10f+0xce>
 8016c66:	eeb4 8a48 	vcmp.f32	s16, s16
 8016c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c6e:	d654      	bvs.n	8016d1a <log10f+0xce>
 8016c70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c78:	d84f      	bhi.n	8016d1a <log10f+0xce>
 8016c7a:	4b2b      	ldr	r3, [pc, #172]	; (8016d28 <log10f+0xdc>)
 8016c7c:	9301      	str	r3, [sp, #4]
 8016c7e:	ee18 0a10 	vmov	r0, s16
 8016c82:	2300      	movs	r3, #0
 8016c84:	9308      	str	r3, [sp, #32]
 8016c86:	f7e9 fc77 	bl	8000578 <__aeabi_f2d>
 8016c8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016c8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016c92:	b994      	cbnz	r4, 8016cba <log10f+0x6e>
 8016c94:	4b25      	ldr	r3, [pc, #148]	; (8016d2c <log10f+0xe0>)
 8016c96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016c9a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ca2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016ca6:	d025      	beq.n	8016cf4 <log10f+0xa8>
 8016ca8:	2301      	movs	r3, #1
 8016caa:	2c02      	cmp	r4, #2
 8016cac:	9300      	str	r3, [sp, #0]
 8016cae:	d116      	bne.n	8016cde <log10f+0x92>
 8016cb0:	f002 fa58 	bl	8019164 <__errno>
 8016cb4:	2321      	movs	r3, #33	; 0x21
 8016cb6:	6003      	str	r3, [r0, #0]
 8016cb8:	e016      	b.n	8016ce8 <log10f+0x9c>
 8016cba:	4b1d      	ldr	r3, [pc, #116]	; (8016d30 <log10f+0xe4>)
 8016cbc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cc6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016cca:	d1ed      	bne.n	8016ca8 <log10f+0x5c>
 8016ccc:	2302      	movs	r3, #2
 8016cce:	429c      	cmp	r4, r3
 8016cd0:	9300      	str	r3, [sp, #0]
 8016cd2:	d111      	bne.n	8016cf8 <log10f+0xac>
 8016cd4:	f002 fa46 	bl	8019164 <__errno>
 8016cd8:	2322      	movs	r3, #34	; 0x22
 8016cda:	6003      	str	r3, [r0, #0]
 8016cdc:	e011      	b.n	8016d02 <log10f+0xb6>
 8016cde:	4668      	mov	r0, sp
 8016ce0:	f002 f8eb 	bl	8018eba <matherr>
 8016ce4:	2800      	cmp	r0, #0
 8016ce6:	d0e3      	beq.n	8016cb0 <log10f+0x64>
 8016ce8:	4812      	ldr	r0, [pc, #72]	; (8016d34 <log10f+0xe8>)
 8016cea:	f002 f8e9 	bl	8018ec0 <nan>
 8016cee:	ed8d 0b06 	vstr	d0, [sp, #24]
 8016cf2:	e006      	b.n	8016d02 <log10f+0xb6>
 8016cf4:	2302      	movs	r3, #2
 8016cf6:	9300      	str	r3, [sp, #0]
 8016cf8:	4668      	mov	r0, sp
 8016cfa:	f002 f8de 	bl	8018eba <matherr>
 8016cfe:	2800      	cmp	r0, #0
 8016d00:	d0e8      	beq.n	8016cd4 <log10f+0x88>
 8016d02:	9b08      	ldr	r3, [sp, #32]
 8016d04:	b11b      	cbz	r3, 8016d0e <log10f+0xc2>
 8016d06:	f002 fa2d 	bl	8019164 <__errno>
 8016d0a:	9b08      	ldr	r3, [sp, #32]
 8016d0c:	6003      	str	r3, [r0, #0]
 8016d0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016d12:	f7e9 ff81 	bl	8000c18 <__aeabi_d2f>
 8016d16:	ee00 0a10 	vmov	s0, r0
 8016d1a:	b00a      	add	sp, #40	; 0x28
 8016d1c:	ecbd 8b02 	vpop	{d8}
 8016d20:	bd10      	pop	{r4, pc}
 8016d22:	bf00      	nop
 8016d24:	20000698 	.word	0x20000698
 8016d28:	0803e5ea 	.word	0x0803e5ea
 8016d2c:	c7efffff 	.word	0xc7efffff
 8016d30:	fff00000 	.word	0xfff00000
 8016d34:	0803e863 	.word	0x0803e863

08016d38 <sqrtf>:
 8016d38:	b510      	push	{r4, lr}
 8016d3a:	ed2d 8b02 	vpush	{d8}
 8016d3e:	b08a      	sub	sp, #40	; 0x28
 8016d40:	eeb0 8a40 	vmov.f32	s16, s0
 8016d44:	f001 fa12 	bl	801816c <__ieee754_sqrtf>
 8016d48:	4b21      	ldr	r3, [pc, #132]	; (8016dd0 <sqrtf+0x98>)
 8016d4a:	f993 4000 	ldrsb.w	r4, [r3]
 8016d4e:	1c63      	adds	r3, r4, #1
 8016d50:	d02c      	beq.n	8016dac <sqrtf+0x74>
 8016d52:	eeb4 8a48 	vcmp.f32	s16, s16
 8016d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d5a:	d627      	bvs.n	8016dac <sqrtf+0x74>
 8016d5c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8016d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d64:	d522      	bpl.n	8016dac <sqrtf+0x74>
 8016d66:	2301      	movs	r3, #1
 8016d68:	9300      	str	r3, [sp, #0]
 8016d6a:	4b1a      	ldr	r3, [pc, #104]	; (8016dd4 <sqrtf+0x9c>)
 8016d6c:	9301      	str	r3, [sp, #4]
 8016d6e:	ee18 0a10 	vmov	r0, s16
 8016d72:	2300      	movs	r3, #0
 8016d74:	9308      	str	r3, [sp, #32]
 8016d76:	f7e9 fbff 	bl	8000578 <__aeabi_f2d>
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016d84:	2300      	movs	r3, #0
 8016d86:	b9ac      	cbnz	r4, 8016db4 <sqrtf+0x7c>
 8016d88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8016d8c:	4668      	mov	r0, sp
 8016d8e:	f002 f894 	bl	8018eba <matherr>
 8016d92:	b1b8      	cbz	r0, 8016dc4 <sqrtf+0x8c>
 8016d94:	9b08      	ldr	r3, [sp, #32]
 8016d96:	b11b      	cbz	r3, 8016da0 <sqrtf+0x68>
 8016d98:	f002 f9e4 	bl	8019164 <__errno>
 8016d9c:	9b08      	ldr	r3, [sp, #32]
 8016d9e:	6003      	str	r3, [r0, #0]
 8016da0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016da4:	f7e9 ff38 	bl	8000c18 <__aeabi_d2f>
 8016da8:	ee00 0a10 	vmov	s0, r0
 8016dac:	b00a      	add	sp, #40	; 0x28
 8016dae:	ecbd 8b02 	vpop	{d8}
 8016db2:	bd10      	pop	{r4, pc}
 8016db4:	4610      	mov	r0, r2
 8016db6:	4619      	mov	r1, r3
 8016db8:	f7e9 fd60 	bl	800087c <__aeabi_ddiv>
 8016dbc:	2c02      	cmp	r4, #2
 8016dbe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016dc2:	d1e3      	bne.n	8016d8c <sqrtf+0x54>
 8016dc4:	f002 f9ce 	bl	8019164 <__errno>
 8016dc8:	2321      	movs	r3, #33	; 0x21
 8016dca:	6003      	str	r3, [r0, #0]
 8016dcc:	e7e2      	b.n	8016d94 <sqrtf+0x5c>
 8016dce:	bf00      	nop
 8016dd0:	20000698 	.word	0x20000698
 8016dd4:	0803e5f1 	.word	0x0803e5f1

08016dd8 <__ieee754_pow>:
 8016dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ddc:	b091      	sub	sp, #68	; 0x44
 8016dde:	ed8d 1b00 	vstr	d1, [sp]
 8016de2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016de6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016dea:	ea58 0302 	orrs.w	r3, r8, r2
 8016dee:	ec57 6b10 	vmov	r6, r7, d0
 8016df2:	f000 84be 	beq.w	8017772 <__ieee754_pow+0x99a>
 8016df6:	4b7a      	ldr	r3, [pc, #488]	; (8016fe0 <__ieee754_pow+0x208>)
 8016df8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016dfc:	429c      	cmp	r4, r3
 8016dfe:	463d      	mov	r5, r7
 8016e00:	ee10 aa10 	vmov	sl, s0
 8016e04:	dc09      	bgt.n	8016e1a <__ieee754_pow+0x42>
 8016e06:	d103      	bne.n	8016e10 <__ieee754_pow+0x38>
 8016e08:	b93e      	cbnz	r6, 8016e1a <__ieee754_pow+0x42>
 8016e0a:	45a0      	cmp	r8, r4
 8016e0c:	dc0d      	bgt.n	8016e2a <__ieee754_pow+0x52>
 8016e0e:	e001      	b.n	8016e14 <__ieee754_pow+0x3c>
 8016e10:	4598      	cmp	r8, r3
 8016e12:	dc02      	bgt.n	8016e1a <__ieee754_pow+0x42>
 8016e14:	4598      	cmp	r8, r3
 8016e16:	d10e      	bne.n	8016e36 <__ieee754_pow+0x5e>
 8016e18:	b16a      	cbz	r2, 8016e36 <__ieee754_pow+0x5e>
 8016e1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016e1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016e22:	ea54 030a 	orrs.w	r3, r4, sl
 8016e26:	f000 84a4 	beq.w	8017772 <__ieee754_pow+0x99a>
 8016e2a:	486e      	ldr	r0, [pc, #440]	; (8016fe4 <__ieee754_pow+0x20c>)
 8016e2c:	b011      	add	sp, #68	; 0x44
 8016e2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e32:	f002 b845 	b.w	8018ec0 <nan>
 8016e36:	2d00      	cmp	r5, #0
 8016e38:	da53      	bge.n	8016ee2 <__ieee754_pow+0x10a>
 8016e3a:	4b6b      	ldr	r3, [pc, #428]	; (8016fe8 <__ieee754_pow+0x210>)
 8016e3c:	4598      	cmp	r8, r3
 8016e3e:	dc4d      	bgt.n	8016edc <__ieee754_pow+0x104>
 8016e40:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016e44:	4598      	cmp	r8, r3
 8016e46:	dd4c      	ble.n	8016ee2 <__ieee754_pow+0x10a>
 8016e48:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016e4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016e50:	2b14      	cmp	r3, #20
 8016e52:	dd26      	ble.n	8016ea2 <__ieee754_pow+0xca>
 8016e54:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016e58:	fa22 f103 	lsr.w	r1, r2, r3
 8016e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8016e60:	4293      	cmp	r3, r2
 8016e62:	d13e      	bne.n	8016ee2 <__ieee754_pow+0x10a>
 8016e64:	f001 0101 	and.w	r1, r1, #1
 8016e68:	f1c1 0b02 	rsb	fp, r1, #2
 8016e6c:	2a00      	cmp	r2, #0
 8016e6e:	d15b      	bne.n	8016f28 <__ieee754_pow+0x150>
 8016e70:	4b5b      	ldr	r3, [pc, #364]	; (8016fe0 <__ieee754_pow+0x208>)
 8016e72:	4598      	cmp	r8, r3
 8016e74:	d124      	bne.n	8016ec0 <__ieee754_pow+0xe8>
 8016e76:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016e7a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016e7e:	ea53 030a 	orrs.w	r3, r3, sl
 8016e82:	f000 8476 	beq.w	8017772 <__ieee754_pow+0x99a>
 8016e86:	4b59      	ldr	r3, [pc, #356]	; (8016fec <__ieee754_pow+0x214>)
 8016e88:	429c      	cmp	r4, r3
 8016e8a:	dd2d      	ble.n	8016ee8 <__ieee754_pow+0x110>
 8016e8c:	f1b9 0f00 	cmp.w	r9, #0
 8016e90:	f280 8473 	bge.w	801777a <__ieee754_pow+0x9a2>
 8016e94:	2000      	movs	r0, #0
 8016e96:	2100      	movs	r1, #0
 8016e98:	ec41 0b10 	vmov	d0, r0, r1
 8016e9c:	b011      	add	sp, #68	; 0x44
 8016e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ea2:	2a00      	cmp	r2, #0
 8016ea4:	d13e      	bne.n	8016f24 <__ieee754_pow+0x14c>
 8016ea6:	f1c3 0314 	rsb	r3, r3, #20
 8016eaa:	fa48 f103 	asr.w	r1, r8, r3
 8016eae:	fa01 f303 	lsl.w	r3, r1, r3
 8016eb2:	4543      	cmp	r3, r8
 8016eb4:	f040 8469 	bne.w	801778a <__ieee754_pow+0x9b2>
 8016eb8:	f001 0101 	and.w	r1, r1, #1
 8016ebc:	f1c1 0b02 	rsb	fp, r1, #2
 8016ec0:	4b4b      	ldr	r3, [pc, #300]	; (8016ff0 <__ieee754_pow+0x218>)
 8016ec2:	4598      	cmp	r8, r3
 8016ec4:	d118      	bne.n	8016ef8 <__ieee754_pow+0x120>
 8016ec6:	f1b9 0f00 	cmp.w	r9, #0
 8016eca:	f280 845a 	bge.w	8017782 <__ieee754_pow+0x9aa>
 8016ece:	4948      	ldr	r1, [pc, #288]	; (8016ff0 <__ieee754_pow+0x218>)
 8016ed0:	4632      	mov	r2, r6
 8016ed2:	463b      	mov	r3, r7
 8016ed4:	2000      	movs	r0, #0
 8016ed6:	f7e9 fcd1 	bl	800087c <__aeabi_ddiv>
 8016eda:	e7dd      	b.n	8016e98 <__ieee754_pow+0xc0>
 8016edc:	f04f 0b02 	mov.w	fp, #2
 8016ee0:	e7c4      	b.n	8016e6c <__ieee754_pow+0x94>
 8016ee2:	f04f 0b00 	mov.w	fp, #0
 8016ee6:	e7c1      	b.n	8016e6c <__ieee754_pow+0x94>
 8016ee8:	f1b9 0f00 	cmp.w	r9, #0
 8016eec:	dad2      	bge.n	8016e94 <__ieee754_pow+0xbc>
 8016eee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016ef2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016ef6:	e7cf      	b.n	8016e98 <__ieee754_pow+0xc0>
 8016ef8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016efc:	d106      	bne.n	8016f0c <__ieee754_pow+0x134>
 8016efe:	4632      	mov	r2, r6
 8016f00:	463b      	mov	r3, r7
 8016f02:	4610      	mov	r0, r2
 8016f04:	4619      	mov	r1, r3
 8016f06:	f7e9 fb8f 	bl	8000628 <__aeabi_dmul>
 8016f0a:	e7c5      	b.n	8016e98 <__ieee754_pow+0xc0>
 8016f0c:	4b39      	ldr	r3, [pc, #228]	; (8016ff4 <__ieee754_pow+0x21c>)
 8016f0e:	4599      	cmp	r9, r3
 8016f10:	d10a      	bne.n	8016f28 <__ieee754_pow+0x150>
 8016f12:	2d00      	cmp	r5, #0
 8016f14:	db08      	blt.n	8016f28 <__ieee754_pow+0x150>
 8016f16:	ec47 6b10 	vmov	d0, r6, r7
 8016f1a:	b011      	add	sp, #68	; 0x44
 8016f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f20:	f000 be5c 	b.w	8017bdc <__ieee754_sqrt>
 8016f24:	f04f 0b00 	mov.w	fp, #0
 8016f28:	ec47 6b10 	vmov	d0, r6, r7
 8016f2c:	f001 ffb4 	bl	8018e98 <fabs>
 8016f30:	ec51 0b10 	vmov	r0, r1, d0
 8016f34:	f1ba 0f00 	cmp.w	sl, #0
 8016f38:	d127      	bne.n	8016f8a <__ieee754_pow+0x1b2>
 8016f3a:	b124      	cbz	r4, 8016f46 <__ieee754_pow+0x16e>
 8016f3c:	4b2c      	ldr	r3, [pc, #176]	; (8016ff0 <__ieee754_pow+0x218>)
 8016f3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016f42:	429a      	cmp	r2, r3
 8016f44:	d121      	bne.n	8016f8a <__ieee754_pow+0x1b2>
 8016f46:	f1b9 0f00 	cmp.w	r9, #0
 8016f4a:	da05      	bge.n	8016f58 <__ieee754_pow+0x180>
 8016f4c:	4602      	mov	r2, r0
 8016f4e:	460b      	mov	r3, r1
 8016f50:	2000      	movs	r0, #0
 8016f52:	4927      	ldr	r1, [pc, #156]	; (8016ff0 <__ieee754_pow+0x218>)
 8016f54:	f7e9 fc92 	bl	800087c <__aeabi_ddiv>
 8016f58:	2d00      	cmp	r5, #0
 8016f5a:	da9d      	bge.n	8016e98 <__ieee754_pow+0xc0>
 8016f5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016f60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016f64:	ea54 030b 	orrs.w	r3, r4, fp
 8016f68:	d108      	bne.n	8016f7c <__ieee754_pow+0x1a4>
 8016f6a:	4602      	mov	r2, r0
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	4610      	mov	r0, r2
 8016f70:	4619      	mov	r1, r3
 8016f72:	f7e9 f9a1 	bl	80002b8 <__aeabi_dsub>
 8016f76:	4602      	mov	r2, r0
 8016f78:	460b      	mov	r3, r1
 8016f7a:	e7ac      	b.n	8016ed6 <__ieee754_pow+0xfe>
 8016f7c:	f1bb 0f01 	cmp.w	fp, #1
 8016f80:	d18a      	bne.n	8016e98 <__ieee754_pow+0xc0>
 8016f82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016f86:	4619      	mov	r1, r3
 8016f88:	e786      	b.n	8016e98 <__ieee754_pow+0xc0>
 8016f8a:	0fed      	lsrs	r5, r5, #31
 8016f8c:	1e6b      	subs	r3, r5, #1
 8016f8e:	930d      	str	r3, [sp, #52]	; 0x34
 8016f90:	ea5b 0303 	orrs.w	r3, fp, r3
 8016f94:	d102      	bne.n	8016f9c <__ieee754_pow+0x1c4>
 8016f96:	4632      	mov	r2, r6
 8016f98:	463b      	mov	r3, r7
 8016f9a:	e7e8      	b.n	8016f6e <__ieee754_pow+0x196>
 8016f9c:	4b16      	ldr	r3, [pc, #88]	; (8016ff8 <__ieee754_pow+0x220>)
 8016f9e:	4598      	cmp	r8, r3
 8016fa0:	f340 80fe 	ble.w	80171a0 <__ieee754_pow+0x3c8>
 8016fa4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016fa8:	4598      	cmp	r8, r3
 8016faa:	dd0a      	ble.n	8016fc2 <__ieee754_pow+0x1ea>
 8016fac:	4b0f      	ldr	r3, [pc, #60]	; (8016fec <__ieee754_pow+0x214>)
 8016fae:	429c      	cmp	r4, r3
 8016fb0:	dc0d      	bgt.n	8016fce <__ieee754_pow+0x1f6>
 8016fb2:	f1b9 0f00 	cmp.w	r9, #0
 8016fb6:	f6bf af6d 	bge.w	8016e94 <__ieee754_pow+0xbc>
 8016fba:	a307      	add	r3, pc, #28	; (adr r3, 8016fd8 <__ieee754_pow+0x200>)
 8016fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fc0:	e79f      	b.n	8016f02 <__ieee754_pow+0x12a>
 8016fc2:	4b0e      	ldr	r3, [pc, #56]	; (8016ffc <__ieee754_pow+0x224>)
 8016fc4:	429c      	cmp	r4, r3
 8016fc6:	ddf4      	ble.n	8016fb2 <__ieee754_pow+0x1da>
 8016fc8:	4b09      	ldr	r3, [pc, #36]	; (8016ff0 <__ieee754_pow+0x218>)
 8016fca:	429c      	cmp	r4, r3
 8016fcc:	dd18      	ble.n	8017000 <__ieee754_pow+0x228>
 8016fce:	f1b9 0f00 	cmp.w	r9, #0
 8016fd2:	dcf2      	bgt.n	8016fba <__ieee754_pow+0x1e2>
 8016fd4:	e75e      	b.n	8016e94 <__ieee754_pow+0xbc>
 8016fd6:	bf00      	nop
 8016fd8:	8800759c 	.word	0x8800759c
 8016fdc:	7e37e43c 	.word	0x7e37e43c
 8016fe0:	7ff00000 	.word	0x7ff00000
 8016fe4:	0803e863 	.word	0x0803e863
 8016fe8:	433fffff 	.word	0x433fffff
 8016fec:	3fefffff 	.word	0x3fefffff
 8016ff0:	3ff00000 	.word	0x3ff00000
 8016ff4:	3fe00000 	.word	0x3fe00000
 8016ff8:	41e00000 	.word	0x41e00000
 8016ffc:	3feffffe 	.word	0x3feffffe
 8017000:	2200      	movs	r2, #0
 8017002:	4b63      	ldr	r3, [pc, #396]	; (8017190 <__ieee754_pow+0x3b8>)
 8017004:	f7e9 f958 	bl	80002b8 <__aeabi_dsub>
 8017008:	a355      	add	r3, pc, #340	; (adr r3, 8017160 <__ieee754_pow+0x388>)
 801700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801700e:	4604      	mov	r4, r0
 8017010:	460d      	mov	r5, r1
 8017012:	f7e9 fb09 	bl	8000628 <__aeabi_dmul>
 8017016:	a354      	add	r3, pc, #336	; (adr r3, 8017168 <__ieee754_pow+0x390>)
 8017018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801701c:	4606      	mov	r6, r0
 801701e:	460f      	mov	r7, r1
 8017020:	4620      	mov	r0, r4
 8017022:	4629      	mov	r1, r5
 8017024:	f7e9 fb00 	bl	8000628 <__aeabi_dmul>
 8017028:	2200      	movs	r2, #0
 801702a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801702e:	4b59      	ldr	r3, [pc, #356]	; (8017194 <__ieee754_pow+0x3bc>)
 8017030:	4620      	mov	r0, r4
 8017032:	4629      	mov	r1, r5
 8017034:	f7e9 faf8 	bl	8000628 <__aeabi_dmul>
 8017038:	4602      	mov	r2, r0
 801703a:	460b      	mov	r3, r1
 801703c:	a14c      	add	r1, pc, #304	; (adr r1, 8017170 <__ieee754_pow+0x398>)
 801703e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017042:	f7e9 f939 	bl	80002b8 <__aeabi_dsub>
 8017046:	4622      	mov	r2, r4
 8017048:	462b      	mov	r3, r5
 801704a:	f7e9 faed 	bl	8000628 <__aeabi_dmul>
 801704e:	4602      	mov	r2, r0
 8017050:	460b      	mov	r3, r1
 8017052:	2000      	movs	r0, #0
 8017054:	4950      	ldr	r1, [pc, #320]	; (8017198 <__ieee754_pow+0x3c0>)
 8017056:	f7e9 f92f 	bl	80002b8 <__aeabi_dsub>
 801705a:	4622      	mov	r2, r4
 801705c:	462b      	mov	r3, r5
 801705e:	4680      	mov	r8, r0
 8017060:	4689      	mov	r9, r1
 8017062:	4620      	mov	r0, r4
 8017064:	4629      	mov	r1, r5
 8017066:	f7e9 fadf 	bl	8000628 <__aeabi_dmul>
 801706a:	4602      	mov	r2, r0
 801706c:	460b      	mov	r3, r1
 801706e:	4640      	mov	r0, r8
 8017070:	4649      	mov	r1, r9
 8017072:	f7e9 fad9 	bl	8000628 <__aeabi_dmul>
 8017076:	a340      	add	r3, pc, #256	; (adr r3, 8017178 <__ieee754_pow+0x3a0>)
 8017078:	e9d3 2300 	ldrd	r2, r3, [r3]
 801707c:	f7e9 fad4 	bl	8000628 <__aeabi_dmul>
 8017080:	4602      	mov	r2, r0
 8017082:	460b      	mov	r3, r1
 8017084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017088:	f7e9 f916 	bl	80002b8 <__aeabi_dsub>
 801708c:	4602      	mov	r2, r0
 801708e:	460b      	mov	r3, r1
 8017090:	4604      	mov	r4, r0
 8017092:	460d      	mov	r5, r1
 8017094:	4630      	mov	r0, r6
 8017096:	4639      	mov	r1, r7
 8017098:	f7e9 f910 	bl	80002bc <__adddf3>
 801709c:	2000      	movs	r0, #0
 801709e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80170a2:	4632      	mov	r2, r6
 80170a4:	463b      	mov	r3, r7
 80170a6:	f7e9 f907 	bl	80002b8 <__aeabi_dsub>
 80170aa:	4602      	mov	r2, r0
 80170ac:	460b      	mov	r3, r1
 80170ae:	4620      	mov	r0, r4
 80170b0:	4629      	mov	r1, r5
 80170b2:	f7e9 f901 	bl	80002b8 <__aeabi_dsub>
 80170b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80170b8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80170bc:	4313      	orrs	r3, r2
 80170be:	4606      	mov	r6, r0
 80170c0:	460f      	mov	r7, r1
 80170c2:	f040 81eb 	bne.w	801749c <__ieee754_pow+0x6c4>
 80170c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017180 <__ieee754_pow+0x3a8>
 80170ca:	e9dd 4500 	ldrd	r4, r5, [sp]
 80170ce:	2400      	movs	r4, #0
 80170d0:	4622      	mov	r2, r4
 80170d2:	462b      	mov	r3, r5
 80170d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80170dc:	f7e9 f8ec 	bl	80002b8 <__aeabi_dsub>
 80170e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80170e4:	f7e9 faa0 	bl	8000628 <__aeabi_dmul>
 80170e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80170ec:	4680      	mov	r8, r0
 80170ee:	4689      	mov	r9, r1
 80170f0:	4630      	mov	r0, r6
 80170f2:	4639      	mov	r1, r7
 80170f4:	f7e9 fa98 	bl	8000628 <__aeabi_dmul>
 80170f8:	4602      	mov	r2, r0
 80170fa:	460b      	mov	r3, r1
 80170fc:	4640      	mov	r0, r8
 80170fe:	4649      	mov	r1, r9
 8017100:	f7e9 f8dc 	bl	80002bc <__adddf3>
 8017104:	4622      	mov	r2, r4
 8017106:	462b      	mov	r3, r5
 8017108:	4680      	mov	r8, r0
 801710a:	4689      	mov	r9, r1
 801710c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017110:	f7e9 fa8a 	bl	8000628 <__aeabi_dmul>
 8017114:	460b      	mov	r3, r1
 8017116:	4604      	mov	r4, r0
 8017118:	460d      	mov	r5, r1
 801711a:	4602      	mov	r2, r0
 801711c:	4649      	mov	r1, r9
 801711e:	4640      	mov	r0, r8
 8017120:	e9cd 4500 	strd	r4, r5, [sp]
 8017124:	f7e9 f8ca 	bl	80002bc <__adddf3>
 8017128:	4b1c      	ldr	r3, [pc, #112]	; (801719c <__ieee754_pow+0x3c4>)
 801712a:	4299      	cmp	r1, r3
 801712c:	4606      	mov	r6, r0
 801712e:	460f      	mov	r7, r1
 8017130:	468b      	mov	fp, r1
 8017132:	f340 82f7 	ble.w	8017724 <__ieee754_pow+0x94c>
 8017136:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801713a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801713e:	4303      	orrs	r3, r0
 8017140:	f000 81ea 	beq.w	8017518 <__ieee754_pow+0x740>
 8017144:	a310      	add	r3, pc, #64	; (adr r3, 8017188 <__ieee754_pow+0x3b0>)
 8017146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801714e:	f7e9 fa6b 	bl	8000628 <__aeabi_dmul>
 8017152:	a30d      	add	r3, pc, #52	; (adr r3, 8017188 <__ieee754_pow+0x3b0>)
 8017154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017158:	e6d5      	b.n	8016f06 <__ieee754_pow+0x12e>
 801715a:	bf00      	nop
 801715c:	f3af 8000 	nop.w
 8017160:	60000000 	.word	0x60000000
 8017164:	3ff71547 	.word	0x3ff71547
 8017168:	f85ddf44 	.word	0xf85ddf44
 801716c:	3e54ae0b 	.word	0x3e54ae0b
 8017170:	55555555 	.word	0x55555555
 8017174:	3fd55555 	.word	0x3fd55555
 8017178:	652b82fe 	.word	0x652b82fe
 801717c:	3ff71547 	.word	0x3ff71547
 8017180:	00000000 	.word	0x00000000
 8017184:	bff00000 	.word	0xbff00000
 8017188:	8800759c 	.word	0x8800759c
 801718c:	7e37e43c 	.word	0x7e37e43c
 8017190:	3ff00000 	.word	0x3ff00000
 8017194:	3fd00000 	.word	0x3fd00000
 8017198:	3fe00000 	.word	0x3fe00000
 801719c:	408fffff 	.word	0x408fffff
 80171a0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80171a4:	f04f 0200 	mov.w	r2, #0
 80171a8:	da05      	bge.n	80171b6 <__ieee754_pow+0x3de>
 80171aa:	4bd3      	ldr	r3, [pc, #844]	; (80174f8 <__ieee754_pow+0x720>)
 80171ac:	f7e9 fa3c 	bl	8000628 <__aeabi_dmul>
 80171b0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80171b4:	460c      	mov	r4, r1
 80171b6:	1523      	asrs	r3, r4, #20
 80171b8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80171bc:	4413      	add	r3, r2
 80171be:	9309      	str	r3, [sp, #36]	; 0x24
 80171c0:	4bce      	ldr	r3, [pc, #824]	; (80174fc <__ieee754_pow+0x724>)
 80171c2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80171c6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80171ca:	429c      	cmp	r4, r3
 80171cc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80171d0:	dd08      	ble.n	80171e4 <__ieee754_pow+0x40c>
 80171d2:	4bcb      	ldr	r3, [pc, #812]	; (8017500 <__ieee754_pow+0x728>)
 80171d4:	429c      	cmp	r4, r3
 80171d6:	f340 815e 	ble.w	8017496 <__ieee754_pow+0x6be>
 80171da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171dc:	3301      	adds	r3, #1
 80171de:	9309      	str	r3, [sp, #36]	; 0x24
 80171e0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80171e4:	f04f 0a00 	mov.w	sl, #0
 80171e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80171ec:	930c      	str	r3, [sp, #48]	; 0x30
 80171ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80171f0:	4bc4      	ldr	r3, [pc, #784]	; (8017504 <__ieee754_pow+0x72c>)
 80171f2:	4413      	add	r3, r2
 80171f4:	ed93 7b00 	vldr	d7, [r3]
 80171f8:	4629      	mov	r1, r5
 80171fa:	ec53 2b17 	vmov	r2, r3, d7
 80171fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017202:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017206:	f7e9 f857 	bl	80002b8 <__aeabi_dsub>
 801720a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801720e:	4606      	mov	r6, r0
 8017210:	460f      	mov	r7, r1
 8017212:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017216:	f7e9 f851 	bl	80002bc <__adddf3>
 801721a:	4602      	mov	r2, r0
 801721c:	460b      	mov	r3, r1
 801721e:	2000      	movs	r0, #0
 8017220:	49b9      	ldr	r1, [pc, #740]	; (8017508 <__ieee754_pow+0x730>)
 8017222:	f7e9 fb2b 	bl	800087c <__aeabi_ddiv>
 8017226:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801722a:	4602      	mov	r2, r0
 801722c:	460b      	mov	r3, r1
 801722e:	4630      	mov	r0, r6
 8017230:	4639      	mov	r1, r7
 8017232:	f7e9 f9f9 	bl	8000628 <__aeabi_dmul>
 8017236:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801723a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801723e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017242:	2300      	movs	r3, #0
 8017244:	9302      	str	r3, [sp, #8]
 8017246:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801724a:	106d      	asrs	r5, r5, #1
 801724c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017250:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017254:	2200      	movs	r2, #0
 8017256:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801725a:	4640      	mov	r0, r8
 801725c:	4649      	mov	r1, r9
 801725e:	4614      	mov	r4, r2
 8017260:	461d      	mov	r5, r3
 8017262:	f7e9 f9e1 	bl	8000628 <__aeabi_dmul>
 8017266:	4602      	mov	r2, r0
 8017268:	460b      	mov	r3, r1
 801726a:	4630      	mov	r0, r6
 801726c:	4639      	mov	r1, r7
 801726e:	f7e9 f823 	bl	80002b8 <__aeabi_dsub>
 8017272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017276:	4606      	mov	r6, r0
 8017278:	460f      	mov	r7, r1
 801727a:	4620      	mov	r0, r4
 801727c:	4629      	mov	r1, r5
 801727e:	f7e9 f81b 	bl	80002b8 <__aeabi_dsub>
 8017282:	4602      	mov	r2, r0
 8017284:	460b      	mov	r3, r1
 8017286:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801728a:	f7e9 f815 	bl	80002b8 <__aeabi_dsub>
 801728e:	4642      	mov	r2, r8
 8017290:	464b      	mov	r3, r9
 8017292:	f7e9 f9c9 	bl	8000628 <__aeabi_dmul>
 8017296:	4602      	mov	r2, r0
 8017298:	460b      	mov	r3, r1
 801729a:	4630      	mov	r0, r6
 801729c:	4639      	mov	r1, r7
 801729e:	f7e9 f80b 	bl	80002b8 <__aeabi_dsub>
 80172a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80172a6:	f7e9 f9bf 	bl	8000628 <__aeabi_dmul>
 80172aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80172ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80172b2:	4610      	mov	r0, r2
 80172b4:	4619      	mov	r1, r3
 80172b6:	f7e9 f9b7 	bl	8000628 <__aeabi_dmul>
 80172ba:	a37b      	add	r3, pc, #492	; (adr r3, 80174a8 <__ieee754_pow+0x6d0>)
 80172bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172c0:	4604      	mov	r4, r0
 80172c2:	460d      	mov	r5, r1
 80172c4:	f7e9 f9b0 	bl	8000628 <__aeabi_dmul>
 80172c8:	a379      	add	r3, pc, #484	; (adr r3, 80174b0 <__ieee754_pow+0x6d8>)
 80172ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172ce:	f7e8 fff5 	bl	80002bc <__adddf3>
 80172d2:	4622      	mov	r2, r4
 80172d4:	462b      	mov	r3, r5
 80172d6:	f7e9 f9a7 	bl	8000628 <__aeabi_dmul>
 80172da:	a377      	add	r3, pc, #476	; (adr r3, 80174b8 <__ieee754_pow+0x6e0>)
 80172dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172e0:	f7e8 ffec 	bl	80002bc <__adddf3>
 80172e4:	4622      	mov	r2, r4
 80172e6:	462b      	mov	r3, r5
 80172e8:	f7e9 f99e 	bl	8000628 <__aeabi_dmul>
 80172ec:	a374      	add	r3, pc, #464	; (adr r3, 80174c0 <__ieee754_pow+0x6e8>)
 80172ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f2:	f7e8 ffe3 	bl	80002bc <__adddf3>
 80172f6:	4622      	mov	r2, r4
 80172f8:	462b      	mov	r3, r5
 80172fa:	f7e9 f995 	bl	8000628 <__aeabi_dmul>
 80172fe:	a372      	add	r3, pc, #456	; (adr r3, 80174c8 <__ieee754_pow+0x6f0>)
 8017300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017304:	f7e8 ffda 	bl	80002bc <__adddf3>
 8017308:	4622      	mov	r2, r4
 801730a:	462b      	mov	r3, r5
 801730c:	f7e9 f98c 	bl	8000628 <__aeabi_dmul>
 8017310:	a36f      	add	r3, pc, #444	; (adr r3, 80174d0 <__ieee754_pow+0x6f8>)
 8017312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017316:	f7e8 ffd1 	bl	80002bc <__adddf3>
 801731a:	4622      	mov	r2, r4
 801731c:	4606      	mov	r6, r0
 801731e:	460f      	mov	r7, r1
 8017320:	462b      	mov	r3, r5
 8017322:	4620      	mov	r0, r4
 8017324:	4629      	mov	r1, r5
 8017326:	f7e9 f97f 	bl	8000628 <__aeabi_dmul>
 801732a:	4602      	mov	r2, r0
 801732c:	460b      	mov	r3, r1
 801732e:	4630      	mov	r0, r6
 8017330:	4639      	mov	r1, r7
 8017332:	f7e9 f979 	bl	8000628 <__aeabi_dmul>
 8017336:	4642      	mov	r2, r8
 8017338:	4604      	mov	r4, r0
 801733a:	460d      	mov	r5, r1
 801733c:	464b      	mov	r3, r9
 801733e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017342:	f7e8 ffbb 	bl	80002bc <__adddf3>
 8017346:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801734a:	f7e9 f96d 	bl	8000628 <__aeabi_dmul>
 801734e:	4622      	mov	r2, r4
 8017350:	462b      	mov	r3, r5
 8017352:	f7e8 ffb3 	bl	80002bc <__adddf3>
 8017356:	4642      	mov	r2, r8
 8017358:	4606      	mov	r6, r0
 801735a:	460f      	mov	r7, r1
 801735c:	464b      	mov	r3, r9
 801735e:	4640      	mov	r0, r8
 8017360:	4649      	mov	r1, r9
 8017362:	f7e9 f961 	bl	8000628 <__aeabi_dmul>
 8017366:	2200      	movs	r2, #0
 8017368:	4b68      	ldr	r3, [pc, #416]	; (801750c <__ieee754_pow+0x734>)
 801736a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801736e:	f7e8 ffa5 	bl	80002bc <__adddf3>
 8017372:	4632      	mov	r2, r6
 8017374:	463b      	mov	r3, r7
 8017376:	f7e8 ffa1 	bl	80002bc <__adddf3>
 801737a:	9802      	ldr	r0, [sp, #8]
 801737c:	460d      	mov	r5, r1
 801737e:	4604      	mov	r4, r0
 8017380:	4602      	mov	r2, r0
 8017382:	460b      	mov	r3, r1
 8017384:	4640      	mov	r0, r8
 8017386:	4649      	mov	r1, r9
 8017388:	f7e9 f94e 	bl	8000628 <__aeabi_dmul>
 801738c:	2200      	movs	r2, #0
 801738e:	4680      	mov	r8, r0
 8017390:	4689      	mov	r9, r1
 8017392:	4b5e      	ldr	r3, [pc, #376]	; (801750c <__ieee754_pow+0x734>)
 8017394:	4620      	mov	r0, r4
 8017396:	4629      	mov	r1, r5
 8017398:	f7e8 ff8e 	bl	80002b8 <__aeabi_dsub>
 801739c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80173a0:	f7e8 ff8a 	bl	80002b8 <__aeabi_dsub>
 80173a4:	4602      	mov	r2, r0
 80173a6:	460b      	mov	r3, r1
 80173a8:	4630      	mov	r0, r6
 80173aa:	4639      	mov	r1, r7
 80173ac:	f7e8 ff84 	bl	80002b8 <__aeabi_dsub>
 80173b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80173b4:	f7e9 f938 	bl	8000628 <__aeabi_dmul>
 80173b8:	4622      	mov	r2, r4
 80173ba:	4606      	mov	r6, r0
 80173bc:	460f      	mov	r7, r1
 80173be:	462b      	mov	r3, r5
 80173c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80173c4:	f7e9 f930 	bl	8000628 <__aeabi_dmul>
 80173c8:	4602      	mov	r2, r0
 80173ca:	460b      	mov	r3, r1
 80173cc:	4630      	mov	r0, r6
 80173ce:	4639      	mov	r1, r7
 80173d0:	f7e8 ff74 	bl	80002bc <__adddf3>
 80173d4:	4606      	mov	r6, r0
 80173d6:	460f      	mov	r7, r1
 80173d8:	4602      	mov	r2, r0
 80173da:	460b      	mov	r3, r1
 80173dc:	4640      	mov	r0, r8
 80173de:	4649      	mov	r1, r9
 80173e0:	f7e8 ff6c 	bl	80002bc <__adddf3>
 80173e4:	9802      	ldr	r0, [sp, #8]
 80173e6:	a33c      	add	r3, pc, #240	; (adr r3, 80174d8 <__ieee754_pow+0x700>)
 80173e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ec:	4604      	mov	r4, r0
 80173ee:	460d      	mov	r5, r1
 80173f0:	f7e9 f91a 	bl	8000628 <__aeabi_dmul>
 80173f4:	4642      	mov	r2, r8
 80173f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80173fa:	464b      	mov	r3, r9
 80173fc:	4620      	mov	r0, r4
 80173fe:	4629      	mov	r1, r5
 8017400:	f7e8 ff5a 	bl	80002b8 <__aeabi_dsub>
 8017404:	4602      	mov	r2, r0
 8017406:	460b      	mov	r3, r1
 8017408:	4630      	mov	r0, r6
 801740a:	4639      	mov	r1, r7
 801740c:	f7e8 ff54 	bl	80002b8 <__aeabi_dsub>
 8017410:	a333      	add	r3, pc, #204	; (adr r3, 80174e0 <__ieee754_pow+0x708>)
 8017412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017416:	f7e9 f907 	bl	8000628 <__aeabi_dmul>
 801741a:	a333      	add	r3, pc, #204	; (adr r3, 80174e8 <__ieee754_pow+0x710>)
 801741c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017420:	4606      	mov	r6, r0
 8017422:	460f      	mov	r7, r1
 8017424:	4620      	mov	r0, r4
 8017426:	4629      	mov	r1, r5
 8017428:	f7e9 f8fe 	bl	8000628 <__aeabi_dmul>
 801742c:	4602      	mov	r2, r0
 801742e:	460b      	mov	r3, r1
 8017430:	4630      	mov	r0, r6
 8017432:	4639      	mov	r1, r7
 8017434:	f7e8 ff42 	bl	80002bc <__adddf3>
 8017438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801743a:	4b35      	ldr	r3, [pc, #212]	; (8017510 <__ieee754_pow+0x738>)
 801743c:	4413      	add	r3, r2
 801743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017442:	f7e8 ff3b 	bl	80002bc <__adddf3>
 8017446:	4604      	mov	r4, r0
 8017448:	9809      	ldr	r0, [sp, #36]	; 0x24
 801744a:	460d      	mov	r5, r1
 801744c:	f7e9 f882 	bl	8000554 <__aeabi_i2d>
 8017450:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017452:	4b30      	ldr	r3, [pc, #192]	; (8017514 <__ieee754_pow+0x73c>)
 8017454:	4413      	add	r3, r2
 8017456:	e9d3 8900 	ldrd	r8, r9, [r3]
 801745a:	4606      	mov	r6, r0
 801745c:	460f      	mov	r7, r1
 801745e:	4622      	mov	r2, r4
 8017460:	462b      	mov	r3, r5
 8017462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017466:	f7e8 ff29 	bl	80002bc <__adddf3>
 801746a:	4642      	mov	r2, r8
 801746c:	464b      	mov	r3, r9
 801746e:	f7e8 ff25 	bl	80002bc <__adddf3>
 8017472:	4632      	mov	r2, r6
 8017474:	463b      	mov	r3, r7
 8017476:	f7e8 ff21 	bl	80002bc <__adddf3>
 801747a:	9802      	ldr	r0, [sp, #8]
 801747c:	4632      	mov	r2, r6
 801747e:	463b      	mov	r3, r7
 8017480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017484:	f7e8 ff18 	bl	80002b8 <__aeabi_dsub>
 8017488:	4642      	mov	r2, r8
 801748a:	464b      	mov	r3, r9
 801748c:	f7e8 ff14 	bl	80002b8 <__aeabi_dsub>
 8017490:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017494:	e607      	b.n	80170a6 <__ieee754_pow+0x2ce>
 8017496:	f04f 0a01 	mov.w	sl, #1
 801749a:	e6a5      	b.n	80171e8 <__ieee754_pow+0x410>
 801749c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80174f0 <__ieee754_pow+0x718>
 80174a0:	e613      	b.n	80170ca <__ieee754_pow+0x2f2>
 80174a2:	bf00      	nop
 80174a4:	f3af 8000 	nop.w
 80174a8:	4a454eef 	.word	0x4a454eef
 80174ac:	3fca7e28 	.word	0x3fca7e28
 80174b0:	93c9db65 	.word	0x93c9db65
 80174b4:	3fcd864a 	.word	0x3fcd864a
 80174b8:	a91d4101 	.word	0xa91d4101
 80174bc:	3fd17460 	.word	0x3fd17460
 80174c0:	518f264d 	.word	0x518f264d
 80174c4:	3fd55555 	.word	0x3fd55555
 80174c8:	db6fabff 	.word	0xdb6fabff
 80174cc:	3fdb6db6 	.word	0x3fdb6db6
 80174d0:	33333303 	.word	0x33333303
 80174d4:	3fe33333 	.word	0x3fe33333
 80174d8:	e0000000 	.word	0xe0000000
 80174dc:	3feec709 	.word	0x3feec709
 80174e0:	dc3a03fd 	.word	0xdc3a03fd
 80174e4:	3feec709 	.word	0x3feec709
 80174e8:	145b01f5 	.word	0x145b01f5
 80174ec:	be3e2fe0 	.word	0xbe3e2fe0
 80174f0:	00000000 	.word	0x00000000
 80174f4:	3ff00000 	.word	0x3ff00000
 80174f8:	43400000 	.word	0x43400000
 80174fc:	0003988e 	.word	0x0003988e
 8017500:	000bb679 	.word	0x000bb679
 8017504:	0803e5f8 	.word	0x0803e5f8
 8017508:	3ff00000 	.word	0x3ff00000
 801750c:	40080000 	.word	0x40080000
 8017510:	0803e618 	.word	0x0803e618
 8017514:	0803e608 	.word	0x0803e608
 8017518:	a3b4      	add	r3, pc, #720	; (adr r3, 80177ec <__ieee754_pow+0xa14>)
 801751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801751e:	4640      	mov	r0, r8
 8017520:	4649      	mov	r1, r9
 8017522:	f7e8 fecb 	bl	80002bc <__adddf3>
 8017526:	4622      	mov	r2, r4
 8017528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801752c:	462b      	mov	r3, r5
 801752e:	4630      	mov	r0, r6
 8017530:	4639      	mov	r1, r7
 8017532:	f7e8 fec1 	bl	80002b8 <__aeabi_dsub>
 8017536:	4602      	mov	r2, r0
 8017538:	460b      	mov	r3, r1
 801753a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801753e:	f7e9 fb03 	bl	8000b48 <__aeabi_dcmpgt>
 8017542:	2800      	cmp	r0, #0
 8017544:	f47f adfe 	bne.w	8017144 <__ieee754_pow+0x36c>
 8017548:	4aa3      	ldr	r2, [pc, #652]	; (80177d8 <__ieee754_pow+0xa00>)
 801754a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801754e:	4293      	cmp	r3, r2
 8017550:	f340 810a 	ble.w	8017768 <__ieee754_pow+0x990>
 8017554:	151b      	asrs	r3, r3, #20
 8017556:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801755a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801755e:	fa4a f303 	asr.w	r3, sl, r3
 8017562:	445b      	add	r3, fp
 8017564:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017568:	4e9c      	ldr	r6, [pc, #624]	; (80177dc <__ieee754_pow+0xa04>)
 801756a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801756e:	4116      	asrs	r6, r2
 8017570:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017574:	2000      	movs	r0, #0
 8017576:	ea23 0106 	bic.w	r1, r3, r6
 801757a:	f1c2 0214 	rsb	r2, r2, #20
 801757e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017582:	fa4a fa02 	asr.w	sl, sl, r2
 8017586:	f1bb 0f00 	cmp.w	fp, #0
 801758a:	4602      	mov	r2, r0
 801758c:	460b      	mov	r3, r1
 801758e:	4620      	mov	r0, r4
 8017590:	4629      	mov	r1, r5
 8017592:	bfb8      	it	lt
 8017594:	f1ca 0a00 	rsblt	sl, sl, #0
 8017598:	f7e8 fe8e 	bl	80002b8 <__aeabi_dsub>
 801759c:	e9cd 0100 	strd	r0, r1, [sp]
 80175a0:	4642      	mov	r2, r8
 80175a2:	464b      	mov	r3, r9
 80175a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80175a8:	f7e8 fe88 	bl	80002bc <__adddf3>
 80175ac:	2000      	movs	r0, #0
 80175ae:	a378      	add	r3, pc, #480	; (adr r3, 8017790 <__ieee754_pow+0x9b8>)
 80175b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b4:	4604      	mov	r4, r0
 80175b6:	460d      	mov	r5, r1
 80175b8:	f7e9 f836 	bl	8000628 <__aeabi_dmul>
 80175bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80175c0:	4606      	mov	r6, r0
 80175c2:	460f      	mov	r7, r1
 80175c4:	4620      	mov	r0, r4
 80175c6:	4629      	mov	r1, r5
 80175c8:	f7e8 fe76 	bl	80002b8 <__aeabi_dsub>
 80175cc:	4602      	mov	r2, r0
 80175ce:	460b      	mov	r3, r1
 80175d0:	4640      	mov	r0, r8
 80175d2:	4649      	mov	r1, r9
 80175d4:	f7e8 fe70 	bl	80002b8 <__aeabi_dsub>
 80175d8:	a36f      	add	r3, pc, #444	; (adr r3, 8017798 <__ieee754_pow+0x9c0>)
 80175da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175de:	f7e9 f823 	bl	8000628 <__aeabi_dmul>
 80175e2:	a36f      	add	r3, pc, #444	; (adr r3, 80177a0 <__ieee754_pow+0x9c8>)
 80175e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e8:	4680      	mov	r8, r0
 80175ea:	4689      	mov	r9, r1
 80175ec:	4620      	mov	r0, r4
 80175ee:	4629      	mov	r1, r5
 80175f0:	f7e9 f81a 	bl	8000628 <__aeabi_dmul>
 80175f4:	4602      	mov	r2, r0
 80175f6:	460b      	mov	r3, r1
 80175f8:	4640      	mov	r0, r8
 80175fa:	4649      	mov	r1, r9
 80175fc:	f7e8 fe5e 	bl	80002bc <__adddf3>
 8017600:	4604      	mov	r4, r0
 8017602:	460d      	mov	r5, r1
 8017604:	4602      	mov	r2, r0
 8017606:	460b      	mov	r3, r1
 8017608:	4630      	mov	r0, r6
 801760a:	4639      	mov	r1, r7
 801760c:	f7e8 fe56 	bl	80002bc <__adddf3>
 8017610:	4632      	mov	r2, r6
 8017612:	463b      	mov	r3, r7
 8017614:	4680      	mov	r8, r0
 8017616:	4689      	mov	r9, r1
 8017618:	f7e8 fe4e 	bl	80002b8 <__aeabi_dsub>
 801761c:	4602      	mov	r2, r0
 801761e:	460b      	mov	r3, r1
 8017620:	4620      	mov	r0, r4
 8017622:	4629      	mov	r1, r5
 8017624:	f7e8 fe48 	bl	80002b8 <__aeabi_dsub>
 8017628:	4642      	mov	r2, r8
 801762a:	4606      	mov	r6, r0
 801762c:	460f      	mov	r7, r1
 801762e:	464b      	mov	r3, r9
 8017630:	4640      	mov	r0, r8
 8017632:	4649      	mov	r1, r9
 8017634:	f7e8 fff8 	bl	8000628 <__aeabi_dmul>
 8017638:	a35b      	add	r3, pc, #364	; (adr r3, 80177a8 <__ieee754_pow+0x9d0>)
 801763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763e:	4604      	mov	r4, r0
 8017640:	460d      	mov	r5, r1
 8017642:	f7e8 fff1 	bl	8000628 <__aeabi_dmul>
 8017646:	a35a      	add	r3, pc, #360	; (adr r3, 80177b0 <__ieee754_pow+0x9d8>)
 8017648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764c:	f7e8 fe34 	bl	80002b8 <__aeabi_dsub>
 8017650:	4622      	mov	r2, r4
 8017652:	462b      	mov	r3, r5
 8017654:	f7e8 ffe8 	bl	8000628 <__aeabi_dmul>
 8017658:	a357      	add	r3, pc, #348	; (adr r3, 80177b8 <__ieee754_pow+0x9e0>)
 801765a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801765e:	f7e8 fe2d 	bl	80002bc <__adddf3>
 8017662:	4622      	mov	r2, r4
 8017664:	462b      	mov	r3, r5
 8017666:	f7e8 ffdf 	bl	8000628 <__aeabi_dmul>
 801766a:	a355      	add	r3, pc, #340	; (adr r3, 80177c0 <__ieee754_pow+0x9e8>)
 801766c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017670:	f7e8 fe22 	bl	80002b8 <__aeabi_dsub>
 8017674:	4622      	mov	r2, r4
 8017676:	462b      	mov	r3, r5
 8017678:	f7e8 ffd6 	bl	8000628 <__aeabi_dmul>
 801767c:	a352      	add	r3, pc, #328	; (adr r3, 80177c8 <__ieee754_pow+0x9f0>)
 801767e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017682:	f7e8 fe1b 	bl	80002bc <__adddf3>
 8017686:	4622      	mov	r2, r4
 8017688:	462b      	mov	r3, r5
 801768a:	f7e8 ffcd 	bl	8000628 <__aeabi_dmul>
 801768e:	4602      	mov	r2, r0
 8017690:	460b      	mov	r3, r1
 8017692:	4640      	mov	r0, r8
 8017694:	4649      	mov	r1, r9
 8017696:	f7e8 fe0f 	bl	80002b8 <__aeabi_dsub>
 801769a:	4604      	mov	r4, r0
 801769c:	460d      	mov	r5, r1
 801769e:	4602      	mov	r2, r0
 80176a0:	460b      	mov	r3, r1
 80176a2:	4640      	mov	r0, r8
 80176a4:	4649      	mov	r1, r9
 80176a6:	f7e8 ffbf 	bl	8000628 <__aeabi_dmul>
 80176aa:	2200      	movs	r2, #0
 80176ac:	e9cd 0100 	strd	r0, r1, [sp]
 80176b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80176b4:	4620      	mov	r0, r4
 80176b6:	4629      	mov	r1, r5
 80176b8:	f7e8 fdfe 	bl	80002b8 <__aeabi_dsub>
 80176bc:	4602      	mov	r2, r0
 80176be:	460b      	mov	r3, r1
 80176c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80176c4:	f7e9 f8da 	bl	800087c <__aeabi_ddiv>
 80176c8:	4632      	mov	r2, r6
 80176ca:	4604      	mov	r4, r0
 80176cc:	460d      	mov	r5, r1
 80176ce:	463b      	mov	r3, r7
 80176d0:	4640      	mov	r0, r8
 80176d2:	4649      	mov	r1, r9
 80176d4:	f7e8 ffa8 	bl	8000628 <__aeabi_dmul>
 80176d8:	4632      	mov	r2, r6
 80176da:	463b      	mov	r3, r7
 80176dc:	f7e8 fdee 	bl	80002bc <__adddf3>
 80176e0:	4602      	mov	r2, r0
 80176e2:	460b      	mov	r3, r1
 80176e4:	4620      	mov	r0, r4
 80176e6:	4629      	mov	r1, r5
 80176e8:	f7e8 fde6 	bl	80002b8 <__aeabi_dsub>
 80176ec:	4642      	mov	r2, r8
 80176ee:	464b      	mov	r3, r9
 80176f0:	f7e8 fde2 	bl	80002b8 <__aeabi_dsub>
 80176f4:	4602      	mov	r2, r0
 80176f6:	460b      	mov	r3, r1
 80176f8:	2000      	movs	r0, #0
 80176fa:	4939      	ldr	r1, [pc, #228]	; (80177e0 <__ieee754_pow+0xa08>)
 80176fc:	f7e8 fddc 	bl	80002b8 <__aeabi_dsub>
 8017700:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8017704:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017708:	4602      	mov	r2, r0
 801770a:	460b      	mov	r3, r1
 801770c:	da2f      	bge.n	801776e <__ieee754_pow+0x996>
 801770e:	4650      	mov	r0, sl
 8017710:	ec43 2b10 	vmov	d0, r2, r3
 8017714:	f001 fc60 	bl	8018fd8 <scalbn>
 8017718:	ec51 0b10 	vmov	r0, r1, d0
 801771c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017720:	f7ff bbf1 	b.w	8016f06 <__ieee754_pow+0x12e>
 8017724:	4b2f      	ldr	r3, [pc, #188]	; (80177e4 <__ieee754_pow+0xa0c>)
 8017726:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801772a:	429e      	cmp	r6, r3
 801772c:	f77f af0c 	ble.w	8017548 <__ieee754_pow+0x770>
 8017730:	4b2d      	ldr	r3, [pc, #180]	; (80177e8 <__ieee754_pow+0xa10>)
 8017732:	440b      	add	r3, r1
 8017734:	4303      	orrs	r3, r0
 8017736:	d00b      	beq.n	8017750 <__ieee754_pow+0x978>
 8017738:	a325      	add	r3, pc, #148	; (adr r3, 80177d0 <__ieee754_pow+0x9f8>)
 801773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801773e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017742:	f7e8 ff71 	bl	8000628 <__aeabi_dmul>
 8017746:	a322      	add	r3, pc, #136	; (adr r3, 80177d0 <__ieee754_pow+0x9f8>)
 8017748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801774c:	f7ff bbdb 	b.w	8016f06 <__ieee754_pow+0x12e>
 8017750:	4622      	mov	r2, r4
 8017752:	462b      	mov	r3, r5
 8017754:	f7e8 fdb0 	bl	80002b8 <__aeabi_dsub>
 8017758:	4642      	mov	r2, r8
 801775a:	464b      	mov	r3, r9
 801775c:	f7e9 f9ea 	bl	8000b34 <__aeabi_dcmpge>
 8017760:	2800      	cmp	r0, #0
 8017762:	f43f aef1 	beq.w	8017548 <__ieee754_pow+0x770>
 8017766:	e7e7      	b.n	8017738 <__ieee754_pow+0x960>
 8017768:	f04f 0a00 	mov.w	sl, #0
 801776c:	e718      	b.n	80175a0 <__ieee754_pow+0x7c8>
 801776e:	4621      	mov	r1, r4
 8017770:	e7d4      	b.n	801771c <__ieee754_pow+0x944>
 8017772:	2000      	movs	r0, #0
 8017774:	491a      	ldr	r1, [pc, #104]	; (80177e0 <__ieee754_pow+0xa08>)
 8017776:	f7ff bb8f 	b.w	8016e98 <__ieee754_pow+0xc0>
 801777a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801777e:	f7ff bb8b 	b.w	8016e98 <__ieee754_pow+0xc0>
 8017782:	4630      	mov	r0, r6
 8017784:	4639      	mov	r1, r7
 8017786:	f7ff bb87 	b.w	8016e98 <__ieee754_pow+0xc0>
 801778a:	4693      	mov	fp, r2
 801778c:	f7ff bb98 	b.w	8016ec0 <__ieee754_pow+0xe8>
 8017790:	00000000 	.word	0x00000000
 8017794:	3fe62e43 	.word	0x3fe62e43
 8017798:	fefa39ef 	.word	0xfefa39ef
 801779c:	3fe62e42 	.word	0x3fe62e42
 80177a0:	0ca86c39 	.word	0x0ca86c39
 80177a4:	be205c61 	.word	0xbe205c61
 80177a8:	72bea4d0 	.word	0x72bea4d0
 80177ac:	3e663769 	.word	0x3e663769
 80177b0:	c5d26bf1 	.word	0xc5d26bf1
 80177b4:	3ebbbd41 	.word	0x3ebbbd41
 80177b8:	af25de2c 	.word	0xaf25de2c
 80177bc:	3f11566a 	.word	0x3f11566a
 80177c0:	16bebd93 	.word	0x16bebd93
 80177c4:	3f66c16c 	.word	0x3f66c16c
 80177c8:	5555553e 	.word	0x5555553e
 80177cc:	3fc55555 	.word	0x3fc55555
 80177d0:	c2f8f359 	.word	0xc2f8f359
 80177d4:	01a56e1f 	.word	0x01a56e1f
 80177d8:	3fe00000 	.word	0x3fe00000
 80177dc:	000fffff 	.word	0x000fffff
 80177e0:	3ff00000 	.word	0x3ff00000
 80177e4:	4090cbff 	.word	0x4090cbff
 80177e8:	3f6f3400 	.word	0x3f6f3400
 80177ec:	652b82fe 	.word	0x652b82fe
 80177f0:	3c971547 	.word	0x3c971547
 80177f4:	00000000 	.word	0x00000000

080177f8 <__ieee754_rem_pio2>:
 80177f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177fc:	ec57 6b10 	vmov	r6, r7, d0
 8017800:	4bc3      	ldr	r3, [pc, #780]	; (8017b10 <__ieee754_rem_pio2+0x318>)
 8017802:	b08d      	sub	sp, #52	; 0x34
 8017804:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017808:	4598      	cmp	r8, r3
 801780a:	4604      	mov	r4, r0
 801780c:	9704      	str	r7, [sp, #16]
 801780e:	dc07      	bgt.n	8017820 <__ieee754_rem_pio2+0x28>
 8017810:	2200      	movs	r2, #0
 8017812:	2300      	movs	r3, #0
 8017814:	ed84 0b00 	vstr	d0, [r4]
 8017818:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801781c:	2500      	movs	r5, #0
 801781e:	e027      	b.n	8017870 <__ieee754_rem_pio2+0x78>
 8017820:	4bbc      	ldr	r3, [pc, #752]	; (8017b14 <__ieee754_rem_pio2+0x31c>)
 8017822:	4598      	cmp	r8, r3
 8017824:	dc75      	bgt.n	8017912 <__ieee754_rem_pio2+0x11a>
 8017826:	9b04      	ldr	r3, [sp, #16]
 8017828:	4dbb      	ldr	r5, [pc, #748]	; (8017b18 <__ieee754_rem_pio2+0x320>)
 801782a:	2b00      	cmp	r3, #0
 801782c:	ee10 0a10 	vmov	r0, s0
 8017830:	a3a9      	add	r3, pc, #676	; (adr r3, 8017ad8 <__ieee754_rem_pio2+0x2e0>)
 8017832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017836:	4639      	mov	r1, r7
 8017838:	dd36      	ble.n	80178a8 <__ieee754_rem_pio2+0xb0>
 801783a:	f7e8 fd3d 	bl	80002b8 <__aeabi_dsub>
 801783e:	45a8      	cmp	r8, r5
 8017840:	4606      	mov	r6, r0
 8017842:	460f      	mov	r7, r1
 8017844:	d018      	beq.n	8017878 <__ieee754_rem_pio2+0x80>
 8017846:	a3a6      	add	r3, pc, #664	; (adr r3, 8017ae0 <__ieee754_rem_pio2+0x2e8>)
 8017848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801784c:	f7e8 fd34 	bl	80002b8 <__aeabi_dsub>
 8017850:	4602      	mov	r2, r0
 8017852:	460b      	mov	r3, r1
 8017854:	e9c4 2300 	strd	r2, r3, [r4]
 8017858:	4630      	mov	r0, r6
 801785a:	4639      	mov	r1, r7
 801785c:	f7e8 fd2c 	bl	80002b8 <__aeabi_dsub>
 8017860:	a39f      	add	r3, pc, #636	; (adr r3, 8017ae0 <__ieee754_rem_pio2+0x2e8>)
 8017862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017866:	f7e8 fd27 	bl	80002b8 <__aeabi_dsub>
 801786a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801786e:	2501      	movs	r5, #1
 8017870:	4628      	mov	r0, r5
 8017872:	b00d      	add	sp, #52	; 0x34
 8017874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017878:	a39b      	add	r3, pc, #620	; (adr r3, 8017ae8 <__ieee754_rem_pio2+0x2f0>)
 801787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801787e:	f7e8 fd1b 	bl	80002b8 <__aeabi_dsub>
 8017882:	a39b      	add	r3, pc, #620	; (adr r3, 8017af0 <__ieee754_rem_pio2+0x2f8>)
 8017884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017888:	4606      	mov	r6, r0
 801788a:	460f      	mov	r7, r1
 801788c:	f7e8 fd14 	bl	80002b8 <__aeabi_dsub>
 8017890:	4602      	mov	r2, r0
 8017892:	460b      	mov	r3, r1
 8017894:	e9c4 2300 	strd	r2, r3, [r4]
 8017898:	4630      	mov	r0, r6
 801789a:	4639      	mov	r1, r7
 801789c:	f7e8 fd0c 	bl	80002b8 <__aeabi_dsub>
 80178a0:	a393      	add	r3, pc, #588	; (adr r3, 8017af0 <__ieee754_rem_pio2+0x2f8>)
 80178a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178a6:	e7de      	b.n	8017866 <__ieee754_rem_pio2+0x6e>
 80178a8:	f7e8 fd08 	bl	80002bc <__adddf3>
 80178ac:	45a8      	cmp	r8, r5
 80178ae:	4606      	mov	r6, r0
 80178b0:	460f      	mov	r7, r1
 80178b2:	d016      	beq.n	80178e2 <__ieee754_rem_pio2+0xea>
 80178b4:	a38a      	add	r3, pc, #552	; (adr r3, 8017ae0 <__ieee754_rem_pio2+0x2e8>)
 80178b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ba:	f7e8 fcff 	bl	80002bc <__adddf3>
 80178be:	4602      	mov	r2, r0
 80178c0:	460b      	mov	r3, r1
 80178c2:	e9c4 2300 	strd	r2, r3, [r4]
 80178c6:	4630      	mov	r0, r6
 80178c8:	4639      	mov	r1, r7
 80178ca:	f7e8 fcf5 	bl	80002b8 <__aeabi_dsub>
 80178ce:	a384      	add	r3, pc, #528	; (adr r3, 8017ae0 <__ieee754_rem_pio2+0x2e8>)
 80178d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d4:	f7e8 fcf2 	bl	80002bc <__adddf3>
 80178d8:	f04f 35ff 	mov.w	r5, #4294967295
 80178dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80178e0:	e7c6      	b.n	8017870 <__ieee754_rem_pio2+0x78>
 80178e2:	a381      	add	r3, pc, #516	; (adr r3, 8017ae8 <__ieee754_rem_pio2+0x2f0>)
 80178e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e8:	f7e8 fce8 	bl	80002bc <__adddf3>
 80178ec:	a380      	add	r3, pc, #512	; (adr r3, 8017af0 <__ieee754_rem_pio2+0x2f8>)
 80178ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f2:	4606      	mov	r6, r0
 80178f4:	460f      	mov	r7, r1
 80178f6:	f7e8 fce1 	bl	80002bc <__adddf3>
 80178fa:	4602      	mov	r2, r0
 80178fc:	460b      	mov	r3, r1
 80178fe:	e9c4 2300 	strd	r2, r3, [r4]
 8017902:	4630      	mov	r0, r6
 8017904:	4639      	mov	r1, r7
 8017906:	f7e8 fcd7 	bl	80002b8 <__aeabi_dsub>
 801790a:	a379      	add	r3, pc, #484	; (adr r3, 8017af0 <__ieee754_rem_pio2+0x2f8>)
 801790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017910:	e7e0      	b.n	80178d4 <__ieee754_rem_pio2+0xdc>
 8017912:	4b82      	ldr	r3, [pc, #520]	; (8017b1c <__ieee754_rem_pio2+0x324>)
 8017914:	4598      	cmp	r8, r3
 8017916:	f300 80d0 	bgt.w	8017aba <__ieee754_rem_pio2+0x2c2>
 801791a:	f001 fabd 	bl	8018e98 <fabs>
 801791e:	ec57 6b10 	vmov	r6, r7, d0
 8017922:	ee10 0a10 	vmov	r0, s0
 8017926:	a374      	add	r3, pc, #464	; (adr r3, 8017af8 <__ieee754_rem_pio2+0x300>)
 8017928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801792c:	4639      	mov	r1, r7
 801792e:	f7e8 fe7b 	bl	8000628 <__aeabi_dmul>
 8017932:	2200      	movs	r2, #0
 8017934:	4b7a      	ldr	r3, [pc, #488]	; (8017b20 <__ieee754_rem_pio2+0x328>)
 8017936:	f7e8 fcc1 	bl	80002bc <__adddf3>
 801793a:	f7e9 f925 	bl	8000b88 <__aeabi_d2iz>
 801793e:	4605      	mov	r5, r0
 8017940:	f7e8 fe08 	bl	8000554 <__aeabi_i2d>
 8017944:	a364      	add	r3, pc, #400	; (adr r3, 8017ad8 <__ieee754_rem_pio2+0x2e0>)
 8017946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801794a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801794e:	f7e8 fe6b 	bl	8000628 <__aeabi_dmul>
 8017952:	4602      	mov	r2, r0
 8017954:	460b      	mov	r3, r1
 8017956:	4630      	mov	r0, r6
 8017958:	4639      	mov	r1, r7
 801795a:	f7e8 fcad 	bl	80002b8 <__aeabi_dsub>
 801795e:	a360      	add	r3, pc, #384	; (adr r3, 8017ae0 <__ieee754_rem_pio2+0x2e8>)
 8017960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017964:	4682      	mov	sl, r0
 8017966:	468b      	mov	fp, r1
 8017968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801796c:	f7e8 fe5c 	bl	8000628 <__aeabi_dmul>
 8017970:	2d1f      	cmp	r5, #31
 8017972:	4606      	mov	r6, r0
 8017974:	460f      	mov	r7, r1
 8017976:	dc0c      	bgt.n	8017992 <__ieee754_rem_pio2+0x19a>
 8017978:	1e6a      	subs	r2, r5, #1
 801797a:	4b6a      	ldr	r3, [pc, #424]	; (8017b24 <__ieee754_rem_pio2+0x32c>)
 801797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017980:	4543      	cmp	r3, r8
 8017982:	d006      	beq.n	8017992 <__ieee754_rem_pio2+0x19a>
 8017984:	4632      	mov	r2, r6
 8017986:	463b      	mov	r3, r7
 8017988:	4650      	mov	r0, sl
 801798a:	4659      	mov	r1, fp
 801798c:	f7e8 fc94 	bl	80002b8 <__aeabi_dsub>
 8017990:	e00e      	b.n	80179b0 <__ieee754_rem_pio2+0x1b8>
 8017992:	4632      	mov	r2, r6
 8017994:	463b      	mov	r3, r7
 8017996:	4650      	mov	r0, sl
 8017998:	4659      	mov	r1, fp
 801799a:	f7e8 fc8d 	bl	80002b8 <__aeabi_dsub>
 801799e:	ea4f 5328 	mov.w	r3, r8, asr #20
 80179a2:	9305      	str	r3, [sp, #20]
 80179a4:	9a05      	ldr	r2, [sp, #20]
 80179a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80179aa:	1ad3      	subs	r3, r2, r3
 80179ac:	2b10      	cmp	r3, #16
 80179ae:	dc02      	bgt.n	80179b6 <__ieee754_rem_pio2+0x1be>
 80179b0:	e9c4 0100 	strd	r0, r1, [r4]
 80179b4:	e039      	b.n	8017a2a <__ieee754_rem_pio2+0x232>
 80179b6:	a34c      	add	r3, pc, #304	; (adr r3, 8017ae8 <__ieee754_rem_pio2+0x2f0>)
 80179b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80179c0:	f7e8 fe32 	bl	8000628 <__aeabi_dmul>
 80179c4:	4606      	mov	r6, r0
 80179c6:	460f      	mov	r7, r1
 80179c8:	4602      	mov	r2, r0
 80179ca:	460b      	mov	r3, r1
 80179cc:	4650      	mov	r0, sl
 80179ce:	4659      	mov	r1, fp
 80179d0:	f7e8 fc72 	bl	80002b8 <__aeabi_dsub>
 80179d4:	4602      	mov	r2, r0
 80179d6:	460b      	mov	r3, r1
 80179d8:	4680      	mov	r8, r0
 80179da:	4689      	mov	r9, r1
 80179dc:	4650      	mov	r0, sl
 80179de:	4659      	mov	r1, fp
 80179e0:	f7e8 fc6a 	bl	80002b8 <__aeabi_dsub>
 80179e4:	4632      	mov	r2, r6
 80179e6:	463b      	mov	r3, r7
 80179e8:	f7e8 fc66 	bl	80002b8 <__aeabi_dsub>
 80179ec:	a340      	add	r3, pc, #256	; (adr r3, 8017af0 <__ieee754_rem_pio2+0x2f8>)
 80179ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f2:	4606      	mov	r6, r0
 80179f4:	460f      	mov	r7, r1
 80179f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80179fa:	f7e8 fe15 	bl	8000628 <__aeabi_dmul>
 80179fe:	4632      	mov	r2, r6
 8017a00:	463b      	mov	r3, r7
 8017a02:	f7e8 fc59 	bl	80002b8 <__aeabi_dsub>
 8017a06:	4602      	mov	r2, r0
 8017a08:	460b      	mov	r3, r1
 8017a0a:	4606      	mov	r6, r0
 8017a0c:	460f      	mov	r7, r1
 8017a0e:	4640      	mov	r0, r8
 8017a10:	4649      	mov	r1, r9
 8017a12:	f7e8 fc51 	bl	80002b8 <__aeabi_dsub>
 8017a16:	9a05      	ldr	r2, [sp, #20]
 8017a18:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017a1c:	1ad3      	subs	r3, r2, r3
 8017a1e:	2b31      	cmp	r3, #49	; 0x31
 8017a20:	dc20      	bgt.n	8017a64 <__ieee754_rem_pio2+0x26c>
 8017a22:	e9c4 0100 	strd	r0, r1, [r4]
 8017a26:	46c2      	mov	sl, r8
 8017a28:	46cb      	mov	fp, r9
 8017a2a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8017a2e:	4650      	mov	r0, sl
 8017a30:	4642      	mov	r2, r8
 8017a32:	464b      	mov	r3, r9
 8017a34:	4659      	mov	r1, fp
 8017a36:	f7e8 fc3f 	bl	80002b8 <__aeabi_dsub>
 8017a3a:	463b      	mov	r3, r7
 8017a3c:	4632      	mov	r2, r6
 8017a3e:	f7e8 fc3b 	bl	80002b8 <__aeabi_dsub>
 8017a42:	9b04      	ldr	r3, [sp, #16]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017a4a:	f6bf af11 	bge.w	8017870 <__ieee754_rem_pio2+0x78>
 8017a4e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017a52:	6063      	str	r3, [r4, #4]
 8017a54:	f8c4 8000 	str.w	r8, [r4]
 8017a58:	60a0      	str	r0, [r4, #8]
 8017a5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017a5e:	60e3      	str	r3, [r4, #12]
 8017a60:	426d      	negs	r5, r5
 8017a62:	e705      	b.n	8017870 <__ieee754_rem_pio2+0x78>
 8017a64:	a326      	add	r3, pc, #152	; (adr r3, 8017b00 <__ieee754_rem_pio2+0x308>)
 8017a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017a6e:	f7e8 fddb 	bl	8000628 <__aeabi_dmul>
 8017a72:	4606      	mov	r6, r0
 8017a74:	460f      	mov	r7, r1
 8017a76:	4602      	mov	r2, r0
 8017a78:	460b      	mov	r3, r1
 8017a7a:	4640      	mov	r0, r8
 8017a7c:	4649      	mov	r1, r9
 8017a7e:	f7e8 fc1b 	bl	80002b8 <__aeabi_dsub>
 8017a82:	4602      	mov	r2, r0
 8017a84:	460b      	mov	r3, r1
 8017a86:	4682      	mov	sl, r0
 8017a88:	468b      	mov	fp, r1
 8017a8a:	4640      	mov	r0, r8
 8017a8c:	4649      	mov	r1, r9
 8017a8e:	f7e8 fc13 	bl	80002b8 <__aeabi_dsub>
 8017a92:	4632      	mov	r2, r6
 8017a94:	463b      	mov	r3, r7
 8017a96:	f7e8 fc0f 	bl	80002b8 <__aeabi_dsub>
 8017a9a:	a31b      	add	r3, pc, #108	; (adr r3, 8017b08 <__ieee754_rem_pio2+0x310>)
 8017a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aa0:	4606      	mov	r6, r0
 8017aa2:	460f      	mov	r7, r1
 8017aa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017aa8:	f7e8 fdbe 	bl	8000628 <__aeabi_dmul>
 8017aac:	4632      	mov	r2, r6
 8017aae:	463b      	mov	r3, r7
 8017ab0:	f7e8 fc02 	bl	80002b8 <__aeabi_dsub>
 8017ab4:	4606      	mov	r6, r0
 8017ab6:	460f      	mov	r7, r1
 8017ab8:	e764      	b.n	8017984 <__ieee754_rem_pio2+0x18c>
 8017aba:	4b1b      	ldr	r3, [pc, #108]	; (8017b28 <__ieee754_rem_pio2+0x330>)
 8017abc:	4598      	cmp	r8, r3
 8017abe:	dd35      	ble.n	8017b2c <__ieee754_rem_pio2+0x334>
 8017ac0:	ee10 2a10 	vmov	r2, s0
 8017ac4:	463b      	mov	r3, r7
 8017ac6:	4630      	mov	r0, r6
 8017ac8:	4639      	mov	r1, r7
 8017aca:	f7e8 fbf5 	bl	80002b8 <__aeabi_dsub>
 8017ace:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017ad2:	e9c4 0100 	strd	r0, r1, [r4]
 8017ad6:	e6a1      	b.n	801781c <__ieee754_rem_pio2+0x24>
 8017ad8:	54400000 	.word	0x54400000
 8017adc:	3ff921fb 	.word	0x3ff921fb
 8017ae0:	1a626331 	.word	0x1a626331
 8017ae4:	3dd0b461 	.word	0x3dd0b461
 8017ae8:	1a600000 	.word	0x1a600000
 8017aec:	3dd0b461 	.word	0x3dd0b461
 8017af0:	2e037073 	.word	0x2e037073
 8017af4:	3ba3198a 	.word	0x3ba3198a
 8017af8:	6dc9c883 	.word	0x6dc9c883
 8017afc:	3fe45f30 	.word	0x3fe45f30
 8017b00:	2e000000 	.word	0x2e000000
 8017b04:	3ba3198a 	.word	0x3ba3198a
 8017b08:	252049c1 	.word	0x252049c1
 8017b0c:	397b839a 	.word	0x397b839a
 8017b10:	3fe921fb 	.word	0x3fe921fb
 8017b14:	4002d97b 	.word	0x4002d97b
 8017b18:	3ff921fb 	.word	0x3ff921fb
 8017b1c:	413921fb 	.word	0x413921fb
 8017b20:	3fe00000 	.word	0x3fe00000
 8017b24:	0803e628 	.word	0x0803e628
 8017b28:	7fefffff 	.word	0x7fefffff
 8017b2c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017b30:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8017b34:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8017b38:	4630      	mov	r0, r6
 8017b3a:	460f      	mov	r7, r1
 8017b3c:	f7e9 f824 	bl	8000b88 <__aeabi_d2iz>
 8017b40:	f7e8 fd08 	bl	8000554 <__aeabi_i2d>
 8017b44:	4602      	mov	r2, r0
 8017b46:	460b      	mov	r3, r1
 8017b48:	4630      	mov	r0, r6
 8017b4a:	4639      	mov	r1, r7
 8017b4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017b50:	f7e8 fbb2 	bl	80002b8 <__aeabi_dsub>
 8017b54:	2200      	movs	r2, #0
 8017b56:	4b1f      	ldr	r3, [pc, #124]	; (8017bd4 <__ieee754_rem_pio2+0x3dc>)
 8017b58:	f7e8 fd66 	bl	8000628 <__aeabi_dmul>
 8017b5c:	460f      	mov	r7, r1
 8017b5e:	4606      	mov	r6, r0
 8017b60:	f7e9 f812 	bl	8000b88 <__aeabi_d2iz>
 8017b64:	f7e8 fcf6 	bl	8000554 <__aeabi_i2d>
 8017b68:	4602      	mov	r2, r0
 8017b6a:	460b      	mov	r3, r1
 8017b6c:	4630      	mov	r0, r6
 8017b6e:	4639      	mov	r1, r7
 8017b70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017b74:	f7e8 fba0 	bl	80002b8 <__aeabi_dsub>
 8017b78:	2200      	movs	r2, #0
 8017b7a:	4b16      	ldr	r3, [pc, #88]	; (8017bd4 <__ieee754_rem_pio2+0x3dc>)
 8017b7c:	f7e8 fd54 	bl	8000628 <__aeabi_dmul>
 8017b80:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017b84:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8017b88:	f04f 0803 	mov.w	r8, #3
 8017b8c:	2600      	movs	r6, #0
 8017b8e:	2700      	movs	r7, #0
 8017b90:	4632      	mov	r2, r6
 8017b92:	463b      	mov	r3, r7
 8017b94:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8017b98:	f108 3aff 	add.w	sl, r8, #4294967295
 8017b9c:	f7e8 ffac 	bl	8000af8 <__aeabi_dcmpeq>
 8017ba0:	b9b0      	cbnz	r0, 8017bd0 <__ieee754_rem_pio2+0x3d8>
 8017ba2:	4b0d      	ldr	r3, [pc, #52]	; (8017bd8 <__ieee754_rem_pio2+0x3e0>)
 8017ba4:	9301      	str	r3, [sp, #4]
 8017ba6:	2302      	movs	r3, #2
 8017ba8:	9300      	str	r3, [sp, #0]
 8017baa:	462a      	mov	r2, r5
 8017bac:	4643      	mov	r3, r8
 8017bae:	4621      	mov	r1, r4
 8017bb0:	a806      	add	r0, sp, #24
 8017bb2:	f000 fba9 	bl	8018308 <__kernel_rem_pio2>
 8017bb6:	9b04      	ldr	r3, [sp, #16]
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	4605      	mov	r5, r0
 8017bbc:	f6bf ae58 	bge.w	8017870 <__ieee754_rem_pio2+0x78>
 8017bc0:	6863      	ldr	r3, [r4, #4]
 8017bc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017bc6:	6063      	str	r3, [r4, #4]
 8017bc8:	68e3      	ldr	r3, [r4, #12]
 8017bca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8017bce:	e746      	b.n	8017a5e <__ieee754_rem_pio2+0x266>
 8017bd0:	46d0      	mov	r8, sl
 8017bd2:	e7dd      	b.n	8017b90 <__ieee754_rem_pio2+0x398>
 8017bd4:	41700000 	.word	0x41700000
 8017bd8:	0803e6a8 	.word	0x0803e6a8

08017bdc <__ieee754_sqrt>:
 8017bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017be0:	4955      	ldr	r1, [pc, #340]	; (8017d38 <__ieee754_sqrt+0x15c>)
 8017be2:	ec55 4b10 	vmov	r4, r5, d0
 8017be6:	43a9      	bics	r1, r5
 8017be8:	462b      	mov	r3, r5
 8017bea:	462a      	mov	r2, r5
 8017bec:	d112      	bne.n	8017c14 <__ieee754_sqrt+0x38>
 8017bee:	ee10 2a10 	vmov	r2, s0
 8017bf2:	ee10 0a10 	vmov	r0, s0
 8017bf6:	4629      	mov	r1, r5
 8017bf8:	f7e8 fd16 	bl	8000628 <__aeabi_dmul>
 8017bfc:	4602      	mov	r2, r0
 8017bfe:	460b      	mov	r3, r1
 8017c00:	4620      	mov	r0, r4
 8017c02:	4629      	mov	r1, r5
 8017c04:	f7e8 fb5a 	bl	80002bc <__adddf3>
 8017c08:	4604      	mov	r4, r0
 8017c0a:	460d      	mov	r5, r1
 8017c0c:	ec45 4b10 	vmov	d0, r4, r5
 8017c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c14:	2d00      	cmp	r5, #0
 8017c16:	ee10 0a10 	vmov	r0, s0
 8017c1a:	4621      	mov	r1, r4
 8017c1c:	dc0f      	bgt.n	8017c3e <__ieee754_sqrt+0x62>
 8017c1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017c22:	4330      	orrs	r0, r6
 8017c24:	d0f2      	beq.n	8017c0c <__ieee754_sqrt+0x30>
 8017c26:	b155      	cbz	r5, 8017c3e <__ieee754_sqrt+0x62>
 8017c28:	ee10 2a10 	vmov	r2, s0
 8017c2c:	4620      	mov	r0, r4
 8017c2e:	4629      	mov	r1, r5
 8017c30:	f7e8 fb42 	bl	80002b8 <__aeabi_dsub>
 8017c34:	4602      	mov	r2, r0
 8017c36:	460b      	mov	r3, r1
 8017c38:	f7e8 fe20 	bl	800087c <__aeabi_ddiv>
 8017c3c:	e7e4      	b.n	8017c08 <__ieee754_sqrt+0x2c>
 8017c3e:	151b      	asrs	r3, r3, #20
 8017c40:	d073      	beq.n	8017d2a <__ieee754_sqrt+0x14e>
 8017c42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017c46:	07dd      	lsls	r5, r3, #31
 8017c48:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017c4c:	bf48      	it	mi
 8017c4e:	0fc8      	lsrmi	r0, r1, #31
 8017c50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8017c54:	bf44      	itt	mi
 8017c56:	0049      	lslmi	r1, r1, #1
 8017c58:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8017c5c:	2500      	movs	r5, #0
 8017c5e:	1058      	asrs	r0, r3, #1
 8017c60:	0fcb      	lsrs	r3, r1, #31
 8017c62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8017c66:	0049      	lsls	r1, r1, #1
 8017c68:	2316      	movs	r3, #22
 8017c6a:	462c      	mov	r4, r5
 8017c6c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8017c70:	19a7      	adds	r7, r4, r6
 8017c72:	4297      	cmp	r7, r2
 8017c74:	bfde      	ittt	le
 8017c76:	19bc      	addle	r4, r7, r6
 8017c78:	1bd2      	suble	r2, r2, r7
 8017c7a:	19ad      	addle	r5, r5, r6
 8017c7c:	0fcf      	lsrs	r7, r1, #31
 8017c7e:	3b01      	subs	r3, #1
 8017c80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8017c84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017c88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017c8c:	d1f0      	bne.n	8017c70 <__ieee754_sqrt+0x94>
 8017c8e:	f04f 0c20 	mov.w	ip, #32
 8017c92:	469e      	mov	lr, r3
 8017c94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8017c98:	42a2      	cmp	r2, r4
 8017c9a:	eb06 070e 	add.w	r7, r6, lr
 8017c9e:	dc02      	bgt.n	8017ca6 <__ieee754_sqrt+0xca>
 8017ca0:	d112      	bne.n	8017cc8 <__ieee754_sqrt+0xec>
 8017ca2:	428f      	cmp	r7, r1
 8017ca4:	d810      	bhi.n	8017cc8 <__ieee754_sqrt+0xec>
 8017ca6:	2f00      	cmp	r7, #0
 8017ca8:	eb07 0e06 	add.w	lr, r7, r6
 8017cac:	da42      	bge.n	8017d34 <__ieee754_sqrt+0x158>
 8017cae:	f1be 0f00 	cmp.w	lr, #0
 8017cb2:	db3f      	blt.n	8017d34 <__ieee754_sqrt+0x158>
 8017cb4:	f104 0801 	add.w	r8, r4, #1
 8017cb8:	1b12      	subs	r2, r2, r4
 8017cba:	428f      	cmp	r7, r1
 8017cbc:	bf88      	it	hi
 8017cbe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8017cc2:	1bc9      	subs	r1, r1, r7
 8017cc4:	4433      	add	r3, r6
 8017cc6:	4644      	mov	r4, r8
 8017cc8:	0052      	lsls	r2, r2, #1
 8017cca:	f1bc 0c01 	subs.w	ip, ip, #1
 8017cce:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8017cd2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017cd6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017cda:	d1dd      	bne.n	8017c98 <__ieee754_sqrt+0xbc>
 8017cdc:	430a      	orrs	r2, r1
 8017cde:	d006      	beq.n	8017cee <__ieee754_sqrt+0x112>
 8017ce0:	1c5c      	adds	r4, r3, #1
 8017ce2:	bf13      	iteet	ne
 8017ce4:	3301      	addne	r3, #1
 8017ce6:	3501      	addeq	r5, #1
 8017ce8:	4663      	moveq	r3, ip
 8017cea:	f023 0301 	bicne.w	r3, r3, #1
 8017cee:	106a      	asrs	r2, r5, #1
 8017cf0:	085b      	lsrs	r3, r3, #1
 8017cf2:	07e9      	lsls	r1, r5, #31
 8017cf4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017cf8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017cfc:	bf48      	it	mi
 8017cfe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8017d02:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8017d06:	461c      	mov	r4, r3
 8017d08:	e780      	b.n	8017c0c <__ieee754_sqrt+0x30>
 8017d0a:	0aca      	lsrs	r2, r1, #11
 8017d0c:	3815      	subs	r0, #21
 8017d0e:	0549      	lsls	r1, r1, #21
 8017d10:	2a00      	cmp	r2, #0
 8017d12:	d0fa      	beq.n	8017d0a <__ieee754_sqrt+0x12e>
 8017d14:	02d6      	lsls	r6, r2, #11
 8017d16:	d50a      	bpl.n	8017d2e <__ieee754_sqrt+0x152>
 8017d18:	f1c3 0420 	rsb	r4, r3, #32
 8017d1c:	fa21 f404 	lsr.w	r4, r1, r4
 8017d20:	1e5d      	subs	r5, r3, #1
 8017d22:	4099      	lsls	r1, r3
 8017d24:	4322      	orrs	r2, r4
 8017d26:	1b43      	subs	r3, r0, r5
 8017d28:	e78b      	b.n	8017c42 <__ieee754_sqrt+0x66>
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	e7f0      	b.n	8017d10 <__ieee754_sqrt+0x134>
 8017d2e:	0052      	lsls	r2, r2, #1
 8017d30:	3301      	adds	r3, #1
 8017d32:	e7ef      	b.n	8017d14 <__ieee754_sqrt+0x138>
 8017d34:	46a0      	mov	r8, r4
 8017d36:	e7bf      	b.n	8017cb8 <__ieee754_sqrt+0xdc>
 8017d38:	7ff00000 	.word	0x7ff00000

08017d3c <__ieee754_expf>:
 8017d3c:	ee10 2a10 	vmov	r2, s0
 8017d40:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8017d44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8017d48:	d902      	bls.n	8017d50 <__ieee754_expf+0x14>
 8017d4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017d4e:	4770      	bx	lr
 8017d50:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8017d54:	d106      	bne.n	8017d64 <__ieee754_expf+0x28>
 8017d56:	eddf 7a51 	vldr	s15, [pc, #324]	; 8017e9c <__ieee754_expf+0x160>
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	bf18      	it	ne
 8017d5e:	eeb0 0a67 	vmovne.f32	s0, s15
 8017d62:	4770      	bx	lr
 8017d64:	484e      	ldr	r0, [pc, #312]	; (8017ea0 <__ieee754_expf+0x164>)
 8017d66:	4282      	cmp	r2, r0
 8017d68:	dd04      	ble.n	8017d74 <__ieee754_expf+0x38>
 8017d6a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8017ea4 <__ieee754_expf+0x168>
 8017d6e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017d72:	4770      	bx	lr
 8017d74:	2a00      	cmp	r2, #0
 8017d76:	da03      	bge.n	8017d80 <__ieee754_expf+0x44>
 8017d78:	4a4b      	ldr	r2, [pc, #300]	; (8017ea8 <__ieee754_expf+0x16c>)
 8017d7a:	4291      	cmp	r1, r2
 8017d7c:	f200 808a 	bhi.w	8017e94 <__ieee754_expf+0x158>
 8017d80:	4a4a      	ldr	r2, [pc, #296]	; (8017eac <__ieee754_expf+0x170>)
 8017d82:	4291      	cmp	r1, r2
 8017d84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8017d88:	d954      	bls.n	8017e34 <__ieee754_expf+0xf8>
 8017d8a:	4a49      	ldr	r2, [pc, #292]	; (8017eb0 <__ieee754_expf+0x174>)
 8017d8c:	4291      	cmp	r1, r2
 8017d8e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8017d92:	d836      	bhi.n	8017e02 <__ieee754_expf+0xc6>
 8017d94:	4947      	ldr	r1, [pc, #284]	; (8017eb4 <__ieee754_expf+0x178>)
 8017d96:	4411      	add	r1, r2
 8017d98:	ed91 7a00 	vldr	s14, [r1]
 8017d9c:	4946      	ldr	r1, [pc, #280]	; (8017eb8 <__ieee754_expf+0x17c>)
 8017d9e:	440a      	add	r2, r1
 8017da0:	edd2 7a00 	vldr	s15, [r2]
 8017da4:	ee30 7a47 	vsub.f32	s14, s0, s14
 8017da8:	f1c3 0201 	rsb	r2, r3, #1
 8017dac:	1ad2      	subs	r2, r2, r3
 8017dae:	ee37 0a67 	vsub.f32	s0, s14, s15
 8017db2:	ee60 6a00 	vmul.f32	s13, s0, s0
 8017db6:	eddf 5a41 	vldr	s11, [pc, #260]	; 8017ebc <__ieee754_expf+0x180>
 8017dba:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8017ec0 <__ieee754_expf+0x184>
 8017dbe:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8017dc2:	eddf 5a40 	vldr	s11, [pc, #256]	; 8017ec4 <__ieee754_expf+0x188>
 8017dc6:	eee5 5a26 	vfma.f32	s11, s10, s13
 8017dca:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8017ec8 <__ieee754_expf+0x18c>
 8017dce:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8017dd2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8017ecc <__ieee754_expf+0x190>
 8017dd6:	eee5 5a26 	vfma.f32	s11, s10, s13
 8017dda:	eeb0 5a40 	vmov.f32	s10, s0
 8017dde:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8017de2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8017de6:	eef0 6a45 	vmov.f32	s13, s10
 8017dea:	ee20 5a05 	vmul.f32	s10, s0, s10
 8017dee:	bb92      	cbnz	r2, 8017e56 <__ieee754_expf+0x11a>
 8017df0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8017df4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8017df8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017dfc:	ee36 0a40 	vsub.f32	s0, s12, s0
 8017e00:	4770      	bx	lr
 8017e02:	4b33      	ldr	r3, [pc, #204]	; (8017ed0 <__ieee754_expf+0x194>)
 8017e04:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8017ed4 <__ieee754_expf+0x198>
 8017e08:	4413      	add	r3, r2
 8017e0a:	edd3 7a00 	vldr	s15, [r3]
 8017e0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017e12:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8017ed8 <__ieee754_expf+0x19c>
 8017e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017e1a:	ee17 2a90 	vmov	r2, s15
 8017e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e22:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017e26:	eeb0 7a40 	vmov.f32	s14, s0
 8017e2a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8017edc <__ieee754_expf+0x1a0>
 8017e2e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8017e32:	e7bc      	b.n	8017dae <__ieee754_expf+0x72>
 8017e34:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8017e38:	d20b      	bcs.n	8017e52 <__ieee754_expf+0x116>
 8017e3a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8017ea4 <__ieee754_expf+0x168>
 8017e3e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8017e42:	eef4 6ac6 	vcmpe.f32	s13, s12
 8017e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e4a:	dd02      	ble.n	8017e52 <__ieee754_expf+0x116>
 8017e4c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8017e50:	4770      	bx	lr
 8017e52:	2200      	movs	r2, #0
 8017e54:	e7ad      	b.n	8017db2 <__ieee754_expf+0x76>
 8017e56:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8017e5a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8017e5e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8017e62:	bfb8      	it	lt
 8017e64:	3264      	addlt	r2, #100	; 0x64
 8017e66:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017e6a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8017e6e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8017e72:	ee17 3a90 	vmov	r3, s15
 8017e76:	bfab      	itete	ge
 8017e78:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8017e7c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8017e80:	ee00 3a10 	vmovge	s0, r3
 8017e84:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 8017ee0 <__ieee754_expf+0x1a4>
 8017e88:	bfbc      	itt	lt
 8017e8a:	ee00 3a10 	vmovlt	s0, r3
 8017e8e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8017e92:	4770      	bx	lr
 8017e94:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8017e9c <__ieee754_expf+0x160>
 8017e98:	4770      	bx	lr
 8017e9a:	bf00      	nop
 8017e9c:	00000000 	.word	0x00000000
 8017ea0:	42b17217 	.word	0x42b17217
 8017ea4:	7149f2ca 	.word	0x7149f2ca
 8017ea8:	42cff1b5 	.word	0x42cff1b5
 8017eac:	3eb17218 	.word	0x3eb17218
 8017eb0:	3f851591 	.word	0x3f851591
 8017eb4:	0803e7b8 	.word	0x0803e7b8
 8017eb8:	0803e7c0 	.word	0x0803e7c0
 8017ebc:	3331bb4c 	.word	0x3331bb4c
 8017ec0:	b5ddea0e 	.word	0xb5ddea0e
 8017ec4:	388ab355 	.word	0x388ab355
 8017ec8:	bb360b61 	.word	0xbb360b61
 8017ecc:	3e2aaaab 	.word	0x3e2aaaab
 8017ed0:	0803e7b0 	.word	0x0803e7b0
 8017ed4:	3fb8aa3b 	.word	0x3fb8aa3b
 8017ed8:	3f317180 	.word	0x3f317180
 8017edc:	3717f7d1 	.word	0x3717f7d1
 8017ee0:	0d800000 	.word	0x0d800000

08017ee4 <__ieee754_logf>:
 8017ee4:	ee10 3a10 	vmov	r3, s0
 8017ee8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8017eec:	d106      	bne.n	8017efc <__ieee754_logf+0x18>
 8017eee:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8018084 <__ieee754_logf+0x1a0>
 8017ef2:	eddf 7a65 	vldr	s15, [pc, #404]	; 8018088 <__ieee754_logf+0x1a4>
 8017ef6:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017efa:	4770      	bx	lr
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	da02      	bge.n	8017f06 <__ieee754_logf+0x22>
 8017f00:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017f04:	e7f5      	b.n	8017ef2 <__ieee754_logf+0xe>
 8017f06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8017f0a:	db02      	blt.n	8017f12 <__ieee754_logf+0x2e>
 8017f0c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017f10:	4770      	bx	lr
 8017f12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8017f16:	bfbf      	itttt	lt
 8017f18:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801808c <__ieee754_logf+0x1a8>
 8017f1c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8017f20:	f06f 0118 	mvnlt.w	r1, #24
 8017f24:	ee17 3a90 	vmovlt	r3, s15
 8017f28:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8017f2c:	bfa8      	it	ge
 8017f2e:	2100      	movge	r1, #0
 8017f30:	3a7f      	subs	r2, #127	; 0x7f
 8017f32:	440a      	add	r2, r1
 8017f34:	4956      	ldr	r1, [pc, #344]	; (8018090 <__ieee754_logf+0x1ac>)
 8017f36:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017f3a:	4419      	add	r1, r3
 8017f3c:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8017f40:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 8017f44:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 8017f48:	4319      	orrs	r1, r3
 8017f4a:	ee07 1a90 	vmov	s15, r1
 8017f4e:	f103 010f 	add.w	r1, r3, #15
 8017f52:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8017f56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8017f5a:	290f      	cmp	r1, #15
 8017f5c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017f60:	dc31      	bgt.n	8017fc6 <__ieee754_logf+0xe2>
 8017f62:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8017f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f6a:	d10f      	bne.n	8017f8c <__ieee754_logf+0xa8>
 8017f6c:	2a00      	cmp	r2, #0
 8017f6e:	f000 8085 	beq.w	801807c <__ieee754_logf+0x198>
 8017f72:	ee07 2a90 	vmov	s15, r2
 8017f76:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8018094 <__ieee754_logf+0x1b0>
 8017f7a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8018098 <__ieee754_logf+0x1b4>
 8017f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f82:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017f86:	eea7 0a87 	vfma.f32	s0, s15, s14
 8017f8a:	4770      	bx	lr
 8017f8c:	eddf 7a43 	vldr	s15, [pc, #268]	; 801809c <__ieee754_logf+0x1b8>
 8017f90:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8017f94:	eea0 7a67 	vfms.f32	s14, s0, s15
 8017f98:	ee60 7a00 	vmul.f32	s15, s0, s0
 8017f9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017fa0:	b912      	cbnz	r2, 8017fa8 <__ieee754_logf+0xc4>
 8017fa2:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017fa6:	4770      	bx	lr
 8017fa8:	ee07 2a90 	vmov	s15, r2
 8017fac:	eddf 6a39 	vldr	s13, [pc, #228]	; 8018094 <__ieee754_logf+0x1b0>
 8017fb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017fb4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017fb8:	ee37 0a40 	vsub.f32	s0, s14, s0
 8017fbc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8018098 <__ieee754_logf+0x1b4>
 8017fc0:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8017fc4:	4770      	bx	lr
 8017fc6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8017fca:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017fce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80180a0 <__ieee754_logf+0x1bc>
 8017fd2:	eddf 4a34 	vldr	s9, [pc, #208]	; 80180a4 <__ieee754_logf+0x1c0>
 8017fd6:	4934      	ldr	r1, [pc, #208]	; (80180a8 <__ieee754_logf+0x1c4>)
 8017fd8:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8017fdc:	4419      	add	r1, r3
 8017fde:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8017fe2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017fe6:	430b      	orrs	r3, r1
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	ee07 2a90 	vmov	s15, r2
 8017fee:	ee26 5a06 	vmul.f32	s10, s12, s12
 8017ff2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017ff6:	ee25 7a05 	vmul.f32	s14, s10, s10
 8017ffa:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80180ac <__ieee754_logf+0x1c8>
 8017ffe:	eee7 7a25 	vfma.f32	s15, s14, s11
 8018002:	eddf 5a2b 	vldr	s11, [pc, #172]	; 80180b0 <__ieee754_logf+0x1cc>
 8018006:	eee7 5a87 	vfma.f32	s11, s15, s14
 801800a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80180b4 <__ieee754_logf+0x1d0>
 801800e:	eee7 7a24 	vfma.f32	s15, s14, s9
 8018012:	eddf 4a29 	vldr	s9, [pc, #164]	; 80180b8 <__ieee754_logf+0x1d4>
 8018016:	eee7 4a87 	vfma.f32	s9, s15, s14
 801801a:	eddf 7a28 	vldr	s15, [pc, #160]	; 80180bc <__ieee754_logf+0x1d8>
 801801e:	eee4 7a87 	vfma.f32	s15, s9, s14
 8018022:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018026:	eee5 7a87 	vfma.f32	s15, s11, s14
 801802a:	dd1c      	ble.n	8018066 <__ieee754_logf+0x182>
 801802c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018030:	ee20 7a07 	vmul.f32	s14, s0, s14
 8018034:	ee27 7a00 	vmul.f32	s14, s14, s0
 8018038:	ee77 7a87 	vadd.f32	s15, s15, s14
 801803c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018040:	b922      	cbnz	r2, 801804c <__ieee754_logf+0x168>
 8018042:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018046:	ee30 0a67 	vsub.f32	s0, s0, s15
 801804a:	4770      	bx	lr
 801804c:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8018094 <__ieee754_logf+0x1b0>
 8018050:	eee6 7a86 	vfma.f32	s15, s13, s12
 8018054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018058:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801805c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8018098 <__ieee754_logf+0x1b4>
 8018060:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8018064:	4770      	bx	lr
 8018066:	ee70 7a67 	vsub.f32	s15, s0, s15
 801806a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801806e:	2a00      	cmp	r2, #0
 8018070:	d0e9      	beq.n	8018046 <__ieee754_logf+0x162>
 8018072:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8018094 <__ieee754_logf+0x1b0>
 8018076:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801807a:	e7ed      	b.n	8018058 <__ieee754_logf+0x174>
 801807c:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8018088 <__ieee754_logf+0x1a4>
 8018080:	4770      	bx	lr
 8018082:	bf00      	nop
 8018084:	cc000000 	.word	0xcc000000
 8018088:	00000000 	.word	0x00000000
 801808c:	4c000000 	.word	0x4c000000
 8018090:	004afb20 	.word	0x004afb20
 8018094:	3717f7d1 	.word	0x3717f7d1
 8018098:	3f317180 	.word	0x3f317180
 801809c:	3eaaaaab 	.word	0x3eaaaaab
 80180a0:	3e1cd04f 	.word	0x3e1cd04f
 80180a4:	3e178897 	.word	0x3e178897
 80180a8:	ffcf5c30 	.word	0xffcf5c30
 80180ac:	3e638e29 	.word	0x3e638e29
 80180b0:	3ecccccd 	.word	0x3ecccccd
 80180b4:	3e3a3325 	.word	0x3e3a3325
 80180b8:	3e924925 	.word	0x3e924925
 80180bc:	3f2aaaab 	.word	0x3f2aaaab

080180c0 <__ieee754_log10f>:
 80180c0:	b508      	push	{r3, lr}
 80180c2:	ee10 2a10 	vmov	r2, s0
 80180c6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80180ca:	ed2d 8b02 	vpush	{d8}
 80180ce:	d108      	bne.n	80180e2 <__ieee754_log10f+0x22>
 80180d0:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8018154 <__ieee754_log10f+0x94>
 80180d4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018158 <__ieee754_log10f+0x98>
 80180d8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80180dc:	ecbd 8b02 	vpop	{d8}
 80180e0:	bd08      	pop	{r3, pc}
 80180e2:	2a00      	cmp	r2, #0
 80180e4:	da02      	bge.n	80180ec <__ieee754_log10f+0x2c>
 80180e6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80180ea:	e7f3      	b.n	80180d4 <__ieee754_log10f+0x14>
 80180ec:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80180f0:	db02      	blt.n	80180f8 <__ieee754_log10f+0x38>
 80180f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80180f6:	e7f1      	b.n	80180dc <__ieee754_log10f+0x1c>
 80180f8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80180fc:	bfbf      	itttt	lt
 80180fe:	eddf 7a17 	vldrlt	s15, [pc, #92]	; 801815c <__ieee754_log10f+0x9c>
 8018102:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8018106:	f06f 0118 	mvnlt.w	r1, #24
 801810a:	ee17 2a90 	vmovlt	r2, s15
 801810e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8018112:	bfa8      	it	ge
 8018114:	2100      	movge	r1, #0
 8018116:	3b7f      	subs	r3, #127	; 0x7f
 8018118:	440b      	add	r3, r1
 801811a:	0fd9      	lsrs	r1, r3, #31
 801811c:	440b      	add	r3, r1
 801811e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8018122:	f1c1 017f 	rsb	r1, r1, #127	; 0x7f
 8018126:	ee07 3a90 	vmov	s15, r3
 801812a:	ea42 53c1 	orr.w	r3, r2, r1, lsl #23
 801812e:	ee00 3a10 	vmov	s0, r3
 8018132:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018136:	f7ff fed5 	bl	8017ee4 <__ieee754_logf>
 801813a:	eddf 7a09 	vldr	s15, [pc, #36]	; 8018160 <__ieee754_log10f+0xa0>
 801813e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018142:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018164 <__ieee754_log10f+0xa4>
 8018146:	eea8 0a27 	vfma.f32	s0, s16, s15
 801814a:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018168 <__ieee754_log10f+0xa8>
 801814e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8018152:	e7c3      	b.n	80180dc <__ieee754_log10f+0x1c>
 8018154:	cc000000 	.word	0xcc000000
 8018158:	00000000 	.word	0x00000000
 801815c:	4c000000 	.word	0x4c000000
 8018160:	3ede5bd9 	.word	0x3ede5bd9
 8018164:	355427db 	.word	0x355427db
 8018168:	3e9a2080 	.word	0x3e9a2080

0801816c <__ieee754_sqrtf>:
 801816c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018170:	4770      	bx	lr
 8018172:	0000      	movs	r0, r0
 8018174:	0000      	movs	r0, r0
	...

08018178 <__kernel_cos>:
 8018178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801817c:	ec59 8b10 	vmov	r8, r9, d0
 8018180:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8018184:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8018188:	ed2d 8b02 	vpush	{d8}
 801818c:	eeb0 8a41 	vmov.f32	s16, s2
 8018190:	eef0 8a61 	vmov.f32	s17, s3
 8018194:	da07      	bge.n	80181a6 <__kernel_cos+0x2e>
 8018196:	ee10 0a10 	vmov	r0, s0
 801819a:	4649      	mov	r1, r9
 801819c:	f7e8 fcf4 	bl	8000b88 <__aeabi_d2iz>
 80181a0:	2800      	cmp	r0, #0
 80181a2:	f000 8089 	beq.w	80182b8 <__kernel_cos+0x140>
 80181a6:	4642      	mov	r2, r8
 80181a8:	464b      	mov	r3, r9
 80181aa:	4640      	mov	r0, r8
 80181ac:	4649      	mov	r1, r9
 80181ae:	f7e8 fa3b 	bl	8000628 <__aeabi_dmul>
 80181b2:	2200      	movs	r2, #0
 80181b4:	4b4e      	ldr	r3, [pc, #312]	; (80182f0 <__kernel_cos+0x178>)
 80181b6:	4604      	mov	r4, r0
 80181b8:	460d      	mov	r5, r1
 80181ba:	f7e8 fa35 	bl	8000628 <__aeabi_dmul>
 80181be:	a340      	add	r3, pc, #256	; (adr r3, 80182c0 <__kernel_cos+0x148>)
 80181c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181c4:	4682      	mov	sl, r0
 80181c6:	468b      	mov	fp, r1
 80181c8:	4620      	mov	r0, r4
 80181ca:	4629      	mov	r1, r5
 80181cc:	f7e8 fa2c 	bl	8000628 <__aeabi_dmul>
 80181d0:	a33d      	add	r3, pc, #244	; (adr r3, 80182c8 <__kernel_cos+0x150>)
 80181d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181d6:	f7e8 f871 	bl	80002bc <__adddf3>
 80181da:	4622      	mov	r2, r4
 80181dc:	462b      	mov	r3, r5
 80181de:	f7e8 fa23 	bl	8000628 <__aeabi_dmul>
 80181e2:	a33b      	add	r3, pc, #236	; (adr r3, 80182d0 <__kernel_cos+0x158>)
 80181e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e8:	f7e8 f866 	bl	80002b8 <__aeabi_dsub>
 80181ec:	4622      	mov	r2, r4
 80181ee:	462b      	mov	r3, r5
 80181f0:	f7e8 fa1a 	bl	8000628 <__aeabi_dmul>
 80181f4:	a338      	add	r3, pc, #224	; (adr r3, 80182d8 <__kernel_cos+0x160>)
 80181f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181fa:	f7e8 f85f 	bl	80002bc <__adddf3>
 80181fe:	4622      	mov	r2, r4
 8018200:	462b      	mov	r3, r5
 8018202:	f7e8 fa11 	bl	8000628 <__aeabi_dmul>
 8018206:	a336      	add	r3, pc, #216	; (adr r3, 80182e0 <__kernel_cos+0x168>)
 8018208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801820c:	f7e8 f854 	bl	80002b8 <__aeabi_dsub>
 8018210:	4622      	mov	r2, r4
 8018212:	462b      	mov	r3, r5
 8018214:	f7e8 fa08 	bl	8000628 <__aeabi_dmul>
 8018218:	a333      	add	r3, pc, #204	; (adr r3, 80182e8 <__kernel_cos+0x170>)
 801821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801821e:	f7e8 f84d 	bl	80002bc <__adddf3>
 8018222:	4622      	mov	r2, r4
 8018224:	462b      	mov	r3, r5
 8018226:	f7e8 f9ff 	bl	8000628 <__aeabi_dmul>
 801822a:	4622      	mov	r2, r4
 801822c:	462b      	mov	r3, r5
 801822e:	f7e8 f9fb 	bl	8000628 <__aeabi_dmul>
 8018232:	ec53 2b18 	vmov	r2, r3, d8
 8018236:	4604      	mov	r4, r0
 8018238:	460d      	mov	r5, r1
 801823a:	4640      	mov	r0, r8
 801823c:	4649      	mov	r1, r9
 801823e:	f7e8 f9f3 	bl	8000628 <__aeabi_dmul>
 8018242:	460b      	mov	r3, r1
 8018244:	4602      	mov	r2, r0
 8018246:	4629      	mov	r1, r5
 8018248:	4620      	mov	r0, r4
 801824a:	f7e8 f835 	bl	80002b8 <__aeabi_dsub>
 801824e:	4b29      	ldr	r3, [pc, #164]	; (80182f4 <__kernel_cos+0x17c>)
 8018250:	429e      	cmp	r6, r3
 8018252:	4680      	mov	r8, r0
 8018254:	4689      	mov	r9, r1
 8018256:	dc11      	bgt.n	801827c <__kernel_cos+0x104>
 8018258:	4602      	mov	r2, r0
 801825a:	460b      	mov	r3, r1
 801825c:	4650      	mov	r0, sl
 801825e:	4659      	mov	r1, fp
 8018260:	f7e8 f82a 	bl	80002b8 <__aeabi_dsub>
 8018264:	460b      	mov	r3, r1
 8018266:	4924      	ldr	r1, [pc, #144]	; (80182f8 <__kernel_cos+0x180>)
 8018268:	4602      	mov	r2, r0
 801826a:	2000      	movs	r0, #0
 801826c:	f7e8 f824 	bl	80002b8 <__aeabi_dsub>
 8018270:	ecbd 8b02 	vpop	{d8}
 8018274:	ec41 0b10 	vmov	d0, r0, r1
 8018278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801827c:	4b1f      	ldr	r3, [pc, #124]	; (80182fc <__kernel_cos+0x184>)
 801827e:	491e      	ldr	r1, [pc, #120]	; (80182f8 <__kernel_cos+0x180>)
 8018280:	429e      	cmp	r6, r3
 8018282:	bfcc      	ite	gt
 8018284:	4d1e      	ldrgt	r5, [pc, #120]	; (8018300 <__kernel_cos+0x188>)
 8018286:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801828a:	2400      	movs	r4, #0
 801828c:	4622      	mov	r2, r4
 801828e:	462b      	mov	r3, r5
 8018290:	2000      	movs	r0, #0
 8018292:	f7e8 f811 	bl	80002b8 <__aeabi_dsub>
 8018296:	4622      	mov	r2, r4
 8018298:	4606      	mov	r6, r0
 801829a:	460f      	mov	r7, r1
 801829c:	462b      	mov	r3, r5
 801829e:	4650      	mov	r0, sl
 80182a0:	4659      	mov	r1, fp
 80182a2:	f7e8 f809 	bl	80002b8 <__aeabi_dsub>
 80182a6:	4642      	mov	r2, r8
 80182a8:	464b      	mov	r3, r9
 80182aa:	f7e8 f805 	bl	80002b8 <__aeabi_dsub>
 80182ae:	4602      	mov	r2, r0
 80182b0:	460b      	mov	r3, r1
 80182b2:	4630      	mov	r0, r6
 80182b4:	4639      	mov	r1, r7
 80182b6:	e7d9      	b.n	801826c <__kernel_cos+0xf4>
 80182b8:	2000      	movs	r0, #0
 80182ba:	490f      	ldr	r1, [pc, #60]	; (80182f8 <__kernel_cos+0x180>)
 80182bc:	e7d8      	b.n	8018270 <__kernel_cos+0xf8>
 80182be:	bf00      	nop
 80182c0:	be8838d4 	.word	0xbe8838d4
 80182c4:	bda8fae9 	.word	0xbda8fae9
 80182c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80182cc:	3e21ee9e 	.word	0x3e21ee9e
 80182d0:	809c52ad 	.word	0x809c52ad
 80182d4:	3e927e4f 	.word	0x3e927e4f
 80182d8:	19cb1590 	.word	0x19cb1590
 80182dc:	3efa01a0 	.word	0x3efa01a0
 80182e0:	16c15177 	.word	0x16c15177
 80182e4:	3f56c16c 	.word	0x3f56c16c
 80182e8:	5555554c 	.word	0x5555554c
 80182ec:	3fa55555 	.word	0x3fa55555
 80182f0:	3fe00000 	.word	0x3fe00000
 80182f4:	3fd33332 	.word	0x3fd33332
 80182f8:	3ff00000 	.word	0x3ff00000
 80182fc:	3fe90000 	.word	0x3fe90000
 8018300:	3fd20000 	.word	0x3fd20000
 8018304:	00000000 	.word	0x00000000

08018308 <__kernel_rem_pio2>:
 8018308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801830c:	ed2d 8b02 	vpush	{d8}
 8018310:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8018314:	1ed4      	subs	r4, r2, #3
 8018316:	9308      	str	r3, [sp, #32]
 8018318:	9101      	str	r1, [sp, #4]
 801831a:	4bc5      	ldr	r3, [pc, #788]	; (8018630 <__kernel_rem_pio2+0x328>)
 801831c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801831e:	9009      	str	r0, [sp, #36]	; 0x24
 8018320:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018324:	9304      	str	r3, [sp, #16]
 8018326:	9b08      	ldr	r3, [sp, #32]
 8018328:	3b01      	subs	r3, #1
 801832a:	9307      	str	r3, [sp, #28]
 801832c:	2318      	movs	r3, #24
 801832e:	fb94 f4f3 	sdiv	r4, r4, r3
 8018332:	f06f 0317 	mvn.w	r3, #23
 8018336:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801833a:	fb04 3303 	mla	r3, r4, r3, r3
 801833e:	eb03 0a02 	add.w	sl, r3, r2
 8018342:	9b04      	ldr	r3, [sp, #16]
 8018344:	9a07      	ldr	r2, [sp, #28]
 8018346:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8018620 <__kernel_rem_pio2+0x318>
 801834a:	eb03 0802 	add.w	r8, r3, r2
 801834e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018350:	1aa7      	subs	r7, r4, r2
 8018352:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8018356:	ae22      	add	r6, sp, #136	; 0x88
 8018358:	2500      	movs	r5, #0
 801835a:	4545      	cmp	r5, r8
 801835c:	dd13      	ble.n	8018386 <__kernel_rem_pio2+0x7e>
 801835e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8018620 <__kernel_rem_pio2+0x318>
 8018362:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8018366:	2600      	movs	r6, #0
 8018368:	9b04      	ldr	r3, [sp, #16]
 801836a:	429e      	cmp	r6, r3
 801836c:	dc32      	bgt.n	80183d4 <__kernel_rem_pio2+0xcc>
 801836e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018370:	9302      	str	r3, [sp, #8]
 8018372:	9b08      	ldr	r3, [sp, #32]
 8018374:	199d      	adds	r5, r3, r6
 8018376:	ab22      	add	r3, sp, #136	; 0x88
 8018378:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801837c:	9306      	str	r3, [sp, #24]
 801837e:	ec59 8b18 	vmov	r8, r9, d8
 8018382:	2700      	movs	r7, #0
 8018384:	e01f      	b.n	80183c6 <__kernel_rem_pio2+0xbe>
 8018386:	42ef      	cmn	r7, r5
 8018388:	d407      	bmi.n	801839a <__kernel_rem_pio2+0x92>
 801838a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801838e:	f7e8 f8e1 	bl	8000554 <__aeabi_i2d>
 8018392:	e8e6 0102 	strd	r0, r1, [r6], #8
 8018396:	3501      	adds	r5, #1
 8018398:	e7df      	b.n	801835a <__kernel_rem_pio2+0x52>
 801839a:	ec51 0b18 	vmov	r0, r1, d8
 801839e:	e7f8      	b.n	8018392 <__kernel_rem_pio2+0x8a>
 80183a0:	9906      	ldr	r1, [sp, #24]
 80183a2:	9d02      	ldr	r5, [sp, #8]
 80183a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80183a8:	9106      	str	r1, [sp, #24]
 80183aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80183ae:	9502      	str	r5, [sp, #8]
 80183b0:	f7e8 f93a 	bl	8000628 <__aeabi_dmul>
 80183b4:	4602      	mov	r2, r0
 80183b6:	460b      	mov	r3, r1
 80183b8:	4640      	mov	r0, r8
 80183ba:	4649      	mov	r1, r9
 80183bc:	f7e7 ff7e 	bl	80002bc <__adddf3>
 80183c0:	3701      	adds	r7, #1
 80183c2:	4680      	mov	r8, r0
 80183c4:	4689      	mov	r9, r1
 80183c6:	9b07      	ldr	r3, [sp, #28]
 80183c8:	429f      	cmp	r7, r3
 80183ca:	dde9      	ble.n	80183a0 <__kernel_rem_pio2+0x98>
 80183cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80183d0:	3601      	adds	r6, #1
 80183d2:	e7c9      	b.n	8018368 <__kernel_rem_pio2+0x60>
 80183d4:	9b04      	ldr	r3, [sp, #16]
 80183d6:	aa0e      	add	r2, sp, #56	; 0x38
 80183d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80183dc:	930c      	str	r3, [sp, #48]	; 0x30
 80183de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80183e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80183e4:	9c04      	ldr	r4, [sp, #16]
 80183e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80183e8:	ab9a      	add	r3, sp, #616	; 0x268
 80183ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80183ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80183f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80183f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80183fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80183fe:	ab9a      	add	r3, sp, #616	; 0x268
 8018400:	445b      	add	r3, fp
 8018402:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8018406:	2500      	movs	r5, #0
 8018408:	1b63      	subs	r3, r4, r5
 801840a:	2b00      	cmp	r3, #0
 801840c:	dc78      	bgt.n	8018500 <__kernel_rem_pio2+0x1f8>
 801840e:	4650      	mov	r0, sl
 8018410:	ec49 8b10 	vmov	d0, r8, r9
 8018414:	f000 fde0 	bl	8018fd8 <scalbn>
 8018418:	ec57 6b10 	vmov	r6, r7, d0
 801841c:	2200      	movs	r2, #0
 801841e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8018422:	ee10 0a10 	vmov	r0, s0
 8018426:	4639      	mov	r1, r7
 8018428:	f7e8 f8fe 	bl	8000628 <__aeabi_dmul>
 801842c:	ec41 0b10 	vmov	d0, r0, r1
 8018430:	f7fe f826 	bl	8016480 <floor>
 8018434:	2200      	movs	r2, #0
 8018436:	ec51 0b10 	vmov	r0, r1, d0
 801843a:	4b7e      	ldr	r3, [pc, #504]	; (8018634 <__kernel_rem_pio2+0x32c>)
 801843c:	f7e8 f8f4 	bl	8000628 <__aeabi_dmul>
 8018440:	4602      	mov	r2, r0
 8018442:	460b      	mov	r3, r1
 8018444:	4630      	mov	r0, r6
 8018446:	4639      	mov	r1, r7
 8018448:	f7e7 ff36 	bl	80002b8 <__aeabi_dsub>
 801844c:	460f      	mov	r7, r1
 801844e:	4606      	mov	r6, r0
 8018450:	f7e8 fb9a 	bl	8000b88 <__aeabi_d2iz>
 8018454:	9006      	str	r0, [sp, #24]
 8018456:	f7e8 f87d 	bl	8000554 <__aeabi_i2d>
 801845a:	4602      	mov	r2, r0
 801845c:	460b      	mov	r3, r1
 801845e:	4630      	mov	r0, r6
 8018460:	4639      	mov	r1, r7
 8018462:	f7e7 ff29 	bl	80002b8 <__aeabi_dsub>
 8018466:	f1ba 0f00 	cmp.w	sl, #0
 801846a:	4606      	mov	r6, r0
 801846c:	460f      	mov	r7, r1
 801846e:	dd6c      	ble.n	801854a <__kernel_rem_pio2+0x242>
 8018470:	1e62      	subs	r2, r4, #1
 8018472:	ab0e      	add	r3, sp, #56	; 0x38
 8018474:	f1ca 0118 	rsb	r1, sl, #24
 8018478:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801847c:	9d06      	ldr	r5, [sp, #24]
 801847e:	fa40 f301 	asr.w	r3, r0, r1
 8018482:	441d      	add	r5, r3
 8018484:	408b      	lsls	r3, r1
 8018486:	1ac0      	subs	r0, r0, r3
 8018488:	ab0e      	add	r3, sp, #56	; 0x38
 801848a:	9506      	str	r5, [sp, #24]
 801848c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8018490:	f1ca 0317 	rsb	r3, sl, #23
 8018494:	fa40 f303 	asr.w	r3, r0, r3
 8018498:	9302      	str	r3, [sp, #8]
 801849a:	9b02      	ldr	r3, [sp, #8]
 801849c:	2b00      	cmp	r3, #0
 801849e:	dd62      	ble.n	8018566 <__kernel_rem_pio2+0x25e>
 80184a0:	9b06      	ldr	r3, [sp, #24]
 80184a2:	2200      	movs	r2, #0
 80184a4:	3301      	adds	r3, #1
 80184a6:	9306      	str	r3, [sp, #24]
 80184a8:	4615      	mov	r5, r2
 80184aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80184ae:	4294      	cmp	r4, r2
 80184b0:	f300 8095 	bgt.w	80185de <__kernel_rem_pio2+0x2d6>
 80184b4:	f1ba 0f00 	cmp.w	sl, #0
 80184b8:	dd07      	ble.n	80184ca <__kernel_rem_pio2+0x1c2>
 80184ba:	f1ba 0f01 	cmp.w	sl, #1
 80184be:	f000 80a2 	beq.w	8018606 <__kernel_rem_pio2+0x2fe>
 80184c2:	f1ba 0f02 	cmp.w	sl, #2
 80184c6:	f000 80c1 	beq.w	801864c <__kernel_rem_pio2+0x344>
 80184ca:	9b02      	ldr	r3, [sp, #8]
 80184cc:	2b02      	cmp	r3, #2
 80184ce:	d14a      	bne.n	8018566 <__kernel_rem_pio2+0x25e>
 80184d0:	4632      	mov	r2, r6
 80184d2:	463b      	mov	r3, r7
 80184d4:	2000      	movs	r0, #0
 80184d6:	4958      	ldr	r1, [pc, #352]	; (8018638 <__kernel_rem_pio2+0x330>)
 80184d8:	f7e7 feee 	bl	80002b8 <__aeabi_dsub>
 80184dc:	4606      	mov	r6, r0
 80184de:	460f      	mov	r7, r1
 80184e0:	2d00      	cmp	r5, #0
 80184e2:	d040      	beq.n	8018566 <__kernel_rem_pio2+0x25e>
 80184e4:	4650      	mov	r0, sl
 80184e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8018628 <__kernel_rem_pio2+0x320>
 80184ea:	f000 fd75 	bl	8018fd8 <scalbn>
 80184ee:	4630      	mov	r0, r6
 80184f0:	4639      	mov	r1, r7
 80184f2:	ec53 2b10 	vmov	r2, r3, d0
 80184f6:	f7e7 fedf 	bl	80002b8 <__aeabi_dsub>
 80184fa:	4606      	mov	r6, r0
 80184fc:	460f      	mov	r7, r1
 80184fe:	e032      	b.n	8018566 <__kernel_rem_pio2+0x25e>
 8018500:	2200      	movs	r2, #0
 8018502:	4b4e      	ldr	r3, [pc, #312]	; (801863c <__kernel_rem_pio2+0x334>)
 8018504:	4640      	mov	r0, r8
 8018506:	4649      	mov	r1, r9
 8018508:	f7e8 f88e 	bl	8000628 <__aeabi_dmul>
 801850c:	f7e8 fb3c 	bl	8000b88 <__aeabi_d2iz>
 8018510:	f7e8 f820 	bl	8000554 <__aeabi_i2d>
 8018514:	2200      	movs	r2, #0
 8018516:	4b4a      	ldr	r3, [pc, #296]	; (8018640 <__kernel_rem_pio2+0x338>)
 8018518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801851c:	f7e8 f884 	bl	8000628 <__aeabi_dmul>
 8018520:	4602      	mov	r2, r0
 8018522:	460b      	mov	r3, r1
 8018524:	4640      	mov	r0, r8
 8018526:	4649      	mov	r1, r9
 8018528:	f7e7 fec6 	bl	80002b8 <__aeabi_dsub>
 801852c:	f7e8 fb2c 	bl	8000b88 <__aeabi_d2iz>
 8018530:	ab0e      	add	r3, sp, #56	; 0x38
 8018532:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8018536:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801853a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801853e:	f7e7 febd 	bl	80002bc <__adddf3>
 8018542:	3501      	adds	r5, #1
 8018544:	4680      	mov	r8, r0
 8018546:	4689      	mov	r9, r1
 8018548:	e75e      	b.n	8018408 <__kernel_rem_pio2+0x100>
 801854a:	d105      	bne.n	8018558 <__kernel_rem_pio2+0x250>
 801854c:	1e63      	subs	r3, r4, #1
 801854e:	aa0e      	add	r2, sp, #56	; 0x38
 8018550:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018554:	15c3      	asrs	r3, r0, #23
 8018556:	e79f      	b.n	8018498 <__kernel_rem_pio2+0x190>
 8018558:	2200      	movs	r2, #0
 801855a:	4b3a      	ldr	r3, [pc, #232]	; (8018644 <__kernel_rem_pio2+0x33c>)
 801855c:	f7e8 faea 	bl	8000b34 <__aeabi_dcmpge>
 8018560:	2800      	cmp	r0, #0
 8018562:	d139      	bne.n	80185d8 <__kernel_rem_pio2+0x2d0>
 8018564:	9002      	str	r0, [sp, #8]
 8018566:	2200      	movs	r2, #0
 8018568:	2300      	movs	r3, #0
 801856a:	4630      	mov	r0, r6
 801856c:	4639      	mov	r1, r7
 801856e:	f7e8 fac3 	bl	8000af8 <__aeabi_dcmpeq>
 8018572:	2800      	cmp	r0, #0
 8018574:	f000 80c7 	beq.w	8018706 <__kernel_rem_pio2+0x3fe>
 8018578:	1e65      	subs	r5, r4, #1
 801857a:	462b      	mov	r3, r5
 801857c:	2200      	movs	r2, #0
 801857e:	9904      	ldr	r1, [sp, #16]
 8018580:	428b      	cmp	r3, r1
 8018582:	da6a      	bge.n	801865a <__kernel_rem_pio2+0x352>
 8018584:	2a00      	cmp	r2, #0
 8018586:	f000 8088 	beq.w	801869a <__kernel_rem_pio2+0x392>
 801858a:	ab0e      	add	r3, sp, #56	; 0x38
 801858c:	f1aa 0a18 	sub.w	sl, sl, #24
 8018590:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8018594:	2b00      	cmp	r3, #0
 8018596:	f000 80b4 	beq.w	8018702 <__kernel_rem_pio2+0x3fa>
 801859a:	4650      	mov	r0, sl
 801859c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8018628 <__kernel_rem_pio2+0x320>
 80185a0:	f000 fd1a 	bl	8018fd8 <scalbn>
 80185a4:	00ec      	lsls	r4, r5, #3
 80185a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80185a8:	191e      	adds	r6, r3, r4
 80185aa:	ec59 8b10 	vmov	r8, r9, d0
 80185ae:	f106 0a08 	add.w	sl, r6, #8
 80185b2:	462f      	mov	r7, r5
 80185b4:	2f00      	cmp	r7, #0
 80185b6:	f280 80df 	bge.w	8018778 <__kernel_rem_pio2+0x470>
 80185ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8018620 <__kernel_rem_pio2+0x318>
 80185be:	f04f 0a00 	mov.w	sl, #0
 80185c2:	eba5 030a 	sub.w	r3, r5, sl
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	f2c0 810a 	blt.w	80187e0 <__kernel_rem_pio2+0x4d8>
 80185cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8018648 <__kernel_rem_pio2+0x340>
 80185d0:	ec59 8b18 	vmov	r8, r9, d8
 80185d4:	2700      	movs	r7, #0
 80185d6:	e0f5      	b.n	80187c4 <__kernel_rem_pio2+0x4bc>
 80185d8:	2302      	movs	r3, #2
 80185da:	9302      	str	r3, [sp, #8]
 80185dc:	e760      	b.n	80184a0 <__kernel_rem_pio2+0x198>
 80185de:	ab0e      	add	r3, sp, #56	; 0x38
 80185e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80185e4:	b94d      	cbnz	r5, 80185fa <__kernel_rem_pio2+0x2f2>
 80185e6:	b12b      	cbz	r3, 80185f4 <__kernel_rem_pio2+0x2ec>
 80185e8:	a80e      	add	r0, sp, #56	; 0x38
 80185ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80185ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80185f2:	2301      	movs	r3, #1
 80185f4:	3201      	adds	r2, #1
 80185f6:	461d      	mov	r5, r3
 80185f8:	e759      	b.n	80184ae <__kernel_rem_pio2+0x1a6>
 80185fa:	a80e      	add	r0, sp, #56	; 0x38
 80185fc:	1acb      	subs	r3, r1, r3
 80185fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018602:	462b      	mov	r3, r5
 8018604:	e7f6      	b.n	80185f4 <__kernel_rem_pio2+0x2ec>
 8018606:	1e62      	subs	r2, r4, #1
 8018608:	ab0e      	add	r3, sp, #56	; 0x38
 801860a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801860e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018612:	a90e      	add	r1, sp, #56	; 0x38
 8018614:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018618:	e757      	b.n	80184ca <__kernel_rem_pio2+0x1c2>
 801861a:	bf00      	nop
 801861c:	f3af 8000 	nop.w
	...
 801862c:	3ff00000 	.word	0x3ff00000
 8018630:	0803e808 	.word	0x0803e808
 8018634:	40200000 	.word	0x40200000
 8018638:	3ff00000 	.word	0x3ff00000
 801863c:	3e700000 	.word	0x3e700000
 8018640:	41700000 	.word	0x41700000
 8018644:	3fe00000 	.word	0x3fe00000
 8018648:	0803e7c8 	.word	0x0803e7c8
 801864c:	1e62      	subs	r2, r4, #1
 801864e:	ab0e      	add	r3, sp, #56	; 0x38
 8018650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018654:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018658:	e7db      	b.n	8018612 <__kernel_rem_pio2+0x30a>
 801865a:	a90e      	add	r1, sp, #56	; 0x38
 801865c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018660:	3b01      	subs	r3, #1
 8018662:	430a      	orrs	r2, r1
 8018664:	e78b      	b.n	801857e <__kernel_rem_pio2+0x276>
 8018666:	3301      	adds	r3, #1
 8018668:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801866c:	2900      	cmp	r1, #0
 801866e:	d0fa      	beq.n	8018666 <__kernel_rem_pio2+0x35e>
 8018670:	9a08      	ldr	r2, [sp, #32]
 8018672:	4422      	add	r2, r4
 8018674:	00d2      	lsls	r2, r2, #3
 8018676:	a922      	add	r1, sp, #136	; 0x88
 8018678:	18e3      	adds	r3, r4, r3
 801867a:	9206      	str	r2, [sp, #24]
 801867c:	440a      	add	r2, r1
 801867e:	9302      	str	r3, [sp, #8]
 8018680:	f10b 0108 	add.w	r1, fp, #8
 8018684:	f102 0308 	add.w	r3, r2, #8
 8018688:	1c66      	adds	r6, r4, #1
 801868a:	910a      	str	r1, [sp, #40]	; 0x28
 801868c:	2500      	movs	r5, #0
 801868e:	930d      	str	r3, [sp, #52]	; 0x34
 8018690:	9b02      	ldr	r3, [sp, #8]
 8018692:	42b3      	cmp	r3, r6
 8018694:	da04      	bge.n	80186a0 <__kernel_rem_pio2+0x398>
 8018696:	461c      	mov	r4, r3
 8018698:	e6a6      	b.n	80183e8 <__kernel_rem_pio2+0xe0>
 801869a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801869c:	2301      	movs	r3, #1
 801869e:	e7e3      	b.n	8018668 <__kernel_rem_pio2+0x360>
 80186a0:	9b06      	ldr	r3, [sp, #24]
 80186a2:	18ef      	adds	r7, r5, r3
 80186a4:	ab22      	add	r3, sp, #136	; 0x88
 80186a6:	441f      	add	r7, r3
 80186a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80186aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80186ae:	f7e7 ff51 	bl	8000554 <__aeabi_i2d>
 80186b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80186b4:	461c      	mov	r4, r3
 80186b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80186b8:	e9c7 0100 	strd	r0, r1, [r7]
 80186bc:	eb03 0b05 	add.w	fp, r3, r5
 80186c0:	2700      	movs	r7, #0
 80186c2:	f04f 0800 	mov.w	r8, #0
 80186c6:	f04f 0900 	mov.w	r9, #0
 80186ca:	9b07      	ldr	r3, [sp, #28]
 80186cc:	429f      	cmp	r7, r3
 80186ce:	dd08      	ble.n	80186e2 <__kernel_rem_pio2+0x3da>
 80186d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80186d2:	aa72      	add	r2, sp, #456	; 0x1c8
 80186d4:	18eb      	adds	r3, r5, r3
 80186d6:	4413      	add	r3, r2
 80186d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80186dc:	3601      	adds	r6, #1
 80186de:	3508      	adds	r5, #8
 80186e0:	e7d6      	b.n	8018690 <__kernel_rem_pio2+0x388>
 80186e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80186e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80186ea:	f7e7 ff9d 	bl	8000628 <__aeabi_dmul>
 80186ee:	4602      	mov	r2, r0
 80186f0:	460b      	mov	r3, r1
 80186f2:	4640      	mov	r0, r8
 80186f4:	4649      	mov	r1, r9
 80186f6:	f7e7 fde1 	bl	80002bc <__adddf3>
 80186fa:	3701      	adds	r7, #1
 80186fc:	4680      	mov	r8, r0
 80186fe:	4689      	mov	r9, r1
 8018700:	e7e3      	b.n	80186ca <__kernel_rem_pio2+0x3c2>
 8018702:	3d01      	subs	r5, #1
 8018704:	e741      	b.n	801858a <__kernel_rem_pio2+0x282>
 8018706:	f1ca 0000 	rsb	r0, sl, #0
 801870a:	ec47 6b10 	vmov	d0, r6, r7
 801870e:	f000 fc63 	bl	8018fd8 <scalbn>
 8018712:	ec57 6b10 	vmov	r6, r7, d0
 8018716:	2200      	movs	r2, #0
 8018718:	4b99      	ldr	r3, [pc, #612]	; (8018980 <__kernel_rem_pio2+0x678>)
 801871a:	ee10 0a10 	vmov	r0, s0
 801871e:	4639      	mov	r1, r7
 8018720:	f7e8 fa08 	bl	8000b34 <__aeabi_dcmpge>
 8018724:	b1f8      	cbz	r0, 8018766 <__kernel_rem_pio2+0x45e>
 8018726:	2200      	movs	r2, #0
 8018728:	4b96      	ldr	r3, [pc, #600]	; (8018984 <__kernel_rem_pio2+0x67c>)
 801872a:	4630      	mov	r0, r6
 801872c:	4639      	mov	r1, r7
 801872e:	f7e7 ff7b 	bl	8000628 <__aeabi_dmul>
 8018732:	f7e8 fa29 	bl	8000b88 <__aeabi_d2iz>
 8018736:	4680      	mov	r8, r0
 8018738:	f7e7 ff0c 	bl	8000554 <__aeabi_i2d>
 801873c:	2200      	movs	r2, #0
 801873e:	4b90      	ldr	r3, [pc, #576]	; (8018980 <__kernel_rem_pio2+0x678>)
 8018740:	f7e7 ff72 	bl	8000628 <__aeabi_dmul>
 8018744:	460b      	mov	r3, r1
 8018746:	4602      	mov	r2, r0
 8018748:	4639      	mov	r1, r7
 801874a:	4630      	mov	r0, r6
 801874c:	f7e7 fdb4 	bl	80002b8 <__aeabi_dsub>
 8018750:	f7e8 fa1a 	bl	8000b88 <__aeabi_d2iz>
 8018754:	1c65      	adds	r5, r4, #1
 8018756:	ab0e      	add	r3, sp, #56	; 0x38
 8018758:	f10a 0a18 	add.w	sl, sl, #24
 801875c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018760:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8018764:	e719      	b.n	801859a <__kernel_rem_pio2+0x292>
 8018766:	4630      	mov	r0, r6
 8018768:	4639      	mov	r1, r7
 801876a:	f7e8 fa0d 	bl	8000b88 <__aeabi_d2iz>
 801876e:	ab0e      	add	r3, sp, #56	; 0x38
 8018770:	4625      	mov	r5, r4
 8018772:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018776:	e710      	b.n	801859a <__kernel_rem_pio2+0x292>
 8018778:	ab0e      	add	r3, sp, #56	; 0x38
 801877a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801877e:	f7e7 fee9 	bl	8000554 <__aeabi_i2d>
 8018782:	4642      	mov	r2, r8
 8018784:	464b      	mov	r3, r9
 8018786:	f7e7 ff4f 	bl	8000628 <__aeabi_dmul>
 801878a:	2200      	movs	r2, #0
 801878c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8018790:	4b7c      	ldr	r3, [pc, #496]	; (8018984 <__kernel_rem_pio2+0x67c>)
 8018792:	4640      	mov	r0, r8
 8018794:	4649      	mov	r1, r9
 8018796:	f7e7 ff47 	bl	8000628 <__aeabi_dmul>
 801879a:	3f01      	subs	r7, #1
 801879c:	4680      	mov	r8, r0
 801879e:	4689      	mov	r9, r1
 80187a0:	e708      	b.n	80185b4 <__kernel_rem_pio2+0x2ac>
 80187a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80187a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80187ae:	f7e7 ff3b 	bl	8000628 <__aeabi_dmul>
 80187b2:	4602      	mov	r2, r0
 80187b4:	460b      	mov	r3, r1
 80187b6:	4640      	mov	r0, r8
 80187b8:	4649      	mov	r1, r9
 80187ba:	f7e7 fd7f 	bl	80002bc <__adddf3>
 80187be:	3701      	adds	r7, #1
 80187c0:	4680      	mov	r8, r0
 80187c2:	4689      	mov	r9, r1
 80187c4:	9b04      	ldr	r3, [sp, #16]
 80187c6:	429f      	cmp	r7, r3
 80187c8:	dc01      	bgt.n	80187ce <__kernel_rem_pio2+0x4c6>
 80187ca:	45ba      	cmp	sl, r7
 80187cc:	dae9      	bge.n	80187a2 <__kernel_rem_pio2+0x49a>
 80187ce:	ab4a      	add	r3, sp, #296	; 0x128
 80187d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80187d4:	e9c3 8900 	strd	r8, r9, [r3]
 80187d8:	f10a 0a01 	add.w	sl, sl, #1
 80187dc:	3e08      	subs	r6, #8
 80187de:	e6f0      	b.n	80185c2 <__kernel_rem_pio2+0x2ba>
 80187e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80187e2:	2b03      	cmp	r3, #3
 80187e4:	d85b      	bhi.n	801889e <__kernel_rem_pio2+0x596>
 80187e6:	e8df f003 	tbb	[pc, r3]
 80187ea:	264a      	.short	0x264a
 80187ec:	0226      	.short	0x0226
 80187ee:	ab9a      	add	r3, sp, #616	; 0x268
 80187f0:	441c      	add	r4, r3
 80187f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80187f6:	46a2      	mov	sl, r4
 80187f8:	46ab      	mov	fp, r5
 80187fa:	f1bb 0f00 	cmp.w	fp, #0
 80187fe:	dc6c      	bgt.n	80188da <__kernel_rem_pio2+0x5d2>
 8018800:	46a2      	mov	sl, r4
 8018802:	46ab      	mov	fp, r5
 8018804:	f1bb 0f01 	cmp.w	fp, #1
 8018808:	f300 8086 	bgt.w	8018918 <__kernel_rem_pio2+0x610>
 801880c:	2000      	movs	r0, #0
 801880e:	2100      	movs	r1, #0
 8018810:	2d01      	cmp	r5, #1
 8018812:	f300 80a0 	bgt.w	8018956 <__kernel_rem_pio2+0x64e>
 8018816:	9b02      	ldr	r3, [sp, #8]
 8018818:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801881c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8018820:	2b00      	cmp	r3, #0
 8018822:	f040 809e 	bne.w	8018962 <__kernel_rem_pio2+0x65a>
 8018826:	9b01      	ldr	r3, [sp, #4]
 8018828:	e9c3 7800 	strd	r7, r8, [r3]
 801882c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8018830:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8018834:	e033      	b.n	801889e <__kernel_rem_pio2+0x596>
 8018836:	3408      	adds	r4, #8
 8018838:	ab4a      	add	r3, sp, #296	; 0x128
 801883a:	441c      	add	r4, r3
 801883c:	462e      	mov	r6, r5
 801883e:	2000      	movs	r0, #0
 8018840:	2100      	movs	r1, #0
 8018842:	2e00      	cmp	r6, #0
 8018844:	da3a      	bge.n	80188bc <__kernel_rem_pio2+0x5b4>
 8018846:	9b02      	ldr	r3, [sp, #8]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d03d      	beq.n	80188c8 <__kernel_rem_pio2+0x5c0>
 801884c:	4602      	mov	r2, r0
 801884e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018852:	9c01      	ldr	r4, [sp, #4]
 8018854:	e9c4 2300 	strd	r2, r3, [r4]
 8018858:	4602      	mov	r2, r0
 801885a:	460b      	mov	r3, r1
 801885c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8018860:	f7e7 fd2a 	bl	80002b8 <__aeabi_dsub>
 8018864:	ae4c      	add	r6, sp, #304	; 0x130
 8018866:	2401      	movs	r4, #1
 8018868:	42a5      	cmp	r5, r4
 801886a:	da30      	bge.n	80188ce <__kernel_rem_pio2+0x5c6>
 801886c:	9b02      	ldr	r3, [sp, #8]
 801886e:	b113      	cbz	r3, 8018876 <__kernel_rem_pio2+0x56e>
 8018870:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018874:	4619      	mov	r1, r3
 8018876:	9b01      	ldr	r3, [sp, #4]
 8018878:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801887c:	e00f      	b.n	801889e <__kernel_rem_pio2+0x596>
 801887e:	ab9a      	add	r3, sp, #616	; 0x268
 8018880:	441c      	add	r4, r3
 8018882:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8018886:	2000      	movs	r0, #0
 8018888:	2100      	movs	r1, #0
 801888a:	2d00      	cmp	r5, #0
 801888c:	da10      	bge.n	80188b0 <__kernel_rem_pio2+0x5a8>
 801888e:	9b02      	ldr	r3, [sp, #8]
 8018890:	b113      	cbz	r3, 8018898 <__kernel_rem_pio2+0x590>
 8018892:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018896:	4619      	mov	r1, r3
 8018898:	9b01      	ldr	r3, [sp, #4]
 801889a:	e9c3 0100 	strd	r0, r1, [r3]
 801889e:	9b06      	ldr	r3, [sp, #24]
 80188a0:	f003 0007 	and.w	r0, r3, #7
 80188a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80188a8:	ecbd 8b02 	vpop	{d8}
 80188ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80188b4:	f7e7 fd02 	bl	80002bc <__adddf3>
 80188b8:	3d01      	subs	r5, #1
 80188ba:	e7e6      	b.n	801888a <__kernel_rem_pio2+0x582>
 80188bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80188c0:	f7e7 fcfc 	bl	80002bc <__adddf3>
 80188c4:	3e01      	subs	r6, #1
 80188c6:	e7bc      	b.n	8018842 <__kernel_rem_pio2+0x53a>
 80188c8:	4602      	mov	r2, r0
 80188ca:	460b      	mov	r3, r1
 80188cc:	e7c1      	b.n	8018852 <__kernel_rem_pio2+0x54a>
 80188ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80188d2:	f7e7 fcf3 	bl	80002bc <__adddf3>
 80188d6:	3401      	adds	r4, #1
 80188d8:	e7c6      	b.n	8018868 <__kernel_rem_pio2+0x560>
 80188da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80188de:	ed3a 7b02 	vldmdb	sl!, {d7}
 80188e2:	4640      	mov	r0, r8
 80188e4:	ec53 2b17 	vmov	r2, r3, d7
 80188e8:	4649      	mov	r1, r9
 80188ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80188ee:	f7e7 fce5 	bl	80002bc <__adddf3>
 80188f2:	4602      	mov	r2, r0
 80188f4:	460b      	mov	r3, r1
 80188f6:	4606      	mov	r6, r0
 80188f8:	460f      	mov	r7, r1
 80188fa:	4640      	mov	r0, r8
 80188fc:	4649      	mov	r1, r9
 80188fe:	f7e7 fcdb 	bl	80002b8 <__aeabi_dsub>
 8018902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018906:	f7e7 fcd9 	bl	80002bc <__adddf3>
 801890a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801890e:	e9ca 0100 	strd	r0, r1, [sl]
 8018912:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8018916:	e770      	b.n	80187fa <__kernel_rem_pio2+0x4f2>
 8018918:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801891c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8018920:	4630      	mov	r0, r6
 8018922:	ec53 2b17 	vmov	r2, r3, d7
 8018926:	4639      	mov	r1, r7
 8018928:	ed8d 7b04 	vstr	d7, [sp, #16]
 801892c:	f7e7 fcc6 	bl	80002bc <__adddf3>
 8018930:	4602      	mov	r2, r0
 8018932:	460b      	mov	r3, r1
 8018934:	4680      	mov	r8, r0
 8018936:	4689      	mov	r9, r1
 8018938:	4630      	mov	r0, r6
 801893a:	4639      	mov	r1, r7
 801893c:	f7e7 fcbc 	bl	80002b8 <__aeabi_dsub>
 8018940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018944:	f7e7 fcba 	bl	80002bc <__adddf3>
 8018948:	f10b 3bff 	add.w	fp, fp, #4294967295
 801894c:	e9ca 0100 	strd	r0, r1, [sl]
 8018950:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8018954:	e756      	b.n	8018804 <__kernel_rem_pio2+0x4fc>
 8018956:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801895a:	f7e7 fcaf 	bl	80002bc <__adddf3>
 801895e:	3d01      	subs	r5, #1
 8018960:	e756      	b.n	8018810 <__kernel_rem_pio2+0x508>
 8018962:	9b01      	ldr	r3, [sp, #4]
 8018964:	9a01      	ldr	r2, [sp, #4]
 8018966:	601f      	str	r7, [r3, #0]
 8018968:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801896c:	605c      	str	r4, [r3, #4]
 801896e:	609d      	str	r5, [r3, #8]
 8018970:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018974:	60d3      	str	r3, [r2, #12]
 8018976:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801897a:	6110      	str	r0, [r2, #16]
 801897c:	6153      	str	r3, [r2, #20]
 801897e:	e78e      	b.n	801889e <__kernel_rem_pio2+0x596>
 8018980:	41700000 	.word	0x41700000
 8018984:	3e700000 	.word	0x3e700000

08018988 <__kernel_sin>:
 8018988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801898c:	ec55 4b10 	vmov	r4, r5, d0
 8018990:	b085      	sub	sp, #20
 8018992:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018996:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801899a:	ed8d 1b00 	vstr	d1, [sp]
 801899e:	9002      	str	r0, [sp, #8]
 80189a0:	da06      	bge.n	80189b0 <__kernel_sin+0x28>
 80189a2:	ee10 0a10 	vmov	r0, s0
 80189a6:	4629      	mov	r1, r5
 80189a8:	f7e8 f8ee 	bl	8000b88 <__aeabi_d2iz>
 80189ac:	2800      	cmp	r0, #0
 80189ae:	d051      	beq.n	8018a54 <__kernel_sin+0xcc>
 80189b0:	4622      	mov	r2, r4
 80189b2:	462b      	mov	r3, r5
 80189b4:	4620      	mov	r0, r4
 80189b6:	4629      	mov	r1, r5
 80189b8:	f7e7 fe36 	bl	8000628 <__aeabi_dmul>
 80189bc:	4682      	mov	sl, r0
 80189be:	468b      	mov	fp, r1
 80189c0:	4602      	mov	r2, r0
 80189c2:	460b      	mov	r3, r1
 80189c4:	4620      	mov	r0, r4
 80189c6:	4629      	mov	r1, r5
 80189c8:	f7e7 fe2e 	bl	8000628 <__aeabi_dmul>
 80189cc:	a341      	add	r3, pc, #260	; (adr r3, 8018ad4 <__kernel_sin+0x14c>)
 80189ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189d2:	4680      	mov	r8, r0
 80189d4:	4689      	mov	r9, r1
 80189d6:	4650      	mov	r0, sl
 80189d8:	4659      	mov	r1, fp
 80189da:	f7e7 fe25 	bl	8000628 <__aeabi_dmul>
 80189de:	a33f      	add	r3, pc, #252	; (adr r3, 8018adc <__kernel_sin+0x154>)
 80189e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189e4:	f7e7 fc68 	bl	80002b8 <__aeabi_dsub>
 80189e8:	4652      	mov	r2, sl
 80189ea:	465b      	mov	r3, fp
 80189ec:	f7e7 fe1c 	bl	8000628 <__aeabi_dmul>
 80189f0:	a33c      	add	r3, pc, #240	; (adr r3, 8018ae4 <__kernel_sin+0x15c>)
 80189f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189f6:	f7e7 fc61 	bl	80002bc <__adddf3>
 80189fa:	4652      	mov	r2, sl
 80189fc:	465b      	mov	r3, fp
 80189fe:	f7e7 fe13 	bl	8000628 <__aeabi_dmul>
 8018a02:	a33a      	add	r3, pc, #232	; (adr r3, 8018aec <__kernel_sin+0x164>)
 8018a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a08:	f7e7 fc56 	bl	80002b8 <__aeabi_dsub>
 8018a0c:	4652      	mov	r2, sl
 8018a0e:	465b      	mov	r3, fp
 8018a10:	f7e7 fe0a 	bl	8000628 <__aeabi_dmul>
 8018a14:	a337      	add	r3, pc, #220	; (adr r3, 8018af4 <__kernel_sin+0x16c>)
 8018a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a1a:	f7e7 fc4f 	bl	80002bc <__adddf3>
 8018a1e:	9b02      	ldr	r3, [sp, #8]
 8018a20:	4606      	mov	r6, r0
 8018a22:	460f      	mov	r7, r1
 8018a24:	b9db      	cbnz	r3, 8018a5e <__kernel_sin+0xd6>
 8018a26:	4602      	mov	r2, r0
 8018a28:	460b      	mov	r3, r1
 8018a2a:	4650      	mov	r0, sl
 8018a2c:	4659      	mov	r1, fp
 8018a2e:	f7e7 fdfb 	bl	8000628 <__aeabi_dmul>
 8018a32:	a325      	add	r3, pc, #148	; (adr r3, 8018ac8 <__kernel_sin+0x140>)
 8018a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a38:	f7e7 fc3e 	bl	80002b8 <__aeabi_dsub>
 8018a3c:	4642      	mov	r2, r8
 8018a3e:	464b      	mov	r3, r9
 8018a40:	f7e7 fdf2 	bl	8000628 <__aeabi_dmul>
 8018a44:	4602      	mov	r2, r0
 8018a46:	460b      	mov	r3, r1
 8018a48:	4620      	mov	r0, r4
 8018a4a:	4629      	mov	r1, r5
 8018a4c:	f7e7 fc36 	bl	80002bc <__adddf3>
 8018a50:	4604      	mov	r4, r0
 8018a52:	460d      	mov	r5, r1
 8018a54:	ec45 4b10 	vmov	d0, r4, r5
 8018a58:	b005      	add	sp, #20
 8018a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a5e:	2200      	movs	r2, #0
 8018a60:	4b1b      	ldr	r3, [pc, #108]	; (8018ad0 <__kernel_sin+0x148>)
 8018a62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018a66:	f7e7 fddf 	bl	8000628 <__aeabi_dmul>
 8018a6a:	4632      	mov	r2, r6
 8018a6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a70:	463b      	mov	r3, r7
 8018a72:	4640      	mov	r0, r8
 8018a74:	4649      	mov	r1, r9
 8018a76:	f7e7 fdd7 	bl	8000628 <__aeabi_dmul>
 8018a7a:	4602      	mov	r2, r0
 8018a7c:	460b      	mov	r3, r1
 8018a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018a82:	f7e7 fc19 	bl	80002b8 <__aeabi_dsub>
 8018a86:	4652      	mov	r2, sl
 8018a88:	465b      	mov	r3, fp
 8018a8a:	f7e7 fdcd 	bl	8000628 <__aeabi_dmul>
 8018a8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018a92:	f7e7 fc11 	bl	80002b8 <__aeabi_dsub>
 8018a96:	a30c      	add	r3, pc, #48	; (adr r3, 8018ac8 <__kernel_sin+0x140>)
 8018a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a9c:	4606      	mov	r6, r0
 8018a9e:	460f      	mov	r7, r1
 8018aa0:	4640      	mov	r0, r8
 8018aa2:	4649      	mov	r1, r9
 8018aa4:	f7e7 fdc0 	bl	8000628 <__aeabi_dmul>
 8018aa8:	4602      	mov	r2, r0
 8018aaa:	460b      	mov	r3, r1
 8018aac:	4630      	mov	r0, r6
 8018aae:	4639      	mov	r1, r7
 8018ab0:	f7e7 fc04 	bl	80002bc <__adddf3>
 8018ab4:	4602      	mov	r2, r0
 8018ab6:	460b      	mov	r3, r1
 8018ab8:	4620      	mov	r0, r4
 8018aba:	4629      	mov	r1, r5
 8018abc:	f7e7 fbfc 	bl	80002b8 <__aeabi_dsub>
 8018ac0:	e7c6      	b.n	8018a50 <__kernel_sin+0xc8>
 8018ac2:	bf00      	nop
 8018ac4:	f3af 8000 	nop.w
 8018ac8:	55555549 	.word	0x55555549
 8018acc:	3fc55555 	.word	0x3fc55555
 8018ad0:	3fe00000 	.word	0x3fe00000
 8018ad4:	5acfd57c 	.word	0x5acfd57c
 8018ad8:	3de5d93a 	.word	0x3de5d93a
 8018adc:	8a2b9ceb 	.word	0x8a2b9ceb
 8018ae0:	3e5ae5e6 	.word	0x3e5ae5e6
 8018ae4:	57b1fe7d 	.word	0x57b1fe7d
 8018ae8:	3ec71de3 	.word	0x3ec71de3
 8018aec:	19c161d5 	.word	0x19c161d5
 8018af0:	3f2a01a0 	.word	0x3f2a01a0
 8018af4:	1110f8a6 	.word	0x1110f8a6
 8018af8:	3f811111 	.word	0x3f811111
 8018afc:	00000000 	.word	0x00000000

08018b00 <__kernel_tan>:
 8018b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b04:	ec5b ab10 	vmov	sl, fp, d0
 8018b08:	4bbf      	ldr	r3, [pc, #764]	; (8018e08 <__kernel_tan+0x308>)
 8018b0a:	b089      	sub	sp, #36	; 0x24
 8018b0c:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8018b10:	429f      	cmp	r7, r3
 8018b12:	ec59 8b11 	vmov	r8, r9, d1
 8018b16:	4606      	mov	r6, r0
 8018b18:	f8cd b008 	str.w	fp, [sp, #8]
 8018b1c:	dc22      	bgt.n	8018b64 <__kernel_tan+0x64>
 8018b1e:	ee10 0a10 	vmov	r0, s0
 8018b22:	4659      	mov	r1, fp
 8018b24:	f7e8 f830 	bl	8000b88 <__aeabi_d2iz>
 8018b28:	2800      	cmp	r0, #0
 8018b2a:	d145      	bne.n	8018bb8 <__kernel_tan+0xb8>
 8018b2c:	1c73      	adds	r3, r6, #1
 8018b2e:	4652      	mov	r2, sl
 8018b30:	4313      	orrs	r3, r2
 8018b32:	433b      	orrs	r3, r7
 8018b34:	d110      	bne.n	8018b58 <__kernel_tan+0x58>
 8018b36:	ec4b ab10 	vmov	d0, sl, fp
 8018b3a:	f000 f9ad 	bl	8018e98 <fabs>
 8018b3e:	49b3      	ldr	r1, [pc, #716]	; (8018e0c <__kernel_tan+0x30c>)
 8018b40:	ec53 2b10 	vmov	r2, r3, d0
 8018b44:	2000      	movs	r0, #0
 8018b46:	f7e7 fe99 	bl	800087c <__aeabi_ddiv>
 8018b4a:	4682      	mov	sl, r0
 8018b4c:	468b      	mov	fp, r1
 8018b4e:	ec4b ab10 	vmov	d0, sl, fp
 8018b52:	b009      	add	sp, #36	; 0x24
 8018b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b58:	2e01      	cmp	r6, #1
 8018b5a:	d0f8      	beq.n	8018b4e <__kernel_tan+0x4e>
 8018b5c:	465b      	mov	r3, fp
 8018b5e:	2000      	movs	r0, #0
 8018b60:	49ab      	ldr	r1, [pc, #684]	; (8018e10 <__kernel_tan+0x310>)
 8018b62:	e7f0      	b.n	8018b46 <__kernel_tan+0x46>
 8018b64:	4bab      	ldr	r3, [pc, #684]	; (8018e14 <__kernel_tan+0x314>)
 8018b66:	429f      	cmp	r7, r3
 8018b68:	dd26      	ble.n	8018bb8 <__kernel_tan+0xb8>
 8018b6a:	9b02      	ldr	r3, [sp, #8]
 8018b6c:	2b00      	cmp	r3, #0
 8018b6e:	da09      	bge.n	8018b84 <__kernel_tan+0x84>
 8018b70:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8018b74:	469b      	mov	fp, r3
 8018b76:	ee10 aa10 	vmov	sl, s0
 8018b7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018b7e:	ee11 8a10 	vmov	r8, s2
 8018b82:	4699      	mov	r9, r3
 8018b84:	4652      	mov	r2, sl
 8018b86:	465b      	mov	r3, fp
 8018b88:	a181      	add	r1, pc, #516	; (adr r1, 8018d90 <__kernel_tan+0x290>)
 8018b8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018b8e:	f7e7 fb93 	bl	80002b8 <__aeabi_dsub>
 8018b92:	4642      	mov	r2, r8
 8018b94:	464b      	mov	r3, r9
 8018b96:	4604      	mov	r4, r0
 8018b98:	460d      	mov	r5, r1
 8018b9a:	a17f      	add	r1, pc, #508	; (adr r1, 8018d98 <__kernel_tan+0x298>)
 8018b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ba0:	f7e7 fb8a 	bl	80002b8 <__aeabi_dsub>
 8018ba4:	4622      	mov	r2, r4
 8018ba6:	462b      	mov	r3, r5
 8018ba8:	f7e7 fb88 	bl	80002bc <__adddf3>
 8018bac:	f04f 0800 	mov.w	r8, #0
 8018bb0:	4682      	mov	sl, r0
 8018bb2:	468b      	mov	fp, r1
 8018bb4:	f04f 0900 	mov.w	r9, #0
 8018bb8:	4652      	mov	r2, sl
 8018bba:	465b      	mov	r3, fp
 8018bbc:	4650      	mov	r0, sl
 8018bbe:	4659      	mov	r1, fp
 8018bc0:	f7e7 fd32 	bl	8000628 <__aeabi_dmul>
 8018bc4:	4602      	mov	r2, r0
 8018bc6:	460b      	mov	r3, r1
 8018bc8:	e9cd 0100 	strd	r0, r1, [sp]
 8018bcc:	f7e7 fd2c 	bl	8000628 <__aeabi_dmul>
 8018bd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018bd4:	4604      	mov	r4, r0
 8018bd6:	460d      	mov	r5, r1
 8018bd8:	4650      	mov	r0, sl
 8018bda:	4659      	mov	r1, fp
 8018bdc:	f7e7 fd24 	bl	8000628 <__aeabi_dmul>
 8018be0:	a36f      	add	r3, pc, #444	; (adr r3, 8018da0 <__kernel_tan+0x2a0>)
 8018be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018be6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018bea:	4620      	mov	r0, r4
 8018bec:	4629      	mov	r1, r5
 8018bee:	f7e7 fd1b 	bl	8000628 <__aeabi_dmul>
 8018bf2:	a36d      	add	r3, pc, #436	; (adr r3, 8018da8 <__kernel_tan+0x2a8>)
 8018bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bf8:	f7e7 fb60 	bl	80002bc <__adddf3>
 8018bfc:	4622      	mov	r2, r4
 8018bfe:	462b      	mov	r3, r5
 8018c00:	f7e7 fd12 	bl	8000628 <__aeabi_dmul>
 8018c04:	a36a      	add	r3, pc, #424	; (adr r3, 8018db0 <__kernel_tan+0x2b0>)
 8018c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c0a:	f7e7 fb57 	bl	80002bc <__adddf3>
 8018c0e:	4622      	mov	r2, r4
 8018c10:	462b      	mov	r3, r5
 8018c12:	f7e7 fd09 	bl	8000628 <__aeabi_dmul>
 8018c16:	a368      	add	r3, pc, #416	; (adr r3, 8018db8 <__kernel_tan+0x2b8>)
 8018c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c1c:	f7e7 fb4e 	bl	80002bc <__adddf3>
 8018c20:	4622      	mov	r2, r4
 8018c22:	462b      	mov	r3, r5
 8018c24:	f7e7 fd00 	bl	8000628 <__aeabi_dmul>
 8018c28:	a365      	add	r3, pc, #404	; (adr r3, 8018dc0 <__kernel_tan+0x2c0>)
 8018c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c2e:	f7e7 fb45 	bl	80002bc <__adddf3>
 8018c32:	4622      	mov	r2, r4
 8018c34:	462b      	mov	r3, r5
 8018c36:	f7e7 fcf7 	bl	8000628 <__aeabi_dmul>
 8018c3a:	a363      	add	r3, pc, #396	; (adr r3, 8018dc8 <__kernel_tan+0x2c8>)
 8018c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c40:	f7e7 fb3c 	bl	80002bc <__adddf3>
 8018c44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018c48:	f7e7 fcee 	bl	8000628 <__aeabi_dmul>
 8018c4c:	a360      	add	r3, pc, #384	; (adr r3, 8018dd0 <__kernel_tan+0x2d0>)
 8018c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018c56:	4620      	mov	r0, r4
 8018c58:	4629      	mov	r1, r5
 8018c5a:	f7e7 fce5 	bl	8000628 <__aeabi_dmul>
 8018c5e:	a35e      	add	r3, pc, #376	; (adr r3, 8018dd8 <__kernel_tan+0x2d8>)
 8018c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c64:	f7e7 fb2a 	bl	80002bc <__adddf3>
 8018c68:	4622      	mov	r2, r4
 8018c6a:	462b      	mov	r3, r5
 8018c6c:	f7e7 fcdc 	bl	8000628 <__aeabi_dmul>
 8018c70:	a35b      	add	r3, pc, #364	; (adr r3, 8018de0 <__kernel_tan+0x2e0>)
 8018c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c76:	f7e7 fb21 	bl	80002bc <__adddf3>
 8018c7a:	4622      	mov	r2, r4
 8018c7c:	462b      	mov	r3, r5
 8018c7e:	f7e7 fcd3 	bl	8000628 <__aeabi_dmul>
 8018c82:	a359      	add	r3, pc, #356	; (adr r3, 8018de8 <__kernel_tan+0x2e8>)
 8018c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c88:	f7e7 fb18 	bl	80002bc <__adddf3>
 8018c8c:	4622      	mov	r2, r4
 8018c8e:	462b      	mov	r3, r5
 8018c90:	f7e7 fcca 	bl	8000628 <__aeabi_dmul>
 8018c94:	a356      	add	r3, pc, #344	; (adr r3, 8018df0 <__kernel_tan+0x2f0>)
 8018c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c9a:	f7e7 fb0f 	bl	80002bc <__adddf3>
 8018c9e:	4622      	mov	r2, r4
 8018ca0:	462b      	mov	r3, r5
 8018ca2:	f7e7 fcc1 	bl	8000628 <__aeabi_dmul>
 8018ca6:	a354      	add	r3, pc, #336	; (adr r3, 8018df8 <__kernel_tan+0x2f8>)
 8018ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018cac:	f7e7 fb06 	bl	80002bc <__adddf3>
 8018cb0:	4602      	mov	r2, r0
 8018cb2:	460b      	mov	r3, r1
 8018cb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018cb8:	f7e7 fb00 	bl	80002bc <__adddf3>
 8018cbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018cc0:	f7e7 fcb2 	bl	8000628 <__aeabi_dmul>
 8018cc4:	4642      	mov	r2, r8
 8018cc6:	464b      	mov	r3, r9
 8018cc8:	f7e7 faf8 	bl	80002bc <__adddf3>
 8018ccc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018cd0:	f7e7 fcaa 	bl	8000628 <__aeabi_dmul>
 8018cd4:	4642      	mov	r2, r8
 8018cd6:	464b      	mov	r3, r9
 8018cd8:	f7e7 faf0 	bl	80002bc <__adddf3>
 8018cdc:	a348      	add	r3, pc, #288	; (adr r3, 8018e00 <__kernel_tan+0x300>)
 8018cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ce2:	4604      	mov	r4, r0
 8018ce4:	460d      	mov	r5, r1
 8018ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018cea:	f7e7 fc9d 	bl	8000628 <__aeabi_dmul>
 8018cee:	4622      	mov	r2, r4
 8018cf0:	462b      	mov	r3, r5
 8018cf2:	f7e7 fae3 	bl	80002bc <__adddf3>
 8018cf6:	e9cd 0100 	strd	r0, r1, [sp]
 8018cfa:	460b      	mov	r3, r1
 8018cfc:	4602      	mov	r2, r0
 8018cfe:	4659      	mov	r1, fp
 8018d00:	4650      	mov	r0, sl
 8018d02:	f7e7 fadb 	bl	80002bc <__adddf3>
 8018d06:	4b43      	ldr	r3, [pc, #268]	; (8018e14 <__kernel_tan+0x314>)
 8018d08:	429f      	cmp	r7, r3
 8018d0a:	4604      	mov	r4, r0
 8018d0c:	460d      	mov	r5, r1
 8018d0e:	f340 8083 	ble.w	8018e18 <__kernel_tan+0x318>
 8018d12:	4630      	mov	r0, r6
 8018d14:	f7e7 fc1e 	bl	8000554 <__aeabi_i2d>
 8018d18:	4622      	mov	r2, r4
 8018d1a:	4680      	mov	r8, r0
 8018d1c:	4689      	mov	r9, r1
 8018d1e:	462b      	mov	r3, r5
 8018d20:	4620      	mov	r0, r4
 8018d22:	4629      	mov	r1, r5
 8018d24:	f7e7 fc80 	bl	8000628 <__aeabi_dmul>
 8018d28:	4642      	mov	r2, r8
 8018d2a:	4606      	mov	r6, r0
 8018d2c:	460f      	mov	r7, r1
 8018d2e:	464b      	mov	r3, r9
 8018d30:	4620      	mov	r0, r4
 8018d32:	4629      	mov	r1, r5
 8018d34:	f7e7 fac2 	bl	80002bc <__adddf3>
 8018d38:	4602      	mov	r2, r0
 8018d3a:	460b      	mov	r3, r1
 8018d3c:	4630      	mov	r0, r6
 8018d3e:	4639      	mov	r1, r7
 8018d40:	f7e7 fd9c 	bl	800087c <__aeabi_ddiv>
 8018d44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018d48:	f7e7 fab6 	bl	80002b8 <__aeabi_dsub>
 8018d4c:	4602      	mov	r2, r0
 8018d4e:	460b      	mov	r3, r1
 8018d50:	4650      	mov	r0, sl
 8018d52:	4659      	mov	r1, fp
 8018d54:	f7e7 fab0 	bl	80002b8 <__aeabi_dsub>
 8018d58:	4602      	mov	r2, r0
 8018d5a:	460b      	mov	r3, r1
 8018d5c:	f7e7 faae 	bl	80002bc <__adddf3>
 8018d60:	4602      	mov	r2, r0
 8018d62:	460b      	mov	r3, r1
 8018d64:	4640      	mov	r0, r8
 8018d66:	4649      	mov	r1, r9
 8018d68:	f7e7 faa6 	bl	80002b8 <__aeabi_dsub>
 8018d6c:	9b02      	ldr	r3, [sp, #8]
 8018d6e:	4604      	mov	r4, r0
 8018d70:	1798      	asrs	r0, r3, #30
 8018d72:	f000 0002 	and.w	r0, r0, #2
 8018d76:	f1c0 0001 	rsb	r0, r0, #1
 8018d7a:	460d      	mov	r5, r1
 8018d7c:	f7e7 fbea 	bl	8000554 <__aeabi_i2d>
 8018d80:	4602      	mov	r2, r0
 8018d82:	460b      	mov	r3, r1
 8018d84:	4620      	mov	r0, r4
 8018d86:	4629      	mov	r1, r5
 8018d88:	f7e7 fc4e 	bl	8000628 <__aeabi_dmul>
 8018d8c:	e6dd      	b.n	8018b4a <__kernel_tan+0x4a>
 8018d8e:	bf00      	nop
 8018d90:	54442d18 	.word	0x54442d18
 8018d94:	3fe921fb 	.word	0x3fe921fb
 8018d98:	33145c07 	.word	0x33145c07
 8018d9c:	3c81a626 	.word	0x3c81a626
 8018da0:	74bf7ad4 	.word	0x74bf7ad4
 8018da4:	3efb2a70 	.word	0x3efb2a70
 8018da8:	32f0a7e9 	.word	0x32f0a7e9
 8018dac:	3f12b80f 	.word	0x3f12b80f
 8018db0:	1a8d1068 	.word	0x1a8d1068
 8018db4:	3f3026f7 	.word	0x3f3026f7
 8018db8:	fee08315 	.word	0xfee08315
 8018dbc:	3f57dbc8 	.word	0x3f57dbc8
 8018dc0:	e96e8493 	.word	0xe96e8493
 8018dc4:	3f8226e3 	.word	0x3f8226e3
 8018dc8:	1bb341fe 	.word	0x1bb341fe
 8018dcc:	3faba1ba 	.word	0x3faba1ba
 8018dd0:	db605373 	.word	0xdb605373
 8018dd4:	bef375cb 	.word	0xbef375cb
 8018dd8:	a03792a6 	.word	0xa03792a6
 8018ddc:	3f147e88 	.word	0x3f147e88
 8018de0:	f2f26501 	.word	0xf2f26501
 8018de4:	3f4344d8 	.word	0x3f4344d8
 8018de8:	c9560328 	.word	0xc9560328
 8018dec:	3f6d6d22 	.word	0x3f6d6d22
 8018df0:	8406d637 	.word	0x8406d637
 8018df4:	3f9664f4 	.word	0x3f9664f4
 8018df8:	1110fe7a 	.word	0x1110fe7a
 8018dfc:	3fc11111 	.word	0x3fc11111
 8018e00:	55555563 	.word	0x55555563
 8018e04:	3fd55555 	.word	0x3fd55555
 8018e08:	3e2fffff 	.word	0x3e2fffff
 8018e0c:	3ff00000 	.word	0x3ff00000
 8018e10:	bff00000 	.word	0xbff00000
 8018e14:	3fe59427 	.word	0x3fe59427
 8018e18:	2e01      	cmp	r6, #1
 8018e1a:	d036      	beq.n	8018e8a <__kernel_tan+0x38a>
 8018e1c:	460f      	mov	r7, r1
 8018e1e:	4602      	mov	r2, r0
 8018e20:	460b      	mov	r3, r1
 8018e22:	2000      	movs	r0, #0
 8018e24:	491a      	ldr	r1, [pc, #104]	; (8018e90 <__kernel_tan+0x390>)
 8018e26:	f7e7 fd29 	bl	800087c <__aeabi_ddiv>
 8018e2a:	2600      	movs	r6, #0
 8018e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e30:	4652      	mov	r2, sl
 8018e32:	465b      	mov	r3, fp
 8018e34:	4630      	mov	r0, r6
 8018e36:	4639      	mov	r1, r7
 8018e38:	f7e7 fa3e 	bl	80002b8 <__aeabi_dsub>
 8018e3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8018e40:	4602      	mov	r2, r0
 8018e42:	460b      	mov	r3, r1
 8018e44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018e48:	f7e7 fa36 	bl	80002b8 <__aeabi_dsub>
 8018e4c:	4632      	mov	r2, r6
 8018e4e:	462b      	mov	r3, r5
 8018e50:	f7e7 fbea 	bl	8000628 <__aeabi_dmul>
 8018e54:	4632      	mov	r2, r6
 8018e56:	4682      	mov	sl, r0
 8018e58:	468b      	mov	fp, r1
 8018e5a:	462b      	mov	r3, r5
 8018e5c:	4630      	mov	r0, r6
 8018e5e:	4639      	mov	r1, r7
 8018e60:	f7e7 fbe2 	bl	8000628 <__aeabi_dmul>
 8018e64:	2200      	movs	r2, #0
 8018e66:	4b0b      	ldr	r3, [pc, #44]	; (8018e94 <__kernel_tan+0x394>)
 8018e68:	f7e7 fa28 	bl	80002bc <__adddf3>
 8018e6c:	4602      	mov	r2, r0
 8018e6e:	460b      	mov	r3, r1
 8018e70:	4650      	mov	r0, sl
 8018e72:	4659      	mov	r1, fp
 8018e74:	f7e7 fa22 	bl	80002bc <__adddf3>
 8018e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018e7c:	f7e7 fbd4 	bl	8000628 <__aeabi_dmul>
 8018e80:	4632      	mov	r2, r6
 8018e82:	462b      	mov	r3, r5
 8018e84:	f7e7 fa1a 	bl	80002bc <__adddf3>
 8018e88:	e65f      	b.n	8018b4a <__kernel_tan+0x4a>
 8018e8a:	4682      	mov	sl, r0
 8018e8c:	468b      	mov	fp, r1
 8018e8e:	e65e      	b.n	8018b4e <__kernel_tan+0x4e>
 8018e90:	bff00000 	.word	0xbff00000
 8018e94:	3ff00000 	.word	0x3ff00000

08018e98 <fabs>:
 8018e98:	ec51 0b10 	vmov	r0, r1, d0
 8018e9c:	ee10 2a10 	vmov	r2, s0
 8018ea0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018ea4:	ec43 2b10 	vmov	d0, r2, r3
 8018ea8:	4770      	bx	lr

08018eaa <finite>:
 8018eaa:	ee10 3a90 	vmov	r3, s1
 8018eae:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8018eb2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8018eb6:	0fc0      	lsrs	r0, r0, #31
 8018eb8:	4770      	bx	lr

08018eba <matherr>:
 8018eba:	2000      	movs	r0, #0
 8018ebc:	4770      	bx	lr
	...

08018ec0 <nan>:
 8018ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018ec8 <nan+0x8>
 8018ec4:	4770      	bx	lr
 8018ec6:	bf00      	nop
 8018ec8:	00000000 	.word	0x00000000
 8018ecc:	7ff80000 	.word	0x7ff80000

08018ed0 <rint>:
 8018ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018ed2:	ec51 0b10 	vmov	r0, r1, d0
 8018ed6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018eda:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8018ede:	2e13      	cmp	r6, #19
 8018ee0:	460b      	mov	r3, r1
 8018ee2:	ee10 4a10 	vmov	r4, s0
 8018ee6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8018eea:	dc56      	bgt.n	8018f9a <rint+0xca>
 8018eec:	2e00      	cmp	r6, #0
 8018eee:	da2b      	bge.n	8018f48 <rint+0x78>
 8018ef0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8018ef4:	4302      	orrs	r2, r0
 8018ef6:	d023      	beq.n	8018f40 <rint+0x70>
 8018ef8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8018efc:	4302      	orrs	r2, r0
 8018efe:	4254      	negs	r4, r2
 8018f00:	4314      	orrs	r4, r2
 8018f02:	0c4b      	lsrs	r3, r1, #17
 8018f04:	0b24      	lsrs	r4, r4, #12
 8018f06:	045b      	lsls	r3, r3, #17
 8018f08:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8018f0c:	ea44 0103 	orr.w	r1, r4, r3
 8018f10:	460b      	mov	r3, r1
 8018f12:	492f      	ldr	r1, [pc, #188]	; (8018fd0 <rint+0x100>)
 8018f14:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8018f18:	e9d1 6700 	ldrd	r6, r7, [r1]
 8018f1c:	4602      	mov	r2, r0
 8018f1e:	4639      	mov	r1, r7
 8018f20:	4630      	mov	r0, r6
 8018f22:	f7e7 f9cb 	bl	80002bc <__adddf3>
 8018f26:	e9cd 0100 	strd	r0, r1, [sp]
 8018f2a:	463b      	mov	r3, r7
 8018f2c:	4632      	mov	r2, r6
 8018f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018f32:	f7e7 f9c1 	bl	80002b8 <__aeabi_dsub>
 8018f36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018f3a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8018f3e:	4639      	mov	r1, r7
 8018f40:	ec41 0b10 	vmov	d0, r0, r1
 8018f44:	b003      	add	sp, #12
 8018f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f48:	4a22      	ldr	r2, [pc, #136]	; (8018fd4 <rint+0x104>)
 8018f4a:	4132      	asrs	r2, r6
 8018f4c:	ea01 0702 	and.w	r7, r1, r2
 8018f50:	4307      	orrs	r7, r0
 8018f52:	d0f5      	beq.n	8018f40 <rint+0x70>
 8018f54:	0852      	lsrs	r2, r2, #1
 8018f56:	4011      	ands	r1, r2
 8018f58:	430c      	orrs	r4, r1
 8018f5a:	d00b      	beq.n	8018f74 <rint+0xa4>
 8018f5c:	ea23 0202 	bic.w	r2, r3, r2
 8018f60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8018f64:	2e13      	cmp	r6, #19
 8018f66:	fa43 f306 	asr.w	r3, r3, r6
 8018f6a:	bf0c      	ite	eq
 8018f6c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8018f70:	2400      	movne	r4, #0
 8018f72:	4313      	orrs	r3, r2
 8018f74:	4916      	ldr	r1, [pc, #88]	; (8018fd0 <rint+0x100>)
 8018f76:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8018f7a:	4622      	mov	r2, r4
 8018f7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8018f80:	4620      	mov	r0, r4
 8018f82:	4629      	mov	r1, r5
 8018f84:	f7e7 f99a 	bl	80002bc <__adddf3>
 8018f88:	e9cd 0100 	strd	r0, r1, [sp]
 8018f8c:	4622      	mov	r2, r4
 8018f8e:	462b      	mov	r3, r5
 8018f90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018f94:	f7e7 f990 	bl	80002b8 <__aeabi_dsub>
 8018f98:	e7d2      	b.n	8018f40 <rint+0x70>
 8018f9a:	2e33      	cmp	r6, #51	; 0x33
 8018f9c:	dd07      	ble.n	8018fae <rint+0xde>
 8018f9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018fa2:	d1cd      	bne.n	8018f40 <rint+0x70>
 8018fa4:	ee10 2a10 	vmov	r2, s0
 8018fa8:	f7e7 f988 	bl	80002bc <__adddf3>
 8018fac:	e7c8      	b.n	8018f40 <rint+0x70>
 8018fae:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8018fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8018fb6:	40f2      	lsrs	r2, r6
 8018fb8:	4210      	tst	r0, r2
 8018fba:	d0c1      	beq.n	8018f40 <rint+0x70>
 8018fbc:	0852      	lsrs	r2, r2, #1
 8018fbe:	4210      	tst	r0, r2
 8018fc0:	bf1f      	itttt	ne
 8018fc2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8018fc6:	ea20 0202 	bicne.w	r2, r0, r2
 8018fca:	4134      	asrne	r4, r6
 8018fcc:	4314      	orrne	r4, r2
 8018fce:	e7d1      	b.n	8018f74 <rint+0xa4>
 8018fd0:	0803e818 	.word	0x0803e818
 8018fd4:	000fffff 	.word	0x000fffff

08018fd8 <scalbn>:
 8018fd8:	b570      	push	{r4, r5, r6, lr}
 8018fda:	ec55 4b10 	vmov	r4, r5, d0
 8018fde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8018fe2:	4606      	mov	r6, r0
 8018fe4:	462b      	mov	r3, r5
 8018fe6:	b9aa      	cbnz	r2, 8019014 <scalbn+0x3c>
 8018fe8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018fec:	4323      	orrs	r3, r4
 8018fee:	d03b      	beq.n	8019068 <scalbn+0x90>
 8018ff0:	4b31      	ldr	r3, [pc, #196]	; (80190b8 <scalbn+0xe0>)
 8018ff2:	4629      	mov	r1, r5
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	ee10 0a10 	vmov	r0, s0
 8018ffa:	f7e7 fb15 	bl	8000628 <__aeabi_dmul>
 8018ffe:	4b2f      	ldr	r3, [pc, #188]	; (80190bc <scalbn+0xe4>)
 8019000:	429e      	cmp	r6, r3
 8019002:	4604      	mov	r4, r0
 8019004:	460d      	mov	r5, r1
 8019006:	da12      	bge.n	801902e <scalbn+0x56>
 8019008:	a327      	add	r3, pc, #156	; (adr r3, 80190a8 <scalbn+0xd0>)
 801900a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801900e:	f7e7 fb0b 	bl	8000628 <__aeabi_dmul>
 8019012:	e009      	b.n	8019028 <scalbn+0x50>
 8019014:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019018:	428a      	cmp	r2, r1
 801901a:	d10c      	bne.n	8019036 <scalbn+0x5e>
 801901c:	ee10 2a10 	vmov	r2, s0
 8019020:	4620      	mov	r0, r4
 8019022:	4629      	mov	r1, r5
 8019024:	f7e7 f94a 	bl	80002bc <__adddf3>
 8019028:	4604      	mov	r4, r0
 801902a:	460d      	mov	r5, r1
 801902c:	e01c      	b.n	8019068 <scalbn+0x90>
 801902e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019032:	460b      	mov	r3, r1
 8019034:	3a36      	subs	r2, #54	; 0x36
 8019036:	4432      	add	r2, r6
 8019038:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801903c:	428a      	cmp	r2, r1
 801903e:	dd0b      	ble.n	8019058 <scalbn+0x80>
 8019040:	ec45 4b11 	vmov	d1, r4, r5
 8019044:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80190b0 <scalbn+0xd8>
 8019048:	f000 f846 	bl	80190d8 <copysign>
 801904c:	a318      	add	r3, pc, #96	; (adr r3, 80190b0 <scalbn+0xd8>)
 801904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019052:	ec51 0b10 	vmov	r0, r1, d0
 8019056:	e7da      	b.n	801900e <scalbn+0x36>
 8019058:	2a00      	cmp	r2, #0
 801905a:	dd08      	ble.n	801906e <scalbn+0x96>
 801905c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019060:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019064:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019068:	ec45 4b10 	vmov	d0, r4, r5
 801906c:	bd70      	pop	{r4, r5, r6, pc}
 801906e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019072:	da0d      	bge.n	8019090 <scalbn+0xb8>
 8019074:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019078:	429e      	cmp	r6, r3
 801907a:	ec45 4b11 	vmov	d1, r4, r5
 801907e:	dce1      	bgt.n	8019044 <scalbn+0x6c>
 8019080:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80190a8 <scalbn+0xd0>
 8019084:	f000 f828 	bl	80190d8 <copysign>
 8019088:	a307      	add	r3, pc, #28	; (adr r3, 80190a8 <scalbn+0xd0>)
 801908a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801908e:	e7e0      	b.n	8019052 <scalbn+0x7a>
 8019090:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019094:	3236      	adds	r2, #54	; 0x36
 8019096:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801909a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801909e:	4620      	mov	r0, r4
 80190a0:	4629      	mov	r1, r5
 80190a2:	2200      	movs	r2, #0
 80190a4:	4b06      	ldr	r3, [pc, #24]	; (80190c0 <scalbn+0xe8>)
 80190a6:	e7b2      	b.n	801900e <scalbn+0x36>
 80190a8:	c2f8f359 	.word	0xc2f8f359
 80190ac:	01a56e1f 	.word	0x01a56e1f
 80190b0:	8800759c 	.word	0x8800759c
 80190b4:	7e37e43c 	.word	0x7e37e43c
 80190b8:	43500000 	.word	0x43500000
 80190bc:	ffff3cb0 	.word	0xffff3cb0
 80190c0:	3c900000 	.word	0x3c900000

080190c4 <finitef>:
 80190c4:	ee10 3a10 	vmov	r3, s0
 80190c8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80190cc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80190d0:	bfac      	ite	ge
 80190d2:	2000      	movge	r0, #0
 80190d4:	2001      	movlt	r0, #1
 80190d6:	4770      	bx	lr

080190d8 <copysign>:
 80190d8:	ec51 0b10 	vmov	r0, r1, d0
 80190dc:	ee11 0a90 	vmov	r0, s3
 80190e0:	ee10 2a10 	vmov	r2, s0
 80190e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80190e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80190ec:	ea41 0300 	orr.w	r3, r1, r0
 80190f0:	ec43 2b10 	vmov	d0, r2, r3
 80190f4:	4770      	bx	lr

080190f6 <abort>:
 80190f6:	b508      	push	{r3, lr}
 80190f8:	2006      	movs	r0, #6
 80190fa:	f000 fcd1 	bl	8019aa0 <raise>
 80190fe:	2001      	movs	r0, #1
 8019100:	f7ee f8ac 	bl	800725c <_exit>

08019104 <__assert_func>:
 8019104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019106:	461c      	mov	r4, r3
 8019108:	4b09      	ldr	r3, [pc, #36]	; (8019130 <__assert_func+0x2c>)
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	4605      	mov	r5, r0
 801910e:	68d8      	ldr	r0, [r3, #12]
 8019110:	b152      	cbz	r2, 8019128 <__assert_func+0x24>
 8019112:	4b08      	ldr	r3, [pc, #32]	; (8019134 <__assert_func+0x30>)
 8019114:	9100      	str	r1, [sp, #0]
 8019116:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801911a:	4907      	ldr	r1, [pc, #28]	; (8019138 <__assert_func+0x34>)
 801911c:	462b      	mov	r3, r5
 801911e:	4622      	mov	r2, r4
 8019120:	f000 f83a 	bl	8019198 <fiprintf>
 8019124:	f7ff ffe7 	bl	80190f6 <abort>
 8019128:	4b04      	ldr	r3, [pc, #16]	; (801913c <__assert_func+0x38>)
 801912a:	461a      	mov	r2, r3
 801912c:	e7f2      	b.n	8019114 <__assert_func+0x10>
 801912e:	bf00      	nop
 8019130:	2000069c 	.word	0x2000069c
 8019134:	0803e828 	.word	0x0803e828
 8019138:	0803e835 	.word	0x0803e835
 801913c:	0803e863 	.word	0x0803e863

08019140 <atexit>:
 8019140:	2300      	movs	r3, #0
 8019142:	4601      	mov	r1, r0
 8019144:	461a      	mov	r2, r3
 8019146:	4618      	mov	r0, r3
 8019148:	f001 bbde 	b.w	801a908 <__register_exitproc>

0801914c <atof>:
 801914c:	2100      	movs	r1, #0
 801914e:	f001 bae7 	b.w	801a720 <strtod>
	...

08019154 <calloc>:
 8019154:	4b02      	ldr	r3, [pc, #8]	; (8019160 <calloc+0xc>)
 8019156:	460a      	mov	r2, r1
 8019158:	4601      	mov	r1, r0
 801915a:	6818      	ldr	r0, [r3, #0]
 801915c:	f000 b8ea 	b.w	8019334 <_calloc_r>
 8019160:	2000069c 	.word	0x2000069c

08019164 <__errno>:
 8019164:	4b01      	ldr	r3, [pc, #4]	; (801916c <__errno+0x8>)
 8019166:	6818      	ldr	r0, [r3, #0]
 8019168:	4770      	bx	lr
 801916a:	bf00      	nop
 801916c:	2000069c 	.word	0x2000069c

08019170 <exit>:
 8019170:	b508      	push	{r3, lr}
 8019172:	4b07      	ldr	r3, [pc, #28]	; (8019190 <exit+0x20>)
 8019174:	4604      	mov	r4, r0
 8019176:	b113      	cbz	r3, 801917e <exit+0xe>
 8019178:	2100      	movs	r1, #0
 801917a:	f001 fc29 	bl	801a9d0 <__call_exitprocs>
 801917e:	4b05      	ldr	r3, [pc, #20]	; (8019194 <exit+0x24>)
 8019180:	6818      	ldr	r0, [r3, #0]
 8019182:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019184:	b103      	cbz	r3, 8019188 <exit+0x18>
 8019186:	4798      	blx	r3
 8019188:	4620      	mov	r0, r4
 801918a:	f7ee f867 	bl	800725c <_exit>
 801918e:	bf00      	nop
 8019190:	0801a9d1 	.word	0x0801a9d1
 8019194:	0803e864 	.word	0x0803e864

08019198 <fiprintf>:
 8019198:	b40e      	push	{r1, r2, r3}
 801919a:	b503      	push	{r0, r1, lr}
 801919c:	4601      	mov	r1, r0
 801919e:	ab03      	add	r3, sp, #12
 80191a0:	4805      	ldr	r0, [pc, #20]	; (80191b8 <fiprintf+0x20>)
 80191a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80191a6:	6800      	ldr	r0, [r0, #0]
 80191a8:	9301      	str	r3, [sp, #4]
 80191aa:	f000 f9a3 	bl	80194f4 <_vfiprintf_r>
 80191ae:	b002      	add	sp, #8
 80191b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80191b4:	b003      	add	sp, #12
 80191b6:	4770      	bx	lr
 80191b8:	2000069c 	.word	0x2000069c

080191bc <_fwrite_r>:
 80191bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191c0:	9c08      	ldr	r4, [sp, #32]
 80191c2:	4689      	mov	r9, r1
 80191c4:	4617      	mov	r7, r2
 80191c6:	fb02 f803 	mul.w	r8, r2, r3
 80191ca:	4606      	mov	r6, r0
 80191cc:	b118      	cbz	r0, 80191d6 <_fwrite_r+0x1a>
 80191ce:	6983      	ldr	r3, [r0, #24]
 80191d0:	b90b      	cbnz	r3, 80191d6 <_fwrite_r+0x1a>
 80191d2:	f001 fd57 	bl	801ac84 <__sinit>
 80191d6:	4b1d      	ldr	r3, [pc, #116]	; (801924c <_fwrite_r+0x90>)
 80191d8:	429c      	cmp	r4, r3
 80191da:	d11a      	bne.n	8019212 <_fwrite_r+0x56>
 80191dc:	6874      	ldr	r4, [r6, #4]
 80191de:	89a3      	ldrh	r3, [r4, #12]
 80191e0:	071b      	lsls	r3, r3, #28
 80191e2:	d520      	bpl.n	8019226 <_fwrite_r+0x6a>
 80191e4:	6923      	ldr	r3, [r4, #16]
 80191e6:	b1f3      	cbz	r3, 8019226 <_fwrite_r+0x6a>
 80191e8:	2500      	movs	r5, #0
 80191ea:	4545      	cmp	r5, r8
 80191ec:	d029      	beq.n	8019242 <_fwrite_r+0x86>
 80191ee:	68a3      	ldr	r3, [r4, #8]
 80191f0:	f819 1005 	ldrb.w	r1, [r9, r5]
 80191f4:	3b01      	subs	r3, #1
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	60a3      	str	r3, [r4, #8]
 80191fa:	da04      	bge.n	8019206 <_fwrite_r+0x4a>
 80191fc:	69a2      	ldr	r2, [r4, #24]
 80191fe:	4293      	cmp	r3, r2
 8019200:	db19      	blt.n	8019236 <_fwrite_r+0x7a>
 8019202:	290a      	cmp	r1, #10
 8019204:	d017      	beq.n	8019236 <_fwrite_r+0x7a>
 8019206:	6823      	ldr	r3, [r4, #0]
 8019208:	1c5a      	adds	r2, r3, #1
 801920a:	6022      	str	r2, [r4, #0]
 801920c:	7019      	strb	r1, [r3, #0]
 801920e:	3501      	adds	r5, #1
 8019210:	e7eb      	b.n	80191ea <_fwrite_r+0x2e>
 8019212:	4b0f      	ldr	r3, [pc, #60]	; (8019250 <_fwrite_r+0x94>)
 8019214:	429c      	cmp	r4, r3
 8019216:	d101      	bne.n	801921c <_fwrite_r+0x60>
 8019218:	68b4      	ldr	r4, [r6, #8]
 801921a:	e7e0      	b.n	80191de <_fwrite_r+0x22>
 801921c:	4b0d      	ldr	r3, [pc, #52]	; (8019254 <_fwrite_r+0x98>)
 801921e:	429c      	cmp	r4, r3
 8019220:	bf08      	it	eq
 8019222:	68f4      	ldreq	r4, [r6, #12]
 8019224:	e7db      	b.n	80191de <_fwrite_r+0x22>
 8019226:	4621      	mov	r1, r4
 8019228:	4630      	mov	r0, r6
 801922a:	f001 faff 	bl	801a82c <__swsetup_r>
 801922e:	2800      	cmp	r0, #0
 8019230:	d0da      	beq.n	80191e8 <_fwrite_r+0x2c>
 8019232:	2500      	movs	r5, #0
 8019234:	e005      	b.n	8019242 <_fwrite_r+0x86>
 8019236:	4622      	mov	r2, r4
 8019238:	4630      	mov	r0, r6
 801923a:	f001 faa5 	bl	801a788 <__swbuf_r>
 801923e:	3001      	adds	r0, #1
 8019240:	d1e5      	bne.n	801920e <_fwrite_r+0x52>
 8019242:	fbb5 f0f7 	udiv	r0, r5, r7
 8019246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801924a:	bf00      	nop
 801924c:	0803e918 	.word	0x0803e918
 8019250:	0803e938 	.word	0x0803e938
 8019254:	0803e8f8 	.word	0x0803e8f8

08019258 <fwrite>:
 8019258:	b507      	push	{r0, r1, r2, lr}
 801925a:	9300      	str	r3, [sp, #0]
 801925c:	4613      	mov	r3, r2
 801925e:	460a      	mov	r2, r1
 8019260:	4601      	mov	r1, r0
 8019262:	4803      	ldr	r0, [pc, #12]	; (8019270 <fwrite+0x18>)
 8019264:	6800      	ldr	r0, [r0, #0]
 8019266:	f7ff ffa9 	bl	80191bc <_fwrite_r>
 801926a:	b003      	add	sp, #12
 801926c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019270:	2000069c 	.word	0x2000069c

08019274 <__libc_init_array>:
 8019274:	b570      	push	{r4, r5, r6, lr}
 8019276:	4e0d      	ldr	r6, [pc, #52]	; (80192ac <__libc_init_array+0x38>)
 8019278:	4c0d      	ldr	r4, [pc, #52]	; (80192b0 <__libc_init_array+0x3c>)
 801927a:	1ba4      	subs	r4, r4, r6
 801927c:	10a4      	asrs	r4, r4, #2
 801927e:	2500      	movs	r5, #0
 8019280:	42a5      	cmp	r5, r4
 8019282:	d109      	bne.n	8019298 <__libc_init_array+0x24>
 8019284:	4e0b      	ldr	r6, [pc, #44]	; (80192b4 <__libc_init_array+0x40>)
 8019286:	4c0c      	ldr	r4, [pc, #48]	; (80192b8 <__libc_init_array+0x44>)
 8019288:	f002 ff5e 	bl	801c148 <_init>
 801928c:	1ba4      	subs	r4, r4, r6
 801928e:	10a4      	asrs	r4, r4, #2
 8019290:	2500      	movs	r5, #0
 8019292:	42a5      	cmp	r5, r4
 8019294:	d105      	bne.n	80192a2 <__libc_init_array+0x2e>
 8019296:	bd70      	pop	{r4, r5, r6, pc}
 8019298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801929c:	4798      	blx	r3
 801929e:	3501      	adds	r5, #1
 80192a0:	e7ee      	b.n	8019280 <__libc_init_array+0xc>
 80192a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80192a6:	4798      	blx	r3
 80192a8:	3501      	adds	r5, #1
 80192aa:	e7f2      	b.n	8019292 <__libc_init_array+0x1e>
 80192ac:	0803eb70 	.word	0x0803eb70
 80192b0:	0803eb70 	.word	0x0803eb70
 80192b4:	0803eb70 	.word	0x0803eb70
 80192b8:	0803eb78 	.word	0x0803eb78

080192bc <malloc>:
 80192bc:	4b02      	ldr	r3, [pc, #8]	; (80192c8 <malloc+0xc>)
 80192be:	4601      	mov	r1, r0
 80192c0:	6818      	ldr	r0, [r3, #0]
 80192c2:	f000 b893 	b.w	80193ec <_malloc_r>
 80192c6:	bf00      	nop
 80192c8:	2000069c 	.word	0x2000069c

080192cc <free>:
 80192cc:	4b02      	ldr	r3, [pc, #8]	; (80192d8 <free+0xc>)
 80192ce:	4601      	mov	r1, r0
 80192d0:	6818      	ldr	r0, [r3, #0]
 80192d2:	f000 b83d 	b.w	8019350 <_free_r>
 80192d6:	bf00      	nop
 80192d8:	2000069c 	.word	0x2000069c

080192dc <memcpy>:
 80192dc:	b510      	push	{r4, lr}
 80192de:	1e43      	subs	r3, r0, #1
 80192e0:	440a      	add	r2, r1
 80192e2:	4291      	cmp	r1, r2
 80192e4:	d100      	bne.n	80192e8 <memcpy+0xc>
 80192e6:	bd10      	pop	{r4, pc}
 80192e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80192ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80192f0:	e7f7      	b.n	80192e2 <memcpy+0x6>

080192f2 <memmove>:
 80192f2:	4288      	cmp	r0, r1
 80192f4:	b510      	push	{r4, lr}
 80192f6:	eb01 0302 	add.w	r3, r1, r2
 80192fa:	d807      	bhi.n	801930c <memmove+0x1a>
 80192fc:	1e42      	subs	r2, r0, #1
 80192fe:	4299      	cmp	r1, r3
 8019300:	d00a      	beq.n	8019318 <memmove+0x26>
 8019302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019306:	f802 4f01 	strb.w	r4, [r2, #1]!
 801930a:	e7f8      	b.n	80192fe <memmove+0xc>
 801930c:	4283      	cmp	r3, r0
 801930e:	d9f5      	bls.n	80192fc <memmove+0xa>
 8019310:	1881      	adds	r1, r0, r2
 8019312:	1ad2      	subs	r2, r2, r3
 8019314:	42d3      	cmn	r3, r2
 8019316:	d100      	bne.n	801931a <memmove+0x28>
 8019318:	bd10      	pop	{r4, pc}
 801931a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801931e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019322:	e7f7      	b.n	8019314 <memmove+0x22>

08019324 <memset>:
 8019324:	4402      	add	r2, r0
 8019326:	4603      	mov	r3, r0
 8019328:	4293      	cmp	r3, r2
 801932a:	d100      	bne.n	801932e <memset+0xa>
 801932c:	4770      	bx	lr
 801932e:	f803 1b01 	strb.w	r1, [r3], #1
 8019332:	e7f9      	b.n	8019328 <memset+0x4>

08019334 <_calloc_r>:
 8019334:	b538      	push	{r3, r4, r5, lr}
 8019336:	fb02 f401 	mul.w	r4, r2, r1
 801933a:	4621      	mov	r1, r4
 801933c:	f000 f856 	bl	80193ec <_malloc_r>
 8019340:	4605      	mov	r5, r0
 8019342:	b118      	cbz	r0, 801934c <_calloc_r+0x18>
 8019344:	4622      	mov	r2, r4
 8019346:	2100      	movs	r1, #0
 8019348:	f7ff ffec 	bl	8019324 <memset>
 801934c:	4628      	mov	r0, r5
 801934e:	bd38      	pop	{r3, r4, r5, pc}

08019350 <_free_r>:
 8019350:	b538      	push	{r3, r4, r5, lr}
 8019352:	4605      	mov	r5, r0
 8019354:	2900      	cmp	r1, #0
 8019356:	d045      	beq.n	80193e4 <_free_r+0x94>
 8019358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801935c:	1f0c      	subs	r4, r1, #4
 801935e:	2b00      	cmp	r3, #0
 8019360:	bfb8      	it	lt
 8019362:	18e4      	addlt	r4, r4, r3
 8019364:	f002 f8b6 	bl	801b4d4 <__malloc_lock>
 8019368:	4a1f      	ldr	r2, [pc, #124]	; (80193e8 <_free_r+0x98>)
 801936a:	6813      	ldr	r3, [r2, #0]
 801936c:	4610      	mov	r0, r2
 801936e:	b933      	cbnz	r3, 801937e <_free_r+0x2e>
 8019370:	6063      	str	r3, [r4, #4]
 8019372:	6014      	str	r4, [r2, #0]
 8019374:	4628      	mov	r0, r5
 8019376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801937a:	f002 b8ac 	b.w	801b4d6 <__malloc_unlock>
 801937e:	42a3      	cmp	r3, r4
 8019380:	d90c      	bls.n	801939c <_free_r+0x4c>
 8019382:	6821      	ldr	r1, [r4, #0]
 8019384:	1862      	adds	r2, r4, r1
 8019386:	4293      	cmp	r3, r2
 8019388:	bf04      	itt	eq
 801938a:	681a      	ldreq	r2, [r3, #0]
 801938c:	685b      	ldreq	r3, [r3, #4]
 801938e:	6063      	str	r3, [r4, #4]
 8019390:	bf04      	itt	eq
 8019392:	1852      	addeq	r2, r2, r1
 8019394:	6022      	streq	r2, [r4, #0]
 8019396:	6004      	str	r4, [r0, #0]
 8019398:	e7ec      	b.n	8019374 <_free_r+0x24>
 801939a:	4613      	mov	r3, r2
 801939c:	685a      	ldr	r2, [r3, #4]
 801939e:	b10a      	cbz	r2, 80193a4 <_free_r+0x54>
 80193a0:	42a2      	cmp	r2, r4
 80193a2:	d9fa      	bls.n	801939a <_free_r+0x4a>
 80193a4:	6819      	ldr	r1, [r3, #0]
 80193a6:	1858      	adds	r0, r3, r1
 80193a8:	42a0      	cmp	r0, r4
 80193aa:	d10b      	bne.n	80193c4 <_free_r+0x74>
 80193ac:	6820      	ldr	r0, [r4, #0]
 80193ae:	4401      	add	r1, r0
 80193b0:	1858      	adds	r0, r3, r1
 80193b2:	4282      	cmp	r2, r0
 80193b4:	6019      	str	r1, [r3, #0]
 80193b6:	d1dd      	bne.n	8019374 <_free_r+0x24>
 80193b8:	6810      	ldr	r0, [r2, #0]
 80193ba:	6852      	ldr	r2, [r2, #4]
 80193bc:	605a      	str	r2, [r3, #4]
 80193be:	4401      	add	r1, r0
 80193c0:	6019      	str	r1, [r3, #0]
 80193c2:	e7d7      	b.n	8019374 <_free_r+0x24>
 80193c4:	d902      	bls.n	80193cc <_free_r+0x7c>
 80193c6:	230c      	movs	r3, #12
 80193c8:	602b      	str	r3, [r5, #0]
 80193ca:	e7d3      	b.n	8019374 <_free_r+0x24>
 80193cc:	6820      	ldr	r0, [r4, #0]
 80193ce:	1821      	adds	r1, r4, r0
 80193d0:	428a      	cmp	r2, r1
 80193d2:	bf04      	itt	eq
 80193d4:	6811      	ldreq	r1, [r2, #0]
 80193d6:	6852      	ldreq	r2, [r2, #4]
 80193d8:	6062      	str	r2, [r4, #4]
 80193da:	bf04      	itt	eq
 80193dc:	1809      	addeq	r1, r1, r0
 80193de:	6021      	streq	r1, [r4, #0]
 80193e0:	605c      	str	r4, [r3, #4]
 80193e2:	e7c7      	b.n	8019374 <_free_r+0x24>
 80193e4:	bd38      	pop	{r3, r4, r5, pc}
 80193e6:	bf00      	nop
 80193e8:	2000093c 	.word	0x2000093c

080193ec <_malloc_r>:
 80193ec:	b570      	push	{r4, r5, r6, lr}
 80193ee:	1ccd      	adds	r5, r1, #3
 80193f0:	f025 0503 	bic.w	r5, r5, #3
 80193f4:	3508      	adds	r5, #8
 80193f6:	2d0c      	cmp	r5, #12
 80193f8:	bf38      	it	cc
 80193fa:	250c      	movcc	r5, #12
 80193fc:	2d00      	cmp	r5, #0
 80193fe:	4606      	mov	r6, r0
 8019400:	db01      	blt.n	8019406 <_malloc_r+0x1a>
 8019402:	42a9      	cmp	r1, r5
 8019404:	d903      	bls.n	801940e <_malloc_r+0x22>
 8019406:	230c      	movs	r3, #12
 8019408:	6033      	str	r3, [r6, #0]
 801940a:	2000      	movs	r0, #0
 801940c:	bd70      	pop	{r4, r5, r6, pc}
 801940e:	f002 f861 	bl	801b4d4 <__malloc_lock>
 8019412:	4a21      	ldr	r2, [pc, #132]	; (8019498 <_malloc_r+0xac>)
 8019414:	6814      	ldr	r4, [r2, #0]
 8019416:	4621      	mov	r1, r4
 8019418:	b991      	cbnz	r1, 8019440 <_malloc_r+0x54>
 801941a:	4c20      	ldr	r4, [pc, #128]	; (801949c <_malloc_r+0xb0>)
 801941c:	6823      	ldr	r3, [r4, #0]
 801941e:	b91b      	cbnz	r3, 8019428 <_malloc_r+0x3c>
 8019420:	4630      	mov	r0, r6
 8019422:	f000 fb05 	bl	8019a30 <_sbrk_r>
 8019426:	6020      	str	r0, [r4, #0]
 8019428:	4629      	mov	r1, r5
 801942a:	4630      	mov	r0, r6
 801942c:	f000 fb00 	bl	8019a30 <_sbrk_r>
 8019430:	1c43      	adds	r3, r0, #1
 8019432:	d124      	bne.n	801947e <_malloc_r+0x92>
 8019434:	230c      	movs	r3, #12
 8019436:	6033      	str	r3, [r6, #0]
 8019438:	4630      	mov	r0, r6
 801943a:	f002 f84c 	bl	801b4d6 <__malloc_unlock>
 801943e:	e7e4      	b.n	801940a <_malloc_r+0x1e>
 8019440:	680b      	ldr	r3, [r1, #0]
 8019442:	1b5b      	subs	r3, r3, r5
 8019444:	d418      	bmi.n	8019478 <_malloc_r+0x8c>
 8019446:	2b0b      	cmp	r3, #11
 8019448:	d90f      	bls.n	801946a <_malloc_r+0x7e>
 801944a:	600b      	str	r3, [r1, #0]
 801944c:	50cd      	str	r5, [r1, r3]
 801944e:	18cc      	adds	r4, r1, r3
 8019450:	4630      	mov	r0, r6
 8019452:	f002 f840 	bl	801b4d6 <__malloc_unlock>
 8019456:	f104 000b 	add.w	r0, r4, #11
 801945a:	1d23      	adds	r3, r4, #4
 801945c:	f020 0007 	bic.w	r0, r0, #7
 8019460:	1ac3      	subs	r3, r0, r3
 8019462:	d0d3      	beq.n	801940c <_malloc_r+0x20>
 8019464:	425a      	negs	r2, r3
 8019466:	50e2      	str	r2, [r4, r3]
 8019468:	e7d0      	b.n	801940c <_malloc_r+0x20>
 801946a:	428c      	cmp	r4, r1
 801946c:	684b      	ldr	r3, [r1, #4]
 801946e:	bf16      	itet	ne
 8019470:	6063      	strne	r3, [r4, #4]
 8019472:	6013      	streq	r3, [r2, #0]
 8019474:	460c      	movne	r4, r1
 8019476:	e7eb      	b.n	8019450 <_malloc_r+0x64>
 8019478:	460c      	mov	r4, r1
 801947a:	6849      	ldr	r1, [r1, #4]
 801947c:	e7cc      	b.n	8019418 <_malloc_r+0x2c>
 801947e:	1cc4      	adds	r4, r0, #3
 8019480:	f024 0403 	bic.w	r4, r4, #3
 8019484:	42a0      	cmp	r0, r4
 8019486:	d005      	beq.n	8019494 <_malloc_r+0xa8>
 8019488:	1a21      	subs	r1, r4, r0
 801948a:	4630      	mov	r0, r6
 801948c:	f000 fad0 	bl	8019a30 <_sbrk_r>
 8019490:	3001      	adds	r0, #1
 8019492:	d0cf      	beq.n	8019434 <_malloc_r+0x48>
 8019494:	6025      	str	r5, [r4, #0]
 8019496:	e7db      	b.n	8019450 <_malloc_r+0x64>
 8019498:	2000093c 	.word	0x2000093c
 801949c:	20000940 	.word	0x20000940

080194a0 <__sfputc_r>:
 80194a0:	6893      	ldr	r3, [r2, #8]
 80194a2:	3b01      	subs	r3, #1
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	b410      	push	{r4}
 80194a8:	6093      	str	r3, [r2, #8]
 80194aa:	da08      	bge.n	80194be <__sfputc_r+0x1e>
 80194ac:	6994      	ldr	r4, [r2, #24]
 80194ae:	42a3      	cmp	r3, r4
 80194b0:	db01      	blt.n	80194b6 <__sfputc_r+0x16>
 80194b2:	290a      	cmp	r1, #10
 80194b4:	d103      	bne.n	80194be <__sfputc_r+0x1e>
 80194b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194ba:	f001 b965 	b.w	801a788 <__swbuf_r>
 80194be:	6813      	ldr	r3, [r2, #0]
 80194c0:	1c58      	adds	r0, r3, #1
 80194c2:	6010      	str	r0, [r2, #0]
 80194c4:	7019      	strb	r1, [r3, #0]
 80194c6:	4608      	mov	r0, r1
 80194c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80194cc:	4770      	bx	lr

080194ce <__sfputs_r>:
 80194ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194d0:	4606      	mov	r6, r0
 80194d2:	460f      	mov	r7, r1
 80194d4:	4614      	mov	r4, r2
 80194d6:	18d5      	adds	r5, r2, r3
 80194d8:	42ac      	cmp	r4, r5
 80194da:	d101      	bne.n	80194e0 <__sfputs_r+0x12>
 80194dc:	2000      	movs	r0, #0
 80194de:	e007      	b.n	80194f0 <__sfputs_r+0x22>
 80194e0:	463a      	mov	r2, r7
 80194e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194e6:	4630      	mov	r0, r6
 80194e8:	f7ff ffda 	bl	80194a0 <__sfputc_r>
 80194ec:	1c43      	adds	r3, r0, #1
 80194ee:	d1f3      	bne.n	80194d8 <__sfputs_r+0xa>
 80194f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080194f4 <_vfiprintf_r>:
 80194f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194f8:	460c      	mov	r4, r1
 80194fa:	b09d      	sub	sp, #116	; 0x74
 80194fc:	4617      	mov	r7, r2
 80194fe:	461d      	mov	r5, r3
 8019500:	4606      	mov	r6, r0
 8019502:	b118      	cbz	r0, 801950c <_vfiprintf_r+0x18>
 8019504:	6983      	ldr	r3, [r0, #24]
 8019506:	b90b      	cbnz	r3, 801950c <_vfiprintf_r+0x18>
 8019508:	f001 fbbc 	bl	801ac84 <__sinit>
 801950c:	4b7c      	ldr	r3, [pc, #496]	; (8019700 <_vfiprintf_r+0x20c>)
 801950e:	429c      	cmp	r4, r3
 8019510:	d158      	bne.n	80195c4 <_vfiprintf_r+0xd0>
 8019512:	6874      	ldr	r4, [r6, #4]
 8019514:	89a3      	ldrh	r3, [r4, #12]
 8019516:	0718      	lsls	r0, r3, #28
 8019518:	d55e      	bpl.n	80195d8 <_vfiprintf_r+0xe4>
 801951a:	6923      	ldr	r3, [r4, #16]
 801951c:	2b00      	cmp	r3, #0
 801951e:	d05b      	beq.n	80195d8 <_vfiprintf_r+0xe4>
 8019520:	2300      	movs	r3, #0
 8019522:	9309      	str	r3, [sp, #36]	; 0x24
 8019524:	2320      	movs	r3, #32
 8019526:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801952a:	2330      	movs	r3, #48	; 0x30
 801952c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019530:	9503      	str	r5, [sp, #12]
 8019532:	f04f 0b01 	mov.w	fp, #1
 8019536:	46b8      	mov	r8, r7
 8019538:	4645      	mov	r5, r8
 801953a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801953e:	b10b      	cbz	r3, 8019544 <_vfiprintf_r+0x50>
 8019540:	2b25      	cmp	r3, #37	; 0x25
 8019542:	d154      	bne.n	80195ee <_vfiprintf_r+0xfa>
 8019544:	ebb8 0a07 	subs.w	sl, r8, r7
 8019548:	d00b      	beq.n	8019562 <_vfiprintf_r+0x6e>
 801954a:	4653      	mov	r3, sl
 801954c:	463a      	mov	r2, r7
 801954e:	4621      	mov	r1, r4
 8019550:	4630      	mov	r0, r6
 8019552:	f7ff ffbc 	bl	80194ce <__sfputs_r>
 8019556:	3001      	adds	r0, #1
 8019558:	f000 80c2 	beq.w	80196e0 <_vfiprintf_r+0x1ec>
 801955c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801955e:	4453      	add	r3, sl
 8019560:	9309      	str	r3, [sp, #36]	; 0x24
 8019562:	f898 3000 	ldrb.w	r3, [r8]
 8019566:	2b00      	cmp	r3, #0
 8019568:	f000 80ba 	beq.w	80196e0 <_vfiprintf_r+0x1ec>
 801956c:	2300      	movs	r3, #0
 801956e:	f04f 32ff 	mov.w	r2, #4294967295
 8019572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019576:	9304      	str	r3, [sp, #16]
 8019578:	9307      	str	r3, [sp, #28]
 801957a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801957e:	931a      	str	r3, [sp, #104]	; 0x68
 8019580:	46a8      	mov	r8, r5
 8019582:	2205      	movs	r2, #5
 8019584:	f818 1b01 	ldrb.w	r1, [r8], #1
 8019588:	485e      	ldr	r0, [pc, #376]	; (8019704 <_vfiprintf_r+0x210>)
 801958a:	f7e6 fe41 	bl	8000210 <memchr>
 801958e:	9b04      	ldr	r3, [sp, #16]
 8019590:	bb78      	cbnz	r0, 80195f2 <_vfiprintf_r+0xfe>
 8019592:	06d9      	lsls	r1, r3, #27
 8019594:	bf44      	itt	mi
 8019596:	2220      	movmi	r2, #32
 8019598:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801959c:	071a      	lsls	r2, r3, #28
 801959e:	bf44      	itt	mi
 80195a0:	222b      	movmi	r2, #43	; 0x2b
 80195a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80195a6:	782a      	ldrb	r2, [r5, #0]
 80195a8:	2a2a      	cmp	r2, #42	; 0x2a
 80195aa:	d02a      	beq.n	8019602 <_vfiprintf_r+0x10e>
 80195ac:	9a07      	ldr	r2, [sp, #28]
 80195ae:	46a8      	mov	r8, r5
 80195b0:	2000      	movs	r0, #0
 80195b2:	250a      	movs	r5, #10
 80195b4:	4641      	mov	r1, r8
 80195b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195ba:	3b30      	subs	r3, #48	; 0x30
 80195bc:	2b09      	cmp	r3, #9
 80195be:	d969      	bls.n	8019694 <_vfiprintf_r+0x1a0>
 80195c0:	b360      	cbz	r0, 801961c <_vfiprintf_r+0x128>
 80195c2:	e024      	b.n	801960e <_vfiprintf_r+0x11a>
 80195c4:	4b50      	ldr	r3, [pc, #320]	; (8019708 <_vfiprintf_r+0x214>)
 80195c6:	429c      	cmp	r4, r3
 80195c8:	d101      	bne.n	80195ce <_vfiprintf_r+0xda>
 80195ca:	68b4      	ldr	r4, [r6, #8]
 80195cc:	e7a2      	b.n	8019514 <_vfiprintf_r+0x20>
 80195ce:	4b4f      	ldr	r3, [pc, #316]	; (801970c <_vfiprintf_r+0x218>)
 80195d0:	429c      	cmp	r4, r3
 80195d2:	bf08      	it	eq
 80195d4:	68f4      	ldreq	r4, [r6, #12]
 80195d6:	e79d      	b.n	8019514 <_vfiprintf_r+0x20>
 80195d8:	4621      	mov	r1, r4
 80195da:	4630      	mov	r0, r6
 80195dc:	f001 f926 	bl	801a82c <__swsetup_r>
 80195e0:	2800      	cmp	r0, #0
 80195e2:	d09d      	beq.n	8019520 <_vfiprintf_r+0x2c>
 80195e4:	f04f 30ff 	mov.w	r0, #4294967295
 80195e8:	b01d      	add	sp, #116	; 0x74
 80195ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195ee:	46a8      	mov	r8, r5
 80195f0:	e7a2      	b.n	8019538 <_vfiprintf_r+0x44>
 80195f2:	4a44      	ldr	r2, [pc, #272]	; (8019704 <_vfiprintf_r+0x210>)
 80195f4:	1a80      	subs	r0, r0, r2
 80195f6:	fa0b f000 	lsl.w	r0, fp, r0
 80195fa:	4318      	orrs	r0, r3
 80195fc:	9004      	str	r0, [sp, #16]
 80195fe:	4645      	mov	r5, r8
 8019600:	e7be      	b.n	8019580 <_vfiprintf_r+0x8c>
 8019602:	9a03      	ldr	r2, [sp, #12]
 8019604:	1d11      	adds	r1, r2, #4
 8019606:	6812      	ldr	r2, [r2, #0]
 8019608:	9103      	str	r1, [sp, #12]
 801960a:	2a00      	cmp	r2, #0
 801960c:	db01      	blt.n	8019612 <_vfiprintf_r+0x11e>
 801960e:	9207      	str	r2, [sp, #28]
 8019610:	e004      	b.n	801961c <_vfiprintf_r+0x128>
 8019612:	4252      	negs	r2, r2
 8019614:	f043 0302 	orr.w	r3, r3, #2
 8019618:	9207      	str	r2, [sp, #28]
 801961a:	9304      	str	r3, [sp, #16]
 801961c:	f898 3000 	ldrb.w	r3, [r8]
 8019620:	2b2e      	cmp	r3, #46	; 0x2e
 8019622:	d10e      	bne.n	8019642 <_vfiprintf_r+0x14e>
 8019624:	f898 3001 	ldrb.w	r3, [r8, #1]
 8019628:	2b2a      	cmp	r3, #42	; 0x2a
 801962a:	d138      	bne.n	801969e <_vfiprintf_r+0x1aa>
 801962c:	9b03      	ldr	r3, [sp, #12]
 801962e:	1d1a      	adds	r2, r3, #4
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	9203      	str	r2, [sp, #12]
 8019634:	2b00      	cmp	r3, #0
 8019636:	bfb8      	it	lt
 8019638:	f04f 33ff 	movlt.w	r3, #4294967295
 801963c:	f108 0802 	add.w	r8, r8, #2
 8019640:	9305      	str	r3, [sp, #20]
 8019642:	4d33      	ldr	r5, [pc, #204]	; (8019710 <_vfiprintf_r+0x21c>)
 8019644:	f898 1000 	ldrb.w	r1, [r8]
 8019648:	2203      	movs	r2, #3
 801964a:	4628      	mov	r0, r5
 801964c:	f7e6 fde0 	bl	8000210 <memchr>
 8019650:	b140      	cbz	r0, 8019664 <_vfiprintf_r+0x170>
 8019652:	2340      	movs	r3, #64	; 0x40
 8019654:	1b40      	subs	r0, r0, r5
 8019656:	fa03 f000 	lsl.w	r0, r3, r0
 801965a:	9b04      	ldr	r3, [sp, #16]
 801965c:	4303      	orrs	r3, r0
 801965e:	f108 0801 	add.w	r8, r8, #1
 8019662:	9304      	str	r3, [sp, #16]
 8019664:	f898 1000 	ldrb.w	r1, [r8]
 8019668:	482a      	ldr	r0, [pc, #168]	; (8019714 <_vfiprintf_r+0x220>)
 801966a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801966e:	2206      	movs	r2, #6
 8019670:	f108 0701 	add.w	r7, r8, #1
 8019674:	f7e6 fdcc 	bl	8000210 <memchr>
 8019678:	2800      	cmp	r0, #0
 801967a:	d037      	beq.n	80196ec <_vfiprintf_r+0x1f8>
 801967c:	4b26      	ldr	r3, [pc, #152]	; (8019718 <_vfiprintf_r+0x224>)
 801967e:	bb1b      	cbnz	r3, 80196c8 <_vfiprintf_r+0x1d4>
 8019680:	9b03      	ldr	r3, [sp, #12]
 8019682:	3307      	adds	r3, #7
 8019684:	f023 0307 	bic.w	r3, r3, #7
 8019688:	3308      	adds	r3, #8
 801968a:	9303      	str	r3, [sp, #12]
 801968c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801968e:	444b      	add	r3, r9
 8019690:	9309      	str	r3, [sp, #36]	; 0x24
 8019692:	e750      	b.n	8019536 <_vfiprintf_r+0x42>
 8019694:	fb05 3202 	mla	r2, r5, r2, r3
 8019698:	2001      	movs	r0, #1
 801969a:	4688      	mov	r8, r1
 801969c:	e78a      	b.n	80195b4 <_vfiprintf_r+0xc0>
 801969e:	2300      	movs	r3, #0
 80196a0:	f108 0801 	add.w	r8, r8, #1
 80196a4:	9305      	str	r3, [sp, #20]
 80196a6:	4619      	mov	r1, r3
 80196a8:	250a      	movs	r5, #10
 80196aa:	4640      	mov	r0, r8
 80196ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196b0:	3a30      	subs	r2, #48	; 0x30
 80196b2:	2a09      	cmp	r2, #9
 80196b4:	d903      	bls.n	80196be <_vfiprintf_r+0x1ca>
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d0c3      	beq.n	8019642 <_vfiprintf_r+0x14e>
 80196ba:	9105      	str	r1, [sp, #20]
 80196bc:	e7c1      	b.n	8019642 <_vfiprintf_r+0x14e>
 80196be:	fb05 2101 	mla	r1, r5, r1, r2
 80196c2:	2301      	movs	r3, #1
 80196c4:	4680      	mov	r8, r0
 80196c6:	e7f0      	b.n	80196aa <_vfiprintf_r+0x1b6>
 80196c8:	ab03      	add	r3, sp, #12
 80196ca:	9300      	str	r3, [sp, #0]
 80196cc:	4622      	mov	r2, r4
 80196ce:	4b13      	ldr	r3, [pc, #76]	; (801971c <_vfiprintf_r+0x228>)
 80196d0:	a904      	add	r1, sp, #16
 80196d2:	4630      	mov	r0, r6
 80196d4:	f3af 8000 	nop.w
 80196d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80196dc:	4681      	mov	r9, r0
 80196de:	d1d5      	bne.n	801968c <_vfiprintf_r+0x198>
 80196e0:	89a3      	ldrh	r3, [r4, #12]
 80196e2:	065b      	lsls	r3, r3, #25
 80196e4:	f53f af7e 	bmi.w	80195e4 <_vfiprintf_r+0xf0>
 80196e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196ea:	e77d      	b.n	80195e8 <_vfiprintf_r+0xf4>
 80196ec:	ab03      	add	r3, sp, #12
 80196ee:	9300      	str	r3, [sp, #0]
 80196f0:	4622      	mov	r2, r4
 80196f2:	4b0a      	ldr	r3, [pc, #40]	; (801971c <_vfiprintf_r+0x228>)
 80196f4:	a904      	add	r1, sp, #16
 80196f6:	4630      	mov	r0, r6
 80196f8:	f000 f888 	bl	801980c <_printf_i>
 80196fc:	e7ec      	b.n	80196d8 <_vfiprintf_r+0x1e4>
 80196fe:	bf00      	nop
 8019700:	0803e918 	.word	0x0803e918
 8019704:	0803e868 	.word	0x0803e868
 8019708:	0803e938 	.word	0x0803e938
 801970c:	0803e8f8 	.word	0x0803e8f8
 8019710:	0803e86e 	.word	0x0803e86e
 8019714:	0803e872 	.word	0x0803e872
 8019718:	00000000 	.word	0x00000000
 801971c:	080194cf 	.word	0x080194cf

08019720 <_printf_common>:
 8019720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019724:	4691      	mov	r9, r2
 8019726:	461f      	mov	r7, r3
 8019728:	688a      	ldr	r2, [r1, #8]
 801972a:	690b      	ldr	r3, [r1, #16]
 801972c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019730:	4293      	cmp	r3, r2
 8019732:	bfb8      	it	lt
 8019734:	4613      	movlt	r3, r2
 8019736:	f8c9 3000 	str.w	r3, [r9]
 801973a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801973e:	4606      	mov	r6, r0
 8019740:	460c      	mov	r4, r1
 8019742:	b112      	cbz	r2, 801974a <_printf_common+0x2a>
 8019744:	3301      	adds	r3, #1
 8019746:	f8c9 3000 	str.w	r3, [r9]
 801974a:	6823      	ldr	r3, [r4, #0]
 801974c:	0699      	lsls	r1, r3, #26
 801974e:	bf42      	ittt	mi
 8019750:	f8d9 3000 	ldrmi.w	r3, [r9]
 8019754:	3302      	addmi	r3, #2
 8019756:	f8c9 3000 	strmi.w	r3, [r9]
 801975a:	6825      	ldr	r5, [r4, #0]
 801975c:	f015 0506 	ands.w	r5, r5, #6
 8019760:	d107      	bne.n	8019772 <_printf_common+0x52>
 8019762:	f104 0a19 	add.w	sl, r4, #25
 8019766:	68e3      	ldr	r3, [r4, #12]
 8019768:	f8d9 2000 	ldr.w	r2, [r9]
 801976c:	1a9b      	subs	r3, r3, r2
 801976e:	42ab      	cmp	r3, r5
 8019770:	dc28      	bgt.n	80197c4 <_printf_common+0xa4>
 8019772:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8019776:	6822      	ldr	r2, [r4, #0]
 8019778:	3300      	adds	r3, #0
 801977a:	bf18      	it	ne
 801977c:	2301      	movne	r3, #1
 801977e:	0692      	lsls	r2, r2, #26
 8019780:	d42d      	bmi.n	80197de <_printf_common+0xbe>
 8019782:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019786:	4639      	mov	r1, r7
 8019788:	4630      	mov	r0, r6
 801978a:	47c0      	blx	r8
 801978c:	3001      	adds	r0, #1
 801978e:	d020      	beq.n	80197d2 <_printf_common+0xb2>
 8019790:	6823      	ldr	r3, [r4, #0]
 8019792:	68e5      	ldr	r5, [r4, #12]
 8019794:	f8d9 2000 	ldr.w	r2, [r9]
 8019798:	f003 0306 	and.w	r3, r3, #6
 801979c:	2b04      	cmp	r3, #4
 801979e:	bf08      	it	eq
 80197a0:	1aad      	subeq	r5, r5, r2
 80197a2:	68a3      	ldr	r3, [r4, #8]
 80197a4:	6922      	ldr	r2, [r4, #16]
 80197a6:	bf0c      	ite	eq
 80197a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80197ac:	2500      	movne	r5, #0
 80197ae:	4293      	cmp	r3, r2
 80197b0:	bfc4      	itt	gt
 80197b2:	1a9b      	subgt	r3, r3, r2
 80197b4:	18ed      	addgt	r5, r5, r3
 80197b6:	f04f 0900 	mov.w	r9, #0
 80197ba:	341a      	adds	r4, #26
 80197bc:	454d      	cmp	r5, r9
 80197be:	d11a      	bne.n	80197f6 <_printf_common+0xd6>
 80197c0:	2000      	movs	r0, #0
 80197c2:	e008      	b.n	80197d6 <_printf_common+0xb6>
 80197c4:	2301      	movs	r3, #1
 80197c6:	4652      	mov	r2, sl
 80197c8:	4639      	mov	r1, r7
 80197ca:	4630      	mov	r0, r6
 80197cc:	47c0      	blx	r8
 80197ce:	3001      	adds	r0, #1
 80197d0:	d103      	bne.n	80197da <_printf_common+0xba>
 80197d2:	f04f 30ff 	mov.w	r0, #4294967295
 80197d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80197da:	3501      	adds	r5, #1
 80197dc:	e7c3      	b.n	8019766 <_printf_common+0x46>
 80197de:	18e1      	adds	r1, r4, r3
 80197e0:	1c5a      	adds	r2, r3, #1
 80197e2:	2030      	movs	r0, #48	; 0x30
 80197e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80197e8:	4422      	add	r2, r4
 80197ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80197ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80197f2:	3302      	adds	r3, #2
 80197f4:	e7c5      	b.n	8019782 <_printf_common+0x62>
 80197f6:	2301      	movs	r3, #1
 80197f8:	4622      	mov	r2, r4
 80197fa:	4639      	mov	r1, r7
 80197fc:	4630      	mov	r0, r6
 80197fe:	47c0      	blx	r8
 8019800:	3001      	adds	r0, #1
 8019802:	d0e6      	beq.n	80197d2 <_printf_common+0xb2>
 8019804:	f109 0901 	add.w	r9, r9, #1
 8019808:	e7d8      	b.n	80197bc <_printf_common+0x9c>
	...

0801980c <_printf_i>:
 801980c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019810:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8019814:	460c      	mov	r4, r1
 8019816:	7e09      	ldrb	r1, [r1, #24]
 8019818:	b085      	sub	sp, #20
 801981a:	296e      	cmp	r1, #110	; 0x6e
 801981c:	4617      	mov	r7, r2
 801981e:	4606      	mov	r6, r0
 8019820:	4698      	mov	r8, r3
 8019822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019824:	f000 80b3 	beq.w	801998e <_printf_i+0x182>
 8019828:	d822      	bhi.n	8019870 <_printf_i+0x64>
 801982a:	2963      	cmp	r1, #99	; 0x63
 801982c:	d036      	beq.n	801989c <_printf_i+0x90>
 801982e:	d80a      	bhi.n	8019846 <_printf_i+0x3a>
 8019830:	2900      	cmp	r1, #0
 8019832:	f000 80b9 	beq.w	80199a8 <_printf_i+0x19c>
 8019836:	2958      	cmp	r1, #88	; 0x58
 8019838:	f000 8083 	beq.w	8019942 <_printf_i+0x136>
 801983c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019840:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8019844:	e032      	b.n	80198ac <_printf_i+0xa0>
 8019846:	2964      	cmp	r1, #100	; 0x64
 8019848:	d001      	beq.n	801984e <_printf_i+0x42>
 801984a:	2969      	cmp	r1, #105	; 0x69
 801984c:	d1f6      	bne.n	801983c <_printf_i+0x30>
 801984e:	6820      	ldr	r0, [r4, #0]
 8019850:	6813      	ldr	r3, [r2, #0]
 8019852:	0605      	lsls	r5, r0, #24
 8019854:	f103 0104 	add.w	r1, r3, #4
 8019858:	d52a      	bpl.n	80198b0 <_printf_i+0xa4>
 801985a:	681b      	ldr	r3, [r3, #0]
 801985c:	6011      	str	r1, [r2, #0]
 801985e:	2b00      	cmp	r3, #0
 8019860:	da03      	bge.n	801986a <_printf_i+0x5e>
 8019862:	222d      	movs	r2, #45	; 0x2d
 8019864:	425b      	negs	r3, r3
 8019866:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801986a:	486f      	ldr	r0, [pc, #444]	; (8019a28 <_printf_i+0x21c>)
 801986c:	220a      	movs	r2, #10
 801986e:	e039      	b.n	80198e4 <_printf_i+0xd8>
 8019870:	2973      	cmp	r1, #115	; 0x73
 8019872:	f000 809d 	beq.w	80199b0 <_printf_i+0x1a4>
 8019876:	d808      	bhi.n	801988a <_printf_i+0x7e>
 8019878:	296f      	cmp	r1, #111	; 0x6f
 801987a:	d020      	beq.n	80198be <_printf_i+0xb2>
 801987c:	2970      	cmp	r1, #112	; 0x70
 801987e:	d1dd      	bne.n	801983c <_printf_i+0x30>
 8019880:	6823      	ldr	r3, [r4, #0]
 8019882:	f043 0320 	orr.w	r3, r3, #32
 8019886:	6023      	str	r3, [r4, #0]
 8019888:	e003      	b.n	8019892 <_printf_i+0x86>
 801988a:	2975      	cmp	r1, #117	; 0x75
 801988c:	d017      	beq.n	80198be <_printf_i+0xb2>
 801988e:	2978      	cmp	r1, #120	; 0x78
 8019890:	d1d4      	bne.n	801983c <_printf_i+0x30>
 8019892:	2378      	movs	r3, #120	; 0x78
 8019894:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019898:	4864      	ldr	r0, [pc, #400]	; (8019a2c <_printf_i+0x220>)
 801989a:	e055      	b.n	8019948 <_printf_i+0x13c>
 801989c:	6813      	ldr	r3, [r2, #0]
 801989e:	1d19      	adds	r1, r3, #4
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	6011      	str	r1, [r2, #0]
 80198a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80198a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80198ac:	2301      	movs	r3, #1
 80198ae:	e08c      	b.n	80199ca <_printf_i+0x1be>
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	6011      	str	r1, [r2, #0]
 80198b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80198b8:	bf18      	it	ne
 80198ba:	b21b      	sxthne	r3, r3
 80198bc:	e7cf      	b.n	801985e <_printf_i+0x52>
 80198be:	6813      	ldr	r3, [r2, #0]
 80198c0:	6825      	ldr	r5, [r4, #0]
 80198c2:	1d18      	adds	r0, r3, #4
 80198c4:	6010      	str	r0, [r2, #0]
 80198c6:	0628      	lsls	r0, r5, #24
 80198c8:	d501      	bpl.n	80198ce <_printf_i+0xc2>
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	e002      	b.n	80198d4 <_printf_i+0xc8>
 80198ce:	0668      	lsls	r0, r5, #25
 80198d0:	d5fb      	bpl.n	80198ca <_printf_i+0xbe>
 80198d2:	881b      	ldrh	r3, [r3, #0]
 80198d4:	4854      	ldr	r0, [pc, #336]	; (8019a28 <_printf_i+0x21c>)
 80198d6:	296f      	cmp	r1, #111	; 0x6f
 80198d8:	bf14      	ite	ne
 80198da:	220a      	movne	r2, #10
 80198dc:	2208      	moveq	r2, #8
 80198de:	2100      	movs	r1, #0
 80198e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80198e4:	6865      	ldr	r5, [r4, #4]
 80198e6:	60a5      	str	r5, [r4, #8]
 80198e8:	2d00      	cmp	r5, #0
 80198ea:	f2c0 8095 	blt.w	8019a18 <_printf_i+0x20c>
 80198ee:	6821      	ldr	r1, [r4, #0]
 80198f0:	f021 0104 	bic.w	r1, r1, #4
 80198f4:	6021      	str	r1, [r4, #0]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d13d      	bne.n	8019976 <_printf_i+0x16a>
 80198fa:	2d00      	cmp	r5, #0
 80198fc:	f040 808e 	bne.w	8019a1c <_printf_i+0x210>
 8019900:	4665      	mov	r5, ip
 8019902:	2a08      	cmp	r2, #8
 8019904:	d10b      	bne.n	801991e <_printf_i+0x112>
 8019906:	6823      	ldr	r3, [r4, #0]
 8019908:	07db      	lsls	r3, r3, #31
 801990a:	d508      	bpl.n	801991e <_printf_i+0x112>
 801990c:	6923      	ldr	r3, [r4, #16]
 801990e:	6862      	ldr	r2, [r4, #4]
 8019910:	429a      	cmp	r2, r3
 8019912:	bfde      	ittt	le
 8019914:	2330      	movle	r3, #48	; 0x30
 8019916:	f805 3c01 	strble.w	r3, [r5, #-1]
 801991a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801991e:	ebac 0305 	sub.w	r3, ip, r5
 8019922:	6123      	str	r3, [r4, #16]
 8019924:	f8cd 8000 	str.w	r8, [sp]
 8019928:	463b      	mov	r3, r7
 801992a:	aa03      	add	r2, sp, #12
 801992c:	4621      	mov	r1, r4
 801992e:	4630      	mov	r0, r6
 8019930:	f7ff fef6 	bl	8019720 <_printf_common>
 8019934:	3001      	adds	r0, #1
 8019936:	d14d      	bne.n	80199d4 <_printf_i+0x1c8>
 8019938:	f04f 30ff 	mov.w	r0, #4294967295
 801993c:	b005      	add	sp, #20
 801993e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019942:	4839      	ldr	r0, [pc, #228]	; (8019a28 <_printf_i+0x21c>)
 8019944:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8019948:	6813      	ldr	r3, [r2, #0]
 801994a:	6821      	ldr	r1, [r4, #0]
 801994c:	1d1d      	adds	r5, r3, #4
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	6015      	str	r5, [r2, #0]
 8019952:	060a      	lsls	r2, r1, #24
 8019954:	d50b      	bpl.n	801996e <_printf_i+0x162>
 8019956:	07ca      	lsls	r2, r1, #31
 8019958:	bf44      	itt	mi
 801995a:	f041 0120 	orrmi.w	r1, r1, #32
 801995e:	6021      	strmi	r1, [r4, #0]
 8019960:	b91b      	cbnz	r3, 801996a <_printf_i+0x15e>
 8019962:	6822      	ldr	r2, [r4, #0]
 8019964:	f022 0220 	bic.w	r2, r2, #32
 8019968:	6022      	str	r2, [r4, #0]
 801996a:	2210      	movs	r2, #16
 801996c:	e7b7      	b.n	80198de <_printf_i+0xd2>
 801996e:	064d      	lsls	r5, r1, #25
 8019970:	bf48      	it	mi
 8019972:	b29b      	uxthmi	r3, r3
 8019974:	e7ef      	b.n	8019956 <_printf_i+0x14a>
 8019976:	4665      	mov	r5, ip
 8019978:	fbb3 f1f2 	udiv	r1, r3, r2
 801997c:	fb02 3311 	mls	r3, r2, r1, r3
 8019980:	5cc3      	ldrb	r3, [r0, r3]
 8019982:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8019986:	460b      	mov	r3, r1
 8019988:	2900      	cmp	r1, #0
 801998a:	d1f5      	bne.n	8019978 <_printf_i+0x16c>
 801998c:	e7b9      	b.n	8019902 <_printf_i+0xf6>
 801998e:	6813      	ldr	r3, [r2, #0]
 8019990:	6825      	ldr	r5, [r4, #0]
 8019992:	6961      	ldr	r1, [r4, #20]
 8019994:	1d18      	adds	r0, r3, #4
 8019996:	6010      	str	r0, [r2, #0]
 8019998:	0628      	lsls	r0, r5, #24
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	d501      	bpl.n	80199a2 <_printf_i+0x196>
 801999e:	6019      	str	r1, [r3, #0]
 80199a0:	e002      	b.n	80199a8 <_printf_i+0x19c>
 80199a2:	066a      	lsls	r2, r5, #25
 80199a4:	d5fb      	bpl.n	801999e <_printf_i+0x192>
 80199a6:	8019      	strh	r1, [r3, #0]
 80199a8:	2300      	movs	r3, #0
 80199aa:	6123      	str	r3, [r4, #16]
 80199ac:	4665      	mov	r5, ip
 80199ae:	e7b9      	b.n	8019924 <_printf_i+0x118>
 80199b0:	6813      	ldr	r3, [r2, #0]
 80199b2:	1d19      	adds	r1, r3, #4
 80199b4:	6011      	str	r1, [r2, #0]
 80199b6:	681d      	ldr	r5, [r3, #0]
 80199b8:	6862      	ldr	r2, [r4, #4]
 80199ba:	2100      	movs	r1, #0
 80199bc:	4628      	mov	r0, r5
 80199be:	f7e6 fc27 	bl	8000210 <memchr>
 80199c2:	b108      	cbz	r0, 80199c8 <_printf_i+0x1bc>
 80199c4:	1b40      	subs	r0, r0, r5
 80199c6:	6060      	str	r0, [r4, #4]
 80199c8:	6863      	ldr	r3, [r4, #4]
 80199ca:	6123      	str	r3, [r4, #16]
 80199cc:	2300      	movs	r3, #0
 80199ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80199d2:	e7a7      	b.n	8019924 <_printf_i+0x118>
 80199d4:	6923      	ldr	r3, [r4, #16]
 80199d6:	462a      	mov	r2, r5
 80199d8:	4639      	mov	r1, r7
 80199da:	4630      	mov	r0, r6
 80199dc:	47c0      	blx	r8
 80199de:	3001      	adds	r0, #1
 80199e0:	d0aa      	beq.n	8019938 <_printf_i+0x12c>
 80199e2:	6823      	ldr	r3, [r4, #0]
 80199e4:	079b      	lsls	r3, r3, #30
 80199e6:	d413      	bmi.n	8019a10 <_printf_i+0x204>
 80199e8:	68e0      	ldr	r0, [r4, #12]
 80199ea:	9b03      	ldr	r3, [sp, #12]
 80199ec:	4298      	cmp	r0, r3
 80199ee:	bfb8      	it	lt
 80199f0:	4618      	movlt	r0, r3
 80199f2:	e7a3      	b.n	801993c <_printf_i+0x130>
 80199f4:	2301      	movs	r3, #1
 80199f6:	464a      	mov	r2, r9
 80199f8:	4639      	mov	r1, r7
 80199fa:	4630      	mov	r0, r6
 80199fc:	47c0      	blx	r8
 80199fe:	3001      	adds	r0, #1
 8019a00:	d09a      	beq.n	8019938 <_printf_i+0x12c>
 8019a02:	3501      	adds	r5, #1
 8019a04:	68e3      	ldr	r3, [r4, #12]
 8019a06:	9a03      	ldr	r2, [sp, #12]
 8019a08:	1a9b      	subs	r3, r3, r2
 8019a0a:	42ab      	cmp	r3, r5
 8019a0c:	dcf2      	bgt.n	80199f4 <_printf_i+0x1e8>
 8019a0e:	e7eb      	b.n	80199e8 <_printf_i+0x1dc>
 8019a10:	2500      	movs	r5, #0
 8019a12:	f104 0919 	add.w	r9, r4, #25
 8019a16:	e7f5      	b.n	8019a04 <_printf_i+0x1f8>
 8019a18:	2b00      	cmp	r3, #0
 8019a1a:	d1ac      	bne.n	8019976 <_printf_i+0x16a>
 8019a1c:	7803      	ldrb	r3, [r0, #0]
 8019a1e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019a22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019a26:	e76c      	b.n	8019902 <_printf_i+0xf6>
 8019a28:	0803e879 	.word	0x0803e879
 8019a2c:	0803e88a 	.word	0x0803e88a

08019a30 <_sbrk_r>:
 8019a30:	b538      	push	{r3, r4, r5, lr}
 8019a32:	4c06      	ldr	r4, [pc, #24]	; (8019a4c <_sbrk_r+0x1c>)
 8019a34:	2300      	movs	r3, #0
 8019a36:	4605      	mov	r5, r0
 8019a38:	4608      	mov	r0, r1
 8019a3a:	6023      	str	r3, [r4, #0]
 8019a3c:	f7ed fc86 	bl	800734c <_sbrk>
 8019a40:	1c43      	adds	r3, r0, #1
 8019a42:	d102      	bne.n	8019a4a <_sbrk_r+0x1a>
 8019a44:	6823      	ldr	r3, [r4, #0]
 8019a46:	b103      	cbz	r3, 8019a4a <_sbrk_r+0x1a>
 8019a48:	602b      	str	r3, [r5, #0]
 8019a4a:	bd38      	pop	{r3, r4, r5, pc}
 8019a4c:	200009d8 	.word	0x200009d8

08019a50 <_raise_r>:
 8019a50:	291f      	cmp	r1, #31
 8019a52:	b538      	push	{r3, r4, r5, lr}
 8019a54:	4604      	mov	r4, r0
 8019a56:	460d      	mov	r5, r1
 8019a58:	d904      	bls.n	8019a64 <_raise_r+0x14>
 8019a5a:	2316      	movs	r3, #22
 8019a5c:	6003      	str	r3, [r0, #0]
 8019a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8019a62:	bd38      	pop	{r3, r4, r5, pc}
 8019a64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019a66:	b112      	cbz	r2, 8019a6e <_raise_r+0x1e>
 8019a68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019a6c:	b94b      	cbnz	r3, 8019a82 <_raise_r+0x32>
 8019a6e:	4620      	mov	r0, r4
 8019a70:	f000 f830 	bl	8019ad4 <_getpid_r>
 8019a74:	462a      	mov	r2, r5
 8019a76:	4601      	mov	r1, r0
 8019a78:	4620      	mov	r0, r4
 8019a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a7e:	f000 b817 	b.w	8019ab0 <_kill_r>
 8019a82:	2b01      	cmp	r3, #1
 8019a84:	d00a      	beq.n	8019a9c <_raise_r+0x4c>
 8019a86:	1c59      	adds	r1, r3, #1
 8019a88:	d103      	bne.n	8019a92 <_raise_r+0x42>
 8019a8a:	2316      	movs	r3, #22
 8019a8c:	6003      	str	r3, [r0, #0]
 8019a8e:	2001      	movs	r0, #1
 8019a90:	e7e7      	b.n	8019a62 <_raise_r+0x12>
 8019a92:	2400      	movs	r4, #0
 8019a94:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019a98:	4628      	mov	r0, r5
 8019a9a:	4798      	blx	r3
 8019a9c:	2000      	movs	r0, #0
 8019a9e:	e7e0      	b.n	8019a62 <_raise_r+0x12>

08019aa0 <raise>:
 8019aa0:	4b02      	ldr	r3, [pc, #8]	; (8019aac <raise+0xc>)
 8019aa2:	4601      	mov	r1, r0
 8019aa4:	6818      	ldr	r0, [r3, #0]
 8019aa6:	f7ff bfd3 	b.w	8019a50 <_raise_r>
 8019aaa:	bf00      	nop
 8019aac:	2000069c 	.word	0x2000069c

08019ab0 <_kill_r>:
 8019ab0:	b538      	push	{r3, r4, r5, lr}
 8019ab2:	4c07      	ldr	r4, [pc, #28]	; (8019ad0 <_kill_r+0x20>)
 8019ab4:	2300      	movs	r3, #0
 8019ab6:	4605      	mov	r5, r0
 8019ab8:	4608      	mov	r0, r1
 8019aba:	4611      	mov	r1, r2
 8019abc:	6023      	str	r3, [r4, #0]
 8019abe:	f7ed fbbd 	bl	800723c <_kill>
 8019ac2:	1c43      	adds	r3, r0, #1
 8019ac4:	d102      	bne.n	8019acc <_kill_r+0x1c>
 8019ac6:	6823      	ldr	r3, [r4, #0]
 8019ac8:	b103      	cbz	r3, 8019acc <_kill_r+0x1c>
 8019aca:	602b      	str	r3, [r5, #0]
 8019acc:	bd38      	pop	{r3, r4, r5, pc}
 8019ace:	bf00      	nop
 8019ad0:	200009d8 	.word	0x200009d8

08019ad4 <_getpid_r>:
 8019ad4:	f7ed bbaa 	b.w	800722c <_getpid>

08019ad8 <strncmp>:
 8019ad8:	b510      	push	{r4, lr}
 8019ada:	b16a      	cbz	r2, 8019af8 <strncmp+0x20>
 8019adc:	3901      	subs	r1, #1
 8019ade:	1884      	adds	r4, r0, r2
 8019ae0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019ae4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019ae8:	4293      	cmp	r3, r2
 8019aea:	d103      	bne.n	8019af4 <strncmp+0x1c>
 8019aec:	42a0      	cmp	r0, r4
 8019aee:	d001      	beq.n	8019af4 <strncmp+0x1c>
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d1f5      	bne.n	8019ae0 <strncmp+0x8>
 8019af4:	1a98      	subs	r0, r3, r2
 8019af6:	bd10      	pop	{r4, pc}
 8019af8:	4610      	mov	r0, r2
 8019afa:	e7fc      	b.n	8019af6 <strncmp+0x1e>

08019afc <sulp>:
 8019afc:	b570      	push	{r4, r5, r6, lr}
 8019afe:	4604      	mov	r4, r0
 8019b00:	460d      	mov	r5, r1
 8019b02:	ec45 4b10 	vmov	d0, r4, r5
 8019b06:	4616      	mov	r6, r2
 8019b08:	f001 ffb2 	bl	801ba70 <__ulp>
 8019b0c:	ec51 0b10 	vmov	r0, r1, d0
 8019b10:	b17e      	cbz	r6, 8019b32 <sulp+0x36>
 8019b12:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8019b16:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	dd09      	ble.n	8019b32 <sulp+0x36>
 8019b1e:	051b      	lsls	r3, r3, #20
 8019b20:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019b24:	2400      	movs	r4, #0
 8019b26:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8019b2a:	4622      	mov	r2, r4
 8019b2c:	462b      	mov	r3, r5
 8019b2e:	f7e6 fd7b 	bl	8000628 <__aeabi_dmul>
 8019b32:	bd70      	pop	{r4, r5, r6, pc}
 8019b34:	0000      	movs	r0, r0
	...

08019b38 <_strtod_l>:
 8019b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b3c:	461f      	mov	r7, r3
 8019b3e:	b0a1      	sub	sp, #132	; 0x84
 8019b40:	2300      	movs	r3, #0
 8019b42:	4681      	mov	r9, r0
 8019b44:	4638      	mov	r0, r7
 8019b46:	460e      	mov	r6, r1
 8019b48:	9217      	str	r2, [sp, #92]	; 0x5c
 8019b4a:	931c      	str	r3, [sp, #112]	; 0x70
 8019b4c:	f001 fc4a 	bl	801b3e4 <__localeconv_l>
 8019b50:	4680      	mov	r8, r0
 8019b52:	6800      	ldr	r0, [r0, #0]
 8019b54:	f7e6 fb4e 	bl	80001f4 <strlen>
 8019b58:	f04f 0a00 	mov.w	sl, #0
 8019b5c:	4604      	mov	r4, r0
 8019b5e:	f04f 0b00 	mov.w	fp, #0
 8019b62:	961b      	str	r6, [sp, #108]	; 0x6c
 8019b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019b66:	781a      	ldrb	r2, [r3, #0]
 8019b68:	2a0d      	cmp	r2, #13
 8019b6a:	d832      	bhi.n	8019bd2 <_strtod_l+0x9a>
 8019b6c:	2a09      	cmp	r2, #9
 8019b6e:	d236      	bcs.n	8019bde <_strtod_l+0xa6>
 8019b70:	2a00      	cmp	r2, #0
 8019b72:	d03e      	beq.n	8019bf2 <_strtod_l+0xba>
 8019b74:	2300      	movs	r3, #0
 8019b76:	930d      	str	r3, [sp, #52]	; 0x34
 8019b78:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8019b7a:	782b      	ldrb	r3, [r5, #0]
 8019b7c:	2b30      	cmp	r3, #48	; 0x30
 8019b7e:	f040 80ac 	bne.w	8019cda <_strtod_l+0x1a2>
 8019b82:	786b      	ldrb	r3, [r5, #1]
 8019b84:	2b58      	cmp	r3, #88	; 0x58
 8019b86:	d001      	beq.n	8019b8c <_strtod_l+0x54>
 8019b88:	2b78      	cmp	r3, #120	; 0x78
 8019b8a:	d167      	bne.n	8019c5c <_strtod_l+0x124>
 8019b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019b8e:	9301      	str	r3, [sp, #4]
 8019b90:	ab1c      	add	r3, sp, #112	; 0x70
 8019b92:	9300      	str	r3, [sp, #0]
 8019b94:	9702      	str	r7, [sp, #8]
 8019b96:	ab1d      	add	r3, sp, #116	; 0x74
 8019b98:	4a88      	ldr	r2, [pc, #544]	; (8019dbc <_strtod_l+0x284>)
 8019b9a:	a91b      	add	r1, sp, #108	; 0x6c
 8019b9c:	4648      	mov	r0, r9
 8019b9e:	f001 f94a 	bl	801ae36 <__gethex>
 8019ba2:	f010 0407 	ands.w	r4, r0, #7
 8019ba6:	4606      	mov	r6, r0
 8019ba8:	d005      	beq.n	8019bb6 <_strtod_l+0x7e>
 8019baa:	2c06      	cmp	r4, #6
 8019bac:	d12b      	bne.n	8019c06 <_strtod_l+0xce>
 8019bae:	3501      	adds	r5, #1
 8019bb0:	2300      	movs	r3, #0
 8019bb2:	951b      	str	r5, [sp, #108]	; 0x6c
 8019bb4:	930d      	str	r3, [sp, #52]	; 0x34
 8019bb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	f040 859a 	bne.w	801a6f2 <_strtod_l+0xbba>
 8019bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019bc0:	b1e3      	cbz	r3, 8019bfc <_strtod_l+0xc4>
 8019bc2:	4652      	mov	r2, sl
 8019bc4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8019bc8:	ec43 2b10 	vmov	d0, r2, r3
 8019bcc:	b021      	add	sp, #132	; 0x84
 8019bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bd2:	2a2b      	cmp	r2, #43	; 0x2b
 8019bd4:	d015      	beq.n	8019c02 <_strtod_l+0xca>
 8019bd6:	2a2d      	cmp	r2, #45	; 0x2d
 8019bd8:	d004      	beq.n	8019be4 <_strtod_l+0xac>
 8019bda:	2a20      	cmp	r2, #32
 8019bdc:	d1ca      	bne.n	8019b74 <_strtod_l+0x3c>
 8019bde:	3301      	adds	r3, #1
 8019be0:	931b      	str	r3, [sp, #108]	; 0x6c
 8019be2:	e7bf      	b.n	8019b64 <_strtod_l+0x2c>
 8019be4:	2201      	movs	r2, #1
 8019be6:	920d      	str	r2, [sp, #52]	; 0x34
 8019be8:	1c5a      	adds	r2, r3, #1
 8019bea:	921b      	str	r2, [sp, #108]	; 0x6c
 8019bec:	785b      	ldrb	r3, [r3, #1]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d1c2      	bne.n	8019b78 <_strtod_l+0x40>
 8019bf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019bf4:	961b      	str	r6, [sp, #108]	; 0x6c
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	f040 8579 	bne.w	801a6ee <_strtod_l+0xbb6>
 8019bfc:	4652      	mov	r2, sl
 8019bfe:	465b      	mov	r3, fp
 8019c00:	e7e2      	b.n	8019bc8 <_strtod_l+0x90>
 8019c02:	2200      	movs	r2, #0
 8019c04:	e7ef      	b.n	8019be6 <_strtod_l+0xae>
 8019c06:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019c08:	b13a      	cbz	r2, 8019c1a <_strtod_l+0xe2>
 8019c0a:	2135      	movs	r1, #53	; 0x35
 8019c0c:	a81e      	add	r0, sp, #120	; 0x78
 8019c0e:	f002 f827 	bl	801bc60 <__copybits>
 8019c12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019c14:	4648      	mov	r0, r9
 8019c16:	f001 fc93 	bl	801b540 <_Bfree>
 8019c1a:	3c01      	subs	r4, #1
 8019c1c:	2c04      	cmp	r4, #4
 8019c1e:	d806      	bhi.n	8019c2e <_strtod_l+0xf6>
 8019c20:	e8df f004 	tbb	[pc, r4]
 8019c24:	1714030a 	.word	0x1714030a
 8019c28:	0a          	.byte	0x0a
 8019c29:	00          	.byte	0x00
 8019c2a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8019c2e:	0730      	lsls	r0, r6, #28
 8019c30:	d5c1      	bpl.n	8019bb6 <_strtod_l+0x7e>
 8019c32:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8019c36:	e7be      	b.n	8019bb6 <_strtod_l+0x7e>
 8019c38:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8019c3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019c3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019c42:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019c46:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8019c4a:	e7f0      	b.n	8019c2e <_strtod_l+0xf6>
 8019c4c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8019dc0 <_strtod_l+0x288>
 8019c50:	e7ed      	b.n	8019c2e <_strtod_l+0xf6>
 8019c52:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8019c56:	f04f 3aff 	mov.w	sl, #4294967295
 8019c5a:	e7e8      	b.n	8019c2e <_strtod_l+0xf6>
 8019c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019c5e:	1c5a      	adds	r2, r3, #1
 8019c60:	921b      	str	r2, [sp, #108]	; 0x6c
 8019c62:	785b      	ldrb	r3, [r3, #1]
 8019c64:	2b30      	cmp	r3, #48	; 0x30
 8019c66:	d0f9      	beq.n	8019c5c <_strtod_l+0x124>
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d0a4      	beq.n	8019bb6 <_strtod_l+0x7e>
 8019c6c:	2301      	movs	r3, #1
 8019c6e:	2500      	movs	r5, #0
 8019c70:	9306      	str	r3, [sp, #24]
 8019c72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019c74:	9308      	str	r3, [sp, #32]
 8019c76:	9507      	str	r5, [sp, #28]
 8019c78:	9505      	str	r5, [sp, #20]
 8019c7a:	220a      	movs	r2, #10
 8019c7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8019c7e:	7807      	ldrb	r7, [r0, #0]
 8019c80:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8019c84:	b2d9      	uxtb	r1, r3
 8019c86:	2909      	cmp	r1, #9
 8019c88:	d929      	bls.n	8019cde <_strtod_l+0x1a6>
 8019c8a:	4622      	mov	r2, r4
 8019c8c:	f8d8 1000 	ldr.w	r1, [r8]
 8019c90:	f7ff ff22 	bl	8019ad8 <strncmp>
 8019c94:	2800      	cmp	r0, #0
 8019c96:	d031      	beq.n	8019cfc <_strtod_l+0x1c4>
 8019c98:	2000      	movs	r0, #0
 8019c9a:	9c05      	ldr	r4, [sp, #20]
 8019c9c:	9004      	str	r0, [sp, #16]
 8019c9e:	463b      	mov	r3, r7
 8019ca0:	4602      	mov	r2, r0
 8019ca2:	2b65      	cmp	r3, #101	; 0x65
 8019ca4:	d001      	beq.n	8019caa <_strtod_l+0x172>
 8019ca6:	2b45      	cmp	r3, #69	; 0x45
 8019ca8:	d114      	bne.n	8019cd4 <_strtod_l+0x19c>
 8019caa:	b924      	cbnz	r4, 8019cb6 <_strtod_l+0x17e>
 8019cac:	b910      	cbnz	r0, 8019cb4 <_strtod_l+0x17c>
 8019cae:	9b06      	ldr	r3, [sp, #24]
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d09e      	beq.n	8019bf2 <_strtod_l+0xba>
 8019cb4:	2400      	movs	r4, #0
 8019cb6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8019cb8:	1c73      	adds	r3, r6, #1
 8019cba:	931b      	str	r3, [sp, #108]	; 0x6c
 8019cbc:	7873      	ldrb	r3, [r6, #1]
 8019cbe:	2b2b      	cmp	r3, #43	; 0x2b
 8019cc0:	d078      	beq.n	8019db4 <_strtod_l+0x27c>
 8019cc2:	2b2d      	cmp	r3, #45	; 0x2d
 8019cc4:	d070      	beq.n	8019da8 <_strtod_l+0x270>
 8019cc6:	f04f 0c00 	mov.w	ip, #0
 8019cca:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8019cce:	2f09      	cmp	r7, #9
 8019cd0:	d97c      	bls.n	8019dcc <_strtod_l+0x294>
 8019cd2:	961b      	str	r6, [sp, #108]	; 0x6c
 8019cd4:	f04f 0e00 	mov.w	lr, #0
 8019cd8:	e09a      	b.n	8019e10 <_strtod_l+0x2d8>
 8019cda:	2300      	movs	r3, #0
 8019cdc:	e7c7      	b.n	8019c6e <_strtod_l+0x136>
 8019cde:	9905      	ldr	r1, [sp, #20]
 8019ce0:	2908      	cmp	r1, #8
 8019ce2:	bfdd      	ittte	le
 8019ce4:	9907      	ldrle	r1, [sp, #28]
 8019ce6:	fb02 3301 	mlale	r3, r2, r1, r3
 8019cea:	9307      	strle	r3, [sp, #28]
 8019cec:	fb02 3505 	mlagt	r5, r2, r5, r3
 8019cf0:	9b05      	ldr	r3, [sp, #20]
 8019cf2:	3001      	adds	r0, #1
 8019cf4:	3301      	adds	r3, #1
 8019cf6:	9305      	str	r3, [sp, #20]
 8019cf8:	901b      	str	r0, [sp, #108]	; 0x6c
 8019cfa:	e7bf      	b.n	8019c7c <_strtod_l+0x144>
 8019cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019cfe:	191a      	adds	r2, r3, r4
 8019d00:	921b      	str	r2, [sp, #108]	; 0x6c
 8019d02:	9a05      	ldr	r2, [sp, #20]
 8019d04:	5d1b      	ldrb	r3, [r3, r4]
 8019d06:	2a00      	cmp	r2, #0
 8019d08:	d037      	beq.n	8019d7a <_strtod_l+0x242>
 8019d0a:	9c05      	ldr	r4, [sp, #20]
 8019d0c:	4602      	mov	r2, r0
 8019d0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8019d12:	2909      	cmp	r1, #9
 8019d14:	d913      	bls.n	8019d3e <_strtod_l+0x206>
 8019d16:	2101      	movs	r1, #1
 8019d18:	9104      	str	r1, [sp, #16]
 8019d1a:	e7c2      	b.n	8019ca2 <_strtod_l+0x16a>
 8019d1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019d1e:	1c5a      	adds	r2, r3, #1
 8019d20:	921b      	str	r2, [sp, #108]	; 0x6c
 8019d22:	785b      	ldrb	r3, [r3, #1]
 8019d24:	3001      	adds	r0, #1
 8019d26:	2b30      	cmp	r3, #48	; 0x30
 8019d28:	d0f8      	beq.n	8019d1c <_strtod_l+0x1e4>
 8019d2a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8019d2e:	2a08      	cmp	r2, #8
 8019d30:	f200 84e4 	bhi.w	801a6fc <_strtod_l+0xbc4>
 8019d34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019d36:	9208      	str	r2, [sp, #32]
 8019d38:	4602      	mov	r2, r0
 8019d3a:	2000      	movs	r0, #0
 8019d3c:	4604      	mov	r4, r0
 8019d3e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8019d42:	f100 0101 	add.w	r1, r0, #1
 8019d46:	d012      	beq.n	8019d6e <_strtod_l+0x236>
 8019d48:	440a      	add	r2, r1
 8019d4a:	eb00 0c04 	add.w	ip, r0, r4
 8019d4e:	4621      	mov	r1, r4
 8019d50:	270a      	movs	r7, #10
 8019d52:	458c      	cmp	ip, r1
 8019d54:	d113      	bne.n	8019d7e <_strtod_l+0x246>
 8019d56:	1821      	adds	r1, r4, r0
 8019d58:	2908      	cmp	r1, #8
 8019d5a:	f104 0401 	add.w	r4, r4, #1
 8019d5e:	4404      	add	r4, r0
 8019d60:	dc19      	bgt.n	8019d96 <_strtod_l+0x25e>
 8019d62:	9b07      	ldr	r3, [sp, #28]
 8019d64:	210a      	movs	r1, #10
 8019d66:	fb01 e303 	mla	r3, r1, r3, lr
 8019d6a:	9307      	str	r3, [sp, #28]
 8019d6c:	2100      	movs	r1, #0
 8019d6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019d70:	1c58      	adds	r0, r3, #1
 8019d72:	901b      	str	r0, [sp, #108]	; 0x6c
 8019d74:	785b      	ldrb	r3, [r3, #1]
 8019d76:	4608      	mov	r0, r1
 8019d78:	e7c9      	b.n	8019d0e <_strtod_l+0x1d6>
 8019d7a:	9805      	ldr	r0, [sp, #20]
 8019d7c:	e7d3      	b.n	8019d26 <_strtod_l+0x1ee>
 8019d7e:	2908      	cmp	r1, #8
 8019d80:	f101 0101 	add.w	r1, r1, #1
 8019d84:	dc03      	bgt.n	8019d8e <_strtod_l+0x256>
 8019d86:	9b07      	ldr	r3, [sp, #28]
 8019d88:	437b      	muls	r3, r7
 8019d8a:	9307      	str	r3, [sp, #28]
 8019d8c:	e7e1      	b.n	8019d52 <_strtod_l+0x21a>
 8019d8e:	2910      	cmp	r1, #16
 8019d90:	bfd8      	it	le
 8019d92:	437d      	mulle	r5, r7
 8019d94:	e7dd      	b.n	8019d52 <_strtod_l+0x21a>
 8019d96:	2c10      	cmp	r4, #16
 8019d98:	bfdc      	itt	le
 8019d9a:	210a      	movle	r1, #10
 8019d9c:	fb01 e505 	mlale	r5, r1, r5, lr
 8019da0:	e7e4      	b.n	8019d6c <_strtod_l+0x234>
 8019da2:	2301      	movs	r3, #1
 8019da4:	9304      	str	r3, [sp, #16]
 8019da6:	e781      	b.n	8019cac <_strtod_l+0x174>
 8019da8:	f04f 0c01 	mov.w	ip, #1
 8019dac:	1cb3      	adds	r3, r6, #2
 8019dae:	931b      	str	r3, [sp, #108]	; 0x6c
 8019db0:	78b3      	ldrb	r3, [r6, #2]
 8019db2:	e78a      	b.n	8019cca <_strtod_l+0x192>
 8019db4:	f04f 0c00 	mov.w	ip, #0
 8019db8:	e7f8      	b.n	8019dac <_strtod_l+0x274>
 8019dba:	bf00      	nop
 8019dbc:	0803e8a8 	.word	0x0803e8a8
 8019dc0:	7ff00000 	.word	0x7ff00000
 8019dc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019dc6:	1c5f      	adds	r7, r3, #1
 8019dc8:	971b      	str	r7, [sp, #108]	; 0x6c
 8019dca:	785b      	ldrb	r3, [r3, #1]
 8019dcc:	2b30      	cmp	r3, #48	; 0x30
 8019dce:	d0f9      	beq.n	8019dc4 <_strtod_l+0x28c>
 8019dd0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8019dd4:	2f08      	cmp	r7, #8
 8019dd6:	f63f af7d 	bhi.w	8019cd4 <_strtod_l+0x19c>
 8019dda:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8019dde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019de0:	930a      	str	r3, [sp, #40]	; 0x28
 8019de2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019de4:	1c5f      	adds	r7, r3, #1
 8019de6:	971b      	str	r7, [sp, #108]	; 0x6c
 8019de8:	785b      	ldrb	r3, [r3, #1]
 8019dea:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8019dee:	f1b8 0f09 	cmp.w	r8, #9
 8019df2:	d937      	bls.n	8019e64 <_strtod_l+0x32c>
 8019df4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019df6:	1a7f      	subs	r7, r7, r1
 8019df8:	2f08      	cmp	r7, #8
 8019dfa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8019dfe:	dc37      	bgt.n	8019e70 <_strtod_l+0x338>
 8019e00:	45be      	cmp	lr, r7
 8019e02:	bfa8      	it	ge
 8019e04:	46be      	movge	lr, r7
 8019e06:	f1bc 0f00 	cmp.w	ip, #0
 8019e0a:	d001      	beq.n	8019e10 <_strtod_l+0x2d8>
 8019e0c:	f1ce 0e00 	rsb	lr, lr, #0
 8019e10:	2c00      	cmp	r4, #0
 8019e12:	d151      	bne.n	8019eb8 <_strtod_l+0x380>
 8019e14:	2800      	cmp	r0, #0
 8019e16:	f47f aece 	bne.w	8019bb6 <_strtod_l+0x7e>
 8019e1a:	9a06      	ldr	r2, [sp, #24]
 8019e1c:	2a00      	cmp	r2, #0
 8019e1e:	f47f aeca 	bne.w	8019bb6 <_strtod_l+0x7e>
 8019e22:	9a04      	ldr	r2, [sp, #16]
 8019e24:	2a00      	cmp	r2, #0
 8019e26:	f47f aee4 	bne.w	8019bf2 <_strtod_l+0xba>
 8019e2a:	2b4e      	cmp	r3, #78	; 0x4e
 8019e2c:	d027      	beq.n	8019e7e <_strtod_l+0x346>
 8019e2e:	dc21      	bgt.n	8019e74 <_strtod_l+0x33c>
 8019e30:	2b49      	cmp	r3, #73	; 0x49
 8019e32:	f47f aede 	bne.w	8019bf2 <_strtod_l+0xba>
 8019e36:	49a0      	ldr	r1, [pc, #640]	; (801a0b8 <_strtod_l+0x580>)
 8019e38:	a81b      	add	r0, sp, #108	; 0x6c
 8019e3a:	f001 fa2f 	bl	801b29c <__match>
 8019e3e:	2800      	cmp	r0, #0
 8019e40:	f43f aed7 	beq.w	8019bf2 <_strtod_l+0xba>
 8019e44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019e46:	499d      	ldr	r1, [pc, #628]	; (801a0bc <_strtod_l+0x584>)
 8019e48:	3b01      	subs	r3, #1
 8019e4a:	a81b      	add	r0, sp, #108	; 0x6c
 8019e4c:	931b      	str	r3, [sp, #108]	; 0x6c
 8019e4e:	f001 fa25 	bl	801b29c <__match>
 8019e52:	b910      	cbnz	r0, 8019e5a <_strtod_l+0x322>
 8019e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019e56:	3301      	adds	r3, #1
 8019e58:	931b      	str	r3, [sp, #108]	; 0x6c
 8019e5a:	f8df b274 	ldr.w	fp, [pc, #628]	; 801a0d0 <_strtod_l+0x598>
 8019e5e:	f04f 0a00 	mov.w	sl, #0
 8019e62:	e6a8      	b.n	8019bb6 <_strtod_l+0x7e>
 8019e64:	210a      	movs	r1, #10
 8019e66:	fb01 3e0e 	mla	lr, r1, lr, r3
 8019e6a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8019e6e:	e7b8      	b.n	8019de2 <_strtod_l+0x2aa>
 8019e70:	46be      	mov	lr, r7
 8019e72:	e7c8      	b.n	8019e06 <_strtod_l+0x2ce>
 8019e74:	2b69      	cmp	r3, #105	; 0x69
 8019e76:	d0de      	beq.n	8019e36 <_strtod_l+0x2fe>
 8019e78:	2b6e      	cmp	r3, #110	; 0x6e
 8019e7a:	f47f aeba 	bne.w	8019bf2 <_strtod_l+0xba>
 8019e7e:	4990      	ldr	r1, [pc, #576]	; (801a0c0 <_strtod_l+0x588>)
 8019e80:	a81b      	add	r0, sp, #108	; 0x6c
 8019e82:	f001 fa0b 	bl	801b29c <__match>
 8019e86:	2800      	cmp	r0, #0
 8019e88:	f43f aeb3 	beq.w	8019bf2 <_strtod_l+0xba>
 8019e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8019e8e:	781b      	ldrb	r3, [r3, #0]
 8019e90:	2b28      	cmp	r3, #40	; 0x28
 8019e92:	d10e      	bne.n	8019eb2 <_strtod_l+0x37a>
 8019e94:	aa1e      	add	r2, sp, #120	; 0x78
 8019e96:	498b      	ldr	r1, [pc, #556]	; (801a0c4 <_strtod_l+0x58c>)
 8019e98:	a81b      	add	r0, sp, #108	; 0x6c
 8019e9a:	f001 fa13 	bl	801b2c4 <__hexnan>
 8019e9e:	2805      	cmp	r0, #5
 8019ea0:	d107      	bne.n	8019eb2 <_strtod_l+0x37a>
 8019ea2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8019ea4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8019ea8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8019eac:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8019eb0:	e681      	b.n	8019bb6 <_strtod_l+0x7e>
 8019eb2:	f8df b224 	ldr.w	fp, [pc, #548]	; 801a0d8 <_strtod_l+0x5a0>
 8019eb6:	e7d2      	b.n	8019e5e <_strtod_l+0x326>
 8019eb8:	ebae 0302 	sub.w	r3, lr, r2
 8019ebc:	9306      	str	r3, [sp, #24]
 8019ebe:	9b05      	ldr	r3, [sp, #20]
 8019ec0:	9807      	ldr	r0, [sp, #28]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	bf08      	it	eq
 8019ec6:	4623      	moveq	r3, r4
 8019ec8:	2c10      	cmp	r4, #16
 8019eca:	9305      	str	r3, [sp, #20]
 8019ecc:	46a0      	mov	r8, r4
 8019ece:	bfa8      	it	ge
 8019ed0:	f04f 0810 	movge.w	r8, #16
 8019ed4:	f7e6 fb2e 	bl	8000534 <__aeabi_ui2d>
 8019ed8:	2c09      	cmp	r4, #9
 8019eda:	4682      	mov	sl, r0
 8019edc:	468b      	mov	fp, r1
 8019ede:	dc13      	bgt.n	8019f08 <_strtod_l+0x3d0>
 8019ee0:	9b06      	ldr	r3, [sp, #24]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	f43f ae67 	beq.w	8019bb6 <_strtod_l+0x7e>
 8019ee8:	9b06      	ldr	r3, [sp, #24]
 8019eea:	dd7a      	ble.n	8019fe2 <_strtod_l+0x4aa>
 8019eec:	2b16      	cmp	r3, #22
 8019eee:	dc61      	bgt.n	8019fb4 <_strtod_l+0x47c>
 8019ef0:	4a75      	ldr	r2, [pc, #468]	; (801a0c8 <_strtod_l+0x590>)
 8019ef2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8019ef6:	e9de 0100 	ldrd	r0, r1, [lr]
 8019efa:	4652      	mov	r2, sl
 8019efc:	465b      	mov	r3, fp
 8019efe:	f7e6 fb93 	bl	8000628 <__aeabi_dmul>
 8019f02:	4682      	mov	sl, r0
 8019f04:	468b      	mov	fp, r1
 8019f06:	e656      	b.n	8019bb6 <_strtod_l+0x7e>
 8019f08:	4b6f      	ldr	r3, [pc, #444]	; (801a0c8 <_strtod_l+0x590>)
 8019f0a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8019f0e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8019f12:	f7e6 fb89 	bl	8000628 <__aeabi_dmul>
 8019f16:	4606      	mov	r6, r0
 8019f18:	4628      	mov	r0, r5
 8019f1a:	460f      	mov	r7, r1
 8019f1c:	f7e6 fb0a 	bl	8000534 <__aeabi_ui2d>
 8019f20:	4602      	mov	r2, r0
 8019f22:	460b      	mov	r3, r1
 8019f24:	4630      	mov	r0, r6
 8019f26:	4639      	mov	r1, r7
 8019f28:	f7e6 f9c8 	bl	80002bc <__adddf3>
 8019f2c:	2c0f      	cmp	r4, #15
 8019f2e:	4682      	mov	sl, r0
 8019f30:	468b      	mov	fp, r1
 8019f32:	ddd5      	ble.n	8019ee0 <_strtod_l+0x3a8>
 8019f34:	9b06      	ldr	r3, [sp, #24]
 8019f36:	eba4 0808 	sub.w	r8, r4, r8
 8019f3a:	4498      	add	r8, r3
 8019f3c:	f1b8 0f00 	cmp.w	r8, #0
 8019f40:	f340 8096 	ble.w	801a070 <_strtod_l+0x538>
 8019f44:	f018 030f 	ands.w	r3, r8, #15
 8019f48:	d00a      	beq.n	8019f60 <_strtod_l+0x428>
 8019f4a:	495f      	ldr	r1, [pc, #380]	; (801a0c8 <_strtod_l+0x590>)
 8019f4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019f50:	4652      	mov	r2, sl
 8019f52:	465b      	mov	r3, fp
 8019f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f58:	f7e6 fb66 	bl	8000628 <__aeabi_dmul>
 8019f5c:	4682      	mov	sl, r0
 8019f5e:	468b      	mov	fp, r1
 8019f60:	f038 080f 	bics.w	r8, r8, #15
 8019f64:	d073      	beq.n	801a04e <_strtod_l+0x516>
 8019f66:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8019f6a:	dd47      	ble.n	8019ffc <_strtod_l+0x4c4>
 8019f6c:	2400      	movs	r4, #0
 8019f6e:	46a0      	mov	r8, r4
 8019f70:	9407      	str	r4, [sp, #28]
 8019f72:	9405      	str	r4, [sp, #20]
 8019f74:	2322      	movs	r3, #34	; 0x22
 8019f76:	f8df b158 	ldr.w	fp, [pc, #344]	; 801a0d0 <_strtod_l+0x598>
 8019f7a:	f8c9 3000 	str.w	r3, [r9]
 8019f7e:	f04f 0a00 	mov.w	sl, #0
 8019f82:	9b07      	ldr	r3, [sp, #28]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	f43f ae16 	beq.w	8019bb6 <_strtod_l+0x7e>
 8019f8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8019f8c:	4648      	mov	r0, r9
 8019f8e:	f001 fad7 	bl	801b540 <_Bfree>
 8019f92:	9905      	ldr	r1, [sp, #20]
 8019f94:	4648      	mov	r0, r9
 8019f96:	f001 fad3 	bl	801b540 <_Bfree>
 8019f9a:	4641      	mov	r1, r8
 8019f9c:	4648      	mov	r0, r9
 8019f9e:	f001 facf 	bl	801b540 <_Bfree>
 8019fa2:	9907      	ldr	r1, [sp, #28]
 8019fa4:	4648      	mov	r0, r9
 8019fa6:	f001 facb 	bl	801b540 <_Bfree>
 8019faa:	4621      	mov	r1, r4
 8019fac:	4648      	mov	r0, r9
 8019fae:	f001 fac7 	bl	801b540 <_Bfree>
 8019fb2:	e600      	b.n	8019bb6 <_strtod_l+0x7e>
 8019fb4:	9a06      	ldr	r2, [sp, #24]
 8019fb6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8019fba:	4293      	cmp	r3, r2
 8019fbc:	dbba      	blt.n	8019f34 <_strtod_l+0x3fc>
 8019fbe:	4d42      	ldr	r5, [pc, #264]	; (801a0c8 <_strtod_l+0x590>)
 8019fc0:	f1c4 040f 	rsb	r4, r4, #15
 8019fc4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8019fc8:	4652      	mov	r2, sl
 8019fca:	465b      	mov	r3, fp
 8019fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fd0:	f7e6 fb2a 	bl	8000628 <__aeabi_dmul>
 8019fd4:	9b06      	ldr	r3, [sp, #24]
 8019fd6:	1b1c      	subs	r4, r3, r4
 8019fd8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8019fdc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019fe0:	e78d      	b.n	8019efe <_strtod_l+0x3c6>
 8019fe2:	f113 0f16 	cmn.w	r3, #22
 8019fe6:	dba5      	blt.n	8019f34 <_strtod_l+0x3fc>
 8019fe8:	4a37      	ldr	r2, [pc, #220]	; (801a0c8 <_strtod_l+0x590>)
 8019fea:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8019fee:	e9d2 2300 	ldrd	r2, r3, [r2]
 8019ff2:	4650      	mov	r0, sl
 8019ff4:	4659      	mov	r1, fp
 8019ff6:	f7e6 fc41 	bl	800087c <__aeabi_ddiv>
 8019ffa:	e782      	b.n	8019f02 <_strtod_l+0x3ca>
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	4e33      	ldr	r6, [pc, #204]	; (801a0cc <_strtod_l+0x594>)
 801a000:	ea4f 1828 	mov.w	r8, r8, asr #4
 801a004:	4650      	mov	r0, sl
 801a006:	4659      	mov	r1, fp
 801a008:	461d      	mov	r5, r3
 801a00a:	f1b8 0f01 	cmp.w	r8, #1
 801a00e:	dc21      	bgt.n	801a054 <_strtod_l+0x51c>
 801a010:	b10b      	cbz	r3, 801a016 <_strtod_l+0x4de>
 801a012:	4682      	mov	sl, r0
 801a014:	468b      	mov	fp, r1
 801a016:	4b2d      	ldr	r3, [pc, #180]	; (801a0cc <_strtod_l+0x594>)
 801a018:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801a01c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801a020:	4652      	mov	r2, sl
 801a022:	465b      	mov	r3, fp
 801a024:	e9d5 0100 	ldrd	r0, r1, [r5]
 801a028:	f7e6 fafe 	bl	8000628 <__aeabi_dmul>
 801a02c:	4b28      	ldr	r3, [pc, #160]	; (801a0d0 <_strtod_l+0x598>)
 801a02e:	460a      	mov	r2, r1
 801a030:	400b      	ands	r3, r1
 801a032:	4928      	ldr	r1, [pc, #160]	; (801a0d4 <_strtod_l+0x59c>)
 801a034:	428b      	cmp	r3, r1
 801a036:	4682      	mov	sl, r0
 801a038:	d898      	bhi.n	8019f6c <_strtod_l+0x434>
 801a03a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a03e:	428b      	cmp	r3, r1
 801a040:	bf86      	itte	hi
 801a042:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801a0dc <_strtod_l+0x5a4>
 801a046:	f04f 3aff 	movhi.w	sl, #4294967295
 801a04a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801a04e:	2300      	movs	r3, #0
 801a050:	9304      	str	r3, [sp, #16]
 801a052:	e077      	b.n	801a144 <_strtod_l+0x60c>
 801a054:	f018 0f01 	tst.w	r8, #1
 801a058:	d006      	beq.n	801a068 <_strtod_l+0x530>
 801a05a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801a05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a062:	f7e6 fae1 	bl	8000628 <__aeabi_dmul>
 801a066:	2301      	movs	r3, #1
 801a068:	3501      	adds	r5, #1
 801a06a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a06e:	e7cc      	b.n	801a00a <_strtod_l+0x4d2>
 801a070:	d0ed      	beq.n	801a04e <_strtod_l+0x516>
 801a072:	f1c8 0800 	rsb	r8, r8, #0
 801a076:	f018 020f 	ands.w	r2, r8, #15
 801a07a:	d00a      	beq.n	801a092 <_strtod_l+0x55a>
 801a07c:	4b12      	ldr	r3, [pc, #72]	; (801a0c8 <_strtod_l+0x590>)
 801a07e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a082:	4650      	mov	r0, sl
 801a084:	4659      	mov	r1, fp
 801a086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a08a:	f7e6 fbf7 	bl	800087c <__aeabi_ddiv>
 801a08e:	4682      	mov	sl, r0
 801a090:	468b      	mov	fp, r1
 801a092:	ea5f 1828 	movs.w	r8, r8, asr #4
 801a096:	d0da      	beq.n	801a04e <_strtod_l+0x516>
 801a098:	f1b8 0f1f 	cmp.w	r8, #31
 801a09c:	dd20      	ble.n	801a0e0 <_strtod_l+0x5a8>
 801a09e:	2400      	movs	r4, #0
 801a0a0:	46a0      	mov	r8, r4
 801a0a2:	9407      	str	r4, [sp, #28]
 801a0a4:	9405      	str	r4, [sp, #20]
 801a0a6:	2322      	movs	r3, #34	; 0x22
 801a0a8:	f04f 0a00 	mov.w	sl, #0
 801a0ac:	f04f 0b00 	mov.w	fp, #0
 801a0b0:	f8c9 3000 	str.w	r3, [r9]
 801a0b4:	e765      	b.n	8019f82 <_strtod_l+0x44a>
 801a0b6:	bf00      	nop
 801a0b8:	0803e89b 	.word	0x0803e89b
 801a0bc:	0803e89e 	.word	0x0803e89e
 801a0c0:	0803e8a4 	.word	0x0803e8a4
 801a0c4:	0803e8bc 	.word	0x0803e8bc
 801a0c8:	0803e990 	.word	0x0803e990
 801a0cc:	0803e968 	.word	0x0803e968
 801a0d0:	7ff00000 	.word	0x7ff00000
 801a0d4:	7ca00000 	.word	0x7ca00000
 801a0d8:	fff80000 	.word	0xfff80000
 801a0dc:	7fefffff 	.word	0x7fefffff
 801a0e0:	f018 0310 	ands.w	r3, r8, #16
 801a0e4:	bf18      	it	ne
 801a0e6:	236a      	movne	r3, #106	; 0x6a
 801a0e8:	4da0      	ldr	r5, [pc, #640]	; (801a36c <_strtod_l+0x834>)
 801a0ea:	9304      	str	r3, [sp, #16]
 801a0ec:	4650      	mov	r0, sl
 801a0ee:	4659      	mov	r1, fp
 801a0f0:	2300      	movs	r3, #0
 801a0f2:	f1b8 0f00 	cmp.w	r8, #0
 801a0f6:	f300 810a 	bgt.w	801a30e <_strtod_l+0x7d6>
 801a0fa:	b10b      	cbz	r3, 801a100 <_strtod_l+0x5c8>
 801a0fc:	4682      	mov	sl, r0
 801a0fe:	468b      	mov	fp, r1
 801a100:	9b04      	ldr	r3, [sp, #16]
 801a102:	b1bb      	cbz	r3, 801a134 <_strtod_l+0x5fc>
 801a104:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801a108:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	4659      	mov	r1, fp
 801a110:	dd10      	ble.n	801a134 <_strtod_l+0x5fc>
 801a112:	2b1f      	cmp	r3, #31
 801a114:	f340 8107 	ble.w	801a326 <_strtod_l+0x7ee>
 801a118:	2b34      	cmp	r3, #52	; 0x34
 801a11a:	bfde      	ittt	le
 801a11c:	3b20      	suble	r3, #32
 801a11e:	f04f 32ff 	movle.w	r2, #4294967295
 801a122:	fa02 f303 	lslle.w	r3, r2, r3
 801a126:	f04f 0a00 	mov.w	sl, #0
 801a12a:	bfcc      	ite	gt
 801a12c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801a130:	ea03 0b01 	andle.w	fp, r3, r1
 801a134:	2200      	movs	r2, #0
 801a136:	2300      	movs	r3, #0
 801a138:	4650      	mov	r0, sl
 801a13a:	4659      	mov	r1, fp
 801a13c:	f7e6 fcdc 	bl	8000af8 <__aeabi_dcmpeq>
 801a140:	2800      	cmp	r0, #0
 801a142:	d1ac      	bne.n	801a09e <_strtod_l+0x566>
 801a144:	9b07      	ldr	r3, [sp, #28]
 801a146:	9300      	str	r3, [sp, #0]
 801a148:	9a05      	ldr	r2, [sp, #20]
 801a14a:	9908      	ldr	r1, [sp, #32]
 801a14c:	4623      	mov	r3, r4
 801a14e:	4648      	mov	r0, r9
 801a150:	f001 fa48 	bl	801b5e4 <__s2b>
 801a154:	9007      	str	r0, [sp, #28]
 801a156:	2800      	cmp	r0, #0
 801a158:	f43f af08 	beq.w	8019f6c <_strtod_l+0x434>
 801a15c:	9a06      	ldr	r2, [sp, #24]
 801a15e:	9b06      	ldr	r3, [sp, #24]
 801a160:	2a00      	cmp	r2, #0
 801a162:	f1c3 0300 	rsb	r3, r3, #0
 801a166:	bfa8      	it	ge
 801a168:	2300      	movge	r3, #0
 801a16a:	930e      	str	r3, [sp, #56]	; 0x38
 801a16c:	2400      	movs	r4, #0
 801a16e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a172:	9316      	str	r3, [sp, #88]	; 0x58
 801a174:	46a0      	mov	r8, r4
 801a176:	9b07      	ldr	r3, [sp, #28]
 801a178:	4648      	mov	r0, r9
 801a17a:	6859      	ldr	r1, [r3, #4]
 801a17c:	f001 f9ac 	bl	801b4d8 <_Balloc>
 801a180:	9005      	str	r0, [sp, #20]
 801a182:	2800      	cmp	r0, #0
 801a184:	f43f aef6 	beq.w	8019f74 <_strtod_l+0x43c>
 801a188:	9b07      	ldr	r3, [sp, #28]
 801a18a:	691a      	ldr	r2, [r3, #16]
 801a18c:	3202      	adds	r2, #2
 801a18e:	f103 010c 	add.w	r1, r3, #12
 801a192:	0092      	lsls	r2, r2, #2
 801a194:	300c      	adds	r0, #12
 801a196:	f7ff f8a1 	bl	80192dc <memcpy>
 801a19a:	aa1e      	add	r2, sp, #120	; 0x78
 801a19c:	a91d      	add	r1, sp, #116	; 0x74
 801a19e:	ec4b ab10 	vmov	d0, sl, fp
 801a1a2:	4648      	mov	r0, r9
 801a1a4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801a1a8:	f001 fcd8 	bl	801bb5c <__d2b>
 801a1ac:	901c      	str	r0, [sp, #112]	; 0x70
 801a1ae:	2800      	cmp	r0, #0
 801a1b0:	f43f aee0 	beq.w	8019f74 <_strtod_l+0x43c>
 801a1b4:	2101      	movs	r1, #1
 801a1b6:	4648      	mov	r0, r9
 801a1b8:	f001 faa0 	bl	801b6fc <__i2b>
 801a1bc:	4680      	mov	r8, r0
 801a1be:	2800      	cmp	r0, #0
 801a1c0:	f43f aed8 	beq.w	8019f74 <_strtod_l+0x43c>
 801a1c4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801a1c6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801a1c8:	2e00      	cmp	r6, #0
 801a1ca:	bfab      	itete	ge
 801a1cc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801a1ce:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801a1d0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801a1d2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801a1d4:	bfac      	ite	ge
 801a1d6:	18f7      	addge	r7, r6, r3
 801a1d8:	1b9d      	sublt	r5, r3, r6
 801a1da:	9b04      	ldr	r3, [sp, #16]
 801a1dc:	1af6      	subs	r6, r6, r3
 801a1de:	4416      	add	r6, r2
 801a1e0:	4b63      	ldr	r3, [pc, #396]	; (801a370 <_strtod_l+0x838>)
 801a1e2:	3e01      	subs	r6, #1
 801a1e4:	429e      	cmp	r6, r3
 801a1e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a1ea:	f280 80af 	bge.w	801a34c <_strtod_l+0x814>
 801a1ee:	1b9b      	subs	r3, r3, r6
 801a1f0:	2b1f      	cmp	r3, #31
 801a1f2:	eba2 0203 	sub.w	r2, r2, r3
 801a1f6:	f04f 0101 	mov.w	r1, #1
 801a1fa:	f300 809b 	bgt.w	801a334 <_strtod_l+0x7fc>
 801a1fe:	fa01 f303 	lsl.w	r3, r1, r3
 801a202:	930f      	str	r3, [sp, #60]	; 0x3c
 801a204:	2300      	movs	r3, #0
 801a206:	930a      	str	r3, [sp, #40]	; 0x28
 801a208:	18be      	adds	r6, r7, r2
 801a20a:	9b04      	ldr	r3, [sp, #16]
 801a20c:	42b7      	cmp	r7, r6
 801a20e:	4415      	add	r5, r2
 801a210:	441d      	add	r5, r3
 801a212:	463b      	mov	r3, r7
 801a214:	bfa8      	it	ge
 801a216:	4633      	movge	r3, r6
 801a218:	42ab      	cmp	r3, r5
 801a21a:	bfa8      	it	ge
 801a21c:	462b      	movge	r3, r5
 801a21e:	2b00      	cmp	r3, #0
 801a220:	bfc2      	ittt	gt
 801a222:	1af6      	subgt	r6, r6, r3
 801a224:	1aed      	subgt	r5, r5, r3
 801a226:	1aff      	subgt	r7, r7, r3
 801a228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a22a:	b1bb      	cbz	r3, 801a25c <_strtod_l+0x724>
 801a22c:	4641      	mov	r1, r8
 801a22e:	461a      	mov	r2, r3
 801a230:	4648      	mov	r0, r9
 801a232:	f001 fb03 	bl	801b83c <__pow5mult>
 801a236:	4680      	mov	r8, r0
 801a238:	2800      	cmp	r0, #0
 801a23a:	f43f ae9b 	beq.w	8019f74 <_strtod_l+0x43c>
 801a23e:	4601      	mov	r1, r0
 801a240:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a242:	4648      	mov	r0, r9
 801a244:	f001 fa63 	bl	801b70e <__multiply>
 801a248:	900c      	str	r0, [sp, #48]	; 0x30
 801a24a:	2800      	cmp	r0, #0
 801a24c:	f43f ae92 	beq.w	8019f74 <_strtod_l+0x43c>
 801a250:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a252:	4648      	mov	r0, r9
 801a254:	f001 f974 	bl	801b540 <_Bfree>
 801a258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a25a:	931c      	str	r3, [sp, #112]	; 0x70
 801a25c:	2e00      	cmp	r6, #0
 801a25e:	dc7a      	bgt.n	801a356 <_strtod_l+0x81e>
 801a260:	9b06      	ldr	r3, [sp, #24]
 801a262:	2b00      	cmp	r3, #0
 801a264:	dd08      	ble.n	801a278 <_strtod_l+0x740>
 801a266:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a268:	9905      	ldr	r1, [sp, #20]
 801a26a:	4648      	mov	r0, r9
 801a26c:	f001 fae6 	bl	801b83c <__pow5mult>
 801a270:	9005      	str	r0, [sp, #20]
 801a272:	2800      	cmp	r0, #0
 801a274:	f43f ae7e 	beq.w	8019f74 <_strtod_l+0x43c>
 801a278:	2d00      	cmp	r5, #0
 801a27a:	dd08      	ble.n	801a28e <_strtod_l+0x756>
 801a27c:	462a      	mov	r2, r5
 801a27e:	9905      	ldr	r1, [sp, #20]
 801a280:	4648      	mov	r0, r9
 801a282:	f001 fb29 	bl	801b8d8 <__lshift>
 801a286:	9005      	str	r0, [sp, #20]
 801a288:	2800      	cmp	r0, #0
 801a28a:	f43f ae73 	beq.w	8019f74 <_strtod_l+0x43c>
 801a28e:	2f00      	cmp	r7, #0
 801a290:	dd08      	ble.n	801a2a4 <_strtod_l+0x76c>
 801a292:	4641      	mov	r1, r8
 801a294:	463a      	mov	r2, r7
 801a296:	4648      	mov	r0, r9
 801a298:	f001 fb1e 	bl	801b8d8 <__lshift>
 801a29c:	4680      	mov	r8, r0
 801a29e:	2800      	cmp	r0, #0
 801a2a0:	f43f ae68 	beq.w	8019f74 <_strtod_l+0x43c>
 801a2a4:	9a05      	ldr	r2, [sp, #20]
 801a2a6:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a2a8:	4648      	mov	r0, r9
 801a2aa:	f001 fb83 	bl	801b9b4 <__mdiff>
 801a2ae:	4604      	mov	r4, r0
 801a2b0:	2800      	cmp	r0, #0
 801a2b2:	f43f ae5f 	beq.w	8019f74 <_strtod_l+0x43c>
 801a2b6:	68c3      	ldr	r3, [r0, #12]
 801a2b8:	930c      	str	r3, [sp, #48]	; 0x30
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	60c3      	str	r3, [r0, #12]
 801a2be:	4641      	mov	r1, r8
 801a2c0:	f001 fb5e 	bl	801b980 <__mcmp>
 801a2c4:	2800      	cmp	r0, #0
 801a2c6:	da55      	bge.n	801a374 <_strtod_l+0x83c>
 801a2c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a2ca:	b9e3      	cbnz	r3, 801a306 <_strtod_l+0x7ce>
 801a2cc:	f1ba 0f00 	cmp.w	sl, #0
 801a2d0:	d119      	bne.n	801a306 <_strtod_l+0x7ce>
 801a2d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a2d6:	b9b3      	cbnz	r3, 801a306 <_strtod_l+0x7ce>
 801a2d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a2dc:	0d1b      	lsrs	r3, r3, #20
 801a2de:	051b      	lsls	r3, r3, #20
 801a2e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a2e4:	d90f      	bls.n	801a306 <_strtod_l+0x7ce>
 801a2e6:	6963      	ldr	r3, [r4, #20]
 801a2e8:	b913      	cbnz	r3, 801a2f0 <_strtod_l+0x7b8>
 801a2ea:	6923      	ldr	r3, [r4, #16]
 801a2ec:	2b01      	cmp	r3, #1
 801a2ee:	dd0a      	ble.n	801a306 <_strtod_l+0x7ce>
 801a2f0:	4621      	mov	r1, r4
 801a2f2:	2201      	movs	r2, #1
 801a2f4:	4648      	mov	r0, r9
 801a2f6:	f001 faef 	bl	801b8d8 <__lshift>
 801a2fa:	4641      	mov	r1, r8
 801a2fc:	4604      	mov	r4, r0
 801a2fe:	f001 fb3f 	bl	801b980 <__mcmp>
 801a302:	2800      	cmp	r0, #0
 801a304:	dc67      	bgt.n	801a3d6 <_strtod_l+0x89e>
 801a306:	9b04      	ldr	r3, [sp, #16]
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d171      	bne.n	801a3f0 <_strtod_l+0x8b8>
 801a30c:	e63d      	b.n	8019f8a <_strtod_l+0x452>
 801a30e:	f018 0f01 	tst.w	r8, #1
 801a312:	d004      	beq.n	801a31e <_strtod_l+0x7e6>
 801a314:	e9d5 2300 	ldrd	r2, r3, [r5]
 801a318:	f7e6 f986 	bl	8000628 <__aeabi_dmul>
 801a31c:	2301      	movs	r3, #1
 801a31e:	ea4f 0868 	mov.w	r8, r8, asr #1
 801a322:	3508      	adds	r5, #8
 801a324:	e6e5      	b.n	801a0f2 <_strtod_l+0x5ba>
 801a326:	f04f 32ff 	mov.w	r2, #4294967295
 801a32a:	fa02 f303 	lsl.w	r3, r2, r3
 801a32e:	ea03 0a0a 	and.w	sl, r3, sl
 801a332:	e6ff      	b.n	801a134 <_strtod_l+0x5fc>
 801a334:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801a338:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801a33c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801a340:	36e2      	adds	r6, #226	; 0xe2
 801a342:	fa01 f306 	lsl.w	r3, r1, r6
 801a346:	930a      	str	r3, [sp, #40]	; 0x28
 801a348:	910f      	str	r1, [sp, #60]	; 0x3c
 801a34a:	e75d      	b.n	801a208 <_strtod_l+0x6d0>
 801a34c:	2300      	movs	r3, #0
 801a34e:	930a      	str	r3, [sp, #40]	; 0x28
 801a350:	2301      	movs	r3, #1
 801a352:	930f      	str	r3, [sp, #60]	; 0x3c
 801a354:	e758      	b.n	801a208 <_strtod_l+0x6d0>
 801a356:	4632      	mov	r2, r6
 801a358:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a35a:	4648      	mov	r0, r9
 801a35c:	f001 fabc 	bl	801b8d8 <__lshift>
 801a360:	901c      	str	r0, [sp, #112]	; 0x70
 801a362:	2800      	cmp	r0, #0
 801a364:	f47f af7c 	bne.w	801a260 <_strtod_l+0x728>
 801a368:	e604      	b.n	8019f74 <_strtod_l+0x43c>
 801a36a:	bf00      	nop
 801a36c:	0803e8d0 	.word	0x0803e8d0
 801a370:	fffffc02 	.word	0xfffffc02
 801a374:	465d      	mov	r5, fp
 801a376:	f040 8086 	bne.w	801a486 <_strtod_l+0x94e>
 801a37a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a37c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a380:	b32a      	cbz	r2, 801a3ce <_strtod_l+0x896>
 801a382:	4aaf      	ldr	r2, [pc, #700]	; (801a640 <_strtod_l+0xb08>)
 801a384:	4293      	cmp	r3, r2
 801a386:	d153      	bne.n	801a430 <_strtod_l+0x8f8>
 801a388:	9b04      	ldr	r3, [sp, #16]
 801a38a:	4650      	mov	r0, sl
 801a38c:	b1d3      	cbz	r3, 801a3c4 <_strtod_l+0x88c>
 801a38e:	4aad      	ldr	r2, [pc, #692]	; (801a644 <_strtod_l+0xb0c>)
 801a390:	402a      	ands	r2, r5
 801a392:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801a396:	f04f 31ff 	mov.w	r1, #4294967295
 801a39a:	d816      	bhi.n	801a3ca <_strtod_l+0x892>
 801a39c:	0d12      	lsrs	r2, r2, #20
 801a39e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a3a2:	fa01 f303 	lsl.w	r3, r1, r3
 801a3a6:	4298      	cmp	r0, r3
 801a3a8:	d142      	bne.n	801a430 <_strtod_l+0x8f8>
 801a3aa:	4ba7      	ldr	r3, [pc, #668]	; (801a648 <_strtod_l+0xb10>)
 801a3ac:	429d      	cmp	r5, r3
 801a3ae:	d102      	bne.n	801a3b6 <_strtod_l+0x87e>
 801a3b0:	3001      	adds	r0, #1
 801a3b2:	f43f addf 	beq.w	8019f74 <_strtod_l+0x43c>
 801a3b6:	4ba3      	ldr	r3, [pc, #652]	; (801a644 <_strtod_l+0xb0c>)
 801a3b8:	402b      	ands	r3, r5
 801a3ba:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801a3be:	f04f 0a00 	mov.w	sl, #0
 801a3c2:	e7a0      	b.n	801a306 <_strtod_l+0x7ce>
 801a3c4:	f04f 33ff 	mov.w	r3, #4294967295
 801a3c8:	e7ed      	b.n	801a3a6 <_strtod_l+0x86e>
 801a3ca:	460b      	mov	r3, r1
 801a3cc:	e7eb      	b.n	801a3a6 <_strtod_l+0x86e>
 801a3ce:	bb7b      	cbnz	r3, 801a430 <_strtod_l+0x8f8>
 801a3d0:	f1ba 0f00 	cmp.w	sl, #0
 801a3d4:	d12c      	bne.n	801a430 <_strtod_l+0x8f8>
 801a3d6:	9904      	ldr	r1, [sp, #16]
 801a3d8:	4a9a      	ldr	r2, [pc, #616]	; (801a644 <_strtod_l+0xb0c>)
 801a3da:	465b      	mov	r3, fp
 801a3dc:	b1f1      	cbz	r1, 801a41c <_strtod_l+0x8e4>
 801a3de:	ea02 010b 	and.w	r1, r2, fp
 801a3e2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a3e6:	dc19      	bgt.n	801a41c <_strtod_l+0x8e4>
 801a3e8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a3ec:	f77f ae5b 	ble.w	801a0a6 <_strtod_l+0x56e>
 801a3f0:	4a96      	ldr	r2, [pc, #600]	; (801a64c <_strtod_l+0xb14>)
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801a3f8:	4650      	mov	r0, sl
 801a3fa:	4659      	mov	r1, fp
 801a3fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801a400:	f7e6 f912 	bl	8000628 <__aeabi_dmul>
 801a404:	4682      	mov	sl, r0
 801a406:	468b      	mov	fp, r1
 801a408:	2900      	cmp	r1, #0
 801a40a:	f47f adbe 	bne.w	8019f8a <_strtod_l+0x452>
 801a40e:	2800      	cmp	r0, #0
 801a410:	f47f adbb 	bne.w	8019f8a <_strtod_l+0x452>
 801a414:	2322      	movs	r3, #34	; 0x22
 801a416:	f8c9 3000 	str.w	r3, [r9]
 801a41a:	e5b6      	b.n	8019f8a <_strtod_l+0x452>
 801a41c:	4013      	ands	r3, r2
 801a41e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a422:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801a426:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801a42a:	f04f 3aff 	mov.w	sl, #4294967295
 801a42e:	e76a      	b.n	801a306 <_strtod_l+0x7ce>
 801a430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a432:	b193      	cbz	r3, 801a45a <_strtod_l+0x922>
 801a434:	422b      	tst	r3, r5
 801a436:	f43f af66 	beq.w	801a306 <_strtod_l+0x7ce>
 801a43a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a43c:	9a04      	ldr	r2, [sp, #16]
 801a43e:	4650      	mov	r0, sl
 801a440:	4659      	mov	r1, fp
 801a442:	b173      	cbz	r3, 801a462 <_strtod_l+0x92a>
 801a444:	f7ff fb5a 	bl	8019afc <sulp>
 801a448:	4602      	mov	r2, r0
 801a44a:	460b      	mov	r3, r1
 801a44c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a450:	f7e5 ff34 	bl	80002bc <__adddf3>
 801a454:	4682      	mov	sl, r0
 801a456:	468b      	mov	fp, r1
 801a458:	e755      	b.n	801a306 <_strtod_l+0x7ce>
 801a45a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a45c:	ea13 0f0a 	tst.w	r3, sl
 801a460:	e7e9      	b.n	801a436 <_strtod_l+0x8fe>
 801a462:	f7ff fb4b 	bl	8019afc <sulp>
 801a466:	4602      	mov	r2, r0
 801a468:	460b      	mov	r3, r1
 801a46a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801a46e:	f7e5 ff23 	bl	80002b8 <__aeabi_dsub>
 801a472:	2200      	movs	r2, #0
 801a474:	2300      	movs	r3, #0
 801a476:	4682      	mov	sl, r0
 801a478:	468b      	mov	fp, r1
 801a47a:	f7e6 fb3d 	bl	8000af8 <__aeabi_dcmpeq>
 801a47e:	2800      	cmp	r0, #0
 801a480:	f47f ae11 	bne.w	801a0a6 <_strtod_l+0x56e>
 801a484:	e73f      	b.n	801a306 <_strtod_l+0x7ce>
 801a486:	4641      	mov	r1, r8
 801a488:	4620      	mov	r0, r4
 801a48a:	f001 fbb6 	bl	801bbfa <__ratio>
 801a48e:	ec57 6b10 	vmov	r6, r7, d0
 801a492:	2200      	movs	r2, #0
 801a494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a498:	ee10 0a10 	vmov	r0, s0
 801a49c:	4639      	mov	r1, r7
 801a49e:	f7e6 fb3f 	bl	8000b20 <__aeabi_dcmple>
 801a4a2:	2800      	cmp	r0, #0
 801a4a4:	d077      	beq.n	801a596 <_strtod_l+0xa5e>
 801a4a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d04a      	beq.n	801a542 <_strtod_l+0xa0a>
 801a4ac:	4b68      	ldr	r3, [pc, #416]	; (801a650 <_strtod_l+0xb18>)
 801a4ae:	2200      	movs	r2, #0
 801a4b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801a4b4:	4f66      	ldr	r7, [pc, #408]	; (801a650 <_strtod_l+0xb18>)
 801a4b6:	2600      	movs	r6, #0
 801a4b8:	4b62      	ldr	r3, [pc, #392]	; (801a644 <_strtod_l+0xb0c>)
 801a4ba:	402b      	ands	r3, r5
 801a4bc:	930f      	str	r3, [sp, #60]	; 0x3c
 801a4be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a4c0:	4b64      	ldr	r3, [pc, #400]	; (801a654 <_strtod_l+0xb1c>)
 801a4c2:	429a      	cmp	r2, r3
 801a4c4:	f040 80ce 	bne.w	801a664 <_strtod_l+0xb2c>
 801a4c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a4cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a4d0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801a4d4:	ec4b ab10 	vmov	d0, sl, fp
 801a4d8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801a4dc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801a4e0:	f001 fac6 	bl	801ba70 <__ulp>
 801a4e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801a4e8:	ec53 2b10 	vmov	r2, r3, d0
 801a4ec:	f7e6 f89c 	bl	8000628 <__aeabi_dmul>
 801a4f0:	4652      	mov	r2, sl
 801a4f2:	465b      	mov	r3, fp
 801a4f4:	f7e5 fee2 	bl	80002bc <__adddf3>
 801a4f8:	460b      	mov	r3, r1
 801a4fa:	4952      	ldr	r1, [pc, #328]	; (801a644 <_strtod_l+0xb0c>)
 801a4fc:	4a56      	ldr	r2, [pc, #344]	; (801a658 <_strtod_l+0xb20>)
 801a4fe:	4019      	ands	r1, r3
 801a500:	4291      	cmp	r1, r2
 801a502:	4682      	mov	sl, r0
 801a504:	d95b      	bls.n	801a5be <_strtod_l+0xa86>
 801a506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a508:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801a50c:	4293      	cmp	r3, r2
 801a50e:	d103      	bne.n	801a518 <_strtod_l+0x9e0>
 801a510:	9b08      	ldr	r3, [sp, #32]
 801a512:	3301      	adds	r3, #1
 801a514:	f43f ad2e 	beq.w	8019f74 <_strtod_l+0x43c>
 801a518:	f8df b12c 	ldr.w	fp, [pc, #300]	; 801a648 <_strtod_l+0xb10>
 801a51c:	f04f 3aff 	mov.w	sl, #4294967295
 801a520:	991c      	ldr	r1, [sp, #112]	; 0x70
 801a522:	4648      	mov	r0, r9
 801a524:	f001 f80c 	bl	801b540 <_Bfree>
 801a528:	9905      	ldr	r1, [sp, #20]
 801a52a:	4648      	mov	r0, r9
 801a52c:	f001 f808 	bl	801b540 <_Bfree>
 801a530:	4641      	mov	r1, r8
 801a532:	4648      	mov	r0, r9
 801a534:	f001 f804 	bl	801b540 <_Bfree>
 801a538:	4621      	mov	r1, r4
 801a53a:	4648      	mov	r0, r9
 801a53c:	f001 f800 	bl	801b540 <_Bfree>
 801a540:	e619      	b.n	801a176 <_strtod_l+0x63e>
 801a542:	f1ba 0f00 	cmp.w	sl, #0
 801a546:	d11a      	bne.n	801a57e <_strtod_l+0xa46>
 801a548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801a54c:	b9eb      	cbnz	r3, 801a58a <_strtod_l+0xa52>
 801a54e:	2200      	movs	r2, #0
 801a550:	4b3f      	ldr	r3, [pc, #252]	; (801a650 <_strtod_l+0xb18>)
 801a552:	4630      	mov	r0, r6
 801a554:	4639      	mov	r1, r7
 801a556:	f7e6 fad9 	bl	8000b0c <__aeabi_dcmplt>
 801a55a:	b9c8      	cbnz	r0, 801a590 <_strtod_l+0xa58>
 801a55c:	4630      	mov	r0, r6
 801a55e:	4639      	mov	r1, r7
 801a560:	2200      	movs	r2, #0
 801a562:	4b3e      	ldr	r3, [pc, #248]	; (801a65c <_strtod_l+0xb24>)
 801a564:	f7e6 f860 	bl	8000628 <__aeabi_dmul>
 801a568:	4606      	mov	r6, r0
 801a56a:	460f      	mov	r7, r1
 801a56c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801a570:	9618      	str	r6, [sp, #96]	; 0x60
 801a572:	9319      	str	r3, [sp, #100]	; 0x64
 801a574:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 801a578:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801a57c:	e79c      	b.n	801a4b8 <_strtod_l+0x980>
 801a57e:	f1ba 0f01 	cmp.w	sl, #1
 801a582:	d102      	bne.n	801a58a <_strtod_l+0xa52>
 801a584:	2d00      	cmp	r5, #0
 801a586:	f43f ad8e 	beq.w	801a0a6 <_strtod_l+0x56e>
 801a58a:	2200      	movs	r2, #0
 801a58c:	4b34      	ldr	r3, [pc, #208]	; (801a660 <_strtod_l+0xb28>)
 801a58e:	e78f      	b.n	801a4b0 <_strtod_l+0x978>
 801a590:	2600      	movs	r6, #0
 801a592:	4f32      	ldr	r7, [pc, #200]	; (801a65c <_strtod_l+0xb24>)
 801a594:	e7ea      	b.n	801a56c <_strtod_l+0xa34>
 801a596:	4b31      	ldr	r3, [pc, #196]	; (801a65c <_strtod_l+0xb24>)
 801a598:	4630      	mov	r0, r6
 801a59a:	4639      	mov	r1, r7
 801a59c:	2200      	movs	r2, #0
 801a59e:	f7e6 f843 	bl	8000628 <__aeabi_dmul>
 801a5a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5a4:	4606      	mov	r6, r0
 801a5a6:	460f      	mov	r7, r1
 801a5a8:	b933      	cbnz	r3, 801a5b8 <_strtod_l+0xa80>
 801a5aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a5ae:	9010      	str	r0, [sp, #64]	; 0x40
 801a5b0:	9311      	str	r3, [sp, #68]	; 0x44
 801a5b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801a5b6:	e7df      	b.n	801a578 <_strtod_l+0xa40>
 801a5b8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801a5bc:	e7f9      	b.n	801a5b2 <_strtod_l+0xa7a>
 801a5be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801a5c2:	9b04      	ldr	r3, [sp, #16]
 801a5c4:	2b00      	cmp	r3, #0
 801a5c6:	d1ab      	bne.n	801a520 <_strtod_l+0x9e8>
 801a5c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801a5cc:	0d1b      	lsrs	r3, r3, #20
 801a5ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a5d0:	051b      	lsls	r3, r3, #20
 801a5d2:	429a      	cmp	r2, r3
 801a5d4:	465d      	mov	r5, fp
 801a5d6:	d1a3      	bne.n	801a520 <_strtod_l+0x9e8>
 801a5d8:	4639      	mov	r1, r7
 801a5da:	4630      	mov	r0, r6
 801a5dc:	f7e6 fad4 	bl	8000b88 <__aeabi_d2iz>
 801a5e0:	f7e5 ffb8 	bl	8000554 <__aeabi_i2d>
 801a5e4:	460b      	mov	r3, r1
 801a5e6:	4602      	mov	r2, r0
 801a5e8:	4639      	mov	r1, r7
 801a5ea:	4630      	mov	r0, r6
 801a5ec:	f7e5 fe64 	bl	80002b8 <__aeabi_dsub>
 801a5f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a5f2:	4606      	mov	r6, r0
 801a5f4:	460f      	mov	r7, r1
 801a5f6:	b933      	cbnz	r3, 801a606 <_strtod_l+0xace>
 801a5f8:	f1ba 0f00 	cmp.w	sl, #0
 801a5fc:	d103      	bne.n	801a606 <_strtod_l+0xace>
 801a5fe:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801a602:	2d00      	cmp	r5, #0
 801a604:	d06d      	beq.n	801a6e2 <_strtod_l+0xbaa>
 801a606:	a30a      	add	r3, pc, #40	; (adr r3, 801a630 <_strtod_l+0xaf8>)
 801a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a60c:	4630      	mov	r0, r6
 801a60e:	4639      	mov	r1, r7
 801a610:	f7e6 fa7c 	bl	8000b0c <__aeabi_dcmplt>
 801a614:	2800      	cmp	r0, #0
 801a616:	f47f acb8 	bne.w	8019f8a <_strtod_l+0x452>
 801a61a:	a307      	add	r3, pc, #28	; (adr r3, 801a638 <_strtod_l+0xb00>)
 801a61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a620:	4630      	mov	r0, r6
 801a622:	4639      	mov	r1, r7
 801a624:	f7e6 fa90 	bl	8000b48 <__aeabi_dcmpgt>
 801a628:	2800      	cmp	r0, #0
 801a62a:	f43f af79 	beq.w	801a520 <_strtod_l+0x9e8>
 801a62e:	e4ac      	b.n	8019f8a <_strtod_l+0x452>
 801a630:	94a03595 	.word	0x94a03595
 801a634:	3fdfffff 	.word	0x3fdfffff
 801a638:	35afe535 	.word	0x35afe535
 801a63c:	3fe00000 	.word	0x3fe00000
 801a640:	000fffff 	.word	0x000fffff
 801a644:	7ff00000 	.word	0x7ff00000
 801a648:	7fefffff 	.word	0x7fefffff
 801a64c:	39500000 	.word	0x39500000
 801a650:	3ff00000 	.word	0x3ff00000
 801a654:	7fe00000 	.word	0x7fe00000
 801a658:	7c9fffff 	.word	0x7c9fffff
 801a65c:	3fe00000 	.word	0x3fe00000
 801a660:	bff00000 	.word	0xbff00000
 801a664:	9b04      	ldr	r3, [sp, #16]
 801a666:	b333      	cbz	r3, 801a6b6 <_strtod_l+0xb7e>
 801a668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a66a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a66e:	d822      	bhi.n	801a6b6 <_strtod_l+0xb7e>
 801a670:	a327      	add	r3, pc, #156	; (adr r3, 801a710 <_strtod_l+0xbd8>)
 801a672:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a676:	4630      	mov	r0, r6
 801a678:	4639      	mov	r1, r7
 801a67a:	f7e6 fa51 	bl	8000b20 <__aeabi_dcmple>
 801a67e:	b1a0      	cbz	r0, 801a6aa <_strtod_l+0xb72>
 801a680:	4639      	mov	r1, r7
 801a682:	4630      	mov	r0, r6
 801a684:	f7e6 faa8 	bl	8000bd8 <__aeabi_d2uiz>
 801a688:	2800      	cmp	r0, #0
 801a68a:	bf08      	it	eq
 801a68c:	2001      	moveq	r0, #1
 801a68e:	f7e5 ff51 	bl	8000534 <__aeabi_ui2d>
 801a692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a694:	4606      	mov	r6, r0
 801a696:	460f      	mov	r7, r1
 801a698:	bb03      	cbnz	r3, 801a6dc <_strtod_l+0xba4>
 801a69a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a69e:	9012      	str	r0, [sp, #72]	; 0x48
 801a6a0:	9313      	str	r3, [sp, #76]	; 0x4c
 801a6a2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801a6a6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801a6aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a6ac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a6ae:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801a6b2:	1a9b      	subs	r3, r3, r2
 801a6b4:	930b      	str	r3, [sp, #44]	; 0x2c
 801a6b6:	ed9d 0b08 	vldr	d0, [sp, #32]
 801a6ba:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801a6be:	f001 f9d7 	bl	801ba70 <__ulp>
 801a6c2:	4650      	mov	r0, sl
 801a6c4:	ec53 2b10 	vmov	r2, r3, d0
 801a6c8:	4659      	mov	r1, fp
 801a6ca:	f7e5 ffad 	bl	8000628 <__aeabi_dmul>
 801a6ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801a6d2:	f7e5 fdf3 	bl	80002bc <__adddf3>
 801a6d6:	4682      	mov	sl, r0
 801a6d8:	468b      	mov	fp, r1
 801a6da:	e772      	b.n	801a5c2 <_strtod_l+0xa8a>
 801a6dc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 801a6e0:	e7df      	b.n	801a6a2 <_strtod_l+0xb6a>
 801a6e2:	a30d      	add	r3, pc, #52	; (adr r3, 801a718 <_strtod_l+0xbe0>)
 801a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e8:	f7e6 fa10 	bl	8000b0c <__aeabi_dcmplt>
 801a6ec:	e79c      	b.n	801a628 <_strtod_l+0xaf0>
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	930d      	str	r3, [sp, #52]	; 0x34
 801a6f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a6f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a6f6:	6013      	str	r3, [r2, #0]
 801a6f8:	f7ff ba61 	b.w	8019bbe <_strtod_l+0x86>
 801a6fc:	2b65      	cmp	r3, #101	; 0x65
 801a6fe:	f04f 0200 	mov.w	r2, #0
 801a702:	f43f ab4e 	beq.w	8019da2 <_strtod_l+0x26a>
 801a706:	2101      	movs	r1, #1
 801a708:	4614      	mov	r4, r2
 801a70a:	9104      	str	r1, [sp, #16]
 801a70c:	f7ff bacb 	b.w	8019ca6 <_strtod_l+0x16e>
 801a710:	ffc00000 	.word	0xffc00000
 801a714:	41dfffff 	.word	0x41dfffff
 801a718:	94a03595 	.word	0x94a03595
 801a71c:	3fcfffff 	.word	0x3fcfffff

0801a720 <strtod>:
 801a720:	4b07      	ldr	r3, [pc, #28]	; (801a740 <strtod+0x20>)
 801a722:	4a08      	ldr	r2, [pc, #32]	; (801a744 <strtod+0x24>)
 801a724:	b410      	push	{r4}
 801a726:	681c      	ldr	r4, [r3, #0]
 801a728:	6a23      	ldr	r3, [r4, #32]
 801a72a:	2b00      	cmp	r3, #0
 801a72c:	bf08      	it	eq
 801a72e:	4613      	moveq	r3, r2
 801a730:	460a      	mov	r2, r1
 801a732:	4601      	mov	r1, r0
 801a734:	4620      	mov	r0, r4
 801a736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a73a:	f7ff b9fd 	b.w	8019b38 <_strtod_l>
 801a73e:	bf00      	nop
 801a740:	2000069c 	.word	0x2000069c
 801a744:	20000700 	.word	0x20000700

0801a748 <_vsiprintf_r>:
 801a748:	b500      	push	{lr}
 801a74a:	b09b      	sub	sp, #108	; 0x6c
 801a74c:	9100      	str	r1, [sp, #0]
 801a74e:	9104      	str	r1, [sp, #16]
 801a750:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a754:	9105      	str	r1, [sp, #20]
 801a756:	9102      	str	r1, [sp, #8]
 801a758:	4905      	ldr	r1, [pc, #20]	; (801a770 <_vsiprintf_r+0x28>)
 801a75a:	9103      	str	r1, [sp, #12]
 801a75c:	4669      	mov	r1, sp
 801a75e:	f001 fb3b 	bl	801bdd8 <_svfiprintf_r>
 801a762:	9b00      	ldr	r3, [sp, #0]
 801a764:	2200      	movs	r2, #0
 801a766:	701a      	strb	r2, [r3, #0]
 801a768:	b01b      	add	sp, #108	; 0x6c
 801a76a:	f85d fb04 	ldr.w	pc, [sp], #4
 801a76e:	bf00      	nop
 801a770:	ffff0208 	.word	0xffff0208

0801a774 <vsiprintf>:
 801a774:	4613      	mov	r3, r2
 801a776:	460a      	mov	r2, r1
 801a778:	4601      	mov	r1, r0
 801a77a:	4802      	ldr	r0, [pc, #8]	; (801a784 <vsiprintf+0x10>)
 801a77c:	6800      	ldr	r0, [r0, #0]
 801a77e:	f7ff bfe3 	b.w	801a748 <_vsiprintf_r>
 801a782:	bf00      	nop
 801a784:	2000069c 	.word	0x2000069c

0801a788 <__swbuf_r>:
 801a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a78a:	460e      	mov	r6, r1
 801a78c:	4614      	mov	r4, r2
 801a78e:	4605      	mov	r5, r0
 801a790:	b118      	cbz	r0, 801a79a <__swbuf_r+0x12>
 801a792:	6983      	ldr	r3, [r0, #24]
 801a794:	b90b      	cbnz	r3, 801a79a <__swbuf_r+0x12>
 801a796:	f000 fa75 	bl	801ac84 <__sinit>
 801a79a:	4b21      	ldr	r3, [pc, #132]	; (801a820 <__swbuf_r+0x98>)
 801a79c:	429c      	cmp	r4, r3
 801a79e:	d12a      	bne.n	801a7f6 <__swbuf_r+0x6e>
 801a7a0:	686c      	ldr	r4, [r5, #4]
 801a7a2:	69a3      	ldr	r3, [r4, #24]
 801a7a4:	60a3      	str	r3, [r4, #8]
 801a7a6:	89a3      	ldrh	r3, [r4, #12]
 801a7a8:	071a      	lsls	r2, r3, #28
 801a7aa:	d52e      	bpl.n	801a80a <__swbuf_r+0x82>
 801a7ac:	6923      	ldr	r3, [r4, #16]
 801a7ae:	b363      	cbz	r3, 801a80a <__swbuf_r+0x82>
 801a7b0:	6923      	ldr	r3, [r4, #16]
 801a7b2:	6820      	ldr	r0, [r4, #0]
 801a7b4:	1ac0      	subs	r0, r0, r3
 801a7b6:	6963      	ldr	r3, [r4, #20]
 801a7b8:	b2f6      	uxtb	r6, r6
 801a7ba:	4283      	cmp	r3, r0
 801a7bc:	4637      	mov	r7, r6
 801a7be:	dc04      	bgt.n	801a7ca <__swbuf_r+0x42>
 801a7c0:	4621      	mov	r1, r4
 801a7c2:	4628      	mov	r0, r5
 801a7c4:	f000 f9f4 	bl	801abb0 <_fflush_r>
 801a7c8:	bb28      	cbnz	r0, 801a816 <__swbuf_r+0x8e>
 801a7ca:	68a3      	ldr	r3, [r4, #8]
 801a7cc:	3b01      	subs	r3, #1
 801a7ce:	60a3      	str	r3, [r4, #8]
 801a7d0:	6823      	ldr	r3, [r4, #0]
 801a7d2:	1c5a      	adds	r2, r3, #1
 801a7d4:	6022      	str	r2, [r4, #0]
 801a7d6:	701e      	strb	r6, [r3, #0]
 801a7d8:	6963      	ldr	r3, [r4, #20]
 801a7da:	3001      	adds	r0, #1
 801a7dc:	4283      	cmp	r3, r0
 801a7de:	d004      	beq.n	801a7ea <__swbuf_r+0x62>
 801a7e0:	89a3      	ldrh	r3, [r4, #12]
 801a7e2:	07db      	lsls	r3, r3, #31
 801a7e4:	d519      	bpl.n	801a81a <__swbuf_r+0x92>
 801a7e6:	2e0a      	cmp	r6, #10
 801a7e8:	d117      	bne.n	801a81a <__swbuf_r+0x92>
 801a7ea:	4621      	mov	r1, r4
 801a7ec:	4628      	mov	r0, r5
 801a7ee:	f000 f9df 	bl	801abb0 <_fflush_r>
 801a7f2:	b190      	cbz	r0, 801a81a <__swbuf_r+0x92>
 801a7f4:	e00f      	b.n	801a816 <__swbuf_r+0x8e>
 801a7f6:	4b0b      	ldr	r3, [pc, #44]	; (801a824 <__swbuf_r+0x9c>)
 801a7f8:	429c      	cmp	r4, r3
 801a7fa:	d101      	bne.n	801a800 <__swbuf_r+0x78>
 801a7fc:	68ac      	ldr	r4, [r5, #8]
 801a7fe:	e7d0      	b.n	801a7a2 <__swbuf_r+0x1a>
 801a800:	4b09      	ldr	r3, [pc, #36]	; (801a828 <__swbuf_r+0xa0>)
 801a802:	429c      	cmp	r4, r3
 801a804:	bf08      	it	eq
 801a806:	68ec      	ldreq	r4, [r5, #12]
 801a808:	e7cb      	b.n	801a7a2 <__swbuf_r+0x1a>
 801a80a:	4621      	mov	r1, r4
 801a80c:	4628      	mov	r0, r5
 801a80e:	f000 f80d 	bl	801a82c <__swsetup_r>
 801a812:	2800      	cmp	r0, #0
 801a814:	d0cc      	beq.n	801a7b0 <__swbuf_r+0x28>
 801a816:	f04f 37ff 	mov.w	r7, #4294967295
 801a81a:	4638      	mov	r0, r7
 801a81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a81e:	bf00      	nop
 801a820:	0803e918 	.word	0x0803e918
 801a824:	0803e938 	.word	0x0803e938
 801a828:	0803e8f8 	.word	0x0803e8f8

0801a82c <__swsetup_r>:
 801a82c:	4b32      	ldr	r3, [pc, #200]	; (801a8f8 <__swsetup_r+0xcc>)
 801a82e:	b570      	push	{r4, r5, r6, lr}
 801a830:	681d      	ldr	r5, [r3, #0]
 801a832:	4606      	mov	r6, r0
 801a834:	460c      	mov	r4, r1
 801a836:	b125      	cbz	r5, 801a842 <__swsetup_r+0x16>
 801a838:	69ab      	ldr	r3, [r5, #24]
 801a83a:	b913      	cbnz	r3, 801a842 <__swsetup_r+0x16>
 801a83c:	4628      	mov	r0, r5
 801a83e:	f000 fa21 	bl	801ac84 <__sinit>
 801a842:	4b2e      	ldr	r3, [pc, #184]	; (801a8fc <__swsetup_r+0xd0>)
 801a844:	429c      	cmp	r4, r3
 801a846:	d10f      	bne.n	801a868 <__swsetup_r+0x3c>
 801a848:	686c      	ldr	r4, [r5, #4]
 801a84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a84e:	b29a      	uxth	r2, r3
 801a850:	0715      	lsls	r5, r2, #28
 801a852:	d42c      	bmi.n	801a8ae <__swsetup_r+0x82>
 801a854:	06d0      	lsls	r0, r2, #27
 801a856:	d411      	bmi.n	801a87c <__swsetup_r+0x50>
 801a858:	2209      	movs	r2, #9
 801a85a:	6032      	str	r2, [r6, #0]
 801a85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a860:	81a3      	strh	r3, [r4, #12]
 801a862:	f04f 30ff 	mov.w	r0, #4294967295
 801a866:	e03e      	b.n	801a8e6 <__swsetup_r+0xba>
 801a868:	4b25      	ldr	r3, [pc, #148]	; (801a900 <__swsetup_r+0xd4>)
 801a86a:	429c      	cmp	r4, r3
 801a86c:	d101      	bne.n	801a872 <__swsetup_r+0x46>
 801a86e:	68ac      	ldr	r4, [r5, #8]
 801a870:	e7eb      	b.n	801a84a <__swsetup_r+0x1e>
 801a872:	4b24      	ldr	r3, [pc, #144]	; (801a904 <__swsetup_r+0xd8>)
 801a874:	429c      	cmp	r4, r3
 801a876:	bf08      	it	eq
 801a878:	68ec      	ldreq	r4, [r5, #12]
 801a87a:	e7e6      	b.n	801a84a <__swsetup_r+0x1e>
 801a87c:	0751      	lsls	r1, r2, #29
 801a87e:	d512      	bpl.n	801a8a6 <__swsetup_r+0x7a>
 801a880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a882:	b141      	cbz	r1, 801a896 <__swsetup_r+0x6a>
 801a884:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a888:	4299      	cmp	r1, r3
 801a88a:	d002      	beq.n	801a892 <__swsetup_r+0x66>
 801a88c:	4630      	mov	r0, r6
 801a88e:	f7fe fd5f 	bl	8019350 <_free_r>
 801a892:	2300      	movs	r3, #0
 801a894:	6363      	str	r3, [r4, #52]	; 0x34
 801a896:	89a3      	ldrh	r3, [r4, #12]
 801a898:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a89c:	81a3      	strh	r3, [r4, #12]
 801a89e:	2300      	movs	r3, #0
 801a8a0:	6063      	str	r3, [r4, #4]
 801a8a2:	6923      	ldr	r3, [r4, #16]
 801a8a4:	6023      	str	r3, [r4, #0]
 801a8a6:	89a3      	ldrh	r3, [r4, #12]
 801a8a8:	f043 0308 	orr.w	r3, r3, #8
 801a8ac:	81a3      	strh	r3, [r4, #12]
 801a8ae:	6923      	ldr	r3, [r4, #16]
 801a8b0:	b94b      	cbnz	r3, 801a8c6 <__swsetup_r+0x9a>
 801a8b2:	89a3      	ldrh	r3, [r4, #12]
 801a8b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a8bc:	d003      	beq.n	801a8c6 <__swsetup_r+0x9a>
 801a8be:	4621      	mov	r1, r4
 801a8c0:	4630      	mov	r0, r6
 801a8c2:	f000 fdb5 	bl	801b430 <__smakebuf_r>
 801a8c6:	89a2      	ldrh	r2, [r4, #12]
 801a8c8:	f012 0301 	ands.w	r3, r2, #1
 801a8cc:	d00c      	beq.n	801a8e8 <__swsetup_r+0xbc>
 801a8ce:	2300      	movs	r3, #0
 801a8d0:	60a3      	str	r3, [r4, #8]
 801a8d2:	6963      	ldr	r3, [r4, #20]
 801a8d4:	425b      	negs	r3, r3
 801a8d6:	61a3      	str	r3, [r4, #24]
 801a8d8:	6923      	ldr	r3, [r4, #16]
 801a8da:	b953      	cbnz	r3, 801a8f2 <__swsetup_r+0xc6>
 801a8dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8e0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801a8e4:	d1ba      	bne.n	801a85c <__swsetup_r+0x30>
 801a8e6:	bd70      	pop	{r4, r5, r6, pc}
 801a8e8:	0792      	lsls	r2, r2, #30
 801a8ea:	bf58      	it	pl
 801a8ec:	6963      	ldrpl	r3, [r4, #20]
 801a8ee:	60a3      	str	r3, [r4, #8]
 801a8f0:	e7f2      	b.n	801a8d8 <__swsetup_r+0xac>
 801a8f2:	2000      	movs	r0, #0
 801a8f4:	e7f7      	b.n	801a8e6 <__swsetup_r+0xba>
 801a8f6:	bf00      	nop
 801a8f8:	2000069c 	.word	0x2000069c
 801a8fc:	0803e918 	.word	0x0803e918
 801a900:	0803e938 	.word	0x0803e938
 801a904:	0803e8f8 	.word	0x0803e8f8

0801a908 <__register_exitproc>:
 801a908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a90c:	4d2c      	ldr	r5, [pc, #176]	; (801a9c0 <__register_exitproc+0xb8>)
 801a90e:	682c      	ldr	r4, [r5, #0]
 801a910:	4607      	mov	r7, r0
 801a912:	460e      	mov	r6, r1
 801a914:	4691      	mov	r9, r2
 801a916:	4698      	mov	r8, r3
 801a918:	b934      	cbnz	r4, 801a928 <__register_exitproc+0x20>
 801a91a:	4b2a      	ldr	r3, [pc, #168]	; (801a9c4 <__register_exitproc+0xbc>)
 801a91c:	4c2a      	ldr	r4, [pc, #168]	; (801a9c8 <__register_exitproc+0xc0>)
 801a91e:	602c      	str	r4, [r5, #0]
 801a920:	b113      	cbz	r3, 801a928 <__register_exitproc+0x20>
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801a928:	6863      	ldr	r3, [r4, #4]
 801a92a:	2b1f      	cmp	r3, #31
 801a92c:	dd3d      	ble.n	801a9aa <__register_exitproc+0xa2>
 801a92e:	4b27      	ldr	r3, [pc, #156]	; (801a9cc <__register_exitproc+0xc4>)
 801a930:	b91b      	cbnz	r3, 801a93a <__register_exitproc+0x32>
 801a932:	f04f 30ff 	mov.w	r0, #4294967295
 801a936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a93a:	208c      	movs	r0, #140	; 0x8c
 801a93c:	f7fe fcbe 	bl	80192bc <malloc>
 801a940:	4604      	mov	r4, r0
 801a942:	2800      	cmp	r0, #0
 801a944:	d0f5      	beq.n	801a932 <__register_exitproc+0x2a>
 801a946:	2300      	movs	r3, #0
 801a948:	682a      	ldr	r2, [r5, #0]
 801a94a:	6002      	str	r2, [r0, #0]
 801a94c:	6043      	str	r3, [r0, #4]
 801a94e:	6028      	str	r0, [r5, #0]
 801a950:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 801a954:	b30f      	cbz	r7, 801a99a <__register_exitproc+0x92>
 801a956:	f44f 7084 	mov.w	r0, #264	; 0x108
 801a95a:	f7fe fcaf 	bl	80192bc <malloc>
 801a95e:	2800      	cmp	r0, #0
 801a960:	d0e7      	beq.n	801a932 <__register_exitproc+0x2a>
 801a962:	2300      	movs	r3, #0
 801a964:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801a968:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 801a96c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801a970:	6862      	ldr	r2, [r4, #4]
 801a972:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 801a976:	2301      	movs	r3, #1
 801a978:	4093      	lsls	r3, r2
 801a97a:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 801a97e:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 801a982:	431a      	orrs	r2, r3
 801a984:	2f02      	cmp	r7, #2
 801a986:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 801a98a:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 801a98e:	bf02      	ittt	eq
 801a990:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 801a994:	4313      	orreq	r3, r2
 801a996:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801a99a:	6863      	ldr	r3, [r4, #4]
 801a99c:	1c5a      	adds	r2, r3, #1
 801a99e:	3302      	adds	r3, #2
 801a9a0:	6062      	str	r2, [r4, #4]
 801a9a2:	2000      	movs	r0, #0
 801a9a4:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 801a9a8:	e7c5      	b.n	801a936 <__register_exitproc+0x2e>
 801a9aa:	2f00      	cmp	r7, #0
 801a9ac:	d0f5      	beq.n	801a99a <__register_exitproc+0x92>
 801a9ae:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801a9b2:	2800      	cmp	r0, #0
 801a9b4:	d1dc      	bne.n	801a970 <__register_exitproc+0x68>
 801a9b6:	4b05      	ldr	r3, [pc, #20]	; (801a9cc <__register_exitproc+0xc4>)
 801a9b8:	2b00      	cmp	r3, #0
 801a9ba:	d0ba      	beq.n	801a932 <__register_exitproc+0x2a>
 801a9bc:	e7cb      	b.n	801a956 <__register_exitproc+0x4e>
 801a9be:	bf00      	nop
 801a9c0:	200009d0 	.word	0x200009d0
 801a9c4:	00000000 	.word	0x00000000
 801a9c8:	20000944 	.word	0x20000944
 801a9cc:	080192bd 	.word	0x080192bd

0801a9d0 <__call_exitprocs>:
 801a9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9d4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 801aaa0 <__call_exitprocs+0xd0>
 801a9d8:	9001      	str	r0, [sp, #4]
 801a9da:	460f      	mov	r7, r1
 801a9dc:	46c3      	mov	fp, r8
 801a9de:	f8d8 4000 	ldr.w	r4, [r8]
 801a9e2:	465e      	mov	r6, fp
 801a9e4:	f04f 0a01 	mov.w	sl, #1
 801a9e8:	b914      	cbnz	r4, 801a9f0 <__call_exitprocs+0x20>
 801a9ea:	b003      	add	sp, #12
 801a9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9f0:	f8d4 9088 	ldr.w	r9, [r4, #136]	; 0x88
 801a9f4:	6865      	ldr	r5, [r4, #4]
 801a9f6:	3d01      	subs	r5, #1
 801a9f8:	2d00      	cmp	r5, #0
 801a9fa:	da15      	bge.n	801aa28 <__call_exitprocs+0x58>
 801a9fc:	4b27      	ldr	r3, [pc, #156]	; (801aa9c <__call_exitprocs+0xcc>)
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d0f3      	beq.n	801a9ea <__call_exitprocs+0x1a>
 801aa02:	e9d4 2100 	ldrd	r2, r1, [r4]
 801aa06:	2900      	cmp	r1, #0
 801aa08:	d146      	bne.n	801aa98 <__call_exitprocs+0xc8>
 801aa0a:	2a00      	cmp	r2, #0
 801aa0c:	d044      	beq.n	801aa98 <__call_exitprocs+0xc8>
 801aa0e:	6032      	str	r2, [r6, #0]
 801aa10:	f1b9 0f00 	cmp.w	r9, #0
 801aa14:	d002      	beq.n	801aa1c <__call_exitprocs+0x4c>
 801aa16:	4648      	mov	r0, r9
 801aa18:	f7fe fc58 	bl	80192cc <free>
 801aa1c:	4620      	mov	r0, r4
 801aa1e:	f7fe fc55 	bl	80192cc <free>
 801aa22:	6832      	ldr	r2, [r6, #0]
 801aa24:	4614      	mov	r4, r2
 801aa26:	e7df      	b.n	801a9e8 <__call_exitprocs+0x18>
 801aa28:	b147      	cbz	r7, 801aa3c <__call_exitprocs+0x6c>
 801aa2a:	f1b9 0f00 	cmp.w	r9, #0
 801aa2e:	d0e2      	beq.n	801a9f6 <__call_exitprocs+0x26>
 801aa30:	eb09 0285 	add.w	r2, r9, r5, lsl #2
 801aa34:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801aa38:	42ba      	cmp	r2, r7
 801aa3a:	d1dc      	bne.n	801a9f6 <__call_exitprocs+0x26>
 801aa3c:	6861      	ldr	r1, [r4, #4]
 801aa3e:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 801aa42:	3901      	subs	r1, #1
 801aa44:	42a9      	cmp	r1, r5
 801aa46:	6882      	ldr	r2, [r0, #8]
 801aa48:	bf0e      	itee	eq
 801aa4a:	6065      	streq	r5, [r4, #4]
 801aa4c:	2300      	movne	r3, #0
 801aa4e:	6083      	strne	r3, [r0, #8]
 801aa50:	2a00      	cmp	r2, #0
 801aa52:	d0d0      	beq.n	801a9f6 <__call_exitprocs+0x26>
 801aa54:	6863      	ldr	r3, [r4, #4]
 801aa56:	9300      	str	r3, [sp, #0]
 801aa58:	f1b9 0f00 	cmp.w	r9, #0
 801aa5c:	d006      	beq.n	801aa6c <__call_exitprocs+0x9c>
 801aa5e:	f8d9 1100 	ldr.w	r1, [r9, #256]	; 0x100
 801aa62:	fa0a fc05 	lsl.w	ip, sl, r5
 801aa66:	ea1c 0f01 	tst.w	ip, r1
 801aa6a:	d108      	bne.n	801aa7e <__call_exitprocs+0xae>
 801aa6c:	4790      	blx	r2
 801aa6e:	6862      	ldr	r2, [r4, #4]
 801aa70:	9b00      	ldr	r3, [sp, #0]
 801aa72:	429a      	cmp	r2, r3
 801aa74:	d1b3      	bne.n	801a9de <__call_exitprocs+0xe>
 801aa76:	6832      	ldr	r2, [r6, #0]
 801aa78:	42a2      	cmp	r2, r4
 801aa7a:	d0bc      	beq.n	801a9f6 <__call_exitprocs+0x26>
 801aa7c:	e7af      	b.n	801a9de <__call_exitprocs+0xe>
 801aa7e:	f8d9 0104 	ldr.w	r0, [r9, #260]	; 0x104
 801aa82:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 801aa86:	ea1c 0f00 	tst.w	ip, r0
 801aa8a:	d102      	bne.n	801aa92 <__call_exitprocs+0xc2>
 801aa8c:	9801      	ldr	r0, [sp, #4]
 801aa8e:	4790      	blx	r2
 801aa90:	e7ed      	b.n	801aa6e <__call_exitprocs+0x9e>
 801aa92:	4608      	mov	r0, r1
 801aa94:	4790      	blx	r2
 801aa96:	e7ea      	b.n	801aa6e <__call_exitprocs+0x9e>
 801aa98:	4626      	mov	r6, r4
 801aa9a:	e7c3      	b.n	801aa24 <__call_exitprocs+0x54>
 801aa9c:	080192cd 	.word	0x080192cd
 801aaa0:	200009d0 	.word	0x200009d0

0801aaa4 <__sflush_r>:
 801aaa4:	898a      	ldrh	r2, [r1, #12]
 801aaa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aaaa:	4605      	mov	r5, r0
 801aaac:	0710      	lsls	r0, r2, #28
 801aaae:	460c      	mov	r4, r1
 801aab0:	d458      	bmi.n	801ab64 <__sflush_r+0xc0>
 801aab2:	684b      	ldr	r3, [r1, #4]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	dc05      	bgt.n	801aac4 <__sflush_r+0x20>
 801aab8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	dc02      	bgt.n	801aac4 <__sflush_r+0x20>
 801aabe:	2000      	movs	r0, #0
 801aac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aac4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aac6:	2e00      	cmp	r6, #0
 801aac8:	d0f9      	beq.n	801aabe <__sflush_r+0x1a>
 801aaca:	2300      	movs	r3, #0
 801aacc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801aad0:	682f      	ldr	r7, [r5, #0]
 801aad2:	6a21      	ldr	r1, [r4, #32]
 801aad4:	602b      	str	r3, [r5, #0]
 801aad6:	d032      	beq.n	801ab3e <__sflush_r+0x9a>
 801aad8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801aada:	89a3      	ldrh	r3, [r4, #12]
 801aadc:	075a      	lsls	r2, r3, #29
 801aade:	d505      	bpl.n	801aaec <__sflush_r+0x48>
 801aae0:	6863      	ldr	r3, [r4, #4]
 801aae2:	1ac0      	subs	r0, r0, r3
 801aae4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aae6:	b10b      	cbz	r3, 801aaec <__sflush_r+0x48>
 801aae8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801aaea:	1ac0      	subs	r0, r0, r3
 801aaec:	2300      	movs	r3, #0
 801aaee:	4602      	mov	r2, r0
 801aaf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aaf2:	6a21      	ldr	r1, [r4, #32]
 801aaf4:	4628      	mov	r0, r5
 801aaf6:	47b0      	blx	r6
 801aaf8:	1c43      	adds	r3, r0, #1
 801aafa:	89a3      	ldrh	r3, [r4, #12]
 801aafc:	d106      	bne.n	801ab0c <__sflush_r+0x68>
 801aafe:	6829      	ldr	r1, [r5, #0]
 801ab00:	291d      	cmp	r1, #29
 801ab02:	d848      	bhi.n	801ab96 <__sflush_r+0xf2>
 801ab04:	4a29      	ldr	r2, [pc, #164]	; (801abac <__sflush_r+0x108>)
 801ab06:	40ca      	lsrs	r2, r1
 801ab08:	07d6      	lsls	r6, r2, #31
 801ab0a:	d544      	bpl.n	801ab96 <__sflush_r+0xf2>
 801ab0c:	2200      	movs	r2, #0
 801ab0e:	6062      	str	r2, [r4, #4]
 801ab10:	04d9      	lsls	r1, r3, #19
 801ab12:	6922      	ldr	r2, [r4, #16]
 801ab14:	6022      	str	r2, [r4, #0]
 801ab16:	d504      	bpl.n	801ab22 <__sflush_r+0x7e>
 801ab18:	1c42      	adds	r2, r0, #1
 801ab1a:	d101      	bne.n	801ab20 <__sflush_r+0x7c>
 801ab1c:	682b      	ldr	r3, [r5, #0]
 801ab1e:	b903      	cbnz	r3, 801ab22 <__sflush_r+0x7e>
 801ab20:	6560      	str	r0, [r4, #84]	; 0x54
 801ab22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ab24:	602f      	str	r7, [r5, #0]
 801ab26:	2900      	cmp	r1, #0
 801ab28:	d0c9      	beq.n	801aabe <__sflush_r+0x1a>
 801ab2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ab2e:	4299      	cmp	r1, r3
 801ab30:	d002      	beq.n	801ab38 <__sflush_r+0x94>
 801ab32:	4628      	mov	r0, r5
 801ab34:	f7fe fc0c 	bl	8019350 <_free_r>
 801ab38:	2000      	movs	r0, #0
 801ab3a:	6360      	str	r0, [r4, #52]	; 0x34
 801ab3c:	e7c0      	b.n	801aac0 <__sflush_r+0x1c>
 801ab3e:	2301      	movs	r3, #1
 801ab40:	4628      	mov	r0, r5
 801ab42:	47b0      	blx	r6
 801ab44:	1c41      	adds	r1, r0, #1
 801ab46:	d1c8      	bne.n	801aada <__sflush_r+0x36>
 801ab48:	682b      	ldr	r3, [r5, #0]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d0c5      	beq.n	801aada <__sflush_r+0x36>
 801ab4e:	2b1d      	cmp	r3, #29
 801ab50:	d001      	beq.n	801ab56 <__sflush_r+0xb2>
 801ab52:	2b16      	cmp	r3, #22
 801ab54:	d101      	bne.n	801ab5a <__sflush_r+0xb6>
 801ab56:	602f      	str	r7, [r5, #0]
 801ab58:	e7b1      	b.n	801aabe <__sflush_r+0x1a>
 801ab5a:	89a3      	ldrh	r3, [r4, #12]
 801ab5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab60:	81a3      	strh	r3, [r4, #12]
 801ab62:	e7ad      	b.n	801aac0 <__sflush_r+0x1c>
 801ab64:	690f      	ldr	r7, [r1, #16]
 801ab66:	2f00      	cmp	r7, #0
 801ab68:	d0a9      	beq.n	801aabe <__sflush_r+0x1a>
 801ab6a:	0793      	lsls	r3, r2, #30
 801ab6c:	680e      	ldr	r6, [r1, #0]
 801ab6e:	bf08      	it	eq
 801ab70:	694b      	ldreq	r3, [r1, #20]
 801ab72:	600f      	str	r7, [r1, #0]
 801ab74:	bf18      	it	ne
 801ab76:	2300      	movne	r3, #0
 801ab78:	eba6 0807 	sub.w	r8, r6, r7
 801ab7c:	608b      	str	r3, [r1, #8]
 801ab7e:	f1b8 0f00 	cmp.w	r8, #0
 801ab82:	dd9c      	ble.n	801aabe <__sflush_r+0x1a>
 801ab84:	4643      	mov	r3, r8
 801ab86:	463a      	mov	r2, r7
 801ab88:	6a21      	ldr	r1, [r4, #32]
 801ab8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ab8c:	4628      	mov	r0, r5
 801ab8e:	47b0      	blx	r6
 801ab90:	2800      	cmp	r0, #0
 801ab92:	dc06      	bgt.n	801aba2 <__sflush_r+0xfe>
 801ab94:	89a3      	ldrh	r3, [r4, #12]
 801ab96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ab9a:	81a3      	strh	r3, [r4, #12]
 801ab9c:	f04f 30ff 	mov.w	r0, #4294967295
 801aba0:	e78e      	b.n	801aac0 <__sflush_r+0x1c>
 801aba2:	4407      	add	r7, r0
 801aba4:	eba8 0800 	sub.w	r8, r8, r0
 801aba8:	e7e9      	b.n	801ab7e <__sflush_r+0xda>
 801abaa:	bf00      	nop
 801abac:	20400001 	.word	0x20400001

0801abb0 <_fflush_r>:
 801abb0:	b538      	push	{r3, r4, r5, lr}
 801abb2:	690b      	ldr	r3, [r1, #16]
 801abb4:	4605      	mov	r5, r0
 801abb6:	460c      	mov	r4, r1
 801abb8:	b1db      	cbz	r3, 801abf2 <_fflush_r+0x42>
 801abba:	b118      	cbz	r0, 801abc4 <_fflush_r+0x14>
 801abbc:	6983      	ldr	r3, [r0, #24]
 801abbe:	b90b      	cbnz	r3, 801abc4 <_fflush_r+0x14>
 801abc0:	f000 f860 	bl	801ac84 <__sinit>
 801abc4:	4b0c      	ldr	r3, [pc, #48]	; (801abf8 <_fflush_r+0x48>)
 801abc6:	429c      	cmp	r4, r3
 801abc8:	d109      	bne.n	801abde <_fflush_r+0x2e>
 801abca:	686c      	ldr	r4, [r5, #4]
 801abcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801abd0:	b17b      	cbz	r3, 801abf2 <_fflush_r+0x42>
 801abd2:	4621      	mov	r1, r4
 801abd4:	4628      	mov	r0, r5
 801abd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abda:	f7ff bf63 	b.w	801aaa4 <__sflush_r>
 801abde:	4b07      	ldr	r3, [pc, #28]	; (801abfc <_fflush_r+0x4c>)
 801abe0:	429c      	cmp	r4, r3
 801abe2:	d101      	bne.n	801abe8 <_fflush_r+0x38>
 801abe4:	68ac      	ldr	r4, [r5, #8]
 801abe6:	e7f1      	b.n	801abcc <_fflush_r+0x1c>
 801abe8:	4b05      	ldr	r3, [pc, #20]	; (801ac00 <_fflush_r+0x50>)
 801abea:	429c      	cmp	r4, r3
 801abec:	bf08      	it	eq
 801abee:	68ec      	ldreq	r4, [r5, #12]
 801abf0:	e7ec      	b.n	801abcc <_fflush_r+0x1c>
 801abf2:	2000      	movs	r0, #0
 801abf4:	bd38      	pop	{r3, r4, r5, pc}
 801abf6:	bf00      	nop
 801abf8:	0803e918 	.word	0x0803e918
 801abfc:	0803e938 	.word	0x0803e938
 801ac00:	0803e8f8 	.word	0x0803e8f8

0801ac04 <std>:
 801ac04:	2300      	movs	r3, #0
 801ac06:	b510      	push	{r4, lr}
 801ac08:	4604      	mov	r4, r0
 801ac0a:	e9c0 3300 	strd	r3, r3, [r0]
 801ac0e:	6083      	str	r3, [r0, #8]
 801ac10:	8181      	strh	r1, [r0, #12]
 801ac12:	6643      	str	r3, [r0, #100]	; 0x64
 801ac14:	81c2      	strh	r2, [r0, #14]
 801ac16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ac1a:	6183      	str	r3, [r0, #24]
 801ac1c:	4619      	mov	r1, r3
 801ac1e:	2208      	movs	r2, #8
 801ac20:	305c      	adds	r0, #92	; 0x5c
 801ac22:	f7fe fb7f 	bl	8019324 <memset>
 801ac26:	4b05      	ldr	r3, [pc, #20]	; (801ac3c <std+0x38>)
 801ac28:	6263      	str	r3, [r4, #36]	; 0x24
 801ac2a:	4b05      	ldr	r3, [pc, #20]	; (801ac40 <std+0x3c>)
 801ac2c:	62a3      	str	r3, [r4, #40]	; 0x28
 801ac2e:	4b05      	ldr	r3, [pc, #20]	; (801ac44 <std+0x40>)
 801ac30:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ac32:	4b05      	ldr	r3, [pc, #20]	; (801ac48 <std+0x44>)
 801ac34:	6224      	str	r4, [r4, #32]
 801ac36:	6323      	str	r3, [r4, #48]	; 0x30
 801ac38:	bd10      	pop	{r4, pc}
 801ac3a:	bf00      	nop
 801ac3c:	0801bfc9 	.word	0x0801bfc9
 801ac40:	0801bfeb 	.word	0x0801bfeb
 801ac44:	0801c023 	.word	0x0801c023
 801ac48:	0801c047 	.word	0x0801c047

0801ac4c <_cleanup_r>:
 801ac4c:	4901      	ldr	r1, [pc, #4]	; (801ac54 <_cleanup_r+0x8>)
 801ac4e:	f000 b885 	b.w	801ad5c <_fwalk_reent>
 801ac52:	bf00      	nop
 801ac54:	0801abb1 	.word	0x0801abb1

0801ac58 <__sfmoreglue>:
 801ac58:	b570      	push	{r4, r5, r6, lr}
 801ac5a:	1e4a      	subs	r2, r1, #1
 801ac5c:	2568      	movs	r5, #104	; 0x68
 801ac5e:	4355      	muls	r5, r2
 801ac60:	460e      	mov	r6, r1
 801ac62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ac66:	f7fe fbc1 	bl	80193ec <_malloc_r>
 801ac6a:	4604      	mov	r4, r0
 801ac6c:	b140      	cbz	r0, 801ac80 <__sfmoreglue+0x28>
 801ac6e:	2100      	movs	r1, #0
 801ac70:	e9c0 1600 	strd	r1, r6, [r0]
 801ac74:	300c      	adds	r0, #12
 801ac76:	60a0      	str	r0, [r4, #8]
 801ac78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ac7c:	f7fe fb52 	bl	8019324 <memset>
 801ac80:	4620      	mov	r0, r4
 801ac82:	bd70      	pop	{r4, r5, r6, pc}

0801ac84 <__sinit>:
 801ac84:	6983      	ldr	r3, [r0, #24]
 801ac86:	b510      	push	{r4, lr}
 801ac88:	4604      	mov	r4, r0
 801ac8a:	bb33      	cbnz	r3, 801acda <__sinit+0x56>
 801ac8c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801ac90:	6503      	str	r3, [r0, #80]	; 0x50
 801ac92:	4b12      	ldr	r3, [pc, #72]	; (801acdc <__sinit+0x58>)
 801ac94:	4a12      	ldr	r2, [pc, #72]	; (801ace0 <__sinit+0x5c>)
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	6282      	str	r2, [r0, #40]	; 0x28
 801ac9a:	4298      	cmp	r0, r3
 801ac9c:	bf04      	itt	eq
 801ac9e:	2301      	moveq	r3, #1
 801aca0:	6183      	streq	r3, [r0, #24]
 801aca2:	f000 f81f 	bl	801ace4 <__sfp>
 801aca6:	6060      	str	r0, [r4, #4]
 801aca8:	4620      	mov	r0, r4
 801acaa:	f000 f81b 	bl	801ace4 <__sfp>
 801acae:	60a0      	str	r0, [r4, #8]
 801acb0:	4620      	mov	r0, r4
 801acb2:	f000 f817 	bl	801ace4 <__sfp>
 801acb6:	2200      	movs	r2, #0
 801acb8:	60e0      	str	r0, [r4, #12]
 801acba:	2104      	movs	r1, #4
 801acbc:	6860      	ldr	r0, [r4, #4]
 801acbe:	f7ff ffa1 	bl	801ac04 <std>
 801acc2:	2201      	movs	r2, #1
 801acc4:	2109      	movs	r1, #9
 801acc6:	68a0      	ldr	r0, [r4, #8]
 801acc8:	f7ff ff9c 	bl	801ac04 <std>
 801accc:	2202      	movs	r2, #2
 801acce:	2112      	movs	r1, #18
 801acd0:	68e0      	ldr	r0, [r4, #12]
 801acd2:	f7ff ff97 	bl	801ac04 <std>
 801acd6:	2301      	movs	r3, #1
 801acd8:	61a3      	str	r3, [r4, #24]
 801acda:	bd10      	pop	{r4, pc}
 801acdc:	0803e864 	.word	0x0803e864
 801ace0:	0801ac4d 	.word	0x0801ac4d

0801ace4 <__sfp>:
 801ace4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ace6:	4b1b      	ldr	r3, [pc, #108]	; (801ad54 <__sfp+0x70>)
 801ace8:	681e      	ldr	r6, [r3, #0]
 801acea:	69b3      	ldr	r3, [r6, #24]
 801acec:	4607      	mov	r7, r0
 801acee:	b913      	cbnz	r3, 801acf6 <__sfp+0x12>
 801acf0:	4630      	mov	r0, r6
 801acf2:	f7ff ffc7 	bl	801ac84 <__sinit>
 801acf6:	3648      	adds	r6, #72	; 0x48
 801acf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801acfc:	3b01      	subs	r3, #1
 801acfe:	d503      	bpl.n	801ad08 <__sfp+0x24>
 801ad00:	6833      	ldr	r3, [r6, #0]
 801ad02:	b133      	cbz	r3, 801ad12 <__sfp+0x2e>
 801ad04:	6836      	ldr	r6, [r6, #0]
 801ad06:	e7f7      	b.n	801acf8 <__sfp+0x14>
 801ad08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ad0c:	b16d      	cbz	r5, 801ad2a <__sfp+0x46>
 801ad0e:	3468      	adds	r4, #104	; 0x68
 801ad10:	e7f4      	b.n	801acfc <__sfp+0x18>
 801ad12:	2104      	movs	r1, #4
 801ad14:	4638      	mov	r0, r7
 801ad16:	f7ff ff9f 	bl	801ac58 <__sfmoreglue>
 801ad1a:	6030      	str	r0, [r6, #0]
 801ad1c:	2800      	cmp	r0, #0
 801ad1e:	d1f1      	bne.n	801ad04 <__sfp+0x20>
 801ad20:	230c      	movs	r3, #12
 801ad22:	603b      	str	r3, [r7, #0]
 801ad24:	4604      	mov	r4, r0
 801ad26:	4620      	mov	r0, r4
 801ad28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ad2a:	4b0b      	ldr	r3, [pc, #44]	; (801ad58 <__sfp+0x74>)
 801ad2c:	6665      	str	r5, [r4, #100]	; 0x64
 801ad2e:	e9c4 5500 	strd	r5, r5, [r4]
 801ad32:	60a5      	str	r5, [r4, #8]
 801ad34:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801ad38:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801ad3c:	2208      	movs	r2, #8
 801ad3e:	4629      	mov	r1, r5
 801ad40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ad44:	f7fe faee 	bl	8019324 <memset>
 801ad48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ad4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ad50:	e7e9      	b.n	801ad26 <__sfp+0x42>
 801ad52:	bf00      	nop
 801ad54:	0803e864 	.word	0x0803e864
 801ad58:	ffff0001 	.word	0xffff0001

0801ad5c <_fwalk_reent>:
 801ad5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ad60:	4680      	mov	r8, r0
 801ad62:	4689      	mov	r9, r1
 801ad64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801ad68:	2600      	movs	r6, #0
 801ad6a:	b914      	cbnz	r4, 801ad72 <_fwalk_reent+0x16>
 801ad6c:	4630      	mov	r0, r6
 801ad6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801ad76:	3f01      	subs	r7, #1
 801ad78:	d501      	bpl.n	801ad7e <_fwalk_reent+0x22>
 801ad7a:	6824      	ldr	r4, [r4, #0]
 801ad7c:	e7f5      	b.n	801ad6a <_fwalk_reent+0xe>
 801ad7e:	89ab      	ldrh	r3, [r5, #12]
 801ad80:	2b01      	cmp	r3, #1
 801ad82:	d907      	bls.n	801ad94 <_fwalk_reent+0x38>
 801ad84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ad88:	3301      	adds	r3, #1
 801ad8a:	d003      	beq.n	801ad94 <_fwalk_reent+0x38>
 801ad8c:	4629      	mov	r1, r5
 801ad8e:	4640      	mov	r0, r8
 801ad90:	47c8      	blx	r9
 801ad92:	4306      	orrs	r6, r0
 801ad94:	3568      	adds	r5, #104	; 0x68
 801ad96:	e7ee      	b.n	801ad76 <_fwalk_reent+0x1a>

0801ad98 <rshift>:
 801ad98:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad9a:	6906      	ldr	r6, [r0, #16]
 801ad9c:	114b      	asrs	r3, r1, #5
 801ad9e:	429e      	cmp	r6, r3
 801ada0:	f100 0414 	add.w	r4, r0, #20
 801ada4:	dd30      	ble.n	801ae08 <rshift+0x70>
 801ada6:	f011 011f 	ands.w	r1, r1, #31
 801adaa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801adae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801adb2:	d108      	bne.n	801adc6 <rshift+0x2e>
 801adb4:	4621      	mov	r1, r4
 801adb6:	42b2      	cmp	r2, r6
 801adb8:	460b      	mov	r3, r1
 801adba:	d211      	bcs.n	801ade0 <rshift+0x48>
 801adbc:	f852 3b04 	ldr.w	r3, [r2], #4
 801adc0:	f841 3b04 	str.w	r3, [r1], #4
 801adc4:	e7f7      	b.n	801adb6 <rshift+0x1e>
 801adc6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801adca:	f1c1 0c20 	rsb	ip, r1, #32
 801adce:	40cd      	lsrs	r5, r1
 801add0:	3204      	adds	r2, #4
 801add2:	4623      	mov	r3, r4
 801add4:	42b2      	cmp	r2, r6
 801add6:	4617      	mov	r7, r2
 801add8:	d30c      	bcc.n	801adf4 <rshift+0x5c>
 801adda:	601d      	str	r5, [r3, #0]
 801addc:	b105      	cbz	r5, 801ade0 <rshift+0x48>
 801adde:	3304      	adds	r3, #4
 801ade0:	1b1a      	subs	r2, r3, r4
 801ade2:	42a3      	cmp	r3, r4
 801ade4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ade8:	bf08      	it	eq
 801adea:	2300      	moveq	r3, #0
 801adec:	6102      	str	r2, [r0, #16]
 801adee:	bf08      	it	eq
 801adf0:	6143      	streq	r3, [r0, #20]
 801adf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adf4:	683f      	ldr	r7, [r7, #0]
 801adf6:	fa07 f70c 	lsl.w	r7, r7, ip
 801adfa:	433d      	orrs	r5, r7
 801adfc:	f843 5b04 	str.w	r5, [r3], #4
 801ae00:	f852 5b04 	ldr.w	r5, [r2], #4
 801ae04:	40cd      	lsrs	r5, r1
 801ae06:	e7e5      	b.n	801add4 <rshift+0x3c>
 801ae08:	4623      	mov	r3, r4
 801ae0a:	e7e9      	b.n	801ade0 <rshift+0x48>

0801ae0c <__hexdig_fun>:
 801ae0c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801ae10:	2b09      	cmp	r3, #9
 801ae12:	d802      	bhi.n	801ae1a <__hexdig_fun+0xe>
 801ae14:	3820      	subs	r0, #32
 801ae16:	b2c0      	uxtb	r0, r0
 801ae18:	4770      	bx	lr
 801ae1a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801ae1e:	2b05      	cmp	r3, #5
 801ae20:	d801      	bhi.n	801ae26 <__hexdig_fun+0x1a>
 801ae22:	3847      	subs	r0, #71	; 0x47
 801ae24:	e7f7      	b.n	801ae16 <__hexdig_fun+0xa>
 801ae26:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801ae2a:	2b05      	cmp	r3, #5
 801ae2c:	d801      	bhi.n	801ae32 <__hexdig_fun+0x26>
 801ae2e:	3827      	subs	r0, #39	; 0x27
 801ae30:	e7f1      	b.n	801ae16 <__hexdig_fun+0xa>
 801ae32:	2000      	movs	r0, #0
 801ae34:	4770      	bx	lr

0801ae36 <__gethex>:
 801ae36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae3a:	b08b      	sub	sp, #44	; 0x2c
 801ae3c:	468a      	mov	sl, r1
 801ae3e:	9002      	str	r0, [sp, #8]
 801ae40:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ae42:	9306      	str	r3, [sp, #24]
 801ae44:	4690      	mov	r8, r2
 801ae46:	f000 facd 	bl	801b3e4 <__localeconv_l>
 801ae4a:	6803      	ldr	r3, [r0, #0]
 801ae4c:	9303      	str	r3, [sp, #12]
 801ae4e:	4618      	mov	r0, r3
 801ae50:	f7e5 f9d0 	bl	80001f4 <strlen>
 801ae54:	9b03      	ldr	r3, [sp, #12]
 801ae56:	9001      	str	r0, [sp, #4]
 801ae58:	4403      	add	r3, r0
 801ae5a:	f04f 0b00 	mov.w	fp, #0
 801ae5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801ae62:	9307      	str	r3, [sp, #28]
 801ae64:	f8da 3000 	ldr.w	r3, [sl]
 801ae68:	3302      	adds	r3, #2
 801ae6a:	461f      	mov	r7, r3
 801ae6c:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ae70:	2830      	cmp	r0, #48	; 0x30
 801ae72:	d06c      	beq.n	801af4e <__gethex+0x118>
 801ae74:	f7ff ffca 	bl	801ae0c <__hexdig_fun>
 801ae78:	4604      	mov	r4, r0
 801ae7a:	2800      	cmp	r0, #0
 801ae7c:	d16a      	bne.n	801af54 <__gethex+0x11e>
 801ae7e:	9a01      	ldr	r2, [sp, #4]
 801ae80:	9903      	ldr	r1, [sp, #12]
 801ae82:	4638      	mov	r0, r7
 801ae84:	f7fe fe28 	bl	8019ad8 <strncmp>
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	d166      	bne.n	801af5a <__gethex+0x124>
 801ae8c:	9b01      	ldr	r3, [sp, #4]
 801ae8e:	5cf8      	ldrb	r0, [r7, r3]
 801ae90:	18fe      	adds	r6, r7, r3
 801ae92:	f7ff ffbb 	bl	801ae0c <__hexdig_fun>
 801ae96:	2800      	cmp	r0, #0
 801ae98:	d062      	beq.n	801af60 <__gethex+0x12a>
 801ae9a:	4633      	mov	r3, r6
 801ae9c:	7818      	ldrb	r0, [r3, #0]
 801ae9e:	2830      	cmp	r0, #48	; 0x30
 801aea0:	461f      	mov	r7, r3
 801aea2:	f103 0301 	add.w	r3, r3, #1
 801aea6:	d0f9      	beq.n	801ae9c <__gethex+0x66>
 801aea8:	f7ff ffb0 	bl	801ae0c <__hexdig_fun>
 801aeac:	fab0 f580 	clz	r5, r0
 801aeb0:	096d      	lsrs	r5, r5, #5
 801aeb2:	4634      	mov	r4, r6
 801aeb4:	f04f 0b01 	mov.w	fp, #1
 801aeb8:	463a      	mov	r2, r7
 801aeba:	4616      	mov	r6, r2
 801aebc:	3201      	adds	r2, #1
 801aebe:	7830      	ldrb	r0, [r6, #0]
 801aec0:	f7ff ffa4 	bl	801ae0c <__hexdig_fun>
 801aec4:	2800      	cmp	r0, #0
 801aec6:	d1f8      	bne.n	801aeba <__gethex+0x84>
 801aec8:	9a01      	ldr	r2, [sp, #4]
 801aeca:	9903      	ldr	r1, [sp, #12]
 801aecc:	4630      	mov	r0, r6
 801aece:	f7fe fe03 	bl	8019ad8 <strncmp>
 801aed2:	b950      	cbnz	r0, 801aeea <__gethex+0xb4>
 801aed4:	b954      	cbnz	r4, 801aeec <__gethex+0xb6>
 801aed6:	9b01      	ldr	r3, [sp, #4]
 801aed8:	18f4      	adds	r4, r6, r3
 801aeda:	4622      	mov	r2, r4
 801aedc:	4616      	mov	r6, r2
 801aede:	3201      	adds	r2, #1
 801aee0:	7830      	ldrb	r0, [r6, #0]
 801aee2:	f7ff ff93 	bl	801ae0c <__hexdig_fun>
 801aee6:	2800      	cmp	r0, #0
 801aee8:	d1f8      	bne.n	801aedc <__gethex+0xa6>
 801aeea:	b10c      	cbz	r4, 801aef0 <__gethex+0xba>
 801aeec:	1ba4      	subs	r4, r4, r6
 801aeee:	00a4      	lsls	r4, r4, #2
 801aef0:	7833      	ldrb	r3, [r6, #0]
 801aef2:	2b50      	cmp	r3, #80	; 0x50
 801aef4:	d001      	beq.n	801aefa <__gethex+0xc4>
 801aef6:	2b70      	cmp	r3, #112	; 0x70
 801aef8:	d140      	bne.n	801af7c <__gethex+0x146>
 801aefa:	7873      	ldrb	r3, [r6, #1]
 801aefc:	2b2b      	cmp	r3, #43	; 0x2b
 801aefe:	d031      	beq.n	801af64 <__gethex+0x12e>
 801af00:	2b2d      	cmp	r3, #45	; 0x2d
 801af02:	d033      	beq.n	801af6c <__gethex+0x136>
 801af04:	1c71      	adds	r1, r6, #1
 801af06:	f04f 0900 	mov.w	r9, #0
 801af0a:	7808      	ldrb	r0, [r1, #0]
 801af0c:	f7ff ff7e 	bl	801ae0c <__hexdig_fun>
 801af10:	1e43      	subs	r3, r0, #1
 801af12:	b2db      	uxtb	r3, r3
 801af14:	2b18      	cmp	r3, #24
 801af16:	d831      	bhi.n	801af7c <__gethex+0x146>
 801af18:	f1a0 0210 	sub.w	r2, r0, #16
 801af1c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801af20:	f7ff ff74 	bl	801ae0c <__hexdig_fun>
 801af24:	1e43      	subs	r3, r0, #1
 801af26:	b2db      	uxtb	r3, r3
 801af28:	2b18      	cmp	r3, #24
 801af2a:	d922      	bls.n	801af72 <__gethex+0x13c>
 801af2c:	f1b9 0f00 	cmp.w	r9, #0
 801af30:	d000      	beq.n	801af34 <__gethex+0xfe>
 801af32:	4252      	negs	r2, r2
 801af34:	4414      	add	r4, r2
 801af36:	f8ca 1000 	str.w	r1, [sl]
 801af3a:	b30d      	cbz	r5, 801af80 <__gethex+0x14a>
 801af3c:	f1bb 0f00 	cmp.w	fp, #0
 801af40:	bf0c      	ite	eq
 801af42:	2706      	moveq	r7, #6
 801af44:	2700      	movne	r7, #0
 801af46:	4638      	mov	r0, r7
 801af48:	b00b      	add	sp, #44	; 0x2c
 801af4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af4e:	f10b 0b01 	add.w	fp, fp, #1
 801af52:	e78a      	b.n	801ae6a <__gethex+0x34>
 801af54:	2500      	movs	r5, #0
 801af56:	462c      	mov	r4, r5
 801af58:	e7ae      	b.n	801aeb8 <__gethex+0x82>
 801af5a:	463e      	mov	r6, r7
 801af5c:	2501      	movs	r5, #1
 801af5e:	e7c7      	b.n	801aef0 <__gethex+0xba>
 801af60:	4604      	mov	r4, r0
 801af62:	e7fb      	b.n	801af5c <__gethex+0x126>
 801af64:	f04f 0900 	mov.w	r9, #0
 801af68:	1cb1      	adds	r1, r6, #2
 801af6a:	e7ce      	b.n	801af0a <__gethex+0xd4>
 801af6c:	f04f 0901 	mov.w	r9, #1
 801af70:	e7fa      	b.n	801af68 <__gethex+0x132>
 801af72:	230a      	movs	r3, #10
 801af74:	fb03 0202 	mla	r2, r3, r2, r0
 801af78:	3a10      	subs	r2, #16
 801af7a:	e7cf      	b.n	801af1c <__gethex+0xe6>
 801af7c:	4631      	mov	r1, r6
 801af7e:	e7da      	b.n	801af36 <__gethex+0x100>
 801af80:	1bf3      	subs	r3, r6, r7
 801af82:	3b01      	subs	r3, #1
 801af84:	4629      	mov	r1, r5
 801af86:	2b07      	cmp	r3, #7
 801af88:	dc49      	bgt.n	801b01e <__gethex+0x1e8>
 801af8a:	9802      	ldr	r0, [sp, #8]
 801af8c:	f000 faa4 	bl	801b4d8 <_Balloc>
 801af90:	9b01      	ldr	r3, [sp, #4]
 801af92:	f100 0914 	add.w	r9, r0, #20
 801af96:	f04f 0b00 	mov.w	fp, #0
 801af9a:	f1c3 0301 	rsb	r3, r3, #1
 801af9e:	4605      	mov	r5, r0
 801afa0:	f8cd 9010 	str.w	r9, [sp, #16]
 801afa4:	46da      	mov	sl, fp
 801afa6:	9308      	str	r3, [sp, #32]
 801afa8:	42b7      	cmp	r7, r6
 801afaa:	d33b      	bcc.n	801b024 <__gethex+0x1ee>
 801afac:	9804      	ldr	r0, [sp, #16]
 801afae:	f840 ab04 	str.w	sl, [r0], #4
 801afb2:	eba0 0009 	sub.w	r0, r0, r9
 801afb6:	1080      	asrs	r0, r0, #2
 801afb8:	6128      	str	r0, [r5, #16]
 801afba:	0147      	lsls	r7, r0, #5
 801afbc:	4650      	mov	r0, sl
 801afbe:	f000 fb4f 	bl	801b660 <__hi0bits>
 801afc2:	f8d8 6000 	ldr.w	r6, [r8]
 801afc6:	1a3f      	subs	r7, r7, r0
 801afc8:	42b7      	cmp	r7, r6
 801afca:	dd64      	ble.n	801b096 <__gethex+0x260>
 801afcc:	1bbf      	subs	r7, r7, r6
 801afce:	4639      	mov	r1, r7
 801afd0:	4628      	mov	r0, r5
 801afd2:	f000 fe5f 	bl	801bc94 <__any_on>
 801afd6:	4682      	mov	sl, r0
 801afd8:	b178      	cbz	r0, 801affa <__gethex+0x1c4>
 801afda:	1e7b      	subs	r3, r7, #1
 801afdc:	1159      	asrs	r1, r3, #5
 801afde:	f003 021f 	and.w	r2, r3, #31
 801afe2:	f04f 0a01 	mov.w	sl, #1
 801afe6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801afea:	fa0a f202 	lsl.w	r2, sl, r2
 801afee:	420a      	tst	r2, r1
 801aff0:	d003      	beq.n	801affa <__gethex+0x1c4>
 801aff2:	4553      	cmp	r3, sl
 801aff4:	dc46      	bgt.n	801b084 <__gethex+0x24e>
 801aff6:	f04f 0a02 	mov.w	sl, #2
 801affa:	4639      	mov	r1, r7
 801affc:	4628      	mov	r0, r5
 801affe:	f7ff fecb 	bl	801ad98 <rshift>
 801b002:	443c      	add	r4, r7
 801b004:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b008:	42a3      	cmp	r3, r4
 801b00a:	da52      	bge.n	801b0b2 <__gethex+0x27c>
 801b00c:	4629      	mov	r1, r5
 801b00e:	9802      	ldr	r0, [sp, #8]
 801b010:	f000 fa96 	bl	801b540 <_Bfree>
 801b014:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b016:	2300      	movs	r3, #0
 801b018:	6013      	str	r3, [r2, #0]
 801b01a:	27a3      	movs	r7, #163	; 0xa3
 801b01c:	e793      	b.n	801af46 <__gethex+0x110>
 801b01e:	3101      	adds	r1, #1
 801b020:	105b      	asrs	r3, r3, #1
 801b022:	e7b0      	b.n	801af86 <__gethex+0x150>
 801b024:	1e73      	subs	r3, r6, #1
 801b026:	9305      	str	r3, [sp, #20]
 801b028:	9a07      	ldr	r2, [sp, #28]
 801b02a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b02e:	4293      	cmp	r3, r2
 801b030:	d018      	beq.n	801b064 <__gethex+0x22e>
 801b032:	f1bb 0f20 	cmp.w	fp, #32
 801b036:	d107      	bne.n	801b048 <__gethex+0x212>
 801b038:	9b04      	ldr	r3, [sp, #16]
 801b03a:	f8c3 a000 	str.w	sl, [r3]
 801b03e:	3304      	adds	r3, #4
 801b040:	f04f 0a00 	mov.w	sl, #0
 801b044:	9304      	str	r3, [sp, #16]
 801b046:	46d3      	mov	fp, sl
 801b048:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801b04c:	f7ff fede 	bl	801ae0c <__hexdig_fun>
 801b050:	f000 000f 	and.w	r0, r0, #15
 801b054:	fa00 f00b 	lsl.w	r0, r0, fp
 801b058:	ea4a 0a00 	orr.w	sl, sl, r0
 801b05c:	f10b 0b04 	add.w	fp, fp, #4
 801b060:	9b05      	ldr	r3, [sp, #20]
 801b062:	e00d      	b.n	801b080 <__gethex+0x24a>
 801b064:	9b05      	ldr	r3, [sp, #20]
 801b066:	9a08      	ldr	r2, [sp, #32]
 801b068:	4413      	add	r3, r2
 801b06a:	42bb      	cmp	r3, r7
 801b06c:	d3e1      	bcc.n	801b032 <__gethex+0x1fc>
 801b06e:	4618      	mov	r0, r3
 801b070:	9a01      	ldr	r2, [sp, #4]
 801b072:	9903      	ldr	r1, [sp, #12]
 801b074:	9309      	str	r3, [sp, #36]	; 0x24
 801b076:	f7fe fd2f 	bl	8019ad8 <strncmp>
 801b07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b07c:	2800      	cmp	r0, #0
 801b07e:	d1d8      	bne.n	801b032 <__gethex+0x1fc>
 801b080:	461e      	mov	r6, r3
 801b082:	e791      	b.n	801afa8 <__gethex+0x172>
 801b084:	1eb9      	subs	r1, r7, #2
 801b086:	4628      	mov	r0, r5
 801b088:	f000 fe04 	bl	801bc94 <__any_on>
 801b08c:	2800      	cmp	r0, #0
 801b08e:	d0b2      	beq.n	801aff6 <__gethex+0x1c0>
 801b090:	f04f 0a03 	mov.w	sl, #3
 801b094:	e7b1      	b.n	801affa <__gethex+0x1c4>
 801b096:	da09      	bge.n	801b0ac <__gethex+0x276>
 801b098:	1bf7      	subs	r7, r6, r7
 801b09a:	4629      	mov	r1, r5
 801b09c:	463a      	mov	r2, r7
 801b09e:	9802      	ldr	r0, [sp, #8]
 801b0a0:	f000 fc1a 	bl	801b8d8 <__lshift>
 801b0a4:	1be4      	subs	r4, r4, r7
 801b0a6:	4605      	mov	r5, r0
 801b0a8:	f100 0914 	add.w	r9, r0, #20
 801b0ac:	f04f 0a00 	mov.w	sl, #0
 801b0b0:	e7a8      	b.n	801b004 <__gethex+0x1ce>
 801b0b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801b0b6:	42a0      	cmp	r0, r4
 801b0b8:	dd6a      	ble.n	801b190 <__gethex+0x35a>
 801b0ba:	1b04      	subs	r4, r0, r4
 801b0bc:	42a6      	cmp	r6, r4
 801b0be:	dc2e      	bgt.n	801b11e <__gethex+0x2e8>
 801b0c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b0c4:	2b02      	cmp	r3, #2
 801b0c6:	d022      	beq.n	801b10e <__gethex+0x2d8>
 801b0c8:	2b03      	cmp	r3, #3
 801b0ca:	d024      	beq.n	801b116 <__gethex+0x2e0>
 801b0cc:	2b01      	cmp	r3, #1
 801b0ce:	d115      	bne.n	801b0fc <__gethex+0x2c6>
 801b0d0:	42a6      	cmp	r6, r4
 801b0d2:	d113      	bne.n	801b0fc <__gethex+0x2c6>
 801b0d4:	2e01      	cmp	r6, #1
 801b0d6:	dc0b      	bgt.n	801b0f0 <__gethex+0x2ba>
 801b0d8:	9a06      	ldr	r2, [sp, #24]
 801b0da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b0de:	6013      	str	r3, [r2, #0]
 801b0e0:	2301      	movs	r3, #1
 801b0e2:	612b      	str	r3, [r5, #16]
 801b0e4:	f8c9 3000 	str.w	r3, [r9]
 801b0e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b0ea:	2762      	movs	r7, #98	; 0x62
 801b0ec:	601d      	str	r5, [r3, #0]
 801b0ee:	e72a      	b.n	801af46 <__gethex+0x110>
 801b0f0:	1e71      	subs	r1, r6, #1
 801b0f2:	4628      	mov	r0, r5
 801b0f4:	f000 fdce 	bl	801bc94 <__any_on>
 801b0f8:	2800      	cmp	r0, #0
 801b0fa:	d1ed      	bne.n	801b0d8 <__gethex+0x2a2>
 801b0fc:	4629      	mov	r1, r5
 801b0fe:	9802      	ldr	r0, [sp, #8]
 801b100:	f000 fa1e 	bl	801b540 <_Bfree>
 801b104:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801b106:	2300      	movs	r3, #0
 801b108:	6013      	str	r3, [r2, #0]
 801b10a:	2750      	movs	r7, #80	; 0x50
 801b10c:	e71b      	b.n	801af46 <__gethex+0x110>
 801b10e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b110:	2b00      	cmp	r3, #0
 801b112:	d0e1      	beq.n	801b0d8 <__gethex+0x2a2>
 801b114:	e7f2      	b.n	801b0fc <__gethex+0x2c6>
 801b116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b118:	2b00      	cmp	r3, #0
 801b11a:	d1dd      	bne.n	801b0d8 <__gethex+0x2a2>
 801b11c:	e7ee      	b.n	801b0fc <__gethex+0x2c6>
 801b11e:	1e67      	subs	r7, r4, #1
 801b120:	f1ba 0f00 	cmp.w	sl, #0
 801b124:	d131      	bne.n	801b18a <__gethex+0x354>
 801b126:	b127      	cbz	r7, 801b132 <__gethex+0x2fc>
 801b128:	4639      	mov	r1, r7
 801b12a:	4628      	mov	r0, r5
 801b12c:	f000 fdb2 	bl	801bc94 <__any_on>
 801b130:	4682      	mov	sl, r0
 801b132:	117a      	asrs	r2, r7, #5
 801b134:	2301      	movs	r3, #1
 801b136:	f007 071f 	and.w	r7, r7, #31
 801b13a:	fa03 f707 	lsl.w	r7, r3, r7
 801b13e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801b142:	4621      	mov	r1, r4
 801b144:	421f      	tst	r7, r3
 801b146:	4628      	mov	r0, r5
 801b148:	bf18      	it	ne
 801b14a:	f04a 0a02 	orrne.w	sl, sl, #2
 801b14e:	1b36      	subs	r6, r6, r4
 801b150:	f7ff fe22 	bl	801ad98 <rshift>
 801b154:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801b158:	2702      	movs	r7, #2
 801b15a:	f1ba 0f00 	cmp.w	sl, #0
 801b15e:	d048      	beq.n	801b1f2 <__gethex+0x3bc>
 801b160:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801b164:	2b02      	cmp	r3, #2
 801b166:	d015      	beq.n	801b194 <__gethex+0x35e>
 801b168:	2b03      	cmp	r3, #3
 801b16a:	d017      	beq.n	801b19c <__gethex+0x366>
 801b16c:	2b01      	cmp	r3, #1
 801b16e:	d109      	bne.n	801b184 <__gethex+0x34e>
 801b170:	f01a 0f02 	tst.w	sl, #2
 801b174:	d006      	beq.n	801b184 <__gethex+0x34e>
 801b176:	f8d9 3000 	ldr.w	r3, [r9]
 801b17a:	ea4a 0a03 	orr.w	sl, sl, r3
 801b17e:	f01a 0f01 	tst.w	sl, #1
 801b182:	d10e      	bne.n	801b1a2 <__gethex+0x36c>
 801b184:	f047 0710 	orr.w	r7, r7, #16
 801b188:	e033      	b.n	801b1f2 <__gethex+0x3bc>
 801b18a:	f04f 0a01 	mov.w	sl, #1
 801b18e:	e7d0      	b.n	801b132 <__gethex+0x2fc>
 801b190:	2701      	movs	r7, #1
 801b192:	e7e2      	b.n	801b15a <__gethex+0x324>
 801b194:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b196:	f1c3 0301 	rsb	r3, r3, #1
 801b19a:	9315      	str	r3, [sp, #84]	; 0x54
 801b19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d0f0      	beq.n	801b184 <__gethex+0x34e>
 801b1a2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801b1a6:	f105 0314 	add.w	r3, r5, #20
 801b1aa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801b1ae:	eb03 010a 	add.w	r1, r3, sl
 801b1b2:	f04f 0c00 	mov.w	ip, #0
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 801b1c0:	d01c      	beq.n	801b1fc <__gethex+0x3c6>
 801b1c2:	3201      	adds	r2, #1
 801b1c4:	6002      	str	r2, [r0, #0]
 801b1c6:	2f02      	cmp	r7, #2
 801b1c8:	f105 0314 	add.w	r3, r5, #20
 801b1cc:	d138      	bne.n	801b240 <__gethex+0x40a>
 801b1ce:	f8d8 2000 	ldr.w	r2, [r8]
 801b1d2:	3a01      	subs	r2, #1
 801b1d4:	42b2      	cmp	r2, r6
 801b1d6:	d10a      	bne.n	801b1ee <__gethex+0x3b8>
 801b1d8:	1171      	asrs	r1, r6, #5
 801b1da:	2201      	movs	r2, #1
 801b1dc:	f006 061f 	and.w	r6, r6, #31
 801b1e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801b1e4:	fa02 f606 	lsl.w	r6, r2, r6
 801b1e8:	421e      	tst	r6, r3
 801b1ea:	bf18      	it	ne
 801b1ec:	4617      	movne	r7, r2
 801b1ee:	f047 0720 	orr.w	r7, r7, #32
 801b1f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b1f4:	601d      	str	r5, [r3, #0]
 801b1f6:	9b06      	ldr	r3, [sp, #24]
 801b1f8:	601c      	str	r4, [r3, #0]
 801b1fa:	e6a4      	b.n	801af46 <__gethex+0x110>
 801b1fc:	4299      	cmp	r1, r3
 801b1fe:	f843 cc04 	str.w	ip, [r3, #-4]
 801b202:	d8d8      	bhi.n	801b1b6 <__gethex+0x380>
 801b204:	68ab      	ldr	r3, [r5, #8]
 801b206:	4599      	cmp	r9, r3
 801b208:	db12      	blt.n	801b230 <__gethex+0x3fa>
 801b20a:	6869      	ldr	r1, [r5, #4]
 801b20c:	9802      	ldr	r0, [sp, #8]
 801b20e:	3101      	adds	r1, #1
 801b210:	f000 f962 	bl	801b4d8 <_Balloc>
 801b214:	692a      	ldr	r2, [r5, #16]
 801b216:	3202      	adds	r2, #2
 801b218:	f105 010c 	add.w	r1, r5, #12
 801b21c:	4683      	mov	fp, r0
 801b21e:	0092      	lsls	r2, r2, #2
 801b220:	300c      	adds	r0, #12
 801b222:	f7fe f85b 	bl	80192dc <memcpy>
 801b226:	4629      	mov	r1, r5
 801b228:	9802      	ldr	r0, [sp, #8]
 801b22a:	f000 f989 	bl	801b540 <_Bfree>
 801b22e:	465d      	mov	r5, fp
 801b230:	692b      	ldr	r3, [r5, #16]
 801b232:	1c5a      	adds	r2, r3, #1
 801b234:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801b238:	612a      	str	r2, [r5, #16]
 801b23a:	2201      	movs	r2, #1
 801b23c:	615a      	str	r2, [r3, #20]
 801b23e:	e7c2      	b.n	801b1c6 <__gethex+0x390>
 801b240:	692a      	ldr	r2, [r5, #16]
 801b242:	454a      	cmp	r2, r9
 801b244:	dd0b      	ble.n	801b25e <__gethex+0x428>
 801b246:	2101      	movs	r1, #1
 801b248:	4628      	mov	r0, r5
 801b24a:	f7ff fda5 	bl	801ad98 <rshift>
 801b24e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b252:	3401      	adds	r4, #1
 801b254:	42a3      	cmp	r3, r4
 801b256:	f6ff aed9 	blt.w	801b00c <__gethex+0x1d6>
 801b25a:	2701      	movs	r7, #1
 801b25c:	e7c7      	b.n	801b1ee <__gethex+0x3b8>
 801b25e:	f016 061f 	ands.w	r6, r6, #31
 801b262:	d0fa      	beq.n	801b25a <__gethex+0x424>
 801b264:	449a      	add	sl, r3
 801b266:	f1c6 0620 	rsb	r6, r6, #32
 801b26a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801b26e:	f000 f9f7 	bl	801b660 <__hi0bits>
 801b272:	42b0      	cmp	r0, r6
 801b274:	dbe7      	blt.n	801b246 <__gethex+0x410>
 801b276:	e7f0      	b.n	801b25a <__gethex+0x424>

0801b278 <L_shift>:
 801b278:	f1c2 0208 	rsb	r2, r2, #8
 801b27c:	0092      	lsls	r2, r2, #2
 801b27e:	b570      	push	{r4, r5, r6, lr}
 801b280:	f1c2 0620 	rsb	r6, r2, #32
 801b284:	6843      	ldr	r3, [r0, #4]
 801b286:	6804      	ldr	r4, [r0, #0]
 801b288:	fa03 f506 	lsl.w	r5, r3, r6
 801b28c:	432c      	orrs	r4, r5
 801b28e:	40d3      	lsrs	r3, r2
 801b290:	6004      	str	r4, [r0, #0]
 801b292:	f840 3f04 	str.w	r3, [r0, #4]!
 801b296:	4288      	cmp	r0, r1
 801b298:	d3f4      	bcc.n	801b284 <L_shift+0xc>
 801b29a:	bd70      	pop	{r4, r5, r6, pc}

0801b29c <__match>:
 801b29c:	b530      	push	{r4, r5, lr}
 801b29e:	6803      	ldr	r3, [r0, #0]
 801b2a0:	3301      	adds	r3, #1
 801b2a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b2a6:	b914      	cbnz	r4, 801b2ae <__match+0x12>
 801b2a8:	6003      	str	r3, [r0, #0]
 801b2aa:	2001      	movs	r0, #1
 801b2ac:	bd30      	pop	{r4, r5, pc}
 801b2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b2b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801b2b6:	2d19      	cmp	r5, #25
 801b2b8:	bf98      	it	ls
 801b2ba:	3220      	addls	r2, #32
 801b2bc:	42a2      	cmp	r2, r4
 801b2be:	d0f0      	beq.n	801b2a2 <__match+0x6>
 801b2c0:	2000      	movs	r0, #0
 801b2c2:	e7f3      	b.n	801b2ac <__match+0x10>

0801b2c4 <__hexnan>:
 801b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2c8:	680b      	ldr	r3, [r1, #0]
 801b2ca:	6801      	ldr	r1, [r0, #0]
 801b2cc:	115f      	asrs	r7, r3, #5
 801b2ce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801b2d2:	f013 031f 	ands.w	r3, r3, #31
 801b2d6:	b087      	sub	sp, #28
 801b2d8:	bf18      	it	ne
 801b2da:	3704      	addne	r7, #4
 801b2dc:	2500      	movs	r5, #0
 801b2de:	1f3e      	subs	r6, r7, #4
 801b2e0:	4682      	mov	sl, r0
 801b2e2:	4690      	mov	r8, r2
 801b2e4:	9301      	str	r3, [sp, #4]
 801b2e6:	f847 5c04 	str.w	r5, [r7, #-4]
 801b2ea:	46b1      	mov	r9, r6
 801b2ec:	4634      	mov	r4, r6
 801b2ee:	9502      	str	r5, [sp, #8]
 801b2f0:	46ab      	mov	fp, r5
 801b2f2:	784a      	ldrb	r2, [r1, #1]
 801b2f4:	1c4b      	adds	r3, r1, #1
 801b2f6:	9303      	str	r3, [sp, #12]
 801b2f8:	b342      	cbz	r2, 801b34c <__hexnan+0x88>
 801b2fa:	4610      	mov	r0, r2
 801b2fc:	9105      	str	r1, [sp, #20]
 801b2fe:	9204      	str	r2, [sp, #16]
 801b300:	f7ff fd84 	bl	801ae0c <__hexdig_fun>
 801b304:	2800      	cmp	r0, #0
 801b306:	d143      	bne.n	801b390 <__hexnan+0xcc>
 801b308:	9a04      	ldr	r2, [sp, #16]
 801b30a:	9905      	ldr	r1, [sp, #20]
 801b30c:	2a20      	cmp	r2, #32
 801b30e:	d818      	bhi.n	801b342 <__hexnan+0x7e>
 801b310:	9b02      	ldr	r3, [sp, #8]
 801b312:	459b      	cmp	fp, r3
 801b314:	dd13      	ble.n	801b33e <__hexnan+0x7a>
 801b316:	454c      	cmp	r4, r9
 801b318:	d206      	bcs.n	801b328 <__hexnan+0x64>
 801b31a:	2d07      	cmp	r5, #7
 801b31c:	dc04      	bgt.n	801b328 <__hexnan+0x64>
 801b31e:	462a      	mov	r2, r5
 801b320:	4649      	mov	r1, r9
 801b322:	4620      	mov	r0, r4
 801b324:	f7ff ffa8 	bl	801b278 <L_shift>
 801b328:	4544      	cmp	r4, r8
 801b32a:	d944      	bls.n	801b3b6 <__hexnan+0xf2>
 801b32c:	2300      	movs	r3, #0
 801b32e:	f1a4 0904 	sub.w	r9, r4, #4
 801b332:	f844 3c04 	str.w	r3, [r4, #-4]
 801b336:	f8cd b008 	str.w	fp, [sp, #8]
 801b33a:	464c      	mov	r4, r9
 801b33c:	461d      	mov	r5, r3
 801b33e:	9903      	ldr	r1, [sp, #12]
 801b340:	e7d7      	b.n	801b2f2 <__hexnan+0x2e>
 801b342:	2a29      	cmp	r2, #41	; 0x29
 801b344:	d14a      	bne.n	801b3dc <__hexnan+0x118>
 801b346:	3102      	adds	r1, #2
 801b348:	f8ca 1000 	str.w	r1, [sl]
 801b34c:	f1bb 0f00 	cmp.w	fp, #0
 801b350:	d044      	beq.n	801b3dc <__hexnan+0x118>
 801b352:	454c      	cmp	r4, r9
 801b354:	d206      	bcs.n	801b364 <__hexnan+0xa0>
 801b356:	2d07      	cmp	r5, #7
 801b358:	dc04      	bgt.n	801b364 <__hexnan+0xa0>
 801b35a:	462a      	mov	r2, r5
 801b35c:	4649      	mov	r1, r9
 801b35e:	4620      	mov	r0, r4
 801b360:	f7ff ff8a 	bl	801b278 <L_shift>
 801b364:	4544      	cmp	r4, r8
 801b366:	d928      	bls.n	801b3ba <__hexnan+0xf6>
 801b368:	4643      	mov	r3, r8
 801b36a:	f854 2b04 	ldr.w	r2, [r4], #4
 801b36e:	f843 2b04 	str.w	r2, [r3], #4
 801b372:	42a6      	cmp	r6, r4
 801b374:	d2f9      	bcs.n	801b36a <__hexnan+0xa6>
 801b376:	2200      	movs	r2, #0
 801b378:	f843 2b04 	str.w	r2, [r3], #4
 801b37c:	429e      	cmp	r6, r3
 801b37e:	d2fb      	bcs.n	801b378 <__hexnan+0xb4>
 801b380:	6833      	ldr	r3, [r6, #0]
 801b382:	b91b      	cbnz	r3, 801b38c <__hexnan+0xc8>
 801b384:	4546      	cmp	r6, r8
 801b386:	d127      	bne.n	801b3d8 <__hexnan+0x114>
 801b388:	2301      	movs	r3, #1
 801b38a:	6033      	str	r3, [r6, #0]
 801b38c:	2005      	movs	r0, #5
 801b38e:	e026      	b.n	801b3de <__hexnan+0x11a>
 801b390:	3501      	adds	r5, #1
 801b392:	2d08      	cmp	r5, #8
 801b394:	f10b 0b01 	add.w	fp, fp, #1
 801b398:	dd06      	ble.n	801b3a8 <__hexnan+0xe4>
 801b39a:	4544      	cmp	r4, r8
 801b39c:	d9cf      	bls.n	801b33e <__hexnan+0x7a>
 801b39e:	2300      	movs	r3, #0
 801b3a0:	f844 3c04 	str.w	r3, [r4, #-4]
 801b3a4:	2501      	movs	r5, #1
 801b3a6:	3c04      	subs	r4, #4
 801b3a8:	6822      	ldr	r2, [r4, #0]
 801b3aa:	f000 000f 	and.w	r0, r0, #15
 801b3ae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801b3b2:	6020      	str	r0, [r4, #0]
 801b3b4:	e7c3      	b.n	801b33e <__hexnan+0x7a>
 801b3b6:	2508      	movs	r5, #8
 801b3b8:	e7c1      	b.n	801b33e <__hexnan+0x7a>
 801b3ba:	9b01      	ldr	r3, [sp, #4]
 801b3bc:	2b00      	cmp	r3, #0
 801b3be:	d0df      	beq.n	801b380 <__hexnan+0xbc>
 801b3c0:	f04f 32ff 	mov.w	r2, #4294967295
 801b3c4:	f1c3 0320 	rsb	r3, r3, #32
 801b3c8:	fa22 f303 	lsr.w	r3, r2, r3
 801b3cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801b3d0:	401a      	ands	r2, r3
 801b3d2:	f847 2c04 	str.w	r2, [r7, #-4]
 801b3d6:	e7d3      	b.n	801b380 <__hexnan+0xbc>
 801b3d8:	3e04      	subs	r6, #4
 801b3da:	e7d1      	b.n	801b380 <__hexnan+0xbc>
 801b3dc:	2004      	movs	r0, #4
 801b3de:	b007      	add	sp, #28
 801b3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b3e4 <__localeconv_l>:
 801b3e4:	30f0      	adds	r0, #240	; 0xf0
 801b3e6:	4770      	bx	lr

0801b3e8 <__swhatbuf_r>:
 801b3e8:	b570      	push	{r4, r5, r6, lr}
 801b3ea:	460e      	mov	r6, r1
 801b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3f0:	2900      	cmp	r1, #0
 801b3f2:	b096      	sub	sp, #88	; 0x58
 801b3f4:	4614      	mov	r4, r2
 801b3f6:	461d      	mov	r5, r3
 801b3f8:	da07      	bge.n	801b40a <__swhatbuf_r+0x22>
 801b3fa:	2300      	movs	r3, #0
 801b3fc:	602b      	str	r3, [r5, #0]
 801b3fe:	89b3      	ldrh	r3, [r6, #12]
 801b400:	061a      	lsls	r2, r3, #24
 801b402:	d410      	bmi.n	801b426 <__swhatbuf_r+0x3e>
 801b404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b408:	e00e      	b.n	801b428 <__swhatbuf_r+0x40>
 801b40a:	466a      	mov	r2, sp
 801b40c:	f000 fe4e 	bl	801c0ac <_fstat_r>
 801b410:	2800      	cmp	r0, #0
 801b412:	dbf2      	blt.n	801b3fa <__swhatbuf_r+0x12>
 801b414:	9a01      	ldr	r2, [sp, #4]
 801b416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b41a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b41e:	425a      	negs	r2, r3
 801b420:	415a      	adcs	r2, r3
 801b422:	602a      	str	r2, [r5, #0]
 801b424:	e7ee      	b.n	801b404 <__swhatbuf_r+0x1c>
 801b426:	2340      	movs	r3, #64	; 0x40
 801b428:	2000      	movs	r0, #0
 801b42a:	6023      	str	r3, [r4, #0]
 801b42c:	b016      	add	sp, #88	; 0x58
 801b42e:	bd70      	pop	{r4, r5, r6, pc}

0801b430 <__smakebuf_r>:
 801b430:	898b      	ldrh	r3, [r1, #12]
 801b432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b434:	079d      	lsls	r5, r3, #30
 801b436:	4606      	mov	r6, r0
 801b438:	460c      	mov	r4, r1
 801b43a:	d507      	bpl.n	801b44c <__smakebuf_r+0x1c>
 801b43c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b440:	6023      	str	r3, [r4, #0]
 801b442:	6123      	str	r3, [r4, #16]
 801b444:	2301      	movs	r3, #1
 801b446:	6163      	str	r3, [r4, #20]
 801b448:	b002      	add	sp, #8
 801b44a:	bd70      	pop	{r4, r5, r6, pc}
 801b44c:	ab01      	add	r3, sp, #4
 801b44e:	466a      	mov	r2, sp
 801b450:	f7ff ffca 	bl	801b3e8 <__swhatbuf_r>
 801b454:	9900      	ldr	r1, [sp, #0]
 801b456:	4605      	mov	r5, r0
 801b458:	4630      	mov	r0, r6
 801b45a:	f7fd ffc7 	bl	80193ec <_malloc_r>
 801b45e:	b948      	cbnz	r0, 801b474 <__smakebuf_r+0x44>
 801b460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b464:	059a      	lsls	r2, r3, #22
 801b466:	d4ef      	bmi.n	801b448 <__smakebuf_r+0x18>
 801b468:	f023 0303 	bic.w	r3, r3, #3
 801b46c:	f043 0302 	orr.w	r3, r3, #2
 801b470:	81a3      	strh	r3, [r4, #12]
 801b472:	e7e3      	b.n	801b43c <__smakebuf_r+0xc>
 801b474:	4b0d      	ldr	r3, [pc, #52]	; (801b4ac <__smakebuf_r+0x7c>)
 801b476:	62b3      	str	r3, [r6, #40]	; 0x28
 801b478:	89a3      	ldrh	r3, [r4, #12]
 801b47a:	6020      	str	r0, [r4, #0]
 801b47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b480:	81a3      	strh	r3, [r4, #12]
 801b482:	9b00      	ldr	r3, [sp, #0]
 801b484:	6163      	str	r3, [r4, #20]
 801b486:	9b01      	ldr	r3, [sp, #4]
 801b488:	6120      	str	r0, [r4, #16]
 801b48a:	b15b      	cbz	r3, 801b4a4 <__smakebuf_r+0x74>
 801b48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b490:	4630      	mov	r0, r6
 801b492:	f000 fe1d 	bl	801c0d0 <_isatty_r>
 801b496:	b128      	cbz	r0, 801b4a4 <__smakebuf_r+0x74>
 801b498:	89a3      	ldrh	r3, [r4, #12]
 801b49a:	f023 0303 	bic.w	r3, r3, #3
 801b49e:	f043 0301 	orr.w	r3, r3, #1
 801b4a2:	81a3      	strh	r3, [r4, #12]
 801b4a4:	89a3      	ldrh	r3, [r4, #12]
 801b4a6:	431d      	orrs	r5, r3
 801b4a8:	81a5      	strh	r5, [r4, #12]
 801b4aa:	e7cd      	b.n	801b448 <__smakebuf_r+0x18>
 801b4ac:	0801ac4d 	.word	0x0801ac4d

0801b4b0 <__ascii_mbtowc>:
 801b4b0:	b082      	sub	sp, #8
 801b4b2:	b901      	cbnz	r1, 801b4b6 <__ascii_mbtowc+0x6>
 801b4b4:	a901      	add	r1, sp, #4
 801b4b6:	b142      	cbz	r2, 801b4ca <__ascii_mbtowc+0x1a>
 801b4b8:	b14b      	cbz	r3, 801b4ce <__ascii_mbtowc+0x1e>
 801b4ba:	7813      	ldrb	r3, [r2, #0]
 801b4bc:	600b      	str	r3, [r1, #0]
 801b4be:	7812      	ldrb	r2, [r2, #0]
 801b4c0:	1c10      	adds	r0, r2, #0
 801b4c2:	bf18      	it	ne
 801b4c4:	2001      	movne	r0, #1
 801b4c6:	b002      	add	sp, #8
 801b4c8:	4770      	bx	lr
 801b4ca:	4610      	mov	r0, r2
 801b4cc:	e7fb      	b.n	801b4c6 <__ascii_mbtowc+0x16>
 801b4ce:	f06f 0001 	mvn.w	r0, #1
 801b4d2:	e7f8      	b.n	801b4c6 <__ascii_mbtowc+0x16>

0801b4d4 <__malloc_lock>:
 801b4d4:	4770      	bx	lr

0801b4d6 <__malloc_unlock>:
 801b4d6:	4770      	bx	lr

0801b4d8 <_Balloc>:
 801b4d8:	b570      	push	{r4, r5, r6, lr}
 801b4da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b4dc:	4604      	mov	r4, r0
 801b4de:	460e      	mov	r6, r1
 801b4e0:	b93d      	cbnz	r5, 801b4f2 <_Balloc+0x1a>
 801b4e2:	2010      	movs	r0, #16
 801b4e4:	f7fd feea 	bl	80192bc <malloc>
 801b4e8:	6260      	str	r0, [r4, #36]	; 0x24
 801b4ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b4ee:	6005      	str	r5, [r0, #0]
 801b4f0:	60c5      	str	r5, [r0, #12]
 801b4f2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801b4f4:	68eb      	ldr	r3, [r5, #12]
 801b4f6:	b183      	cbz	r3, 801b51a <_Balloc+0x42>
 801b4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b4fa:	68db      	ldr	r3, [r3, #12]
 801b4fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801b500:	b9b8      	cbnz	r0, 801b532 <_Balloc+0x5a>
 801b502:	2101      	movs	r1, #1
 801b504:	fa01 f506 	lsl.w	r5, r1, r6
 801b508:	1d6a      	adds	r2, r5, #5
 801b50a:	0092      	lsls	r2, r2, #2
 801b50c:	4620      	mov	r0, r4
 801b50e:	f7fd ff11 	bl	8019334 <_calloc_r>
 801b512:	b160      	cbz	r0, 801b52e <_Balloc+0x56>
 801b514:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801b518:	e00e      	b.n	801b538 <_Balloc+0x60>
 801b51a:	2221      	movs	r2, #33	; 0x21
 801b51c:	2104      	movs	r1, #4
 801b51e:	4620      	mov	r0, r4
 801b520:	f7fd ff08 	bl	8019334 <_calloc_r>
 801b524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b526:	60e8      	str	r0, [r5, #12]
 801b528:	68db      	ldr	r3, [r3, #12]
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d1e4      	bne.n	801b4f8 <_Balloc+0x20>
 801b52e:	2000      	movs	r0, #0
 801b530:	bd70      	pop	{r4, r5, r6, pc}
 801b532:	6802      	ldr	r2, [r0, #0]
 801b534:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801b538:	2300      	movs	r3, #0
 801b53a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b53e:	e7f7      	b.n	801b530 <_Balloc+0x58>

0801b540 <_Bfree>:
 801b540:	b570      	push	{r4, r5, r6, lr}
 801b542:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801b544:	4606      	mov	r6, r0
 801b546:	460d      	mov	r5, r1
 801b548:	b93c      	cbnz	r4, 801b55a <_Bfree+0x1a>
 801b54a:	2010      	movs	r0, #16
 801b54c:	f7fd feb6 	bl	80192bc <malloc>
 801b550:	6270      	str	r0, [r6, #36]	; 0x24
 801b552:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b556:	6004      	str	r4, [r0, #0]
 801b558:	60c4      	str	r4, [r0, #12]
 801b55a:	b13d      	cbz	r5, 801b56c <_Bfree+0x2c>
 801b55c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b55e:	686a      	ldr	r2, [r5, #4]
 801b560:	68db      	ldr	r3, [r3, #12]
 801b562:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b566:	6029      	str	r1, [r5, #0]
 801b568:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801b56c:	bd70      	pop	{r4, r5, r6, pc}

0801b56e <__multadd>:
 801b56e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b572:	690d      	ldr	r5, [r1, #16]
 801b574:	461f      	mov	r7, r3
 801b576:	4606      	mov	r6, r0
 801b578:	460c      	mov	r4, r1
 801b57a:	f101 0c14 	add.w	ip, r1, #20
 801b57e:	2300      	movs	r3, #0
 801b580:	f8dc 0000 	ldr.w	r0, [ip]
 801b584:	b281      	uxth	r1, r0
 801b586:	fb02 7101 	mla	r1, r2, r1, r7
 801b58a:	0c0f      	lsrs	r7, r1, #16
 801b58c:	0c00      	lsrs	r0, r0, #16
 801b58e:	fb02 7000 	mla	r0, r2, r0, r7
 801b592:	b289      	uxth	r1, r1
 801b594:	3301      	adds	r3, #1
 801b596:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801b59a:	429d      	cmp	r5, r3
 801b59c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801b5a0:	f84c 1b04 	str.w	r1, [ip], #4
 801b5a4:	dcec      	bgt.n	801b580 <__multadd+0x12>
 801b5a6:	b1d7      	cbz	r7, 801b5de <__multadd+0x70>
 801b5a8:	68a3      	ldr	r3, [r4, #8]
 801b5aa:	42ab      	cmp	r3, r5
 801b5ac:	dc12      	bgt.n	801b5d4 <__multadd+0x66>
 801b5ae:	6861      	ldr	r1, [r4, #4]
 801b5b0:	4630      	mov	r0, r6
 801b5b2:	3101      	adds	r1, #1
 801b5b4:	f7ff ff90 	bl	801b4d8 <_Balloc>
 801b5b8:	6922      	ldr	r2, [r4, #16]
 801b5ba:	3202      	adds	r2, #2
 801b5bc:	f104 010c 	add.w	r1, r4, #12
 801b5c0:	4680      	mov	r8, r0
 801b5c2:	0092      	lsls	r2, r2, #2
 801b5c4:	300c      	adds	r0, #12
 801b5c6:	f7fd fe89 	bl	80192dc <memcpy>
 801b5ca:	4621      	mov	r1, r4
 801b5cc:	4630      	mov	r0, r6
 801b5ce:	f7ff ffb7 	bl	801b540 <_Bfree>
 801b5d2:	4644      	mov	r4, r8
 801b5d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b5d8:	3501      	adds	r5, #1
 801b5da:	615f      	str	r7, [r3, #20]
 801b5dc:	6125      	str	r5, [r4, #16]
 801b5de:	4620      	mov	r0, r4
 801b5e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801b5e4 <__s2b>:
 801b5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b5e8:	460c      	mov	r4, r1
 801b5ea:	4615      	mov	r5, r2
 801b5ec:	461f      	mov	r7, r3
 801b5ee:	2209      	movs	r2, #9
 801b5f0:	3308      	adds	r3, #8
 801b5f2:	4606      	mov	r6, r0
 801b5f4:	fb93 f3f2 	sdiv	r3, r3, r2
 801b5f8:	2100      	movs	r1, #0
 801b5fa:	2201      	movs	r2, #1
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	db20      	blt.n	801b642 <__s2b+0x5e>
 801b600:	4630      	mov	r0, r6
 801b602:	f7ff ff69 	bl	801b4d8 <_Balloc>
 801b606:	9b08      	ldr	r3, [sp, #32]
 801b608:	6143      	str	r3, [r0, #20]
 801b60a:	2d09      	cmp	r5, #9
 801b60c:	f04f 0301 	mov.w	r3, #1
 801b610:	6103      	str	r3, [r0, #16]
 801b612:	dd19      	ble.n	801b648 <__s2b+0x64>
 801b614:	f104 0809 	add.w	r8, r4, #9
 801b618:	46c1      	mov	r9, r8
 801b61a:	442c      	add	r4, r5
 801b61c:	f819 3b01 	ldrb.w	r3, [r9], #1
 801b620:	4601      	mov	r1, r0
 801b622:	3b30      	subs	r3, #48	; 0x30
 801b624:	220a      	movs	r2, #10
 801b626:	4630      	mov	r0, r6
 801b628:	f7ff ffa1 	bl	801b56e <__multadd>
 801b62c:	45a1      	cmp	r9, r4
 801b62e:	d1f5      	bne.n	801b61c <__s2b+0x38>
 801b630:	eb08 0405 	add.w	r4, r8, r5
 801b634:	3c08      	subs	r4, #8
 801b636:	1b2d      	subs	r5, r5, r4
 801b638:	1963      	adds	r3, r4, r5
 801b63a:	42bb      	cmp	r3, r7
 801b63c:	db07      	blt.n	801b64e <__s2b+0x6a>
 801b63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b642:	0052      	lsls	r2, r2, #1
 801b644:	3101      	adds	r1, #1
 801b646:	e7d9      	b.n	801b5fc <__s2b+0x18>
 801b648:	340a      	adds	r4, #10
 801b64a:	2509      	movs	r5, #9
 801b64c:	e7f3      	b.n	801b636 <__s2b+0x52>
 801b64e:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b652:	4601      	mov	r1, r0
 801b654:	3b30      	subs	r3, #48	; 0x30
 801b656:	220a      	movs	r2, #10
 801b658:	4630      	mov	r0, r6
 801b65a:	f7ff ff88 	bl	801b56e <__multadd>
 801b65e:	e7eb      	b.n	801b638 <__s2b+0x54>

0801b660 <__hi0bits>:
 801b660:	0c02      	lsrs	r2, r0, #16
 801b662:	0412      	lsls	r2, r2, #16
 801b664:	4603      	mov	r3, r0
 801b666:	b9b2      	cbnz	r2, 801b696 <__hi0bits+0x36>
 801b668:	0403      	lsls	r3, r0, #16
 801b66a:	2010      	movs	r0, #16
 801b66c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b670:	bf04      	itt	eq
 801b672:	021b      	lsleq	r3, r3, #8
 801b674:	3008      	addeq	r0, #8
 801b676:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b67a:	bf04      	itt	eq
 801b67c:	011b      	lsleq	r3, r3, #4
 801b67e:	3004      	addeq	r0, #4
 801b680:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b684:	bf04      	itt	eq
 801b686:	009b      	lsleq	r3, r3, #2
 801b688:	3002      	addeq	r0, #2
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	db06      	blt.n	801b69c <__hi0bits+0x3c>
 801b68e:	005b      	lsls	r3, r3, #1
 801b690:	d503      	bpl.n	801b69a <__hi0bits+0x3a>
 801b692:	3001      	adds	r0, #1
 801b694:	4770      	bx	lr
 801b696:	2000      	movs	r0, #0
 801b698:	e7e8      	b.n	801b66c <__hi0bits+0xc>
 801b69a:	2020      	movs	r0, #32
 801b69c:	4770      	bx	lr

0801b69e <__lo0bits>:
 801b69e:	6803      	ldr	r3, [r0, #0]
 801b6a0:	f013 0207 	ands.w	r2, r3, #7
 801b6a4:	4601      	mov	r1, r0
 801b6a6:	d00b      	beq.n	801b6c0 <__lo0bits+0x22>
 801b6a8:	07da      	lsls	r2, r3, #31
 801b6aa:	d423      	bmi.n	801b6f4 <__lo0bits+0x56>
 801b6ac:	0798      	lsls	r0, r3, #30
 801b6ae:	bf49      	itett	mi
 801b6b0:	085b      	lsrmi	r3, r3, #1
 801b6b2:	089b      	lsrpl	r3, r3, #2
 801b6b4:	2001      	movmi	r0, #1
 801b6b6:	600b      	strmi	r3, [r1, #0]
 801b6b8:	bf5c      	itt	pl
 801b6ba:	600b      	strpl	r3, [r1, #0]
 801b6bc:	2002      	movpl	r0, #2
 801b6be:	4770      	bx	lr
 801b6c0:	b298      	uxth	r0, r3
 801b6c2:	b9a8      	cbnz	r0, 801b6f0 <__lo0bits+0x52>
 801b6c4:	0c1b      	lsrs	r3, r3, #16
 801b6c6:	2010      	movs	r0, #16
 801b6c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 801b6cc:	bf04      	itt	eq
 801b6ce:	0a1b      	lsreq	r3, r3, #8
 801b6d0:	3008      	addeq	r0, #8
 801b6d2:	071a      	lsls	r2, r3, #28
 801b6d4:	bf04      	itt	eq
 801b6d6:	091b      	lsreq	r3, r3, #4
 801b6d8:	3004      	addeq	r0, #4
 801b6da:	079a      	lsls	r2, r3, #30
 801b6dc:	bf04      	itt	eq
 801b6de:	089b      	lsreq	r3, r3, #2
 801b6e0:	3002      	addeq	r0, #2
 801b6e2:	07da      	lsls	r2, r3, #31
 801b6e4:	d402      	bmi.n	801b6ec <__lo0bits+0x4e>
 801b6e6:	085b      	lsrs	r3, r3, #1
 801b6e8:	d006      	beq.n	801b6f8 <__lo0bits+0x5a>
 801b6ea:	3001      	adds	r0, #1
 801b6ec:	600b      	str	r3, [r1, #0]
 801b6ee:	4770      	bx	lr
 801b6f0:	4610      	mov	r0, r2
 801b6f2:	e7e9      	b.n	801b6c8 <__lo0bits+0x2a>
 801b6f4:	2000      	movs	r0, #0
 801b6f6:	4770      	bx	lr
 801b6f8:	2020      	movs	r0, #32
 801b6fa:	4770      	bx	lr

0801b6fc <__i2b>:
 801b6fc:	b510      	push	{r4, lr}
 801b6fe:	460c      	mov	r4, r1
 801b700:	2101      	movs	r1, #1
 801b702:	f7ff fee9 	bl	801b4d8 <_Balloc>
 801b706:	2201      	movs	r2, #1
 801b708:	6144      	str	r4, [r0, #20]
 801b70a:	6102      	str	r2, [r0, #16]
 801b70c:	bd10      	pop	{r4, pc}

0801b70e <__multiply>:
 801b70e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b712:	4614      	mov	r4, r2
 801b714:	690a      	ldr	r2, [r1, #16]
 801b716:	6923      	ldr	r3, [r4, #16]
 801b718:	429a      	cmp	r2, r3
 801b71a:	bfb8      	it	lt
 801b71c:	460b      	movlt	r3, r1
 801b71e:	4688      	mov	r8, r1
 801b720:	bfbc      	itt	lt
 801b722:	46a0      	movlt	r8, r4
 801b724:	461c      	movlt	r4, r3
 801b726:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b72a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801b72e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801b732:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b736:	eb07 0609 	add.w	r6, r7, r9
 801b73a:	42b3      	cmp	r3, r6
 801b73c:	bfb8      	it	lt
 801b73e:	3101      	addlt	r1, #1
 801b740:	f7ff feca 	bl	801b4d8 <_Balloc>
 801b744:	f100 0514 	add.w	r5, r0, #20
 801b748:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801b74c:	462b      	mov	r3, r5
 801b74e:	2200      	movs	r2, #0
 801b750:	4573      	cmp	r3, lr
 801b752:	d316      	bcc.n	801b782 <__multiply+0x74>
 801b754:	f104 0214 	add.w	r2, r4, #20
 801b758:	f108 0114 	add.w	r1, r8, #20
 801b75c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801b760:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801b764:	9300      	str	r3, [sp, #0]
 801b766:	9b00      	ldr	r3, [sp, #0]
 801b768:	9201      	str	r2, [sp, #4]
 801b76a:	4293      	cmp	r3, r2
 801b76c:	d80c      	bhi.n	801b788 <__multiply+0x7a>
 801b76e:	2e00      	cmp	r6, #0
 801b770:	dd03      	ble.n	801b77a <__multiply+0x6c>
 801b772:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801b776:	2b00      	cmp	r3, #0
 801b778:	d05d      	beq.n	801b836 <__multiply+0x128>
 801b77a:	6106      	str	r6, [r0, #16]
 801b77c:	b003      	add	sp, #12
 801b77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b782:	f843 2b04 	str.w	r2, [r3], #4
 801b786:	e7e3      	b.n	801b750 <__multiply+0x42>
 801b788:	f8b2 b000 	ldrh.w	fp, [r2]
 801b78c:	f1bb 0f00 	cmp.w	fp, #0
 801b790:	d023      	beq.n	801b7da <__multiply+0xcc>
 801b792:	4689      	mov	r9, r1
 801b794:	46ac      	mov	ip, r5
 801b796:	f04f 0800 	mov.w	r8, #0
 801b79a:	f859 4b04 	ldr.w	r4, [r9], #4
 801b79e:	f8dc a000 	ldr.w	sl, [ip]
 801b7a2:	b2a3      	uxth	r3, r4
 801b7a4:	fa1f fa8a 	uxth.w	sl, sl
 801b7a8:	fb0b a303 	mla	r3, fp, r3, sl
 801b7ac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801b7b0:	f8dc 4000 	ldr.w	r4, [ip]
 801b7b4:	4443      	add	r3, r8
 801b7b6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801b7ba:	fb0b 840a 	mla	r4, fp, sl, r8
 801b7be:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801b7c2:	46e2      	mov	sl, ip
 801b7c4:	b29b      	uxth	r3, r3
 801b7c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801b7ca:	454f      	cmp	r7, r9
 801b7cc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801b7d0:	f84a 3b04 	str.w	r3, [sl], #4
 801b7d4:	d82b      	bhi.n	801b82e <__multiply+0x120>
 801b7d6:	f8cc 8004 	str.w	r8, [ip, #4]
 801b7da:	9b01      	ldr	r3, [sp, #4]
 801b7dc:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801b7e0:	3204      	adds	r2, #4
 801b7e2:	f1ba 0f00 	cmp.w	sl, #0
 801b7e6:	d020      	beq.n	801b82a <__multiply+0x11c>
 801b7e8:	682b      	ldr	r3, [r5, #0]
 801b7ea:	4689      	mov	r9, r1
 801b7ec:	46a8      	mov	r8, r5
 801b7ee:	f04f 0b00 	mov.w	fp, #0
 801b7f2:	f8b9 c000 	ldrh.w	ip, [r9]
 801b7f6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801b7fa:	fb0a 440c 	mla	r4, sl, ip, r4
 801b7fe:	445c      	add	r4, fp
 801b800:	46c4      	mov	ip, r8
 801b802:	b29b      	uxth	r3, r3
 801b804:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801b808:	f84c 3b04 	str.w	r3, [ip], #4
 801b80c:	f859 3b04 	ldr.w	r3, [r9], #4
 801b810:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801b814:	0c1b      	lsrs	r3, r3, #16
 801b816:	fb0a b303 	mla	r3, sl, r3, fp
 801b81a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801b81e:	454f      	cmp	r7, r9
 801b820:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801b824:	d805      	bhi.n	801b832 <__multiply+0x124>
 801b826:	f8c8 3004 	str.w	r3, [r8, #4]
 801b82a:	3504      	adds	r5, #4
 801b82c:	e79b      	b.n	801b766 <__multiply+0x58>
 801b82e:	46d4      	mov	ip, sl
 801b830:	e7b3      	b.n	801b79a <__multiply+0x8c>
 801b832:	46e0      	mov	r8, ip
 801b834:	e7dd      	b.n	801b7f2 <__multiply+0xe4>
 801b836:	3e01      	subs	r6, #1
 801b838:	e799      	b.n	801b76e <__multiply+0x60>
	...

0801b83c <__pow5mult>:
 801b83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b840:	4615      	mov	r5, r2
 801b842:	f012 0203 	ands.w	r2, r2, #3
 801b846:	4606      	mov	r6, r0
 801b848:	460f      	mov	r7, r1
 801b84a:	d007      	beq.n	801b85c <__pow5mult+0x20>
 801b84c:	3a01      	subs	r2, #1
 801b84e:	4c21      	ldr	r4, [pc, #132]	; (801b8d4 <__pow5mult+0x98>)
 801b850:	2300      	movs	r3, #0
 801b852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b856:	f7ff fe8a 	bl	801b56e <__multadd>
 801b85a:	4607      	mov	r7, r0
 801b85c:	10ad      	asrs	r5, r5, #2
 801b85e:	d035      	beq.n	801b8cc <__pow5mult+0x90>
 801b860:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801b862:	b93c      	cbnz	r4, 801b874 <__pow5mult+0x38>
 801b864:	2010      	movs	r0, #16
 801b866:	f7fd fd29 	bl	80192bc <malloc>
 801b86a:	6270      	str	r0, [r6, #36]	; 0x24
 801b86c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b870:	6004      	str	r4, [r0, #0]
 801b872:	60c4      	str	r4, [r0, #12]
 801b874:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801b878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b87c:	b94c      	cbnz	r4, 801b892 <__pow5mult+0x56>
 801b87e:	f240 2171 	movw	r1, #625	; 0x271
 801b882:	4630      	mov	r0, r6
 801b884:	f7ff ff3a 	bl	801b6fc <__i2b>
 801b888:	2300      	movs	r3, #0
 801b88a:	f8c8 0008 	str.w	r0, [r8, #8]
 801b88e:	4604      	mov	r4, r0
 801b890:	6003      	str	r3, [r0, #0]
 801b892:	f04f 0800 	mov.w	r8, #0
 801b896:	07eb      	lsls	r3, r5, #31
 801b898:	d50a      	bpl.n	801b8b0 <__pow5mult+0x74>
 801b89a:	4639      	mov	r1, r7
 801b89c:	4622      	mov	r2, r4
 801b89e:	4630      	mov	r0, r6
 801b8a0:	f7ff ff35 	bl	801b70e <__multiply>
 801b8a4:	4639      	mov	r1, r7
 801b8a6:	4681      	mov	r9, r0
 801b8a8:	4630      	mov	r0, r6
 801b8aa:	f7ff fe49 	bl	801b540 <_Bfree>
 801b8ae:	464f      	mov	r7, r9
 801b8b0:	106d      	asrs	r5, r5, #1
 801b8b2:	d00b      	beq.n	801b8cc <__pow5mult+0x90>
 801b8b4:	6820      	ldr	r0, [r4, #0]
 801b8b6:	b938      	cbnz	r0, 801b8c8 <__pow5mult+0x8c>
 801b8b8:	4622      	mov	r2, r4
 801b8ba:	4621      	mov	r1, r4
 801b8bc:	4630      	mov	r0, r6
 801b8be:	f7ff ff26 	bl	801b70e <__multiply>
 801b8c2:	6020      	str	r0, [r4, #0]
 801b8c4:	f8c0 8000 	str.w	r8, [r0]
 801b8c8:	4604      	mov	r4, r0
 801b8ca:	e7e4      	b.n	801b896 <__pow5mult+0x5a>
 801b8cc:	4638      	mov	r0, r7
 801b8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b8d2:	bf00      	nop
 801b8d4:	0803ea58 	.word	0x0803ea58

0801b8d8 <__lshift>:
 801b8d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b8dc:	460c      	mov	r4, r1
 801b8de:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b8e2:	6923      	ldr	r3, [r4, #16]
 801b8e4:	6849      	ldr	r1, [r1, #4]
 801b8e6:	eb0a 0903 	add.w	r9, sl, r3
 801b8ea:	68a3      	ldr	r3, [r4, #8]
 801b8ec:	4607      	mov	r7, r0
 801b8ee:	4616      	mov	r6, r2
 801b8f0:	f109 0501 	add.w	r5, r9, #1
 801b8f4:	42ab      	cmp	r3, r5
 801b8f6:	db32      	blt.n	801b95e <__lshift+0x86>
 801b8f8:	4638      	mov	r0, r7
 801b8fa:	f7ff fded 	bl	801b4d8 <_Balloc>
 801b8fe:	2300      	movs	r3, #0
 801b900:	4680      	mov	r8, r0
 801b902:	f100 0114 	add.w	r1, r0, #20
 801b906:	461a      	mov	r2, r3
 801b908:	4553      	cmp	r3, sl
 801b90a:	db2b      	blt.n	801b964 <__lshift+0x8c>
 801b90c:	6920      	ldr	r0, [r4, #16]
 801b90e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b912:	f104 0314 	add.w	r3, r4, #20
 801b916:	f016 021f 	ands.w	r2, r6, #31
 801b91a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b91e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b922:	d025      	beq.n	801b970 <__lshift+0x98>
 801b924:	f1c2 0e20 	rsb	lr, r2, #32
 801b928:	2000      	movs	r0, #0
 801b92a:	681e      	ldr	r6, [r3, #0]
 801b92c:	468a      	mov	sl, r1
 801b92e:	4096      	lsls	r6, r2
 801b930:	4330      	orrs	r0, r6
 801b932:	f84a 0b04 	str.w	r0, [sl], #4
 801b936:	f853 0b04 	ldr.w	r0, [r3], #4
 801b93a:	459c      	cmp	ip, r3
 801b93c:	fa20 f00e 	lsr.w	r0, r0, lr
 801b940:	d814      	bhi.n	801b96c <__lshift+0x94>
 801b942:	6048      	str	r0, [r1, #4]
 801b944:	b108      	cbz	r0, 801b94a <__lshift+0x72>
 801b946:	f109 0502 	add.w	r5, r9, #2
 801b94a:	3d01      	subs	r5, #1
 801b94c:	4638      	mov	r0, r7
 801b94e:	f8c8 5010 	str.w	r5, [r8, #16]
 801b952:	4621      	mov	r1, r4
 801b954:	f7ff fdf4 	bl	801b540 <_Bfree>
 801b958:	4640      	mov	r0, r8
 801b95a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b95e:	3101      	adds	r1, #1
 801b960:	005b      	lsls	r3, r3, #1
 801b962:	e7c7      	b.n	801b8f4 <__lshift+0x1c>
 801b964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801b968:	3301      	adds	r3, #1
 801b96a:	e7cd      	b.n	801b908 <__lshift+0x30>
 801b96c:	4651      	mov	r1, sl
 801b96e:	e7dc      	b.n	801b92a <__lshift+0x52>
 801b970:	3904      	subs	r1, #4
 801b972:	f853 2b04 	ldr.w	r2, [r3], #4
 801b976:	f841 2f04 	str.w	r2, [r1, #4]!
 801b97a:	459c      	cmp	ip, r3
 801b97c:	d8f9      	bhi.n	801b972 <__lshift+0x9a>
 801b97e:	e7e4      	b.n	801b94a <__lshift+0x72>

0801b980 <__mcmp>:
 801b980:	6903      	ldr	r3, [r0, #16]
 801b982:	690a      	ldr	r2, [r1, #16]
 801b984:	1a9b      	subs	r3, r3, r2
 801b986:	b530      	push	{r4, r5, lr}
 801b988:	d10c      	bne.n	801b9a4 <__mcmp+0x24>
 801b98a:	0092      	lsls	r2, r2, #2
 801b98c:	3014      	adds	r0, #20
 801b98e:	3114      	adds	r1, #20
 801b990:	1884      	adds	r4, r0, r2
 801b992:	4411      	add	r1, r2
 801b994:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801b998:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801b99c:	4295      	cmp	r5, r2
 801b99e:	d003      	beq.n	801b9a8 <__mcmp+0x28>
 801b9a0:	d305      	bcc.n	801b9ae <__mcmp+0x2e>
 801b9a2:	2301      	movs	r3, #1
 801b9a4:	4618      	mov	r0, r3
 801b9a6:	bd30      	pop	{r4, r5, pc}
 801b9a8:	42a0      	cmp	r0, r4
 801b9aa:	d3f3      	bcc.n	801b994 <__mcmp+0x14>
 801b9ac:	e7fa      	b.n	801b9a4 <__mcmp+0x24>
 801b9ae:	f04f 33ff 	mov.w	r3, #4294967295
 801b9b2:	e7f7      	b.n	801b9a4 <__mcmp+0x24>

0801b9b4 <__mdiff>:
 801b9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9b8:	460d      	mov	r5, r1
 801b9ba:	4607      	mov	r7, r0
 801b9bc:	4611      	mov	r1, r2
 801b9be:	4628      	mov	r0, r5
 801b9c0:	4614      	mov	r4, r2
 801b9c2:	f7ff ffdd 	bl	801b980 <__mcmp>
 801b9c6:	1e06      	subs	r6, r0, #0
 801b9c8:	d108      	bne.n	801b9dc <__mdiff+0x28>
 801b9ca:	4631      	mov	r1, r6
 801b9cc:	4638      	mov	r0, r7
 801b9ce:	f7ff fd83 	bl	801b4d8 <_Balloc>
 801b9d2:	2301      	movs	r3, #1
 801b9d4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801b9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b9dc:	bfa4      	itt	ge
 801b9de:	4623      	movge	r3, r4
 801b9e0:	462c      	movge	r4, r5
 801b9e2:	4638      	mov	r0, r7
 801b9e4:	6861      	ldr	r1, [r4, #4]
 801b9e6:	bfa6      	itte	ge
 801b9e8:	461d      	movge	r5, r3
 801b9ea:	2600      	movge	r6, #0
 801b9ec:	2601      	movlt	r6, #1
 801b9ee:	f7ff fd73 	bl	801b4d8 <_Balloc>
 801b9f2:	692b      	ldr	r3, [r5, #16]
 801b9f4:	60c6      	str	r6, [r0, #12]
 801b9f6:	6926      	ldr	r6, [r4, #16]
 801b9f8:	f105 0914 	add.w	r9, r5, #20
 801b9fc:	f104 0214 	add.w	r2, r4, #20
 801ba00:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801ba04:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801ba08:	f100 0514 	add.w	r5, r0, #20
 801ba0c:	f04f 0e00 	mov.w	lr, #0
 801ba10:	f852 ab04 	ldr.w	sl, [r2], #4
 801ba14:	f859 4b04 	ldr.w	r4, [r9], #4
 801ba18:	fa1e f18a 	uxtah	r1, lr, sl
 801ba1c:	b2a3      	uxth	r3, r4
 801ba1e:	1ac9      	subs	r1, r1, r3
 801ba20:	0c23      	lsrs	r3, r4, #16
 801ba22:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801ba26:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801ba2a:	b289      	uxth	r1, r1
 801ba2c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801ba30:	45c8      	cmp	r8, r9
 801ba32:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801ba36:	4694      	mov	ip, r2
 801ba38:	f845 3b04 	str.w	r3, [r5], #4
 801ba3c:	d8e8      	bhi.n	801ba10 <__mdiff+0x5c>
 801ba3e:	45bc      	cmp	ip, r7
 801ba40:	d304      	bcc.n	801ba4c <__mdiff+0x98>
 801ba42:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801ba46:	b183      	cbz	r3, 801ba6a <__mdiff+0xb6>
 801ba48:	6106      	str	r6, [r0, #16]
 801ba4a:	e7c5      	b.n	801b9d8 <__mdiff+0x24>
 801ba4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801ba50:	fa1e f381 	uxtah	r3, lr, r1
 801ba54:	141a      	asrs	r2, r3, #16
 801ba56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801ba5a:	b29b      	uxth	r3, r3
 801ba5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ba60:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801ba64:	f845 3b04 	str.w	r3, [r5], #4
 801ba68:	e7e9      	b.n	801ba3e <__mdiff+0x8a>
 801ba6a:	3e01      	subs	r6, #1
 801ba6c:	e7e9      	b.n	801ba42 <__mdiff+0x8e>
	...

0801ba70 <__ulp>:
 801ba70:	4b12      	ldr	r3, [pc, #72]	; (801babc <__ulp+0x4c>)
 801ba72:	ee10 2a90 	vmov	r2, s1
 801ba76:	401a      	ands	r2, r3
 801ba78:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	dd04      	ble.n	801ba8a <__ulp+0x1a>
 801ba80:	2000      	movs	r0, #0
 801ba82:	4619      	mov	r1, r3
 801ba84:	ec41 0b10 	vmov	d0, r0, r1
 801ba88:	4770      	bx	lr
 801ba8a:	425b      	negs	r3, r3
 801ba8c:	151b      	asrs	r3, r3, #20
 801ba8e:	2b13      	cmp	r3, #19
 801ba90:	f04f 0000 	mov.w	r0, #0
 801ba94:	f04f 0100 	mov.w	r1, #0
 801ba98:	dc04      	bgt.n	801baa4 <__ulp+0x34>
 801ba9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801ba9e:	fa42 f103 	asr.w	r1, r2, r3
 801baa2:	e7ef      	b.n	801ba84 <__ulp+0x14>
 801baa4:	3b14      	subs	r3, #20
 801baa6:	2b1e      	cmp	r3, #30
 801baa8:	f04f 0201 	mov.w	r2, #1
 801baac:	bfda      	itte	le
 801baae:	f1c3 031f 	rsble	r3, r3, #31
 801bab2:	fa02 f303 	lslle.w	r3, r2, r3
 801bab6:	4613      	movgt	r3, r2
 801bab8:	4618      	mov	r0, r3
 801baba:	e7e3      	b.n	801ba84 <__ulp+0x14>
 801babc:	7ff00000 	.word	0x7ff00000

0801bac0 <__b2d>:
 801bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bac2:	6905      	ldr	r5, [r0, #16]
 801bac4:	f100 0714 	add.w	r7, r0, #20
 801bac8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801bacc:	1f2e      	subs	r6, r5, #4
 801bace:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801bad2:	4620      	mov	r0, r4
 801bad4:	f7ff fdc4 	bl	801b660 <__hi0bits>
 801bad8:	f1c0 0320 	rsb	r3, r0, #32
 801badc:	280a      	cmp	r0, #10
 801bade:	600b      	str	r3, [r1, #0]
 801bae0:	f8df c074 	ldr.w	ip, [pc, #116]	; 801bb58 <__b2d+0x98>
 801bae4:	dc14      	bgt.n	801bb10 <__b2d+0x50>
 801bae6:	f1c0 0e0b 	rsb	lr, r0, #11
 801baea:	fa24 f10e 	lsr.w	r1, r4, lr
 801baee:	42b7      	cmp	r7, r6
 801baf0:	ea41 030c 	orr.w	r3, r1, ip
 801baf4:	bf34      	ite	cc
 801baf6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bafa:	2100      	movcs	r1, #0
 801bafc:	3015      	adds	r0, #21
 801bafe:	fa04 f000 	lsl.w	r0, r4, r0
 801bb02:	fa21 f10e 	lsr.w	r1, r1, lr
 801bb06:	ea40 0201 	orr.w	r2, r0, r1
 801bb0a:	ec43 2b10 	vmov	d0, r2, r3
 801bb0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb10:	42b7      	cmp	r7, r6
 801bb12:	bf3a      	itte	cc
 801bb14:	f1a5 0608 	subcc.w	r6, r5, #8
 801bb18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801bb1c:	2100      	movcs	r1, #0
 801bb1e:	380b      	subs	r0, #11
 801bb20:	d015      	beq.n	801bb4e <__b2d+0x8e>
 801bb22:	4084      	lsls	r4, r0
 801bb24:	f1c0 0520 	rsb	r5, r0, #32
 801bb28:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 801bb2c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801bb30:	42be      	cmp	r6, r7
 801bb32:	fa21 fc05 	lsr.w	ip, r1, r5
 801bb36:	ea44 030c 	orr.w	r3, r4, ip
 801bb3a:	bf8c      	ite	hi
 801bb3c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801bb40:	2400      	movls	r4, #0
 801bb42:	fa01 f000 	lsl.w	r0, r1, r0
 801bb46:	40ec      	lsrs	r4, r5
 801bb48:	ea40 0204 	orr.w	r2, r0, r4
 801bb4c:	e7dd      	b.n	801bb0a <__b2d+0x4a>
 801bb4e:	ea44 030c 	orr.w	r3, r4, ip
 801bb52:	460a      	mov	r2, r1
 801bb54:	e7d9      	b.n	801bb0a <__b2d+0x4a>
 801bb56:	bf00      	nop
 801bb58:	3ff00000 	.word	0x3ff00000

0801bb5c <__d2b>:
 801bb5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bb60:	460e      	mov	r6, r1
 801bb62:	2101      	movs	r1, #1
 801bb64:	ec59 8b10 	vmov	r8, r9, d0
 801bb68:	4615      	mov	r5, r2
 801bb6a:	f7ff fcb5 	bl	801b4d8 <_Balloc>
 801bb6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801bb72:	4607      	mov	r7, r0
 801bb74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bb78:	bb34      	cbnz	r4, 801bbc8 <__d2b+0x6c>
 801bb7a:	9301      	str	r3, [sp, #4]
 801bb7c:	f1b8 0300 	subs.w	r3, r8, #0
 801bb80:	d027      	beq.n	801bbd2 <__d2b+0x76>
 801bb82:	a802      	add	r0, sp, #8
 801bb84:	f840 3d08 	str.w	r3, [r0, #-8]!
 801bb88:	f7ff fd89 	bl	801b69e <__lo0bits>
 801bb8c:	9900      	ldr	r1, [sp, #0]
 801bb8e:	b1f0      	cbz	r0, 801bbce <__d2b+0x72>
 801bb90:	9a01      	ldr	r2, [sp, #4]
 801bb92:	f1c0 0320 	rsb	r3, r0, #32
 801bb96:	fa02 f303 	lsl.w	r3, r2, r3
 801bb9a:	430b      	orrs	r3, r1
 801bb9c:	40c2      	lsrs	r2, r0
 801bb9e:	617b      	str	r3, [r7, #20]
 801bba0:	9201      	str	r2, [sp, #4]
 801bba2:	9b01      	ldr	r3, [sp, #4]
 801bba4:	61bb      	str	r3, [r7, #24]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	bf14      	ite	ne
 801bbaa:	2102      	movne	r1, #2
 801bbac:	2101      	moveq	r1, #1
 801bbae:	6139      	str	r1, [r7, #16]
 801bbb0:	b1c4      	cbz	r4, 801bbe4 <__d2b+0x88>
 801bbb2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801bbb6:	4404      	add	r4, r0
 801bbb8:	6034      	str	r4, [r6, #0]
 801bbba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bbbe:	6028      	str	r0, [r5, #0]
 801bbc0:	4638      	mov	r0, r7
 801bbc2:	b003      	add	sp, #12
 801bbc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bbc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bbcc:	e7d5      	b.n	801bb7a <__d2b+0x1e>
 801bbce:	6179      	str	r1, [r7, #20]
 801bbd0:	e7e7      	b.n	801bba2 <__d2b+0x46>
 801bbd2:	a801      	add	r0, sp, #4
 801bbd4:	f7ff fd63 	bl	801b69e <__lo0bits>
 801bbd8:	9b01      	ldr	r3, [sp, #4]
 801bbda:	617b      	str	r3, [r7, #20]
 801bbdc:	2101      	movs	r1, #1
 801bbde:	6139      	str	r1, [r7, #16]
 801bbe0:	3020      	adds	r0, #32
 801bbe2:	e7e5      	b.n	801bbb0 <__d2b+0x54>
 801bbe4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801bbe8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bbec:	6030      	str	r0, [r6, #0]
 801bbee:	6918      	ldr	r0, [r3, #16]
 801bbf0:	f7ff fd36 	bl	801b660 <__hi0bits>
 801bbf4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801bbf8:	e7e1      	b.n	801bbbe <__d2b+0x62>

0801bbfa <__ratio>:
 801bbfa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbfe:	4688      	mov	r8, r1
 801bc00:	4669      	mov	r1, sp
 801bc02:	4681      	mov	r9, r0
 801bc04:	f7ff ff5c 	bl	801bac0 <__b2d>
 801bc08:	a901      	add	r1, sp, #4
 801bc0a:	4640      	mov	r0, r8
 801bc0c:	ec57 6b10 	vmov	r6, r7, d0
 801bc10:	f7ff ff56 	bl	801bac0 <__b2d>
 801bc14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801bc18:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801bc1c:	eba3 0c02 	sub.w	ip, r3, r2
 801bc20:	e9dd 3200 	ldrd	r3, r2, [sp]
 801bc24:	1a9b      	subs	r3, r3, r2
 801bc26:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801bc2a:	ec5b ab10 	vmov	sl, fp, d0
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	bfce      	itee	gt
 801bc32:	463a      	movgt	r2, r7
 801bc34:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801bc38:	465a      	movle	r2, fp
 801bc3a:	4659      	mov	r1, fp
 801bc3c:	463d      	mov	r5, r7
 801bc3e:	bfd4      	ite	le
 801bc40:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 801bc44:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801bc48:	4630      	mov	r0, r6
 801bc4a:	ee10 2a10 	vmov	r2, s0
 801bc4e:	460b      	mov	r3, r1
 801bc50:	4629      	mov	r1, r5
 801bc52:	f7e4 fe13 	bl	800087c <__aeabi_ddiv>
 801bc56:	ec41 0b10 	vmov	d0, r0, r1
 801bc5a:	b003      	add	sp, #12
 801bc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc60 <__copybits>:
 801bc60:	3901      	subs	r1, #1
 801bc62:	b510      	push	{r4, lr}
 801bc64:	1149      	asrs	r1, r1, #5
 801bc66:	6914      	ldr	r4, [r2, #16]
 801bc68:	3101      	adds	r1, #1
 801bc6a:	f102 0314 	add.w	r3, r2, #20
 801bc6e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bc72:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801bc76:	42a3      	cmp	r3, r4
 801bc78:	4602      	mov	r2, r0
 801bc7a:	d303      	bcc.n	801bc84 <__copybits+0x24>
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	428a      	cmp	r2, r1
 801bc80:	d305      	bcc.n	801bc8e <__copybits+0x2e>
 801bc82:	bd10      	pop	{r4, pc}
 801bc84:	f853 2b04 	ldr.w	r2, [r3], #4
 801bc88:	f840 2b04 	str.w	r2, [r0], #4
 801bc8c:	e7f3      	b.n	801bc76 <__copybits+0x16>
 801bc8e:	f842 3b04 	str.w	r3, [r2], #4
 801bc92:	e7f4      	b.n	801bc7e <__copybits+0x1e>

0801bc94 <__any_on>:
 801bc94:	f100 0214 	add.w	r2, r0, #20
 801bc98:	6900      	ldr	r0, [r0, #16]
 801bc9a:	114b      	asrs	r3, r1, #5
 801bc9c:	4298      	cmp	r0, r3
 801bc9e:	b510      	push	{r4, lr}
 801bca0:	db11      	blt.n	801bcc6 <__any_on+0x32>
 801bca2:	dd0a      	ble.n	801bcba <__any_on+0x26>
 801bca4:	f011 011f 	ands.w	r1, r1, #31
 801bca8:	d007      	beq.n	801bcba <__any_on+0x26>
 801bcaa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bcae:	fa24 f001 	lsr.w	r0, r4, r1
 801bcb2:	fa00 f101 	lsl.w	r1, r0, r1
 801bcb6:	428c      	cmp	r4, r1
 801bcb8:	d10b      	bne.n	801bcd2 <__any_on+0x3e>
 801bcba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bcbe:	4293      	cmp	r3, r2
 801bcc0:	d803      	bhi.n	801bcca <__any_on+0x36>
 801bcc2:	2000      	movs	r0, #0
 801bcc4:	bd10      	pop	{r4, pc}
 801bcc6:	4603      	mov	r3, r0
 801bcc8:	e7f7      	b.n	801bcba <__any_on+0x26>
 801bcca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bcce:	2900      	cmp	r1, #0
 801bcd0:	d0f5      	beq.n	801bcbe <__any_on+0x2a>
 801bcd2:	2001      	movs	r0, #1
 801bcd4:	e7f6      	b.n	801bcc4 <__any_on+0x30>

0801bcd6 <_realloc_r>:
 801bcd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcd8:	4607      	mov	r7, r0
 801bcda:	4614      	mov	r4, r2
 801bcdc:	460e      	mov	r6, r1
 801bcde:	b921      	cbnz	r1, 801bcea <_realloc_r+0x14>
 801bce0:	4611      	mov	r1, r2
 801bce2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bce6:	f7fd bb81 	b.w	80193ec <_malloc_r>
 801bcea:	b922      	cbnz	r2, 801bcf6 <_realloc_r+0x20>
 801bcec:	f7fd fb30 	bl	8019350 <_free_r>
 801bcf0:	4625      	mov	r5, r4
 801bcf2:	4628      	mov	r0, r5
 801bcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcf6:	f000 fa0d 	bl	801c114 <_malloc_usable_size_r>
 801bcfa:	42a0      	cmp	r0, r4
 801bcfc:	d20f      	bcs.n	801bd1e <_realloc_r+0x48>
 801bcfe:	4621      	mov	r1, r4
 801bd00:	4638      	mov	r0, r7
 801bd02:	f7fd fb73 	bl	80193ec <_malloc_r>
 801bd06:	4605      	mov	r5, r0
 801bd08:	2800      	cmp	r0, #0
 801bd0a:	d0f2      	beq.n	801bcf2 <_realloc_r+0x1c>
 801bd0c:	4631      	mov	r1, r6
 801bd0e:	4622      	mov	r2, r4
 801bd10:	f7fd fae4 	bl	80192dc <memcpy>
 801bd14:	4631      	mov	r1, r6
 801bd16:	4638      	mov	r0, r7
 801bd18:	f7fd fb1a 	bl	8019350 <_free_r>
 801bd1c:	e7e9      	b.n	801bcf2 <_realloc_r+0x1c>
 801bd1e:	4635      	mov	r5, r6
 801bd20:	e7e7      	b.n	801bcf2 <_realloc_r+0x1c>

0801bd22 <__ssputs_r>:
 801bd22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd26:	688e      	ldr	r6, [r1, #8]
 801bd28:	429e      	cmp	r6, r3
 801bd2a:	4682      	mov	sl, r0
 801bd2c:	460c      	mov	r4, r1
 801bd2e:	4690      	mov	r8, r2
 801bd30:	4699      	mov	r9, r3
 801bd32:	d837      	bhi.n	801bda4 <__ssputs_r+0x82>
 801bd34:	898a      	ldrh	r2, [r1, #12]
 801bd36:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bd3a:	d031      	beq.n	801bda0 <__ssputs_r+0x7e>
 801bd3c:	6825      	ldr	r5, [r4, #0]
 801bd3e:	6909      	ldr	r1, [r1, #16]
 801bd40:	1a6f      	subs	r7, r5, r1
 801bd42:	6965      	ldr	r5, [r4, #20]
 801bd44:	2302      	movs	r3, #2
 801bd46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bd4a:	fb95 f5f3 	sdiv	r5, r5, r3
 801bd4e:	f109 0301 	add.w	r3, r9, #1
 801bd52:	443b      	add	r3, r7
 801bd54:	429d      	cmp	r5, r3
 801bd56:	bf38      	it	cc
 801bd58:	461d      	movcc	r5, r3
 801bd5a:	0553      	lsls	r3, r2, #21
 801bd5c:	d530      	bpl.n	801bdc0 <__ssputs_r+0x9e>
 801bd5e:	4629      	mov	r1, r5
 801bd60:	f7fd fb44 	bl	80193ec <_malloc_r>
 801bd64:	4606      	mov	r6, r0
 801bd66:	b950      	cbnz	r0, 801bd7e <__ssputs_r+0x5c>
 801bd68:	230c      	movs	r3, #12
 801bd6a:	f8ca 3000 	str.w	r3, [sl]
 801bd6e:	89a3      	ldrh	r3, [r4, #12]
 801bd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bd74:	81a3      	strh	r3, [r4, #12]
 801bd76:	f04f 30ff 	mov.w	r0, #4294967295
 801bd7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd7e:	463a      	mov	r2, r7
 801bd80:	6921      	ldr	r1, [r4, #16]
 801bd82:	f7fd faab 	bl	80192dc <memcpy>
 801bd86:	89a3      	ldrh	r3, [r4, #12]
 801bd88:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bd8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bd90:	81a3      	strh	r3, [r4, #12]
 801bd92:	6126      	str	r6, [r4, #16]
 801bd94:	6165      	str	r5, [r4, #20]
 801bd96:	443e      	add	r6, r7
 801bd98:	1bed      	subs	r5, r5, r7
 801bd9a:	6026      	str	r6, [r4, #0]
 801bd9c:	60a5      	str	r5, [r4, #8]
 801bd9e:	464e      	mov	r6, r9
 801bda0:	454e      	cmp	r6, r9
 801bda2:	d900      	bls.n	801bda6 <__ssputs_r+0x84>
 801bda4:	464e      	mov	r6, r9
 801bda6:	4632      	mov	r2, r6
 801bda8:	4641      	mov	r1, r8
 801bdaa:	6820      	ldr	r0, [r4, #0]
 801bdac:	f7fd faa1 	bl	80192f2 <memmove>
 801bdb0:	68a3      	ldr	r3, [r4, #8]
 801bdb2:	1b9b      	subs	r3, r3, r6
 801bdb4:	60a3      	str	r3, [r4, #8]
 801bdb6:	6823      	ldr	r3, [r4, #0]
 801bdb8:	441e      	add	r6, r3
 801bdba:	6026      	str	r6, [r4, #0]
 801bdbc:	2000      	movs	r0, #0
 801bdbe:	e7dc      	b.n	801bd7a <__ssputs_r+0x58>
 801bdc0:	462a      	mov	r2, r5
 801bdc2:	f7ff ff88 	bl	801bcd6 <_realloc_r>
 801bdc6:	4606      	mov	r6, r0
 801bdc8:	2800      	cmp	r0, #0
 801bdca:	d1e2      	bne.n	801bd92 <__ssputs_r+0x70>
 801bdcc:	6921      	ldr	r1, [r4, #16]
 801bdce:	4650      	mov	r0, sl
 801bdd0:	f7fd fabe 	bl	8019350 <_free_r>
 801bdd4:	e7c8      	b.n	801bd68 <__ssputs_r+0x46>
	...

0801bdd8 <_svfiprintf_r>:
 801bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bddc:	461d      	mov	r5, r3
 801bdde:	898b      	ldrh	r3, [r1, #12]
 801bde0:	061f      	lsls	r7, r3, #24
 801bde2:	b09d      	sub	sp, #116	; 0x74
 801bde4:	4680      	mov	r8, r0
 801bde6:	460c      	mov	r4, r1
 801bde8:	4616      	mov	r6, r2
 801bdea:	d50f      	bpl.n	801be0c <_svfiprintf_r+0x34>
 801bdec:	690b      	ldr	r3, [r1, #16]
 801bdee:	b96b      	cbnz	r3, 801be0c <_svfiprintf_r+0x34>
 801bdf0:	2140      	movs	r1, #64	; 0x40
 801bdf2:	f7fd fafb 	bl	80193ec <_malloc_r>
 801bdf6:	6020      	str	r0, [r4, #0]
 801bdf8:	6120      	str	r0, [r4, #16]
 801bdfa:	b928      	cbnz	r0, 801be08 <_svfiprintf_r+0x30>
 801bdfc:	230c      	movs	r3, #12
 801bdfe:	f8c8 3000 	str.w	r3, [r8]
 801be02:	f04f 30ff 	mov.w	r0, #4294967295
 801be06:	e0c8      	b.n	801bf9a <_svfiprintf_r+0x1c2>
 801be08:	2340      	movs	r3, #64	; 0x40
 801be0a:	6163      	str	r3, [r4, #20]
 801be0c:	2300      	movs	r3, #0
 801be0e:	9309      	str	r3, [sp, #36]	; 0x24
 801be10:	2320      	movs	r3, #32
 801be12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801be16:	2330      	movs	r3, #48	; 0x30
 801be18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801be1c:	9503      	str	r5, [sp, #12]
 801be1e:	f04f 0b01 	mov.w	fp, #1
 801be22:	4637      	mov	r7, r6
 801be24:	463d      	mov	r5, r7
 801be26:	f815 3b01 	ldrb.w	r3, [r5], #1
 801be2a:	b10b      	cbz	r3, 801be30 <_svfiprintf_r+0x58>
 801be2c:	2b25      	cmp	r3, #37	; 0x25
 801be2e:	d13e      	bne.n	801beae <_svfiprintf_r+0xd6>
 801be30:	ebb7 0a06 	subs.w	sl, r7, r6
 801be34:	d00b      	beq.n	801be4e <_svfiprintf_r+0x76>
 801be36:	4653      	mov	r3, sl
 801be38:	4632      	mov	r2, r6
 801be3a:	4621      	mov	r1, r4
 801be3c:	4640      	mov	r0, r8
 801be3e:	f7ff ff70 	bl	801bd22 <__ssputs_r>
 801be42:	3001      	adds	r0, #1
 801be44:	f000 80a4 	beq.w	801bf90 <_svfiprintf_r+0x1b8>
 801be48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be4a:	4453      	add	r3, sl
 801be4c:	9309      	str	r3, [sp, #36]	; 0x24
 801be4e:	783b      	ldrb	r3, [r7, #0]
 801be50:	2b00      	cmp	r3, #0
 801be52:	f000 809d 	beq.w	801bf90 <_svfiprintf_r+0x1b8>
 801be56:	2300      	movs	r3, #0
 801be58:	f04f 32ff 	mov.w	r2, #4294967295
 801be5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801be60:	9304      	str	r3, [sp, #16]
 801be62:	9307      	str	r3, [sp, #28]
 801be64:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801be68:	931a      	str	r3, [sp, #104]	; 0x68
 801be6a:	462f      	mov	r7, r5
 801be6c:	2205      	movs	r2, #5
 801be6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 801be72:	4850      	ldr	r0, [pc, #320]	; (801bfb4 <_svfiprintf_r+0x1dc>)
 801be74:	f7e4 f9cc 	bl	8000210 <memchr>
 801be78:	9b04      	ldr	r3, [sp, #16]
 801be7a:	b9d0      	cbnz	r0, 801beb2 <_svfiprintf_r+0xda>
 801be7c:	06d9      	lsls	r1, r3, #27
 801be7e:	bf44      	itt	mi
 801be80:	2220      	movmi	r2, #32
 801be82:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801be86:	071a      	lsls	r2, r3, #28
 801be88:	bf44      	itt	mi
 801be8a:	222b      	movmi	r2, #43	; 0x2b
 801be8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801be90:	782a      	ldrb	r2, [r5, #0]
 801be92:	2a2a      	cmp	r2, #42	; 0x2a
 801be94:	d015      	beq.n	801bec2 <_svfiprintf_r+0xea>
 801be96:	9a07      	ldr	r2, [sp, #28]
 801be98:	462f      	mov	r7, r5
 801be9a:	2000      	movs	r0, #0
 801be9c:	250a      	movs	r5, #10
 801be9e:	4639      	mov	r1, r7
 801bea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bea4:	3b30      	subs	r3, #48	; 0x30
 801bea6:	2b09      	cmp	r3, #9
 801bea8:	d94d      	bls.n	801bf46 <_svfiprintf_r+0x16e>
 801beaa:	b1b8      	cbz	r0, 801bedc <_svfiprintf_r+0x104>
 801beac:	e00f      	b.n	801bece <_svfiprintf_r+0xf6>
 801beae:	462f      	mov	r7, r5
 801beb0:	e7b8      	b.n	801be24 <_svfiprintf_r+0x4c>
 801beb2:	4a40      	ldr	r2, [pc, #256]	; (801bfb4 <_svfiprintf_r+0x1dc>)
 801beb4:	1a80      	subs	r0, r0, r2
 801beb6:	fa0b f000 	lsl.w	r0, fp, r0
 801beba:	4318      	orrs	r0, r3
 801bebc:	9004      	str	r0, [sp, #16]
 801bebe:	463d      	mov	r5, r7
 801bec0:	e7d3      	b.n	801be6a <_svfiprintf_r+0x92>
 801bec2:	9a03      	ldr	r2, [sp, #12]
 801bec4:	1d11      	adds	r1, r2, #4
 801bec6:	6812      	ldr	r2, [r2, #0]
 801bec8:	9103      	str	r1, [sp, #12]
 801beca:	2a00      	cmp	r2, #0
 801becc:	db01      	blt.n	801bed2 <_svfiprintf_r+0xfa>
 801bece:	9207      	str	r2, [sp, #28]
 801bed0:	e004      	b.n	801bedc <_svfiprintf_r+0x104>
 801bed2:	4252      	negs	r2, r2
 801bed4:	f043 0302 	orr.w	r3, r3, #2
 801bed8:	9207      	str	r2, [sp, #28]
 801beda:	9304      	str	r3, [sp, #16]
 801bedc:	783b      	ldrb	r3, [r7, #0]
 801bede:	2b2e      	cmp	r3, #46	; 0x2e
 801bee0:	d10c      	bne.n	801befc <_svfiprintf_r+0x124>
 801bee2:	787b      	ldrb	r3, [r7, #1]
 801bee4:	2b2a      	cmp	r3, #42	; 0x2a
 801bee6:	d133      	bne.n	801bf50 <_svfiprintf_r+0x178>
 801bee8:	9b03      	ldr	r3, [sp, #12]
 801beea:	1d1a      	adds	r2, r3, #4
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	9203      	str	r2, [sp, #12]
 801bef0:	2b00      	cmp	r3, #0
 801bef2:	bfb8      	it	lt
 801bef4:	f04f 33ff 	movlt.w	r3, #4294967295
 801bef8:	3702      	adds	r7, #2
 801befa:	9305      	str	r3, [sp, #20]
 801befc:	4d2e      	ldr	r5, [pc, #184]	; (801bfb8 <_svfiprintf_r+0x1e0>)
 801befe:	7839      	ldrb	r1, [r7, #0]
 801bf00:	2203      	movs	r2, #3
 801bf02:	4628      	mov	r0, r5
 801bf04:	f7e4 f984 	bl	8000210 <memchr>
 801bf08:	b138      	cbz	r0, 801bf1a <_svfiprintf_r+0x142>
 801bf0a:	2340      	movs	r3, #64	; 0x40
 801bf0c:	1b40      	subs	r0, r0, r5
 801bf0e:	fa03 f000 	lsl.w	r0, r3, r0
 801bf12:	9b04      	ldr	r3, [sp, #16]
 801bf14:	4303      	orrs	r3, r0
 801bf16:	3701      	adds	r7, #1
 801bf18:	9304      	str	r3, [sp, #16]
 801bf1a:	7839      	ldrb	r1, [r7, #0]
 801bf1c:	4827      	ldr	r0, [pc, #156]	; (801bfbc <_svfiprintf_r+0x1e4>)
 801bf1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bf22:	2206      	movs	r2, #6
 801bf24:	1c7e      	adds	r6, r7, #1
 801bf26:	f7e4 f973 	bl	8000210 <memchr>
 801bf2a:	2800      	cmp	r0, #0
 801bf2c:	d038      	beq.n	801bfa0 <_svfiprintf_r+0x1c8>
 801bf2e:	4b24      	ldr	r3, [pc, #144]	; (801bfc0 <_svfiprintf_r+0x1e8>)
 801bf30:	bb13      	cbnz	r3, 801bf78 <_svfiprintf_r+0x1a0>
 801bf32:	9b03      	ldr	r3, [sp, #12]
 801bf34:	3307      	adds	r3, #7
 801bf36:	f023 0307 	bic.w	r3, r3, #7
 801bf3a:	3308      	adds	r3, #8
 801bf3c:	9303      	str	r3, [sp, #12]
 801bf3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bf40:	444b      	add	r3, r9
 801bf42:	9309      	str	r3, [sp, #36]	; 0x24
 801bf44:	e76d      	b.n	801be22 <_svfiprintf_r+0x4a>
 801bf46:	fb05 3202 	mla	r2, r5, r2, r3
 801bf4a:	2001      	movs	r0, #1
 801bf4c:	460f      	mov	r7, r1
 801bf4e:	e7a6      	b.n	801be9e <_svfiprintf_r+0xc6>
 801bf50:	2300      	movs	r3, #0
 801bf52:	3701      	adds	r7, #1
 801bf54:	9305      	str	r3, [sp, #20]
 801bf56:	4619      	mov	r1, r3
 801bf58:	250a      	movs	r5, #10
 801bf5a:	4638      	mov	r0, r7
 801bf5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bf60:	3a30      	subs	r2, #48	; 0x30
 801bf62:	2a09      	cmp	r2, #9
 801bf64:	d903      	bls.n	801bf6e <_svfiprintf_r+0x196>
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d0c8      	beq.n	801befc <_svfiprintf_r+0x124>
 801bf6a:	9105      	str	r1, [sp, #20]
 801bf6c:	e7c6      	b.n	801befc <_svfiprintf_r+0x124>
 801bf6e:	fb05 2101 	mla	r1, r5, r1, r2
 801bf72:	2301      	movs	r3, #1
 801bf74:	4607      	mov	r7, r0
 801bf76:	e7f0      	b.n	801bf5a <_svfiprintf_r+0x182>
 801bf78:	ab03      	add	r3, sp, #12
 801bf7a:	9300      	str	r3, [sp, #0]
 801bf7c:	4622      	mov	r2, r4
 801bf7e:	4b11      	ldr	r3, [pc, #68]	; (801bfc4 <_svfiprintf_r+0x1ec>)
 801bf80:	a904      	add	r1, sp, #16
 801bf82:	4640      	mov	r0, r8
 801bf84:	f3af 8000 	nop.w
 801bf88:	f1b0 3fff 	cmp.w	r0, #4294967295
 801bf8c:	4681      	mov	r9, r0
 801bf8e:	d1d6      	bne.n	801bf3e <_svfiprintf_r+0x166>
 801bf90:	89a3      	ldrh	r3, [r4, #12]
 801bf92:	065b      	lsls	r3, r3, #25
 801bf94:	f53f af35 	bmi.w	801be02 <_svfiprintf_r+0x2a>
 801bf98:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bf9a:	b01d      	add	sp, #116	; 0x74
 801bf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfa0:	ab03      	add	r3, sp, #12
 801bfa2:	9300      	str	r3, [sp, #0]
 801bfa4:	4622      	mov	r2, r4
 801bfa6:	4b07      	ldr	r3, [pc, #28]	; (801bfc4 <_svfiprintf_r+0x1ec>)
 801bfa8:	a904      	add	r1, sp, #16
 801bfaa:	4640      	mov	r0, r8
 801bfac:	f7fd fc2e 	bl	801980c <_printf_i>
 801bfb0:	e7ea      	b.n	801bf88 <_svfiprintf_r+0x1b0>
 801bfb2:	bf00      	nop
 801bfb4:	0803e868 	.word	0x0803e868
 801bfb8:	0803e86e 	.word	0x0803e86e
 801bfbc:	0803e872 	.word	0x0803e872
 801bfc0:	00000000 	.word	0x00000000
 801bfc4:	0801bd23 	.word	0x0801bd23

0801bfc8 <__sread>:
 801bfc8:	b510      	push	{r4, lr}
 801bfca:	460c      	mov	r4, r1
 801bfcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bfd0:	f000 f8a8 	bl	801c124 <_read_r>
 801bfd4:	2800      	cmp	r0, #0
 801bfd6:	bfab      	itete	ge
 801bfd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bfda:	89a3      	ldrhlt	r3, [r4, #12]
 801bfdc:	181b      	addge	r3, r3, r0
 801bfde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bfe2:	bfac      	ite	ge
 801bfe4:	6563      	strge	r3, [r4, #84]	; 0x54
 801bfe6:	81a3      	strhlt	r3, [r4, #12]
 801bfe8:	bd10      	pop	{r4, pc}

0801bfea <__swrite>:
 801bfea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfee:	461f      	mov	r7, r3
 801bff0:	898b      	ldrh	r3, [r1, #12]
 801bff2:	05db      	lsls	r3, r3, #23
 801bff4:	4605      	mov	r5, r0
 801bff6:	460c      	mov	r4, r1
 801bff8:	4616      	mov	r6, r2
 801bffa:	d505      	bpl.n	801c008 <__swrite+0x1e>
 801bffc:	2302      	movs	r3, #2
 801bffe:	2200      	movs	r2, #0
 801c000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c004:	f000 f874 	bl	801c0f0 <_lseek_r>
 801c008:	89a3      	ldrh	r3, [r4, #12]
 801c00a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c00e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c012:	81a3      	strh	r3, [r4, #12]
 801c014:	4632      	mov	r2, r6
 801c016:	463b      	mov	r3, r7
 801c018:	4628      	mov	r0, r5
 801c01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c01e:	f000 b823 	b.w	801c068 <_write_r>

0801c022 <__sseek>:
 801c022:	b510      	push	{r4, lr}
 801c024:	460c      	mov	r4, r1
 801c026:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c02a:	f000 f861 	bl	801c0f0 <_lseek_r>
 801c02e:	1c43      	adds	r3, r0, #1
 801c030:	89a3      	ldrh	r3, [r4, #12]
 801c032:	bf15      	itete	ne
 801c034:	6560      	strne	r0, [r4, #84]	; 0x54
 801c036:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c03a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c03e:	81a3      	strheq	r3, [r4, #12]
 801c040:	bf18      	it	ne
 801c042:	81a3      	strhne	r3, [r4, #12]
 801c044:	bd10      	pop	{r4, pc}

0801c046 <__sclose>:
 801c046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c04a:	f000 b81f 	b.w	801c08c <_close_r>

0801c04e <__ascii_wctomb>:
 801c04e:	b149      	cbz	r1, 801c064 <__ascii_wctomb+0x16>
 801c050:	2aff      	cmp	r2, #255	; 0xff
 801c052:	bf85      	ittet	hi
 801c054:	238a      	movhi	r3, #138	; 0x8a
 801c056:	6003      	strhi	r3, [r0, #0]
 801c058:	700a      	strbls	r2, [r1, #0]
 801c05a:	f04f 30ff 	movhi.w	r0, #4294967295
 801c05e:	bf98      	it	ls
 801c060:	2001      	movls	r0, #1
 801c062:	4770      	bx	lr
 801c064:	4608      	mov	r0, r1
 801c066:	4770      	bx	lr

0801c068 <_write_r>:
 801c068:	b538      	push	{r3, r4, r5, lr}
 801c06a:	4c07      	ldr	r4, [pc, #28]	; (801c088 <_write_r+0x20>)
 801c06c:	4605      	mov	r5, r0
 801c06e:	4608      	mov	r0, r1
 801c070:	4611      	mov	r1, r2
 801c072:	2200      	movs	r2, #0
 801c074:	6022      	str	r2, [r4, #0]
 801c076:	461a      	mov	r2, r3
 801c078:	f7eb f917 	bl	80072aa <_write>
 801c07c:	1c43      	adds	r3, r0, #1
 801c07e:	d102      	bne.n	801c086 <_write_r+0x1e>
 801c080:	6823      	ldr	r3, [r4, #0]
 801c082:	b103      	cbz	r3, 801c086 <_write_r+0x1e>
 801c084:	602b      	str	r3, [r5, #0]
 801c086:	bd38      	pop	{r3, r4, r5, pc}
 801c088:	200009d8 	.word	0x200009d8

0801c08c <_close_r>:
 801c08c:	b538      	push	{r3, r4, r5, lr}
 801c08e:	4c06      	ldr	r4, [pc, #24]	; (801c0a8 <_close_r+0x1c>)
 801c090:	2300      	movs	r3, #0
 801c092:	4605      	mov	r5, r0
 801c094:	4608      	mov	r0, r1
 801c096:	6023      	str	r3, [r4, #0]
 801c098:	f7eb f923 	bl	80072e2 <_close>
 801c09c:	1c43      	adds	r3, r0, #1
 801c09e:	d102      	bne.n	801c0a6 <_close_r+0x1a>
 801c0a0:	6823      	ldr	r3, [r4, #0]
 801c0a2:	b103      	cbz	r3, 801c0a6 <_close_r+0x1a>
 801c0a4:	602b      	str	r3, [r5, #0]
 801c0a6:	bd38      	pop	{r3, r4, r5, pc}
 801c0a8:	200009d8 	.word	0x200009d8

0801c0ac <_fstat_r>:
 801c0ac:	b538      	push	{r3, r4, r5, lr}
 801c0ae:	4c07      	ldr	r4, [pc, #28]	; (801c0cc <_fstat_r+0x20>)
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	4605      	mov	r5, r0
 801c0b4:	4608      	mov	r0, r1
 801c0b6:	4611      	mov	r1, r2
 801c0b8:	6023      	str	r3, [r4, #0]
 801c0ba:	f7eb f91e 	bl	80072fa <_fstat>
 801c0be:	1c43      	adds	r3, r0, #1
 801c0c0:	d102      	bne.n	801c0c8 <_fstat_r+0x1c>
 801c0c2:	6823      	ldr	r3, [r4, #0]
 801c0c4:	b103      	cbz	r3, 801c0c8 <_fstat_r+0x1c>
 801c0c6:	602b      	str	r3, [r5, #0]
 801c0c8:	bd38      	pop	{r3, r4, r5, pc}
 801c0ca:	bf00      	nop
 801c0cc:	200009d8 	.word	0x200009d8

0801c0d0 <_isatty_r>:
 801c0d0:	b538      	push	{r3, r4, r5, lr}
 801c0d2:	4c06      	ldr	r4, [pc, #24]	; (801c0ec <_isatty_r+0x1c>)
 801c0d4:	2300      	movs	r3, #0
 801c0d6:	4605      	mov	r5, r0
 801c0d8:	4608      	mov	r0, r1
 801c0da:	6023      	str	r3, [r4, #0]
 801c0dc:	f7eb f91d 	bl	800731a <_isatty>
 801c0e0:	1c43      	adds	r3, r0, #1
 801c0e2:	d102      	bne.n	801c0ea <_isatty_r+0x1a>
 801c0e4:	6823      	ldr	r3, [r4, #0]
 801c0e6:	b103      	cbz	r3, 801c0ea <_isatty_r+0x1a>
 801c0e8:	602b      	str	r3, [r5, #0]
 801c0ea:	bd38      	pop	{r3, r4, r5, pc}
 801c0ec:	200009d8 	.word	0x200009d8

0801c0f0 <_lseek_r>:
 801c0f0:	b538      	push	{r3, r4, r5, lr}
 801c0f2:	4c07      	ldr	r4, [pc, #28]	; (801c110 <_lseek_r+0x20>)
 801c0f4:	4605      	mov	r5, r0
 801c0f6:	4608      	mov	r0, r1
 801c0f8:	4611      	mov	r1, r2
 801c0fa:	2200      	movs	r2, #0
 801c0fc:	6022      	str	r2, [r4, #0]
 801c0fe:	461a      	mov	r2, r3
 801c100:	f7eb f916 	bl	8007330 <_lseek>
 801c104:	1c43      	adds	r3, r0, #1
 801c106:	d102      	bne.n	801c10e <_lseek_r+0x1e>
 801c108:	6823      	ldr	r3, [r4, #0]
 801c10a:	b103      	cbz	r3, 801c10e <_lseek_r+0x1e>
 801c10c:	602b      	str	r3, [r5, #0]
 801c10e:	bd38      	pop	{r3, r4, r5, pc}
 801c110:	200009d8 	.word	0x200009d8

0801c114 <_malloc_usable_size_r>:
 801c114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c118:	1f18      	subs	r0, r3, #4
 801c11a:	2b00      	cmp	r3, #0
 801c11c:	bfbc      	itt	lt
 801c11e:	580b      	ldrlt	r3, [r1, r0]
 801c120:	18c0      	addlt	r0, r0, r3
 801c122:	4770      	bx	lr

0801c124 <_read_r>:
 801c124:	b538      	push	{r3, r4, r5, lr}
 801c126:	4c07      	ldr	r4, [pc, #28]	; (801c144 <_read_r+0x20>)
 801c128:	4605      	mov	r5, r0
 801c12a:	4608      	mov	r0, r1
 801c12c:	4611      	mov	r1, r2
 801c12e:	2200      	movs	r2, #0
 801c130:	6022      	str	r2, [r4, #0]
 801c132:	461a      	mov	r2, r3
 801c134:	f7eb f89c 	bl	8007270 <_read>
 801c138:	1c43      	adds	r3, r0, #1
 801c13a:	d102      	bne.n	801c142 <_read_r+0x1e>
 801c13c:	6823      	ldr	r3, [r4, #0]
 801c13e:	b103      	cbz	r3, 801c142 <_read_r+0x1e>
 801c140:	602b      	str	r3, [r5, #0]
 801c142:	bd38      	pop	{r3, r4, r5, pc}
 801c144:	200009d8 	.word	0x200009d8

0801c148 <_init>:
 801c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c14a:	bf00      	nop
 801c14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c14e:	bc08      	pop	{r3}
 801c150:	469e      	mov	lr, r3
 801c152:	4770      	bx	lr

0801c154 <_fini>:
 801c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c156:	bf00      	nop
 801c158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c15a:	bc08      	pop	{r3}
 801c15c:	469e      	mov	lr, r3
 801c15e:	4770      	bx	lr
